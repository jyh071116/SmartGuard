digraph G {
// Function: 793.sol-AMLToken-AMLToken(string,string,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
BurnableCrowdsaleToken(_name,_symbol,_initialSupply,_decimals,_mintable)

IRs:
INTERNAL_CALL, BurnableCrowdsaleToken.BurnableCrowdsaleToken(string,string,uint256,uint256,bool)(_name,_symbol,_initialSupply,_decimals,_mintable)"];
}
// Function: 793.sol-AMLToken-BurnableCrowdsaleToken(string,string,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
CrowdsaleToken(_name,_symbol,_initialSupply,_decimals,_mintable)

IRs:
INTERNAL_CALL, CrowdsaleToken.CrowdsaleToken(string,string,uint256,uint256,bool)(_name,_symbol,_initialSupply,_decimals,_mintable)"];
}
// Function: 793.sol-AMLToken-CrowdsaleToken(string,string,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = _initialSupply

IRs:
totalSupply_(uint256) := _initialSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint256) := _decimals(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[owner] = totalSupply_

IRs:
REF_387(uint256) -> balances[owner]
REF_387(uint256) (->balances) := totalSupply_(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
totalSupply_ > 0

IRs:
TMP_477(bool) = totalSupply_ > 0
CONDITION TMP_477"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Minted(owner,totalSupply_)

IRs:
Emit Minted(owner,totalSupply_)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
! _mintable

IRs:
TMP_479 = UnaryType.BANG _mintable 
CONDITION TMP_479"];
10->11[label="True"];
10->15[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
totalSupply_ == 0

IRs:
TMP_480(bool) = totalSupply_ == 0
CONDITION TMP_480"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
revert()()

IRs:
TMP_481(None) = SOLIDITY_CALL revert()()"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
UpgradeableToken(msg.sender)

IRs:
INTERNAL_CALL, UpgradeableToken.UpgradeableToken(address)(msg.sender)"];
16->1;
}
// Function: 793.sol-AMLToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 793.sol-AMLToken-UpgradeableToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradeMaster = _upgradeMaster

IRs:
upgradeMaster(address) := _upgradeMaster(address)"];
}
// Function: 793.sol-AMLToken-allowance(address,address)
digraph{
}
// Function: 793.sol-AMLToken-approve(address,uint256)
digraph{
}
// Function: 793.sol-AMLToken-balanceOf(address)
digraph{
}
// Function: 793.sol-AMLToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[burner] = balances[burner].sub(burnAmount)

IRs:
REF_452(uint256) -> balances[burner]
REF_453(uint256) -> balances[burner]
TMP_575(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_453', 'burnAmount'] 
REF_452(uint256) (->balances) := TMP_575(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(burnAmount)

IRs:
TMP_576(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', 'burnAmount'] 
totalSupply_(uint256) := TMP_576(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burned(burner,burnAmount)

IRs:
Emit Burned(burner,burnAmount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(burner,BURN_ADDRESS,burnAmount)

IRs:
Emit Transfer(burner,BURN_ADDRESS,burnAmount)"];
}
// Function: 793.sol-AMLToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
mintingFinished

IRs:
CONDITION mintingFinished"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_589(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-AMLToken-canTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
lockAddresses[_sender]

IRs:
REF_463(bool) -> lockAddresses[_sender]
CONDITION REF_463"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_592(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! released

IRs:
TMP_593 = UnaryType.BANG released 
CONDITION TMP_593"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
! transferAgents[_sender]

IRs:
REF_464(bool) -> transferAgents[_sender]
TMP_594 = UnaryType.BANG REF_464 
CONDITION TMP_594"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_595(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: _ 9
"];
}
// Function: 793.sol-AMLToken-canUpgrade()
digraph{
}
// Function: 793.sol-AMLToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_428(mapping(address => uint256)) -> allowed[msg.sender]
REF_429(uint256) -> REF_428[_spender]
oldValue(uint256) := REF_429(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_541(bool) = _subtractedValue > oldValue
CONDITION TMP_541"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_430(mapping(address => uint256)) -> allowed[msg.sender]
REF_431(uint256) -> REF_430[_spender]
REF_431(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_432(mapping(address => uint256)) -> allowed[msg.sender]
REF_433(uint256) -> REF_432[_spender]
TMP_542(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_433(uint256) (->allowed) := TMP_542(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_435(mapping(address => uint256)) -> allowed[msg.sender]
REF_436(uint256) -> REF_435[_spender]
Emit Approval(msg.sender,_spender,REF_436)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-AMLToken-getUpgradeState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_518(bool) = INTERNAL_CALL, CrowdsaleToken.canUpgrade()()
TMP_519 = UnaryType.BANG TMP_518 
CONDITION TMP_519"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
UpgradeState.NotAllowed

IRs:
REF_399(UpgradeableToken.UpgradeState) -> UpgradeState.NotAllowed
RETURN REF_399"];
3[label="Node Type: IF 3

EXPRESSION:
address(upgradeAgent) == 0x00

IRs:
TMP_520 = CONVERT upgradeAgent to address
TMP_521(bool) = TMP_520 == 0
CONDITION TMP_521"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
UpgradeState.WaitingForAgent

IRs:
REF_400(UpgradeableToken.UpgradeState) -> UpgradeState.WaitingForAgent
RETURN REF_400"];
5[label="Node Type: IF 5

EXPRESSION:
totalUpgraded == 0

IRs:
TMP_522(bool) = totalUpgraded == 0
CONDITION TMP_522"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
UpgradeState.ReadyToUpgrade

IRs:
REF_401(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
RETURN REF_401"];
7[label="Node Type: RETURN 7

EXPRESSION:
UpgradeState.Upgrading

IRs:
REF_402(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
RETURN REF_402"];
}
// Function: 793.sol-AMLToken-inReleaseState(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
releaseState != released

IRs:
TMP_596(bool) = releaseState != released
CONDITION TMP_596"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_597(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-AMLToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_421(mapping(address => uint256)) -> allowed[msg.sender]
REF_422(uint256) -> REF_421[_spender]
REF_423(mapping(address => uint256)) -> allowed[msg.sender]
REF_424(uint256) -> REF_423[_spender]
TMP_539(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_424', '_addedValue'] 
REF_422(uint256) (->allowed) := TMP_539(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_426(mapping(address => uint256)) -> allowed[msg.sender]
REF_427(uint256) -> REF_426[_spender]
Emit Approval(msg.sender,_spender,REF_427)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-AMLToken-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 793.sol-AMLToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.plus(amount)

IRs:
TMP_552(uint256) = LIBRARY_CALL, dest:SafeMathLib, function:SafeMathLib.plus(uint256,uint256), arguments:['totalSupply_', 'amount'] 
totalSupply_(uint256) := TMP_552(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[receiver] = balances[receiver].plus(amount)

IRs:
REF_446(uint256) -> balances[receiver]
REF_447(uint256) -> balances[receiver]
TMP_553(uint256) = LIBRARY_CALL, dest:SafeMathLib, function:SafeMathLib.plus(uint256,uint256), arguments:['REF_447', 'amount'] 
REF_446(uint256) (->balances) := TMP_553(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0,receiver,amount)

IRs:
Emit Transfer(0,receiver,amount)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableToken.onlyMintAgent()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 793.sol-AMLToken-onlyMintAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! mintAgents[msg.sender]

IRs:
REF_462(bool) -> mintAgents[msg.sender]
TMP_587 = UnaryType.BANG REF_462 
CONDITION TMP_587"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_588(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-AMLToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_590(bool) = msg.sender == owner
TMP_591(None) = SOLIDITY_CALL require(bool)(TMP_590)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 793.sol-AMLToken-onlyReleaseAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != releaseAgent

IRs:
TMP_598(bool) = msg.sender != releaseAgent
CONDITION TMP_598"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_599(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-AMLToken-releaseTokenTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
released = true

IRs:
released(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyReleaseAgent()

IRs:
MODIFIER_CALL, ReleasableToken.onlyReleaseAgent()()"];
2->1;
}
// Function: 793.sol-AMLToken-setLockAddress(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lockAddresses[addr] = state

IRs:
REF_451(bool) -> lockAddresses[addr]
REF_451(bool) (->lockAddresses) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 793.sol-AMLToken-setMintAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAgents[addr] = state

IRs:
REF_449(bool) -> mintAgents[addr]
REF_449(bool) (->mintAgents) := state(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintingAgentChanged(addr,state)

IRs:
Emit MintingAgentChanged(addr,state)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
4->1;
}
// Function: 793.sol-AMLToken-setReleaseAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseAgent = addr

IRs:
releaseAgent(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 793.sol-AMLToken-setTokenInformation(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
UpdatedTokenInformation(name,symbol)

IRs:
Emit UpdatedTokenInformation(name,symbol)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 793.sol-AMLToken-setTransferAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferAgents[addr] = state

IRs:
REF_450(bool) -> transferAgents[addr]
REF_450(bool) (->transferAgents) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 793.sol-AMLToken-setUpgradeAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_500(bool) = INTERNAL_CALL, CrowdsaleToken.canUpgrade()()
TMP_501 = UnaryType.BANG TMP_500 
CONDITION TMP_501"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_502(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
agent == 0x0

IRs:
TMP_503(bool) = agent == 0
CONDITION TMP_503"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_504(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_505(bool) = msg.sender != upgradeMaster
CONDITION TMP_505"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_506(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
getUpgradeState() == UpgradeState.Upgrading

IRs:
TMP_507(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
REF_396(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_508(bool) = TMP_507 == REF_396
CONDITION TMP_508"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
revert()()

IRs:
TMP_509(None) = SOLIDITY_CALL revert()()"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
upgradeAgent = UpgradeAgent(agent)

IRs:
TMP_510 = CONVERT agent to UpgradeAgent
upgradeAgent(UpgradeAgent) := TMP_510(UpgradeAgent)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! upgradeAgent.isUpgradeAgent()

IRs:
TMP_511(bool) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:isUpgradeAgent, arguments:[]  
TMP_512 = UnaryType.BANG TMP_511 
CONDITION TMP_512"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
revert()()

IRs:
TMP_513(None) = SOLIDITY_CALL revert()()"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
upgradeAgent.originalSupply() != totalSupply_

IRs:
TMP_514(uint256) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:originalSupply, arguments:[]  
TMP_515(bool) = TMP_514 != totalSupply_
CONDITION TMP_515"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
revert()()

IRs:
TMP_516(None) = SOLIDITY_CALL revert()()"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
UpgradeAgentSet(upgradeAgent)

IRs:
Emit UpgradeAgentSet(upgradeAgent)"];
}
// Function: 793.sol-AMLToken-setUpgradeMaster(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
master == 0x0

IRs:
TMP_523(bool) = master == 0
CONDITION TMP_523"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_524(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_525(bool) = msg.sender != upgradeMaster
CONDITION TMP_525"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_526(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
upgradeMaster = master

IRs:
upgradeMaster(address) := master(address)"];
}
// Function: 793.sol-AMLToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
BURN_ADDRESS = 0

IRs:
BURN_ADDRESS(address) := 0(uint256)"];
}
// Function: 793.sol-AMLToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
released = false

IRs:
released(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 793.sol-AMLToken-totalSupply()
digraph{
}
// Function: 793.sol-AMLToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_571(bool) = INTERNAL_CALL, ERC20Basic.transfer(address,uint256)(_to,_value)
RETURN TMP_571"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(msg.sender)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(msg.sender)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 793.sol-AMLToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_573(bool) = INTERNAL_CALL, ERC20.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_573"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_from)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(_from)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 793.sol-AMLToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_560 = CONVERT 0 to address
TMP_561(bool) = newOwner != TMP_560
TMP_562(None) = SOLIDITY_CALL require(bool)(TMP_561)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 793.sol-AMLToken-transferToOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
released

IRs:
CONDITION released"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_580(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
amount = balanceOf(fromWhom)

IRs:
TMP_581(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(fromWhom)
amount(uint256) := TMP_581(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[fromWhom] = balances[fromWhom].sub(amount)

IRs:
REF_456(uint256) -> balances[fromWhom]
REF_457(uint256) -> balances[fromWhom]
TMP_582(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_457', 'amount'] 
REF_456(uint256) (->balances) := TMP_582(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[owner] = balances[owner].add(amount)

IRs:
REF_459(uint256) -> balances[owner]
REF_460(uint256) -> balances[owner]
TMP_583(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_460', 'amount'] 
REF_459(uint256) (->balances) := TMP_583(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(fromWhom,owner,amount)

IRs:
Emit Transfer(fromWhom,owner,amount)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
OwnerReclaim(fromWhom,amount)

IRs:
Emit OwnerReclaim(fromWhom,amount)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->1;
}
// Function: 793.sol-AMLToken-upgrade(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
state = getUpgradeState()

IRs:
TMP_487(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
state(UpgradeableToken.UpgradeState) := TMP_487(UpgradeableToken.UpgradeState)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! (state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)

IRs:
REF_388(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
TMP_488(bool) = state == REF_388
REF_389(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_489(bool) = state == REF_389
TMP_490(bool) = TMP_488 || TMP_489
TMP_491 = UnaryType.BANG TMP_490 
CONDITION TMP_491"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_492(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
value == 0

IRs:
TMP_493(bool) = value == 0
CONDITION TMP_493"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_494(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(value)

IRs:
REF_390(uint256) -> balances[msg.sender]
REF_391(uint256) -> balances[msg.sender]
TMP_495(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_391', 'value'] 
REF_390(uint256) (->balances) := TMP_495(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalSupply_ = totalSupply_.sub(value)

IRs:
TMP_496(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', 'value'] 
totalSupply_(uint256) := TMP_496(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalUpgraded = totalUpgraded.add(value)

IRs:
TMP_497(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalUpgraded', 'value'] 
totalUpgraded(uint256) := TMP_497(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
upgradeAgent.upgradeFrom(msg.sender,value)

IRs:
HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:upgradeFrom, arguments:['msg.sender', 'value']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Upgrade(msg.sender,upgradeAgent,value)

IRs:
Emit Upgrade(msg.sender,upgradeAgent,value)"];
}
// Function: 793.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 793.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 793.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _to != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_15(bool) = _value <= REF_0
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-BurnableCrowdsaleToken-BurnableCrowdsaleToken(string,string,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
CrowdsaleToken(_name,_symbol,_initialSupply,_decimals,_mintable)

IRs:
INTERNAL_CALL, CrowdsaleToken.CrowdsaleToken(string,string,uint256,uint256,bool)(_name,_symbol,_initialSupply,_decimals,_mintable)"];
}
// Function: 793.sol-BurnableCrowdsaleToken-CrowdsaleToken(string,string,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = _initialSupply

IRs:
totalSupply_(uint256) := _initialSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint256) := _decimals(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[owner] = totalSupply_

IRs:
REF_315(uint256) -> balances[owner]
REF_315(uint256) (->balances) := totalSupply_(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
totalSupply_ > 0

IRs:
TMP_360(bool) = totalSupply_ > 0
CONDITION TMP_360"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Minted(owner,totalSupply_)

IRs:
Emit Minted(owner,totalSupply_)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
! _mintable

IRs:
TMP_362 = UnaryType.BANG _mintable 
CONDITION TMP_362"];
10->11[label="True"];
10->15[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
totalSupply_ == 0

IRs:
TMP_363(bool) = totalSupply_ == 0
CONDITION TMP_363"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
revert()()

IRs:
TMP_364(None) = SOLIDITY_CALL revert()()"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
UpgradeableToken(msg.sender)

IRs:
INTERNAL_CALL, UpgradeableToken.UpgradeableToken(address)(msg.sender)"];
16->1;
}
// Function: 793.sol-BurnableCrowdsaleToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 793.sol-BurnableCrowdsaleToken-UpgradeableToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradeMaster = _upgradeMaster

IRs:
upgradeMaster(address) := _upgradeMaster(address)"];
}
// Function: 793.sol-BurnableCrowdsaleToken-allowance(address,address)
digraph{
}
// Function: 793.sol-BurnableCrowdsaleToken-approve(address,uint256)
digraph{
}
// Function: 793.sol-BurnableCrowdsaleToken-balanceOf(address)
digraph{
}
// Function: 793.sol-BurnableCrowdsaleToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[burner] = balances[burner].sub(burnAmount)

IRs:
REF_380(uint256) -> balances[burner]
REF_381(uint256) -> balances[burner]
TMP_458(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_381', 'burnAmount'] 
REF_380(uint256) (->balances) := TMP_458(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(burnAmount)

IRs:
TMP_459(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', 'burnAmount'] 
totalSupply_(uint256) := TMP_459(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burned(burner,burnAmount)

IRs:
Emit Burned(burner,burnAmount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(burner,BURN_ADDRESS,burnAmount)

IRs:
Emit Transfer(burner,BURN_ADDRESS,burnAmount)"];
}
// Function: 793.sol-BurnableCrowdsaleToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
mintingFinished

IRs:
CONDITION mintingFinished"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_465(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-BurnableCrowdsaleToken-canTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
lockAddresses[_sender]

IRs:
REF_385(bool) -> lockAddresses[_sender]
CONDITION REF_385"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_468(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! released

IRs:
TMP_469 = UnaryType.BANG released 
CONDITION TMP_469"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
! transferAgents[_sender]

IRs:
REF_386(bool) -> transferAgents[_sender]
TMP_470 = UnaryType.BANG REF_386 
CONDITION TMP_470"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_471(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: _ 9
"];
}
// Function: 793.sol-BurnableCrowdsaleToken-canUpgrade()
digraph{
}
// Function: 793.sol-BurnableCrowdsaleToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_356(mapping(address => uint256)) -> allowed[msg.sender]
REF_357(uint256) -> REF_356[_spender]
oldValue(uint256) := REF_357(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_424(bool) = _subtractedValue > oldValue
CONDITION TMP_424"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_358(mapping(address => uint256)) -> allowed[msg.sender]
REF_359(uint256) -> REF_358[_spender]
REF_359(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_360(mapping(address => uint256)) -> allowed[msg.sender]
REF_361(uint256) -> REF_360[_spender]
TMP_425(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_361(uint256) (->allowed) := TMP_425(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_363(mapping(address => uint256)) -> allowed[msg.sender]
REF_364(uint256) -> REF_363[_spender]
Emit Approval(msg.sender,_spender,REF_364)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-BurnableCrowdsaleToken-getUpgradeState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_401(bool) = INTERNAL_CALL, CrowdsaleToken.canUpgrade()()
TMP_402 = UnaryType.BANG TMP_401 
CONDITION TMP_402"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
UpgradeState.NotAllowed

IRs:
REF_327(UpgradeableToken.UpgradeState) -> UpgradeState.NotAllowed
RETURN REF_327"];
3[label="Node Type: IF 3

EXPRESSION:
address(upgradeAgent) == 0x00

IRs:
TMP_403 = CONVERT upgradeAgent to address
TMP_404(bool) = TMP_403 == 0
CONDITION TMP_404"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
UpgradeState.WaitingForAgent

IRs:
REF_328(UpgradeableToken.UpgradeState) -> UpgradeState.WaitingForAgent
RETURN REF_328"];
5[label="Node Type: IF 5

EXPRESSION:
totalUpgraded == 0

IRs:
TMP_405(bool) = totalUpgraded == 0
CONDITION TMP_405"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
UpgradeState.ReadyToUpgrade

IRs:
REF_329(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
RETURN REF_329"];
7[label="Node Type: RETURN 7

EXPRESSION:
UpgradeState.Upgrading

IRs:
REF_330(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
RETURN REF_330"];
}
// Function: 793.sol-BurnableCrowdsaleToken-inReleaseState(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
releaseState != released

IRs:
TMP_472(bool) = releaseState != released
CONDITION TMP_472"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_473(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-BurnableCrowdsaleToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_349(mapping(address => uint256)) -> allowed[msg.sender]
REF_350(uint256) -> REF_349[_spender]
REF_351(mapping(address => uint256)) -> allowed[msg.sender]
REF_352(uint256) -> REF_351[_spender]
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_352', '_addedValue'] 
REF_350(uint256) (->allowed) := TMP_422(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_354(mapping(address => uint256)) -> allowed[msg.sender]
REF_355(uint256) -> REF_354[_spender]
Emit Approval(msg.sender,_spender,REF_355)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-BurnableCrowdsaleToken-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 793.sol-BurnableCrowdsaleToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.plus(amount)

IRs:
TMP_435(uint256) = LIBRARY_CALL, dest:SafeMathLib, function:SafeMathLib.plus(uint256,uint256), arguments:['totalSupply_', 'amount'] 
totalSupply_(uint256) := TMP_435(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[receiver] = balances[receiver].plus(amount)

IRs:
REF_374(uint256) -> balances[receiver]
REF_375(uint256) -> balances[receiver]
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMathLib, function:SafeMathLib.plus(uint256,uint256), arguments:['REF_375', 'amount'] 
REF_374(uint256) (->balances) := TMP_436(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0,receiver,amount)

IRs:
Emit Transfer(0,receiver,amount)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableToken.onlyMintAgent()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 793.sol-BurnableCrowdsaleToken-onlyMintAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! mintAgents[msg.sender]

IRs:
REF_384(bool) -> mintAgents[msg.sender]
TMP_463 = UnaryType.BANG REF_384 
CONDITION TMP_463"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_464(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-BurnableCrowdsaleToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_466(bool) = msg.sender == owner
TMP_467(None) = SOLIDITY_CALL require(bool)(TMP_466)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 793.sol-BurnableCrowdsaleToken-onlyReleaseAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != releaseAgent

IRs:
TMP_474(bool) = msg.sender != releaseAgent
CONDITION TMP_474"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_475(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-BurnableCrowdsaleToken-releaseTokenTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
released = true

IRs:
released(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyReleaseAgent()

IRs:
MODIFIER_CALL, ReleasableToken.onlyReleaseAgent()()"];
2->1;
}
// Function: 793.sol-BurnableCrowdsaleToken-setLockAddress(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lockAddresses[addr] = state

IRs:
REF_379(bool) -> lockAddresses[addr]
REF_379(bool) (->lockAddresses) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 793.sol-BurnableCrowdsaleToken-setMintAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAgents[addr] = state

IRs:
REF_377(bool) -> mintAgents[addr]
REF_377(bool) (->mintAgents) := state(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintingAgentChanged(addr,state)

IRs:
Emit MintingAgentChanged(addr,state)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
4->1;
}
// Function: 793.sol-BurnableCrowdsaleToken-setReleaseAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseAgent = addr

IRs:
releaseAgent(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 793.sol-BurnableCrowdsaleToken-setTokenInformation(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
UpdatedTokenInformation(name,symbol)

IRs:
Emit UpdatedTokenInformation(name,symbol)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 793.sol-BurnableCrowdsaleToken-setTransferAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferAgents[addr] = state

IRs:
REF_378(bool) -> transferAgents[addr]
REF_378(bool) (->transferAgents) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 793.sol-BurnableCrowdsaleToken-setUpgradeAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_383(bool) = INTERNAL_CALL, CrowdsaleToken.canUpgrade()()
TMP_384 = UnaryType.BANG TMP_383 
CONDITION TMP_384"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_385(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
agent == 0x0

IRs:
TMP_386(bool) = agent == 0
CONDITION TMP_386"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_387(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_388(bool) = msg.sender != upgradeMaster
CONDITION TMP_388"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_389(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
getUpgradeState() == UpgradeState.Upgrading

IRs:
TMP_390(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
REF_324(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_391(bool) = TMP_390 == REF_324
CONDITION TMP_391"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
revert()()

IRs:
TMP_392(None) = SOLIDITY_CALL revert()()"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
upgradeAgent = UpgradeAgent(agent)

IRs:
TMP_393 = CONVERT agent to UpgradeAgent
upgradeAgent(UpgradeAgent) := TMP_393(UpgradeAgent)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! upgradeAgent.isUpgradeAgent()

IRs:
TMP_394(bool) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:isUpgradeAgent, arguments:[]  
TMP_395 = UnaryType.BANG TMP_394 
CONDITION TMP_395"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
revert()()

IRs:
TMP_396(None) = SOLIDITY_CALL revert()()"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
upgradeAgent.originalSupply() != totalSupply_

IRs:
TMP_397(uint256) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:originalSupply, arguments:[]  
TMP_398(bool) = TMP_397 != totalSupply_
CONDITION TMP_398"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
revert()()

IRs:
TMP_399(None) = SOLIDITY_CALL revert()()"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
UpgradeAgentSet(upgradeAgent)

IRs:
Emit UpgradeAgentSet(upgradeAgent)"];
}
// Function: 793.sol-BurnableCrowdsaleToken-setUpgradeMaster(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
master == 0x0

IRs:
TMP_406(bool) = master == 0
CONDITION TMP_406"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_407(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_408(bool) = msg.sender != upgradeMaster
CONDITION TMP_408"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_409(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
upgradeMaster = master

IRs:
upgradeMaster(address) := master(address)"];
}
// Function: 793.sol-BurnableCrowdsaleToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
BURN_ADDRESS = 0

IRs:
BURN_ADDRESS(address) := 0(uint256)"];
}
// Function: 793.sol-BurnableCrowdsaleToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
released = false

IRs:
released(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 793.sol-BurnableCrowdsaleToken-totalSupply()
digraph{
}
// Function: 793.sol-BurnableCrowdsaleToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_454(bool) = INTERNAL_CALL, ERC20Basic.transfer(address,uint256)(_to,_value)
RETURN TMP_454"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(msg.sender)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(msg.sender)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 793.sol-BurnableCrowdsaleToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_456(bool) = INTERNAL_CALL, ERC20.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_456"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_from)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(_from)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 793.sol-BurnableCrowdsaleToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_443 = CONVERT 0 to address
TMP_444(bool) = newOwner != TMP_443
TMP_445(None) = SOLIDITY_CALL require(bool)(TMP_444)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 793.sol-BurnableCrowdsaleToken-upgrade(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
state = getUpgradeState()

IRs:
TMP_370(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
state(UpgradeableToken.UpgradeState) := TMP_370(UpgradeableToken.UpgradeState)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! (state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)

IRs:
REF_316(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
TMP_371(bool) = state == REF_316
REF_317(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_372(bool) = state == REF_317
TMP_373(bool) = TMP_371 || TMP_372
TMP_374 = UnaryType.BANG TMP_373 
CONDITION TMP_374"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_375(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
value == 0

IRs:
TMP_376(bool) = value == 0
CONDITION TMP_376"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_377(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(value)

IRs:
REF_318(uint256) -> balances[msg.sender]
REF_319(uint256) -> balances[msg.sender]
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_319', 'value'] 
REF_318(uint256) (->balances) := TMP_378(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalSupply_ = totalSupply_.sub(value)

IRs:
TMP_379(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', 'value'] 
totalSupply_(uint256) := TMP_379(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalUpgraded = totalUpgraded.add(value)

IRs:
TMP_380(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalUpgraded', 'value'] 
totalUpgraded(uint256) := TMP_380(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
upgradeAgent.upgradeFrom(msg.sender,value)

IRs:
HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:upgradeFrom, arguments:['msg.sender', 'value']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Upgrade(msg.sender,upgradeAgent,value)

IRs:
Emit Upgrade(msg.sender,upgradeAgent,value)"];
}
// Function: 793.sol-BurnableToken-allowance(address,address)
digraph{
}
// Function: 793.sol-BurnableToken-approve(address,uint256)
digraph{
}
// Function: 793.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 793.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[burner] = balances[burner].sub(burnAmount)

IRs:
REF_134(uint256) -> balances[burner]
REF_135(uint256) -> balances[burner]
TMP_95(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_135', 'burnAmount'] 
REF_134(uint256) (->balances) := TMP_95(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(burnAmount)

IRs:
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', 'burnAmount'] 
totalSupply_(uint256) := TMP_96(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burned(burner,burnAmount)

IRs:
Emit Burned(burner,burnAmount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(burner,BURN_ADDRESS,burnAmount)

IRs:
Emit Transfer(burner,BURN_ADDRESS,burnAmount)"];
}
// Function: 793.sol-BurnableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_117(mapping(address => uint256)) -> allowed[msg.sender]
REF_118(uint256) -> REF_117[_spender]
oldValue(uint256) := REF_118(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_84(bool) = _subtractedValue > oldValue
CONDITION TMP_84"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_119(mapping(address => uint256)) -> allowed[msg.sender]
REF_120(uint256) -> REF_119[_spender]
REF_120(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_121(mapping(address => uint256)) -> allowed[msg.sender]
REF_122(uint256) -> REF_121[_spender]
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_122(uint256) (->allowed) := TMP_85(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_124(mapping(address => uint256)) -> allowed[msg.sender]
REF_125(uint256) -> REF_124[_spender]
Emit Approval(msg.sender,_spender,REF_125)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-BurnableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_110(mapping(address => uint256)) -> allowed[msg.sender]
REF_111(uint256) -> REF_110[_spender]
REF_112(mapping(address => uint256)) -> allowed[msg.sender]
REF_113(uint256) -> REF_112[_spender]
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_113', '_addedValue'] 
REF_111(uint256) (->allowed) := TMP_82(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_115(mapping(address => uint256)) -> allowed[msg.sender]
REF_116(uint256) -> REF_115[_spender]
Emit Approval(msg.sender,_spender,REF_116)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-BurnableToken-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 793.sol-BurnableToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
BURN_ADDRESS = 0

IRs:
BURN_ADDRESS(address) := 0(uint256)"];
}
// Function: 793.sol-BurnableToken-totalSupply()
digraph{
}
// Function: 793.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 793.sol-BurnableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 793.sol-CrowdsaleToken-CrowdsaleToken(string,string,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = _initialSupply

IRs:
totalSupply_(uint256) := _initialSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint256) := _decimals(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[owner] = totalSupply_

IRs:
REF_311(uint256) -> balances[owner]
REF_311(uint256) (->balances) := totalSupply_(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
totalSupply_ > 0

IRs:
TMP_337(bool) = totalSupply_ > 0
CONDITION TMP_337"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Minted(owner,totalSupply_)

IRs:
Emit Minted(owner,totalSupply_)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
! _mintable

IRs:
TMP_339 = UnaryType.BANG _mintable 
CONDITION TMP_339"];
10->11[label="True"];
10->15[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
totalSupply_ == 0

IRs:
TMP_340(bool) = totalSupply_ == 0
CONDITION TMP_340"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
revert()()

IRs:
TMP_341(None) = SOLIDITY_CALL revert()()"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
UpgradeableToken(msg.sender)

IRs:
INTERNAL_CALL, UpgradeableToken.UpgradeableToken(address)(msg.sender)"];
16->1;
}
// Function: 793.sol-CrowdsaleToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 793.sol-CrowdsaleToken-UpgradeableToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradeMaster = _upgradeMaster

IRs:
upgradeMaster(address) := _upgradeMaster(address)"];
}
// Function: 793.sol-CrowdsaleToken-allowance(address,address)
digraph{
}
// Function: 793.sol-CrowdsaleToken-approve(address,uint256)
digraph{
}
// Function: 793.sol-CrowdsaleToken-balanceOf(address)
digraph{
}
// Function: 793.sol-CrowdsaleToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
mintingFinished

IRs:
CONDITION mintingFinished"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_349(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-CrowdsaleToken-canTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
lockAddresses[_sender]

IRs:
REF_313(bool) -> lockAddresses[_sender]
CONDITION REF_313"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_352(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! released

IRs:
TMP_353 = UnaryType.BANG released 
CONDITION TMP_353"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
! transferAgents[_sender]

IRs:
REF_314(bool) -> transferAgents[_sender]
TMP_354 = UnaryType.BANG REF_314 
CONDITION TMP_354"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_355(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: _ 9
"];
}
// Function: 793.sol-CrowdsaleToken-canUpgrade()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
released

IRs:
RETURN released"];
}
// Function: 793.sol-CrowdsaleToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_287(mapping(address => uint256)) -> allowed[msg.sender]
REF_288(uint256) -> REF_287[_spender]
oldValue(uint256) := REF_288(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_303(bool) = _subtractedValue > oldValue
CONDITION TMP_303"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_289(mapping(address => uint256)) -> allowed[msg.sender]
REF_290(uint256) -> REF_289[_spender]
REF_290(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_291(mapping(address => uint256)) -> allowed[msg.sender]
REF_292(uint256) -> REF_291[_spender]
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_292(uint256) (->allowed) := TMP_304(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_294(mapping(address => uint256)) -> allowed[msg.sender]
REF_295(uint256) -> REF_294[_spender]
Emit Approval(msg.sender,_spender,REF_295)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-CrowdsaleToken-getUpgradeState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_280(bool) = INTERNAL_CALL, CrowdsaleToken.canUpgrade()()
TMP_281 = UnaryType.BANG TMP_280 
CONDITION TMP_281"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
UpgradeState.NotAllowed

IRs:
REF_258(UpgradeableToken.UpgradeState) -> UpgradeState.NotAllowed
RETURN REF_258"];
3[label="Node Type: IF 3

EXPRESSION:
address(upgradeAgent) == 0x00

IRs:
TMP_282 = CONVERT upgradeAgent to address
TMP_283(bool) = TMP_282 == 0
CONDITION TMP_283"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
UpgradeState.WaitingForAgent

IRs:
REF_259(UpgradeableToken.UpgradeState) -> UpgradeState.WaitingForAgent
RETURN REF_259"];
5[label="Node Type: IF 5

EXPRESSION:
totalUpgraded == 0

IRs:
TMP_284(bool) = totalUpgraded == 0
CONDITION TMP_284"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
UpgradeState.ReadyToUpgrade

IRs:
REF_260(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
RETURN REF_260"];
7[label="Node Type: RETURN 7

EXPRESSION:
UpgradeState.Upgrading

IRs:
REF_261(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
RETURN REF_261"];
}
// Function: 793.sol-CrowdsaleToken-inReleaseState(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
releaseState != released

IRs:
TMP_356(bool) = releaseState != released
CONDITION TMP_356"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_357(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-CrowdsaleToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_280(mapping(address => uint256)) -> allowed[msg.sender]
REF_281(uint256) -> REF_280[_spender]
REF_282(mapping(address => uint256)) -> allowed[msg.sender]
REF_283(uint256) -> REF_282[_spender]
TMP_301(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_283', '_addedValue'] 
REF_281(uint256) (->allowed) := TMP_301(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_285(mapping(address => uint256)) -> allowed[msg.sender]
REF_286(uint256) -> REF_285[_spender]
Emit Approval(msg.sender,_spender,REF_286)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-CrowdsaleToken-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 793.sol-CrowdsaleToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.plus(amount)

IRs:
TMP_314(uint256) = LIBRARY_CALL, dest:SafeMathLib, function:SafeMathLib.plus(uint256,uint256), arguments:['totalSupply_', 'amount'] 
totalSupply_(uint256) := TMP_314(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[receiver] = balances[receiver].plus(amount)

IRs:
REF_305(uint256) -> balances[receiver]
REF_306(uint256) -> balances[receiver]
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMathLib, function:SafeMathLib.plus(uint256,uint256), arguments:['REF_306', 'amount'] 
REF_305(uint256) (->balances) := TMP_315(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0,receiver,amount)

IRs:
Emit Transfer(0,receiver,amount)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableToken.onlyMintAgent()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 793.sol-CrowdsaleToken-onlyMintAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! mintAgents[msg.sender]

IRs:
REF_312(bool) -> mintAgents[msg.sender]
TMP_347 = UnaryType.BANG REF_312 
CONDITION TMP_347"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_348(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-CrowdsaleToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_350(bool) = msg.sender == owner
TMP_351(None) = SOLIDITY_CALL require(bool)(TMP_350)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 793.sol-CrowdsaleToken-onlyReleaseAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != releaseAgent

IRs:
TMP_358(bool) = msg.sender != releaseAgent
CONDITION TMP_358"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_359(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-CrowdsaleToken-releaseTokenTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
super.releaseTokenTransfer()

IRs:
INTERNAL_CALL, ReleasableToken.releaseTokenTransfer()()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyReleaseAgent()

IRs:
MODIFIER_CALL, ReleasableToken.onlyReleaseAgent()()"];
3->1;
}
// Function: 793.sol-CrowdsaleToken-setLockAddress(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lockAddresses[addr] = state

IRs:
REF_310(bool) -> lockAddresses[addr]
REF_310(bool) (->lockAddresses) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 793.sol-CrowdsaleToken-setMintAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAgents[addr] = state

IRs:
REF_308(bool) -> mintAgents[addr]
REF_308(bool) (->mintAgents) := state(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintingAgentChanged(addr,state)

IRs:
Emit MintingAgentChanged(addr,state)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
4->1;
}
// Function: 793.sol-CrowdsaleToken-setReleaseAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseAgent = addr

IRs:
releaseAgent(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 793.sol-CrowdsaleToken-setTokenInformation(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
UpdatedTokenInformation(name,symbol)

IRs:
Emit UpdatedTokenInformation(name,symbol)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 793.sol-CrowdsaleToken-setTransferAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferAgents[addr] = state

IRs:
REF_309(bool) -> transferAgents[addr]
REF_309(bool) (->transferAgents) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 793.sol-CrowdsaleToken-setUpgradeAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_262(bool) = INTERNAL_CALL, CrowdsaleToken.canUpgrade()()
TMP_263 = UnaryType.BANG TMP_262 
CONDITION TMP_263"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_264(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
agent == 0x0

IRs:
TMP_265(bool) = agent == 0
CONDITION TMP_265"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_266(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_267(bool) = msg.sender != upgradeMaster
CONDITION TMP_267"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_268(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
getUpgradeState() == UpgradeState.Upgrading

IRs:
TMP_269(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
REF_255(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_270(bool) = TMP_269 == REF_255
CONDITION TMP_270"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
revert()()

IRs:
TMP_271(None) = SOLIDITY_CALL revert()()"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
upgradeAgent = UpgradeAgent(agent)

IRs:
TMP_272 = CONVERT agent to UpgradeAgent
upgradeAgent(UpgradeAgent) := TMP_272(UpgradeAgent)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! upgradeAgent.isUpgradeAgent()

IRs:
TMP_273(bool) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:isUpgradeAgent, arguments:[]  
TMP_274 = UnaryType.BANG TMP_273 
CONDITION TMP_274"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
revert()()

IRs:
TMP_275(None) = SOLIDITY_CALL revert()()"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
upgradeAgent.originalSupply() != totalSupply_

IRs:
TMP_276(uint256) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:originalSupply, arguments:[]  
TMP_277(bool) = TMP_276 != totalSupply_
CONDITION TMP_277"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
revert()()

IRs:
TMP_278(None) = SOLIDITY_CALL revert()()"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
UpgradeAgentSet(upgradeAgent)

IRs:
Emit UpgradeAgentSet(upgradeAgent)"];
}
// Function: 793.sol-CrowdsaleToken-setUpgradeMaster(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
master == 0x0

IRs:
TMP_285(bool) = master == 0
CONDITION TMP_285"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_286(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_287(bool) = msg.sender != upgradeMaster
CONDITION TMP_287"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_288(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
upgradeMaster = master

IRs:
upgradeMaster(address) := master(address)"];
}
// Function: 793.sol-CrowdsaleToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
released = false

IRs:
released(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 793.sol-CrowdsaleToken-totalSupply()
digraph{
}
// Function: 793.sol-CrowdsaleToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_333(bool) = INTERNAL_CALL, ERC20Basic.transfer(address,uint256)(_to,_value)
RETURN TMP_333"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(msg.sender)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(msg.sender)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 793.sol-CrowdsaleToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_335(bool) = INTERNAL_CALL, ERC20.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_335"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_from)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(_from)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 793.sol-CrowdsaleToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_322 = CONVERT 0 to address
TMP_323(bool) = newOwner != TMP_322
TMP_324(None) = SOLIDITY_CALL require(bool)(TMP_323)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 793.sol-CrowdsaleToken-upgrade(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
state = getUpgradeState()

IRs:
TMP_249(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
state(UpgradeableToken.UpgradeState) := TMP_249(UpgradeableToken.UpgradeState)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! (state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)

IRs:
REF_247(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
TMP_250(bool) = state == REF_247
REF_248(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_251(bool) = state == REF_248
TMP_252(bool) = TMP_250 || TMP_251
TMP_253 = UnaryType.BANG TMP_252 
CONDITION TMP_253"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_254(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
value == 0

IRs:
TMP_255(bool) = value == 0
CONDITION TMP_255"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_256(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(value)

IRs:
REF_249(uint256) -> balances[msg.sender]
REF_250(uint256) -> balances[msg.sender]
TMP_257(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_250', 'value'] 
REF_249(uint256) (->balances) := TMP_257(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalSupply_ = totalSupply_.sub(value)

IRs:
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', 'value'] 
totalSupply_(uint256) := TMP_258(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalUpgraded = totalUpgraded.add(value)

IRs:
TMP_259(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalUpgraded', 'value'] 
totalUpgraded(uint256) := TMP_259(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
upgradeAgent.upgradeFrom(msg.sender,value)

IRs:
HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:upgradeFrom, arguments:['msg.sender', 'value']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Upgrade(msg.sender,upgradeAgent,value)

IRs:
Emit Upgrade(msg.sender,upgradeAgent,value)"];
}
// Function: 793.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 793.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 793.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 793.sol-ERC20-totalSupply()
digraph{
}
// Function: 793.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 793.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 793.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 793.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 793.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 793.sol-MintableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 793.sol-MintableToken-allowance(address,address)
digraph{
}
// Function: 793.sol-MintableToken-approve(address,uint256)
digraph{
}
// Function: 793.sol-MintableToken-balanceOf(address)
digraph{
}
// Function: 793.sol-MintableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
mintingFinished

IRs:
CONDITION mintingFinished"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_248(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-MintableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_224(mapping(address => uint256)) -> allowed[msg.sender]
REF_225(uint256) -> REF_224[_spender]
oldValue(uint256) := REF_225(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_225(bool) = _subtractedValue > oldValue
CONDITION TMP_225"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_226(mapping(address => uint256)) -> allowed[msg.sender]
REF_227(uint256) -> REF_226[_spender]
REF_227(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_228(mapping(address => uint256)) -> allowed[msg.sender]
REF_229(uint256) -> REF_228[_spender]
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_229(uint256) (->allowed) := TMP_226(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_231(mapping(address => uint256)) -> allowed[msg.sender]
REF_232(uint256) -> REF_231[_spender]
Emit Approval(msg.sender,_spender,REF_232)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-MintableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_217(mapping(address => uint256)) -> allowed[msg.sender]
REF_218(uint256) -> REF_217[_spender]
REF_219(mapping(address => uint256)) -> allowed[msg.sender]
REF_220(uint256) -> REF_219[_spender]
TMP_223(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_220', '_addedValue'] 
REF_218(uint256) (->allowed) := TMP_223(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_222(mapping(address => uint256)) -> allowed[msg.sender]
REF_223(uint256) -> REF_222[_spender]
Emit Approval(msg.sender,_spender,REF_223)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-MintableToken-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 793.sol-MintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.plus(amount)

IRs:
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMathLib, function:SafeMathLib.plus(uint256,uint256), arguments:['totalSupply_', 'amount'] 
totalSupply_(uint256) := TMP_236(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[receiver] = balances[receiver].plus(amount)

IRs:
REF_242(uint256) -> balances[receiver]
REF_243(uint256) -> balances[receiver]
TMP_237(uint256) = LIBRARY_CALL, dest:SafeMathLib, function:SafeMathLib.plus(uint256,uint256), arguments:['REF_243', 'amount'] 
REF_242(uint256) (->balances) := TMP_237(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0,receiver,amount)

IRs:
Emit Transfer(0,receiver,amount)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableToken.onlyMintAgent()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 793.sol-MintableToken-onlyMintAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! mintAgents[msg.sender]

IRs:
REF_246(bool) -> mintAgents[msg.sender]
TMP_246 = UnaryType.BANG REF_246 
CONDITION TMP_246"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_247(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-MintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_244(bool) = msg.sender == owner
TMP_245(None) = SOLIDITY_CALL require(bool)(TMP_244)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 793.sol-MintableToken-setMintAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAgents[addr] = state

IRs:
REF_245(bool) -> mintAgents[addr]
REF_245(bool) (->mintAgents) := state(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintingAgentChanged(addr,state)

IRs:
Emit MintingAgentChanged(addr,state)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
4->1;
}
// Function: 793.sol-MintableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 793.sol-MintableToken-totalSupply()
digraph{
}
// Function: 793.sol-MintableToken-transfer(address,uint256)
digraph{
}
// Function: 793.sol-MintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 793.sol-MintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_207 = CONVERT 0 to address
TMP_208(bool) = newOwner != TMP_207
TMP_209(None) = SOLIDITY_CALL require(bool)(TMP_208)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 793.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 793.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_168(bool) = msg.sender == owner
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 793.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_164 = CONVERT 0 to address
TMP_165(bool) = newOwner != TMP_164
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 793.sol-ReleasableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 793.sol-ReleasableToken-allowance(address,address)
digraph{
}
// Function: 793.sol-ReleasableToken-approve(address,uint256)
digraph{
}
// Function: 793.sol-ReleasableToken-balanceOf(address)
digraph{
}
// Function: 793.sol-ReleasableToken-canTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
lockAddresses[_sender]

IRs:
REF_197(bool) -> lockAddresses[_sender]
CONDITION REF_197"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_187(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! released

IRs:
TMP_188 = UnaryType.BANG released 
CONDITION TMP_188"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
! transferAgents[_sender]

IRs:
REF_198(bool) -> transferAgents[_sender]
TMP_189 = UnaryType.BANG REF_198 
CONDITION TMP_189"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_190(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: _ 9
"];
}
// Function: 793.sol-ReleasableToken-inReleaseState(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
releaseState != released

IRs:
TMP_191(bool) = releaseState != released
CONDITION TMP_191"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_192(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-ReleasableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_185(bool) = msg.sender == owner
TMP_186(None) = SOLIDITY_CALL require(bool)(TMP_185)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 793.sol-ReleasableToken-onlyReleaseAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != releaseAgent

IRs:
TMP_193(bool) = msg.sender != releaseAgent
CONDITION TMP_193"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_194(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 793.sol-ReleasableToken-releaseTokenTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
released = true

IRs:
released(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyReleaseAgent()

IRs:
MODIFIER_CALL, ReleasableToken.onlyReleaseAgent()()"];
2->1;
}
// Function: 793.sol-ReleasableToken-setLockAddress(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lockAddresses[addr] = state

IRs:
REF_196(bool) -> lockAddresses[addr]
REF_196(bool) (->lockAddresses) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 793.sol-ReleasableToken-setReleaseAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseAgent = addr

IRs:
releaseAgent(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 793.sol-ReleasableToken-setTransferAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferAgents[addr] = state

IRs:
REF_195(bool) -> transferAgents[addr]
REF_195(bool) (->transferAgents) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 793.sol-ReleasableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
released = false

IRs:
released(bool) := False(bool)"];
}
// Function: 793.sol-ReleasableToken-totalSupply()
digraph{
}
// Function: 793.sol-ReleasableToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_181(bool) = INTERNAL_CALL, ERC20Basic.transfer(address,uint256)(_to,_value)
RETURN TMP_181"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(msg.sender)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(msg.sender)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 793.sol-ReleasableToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_183(bool) = INTERNAL_CALL, ERC20.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_183"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_from)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(_from)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 793.sol-ReleasableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_170 = CONVERT 0 to address
TMP_171(bool) = newOwner != TMP_170
TMP_172(None) = SOLIDITY_CALL require(bool)(TMP_171)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 793.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 793.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 793.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 793.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 793.sol-SafeMathLib-minus(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_201(bool) = b <= a
TMP_202(None) = SOLIDITY_CALL assert(bool)(TMP_201)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_203(uint256) = a - b
RETURN TMP_203"];
}
// Function: 793.sol-SafeMathLib-plus(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_204(uint256) = a + b
c(uint256) := TMP_204(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_205(bool) = c >= a
TMP_206(None) = SOLIDITY_CALL assert(bool)(TMP_205)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 793.sol-SafeMathLib-times(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_195(uint256) = a * b
c(uint256) := TMP_195(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_196(bool) = a == 0
TMP_197(uint256) = c / a
TMP_198(bool) = TMP_197 == b
TMP_199(bool) = TMP_196 || TMP_198
TMP_200(None) = SOLIDITY_CALL assert(bool)(TMP_199)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 793.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_32(mapping(address => uint256)) -> allowed[_owner]
REF_33(uint256) -> REF_32[_spender]
RETURN REF_33"];
}
// Function: 793.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_30(mapping(address => uint256)) -> allowed[msg.sender]
REF_31(uint256) -> REF_30[_spender]
REF_31(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 793.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_41(mapping(address => uint256)) -> allowed[msg.sender]
REF_42(uint256) -> REF_41[_spender]
oldValue(uint256) := REF_42(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_42(bool) = _subtractedValue > oldValue
CONDITION TMP_42"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_43(mapping(address => uint256)) -> allowed[msg.sender]
REF_44(uint256) -> REF_43[_spender]
REF_44(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_45(mapping(address => uint256)) -> allowed[msg.sender]
REF_46(uint256) -> REF_45[_spender]
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_46(uint256) (->allowed) := TMP_43(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_48(mapping(address => uint256)) -> allowed[msg.sender]
REF_49(uint256) -> REF_48[_spender]
Emit Approval(msg.sender,_spender,REF_49)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_37', '_addedValue'] 
REF_35(uint256) (->allowed) := TMP_40(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_39(mapping(address => uint256)) -> allowed[msg.sender]
REF_40(uint256) -> REF_39[_spender]
Emit Approval(msg.sender,_spender,REF_40)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-StandardToken-totalSupply()
digraph{
}
// Function: 793.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 793.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = _to != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_16(uint256) -> balances[_from]
TMP_31(bool) = _value <= REF_16
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_17(mapping(address => uint256)) -> allowed[_from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_33(bool) = _value <= REF_18
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_19(uint256) -> balances[_from]
REF_20(uint256) -> balances[_from]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_20', '_value'] 
REF_19(uint256) (->balances) := TMP_35(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_22(uint256) -> balances[_to]
REF_23(uint256) -> balances[_to]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_23', '_value'] 
REF_22(uint256) (->balances) := TMP_36(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
REF_27(mapping(address => uint256)) -> allowed[_from]
REF_28(uint256) -> REF_27[msg.sender]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_28', '_value'] 
REF_26(uint256) (->allowed) := TMP_37(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-StandardTokenExt-allowance(address,address)
digraph{
}
// Function: 793.sol-StandardTokenExt-approve(address,uint256)
digraph{
}
// Function: 793.sol-StandardTokenExt-balanceOf(address)
digraph{
}
// Function: 793.sol-StandardTokenExt-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
oldValue(uint256) := REF_76(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_59(bool) = _subtractedValue > oldValue
CONDITION TMP_59"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
REF_78(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_79(mapping(address => uint256)) -> allowed[msg.sender]
REF_80(uint256) -> REF_79[_spender]
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_80(uint256) (->allowed) := TMP_60(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(uint256) -> REF_82[_spender]
Emit Approval(msg.sender,_spender,REF_83)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-StandardTokenExt-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', '_addedValue'] 
REF_69(uint256) (->allowed) := TMP_57(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
Emit Approval(msg.sender,_spender,REF_74)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-StandardTokenExt-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 793.sol-StandardTokenExt-totalSupply()
digraph{
}
// Function: 793.sol-StandardTokenExt-transfer(address,uint256)
digraph{
}
// Function: 793.sol-StandardTokenExt-transferFrom(address,address,uint256)
digraph{
}
// Function: 793.sol-UpgradeAgent-isUpgradeAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-UpgradeAgent-upgradeFrom(address,uint256)
digraph{
}
// Function: 793.sol-UpgradeableToken-UpgradeableToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradeMaster = _upgradeMaster

IRs:
upgradeMaster(address) := _upgradeMaster(address)"];
}
// Function: 793.sol-UpgradeableToken-allowance(address,address)
digraph{
}
// Function: 793.sol-UpgradeableToken-approve(address,uint256)
digraph{
}
// Function: 793.sol-UpgradeableToken-balanceOf(address)
digraph{
}
// Function: 793.sol-UpgradeableToken-canUpgrade()
digraph{
}
// Function: 793.sol-UpgradeableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_163(mapping(address => uint256)) -> allowed[msg.sender]
REF_164(uint256) -> REF_163[_spender]
oldValue(uint256) := REF_164(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_113(bool) = _subtractedValue > oldValue
CONDITION TMP_113"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_165(mapping(address => uint256)) -> allowed[msg.sender]
REF_166(uint256) -> REF_165[_spender]
REF_166(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_167(mapping(address => uint256)) -> allowed[msg.sender]
REF_168(uint256) -> REF_167[_spender]
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_168(uint256) (->allowed) := TMP_114(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_170(mapping(address => uint256)) -> allowed[msg.sender]
REF_171(uint256) -> REF_170[_spender]
Emit Approval(msg.sender,_spender,REF_171)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-UpgradeableToken-getUpgradeState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_155(bool) = INTERNAL_CALL, UpgradeableToken.canUpgrade()()
TMP_156 = UnaryType.BANG TMP_155 
CONDITION TMP_156"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
UpgradeState.NotAllowed

IRs:
REF_191(UpgradeableToken.UpgradeState) -> UpgradeState.NotAllowed
RETURN REF_191"];
3[label="Node Type: IF 3

EXPRESSION:
address(upgradeAgent) == 0x00

IRs:
TMP_157 = CONVERT upgradeAgent to address
TMP_158(bool) = TMP_157 == 0
CONDITION TMP_158"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
UpgradeState.WaitingForAgent

IRs:
REF_192(UpgradeableToken.UpgradeState) -> UpgradeState.WaitingForAgent
RETURN REF_192"];
5[label="Node Type: IF 5

EXPRESSION:
totalUpgraded == 0

IRs:
TMP_159(bool) = totalUpgraded == 0
CONDITION TMP_159"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
UpgradeState.ReadyToUpgrade

IRs:
REF_193(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
RETURN REF_193"];
7[label="Node Type: RETURN 7

EXPRESSION:
UpgradeState.Upgrading

IRs:
REF_194(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
RETURN REF_194"];
}
// Function: 793.sol-UpgradeableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_156(mapping(address => uint256)) -> allowed[msg.sender]
REF_157(uint256) -> REF_156[_spender]
REF_158(mapping(address => uint256)) -> allowed[msg.sender]
REF_159(uint256) -> REF_158[_spender]
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_159', '_addedValue'] 
REF_157(uint256) (->allowed) := TMP_111(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_161(mapping(address => uint256)) -> allowed[msg.sender]
REF_162(uint256) -> REF_161[_spender]
Emit Approval(msg.sender,_spender,REF_162)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 793.sol-UpgradeableToken-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 793.sol-UpgradeableToken-setUpgradeAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_137(bool) = INTERNAL_CALL, UpgradeableToken.canUpgrade()()
TMP_138 = UnaryType.BANG TMP_137 
CONDITION TMP_138"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_139(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
agent == 0x0

IRs:
TMP_140(bool) = agent == 0
CONDITION TMP_140"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_141(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_142(bool) = msg.sender != upgradeMaster
CONDITION TMP_142"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_143(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
getUpgradeState() == UpgradeState.Upgrading

IRs:
TMP_144(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
REF_188(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_145(bool) = TMP_144 == REF_188
CONDITION TMP_145"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
revert()()

IRs:
TMP_146(None) = SOLIDITY_CALL revert()()"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
upgradeAgent = UpgradeAgent(agent)

IRs:
TMP_147 = CONVERT agent to UpgradeAgent
upgradeAgent(UpgradeAgent) := TMP_147(UpgradeAgent)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! upgradeAgent.isUpgradeAgent()

IRs:
TMP_148(bool) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:isUpgradeAgent, arguments:[]  
TMP_149 = UnaryType.BANG TMP_148 
CONDITION TMP_149"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
revert()()

IRs:
TMP_150(None) = SOLIDITY_CALL revert()()"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
upgradeAgent.originalSupply() != totalSupply_

IRs:
TMP_151(uint256) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:originalSupply, arguments:[]  
TMP_152(bool) = TMP_151 != totalSupply_
CONDITION TMP_152"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
revert()()

IRs:
TMP_153(None) = SOLIDITY_CALL revert()()"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
UpgradeAgentSet(upgradeAgent)

IRs:
Emit UpgradeAgentSet(upgradeAgent)"];
}
// Function: 793.sol-UpgradeableToken-setUpgradeMaster(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
master == 0x0

IRs:
TMP_160(bool) = master == 0
CONDITION TMP_160"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_161(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_162(bool) = msg.sender != upgradeMaster
CONDITION TMP_162"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_163(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
upgradeMaster = master

IRs:
upgradeMaster(address) := master(address)"];
}
// Function: 793.sol-UpgradeableToken-totalSupply()
digraph{
}
// Function: 793.sol-UpgradeableToken-transfer(address,uint256)
digraph{
}
// Function: 793.sol-UpgradeableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 793.sol-UpgradeableToken-upgrade(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
state = getUpgradeState()

IRs:
TMP_124(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
state(UpgradeableToken.UpgradeState) := TMP_124(UpgradeableToken.UpgradeState)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! (state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)

IRs:
REF_180(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
TMP_125(bool) = state == REF_180
REF_181(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_126(bool) = state == REF_181
TMP_127(bool) = TMP_125 || TMP_126
TMP_128 = UnaryType.BANG TMP_127 
CONDITION TMP_128"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_129(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
value == 0

IRs:
TMP_130(bool) = value == 0
CONDITION TMP_130"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_131(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(value)

IRs:
REF_182(uint256) -> balances[msg.sender]
REF_183(uint256) -> balances[msg.sender]
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_183', 'value'] 
REF_182(uint256) (->balances) := TMP_132(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalSupply_ = totalSupply_.sub(value)

IRs:
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', 'value'] 
totalSupply_(uint256) := TMP_133(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalUpgraded = totalUpgraded.add(value)

IRs:
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalUpgraded', 'value'] 
totalUpgraded(uint256) := TMP_134(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
upgradeAgent.upgradeFrom(msg.sender,value)

IRs:
HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:upgradeFrom, arguments:['msg.sender', 'value']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Upgrade(msg.sender,upgradeAgent,value)

IRs:
Emit Upgrade(msg.sender,upgradeAgent,value)"];
}
}
