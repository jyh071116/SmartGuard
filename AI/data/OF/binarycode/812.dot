digraph G {
// Function: 812.sol-BeatProfitMembership-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_23(uint256) = a + b
c(uint256) := TMP_23(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_24(bool) = c >= a
TMP_25(None) = SOLIDITY_CALL assert(bool)(TMP_24)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 812.sol-BeatProfitMembership-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
DueTime[owner] = 4689878400

IRs:
REF_0(uint256) -> DueTime[owner]
REF_0(uint256) (->DueTime) := 4689878400(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
DueTime[0x491cFe3e5eF0C093971DaDdaBce7747EA69A991E] = 4689878400

IRs:
REF_1(uint256) -> DueTime[417402894880030047683597838128165895547186223390]
REF_1(uint256) (->DueTime) := 4689878400(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
DueTime[0x2ECc452E01f748183d697be4cb1db0531cc8F38F] = 4689878400

IRs:
REF_2(uint256) -> DueTime[267168953881728222629602330712123128820145910671]
REF_2(uint256) (->DueTime) := 4689878400(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
DueTime[0x353507473A89184e28E8F13e156Dc8055fD62A2C] = 4689878400

IRs:
REF_3(uint256) -> DueTime[303759084373042252914648017043443983025637304876]
REF_3(uint256) (->DueTime) := 4689878400(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Premium[0x491cFe3e5eF0C093971DaDdaBce7747EA69A991E] = true

IRs:
REF_4(bool) -> Premium[417402894880030047683597838128165895547186223390]
REF_4(bool) (->Premium) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Premium[0x2ECc452E01f748183d697be4cb1db0531cc8F38F] = true

IRs:
REF_5(bool) -> Premium[267168953881728222629602330712123128820145910671]
REF_5(bool) (->Premium) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Premium[0x353507473A89184e28E8F13e156Dc8055fD62A2C] = true

IRs:
REF_6(bool) -> Premium[303759084373042252914648017043443983025637304876]
REF_6(bool) (->Premium) := True(bool)"];
}
// Function: 812.sol-BeatProfitMembership-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_19(uint256) = a / b
RETURN TMP_19"];
}
// Function: 812.sol-BeatProfitMembership-extendMembership(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= priceOfPeriod[_type],Payment Amount Wrong.)

IRs:
REF_7(uint256) -> priceOfPeriod[_type]
TMP_0(bool) = msg.value >= REF_7
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,Payment Amount Wrong.)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_type == 4

IRs:
TMP_2(bool) = _type == 4
CONDITION TMP_2"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Premium[msg.sender] = true

IRs:
REF_8(bool) -> Premium[msg.sender]
REF_8(bool) (->Premium) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
DueTime[msg.sender] = 4689878400

IRs:
REF_9(uint256) -> DueTime[msg.sender]
REF_9(uint256) (->DueTime) := 4689878400(uint256)"];
4->9;
5[label="Node Type: IF 5

EXPRESSION:
DueTime[msg.sender] > now

IRs:
REF_10(uint256) -> DueTime[msg.sender]
TMP_3(bool) = REF_10 > now
CONDITION TMP_3"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
DueTime[msg.sender] += mul(div(msg.value,priceOfPeriod[_type]),TimeInSec[_type])

IRs:
REF_11(uint256) -> DueTime[msg.sender]
REF_12(uint256) -> priceOfPeriod[_type]
TMP_4(uint256) = INTERNAL_CALL, BeatProfitMembership.div(uint256,uint256)(msg.value,REF_12)
REF_13(uint256) -> TimeInSec[_type]
TMP_5(uint256) = INTERNAL_CALL, BeatProfitMembership.mul(uint256,uint256)(TMP_4,REF_13)
REF_11(-> DueTime) = REF_11 + TMP_5"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
DueTime[msg.sender] = now + mul(div(msg.value,priceOfPeriod[_type]),TimeInSec[_type])

IRs:
REF_14(uint256) -> DueTime[msg.sender]
REF_15(uint256) -> priceOfPeriod[_type]
TMP_6(uint256) = INTERNAL_CALL, BeatProfitMembership.div(uint256,uint256)(msg.value,REF_15)
REF_16(uint256) -> TimeInSec[_type]
TMP_7(uint256) = INTERNAL_CALL, BeatProfitMembership.mul(uint256,uint256)(TMP_6,REF_16)
TMP_8(uint256) = now + TMP_7
REF_14(uint256) (->DueTime) := TMP_8(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owner.transfer(msg.value)

IRs:
Transfer dest:owner value:msg.value"];
}
// Function: 812.sol-BeatProfitMembership-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_14(bool) = a == 0
CONDITION TMP_14"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_15(uint256) = a * b
c(uint256) := TMP_15(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_16(uint256) = c / a
TMP_17(bool) = TMP_16 == b
TMP_18(None) = SOLIDITY_CALL assert(bool)(TMP_17)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 812.sol-BeatProfitMembership-setMemberShip(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_12(bool) = msg.sender == owner
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
DueTime[user] = _timestamp

IRs:
REF_28(uint256) -> DueTime[user]
REF_28(uint256) (->DueTime) := _timestamp(uint256)"];
}
// Function: 812.sol-BeatProfitMembership-setPrice(uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,Only Available to BeatProfit Core Team)

IRs:
TMP_10(bool) = msg.sender == owner
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,Only Available to BeatProfit Core Team)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
priceOfPeriod[0] = new_prices[0]

IRs:
REF_18(uint256) -> priceOfPeriod[0]
REF_19(uint256) -> new_prices[0]
REF_18(uint256) (->priceOfPeriod) := REF_19(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
priceOfPeriod[1] = new_prices[1]

IRs:
REF_20(uint256) -> priceOfPeriod[1]
REF_21(uint256) -> new_prices[1]
REF_20(uint256) (->priceOfPeriod) := REF_21(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
priceOfPeriod[2] = new_prices[2]

IRs:
REF_22(uint256) -> priceOfPeriod[2]
REF_23(uint256) -> new_prices[2]
REF_22(uint256) (->priceOfPeriod) := REF_23(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
priceOfPeriod[3] = new_prices[3]

IRs:
REF_24(uint256) -> priceOfPeriod[3]
REF_25(uint256) -> new_prices[3]
REF_24(uint256) (->priceOfPeriod) := REF_25(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
priceOfPeriod[4] = new_prices[4]

IRs:
REF_26(uint256) -> priceOfPeriod[4]
REF_27(uint256) -> new_prices[4]
REF_26(uint256) (->priceOfPeriod) := REF_27(uint256)"];
}
// Function: 812.sol-BeatProfitMembership-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = 0x6A3CACAbaA5958A0cA73bd3908445d81852F3A7E

IRs:
owner(address) := 606506108147136504495158179405087647376471964286(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
priceOfPeriod = (10000000000000000,30000000000000000,300000000000000000,2000000000000000000,5000000000000000000)

IRs:
priceOfPeriod(uint256[]) = ['10000000000000000(uint256)', '30000000000000000(uint256)', '300000000000000000(uint256)', '2000000000000000000(uint256)', '5000000000000000000(uint256)']"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
TimeInSec = (3600,86400,2592000,31536000)

IRs:
TimeInSec(uint256[]) = ['3600(uint256)', '86400(uint256)', '2592000(uint256)', '31536000(uint256)']"];
}
// Function: 812.sol-BeatProfitMembership-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_20(bool) = b <= a
TMP_21(None) = SOLIDITY_CALL assert(bool)(TMP_20)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_22(uint256) = a - b
RETURN TMP_22"];
}
}
