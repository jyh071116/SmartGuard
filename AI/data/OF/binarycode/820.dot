digraph G {
// Function: 820.sol-BAYToken-acceptOwnership()
digraph{
}
// Function: 820.sol-BAYToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_spender
"];
}
// Function: 820.sol-BAYToken-approve(address,uint256)
digraph{
}
// Function: 820.sol-BAYToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner
"];
}
// Function: 820.sol-BAYToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
issue(msg.sender,10 ** 10 * 10 ** 18)

IRs:
TMP_263(uint256) = 10 ** 10
TMP_264(uint256) = 10 ** 18
TMP_265(uint256) = TMP_263 * TMP_264
INTERNAL_CALL, SmartToken.issue(address,uint256)(msg.sender,TMP_265)"];
}
// Function: 820.sol-BAYToken-constructor(string,string,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(_name).length > 0 && bytes(_symbol).length > 0)

IRs:
TMP_241 = CONVERT _name to bytes
REF_47 -> LENGTH TMP_241
TMP_242(bool) = REF_47 > 0
TMP_243 = CONVERT _symbol to bytes
REF_48 -> LENGTH TMP_243
TMP_244(bool) = REF_48 > 0
TMP_245(bool) = TMP_242 && TMP_244
TMP_246(None) = SOLIDITY_CALL require(bool)(TMP_245)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint8) := _decimals(uint8)"];
}
// Function: 820.sol-BAYToken-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-BAYToken-destroy(address,uint256)
digraph{
}
// Function: 820.sol-BAYToken-disableTransfers(bool)
digraph{
}
// Function: 820.sol-BAYToken-greaterThanZero(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_268(bool) = _amount > 0
TMP_269(None) = SOLIDITY_CALL require(bool)(TMP_268)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-BAYToken-issue(address,uint256)
digraph{
}
// Function: 820.sol-BAYToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-BAYToken-notThis(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(this))

IRs:
TMP_273 = CONVERT this to address
TMP_274(bool) = _address != TMP_273
TMP_275(None) = SOLIDITY_CALL require(bool)(TMP_274)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-BAYToken-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-BAYToken-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner)

IRs:
TMP_276(bool) = msg.sender == owner
TMP_277(None) = SOLIDITY_CALL assert(bool)(TMP_276)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-BAYToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_222(uint256) = _x + _y
z(uint256) := TMP_222(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_223(bool) = z >= _x
TMP_224(None) = SOLIDITY_CALL assert(bool)(TMP_223)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 820.sol-BAYToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x * _y

IRs:
TMP_228(uint256) = _x * _y
z(uint256) := TMP_228(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_x == 0 || z / _x == _y)

IRs:
TMP_229(bool) = _x == 0
TMP_230(uint256) = z / _x
TMP_231(bool) = TMP_230 == _y
TMP_232(bool) = TMP_229 || TMP_231
TMP_233(None) = SOLIDITY_CALL assert(bool)(TMP_232)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 820.sol-BAYToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_x >= _y)

IRs:
TMP_225(bool) = _x >= _y
TMP_226(None) = SOLIDITY_CALL assert(bool)(TMP_225)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_227(uint256) = _x - _y
RETURN TMP_227"];
}
// Function: 820.sol-BAYToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
standard = Token 0.1

IRs:
standard(string) := Token 0.1(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = 

IRs:
name(string) := (string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = 

IRs:
symbol(string) := (string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 0

IRs:
decimals(uint8) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
version = 0.3

IRs:
version(string) := 0.3(string)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
transfersEnabled = true

IRs:
transfersEnabled(bool) := True(bool)"];
}
// Function: 820.sol-BAYToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-BAYToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-BAYToken-transfer(address,uint256)
digraph{
}
// Function: 820.sol-BAYToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 820.sol-BAYToken-transferOwnership(address)
digraph{
}
// Function: 820.sol-BAYToken-transfersAllowed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(transfersEnabled)

IRs:
TMP_267(None) = SOLIDITY_CALL assert(bool)(transfersEnabled)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-BAYToken-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(0))

IRs:
TMP_270 = CONVERT 0 to address
TMP_271(bool) = _address != TMP_270
TMP_272(None) = SOLIDITY_CALL require(bool)(TMP_271)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-BAYToken-withdrawTokens(IERC20Token,address,uint256)
digraph{
}
// Function: 820.sol-ERC20Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_spender
"];
}
// Function: 820.sol-ERC20Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value == 0 || allowance[msg.sender][_spender] == 0)

IRs:
TMP_92(bool) = _value == 0
REF_15(mapping(address => uint256)) -> allowance[msg.sender]
REF_16(uint256) -> REF_15[_spender]
TMP_93(bool) = REF_16 == 0
TMP_94(bool) = TMP_92 || TMP_93
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_17(mapping(address => uint256)) -> allowance[msg.sender]
REF_18(uint256) -> REF_17[_spender]
REF_18(uint256) (->allowance) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
validAddress(_spender)

IRs:
MODIFIER_CALL, Utils.validAddress(address)(_spender)"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 820.sol-ERC20Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner
"];
}
// Function: 820.sol-ERC20Token-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-ERC20Token-constructor(string,string,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(_name).length > 0 && bytes(_symbol).length > 0)

IRs:
TMP_76 = CONVERT _name to bytes
REF_1 -> LENGTH TMP_76
TMP_77(bool) = REF_1 > 0
TMP_78 = CONVERT _symbol to bytes
REF_2 -> LENGTH TMP_78
TMP_79(bool) = REF_2 > 0
TMP_80(bool) = TMP_77 && TMP_79
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint8) := _decimals(uint8)"];
}
// Function: 820.sol-ERC20Token-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-ERC20Token-greaterThanZero(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_98(bool) = _amount > 0
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-ERC20Token-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-ERC20Token-notThis(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(this))

IRs:
TMP_103 = CONVERT this to address
TMP_104(bool) = _address != TMP_103
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-ERC20Token-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_64(uint256) = _x + _y
z(uint256) := TMP_64(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_65(bool) = z >= _x
TMP_66(None) = SOLIDITY_CALL assert(bool)(TMP_65)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 820.sol-ERC20Token-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x * _y

IRs:
TMP_70(uint256) = _x * _y
z(uint256) := TMP_70(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_x == 0 || z / _x == _y)

IRs:
TMP_71(bool) = _x == 0
TMP_72(uint256) = z / _x
TMP_73(bool) = TMP_72 == _y
TMP_74(bool) = TMP_71 || TMP_73
TMP_75(None) = SOLIDITY_CALL assert(bool)(TMP_74)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 820.sol-ERC20Token-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_x >= _y)

IRs:
TMP_67(bool) = _x >= _y
TMP_68(None) = SOLIDITY_CALL assert(bool)(TMP_67)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_69(uint256) = _x - _y
RETURN TMP_69"];
}
// Function: 820.sol-ERC20Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
standard = Token 0.1

IRs:
standard(string) := Token 0.1(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = 

IRs:
name(string) := (string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = 

IRs:
symbol(string) := (string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 0

IRs:
decimals(uint8) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
}
// Function: 820.sol-ERC20Token-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-ERC20Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-ERC20Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[msg.sender] = safeSub(balanceOf[msg.sender],_value)

IRs:
REF_3(uint256) -> balanceOf[msg.sender]
REF_4(uint256) -> balanceOf[msg.sender]
TMP_82(uint256) = INTERNAL_CALL, Utils.safeSub(uint256,uint256)(REF_4,_value)
REF_3(uint256) (->balanceOf) := TMP_82(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[_to] = safeAdd(balanceOf[_to],_value)

IRs:
REF_5(uint256) -> balanceOf[_to]
REF_6(uint256) -> balanceOf[_to]
TMP_83(uint256) = INTERNAL_CALL, Utils.safeAdd(uint256,uint256)(REF_6,_value)
REF_5(uint256) (->balanceOf) := TMP_83(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
validAddress(_to)

IRs:
MODIFIER_CALL, Utils.validAddress(address)(_to)"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 820.sol-ERC20Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender],_value)

IRs:
REF_7(mapping(address => uint256)) -> allowance[_from]
REF_8(uint256) -> REF_7[msg.sender]
REF_9(mapping(address => uint256)) -> allowance[_from]
REF_10(uint256) -> REF_9[msg.sender]
TMP_86(uint256) = INTERNAL_CALL, Utils.safeSub(uint256,uint256)(REF_10,_value)
REF_8(uint256) (->allowance) := TMP_86(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[_from] = safeSub(balanceOf[_from],_value)

IRs:
REF_11(uint256) -> balanceOf[_from]
REF_12(uint256) -> balanceOf[_from]
TMP_87(uint256) = INTERNAL_CALL, Utils.safeSub(uint256,uint256)(REF_12,_value)
REF_11(uint256) (->balanceOf) := TMP_87(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_to] = safeAdd(balanceOf[_to],_value)

IRs:
REF_13(uint256) -> balanceOf[_to]
REF_14(uint256) -> balanceOf[_to]
TMP_88(uint256) = INTERNAL_CALL, Utils.safeAdd(uint256,uint256)(REF_14,_value)
REF_13(uint256) (->balanceOf) := TMP_88(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
validAddress(_from)

IRs:
MODIFIER_CALL, Utils.validAddress(address)(_from)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
validAddress(_to)

IRs:
MODIFIER_CALL, Utils.validAddress(address)(_to)"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 820.sol-ERC20Token-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(0))

IRs:
TMP_100 = CONVERT 0 to address
TMP_101(bool) = _address != TMP_100
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-IERC20Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_spender
"];
}
// Function: 820.sol-IERC20Token-approve(address,uint256)
digraph{
}
// Function: 820.sol-IERC20Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner
"];
}
// Function: 820.sol-IERC20Token-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-IERC20Token-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-IERC20Token-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-IERC20Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-IERC20Token-transfer(address,uint256)
digraph{
}
// Function: 820.sol-IERC20Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 820.sol-IOwned-acceptOwnership()
digraph{
}
// Function: 820.sol-IOwned-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-IOwned-transferOwnership(address)
digraph{
}
// Function: 820.sol-ISmartToken-acceptOwnership()
digraph{
}
// Function: 820.sol-ISmartToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_spender
"];
}
// Function: 820.sol-ISmartToken-approve(address,uint256)
digraph{
}
// Function: 820.sol-ISmartToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner
"];
}
// Function: 820.sol-ISmartToken-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-ISmartToken-destroy(address,uint256)
digraph{
}
// Function: 820.sol-ISmartToken-disableTransfers(bool)
digraph{
}
// Function: 820.sol-ISmartToken-issue(address,uint256)
digraph{
}
// Function: 820.sol-ISmartToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-ISmartToken-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-ISmartToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-ISmartToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-ISmartToken-transfer(address,uint256)
digraph{
}
// Function: 820.sol-ISmartToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 820.sol-ISmartToken-transferOwnership(address)
digraph{
}
// Function: 820.sol-ITokenHolder-acceptOwnership()
digraph{
}
// Function: 820.sol-ITokenHolder-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-ITokenHolder-transferOwnership(address)
digraph{
}
// Function: 820.sol-ITokenHolder-withdrawTokens(IERC20Token,address,uint256)
digraph{
}
// Function: 820.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_3(bool) = msg.sender == newOwner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerUpdate(owner,newOwner)

IRs:
Emit OwnerUpdate(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_6 = CONVERT 0 to address
newOwner(address) := TMP_6(address)"];
}
// Function: 820.sol-Owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 820.sol-Owned-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-Owned-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner)

IRs:
TMP_7(bool) = msg.sender == owner
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != owner)

IRs:
TMP_0(bool) = _newOwner != owner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
3->1;
}
// Function: 820.sol-SmartToken-acceptOwnership()
digraph{
}
// Function: 820.sol-SmartToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_spender
"];
}
// Function: 820.sol-SmartToken-approve(address,uint256)
digraph{
}
// Function: 820.sol-SmartToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner
"];
}
// Function: 820.sol-SmartToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 820.sol-SmartToken-constructor(string,string,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
NewSmartToken(address(this))

IRs:
TMP_153 = CONVERT this to address
Emit NewSmartToken(TMP_153)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ERC20Token(_name,_symbol,_decimals)

IRs:
INTERNAL_CALL, ERC20Token.constructor(string,string,uint8)(_name,_symbol,_decimals)"];
2->1;
}
// Function: 820.sol-SmartToken-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-SmartToken-destroy(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _from || msg.sender == owner)

IRs:
TMP_165(bool) = msg.sender == _from
TMP_166(bool) = msg.sender == owner
TMP_167(bool) = TMP_165 || TMP_166
TMP_168(None) = SOLIDITY_CALL require(bool)(TMP_167)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[_from] = safeSub(balanceOf[_from],_amount)

IRs:
REF_40(uint256) -> balanceOf[_from]
REF_41(uint256) -> balanceOf[_from]
TMP_169(uint256) = INTERNAL_CALL, Utils.safeSub(uint256,uint256)(REF_41,_amount)
REF_40(uint256) (->balanceOf) := TMP_169(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = safeSub(totalSupply,_amount)

IRs:
TMP_170(uint256) = INTERNAL_CALL, Utils.safeSub(uint256,uint256)(totalSupply,_amount)
totalSupply(uint256) := TMP_170(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(_from,this,_amount)

IRs:
Emit Transfer(_from,this,_amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Destruction(_amount)

IRs:
Emit Destruction(_amount)"];
}
// Function: 820.sol-SmartToken-disableTransfers(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transfersEnabled = ! _disable

IRs:
TMP_156 = UnaryType.BANG _disable 
transfersEnabled(bool) := TMP_156(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
2->1;
}
// Function: 820.sol-SmartToken-greaterThanZero(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_179(bool) = _amount > 0
TMP_180(None) = SOLIDITY_CALL require(bool)(TMP_179)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-SmartToken-issue(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = safeAdd(totalSupply,_amount)

IRs:
TMP_158(uint256) = INTERNAL_CALL, Utils.safeAdd(uint256,uint256)(totalSupply,_amount)
totalSupply(uint256) := TMP_158(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[_to] = safeAdd(balanceOf[_to],_amount)

IRs:
REF_38(uint256) -> balanceOf[_to]
REF_39(uint256) -> balanceOf[_to]
TMP_159(uint256) = INTERNAL_CALL, Utils.safeAdd(uint256,uint256)(REF_39,_amount)
REF_38(uint256) (->balanceOf) := TMP_159(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Issuance(_amount)

IRs:
Emit Issuance(_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(this,_to,_amount)

IRs:
Emit Transfer(this,_to,_amount)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
validAddress(_to)

IRs:
MODIFIER_CALL, Utils.validAddress(address)(_to)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
notThis(_to)

IRs:
MODIFIER_CALL, Utils.notThis(address)(_to)"];
7->1;
}
// Function: 820.sol-SmartToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-SmartToken-notThis(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(this))

IRs:
TMP_184 = CONVERT this to address
TMP_185(bool) = _address != TMP_184
TMP_186(None) = SOLIDITY_CALL require(bool)(TMP_185)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-SmartToken-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-SmartToken-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner)

IRs:
TMP_187(bool) = msg.sender == owner
TMP_188(None) = SOLIDITY_CALL assert(bool)(TMP_187)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-SmartToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_112(uint256) = _x + _y
z(uint256) := TMP_112(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_113(bool) = z >= _x
TMP_114(None) = SOLIDITY_CALL assert(bool)(TMP_113)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 820.sol-SmartToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x * _y

IRs:
TMP_118(uint256) = _x * _y
z(uint256) := TMP_118(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_x == 0 || z / _x == _y)

IRs:
TMP_119(bool) = _x == 0
TMP_120(uint256) = z / _x
TMP_121(bool) = TMP_120 == _y
TMP_122(bool) = TMP_119 || TMP_121
TMP_123(None) = SOLIDITY_CALL assert(bool)(TMP_122)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 820.sol-SmartToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_x >= _y)

IRs:
TMP_115(bool) = _x >= _y
TMP_116(None) = SOLIDITY_CALL assert(bool)(TMP_115)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_117(uint256) = _x - _y
RETURN TMP_117"];
}
// Function: 820.sol-SmartToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
standard = Token 0.1

IRs:
standard(string) := Token 0.1(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = 

IRs:
name(string) := (string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = 

IRs:
symbol(string) := (string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 0

IRs:
decimals(uint8) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
version = 0.3

IRs:
version(string) := 0.3(string)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
transfersEnabled = true

IRs:
transfersEnabled(bool) := True(bool)"];
}
// Function: 820.sol-SmartToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-SmartToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-SmartToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(super.transfer(_to,_value))

IRs:
TMP_173(bool) = INTERNAL_CALL, ERC20Token.transfer(address,uint256)(_to,_value)
TMP_174(None) = SOLIDITY_CALL assert(bool)(TMP_173)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transfersAllowed()

IRs:
MODIFIER_CALL, SmartToken.transfersAllowed()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 820.sol-SmartToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(super.transferFrom(_from,_to,_value))

IRs:
TMP_176(bool) = INTERNAL_CALL, ERC20Token.transferFrom(address,address,uint256)(_from,_to,_value)
TMP_177(None) = SOLIDITY_CALL assert(bool)(TMP_176)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transfersAllowed()

IRs:
MODIFIER_CALL, SmartToken.transfersAllowed()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 820.sol-SmartToken-transferOwnership(address)
digraph{
}
// Function: 820.sol-SmartToken-transfersAllowed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(transfersEnabled)

IRs:
TMP_189(None) = SOLIDITY_CALL assert(bool)(transfersEnabled)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-SmartToken-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(0))

IRs:
TMP_181 = CONVERT 0 to address
TMP_182(bool) = _address != TMP_181
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-SmartToken-withdrawTokens(IERC20Token,address,uint256)
digraph{
}
// Function: 820.sol-TokenHolder-acceptOwnership()
digraph{
}
// Function: 820.sol-TokenHolder-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-TokenHolder-greaterThanZero(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_54(bool) = _amount > 0
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-TokenHolder-notThis(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(this))

IRs:
TMP_59 = CONVERT this to address
TMP_60(bool) = _address != TMP_59
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-TokenHolder-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-TokenHolder-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner)

IRs:
TMP_62(bool) = msg.sender == owner
TMP_63(None) = SOLIDITY_CALL assert(bool)(TMP_62)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-TokenHolder-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_29(uint256) = _x + _y
z(uint256) := TMP_29(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_30(bool) = z >= _x
TMP_31(None) = SOLIDITY_CALL assert(bool)(TMP_30)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 820.sol-TokenHolder-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x * _y

IRs:
TMP_35(uint256) = _x * _y
z(uint256) := TMP_35(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_x == 0 || z / _x == _y)

IRs:
TMP_36(bool) = _x == 0
TMP_37(uint256) = z / _x
TMP_38(bool) = TMP_37 == _y
TMP_39(bool) = TMP_36 || TMP_38
TMP_40(None) = SOLIDITY_CALL assert(bool)(TMP_39)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 820.sol-TokenHolder-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_x >= _y)

IRs:
TMP_32(bool) = _x >= _y
TMP_33(None) = SOLIDITY_CALL assert(bool)(TMP_32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_34(uint256) = _x - _y
RETURN TMP_34"];
}
// Function: 820.sol-TokenHolder-transferOwnership(address)
digraph{
}
// Function: 820.sol-TokenHolder-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(0))

IRs:
TMP_56 = CONVERT 0 to address
TMP_57(bool) = _address != TMP_56
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-TokenHolder-withdrawTokens(IERC20Token,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_token.transfer(_to,_amount))

IRs:
TMP_48(bool) = HIGH_LEVEL_CALL, dest:_token(IERC20Token), function:transfer, arguments:['_to', '_amount']  
TMP_49(None) = SOLIDITY_CALL assert(bool)(TMP_48)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
validAddress(_token)

IRs:
MODIFIER_CALL, Utils.validAddress(address)(_token)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validAddress(_to)

IRs:
MODIFIER_CALL, Utils.validAddress(address)(_to)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
notThis(_to)

IRs:
MODIFIER_CALL, Utils.notThis(address)(_to)"];
5->1;
}
// Function: 820.sol-Utils-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 820.sol-Utils-greaterThanZero(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_21(bool) = _amount > 0
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-Utils-notThis(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(this))

IRs:
TMP_26 = CONVERT this to address
TMP_27(bool) = _address != TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 820.sol-Utils-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_9(uint256) = _x + _y
z(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_10(bool) = z >= _x
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 820.sol-Utils-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x * _y

IRs:
TMP_15(uint256) = _x * _y
z(uint256) := TMP_15(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_x == 0 || z / _x == _y)

IRs:
TMP_16(bool) = _x == 0
TMP_17(uint256) = z / _x
TMP_18(bool) = TMP_17 == _y
TMP_19(bool) = TMP_16 || TMP_18
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 820.sol-Utils-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_x >= _y)

IRs:
TMP_12(bool) = _x >= _y
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_14(uint256) = _x - _y
RETURN TMP_14"];
}
// Function: 820.sol-Utils-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(0))

IRs:
TMP_23 = CONVERT 0 to address
TMP_24(bool) = _address != TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
