digraph G {
// Function: 846.sol-YeYingOil-YeYingOil()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = 2100000000 * 10 ** uint256(decimals)

IRs:
TMP_0 = CONVERT decimals to uint256
TMP_1(uint256) = 10 ** TMP_0
TMP_2(uint256) = 2100000000 * TMP_1
totalSupply(uint256) := TMP_2(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] = totalSupply

IRs:
REF_0(uint256) -> balanceOf[msg.sender]
REF_0(uint256) (->balanceOf) := totalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
name = YeYingOil

IRs:
name(string) := YeYingOil(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = YYO

IRs:
symbol(string) := YYO(string)"];
}
// Function: 846.sol-YeYingOil-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_3(bool) = _to != 0
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_1(uint256) -> balanceOf[_from]
TMP_5(bool) = REF_1 >= _value
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value > balanceOf[_to])

IRs:
REF_2(uint256) -> balanceOf[_to]
TMP_7(uint256) = REF_2 + _value
REF_3(uint256) -> balanceOf[_to]
TMP_8(bool) = TMP_7 > REF_3
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balanceOf[_from] + balanceOf[_to]

IRs:
REF_4(uint256) -> balanceOf[_from]
REF_5(uint256) -> balanceOf[_to]
TMP_10(uint256) = REF_4 + REF_5
previousBalances(uint256) := TMP_10(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_6(uint256) -> balanceOf[_from]
REF_6(-> balanceOf) = REF_6 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_7(uint256) -> balanceOf[_to]
REF_7(-> balanceOf) = REF_7 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances)

IRs:
REF_8(uint256) -> balanceOf[_from]
REF_9(uint256) -> balanceOf[_to]
TMP_12(uint256) = REF_8 + REF_9
TMP_13(bool) = TMP_12 == previousBalances
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
}
// Function: 846.sol-YeYingOil-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_20(mapping(address => uint256)) -> allowance[msg.sender]
REF_21(uint256) -> REF_20[_spender]
REF_21(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 846.sol-YeYingOil-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = tokenRecipient(_spender)

IRs:
TMP_31 = CONVERT _spender to tokenRecipient
spender(tokenRecipient) := TMP_31(tokenRecipient)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_32(bool) = INTERNAL_CALL, YeYingOil.approve(address,uint256)(_spender,_value)
CONDITION TMP_32"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spender.receiveApproval(msg.sender,_value,this,_extraData)

IRs:
HIGH_LEVEL_CALL, dest:spender(tokenRecipient), function:receiveApproval, arguments:['msg.sender', '_value', 'this', '_extraData']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 846.sol-YeYingOil-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_23(uint256) -> balanceOf[msg.sender]
TMP_34(bool) = REF_23 >= _value
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] -= _value

IRs:
REF_24(uint256) -> balanceOf[msg.sender]
REF_24(-> balanceOf) = REF_24 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 846.sol-YeYingOil-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_25(uint256) -> balanceOf[_from]
TMP_37(bool) = REF_25 >= _value
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_26(mapping(address => uint256)) -> allowance[_from]
REF_27(uint256) -> REF_26[msg.sender]
TMP_39(bool) = _value <= REF_27
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_28(uint256) -> balanceOf[_from]
REF_28(-> balanceOf) = REF_28 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_29(mapping(address => uint256)) -> allowance[_from]
REF_30(uint256) -> REF_29[msg.sender]
REF_30(-> allowance) = REF_30 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 846.sol-YeYingOil-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
value = msg.value

IRs:
value(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
value > 0 && msg.value > 0

IRs:
TMP_15(bool) = value > 0
TMP_16(bool) = msg.value > 0
TMP_17(bool) = TMP_15 && TMP_16
CONDITION TMP_17"];
2->3[label="True"];
2->11[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalEthInWei = totalEthInWei + msg.value

IRs:
TMP_18(uint256) = totalEthInWei + msg.value
totalEthInWei(uint256) := TMP_18(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
amount = msg.value * 10000

IRs:
TMP_19(uint256) = msg.value * 10000
amount(uint256) := TMP_19(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(balanceOf[admin] >= amount)

IRs:
REF_10(uint256) -> balanceOf[admin]
TMP_20(bool) = REF_10 >= amount
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[admin] = balanceOf[admin] - amount

IRs:
REF_11(uint256) -> balanceOf[admin]
REF_12(uint256) -> balanceOf[admin]
TMP_22(uint256) = REF_12 - amount
REF_11(uint256) (->balanceOf) := TMP_22(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender] + amount

IRs:
REF_13(uint256) -> balanceOf[msg.sender]
REF_14(uint256) -> balanceOf[msg.sender]
TMP_23(uint256) = REF_14 + amount
REF_13(uint256) (->balanceOf) := TMP_23(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
admin.transfer(msg.value)

IRs:
Transfer dest:admin value:msg.value"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(admin,msg.sender,amount)

IRs:
Emit Transfer(admin,msg.sender,amount)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
transferCount ++

IRs:
TMP_26(uint256) := transferCount(uint256)
transferCount(uint256) = transferCount + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
}
// Function: 846.sol-YeYingOil-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 846.sol-YeYingOil-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, YeYingOil._transfer(address,address,uint256)(msg.sender,_to,_value)"];
}
// Function: 846.sol-YeYingOil-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_16(mapping(address => uint256)) -> allowance[_from]
REF_17(uint256) -> REF_16[msg.sender]
TMP_28(bool) = _value <= REF_17
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_18(mapping(address => uint256)) -> allowance[_from]
REF_19(uint256) -> REF_18[msg.sender]
REF_19(-> allowance) = REF_19 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, YeYingOil._transfer(address,address,uint256)(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 846.sol-tokenRecipient-receiveApproval(address,uint256,address,bytes)
digraph{
}
}
