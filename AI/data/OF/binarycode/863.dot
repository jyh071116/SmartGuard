digraph G {
// Function: 863.sol-AddressUtils-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
size > 0

IRs:
TMP_7(bool) = size > 0
RETURN TMP_7"];
}
// Function: 863.sol-ChallengeToken-ChallengeToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ERC721Token(Challenge Token,CDO)

IRs:
INTERNAL_CALL, ERC721Token.ERC721Token(string,string)(Challenge Token,CDO)"];
}
// Function: 863.sol-ChallengeToken-ERC721Token(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name_ = _name

IRs:
name_(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol_ = _symbol

IRs:
symbol_(string) := _symbol(string)"];
}
// Function: 863.sol-ChallengeToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 863.sol-ChallengeToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
clearApproval(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
removeTokenFrom(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.removeTokenFrom(address,uint256)(_owner,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_owner,address(0),_tokenId)

IRs:
TMP_306 = CONVERT 0 to address
Emit Transfer(_owner,TMP_306,_tokenId)"];
}
// Function: 863.sol-ChallengeToken-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_298 = CONVERT 0 to address
TMP_299(bool) = _to != TMP_298
TMP_300(None) = SOLIDITY_CALL require(bool)(TMP_299)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_302 = CONVERT 0 to address
Emit Transfer(TMP_302,_to,_tokenId)"];
}
// Function: 863.sol-ChallengeToken-_setTokenURI(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_231(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_232(None) = SOLIDITY_CALL require(bool)(TMP_231)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenURIs[_tokenId] = _uri

IRs:
REF_93(string) -> tokenURIs[_tokenId]
REF_93(string) (->tokenURIs) := _uri(string)"];
}
// Function: 863.sol-ChallengeToken-acceptChallenge(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isCommunityChallenge[_index] == true

IRs:
REF_195(bool) -> isCommunityChallenge[_index]
TMP_358(bool) = REF_195 == True
CONDITION TMP_358"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ChallengeAccepted(msg.sender,_index)

IRs:
Emit ChallengeAccepted(msg.sender,_index)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 863.sol-ChallengeToken-addReward(uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == _amount)

IRs:
TMP_344(bool) = msg.value == _amount
TMP_345(None) = SOLIDITY_CALL require(bool)(TMP_344)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(confirmations[_index][_verifier] == false)

IRs:
REF_175(mapping(address => bool)) -> confirmations[_index]
REF_176(bool) -> REF_175[_verifier]
TMP_346(bool) = REF_176 == False
TMP_347(None) = SOLIDITY_CALL require(bool)(TMP_346)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
rewards[_index][_verifier] == 0

IRs:
REF_177(mapping(address => uint256)) -> rewards[_index]
REF_178(uint256) -> REF_177[_verifier]
TMP_348(bool) = REF_178 == 0
CONDITION TMP_348"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
verifiers[_index].push(_verifier)

IRs:
REF_179(address[]) -> verifiers[_index]
REF_181 -> LENGTH REF_179
TMP_350(uint256) := REF_181(uint256)
TMP_351(uint256) = TMP_350 + 1
REF_181(uint256) (->verifiers) := TMP_351(uint256)
REF_182(address) -> REF_179[TMP_350]
REF_182(address) (->verifiers) := _verifier(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
rewards[_index][_verifier] = msg.value

IRs:
REF_183(mapping(address => uint256)) -> rewards[_index]
REF_184(uint256) -> REF_183[_verifier]
REF_184(uint256) (->rewards) := msg.value(uint256)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
rewards[_index][_verifier] += msg.value

IRs:
REF_185(mapping(address => uint256)) -> rewards[_index]
REF_186(uint256) -> REF_185[_verifier]
REF_186(-> rewards) = REF_186 + msg.value"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 863.sol-ChallengeToken-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_143(address) -> tokenOwner[_tokenId]
TMP_316 = CONVERT 0 to address
TMP_317(bool) = REF_143 == TMP_316
TMP_318(None) = SOLIDITY_CALL require(bool)(TMP_317)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_144(address) -> tokenOwner[_tokenId]
REF_144(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_145(uint256) -> ownedTokensCount[_to]
REF_146(uint256) -> ownedTokensCount[_to]
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_146', '1'] 
REF_145(uint256) (->ownedTokensCount) := TMP_319(uint256)"];
}
// Function: 863.sol-ChallengeToken-approve(address,uint256)
digraph{
}
// Function: 863.sol-ChallengeToken-balanceOf(address)
digraph{
}
// Function: 863.sol-ChallengeToken-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_366(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_367(None) = SOLIDITY_CALL require(bool)(TMP_366)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 863.sol-ChallengeToken-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_325(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_326 = UnaryType.BANG TMP_325 
CONDITION TMP_326"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(_from,_tokenId,_data)

IRs:
TMP_327 = CONVERT _to to ERC721Receiver
TMP_328(bytes4) = HIGH_LEVEL_CALL, dest:TMP_327(ERC721Receiver), function:onERC721Received, arguments:['_from', '_tokenId', '_data']  
retval(bytes4) := TMP_328(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_329(bool) = retval == ERC721_RECEIVED
RETURN TMP_329"];
}
// Function: 863.sol-ChallengeToken-claimReward(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_index) == msg.sender)

IRs:
TMP_352(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_index)
TMP_353(bool) = TMP_352 == msg.sender
TMP_354(None) = SOLIDITY_CALL require(bool)(TMP_353)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(confirmations[_index][_verifier] == true)

IRs:
REF_187(mapping(address => bool)) -> confirmations[_index]
REF_188(bool) -> REF_187[_verifier]
TMP_355(bool) = REF_188 == True
TMP_356(None) = SOLIDITY_CALL require(bool)(TMP_355)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
reward = rewards[_index][_verifier]

IRs:
REF_189(mapping(address => uint256)) -> rewards[_index]
REF_190(uint256) -> REF_189[_verifier]
reward(uint256) := REF_190(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rewards[_index][_verifier] = 0

IRs:
REF_191(mapping(address => uint256)) -> rewards[_index]
REF_192(uint256) -> REF_191[_verifier]
REF_192(uint256) (->rewards) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalRewards[_index] -= reward

IRs:
REF_193(uint256) -> totalRewards[_index]
REF_193(-> totalRewards) = REF_193 - reward"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
msg.sender.transfer(reward)

IRs:
Transfer dest:msg.sender value:reward"];
}
// Function: 863.sol-ChallengeToken-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_308(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_309(bool) = TMP_308 == _owner
TMP_310(None) = SOLIDITY_CALL require(bool)(TMP_309)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_141(address) -> tokenApprovals[_tokenId]
TMP_311 = CONVERT 0 to address
TMP_312(bool) = REF_141 != TMP_311
CONDITION TMP_312"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_142(address) -> tokenApprovals[_tokenId]
TMP_313 = CONVERT 0 to address
REF_142(address) (->tokenApprovals) := TMP_313(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(_owner,address(0),_tokenId)

IRs:
TMP_314 = CONVERT 0 to address
Emit Approval(_owner,TMP_314,_tokenId)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 863.sol-ChallengeToken-confirm(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
confirmations[_index][msg.sender] = true

IRs:
REF_173(mapping(address => bool)) -> confirmations[_index]
REF_174(bool) -> REF_173[msg.sender]
REF_174(bool) (->confirmations) := True(bool)"];
}
// Function: 863.sol-ChallengeToken-create(string,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
index = allTokens.length + 1

IRs:
REF_154 -> LENGTH allTokens
TMP_330(uint256) = REF_154 + 1
index(uint256) := TMP_330(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_mint(msg.sender,index)

IRs:
INTERNAL_CALL, ERC721Token._mint(address,uint256)(msg.sender,index)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
titles[index] = _title

IRs:
REF_155(string) -> titles[index]
REF_155(string) (->titles) := _title(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isCommunityChallenge[index] = _isCommunityChallenge

IRs:
REF_156(bool) -> isCommunityChallenge[index]
REF_156(bool) (->isCommunityChallenge) := _isCommunityChallenge(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
BoughtToken(msg.sender,index)

IRs:
Emit BoughtToken(msg.sender,index)"];
}
// Function: 863.sol-ChallengeToken-createWithReward(string,bool,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == _amount)

IRs:
TMP_333(bool) = msg.value == _amount
TMP_334(None) = SOLIDITY_CALL require(bool)(TMP_333)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(confirmations[index][_verifier] == false)

IRs:
REF_157(mapping(address => bool)) -> confirmations[index]
REF_158(bool) -> REF_157[_verifier]
TMP_335(bool) = REF_158 == False
TMP_336(None) = SOLIDITY_CALL require(bool)(TMP_335)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
index = allTokens.length + 1

IRs:
REF_159 -> LENGTH allTokens
TMP_337(uint256) = REF_159 + 1
index(uint256) := TMP_337(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_mint(msg.sender,index)

IRs:
INTERNAL_CALL, ERC721Token._mint(address,uint256)(msg.sender,index)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
titles[index] = _title

IRs:
REF_160(string) -> titles[index]
REF_160(string) (->titles) := _title(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalRewards[index] += msg.value

IRs:
REF_161(uint256) -> totalRewards[index]
REF_161(-> totalRewards) = REF_161 + msg.value"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
rewards[index][_verifier] == 0

IRs:
REF_162(mapping(address => uint256)) -> rewards[index]
REF_163(uint256) -> REF_162[_verifier]
TMP_339(bool) = REF_163 == 0
CONDITION TMP_339"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
verifiers[index].push(_verifier)

IRs:
REF_164(address[]) -> verifiers[index]
REF_166 -> LENGTH REF_164
TMP_341(uint256) := REF_166(uint256)
TMP_342(uint256) = TMP_341 + 1
REF_166(uint256) (->verifiers) := TMP_342(uint256)
REF_167(address) -> REF_164[TMP_341]
REF_167(address) (->verifiers) := _verifier(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
rewards[index][_verifier] = msg.value

IRs:
REF_168(mapping(address => uint256)) -> rewards[index]
REF_169(uint256) -> REF_168[_verifier]
REF_169(uint256) (->rewards) := msg.value(uint256)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
rewards[index][_verifier] += msg.value

IRs:
REF_170(mapping(address => uint256)) -> rewards[index]
REF_171(uint256) -> REF_170[_verifier]
REF_171(-> rewards) = REF_171 + msg.value"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isCommunityChallenge[index] = _isCommunityChallenge

IRs:
REF_172(bool) -> isCommunityChallenge[index]
REF_172(bool) (->isCommunityChallenge) := _isCommunityChallenge(bool)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
BoughtToken(msg.sender,index)

IRs:
Emit BoughtToken(msg.sender,index)"];
}
// Function: 863.sol-ChallengeToken-exists(uint256)
digraph{
}
// Function: 863.sol-ChallengeToken-getApproved(uint256)
digraph{
}
// Function: 863.sol-ChallengeToken-getToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenType_ = isCommunityChallenge[_tokenId]

IRs:
REF_197(bool) -> isCommunityChallenge[_tokenId]
tokenType_(bool) := REF_197(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenTitle_ = titles[_tokenId]

IRs:
REF_198(string) -> titles[_tokenId]
tokenTitle_(string) := REF_198(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenReward_ = totalRewards[_tokenId]

IRs:
REF_199(uint256) -> totalRewards[_tokenId]
tokenReward_(uint256) := REF_199(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
verifiers_ = verifiers[_tokenId]

IRs:
REF_200(address[]) -> verifiers[_tokenId]
verifiers_(address[]) = ['REF_200(address[])']"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(tokenType_,tokenTitle_,tokenReward_,verifiers_)

IRs:
RETURN tokenType_,tokenTitle_,tokenReward_,verifiers_"];
}
// Function: 863.sol-ChallengeToken-isApprovedForAll(address,address)
digraph{
}
// Function: 863.sol-ChallengeToken-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_291(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_291(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender)

IRs:
TMP_292(bool) = _spender == owner
TMP_293(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_294(bool) = TMP_293 == _spender
TMP_295(bool) = TMP_292 || TMP_294
TMP_296(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_297(bool) = TMP_295 || TMP_296
RETURN TMP_297"];
}
// Function: 863.sol-ChallengeToken-myTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownedTokens[msg.sender]

IRs:
REF_196(uint256[]) -> ownedTokens[msg.sender]
RETURN REF_196"];
}
// Function: 863.sol-ChallengeToken-name()
digraph{
}
// Function: 863.sol-ChallengeToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_361(bool) = msg.sender == owner
TMP_362(None) = SOLIDITY_CALL require(bool)(TMP_361)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 863.sol-ChallengeToken-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_363(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_364(bool) = TMP_363 == msg.sender
TMP_365(None) = SOLIDITY_CALL require(bool)(TMP_364)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 863.sol-ChallengeToken-ownerOf(uint256)
digraph{
}
// Function: 863.sol-ChallengeToken-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_320(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_321(bool) = TMP_320 == _from
TMP_322(None) = SOLIDITY_CALL require(bool)(TMP_321)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_148(uint256) -> ownedTokensCount[_from]
REF_149(uint256) -> ownedTokensCount[_from]
TMP_323(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_149', '1'] 
REF_148(uint256) (->ownedTokensCount) := TMP_323(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_151(address) -> tokenOwner[_tokenId]
TMP_324 = CONVERT 0 to address
REF_151(address) (->tokenOwner) := TMP_324(address)"];
}
// Function: 863.sol-ChallengeToken-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 863.sol-ChallengeToken-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 863.sol-ChallengeToken-setApprovalForAll(address,bool)
digraph{
}
// Function: 863.sol-ChallengeToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 863.sol-ChallengeToken-symbol()
digraph{
}
// Function: 863.sol-ChallengeToken-tokenByIndex(uint256)
digraph{
}
// Function: 863.sol-ChallengeToken-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 863.sol-ChallengeToken-tokenURI(uint256)
digraph{
}
// Function: 863.sol-ChallengeToken-totalSupply()
digraph{
}
// Function: 863.sol-ChallengeToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 863.sol-ChallengeToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_218 = CONVERT 0 to address
TMP_219(bool) = newOwner != TMP_218
TMP_220(None) = SOLIDITY_CALL require(bool)(TMP_219)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 863.sol-ERC721-approve(address,uint256)
digraph{
}
// Function: 863.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 863.sol-ERC721-exists(uint256)
digraph{
}
// Function: 863.sol-ERC721-getApproved(uint256)
digraph{
}
// Function: 863.sol-ERC721-isApprovedForAll(address,address)
digraph{
}
// Function: 863.sol-ERC721-name()
digraph{
}
// Function: 863.sol-ERC721-ownerOf(uint256)
digraph{
}
// Function: 863.sol-ERC721-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 863.sol-ERC721-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 863.sol-ERC721-setApprovalForAll(address,bool)
digraph{
}
// Function: 863.sol-ERC721-symbol()
digraph{
}
// Function: 863.sol-ERC721-tokenByIndex(uint256)
digraph{
}
// Function: 863.sol-ERC721-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 863.sol-ERC721-tokenURI(uint256)
digraph{
}
// Function: 863.sol-ERC721-totalSupply()
digraph{
}
// Function: 863.sol-ERC721-transferFrom(address,address,uint256)
digraph{
}
// Function: 863.sol-ERC721Basic-approve(address,uint256)
digraph{
}
// Function: 863.sol-ERC721Basic-balanceOf(address)
digraph{
}
// Function: 863.sol-ERC721Basic-exists(uint256)
digraph{
}
// Function: 863.sol-ERC721Basic-getApproved(uint256)
digraph{
}
// Function: 863.sol-ERC721Basic-isApprovedForAll(address,address)
digraph{
}
// Function: 863.sol-ERC721Basic-ownerOf(uint256)
digraph{
}
// Function: 863.sol-ERC721Basic-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 863.sol-ERC721Basic-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 863.sol-ERC721Basic-setApprovalForAll(address,bool)
digraph{
}
// Function: 863.sol-ERC721Basic-transferFrom(address,address,uint256)
digraph{
}
// Function: 863.sol-ERC721BasicToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
clearApproval(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
removeTokenFrom(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_owner,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_owner,address(0),_tokenId)

IRs:
TMP_77 = CONVERT 0 to address
Emit Transfer(_owner,TMP_77,_tokenId)"];
}
// Function: 863.sol-ERC721BasicToken-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_69 = CONVERT 0 to address
TMP_70(bool) = _to != TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_73 = CONVERT 0 to address
Emit Transfer(TMP_73,_to,_tokenId)"];
}
// Function: 863.sol-ERC721BasicToken-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_11(address) -> tokenOwner[_tokenId]
TMP_87 = CONVERT 0 to address
TMP_88(bool) = REF_11 == TMP_87
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_12(address) -> tokenOwner[_tokenId]
REF_12(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_13(uint256) -> ownedTokensCount[_to]
REF_14(uint256) -> ownedTokensCount[_to]
TMP_90(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_14', '1'] 
REF_13(uint256) (->ownedTokensCount) := TMP_90(uint256)"];
}
// Function: 863.sol-ERC721BasicToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_28(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_28(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != owner)

IRs:
TMP_29(bool) = _to != owner
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == owner || isApprovedForAll(owner,msg.sender))

IRs:
TMP_31(bool) = msg.sender == owner
TMP_32(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,msg.sender)
TMP_33(bool) = TMP_31 || TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
getApproved(_tokenId) != address(0) || _to != address(0)

IRs:
TMP_35(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_36 = CONVERT 0 to address
TMP_37(bool) = TMP_35 != TMP_36
TMP_38 = CONVERT 0 to address
TMP_39(bool) = _to != TMP_38
TMP_40(bool) = TMP_37 || TMP_39
CONDITION TMP_40"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenApprovals[_tokenId] = _to

IRs:
REF_3(address) -> tokenApprovals[_tokenId]
REF_3(address) (->tokenApprovals) := _to(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(owner,_to,_tokenId)

IRs:
Emit Approval(owner,_to,_tokenId)"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 863.sol-ERC721BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_20 = CONVERT 0 to address
TMP_21(bool) = _owner != TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokensCount[_owner]

IRs:
REF_0(uint256) -> ownedTokensCount[_owner]
RETURN REF_0"];
}
// Function: 863.sol-ERC721BasicToken-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_104(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 863.sol-ERC721BasicToken-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_96(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_97 = UnaryType.BANG TMP_96 
CONDITION TMP_97"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(_from,_tokenId,_data)

IRs:
TMP_98 = CONVERT _to to ERC721Receiver
TMP_99(bytes4) = HIGH_LEVEL_CALL, dest:TMP_98(ERC721Receiver), function:onERC721Received, arguments:['_from', '_tokenId', '_data']  
retval(bytes4) := TMP_99(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_100(bool) = retval == ERC721_RECEIVED
RETURN TMP_100"];
}
// Function: 863.sol-ERC721BasicToken-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_79(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_80(bool) = TMP_79 == _owner
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_9(address) -> tokenApprovals[_tokenId]
TMP_82 = CONVERT 0 to address
TMP_83(bool) = REF_9 != TMP_82
CONDITION TMP_83"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_10(address) -> tokenApprovals[_tokenId]
TMP_84 = CONVERT 0 to address
REF_10(address) (->tokenApprovals) := TMP_84(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(_owner,address(0),_tokenId)

IRs:
TMP_85 = CONVERT 0 to address
Emit Approval(_owner,TMP_85,_tokenId)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 863.sol-ERC721BasicToken-exists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_2(address) -> tokenOwner[_tokenId]
owner(address) := REF_2(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
owner != address(0)

IRs:
TMP_26 = CONVERT 0 to address
TMP_27(bool) = owner != TMP_26
RETURN TMP_27"];
}
// Function: 863.sol-ERC721BasicToken-getApproved(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_4(address) -> tokenApprovals[_tokenId]
RETURN REF_4"];
}
// Function: 863.sol-ERC721BasicToken-isApprovedForAll(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
operatorApprovals[_owner][_operator]

IRs:
REF_7(mapping(address => bool)) -> operatorApprovals[_owner]
REF_8(bool) -> REF_7[_operator]
RETURN REF_8"];
}
// Function: 863.sol-ERC721BasicToken-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_62(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_62(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender)

IRs:
TMP_63(bool) = _spender == owner
TMP_64(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_65(bool) = TMP_64 == _spender
TMP_66(bool) = TMP_63 || TMP_65
TMP_67(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_68(bool) = TMP_66 || TMP_67
RETURN TMP_68"];
}
// Function: 863.sol-ERC721BasicToken-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_101(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_102(bool) = TMP_101 == msg.sender
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 863.sol-ERC721BasicToken-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_1(address) -> tokenOwner[_tokenId]
owner(address) := REF_1(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_23 = CONVERT 0 to address
TMP_24(bool) = owner != TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 863.sol-ERC721BasicToken-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_91(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_92(bool) = TMP_91 == _from
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_16(uint256) -> ownedTokensCount[_from]
REF_17(uint256) -> ownedTokensCount[_from]
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_17', '1'] 
REF_16(uint256) (->ownedTokensCount) := TMP_94(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_19(address) -> tokenOwner[_tokenId]
TMP_95 = CONVERT 0 to address
REF_19(address) (->tokenOwner) := TMP_95(address)"];
}
// Function: 863.sol-ERC721BasicToken-safeTransferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeTransferFrom(_from,_to,_tokenId,)

IRs:
INTERNAL_CALL, ERC721BasicToken.safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
2->1;
}
// Function: 863.sol-ERC721BasicToken-safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferFrom(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.transferFrom(address,address,uint256)(_from,_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(checkAndCallSafeTransfer(_from,_to,_tokenId,_data))

IRs:
TMP_59(bool) = INTERNAL_CALL, ERC721BasicToken.checkAndCallSafeTransfer(address,address,uint256,bytes)(_from,_to,_tokenId,_data)
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
3->1;
}
// Function: 863.sol-ERC721BasicToken-setApprovalForAll(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != msg.sender)

IRs:
TMP_42(bool) = _to != msg.sender
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operatorApprovals[msg.sender][_to] = _approved

IRs:
REF_5(mapping(address => bool)) -> operatorApprovals[msg.sender]
REF_6(bool) -> REF_5[_to]
REF_6(bool) (->operatorApprovals) := _approved(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApprovalForAll(msg.sender,_to,_approved)

IRs:
Emit ApprovalForAll(msg.sender,_to,_approved)"];
}
// Function: 863.sol-ERC721BasicToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 863.sol-ERC721BasicToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_from != address(0))

IRs:
TMP_45 = CONVERT 0 to address
TMP_46(bool) = _from != TMP_45
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_48 = CONVERT 0 to address
TMP_49(bool) = _to != TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_from,_tokenId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
7->1;
}
// Function: 863.sol-ERC721Enumerable-approve(address,uint256)
digraph{
}
// Function: 863.sol-ERC721Enumerable-balanceOf(address)
digraph{
}
// Function: 863.sol-ERC721Enumerable-exists(uint256)
digraph{
}
// Function: 863.sol-ERC721Enumerable-getApproved(uint256)
digraph{
}
// Function: 863.sol-ERC721Enumerable-isApprovedForAll(address,address)
digraph{
}
// Function: 863.sol-ERC721Enumerable-ownerOf(uint256)
digraph{
}
// Function: 863.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 863.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 863.sol-ERC721Enumerable-setApprovalForAll(address,bool)
digraph{
}
// Function: 863.sol-ERC721Enumerable-tokenByIndex(uint256)
digraph{
}
// Function: 863.sol-ERC721Enumerable-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 863.sol-ERC721Enumerable-totalSupply()
digraph{
}
// Function: 863.sol-ERC721Enumerable-transferFrom(address,address,uint256)
digraph{
}
// Function: 863.sol-ERC721Metadata-approve(address,uint256)
digraph{
}
// Function: 863.sol-ERC721Metadata-balanceOf(address)
digraph{
}
// Function: 863.sol-ERC721Metadata-exists(uint256)
digraph{
}
// Function: 863.sol-ERC721Metadata-getApproved(uint256)
digraph{
}
// Function: 863.sol-ERC721Metadata-isApprovedForAll(address,address)
digraph{
}
// Function: 863.sol-ERC721Metadata-name()
digraph{
}
// Function: 863.sol-ERC721Metadata-ownerOf(uint256)
digraph{
}
// Function: 863.sol-ERC721Metadata-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 863.sol-ERC721Metadata-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 863.sol-ERC721Metadata-setApprovalForAll(address,bool)
digraph{
}
// Function: 863.sol-ERC721Metadata-symbol()
digraph{
}
// Function: 863.sol-ERC721Metadata-tokenURI(uint256)
digraph{
}
// Function: 863.sol-ERC721Metadata-transferFrom(address,address,uint256)
digraph{
}
// Function: 863.sol-ERC721Receiver-onERC721Received(address,uint256,bytes)
digraph{
}
// Function: 863.sol-ERC721Receiver-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 863.sol-ERC721Token-ERC721Token(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name_ = _name

IRs:
name_(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol_ = _symbol

IRs:
symbol_(string) := _symbol(string)"];
}
// Function: 863.sol-ERC721Token-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super._burn(_owner,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken._burn(address,uint256)(_owner,_tokenId)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
bytes(tokenURIs[_tokenId]).length != 0

IRs:
REF_76(string) -> tokenURIs[_tokenId]
TMP_209 = CONVERT REF_76 to bytes
REF_77 -> LENGTH TMP_209
TMP_210(bool) = REF_77 != 0
CONDITION TMP_210"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete tokenURIs[_tokenId]

IRs:
REF_78(string) -> tokenURIs[_tokenId]
tokenURIs = delete REF_78 "];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
tokenIndex = allTokensIndex[_tokenId]

IRs:
REF_79(uint256) -> allTokensIndex[_tokenId]
tokenIndex(uint256) := REF_79(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
lastTokenIndex = allTokens.length.sub(1)

IRs:
REF_80 -> LENGTH allTokens
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_80', '1'] 
lastTokenIndex(uint256) := TMP_211(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
lastToken = allTokens[lastTokenIndex]

IRs:
REF_82(uint256) -> allTokens[lastTokenIndex]
lastToken(uint256) := REF_82(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allTokens[tokenIndex] = lastToken

IRs:
REF_83(uint256) -> allTokens[tokenIndex]
REF_83(uint256) (->allTokens) := lastToken(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
allTokens[lastTokenIndex] = 0

IRs:
REF_84(uint256) -> allTokens[lastTokenIndex]
REF_84(uint256) (->allTokens) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
allTokens.length --

IRs:
REF_85 -> LENGTH allTokens
TMP_212(uint256) := REF_85(uint256)
REF_85(-> allTokens) = REF_85 - 1"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
allTokensIndex[_tokenId] = 0

IRs:
REF_86(uint256) -> allTokensIndex[_tokenId]
REF_86(uint256) (->allTokensIndex) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
allTokensIndex[lastToken] = tokenIndex

IRs:
REF_87(uint256) -> allTokensIndex[lastToken]
REF_87(uint256) (->allTokensIndex) := tokenIndex(uint256)"];
}
// Function: 863.sol-ERC721Token-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super._mint(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken._mint(address,uint256)(_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allTokensIndex[_tokenId] = allTokens.length

IRs:
REF_71(uint256) -> allTokensIndex[_tokenId]
REF_72 -> LENGTH allTokens
REF_71(uint256) (->allTokensIndex) := REF_72(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allTokens.push(_tokenId)

IRs:
REF_74 -> LENGTH allTokens
TMP_206(uint256) := REF_74(uint256)
TMP_207(uint256) = TMP_206 + 1
REF_74(uint256) (->allTokens) := TMP_207(uint256)
REF_75(uint256) -> allTokens[TMP_206]
REF_75(uint256) (->allTokens) := _tokenId(uint256)"];
}
// Function: 863.sol-ERC721Token-_setTokenURI(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_195(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_196(None) = SOLIDITY_CALL require(bool)(TMP_195)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenURIs[_tokenId] = _uri

IRs:
REF_49(string) -> tokenURIs[_tokenId]
REF_49(string) (->tokenURIs) := _uri(string)"];
}
// Function: 863.sol-ERC721Token-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
length = ownedTokens[_to].length

IRs:
REF_50(uint256[]) -> ownedTokens[_to]
REF_51 -> LENGTH REF_50
length(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokens[_to].push(_tokenId)

IRs:
REF_52(uint256[]) -> ownedTokens[_to]
REF_54 -> LENGTH REF_52
TMP_199(uint256) := REF_54(uint256)
TMP_200(uint256) = TMP_199 + 1
REF_54(uint256) (->ownedTokens) := TMP_200(uint256)
REF_55(uint256) -> REF_52[TMP_199]
REF_55(uint256) (->ownedTokens) := _tokenId(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownedTokensIndex[_tokenId] = length

IRs:
REF_56(uint256) -> ownedTokensIndex[_tokenId]
REF_56(uint256) (->ownedTokensIndex) := length(uint256)"];
}
// Function: 863.sol-ERC721Token-approve(address,uint256)
digraph{
}
// Function: 863.sol-ERC721Token-balanceOf(address)
digraph{
}
// Function: 863.sol-ERC721Token-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_216(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_217(None) = SOLIDITY_CALL require(bool)(TMP_216)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 863.sol-ERC721Token-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_182(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_183 = UnaryType.BANG TMP_182 
CONDITION TMP_183"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(_from,_tokenId,_data)

IRs:
TMP_184 = CONVERT _to to ERC721Receiver
TMP_185(bytes4) = HIGH_LEVEL_CALL, dest:TMP_184(ERC721Receiver), function:onERC721Received, arguments:['_from', '_tokenId', '_data']  
retval(bytes4) := TMP_185(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_186(bool) = retval == ERC721_RECEIVED
RETURN TMP_186"];
}
// Function: 863.sol-ERC721Token-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_165(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_166(bool) = TMP_165 == _owner
TMP_167(None) = SOLIDITY_CALL require(bool)(TMP_166)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_31(address) -> tokenApprovals[_tokenId]
TMP_168 = CONVERT 0 to address
TMP_169(bool) = REF_31 != TMP_168
CONDITION TMP_169"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_32(address) -> tokenApprovals[_tokenId]
TMP_170 = CONVERT 0 to address
REF_32(address) (->tokenApprovals) := TMP_170(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(_owner,address(0),_tokenId)

IRs:
TMP_171 = CONVERT 0 to address
Emit Approval(_owner,TMP_171,_tokenId)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 863.sol-ERC721Token-exists(uint256)
digraph{
}
// Function: 863.sol-ERC721Token-getApproved(uint256)
digraph{
}
// Function: 863.sol-ERC721Token-isApprovedForAll(address,address)
digraph{
}
// Function: 863.sol-ERC721Token-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_148(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_148(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender)

IRs:
TMP_149(bool) = _spender == owner
TMP_150(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_151(bool) = TMP_150 == _spender
TMP_152(bool) = TMP_149 || TMP_151
TMP_153(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_154(bool) = TMP_152 || TMP_153
RETURN TMP_154"];
}
// Function: 863.sol-ERC721Token-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name_

IRs:
RETURN name_"];
}
// Function: 863.sol-ERC721Token-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_213(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_214(bool) = TMP_213 == msg.sender
TMP_215(None) = SOLIDITY_CALL require(bool)(TMP_214)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 863.sol-ERC721Token-ownerOf(uint256)
digraph{
}
// Function: 863.sol-ERC721Token-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_from,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIndex = ownedTokensIndex[_tokenId]

IRs:
REF_57(uint256) -> ownedTokensIndex[_tokenId]
tokenIndex(uint256) := REF_57(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastTokenIndex = ownedTokens[_from].length.sub(1)

IRs:
REF_58(uint256[]) -> ownedTokens[_from]
REF_59 -> LENGTH REF_58
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_59', '1'] 
lastTokenIndex(uint256) := TMP_202(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lastToken = ownedTokens[_from][lastTokenIndex]

IRs:
REF_61(uint256[]) -> ownedTokens[_from]
REF_62(uint256) -> REF_61[lastTokenIndex]
lastToken(uint256) := REF_62(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownedTokens[_from][tokenIndex] = lastToken

IRs:
REF_63(uint256[]) -> ownedTokens[_from]
REF_64(uint256) -> REF_63[tokenIndex]
REF_64(uint256) (->ownedTokens) := lastToken(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownedTokens[_from][lastTokenIndex] = 0

IRs:
REF_65(uint256[]) -> ownedTokens[_from]
REF_66(uint256) -> REF_65[lastTokenIndex]
REF_66(uint256) (->ownedTokens) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownedTokens[_from].length --

IRs:
REF_67(uint256[]) -> ownedTokens[_from]
REF_68 -> LENGTH REF_67
TMP_203(uint256) := REF_68(uint256)
REF_68(-> ownedTokens) = REF_68 - 1"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownedTokensIndex[_tokenId] = 0

IRs:
REF_69(uint256) -> ownedTokensIndex[_tokenId]
REF_69(uint256) (->ownedTokensIndex) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownedTokensIndex[lastToken] = tokenIndex

IRs:
REF_70(uint256) -> ownedTokensIndex[lastToken]
REF_70(uint256) (->ownedTokensIndex) := tokenIndex(uint256)"];
}
// Function: 863.sol-ERC721Token-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 863.sol-ERC721Token-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 863.sol-ERC721Token-setApprovalForAll(address,bool)
digraph{
}
// Function: 863.sol-ERC721Token-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 863.sol-ERC721Token-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol_

IRs:
RETURN symbol_"];
}
// Function: 863.sol-ERC721Token-tokenByIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < totalSupply())

IRs:
TMP_192(uint256) = INTERNAL_CALL, ERC721Token.totalSupply()()
TMP_193(bool) = _index < TMP_192
TMP_194(None) = SOLIDITY_CALL require(bool)(TMP_193)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
allTokens[_index]

IRs:
REF_48(uint256) -> allTokens[_index]
RETURN REF_48"];
}
// Function: 863.sol-ERC721Token-tokenOfOwnerByIndex(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < balanceOf(_owner))

IRs:
TMP_189(uint256) = INTERNAL_CALL, ERC721BasicToken.balanceOf(address)(_owner)
TMP_190(bool) = _index < TMP_189
TMP_191(None) = SOLIDITY_CALL require(bool)(TMP_190)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokens[_owner][_index]

IRs:
REF_45(uint256[]) -> ownedTokens[_owner]
REF_46(uint256) -> REF_45[_index]
RETURN REF_46"];
}
// Function: 863.sol-ERC721Token-tokenURI(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_187(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_188(None) = SOLIDITY_CALL require(bool)(TMP_187)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tokenURIs[_tokenId]

IRs:
REF_44(string) -> tokenURIs[_tokenId]
RETURN REF_44"];
}
// Function: 863.sol-ERC721Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allTokens.length

IRs:
REF_47 -> LENGTH allTokens
RETURN REF_47"];
}
// Function: 863.sol-ERC721Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 863.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 863.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 863.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 863.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_17(uint256) = a + b
c(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_18(bool) = c >= a
TMP_19(None) = SOLIDITY_CALL assert(bool)(TMP_18)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 863.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_13(uint256) = a / b
RETURN TMP_13"];
}
// Function: 863.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_8(bool) = a == 0
CONDITION TMP_8"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_9(uint256) = a * b
c(uint256) := TMP_9(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_10(uint256) = c / a
TMP_11(bool) = TMP_10 == b
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 863.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_14(bool) = b <= a
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_16(uint256) = a - b
RETURN TMP_16"];
}
}
