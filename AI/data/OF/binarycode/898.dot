digraph G {
// Function: 898.sol-ERC20Token-allowance(address,address)
digraph{
}
// Function: 898.sol-ERC20Token-approve(address,uint256)
digraph{
}
// Function: 898.sol-ERC20Token-balanceOf(address)
digraph{
}
// Function: 898.sol-ERC20Token-transfer(address,uint256)
digraph{
}
// Function: 898.sol-ERC20Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 898.sol-LCToken-LCToken(uint256,string,uint8,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = _initialAmount * 10 ** uint256(_decimalUnits)

IRs:
TMP_1 = CONVERT _decimalUnits to uint256
TMP_2(uint256) = 10 ** TMP_1
TMP_3(uint256) = _initialAmount * TMP_2
totalSupply(uint256) := TMP_3(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(uint256) (->balances) := totalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = _decimalUnits

IRs:
decimals(uint8) := _decimalUnits(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)"];
}
// Function: 898.sol-LCToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_14(mapping(address => uint256)) -> allowed[_owner]
REF_15(uint256) -> REF_14[_spender]
RETURN REF_15"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 898.sol-LCToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_12(mapping(address => uint256)) -> allowed[msg.sender]
REF_13(uint256) -> REF_12[_spender]
REF_13(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 898.sol-LCToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_11(uint256) -> balances[_owner]
RETURN REF_11"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 898.sol-LCToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(false)

IRs:
TMP_0(None) = SOLIDITY_CALL require(bool)(False)"];
}
// Function: 898.sol-LCToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && _value > 0

IRs:
REF_1(uint256) -> balances[msg.sender]
TMP_4(bool) = REF_1 >= _value
TMP_5(bool) = _value > 0
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_2(uint256) -> balances[msg.sender]
REF_2(-> balances) = REF_2 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_3(uint256) -> balances[_to]
REF_3(-> balances) = REF_3 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 898.sol-LCToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0

IRs:
REF_4(uint256) -> balances[_from]
TMP_8(bool) = REF_4 >= _value
REF_5(mapping(address => uint256)) -> allowed[_from]
REF_6(uint256) -> REF_5[msg.sender]
TMP_9(bool) = REF_6 >= _value
TMP_10(bool) = TMP_8 && TMP_9
TMP_11(bool) = _value > 0
TMP_12(bool) = TMP_10 && TMP_11
CONDITION TMP_12"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_7(uint256) -> balances[_to]
REF_7(-> balances) = REF_7 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_8(uint256) -> balances[_from]
REF_8(-> balances) = REF_8 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_9(mapping(address => uint256)) -> allowed[_from]
REF_10(uint256) -> REF_9[msg.sender]
REF_10(-> allowed) = REF_10 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
}
