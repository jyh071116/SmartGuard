digraph G {
// Function: 9.sol-WWW-WWW()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = 100000000000000

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(uint256) (->balances) := 100000000000000(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = 100000000000000

IRs:
totalSupply(uint256) := 100000000000000(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = WWW Chain

IRs:
name(string) := WWW Chain(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = 4

IRs:
decimals(uint8) := 4(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = WWW

IRs:
symbol(string) := WWW(string)"];
}
// Function: 9.sol-WWW-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_14(mapping(address => uint256)) -> allowed[_owner]
REF_15(uint256) -> REF_14[_spender]
RETURN REF_15"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 9.sol-WWW-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_12(mapping(address => uint256)) -> allowed[msg.sender]
REF_13(uint256) -> REF_12[_spender]
REF_13(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9.sol-WWW-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_11(uint256) -> balances[_owner]
RETURN REF_11"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 9.sol-WWW-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_UINT256 = 2 ** 256 - 1

IRs:
TMP_11(uint256) = 2 ** 256
TMP_12(uint256) = TMP_11 - 1
MAX_UINT256(uint256) := TMP_12(uint256)"];
}
// Function: 9.sol-WWW-test()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
2 + 3

IRs:
TMP_9(uint256) = 2 + 3
RETURN TMP_9"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 9.sol-WWW-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_1(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_1 >= _value
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_2(uint256) -> balances[msg.sender]
REF_2(-> balances) = REF_2 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_3(uint256) -> balances[_to]
REF_3(-> balances) = REF_3 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9.sol-WWW-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
allowance = allowed[_from][msg.sender]

IRs:
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
allowance(uint256) := REF_5(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_from] >= _value && allowance >= _value)

IRs:
REF_6(uint256) -> balances[_from]
TMP_3(bool) = REF_6 >= _value
TMP_4(bool) = allowance >= _value
TMP_5(bool) = TMP_3 && TMP_4
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_7(uint256) -> balances[_to]
REF_7(-> balances) = REF_7 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] -= _value

IRs:
REF_8(uint256) -> balances[_from]
REF_8(-> balances) = REF_8 - _value"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
allowance < MAX_UINT256

IRs:
TMP_7(bool) = allowance < MAX_UINT256
CONDITION TMP_7"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_9(mapping(address => uint256)) -> allowed[_from]
REF_10(uint256) -> REF_9[msg.sender]
REF_10(-> allowed) = REF_10 - _value"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
}
