digraph G {
// Function: 91.sol-Moon-Moon()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
beneficiaryOne = 0x009a71cf732A6449a202A323AadE7a2BcFaAe3A8

IRs:
beneficiaryOne(address) := 3444229040415287564009282732232797554297463720(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
beneficiaryTwo = 0x004e864e109fE8F3394CcDB74F64c160ac4C5ce4

IRs:
beneficiaryTwo(address) := 1751157735922812233561308872900388674748570852(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
gameBegin = now

IRs:
gameBegin(uint256) := now(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameEnd = now + 86400

IRs:
TMP_1424(uint256) = now + 86400
gameEnd(uint256) := TMP_1424(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalAmount = 0

IRs:
totalAmount(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
gameNumber = 1

IRs:
gameNumber(uint256) := 1(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allGameAmount = 0

IRs:
allGameAmount(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
numElements = 0

IRs:
numElements(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
numberOfPlayers = 0

IRs:
numberOfPlayers(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
concatFirst = random number between 0 and 

IRs:
concatFirst(string) := random number between 0 and (string)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
concatSecond = 

IRs:
concatSecond(string) := (string)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
concatRequest = 

IRs:
concatRequest(string) := (string)"];
}
// Function: 91.sol-Moon-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == oraclize_cbAddress())

IRs:
TMP_1443(address) = INTERNAL_CALL, usingOraclize.oraclize_cbAddress()()
TMP_1444(bool) = msg.sender == TMP_1443
TMP_1445(None) = SOLIDITY_CALL require(bool)(TMP_1444)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(randomNumber == 0)

IRs:
TMP_1446(bool) = randomNumber == 0
TMP_1447(None) = SOLIDITY_CALL require(bool)(TMP_1446)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
randomNumber = parseInt(result) * 10000000000000

IRs:
TMP_1448(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string)(result)
TMP_1449(uint256) = TMP_1448 * 10000000000000
randomNumber(uint256) := TMP_1449(uint256)"];
3->4;
4[label="Node Type: RETURN 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
myid
"];
}
// Function: 91.sol-Moon-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1
"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
myid
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
result
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
proof
"];
}
// Function: 91.sol-Moon-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_812 -> LENGTH arr
arrlen(uint256) := REF_812(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_1214(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_1214(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_1215(bool) = i < arrlen
CONDITION TMP_1215"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_813(bytes) -> elemArray[i]
REF_814(bytes) -> arr[i]
TMP_1216 = CONVERT REF_814 to bytes
REF_813(bytes) (->elemArray) := TMP_1216(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_815(bytes) -> elemArray[i]
REF_816 -> LENGTH REF_815
REF_817(bytes) -> elemArray[i]
REF_818 -> LENGTH REF_817
TMP_1217(uint256) = REF_818 - 1
TMP_1218(uint256) = TMP_1217 / 23
TMP_1219(uint256) = REF_816 + TMP_1218
TMP_1220(uint256) = TMP_1219 + 3
outputlen(uint256) = outputlen + TMP_1220"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1221(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_1222(uint256) = arrlen + 128
cborlen(uint256) := TMP_1222(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_1223 = CONVERT cborlen to bytes1
REF_819 -> LENGTH TMP_1223
outputlen(uint256) = outputlen + REF_819"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_1225 = new bytes(outputlen)
res(bytes) := TMP_1225(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_1226 = CONVERT cborlen to bytes1
REF_820 -> LENGTH TMP_1226
TMP_1227(bool) = REF_820 > ctr
CONDITION TMP_1227"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_821(None) -> res[ctr]
TMP_1228 = CONVERT cborlen to bytes1
REF_822(None) -> TMP_1228[ctr]
REF_821(None) (->res) := REF_822(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_1229(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_1230(bool) = i < arrlen
CONDITION TMP_1230"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_823(uint256) -> res[ctr]
REF_823(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_1231(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_824(bytes) -> elemArray[i]
REF_825 -> LENGTH REF_824
TMP_1232(bool) = x < REF_825
CONDITION TMP_1232"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_1233(uint256) = x % 23
TMP_1234(bool) = TMP_1233 == 0
CONDITION TMP_1234"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_1235 = CONVERT elemcborlen to bytes1
REF_826 -> LENGTH TMP_1235
TMP_1236(uint256) = ctr - lctr
TMP_1237(bool) = REF_826 > TMP_1236
CONDITION TMP_1237"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_827(None) -> res[ctr]
TMP_1238 = CONVERT elemcborlen to bytes1
TMP_1239(uint256) = ctr - lctr
REF_828(None) -> TMP_1238[TMP_1239]
REF_827(None) (->res) := REF_828(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_1240(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_829(None) -> res[ctr]
REF_830(bytes) -> elemArray[i]
REF_831(None) -> REF_830[x]
REF_829(None) (->res) := REF_831(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_1241(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_1242(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_832(uint256) -> res[ctr]
REF_832(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_1243(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_1244(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_833(bytes) -> elemArray[i]
REF_834 -> LENGTH REF_833
TMP_1245(uint256) = REF_834 - x
TMP_1246(bool) = TMP_1245 >= 24
CONDITION TMP_1246"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_835(bytes) -> elemArray[i]
REF_836 -> LENGTH REF_835
TMP_1247(uint256) = REF_836 - x
elemcborlen(uint256) := TMP_1247(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 91.sol-Moon-buyTicket()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((now <= gameEnd) || (totalAmount == 0))

IRs:
TMP_1425(bool) = now <= gameEnd
TMP_1426(bool) = totalAmount == 0
TMP_1427(bool) = TMP_1425 || TMP_1426
TMP_1428(None) = SOLIDITY_CALL require(bool)(TMP_1427)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value > 1000000000000000)

IRs:
TMP_1429(bool) = msg.value > 1000000000000000
TMP_1430(None) = SOLIDITY_CALL require(bool)(TMP_1429)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(ticketsForGame[msg.sender] < gameNumber)

IRs:
REF_868(uint256) -> ticketsForGame[msg.sender]
TMP_1431(bool) = REF_868 < gameNumber
TMP_1432(None) = SOLIDITY_CALL require(bool)(TMP_1431)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(msg.value + totalAmount < 2000000000000000000000)

IRs:
TMP_1433(uint256) = msg.value + totalAmount
TMP_1434(bool) = TMP_1433 < 2000000000000000000000
TMP_1435(None) = SOLIDITY_CALL require(bool)(TMP_1434)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(randomNumber == 0)

IRs:
TMP_1436(bool) = randomNumber == 0
TMP_1437(None) = SOLIDITY_CALL require(bool)(TMP_1436)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ticketsForGame[msg.sender] = gameNumber

IRs:
REF_869(uint256) -> ticketsForGame[msg.sender]
REF_869(uint256) (->ticketsForGame) := gameNumber(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tickets[msg.sender] = 0

IRs:
REF_870(uint256) -> tickets[msg.sender]
REF_870(uint256) (->tickets) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
insertAddress(msg.sender)

IRs:
INTERNAL_CALL, Moon.insertAddress(address)(msg.sender)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
insertSums(totalAmount)

IRs:
INTERNAL_CALL, Moon.insertSums(uint256)(totalAmount)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tickets[msg.sender] = msg.value

IRs:
REF_871(uint256) -> tickets[msg.sender]
REF_871(uint256) (->tickets) := msg.value(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalAmount += msg.value

IRs:
totalAmount(uint256) = totalAmount + msg.value"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
numberOfPlayers += 1

IRs:
numberOfPlayers(uint256) = numberOfPlayers + 1"];
}
// Function: 91.sol-Moon-chooseRandomNumber()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(randomNumber == 0)

IRs:
TMP_1450(bool) = randomNumber == 0
TMP_1451(None) = SOLIDITY_CALL require(bool)(TMP_1450)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)((now > gameEnd) && (totalAmount > 0))

IRs:
TMP_1452(bool) = now > gameEnd
TMP_1453(bool) = totalAmount > 0
TMP_1454(bool) = TMP_1452 && TMP_1453
TMP_1455(None) = SOLIDITY_CALL require(bool)(TMP_1454)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
concatSecond = uint2str(totalAmount / 10000000000000)

IRs:
TMP_1456(uint256) = totalAmount / 10000000000000
TMP_1457(string) = INTERNAL_CALL, usingOraclize.uint2str(uint256)(TMP_1456)
concatSecond(string) := TMP_1457(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
concatRequest = strConcat(concatFirst,concatSecond)

IRs:
TMP_1458(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string)(concatFirst,concatSecond)
concatRequest(string) := TMP_1458(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize_query(WolframAlpha,concatRequest)

IRs:
TMP_1459(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string)(WolframAlpha,concatRequest)"];
}
// Function: 91.sol-Moon-clearAddresses()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
numElements = 0

IRs:
numElements(uint256) := 0(uint256)"];
}
// Function: 91.sol-Moon-clearSums()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
numSums = 0

IRs:
numSums(uint256) := 0(uint256)"];
}
// Function: 91.sol-Moon-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_1411(uint256) = length + toOffset
minLength(uint256) := TMP_1411(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to.length >= minLength)

IRs:
REF_866 -> LENGTH to
TMP_1412(bool) = REF_866 >= minLength
TMP_1413(None) = SOLIDITY_CALL require(bool)(TMP_1412)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_1414(uint256) = 32 + fromOffset
i(uint256) := TMP_1414(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_1415(uint256) = 32 + toOffset
j(uint256) := TMP_1415(uint256)"];
4->5;
5[label="Node Type: BEGIN_LOOP 5
"];
5->6;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_1416(uint256) = 32 + fromOffset
TMP_1417(uint256) = TMP_1416 + length
TMP_1418(bool) = i < TMP_1417
CONDITION TMP_1418"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
10->6;
11[label="Node Type: END_LOOP 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 91.sol-Moon-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_1518(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1519 = CONVERT TMP_1518 to OraclizeI
oraclize(OraclizeI) := TMP_1519(OraclizeI)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 91.sol-Moon-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_867 -> LENGTH sig
TMP_1419(bool) = REF_867 != 65
CONDITION TMP_1419"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_1420(bool) = v < 27
CONDITION TMP_1420"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_1421(bool) = v != 27
TMP_1422(bool) = v != 28
TMP_1423(bool) = TMP_1421 && TMP_1422
CONDITION TMP_1423"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_5(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_5"];
}
// Function: 91.sol-Moon-endGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > gameEnd)

IRs:
TMP_1460(bool) = now > gameEnd
TMP_1461(None) = SOLIDITY_CALL require(bool)(TMP_1460)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(numElements > 0)

IRs:
TMP_1462(bool) = numElements > 0
TMP_1463(None) = SOLIDITY_CALL require(bool)(TMP_1462)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(randomNumber > 0)

IRs:
TMP_1464(bool) = randomNumber > 0
TMP_1465(None) = SOLIDITY_CALL require(bool)(TMP_1464)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
cursor = 0

IRs:
cursor(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
inf = 0

IRs:
inf(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
sup = numElements - 1

IRs:
TMP_1466(uint256) = numElements - 1
sup(uint256) := TMP_1466(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
test = 0

IRs:
test(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
numElements > 1

IRs:
TMP_1467(bool) = numElements > 1
CONDITION TMP_1467"];
8->9[label="True"];
8->22[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
randomNumber > gameSums[sup]

IRs:
REF_876(uint256) -> gameSums[sup]
TMP_1468(bool) = randomNumber > REF_876
CONDITION TMP_1468"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
winner = gameAddresses[sup]

IRs:
REF_877(address) -> gameAddresses[sup]
winner(address) := REF_877(address)"];
10->21;
11[label="Node Type: BEGIN_LOOP 11
"];
11->12;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
(sup > inf + 1) && ((randomNumber <= gameSums[cursor]) || ((cursor + 1 < numElements) && (randomNumber > gameSums[cursor + 1])))

IRs:
TMP_1469(uint256) = inf + 1
TMP_1470(bool) = sup > TMP_1469
REF_878(uint256) -> gameSums[cursor]
TMP_1471(bool) = randomNumber <= REF_878
TMP_1472(uint256) = cursor + 1
TMP_1473(bool) = TMP_1472 < numElements
TMP_1474(uint256) = cursor + 1
REF_879(uint256) -> gameSums[TMP_1474]
TMP_1475(bool) = randomNumber > REF_879
TMP_1476(bool) = TMP_1473 && TMP_1475
TMP_1477(bool) = TMP_1471 || TMP_1476
TMP_1478(bool) = TMP_1470 && TMP_1477
CONDITION TMP_1478"];
12->13[label="True"];
12->19[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
test = inf + (sup - inf) / 2

IRs:
TMP_1479(uint256) = sup - inf
TMP_1480(uint256) = TMP_1479 / 2
TMP_1481(uint256) = inf + TMP_1480
test(uint256) := TMP_1481(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
randomNumber > gameSums[test]

IRs:
REF_880(uint256) -> gameSums[test]
TMP_1482(bool) = randomNumber > REF_880
CONDITION TMP_1482"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
inf = test

IRs:
inf(uint256) := test(uint256)"];
15->17;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
sup = test

IRs:
sup(uint256) := test(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
cursor = inf

IRs:
cursor(uint256) := inf(uint256)"];
18->12;
19[label="Node Type: END_LOOP 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
winner = gameAddresses[cursor]

IRs:
REF_881(address) -> gameAddresses[cursor]
winner(address) := REF_881(address)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->23;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
winner = gameAddresses[0]

IRs:
REF_882(address) -> gameAddresses[0]
winner(address) := REF_882(address)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: NEW VARIABLE 24

EXPRESSION:
amountOne = uint256((4 * totalAmount) / 100)

IRs:
TMP_1483(uint256) = 4 * totalAmount
TMP_1484(uint256) = TMP_1483 / 100
TMP_1485 = CONVERT TMP_1484 to uint256
amountOne(uint256) := TMP_1485(uint256)"];
24->25;
25[label="Node Type: NEW VARIABLE 25

EXPRESSION:
amountTwo = uint256((1 * totalAmount) / 100)

IRs:
TMP_1486(uint256) = 1 * totalAmount
TMP_1487(uint256) = TMP_1486 / 100
TMP_1488 = CONVERT TMP_1487 to uint256
amountTwo(uint256) := TMP_1488(uint256)"];
25->26;
26[label="Node Type: NEW VARIABLE 26

EXPRESSION:
amountThree = totalAmount - amountOne - amountTwo

IRs:
TMP_1489(uint256) = totalAmount - amountOne
TMP_1490(uint256) = TMP_1489 - amountTwo
amountThree(uint256) := TMP_1490(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
earnings[beneficiaryOne] += amountOne

IRs:
REF_883(uint256) -> earnings[beneficiaryOne]
REF_883(-> earnings) = REF_883 + amountOne"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
earnings[beneficiaryTwo] += amountTwo

IRs:
REF_884(uint256) -> earnings[beneficiaryTwo]
REF_884(-> earnings) = REF_884 + amountTwo"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
earnings[winner] += amountThree

IRs:
REF_885(uint256) -> earnings[winner]
REF_885(-> earnings) = REF_885 + amountThree"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
gameNumber += 1

IRs:
gameNumber(uint256) = gameNumber + 1"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
allGameAmount += totalAmount

IRs:
allGameAmount(uint256) = allGameAmount + totalAmount"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
gameBegin = now

IRs:
gameBegin(uint256) := now(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
gameEnd = now + 86400

IRs:
TMP_1491(uint256) = now + 86400
gameEnd(uint256) := TMP_1491(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
totalAmount = 0

IRs:
totalAmount(uint256) := 0(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
randomNumber = 0

IRs:
randomNumber(uint256) := 0(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
numberOfPlayers = 0

IRs:
numberOfPlayers(uint256) := 0(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
clearAddresses()

IRs:
INTERNAL_CALL, Moon.clearAddresses()()"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
clearSums()

IRs:
INTERNAL_CALL, Moon.clearSums()()"];
}
// Function: 91.sol-Moon-getAllGameAmount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allGameAmount

IRs:
RETURN allGameAmount"];
}
// Function: 91.sol-Moon-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 91.sol-Moon-getGameAddresses(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
gameAddresses[index]

IRs:
REF_887(address) -> gameAddresses[index]
RETURN REF_887"];
}
// Function: 91.sol-Moon-getGameBegin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
gameBegin

IRs:
RETURN gameBegin"];
}
// Function: 91.sol-Moon-getGameEnd()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
gameEnd

IRs:
RETURN gameEnd"];
}
// Function: 91.sol-Moon-getGameNumber()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
gameNumber

IRs:
RETURN gameNumber"];
}
// Function: 91.sol-Moon-getGameSums(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
gameSums[index]

IRs:
REF_888(uint256) -> gameSums[index]
RETURN REF_888"];
}
// Function: 91.sol-Moon-getMyStake()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tickets[msg.sender]

IRs:
REF_889(uint256) -> tickets[msg.sender]
RETURN REF_889"];
}
// Function: 91.sol-Moon-getNumElements()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
numElements

IRs:
RETURN numElements"];
}
// Function: 91.sol-Moon-getNumSums()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
numSums

IRs:
RETURN numSums"];
}
// Function: 91.sol-Moon-getNumberOfPlayers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
numberOfPlayers

IRs:
RETURN numberOfPlayers"];
}
// Function: 91.sol-Moon-getRandomNumber()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
randomNumber

IRs:
RETURN randomNumber"];
}
// Function: 91.sol-Moon-getTotalAmount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalAmount

IRs:
RETURN totalAmount"];
}
// Function: 91.sol-Moon-getWinnerAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
winner

IRs:
RETURN winner"];
}
// Function: 91.sol-Moon-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_1095 = CONVERT _haystack to bytes
h(bytes) := TMP_1095(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_1096 = CONVERT _needle to bytes
n(bytes) := TMP_1096(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_748 -> LENGTH h
TMP_1097(bool) = REF_748 < 1
REF_749 -> LENGTH n
TMP_1098(bool) = REF_749 < 1
TMP_1099(bool) = TMP_1097 || TMP_1098
REF_750 -> LENGTH n
REF_751 -> LENGTH h
TMP_1100(bool) = REF_750 > REF_751
TMP_1101(bool) = TMP_1099 || TMP_1100
CONDITION TMP_1101"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_1102(uint256) = 0 - 1
RETURN TMP_1102"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_752 -> LENGTH h
TMP_1103(uint256) = 2 ** 128
TMP_1104(uint256) = TMP_1103 - 1
TMP_1105(bool) = REF_752 > TMP_1104
CONDITION TMP_1105"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_1106(uint256) = 0 - 1
RETURN TMP_1106"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_753 -> LENGTH h
TMP_1107(bool) = i < REF_753
CONDITION TMP_1107"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_754(None) -> h[i]
REF_755(None) -> n[0]
TMP_1108(bool) = REF_754 == REF_755
CONDITION TMP_1108"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_756 -> LENGTH n
TMP_1109(bool) = subindex < REF_756
TMP_1110(uint256) = i + subindex
REF_757 -> LENGTH h
TMP_1111(bool) = TMP_1110 < REF_757
TMP_1112(bool) = TMP_1109 && TMP_1111
TMP_1113(uint256) = i + subindex
REF_758(None) -> h[TMP_1113]
REF_759(None) -> n[subindex]
TMP_1114(bool) = REF_758 == REF_759
TMP_1115(bool) = TMP_1112 && TMP_1114
CONDITION TMP_1115"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_1116(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_760 -> LENGTH n
TMP_1117(bool) = subindex == REF_760
CONDITION TMP_1117"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_1118 = CONVERT i to int256
RETURN TMP_1118"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_1119(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_1120(uint256) = 0 - 1
RETURN TMP_1120"];
}
// Function: 91.sol-Moon-insertAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
numElements == gameAddresses.length

IRs:
REF_890 -> LENGTH gameAddresses
TMP_1494(bool) = numElements == REF_890
CONDITION TMP_1494"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameAddresses.length += 1

IRs:
REF_891 -> LENGTH gameAddresses
REF_891(-> gameAddresses) = REF_891 + 1"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameAddresses[numElements ++] = value

IRs:
TMP_1495(uint256) := numElements(uint256)
numElements(uint256) = numElements + 1
REF_892(address) -> gameAddresses[TMP_1495]
REF_892(address) (->gameAddresses) := value(address)"];
}
// Function: 91.sol-Moon-insertSums(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
numSums == gameSums.length

IRs:
REF_893 -> LENGTH gameSums
TMP_1496(bool) = numSums == REF_893
CONDITION TMP_1496"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameSums.length += 1

IRs:
REF_894 -> LENGTH gameSums
REF_894(-> gameSums) = REF_894 + 1"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameSums[numSums ++] = value

IRs:
TMP_1497(uint256) := numSums(uint256)
numSums(uint256) = numSums + 1
REF_895(uint256) -> gameSums[TMP_1497]
REF_895(uint256) (->gameSums) := value(uint256)"];
}
// Function: 91.sol-Moon-matchBytes32Prefix(bytes32,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(prefix.length == n_random_bytes)

IRs:
REF_853 -> LENGTH prefix
TMP_1336(bool) = REF_853 == n_random_bytes
TMP_1337(None) = SOLIDITY_CALL require(bool)(TMP_1336)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < n_random_bytes

IRs:
TMP_1338(bool) = i < n_random_bytes
CONDITION TMP_1338"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_854(None) -> content[i]
REF_855(None) -> prefix[i]
TMP_1339(bool) = REF_854 != REF_855
CONDITION TMP_1339"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1340(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: RETURN 11

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 91.sol-Moon-myEarnings()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
earnings[msg.sender]

IRs:
REF_886(uint256) -> earnings[msg.sender]
RETURN REF_886"];
}
// Function: 91.sol-Moon-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_1506 = CONVERT OAR to address
TMP_1507(bool) = TMP_1506 == 0
TMP_1508 = CONVERT OAR to address
TMP_1509(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_1508)
TMP_1510(bool) = TMP_1509 == 0
TMP_1511(bool) = TMP_1507 || TMP_1510
CONDITION TMP_1511"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_1512(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_1513 = CONVERT oraclize to address
TMP_1514(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1515(bool) = TMP_1513 != TMP_1514
CONDITION TMP_1515"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_1516(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1517 = CONVERT TMP_1516 to OraclizeI
oraclize(OraclizeI) := TMP_1517(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 91.sol-Moon-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_1048(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_1048"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 91.sol-Moon-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 91.sol-Moon-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_764(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_764"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 91.sol-Moon-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_766(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_766"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 91.sol-Moon-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_nbytes > 0) && (_nbytes <= 32))

IRs:
TMP_1248(bool) = _nbytes > 0
TMP_1249(bool) = _nbytes <= 32
TMP_1250(bool) = TMP_1248 && TMP_1249
TMP_1251(None) = SOLIDITY_CALL require(bool)(TMP_1250)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_delay *= 10

IRs:
_delay(uint256) = _delay * 10"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_1253 = new bytes(1)
nbytes(bytes) := TMP_1253(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_837(bytes1) -> nbytes[0]
TMP_1254 = CONVERT _nbytes to bytes1
REF_837(bytes1) (->nbytes) := TMP_1254(bytes1)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
unonce = new bytes(32)

IRs:
TMP_1256 = new bytes(32)
unonce(bytes) := TMP_1256(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
sessionKeyHash = new bytes(32)

IRs:
TMP_1258 = new bytes(32)
sessionKeyHash(bytes) := TMP_1258(bytes)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_1259(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_1259(bytes32)"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
delay = new bytes(32)

IRs:
TMP_1261 = new bytes(32)
delay(bytes) := TMP_1261(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
delay_bytes8 = new bytes(8)

IRs:
TMP_1263 = new bytes(8)
delay_bytes8(bytes) := TMP_1263(bytes)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
copyBytes(delay,24,8,delay_bytes8,0)

IRs:
TMP_1264(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(delay,24,8,delay_bytes8,0)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash,delay)

IRs:
args(bytes[4]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)', 'delay(bytes)']"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
queryId = oraclize_query(random,args,_customGasLimit)

IRs:
TMP_1265(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[4],uint256)(random,args,_customGasLimit)
queryId(bytes32) := TMP_1265(bytes32)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
delay_bytes8_left = new bytes(8)

IRs:
TMP_1267 = new bytes(8)
delay_bytes8_left(bytes) := TMP_1267(bytes)"];
17->18;
18[label="Node Type: INLINE ASM 18
"];
18->19;
19[label="Node Type: END INLINE ASM 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,keccak256()(delay_bytes8_left,args[1],sha256()(args[0]),args[2]))

IRs:
REF_838(bytes) -> args[1]
REF_839(bytes) -> args[0]
TMP_1268(bytes32) = SOLIDITY_CALL sha256()(REF_839)
REF_840(bytes) -> args[2]
TMP_1269(bytes32) = SOLIDITY_CALL keccak256()(delay_bytes8_left,REF_838,TMP_1268,REF_840)
INTERNAL_CALL, usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_1269)"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 91.sol-Moon-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_969(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_969(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_611(bytes) -> dynargs[0]
REF_612(bytes) -> args[0]
REF_611(bytes) (->dynargs) := REF_612(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_970(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_970"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_981(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_981(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_617(bytes) -> dynargs[0]
REF_618(bytes) -> args[0]
REF_617(bytes) (->dynargs) := REF_618(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_982(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_982"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_985(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_985(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_619(bytes) -> dynargs[0]
REF_620(bytes) -> args[0]
REF_619(bytes) (->dynargs) := REF_620(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_621(bytes) -> dynargs[1]
REF_622(bytes) -> args[1]
REF_621(bytes) (->dynargs) := REF_622(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_986(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_986"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_997(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_997(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_631(bytes) -> dynargs[0]
REF_632(bytes) -> args[0]
REF_631(bytes) (->dynargs) := REF_632(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_633(bytes) -> dynargs[1]
REF_634(bytes) -> args[1]
REF_633(bytes) (->dynargs) := REF_634(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_998(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_998"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1001(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1001(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_635(bytes) -> dynargs[0]
REF_636(bytes) -> args[0]
REF_635(bytes) (->dynargs) := REF_636(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_637(bytes) -> dynargs[1]
REF_638(bytes) -> args[1]
REF_637(bytes) (->dynargs) := REF_638(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_639(bytes) -> dynargs[2]
REF_640(bytes) -> args[2]
REF_639(bytes) (->dynargs) := REF_640(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1002(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1002"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1013(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1013(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_653(bytes) -> dynargs[0]
REF_654(bytes) -> args[0]
REF_653(bytes) (->dynargs) := REF_654(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_655(bytes) -> dynargs[1]
REF_656(bytes) -> args[1]
REF_655(bytes) (->dynargs) := REF_656(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_657(bytes) -> dynargs[2]
REF_658(bytes) -> args[2]
REF_657(bytes) (->dynargs) := REF_658(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1014(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1014"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1017(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1017(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_659(bytes) -> dynargs[0]
REF_660(bytes) -> args[0]
REF_659(bytes) (->dynargs) := REF_660(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_661(bytes) -> dynargs[1]
REF_662(bytes) -> args[1]
REF_661(bytes) (->dynargs) := REF_662(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_663(bytes) -> dynargs[2]
REF_664(bytes) -> args[2]
REF_663(bytes) (->dynargs) := REF_664(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_665(bytes) -> dynargs[3]
REF_666(bytes) -> args[3]
REF_665(bytes) (->dynargs) := REF_666(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1018(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1018"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1029(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1029(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_683(bytes) -> dynargs[0]
REF_684(bytes) -> args[0]
REF_683(bytes) (->dynargs) := REF_684(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_685(bytes) -> dynargs[1]
REF_686(bytes) -> args[1]
REF_685(bytes) (->dynargs) := REF_686(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_687(bytes) -> dynargs[2]
REF_688(bytes) -> args[2]
REF_687(bytes) (->dynargs) := REF_688(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_689(bytes) -> dynargs[3]
REF_690(bytes) -> args[3]
REF_689(bytes) (->dynargs) := REF_690(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1030(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1030"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1033(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1033(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_691(bytes) -> dynargs[0]
REF_692(bytes) -> args[0]
REF_691(bytes) (->dynargs) := REF_692(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_693(bytes) -> dynargs[1]
REF_694(bytes) -> args[1]
REF_693(bytes) (->dynargs) := REF_694(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_695(bytes) -> dynargs[2]
REF_696(bytes) -> args[2]
REF_695(bytes) (->dynargs) := REF_696(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_697(bytes) -> dynargs[3]
REF_698(bytes) -> args[3]
REF_697(bytes) (->dynargs) := REF_698(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_699(bytes) -> dynargs[4]
REF_700(bytes) -> args[4]
REF_699(bytes) (->dynargs) := REF_700(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1034(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1034"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1045(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1045(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_721(bytes) -> dynargs[0]
REF_722(bytes) -> args[0]
REF_721(bytes) (->dynargs) := REF_722(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_723(bytes) -> dynargs[1]
REF_724(bytes) -> args[1]
REF_723(bytes) (->dynargs) := REF_724(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_725(bytes) -> dynargs[2]
REF_726(bytes) -> args[2]
REF_725(bytes) (->dynargs) := REF_726(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_727(bytes) -> dynargs[3]
REF_728(bytes) -> args[3]
REF_727(bytes) (->dynargs) := REF_728(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_729(bytes) -> dynargs[4]
REF_730(bytes) -> args[4]
REF_729(bytes) (->dynargs) := REF_730(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1046(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1046"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_936(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_936(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_937(uint256) = tx.gasprice * 200000
TMP_938(uint256) = 1000000000000000000 + TMP_937
TMP_939(bool) = price > TMP_938
CONDITION TMP_939"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_940(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_940(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_942(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_942"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_960(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_960(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_961(uint256) = tx.gasprice * gaslimit
TMP_962(uint256) = 1000000000000000000 + TMP_961
TMP_963(bool) = price > TMP_962
CONDITION TMP_963"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_964(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_964(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_966(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_966"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_768(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_768(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_769(uint256) = tx.gasprice * 200000
TMP_770(uint256) = 1000000000000000000 + TMP_769
TMP_771(bool) = price > TMP_770
CONDITION TMP_771"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_773(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_773"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_796(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_796(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_797(uint256) = tx.gasprice * 200000
TMP_798(uint256) = 1000000000000000000 + TMP_797
TMP_799(bool) = price > TMP_798
CONDITION TMP_799"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_801(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_801"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_817(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_817(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_818(uint256) = tx.gasprice * gaslimit
TMP_819(uint256) = 1000000000000000000 + TMP_818
TMP_820(bool) = price > TMP_819
CONDITION TMP_820"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_822(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_822"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_789(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_789(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_790(uint256) = tx.gasprice * gaslimit
TMP_791(uint256) = 1000000000000000000 + TMP_790
TMP_792(bool) = price > TMP_791
CONDITION TMP_792"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_794(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_794"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_857(string[])  = new string[](1)
dynargs(string[]) = ['TMP_857(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_479(string) -> dynargs[0]
REF_480(string) -> args[0]
REF_479(string) (->dynargs) := REF_480(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_858(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_858"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_869(string[])  = new string[](1)
dynargs(string[]) = ['TMP_869(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_485(string) -> dynargs[0]
REF_486(string) -> args[0]
REF_485(string) (->dynargs) := REF_486(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_870(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_870"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_873(string[])  = new string[](2)
dynargs(string[]) = ['TMP_873(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_487(string) -> dynargs[0]
REF_488(string) -> args[0]
REF_487(string) (->dynargs) := REF_488(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_489(string) -> dynargs[1]
REF_490(string) -> args[1]
REF_489(string) (->dynargs) := REF_490(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_874(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_874"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_885(string[])  = new string[](2)
dynargs(string[]) = ['TMP_885(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_499(string) -> dynargs[0]
REF_500(string) -> args[0]
REF_499(string) (->dynargs) := REF_500(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_501(string) -> dynargs[1]
REF_502(string) -> args[1]
REF_501(string) (->dynargs) := REF_502(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_886(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_886"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_889(string[])  = new string[](3)
dynargs(string[]) = ['TMP_889(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_503(string) -> dynargs[0]
REF_504(string) -> args[0]
REF_503(string) (->dynargs) := REF_504(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_505(string) -> dynargs[1]
REF_506(string) -> args[1]
REF_505(string) (->dynargs) := REF_506(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_507(string) -> dynargs[2]
REF_508(string) -> args[2]
REF_507(string) (->dynargs) := REF_508(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_890(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_890"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_901(string[])  = new string[](3)
dynargs(string[]) = ['TMP_901(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_521(string) -> dynargs[0]
REF_522(string) -> args[0]
REF_521(string) (->dynargs) := REF_522(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_523(string) -> dynargs[1]
REF_524(string) -> args[1]
REF_523(string) (->dynargs) := REF_524(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_525(string) -> dynargs[2]
REF_526(string) -> args[2]
REF_525(string) (->dynargs) := REF_526(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_902(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_902"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_905(string[])  = new string[](4)
dynargs(string[]) = ['TMP_905(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_527(string) -> dynargs[0]
REF_528(string) -> args[0]
REF_527(string) (->dynargs) := REF_528(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_529(string) -> dynargs[1]
REF_530(string) -> args[1]
REF_529(string) (->dynargs) := REF_530(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_531(string) -> dynargs[2]
REF_532(string) -> args[2]
REF_531(string) (->dynargs) := REF_532(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_533(string) -> dynargs[3]
REF_534(string) -> args[3]
REF_533(string) (->dynargs) := REF_534(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_906(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_906"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_917(string[])  = new string[](4)
dynargs(string[]) = ['TMP_917(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_551(string) -> dynargs[0]
REF_552(string) -> args[0]
REF_551(string) (->dynargs) := REF_552(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_553(string) -> dynargs[1]
REF_554(string) -> args[1]
REF_553(string) (->dynargs) := REF_554(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_555(string) -> dynargs[2]
REF_556(string) -> args[2]
REF_555(string) (->dynargs) := REF_556(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_557(string) -> dynargs[3]
REF_558(string) -> args[3]
REF_557(string) (->dynargs) := REF_558(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_918(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_918"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_921(string[])  = new string[](5)
dynargs(string[]) = ['TMP_921(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_559(string) -> dynargs[0]
REF_560(string) -> args[0]
REF_559(string) (->dynargs) := REF_560(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_561(string) -> dynargs[1]
REF_562(string) -> args[1]
REF_561(string) (->dynargs) := REF_562(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_563(string) -> dynargs[2]
REF_564(string) -> args[2]
REF_563(string) (->dynargs) := REF_564(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_565(string) -> dynargs[3]
REF_566(string) -> args[3]
REF_565(string) (->dynargs) := REF_566(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_567(string) -> dynargs[4]
REF_568(string) -> args[4]
REF_567(string) (->dynargs) := REF_568(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_922(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_922"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_933(string[])  = new string[](5)
dynargs(string[]) = ['TMP_933(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_589(string) -> dynargs[0]
REF_590(string) -> args[0]
REF_589(string) (->dynargs) := REF_590(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_591(string) -> dynargs[1]
REF_592(string) -> args[1]
REF_591(string) (->dynargs) := REF_592(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_593(string) -> dynargs[2]
REF_594(string) -> args[2]
REF_593(string) (->dynargs) := REF_594(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_595(string) -> dynargs[3]
REF_596(string) -> args[3]
REF_595(string) (->dynargs) := REF_596(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_597(string) -> dynargs[4]
REF_598(string) -> args[4]
REF_597(string) (->dynargs) := REF_598(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_934(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_934"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_824(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_824(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_825(uint256) = tx.gasprice * 200000
TMP_826(uint256) = 1000000000000000000 + TMP_825
TMP_827(bool) = price > TMP_826
CONDITION TMP_827"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_828(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_828(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_830(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_830"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_848(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_848(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_849(uint256) = tx.gasprice * gaslimit
TMP_850(uint256) = 1000000000000000000 + TMP_849
TMP_851(bool) = price > TMP_850
CONDITION TMP_851"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_852(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_852(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_854(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_854"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_973(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_973(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_613(bytes) -> dynargs[0]
REF_614(bytes) -> args[0]
REF_613(bytes) (->dynargs) := REF_614(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_974(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_974"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_977(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_977(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_615(bytes) -> dynargs[0]
REF_616(bytes) -> args[0]
REF_615(bytes) (->dynargs) := REF_616(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_978(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_978"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_989(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_989(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_623(bytes) -> dynargs[0]
REF_624(bytes) -> args[0]
REF_623(bytes) (->dynargs) := REF_624(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_625(bytes) -> dynargs[1]
REF_626(bytes) -> args[1]
REF_625(bytes) (->dynargs) := REF_626(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_990(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_990"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_993(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_993(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_627(bytes) -> dynargs[0]
REF_628(bytes) -> args[0]
REF_627(bytes) (->dynargs) := REF_628(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_629(bytes) -> dynargs[1]
REF_630(bytes) -> args[1]
REF_629(bytes) (->dynargs) := REF_630(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_994(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_994"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1005(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1005(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_641(bytes) -> dynargs[0]
REF_642(bytes) -> args[0]
REF_641(bytes) (->dynargs) := REF_642(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_643(bytes) -> dynargs[1]
REF_644(bytes) -> args[1]
REF_643(bytes) (->dynargs) := REF_644(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_645(bytes) -> dynargs[2]
REF_646(bytes) -> args[2]
REF_645(bytes) (->dynargs) := REF_646(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1006(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1006"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1009(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1009(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_647(bytes) -> dynargs[0]
REF_648(bytes) -> args[0]
REF_647(bytes) (->dynargs) := REF_648(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_649(bytes) -> dynargs[1]
REF_650(bytes) -> args[1]
REF_649(bytes) (->dynargs) := REF_650(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_651(bytes) -> dynargs[2]
REF_652(bytes) -> args[2]
REF_651(bytes) (->dynargs) := REF_652(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1010(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1010"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1021(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1021(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_667(bytes) -> dynargs[0]
REF_668(bytes) -> args[0]
REF_667(bytes) (->dynargs) := REF_668(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_669(bytes) -> dynargs[1]
REF_670(bytes) -> args[1]
REF_669(bytes) (->dynargs) := REF_670(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_671(bytes) -> dynargs[2]
REF_672(bytes) -> args[2]
REF_671(bytes) (->dynargs) := REF_672(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_673(bytes) -> dynargs[3]
REF_674(bytes) -> args[3]
REF_673(bytes) (->dynargs) := REF_674(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1022(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1022"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1025(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1025(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_675(bytes) -> dynargs[0]
REF_676(bytes) -> args[0]
REF_675(bytes) (->dynargs) := REF_676(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_677(bytes) -> dynargs[1]
REF_678(bytes) -> args[1]
REF_677(bytes) (->dynargs) := REF_678(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_679(bytes) -> dynargs[2]
REF_680(bytes) -> args[2]
REF_679(bytes) (->dynargs) := REF_680(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_681(bytes) -> dynargs[3]
REF_682(bytes) -> args[3]
REF_681(bytes) (->dynargs) := REF_682(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1026(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1026"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1037(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1037(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_701(bytes) -> dynargs[0]
REF_702(bytes) -> args[0]
REF_701(bytes) (->dynargs) := REF_702(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_703(bytes) -> dynargs[1]
REF_704(bytes) -> args[1]
REF_703(bytes) (->dynargs) := REF_704(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_705(bytes) -> dynargs[2]
REF_706(bytes) -> args[2]
REF_705(bytes) (->dynargs) := REF_706(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_707(bytes) -> dynargs[3]
REF_708(bytes) -> args[3]
REF_707(bytes) (->dynargs) := REF_708(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_709(bytes) -> dynargs[4]
REF_710(bytes) -> args[4]
REF_709(bytes) (->dynargs) := REF_710(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1038(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1038"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1041(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1041(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_711(bytes) -> dynargs[0]
REF_712(bytes) -> args[0]
REF_711(bytes) (->dynargs) := REF_712(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_713(bytes) -> dynargs[1]
REF_714(bytes) -> args[1]
REF_713(bytes) (->dynargs) := REF_714(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_715(bytes) -> dynargs[2]
REF_716(bytes) -> args[2]
REF_715(bytes) (->dynargs) := REF_716(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_717(bytes) -> dynargs[3]
REF_718(bytes) -> args[3]
REF_717(bytes) (->dynargs) := REF_718(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_719(bytes) -> dynargs[4]
REF_720(bytes) -> args[4]
REF_719(bytes) (->dynargs) := REF_720(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1042(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1042"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_944(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_944(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_945(uint256) = tx.gasprice * 200000
TMP_946(uint256) = 1000000000000000000 + TMP_945
TMP_947(bool) = price > TMP_946
CONDITION TMP_947"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_948(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_948(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_950(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_950"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_952(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_952(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_953(uint256) = tx.gasprice * gaslimit
TMP_954(uint256) = 1000000000000000000 + TMP_953
TMP_955(bool) = price > TMP_954
CONDITION TMP_955"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_956(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_956(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_958(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_958"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_775(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_775(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_776(uint256) = tx.gasprice * 200000
TMP_777(uint256) = 1000000000000000000 + TMP_776
TMP_778(bool) = price > TMP_777
CONDITION TMP_778"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_780(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_780"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_803(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_803(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_804(uint256) = tx.gasprice * 200000
TMP_805(uint256) = 1000000000000000000 + TMP_804
TMP_806(bool) = price > TMP_805
CONDITION TMP_806"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_808(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_808"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_810(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_810(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_811(uint256) = tx.gasprice * gaslimit
TMP_812(uint256) = 1000000000000000000 + TMP_811
TMP_813(bool) = price > TMP_812
CONDITION TMP_813"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_815(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_815"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_782(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_782(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_783(uint256) = tx.gasprice * gaslimit
TMP_784(uint256) = 1000000000000000000 + TMP_783
TMP_785(bool) = price > TMP_784
CONDITION TMP_785"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_787(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_787"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_861(string[])  = new string[](1)
dynargs(string[]) = ['TMP_861(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_481(string) -> dynargs[0]
REF_482(string) -> args[0]
REF_481(string) (->dynargs) := REF_482(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_862(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_862"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_865(string[])  = new string[](1)
dynargs(string[]) = ['TMP_865(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_483(string) -> dynargs[0]
REF_484(string) -> args[0]
REF_483(string) (->dynargs) := REF_484(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_866(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_866"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_877(string[])  = new string[](2)
dynargs(string[]) = ['TMP_877(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_491(string) -> dynargs[0]
REF_492(string) -> args[0]
REF_491(string) (->dynargs) := REF_492(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_493(string) -> dynargs[1]
REF_494(string) -> args[1]
REF_493(string) (->dynargs) := REF_494(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_878(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_878"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_881(string[])  = new string[](2)
dynargs(string[]) = ['TMP_881(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_495(string) -> dynargs[0]
REF_496(string) -> args[0]
REF_495(string) (->dynargs) := REF_496(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_497(string) -> dynargs[1]
REF_498(string) -> args[1]
REF_497(string) (->dynargs) := REF_498(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_882(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_882"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_893(string[])  = new string[](3)
dynargs(string[]) = ['TMP_893(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_509(string) -> dynargs[0]
REF_510(string) -> args[0]
REF_509(string) (->dynargs) := REF_510(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_511(string) -> dynargs[1]
REF_512(string) -> args[1]
REF_511(string) (->dynargs) := REF_512(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_513(string) -> dynargs[2]
REF_514(string) -> args[2]
REF_513(string) (->dynargs) := REF_514(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_894(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_894"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_897(string[])  = new string[](3)
dynargs(string[]) = ['TMP_897(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_515(string) -> dynargs[0]
REF_516(string) -> args[0]
REF_515(string) (->dynargs) := REF_516(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_517(string) -> dynargs[1]
REF_518(string) -> args[1]
REF_517(string) (->dynargs) := REF_518(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_519(string) -> dynargs[2]
REF_520(string) -> args[2]
REF_519(string) (->dynargs) := REF_520(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_898(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_898"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_909(string[])  = new string[](4)
dynargs(string[]) = ['TMP_909(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_535(string) -> dynargs[0]
REF_536(string) -> args[0]
REF_535(string) (->dynargs) := REF_536(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_537(string) -> dynargs[1]
REF_538(string) -> args[1]
REF_537(string) (->dynargs) := REF_538(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_539(string) -> dynargs[2]
REF_540(string) -> args[2]
REF_539(string) (->dynargs) := REF_540(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_541(string) -> dynargs[3]
REF_542(string) -> args[3]
REF_541(string) (->dynargs) := REF_542(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_910(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_910"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_913(string[])  = new string[](4)
dynargs(string[]) = ['TMP_913(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_543(string) -> dynargs[0]
REF_544(string) -> args[0]
REF_543(string) (->dynargs) := REF_544(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_545(string) -> dynargs[1]
REF_546(string) -> args[1]
REF_545(string) (->dynargs) := REF_546(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_547(string) -> dynargs[2]
REF_548(string) -> args[2]
REF_547(string) (->dynargs) := REF_548(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_549(string) -> dynargs[3]
REF_550(string) -> args[3]
REF_549(string) (->dynargs) := REF_550(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_914(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_914"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_925(string[])  = new string[](5)
dynargs(string[]) = ['TMP_925(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_569(string) -> dynargs[0]
REF_570(string) -> args[0]
REF_569(string) (->dynargs) := REF_570(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_571(string) -> dynargs[1]
REF_572(string) -> args[1]
REF_571(string) (->dynargs) := REF_572(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_573(string) -> dynargs[2]
REF_574(string) -> args[2]
REF_573(string) (->dynargs) := REF_574(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_575(string) -> dynargs[3]
REF_576(string) -> args[3]
REF_575(string) (->dynargs) := REF_576(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_577(string) -> dynargs[4]
REF_578(string) -> args[4]
REF_577(string) (->dynargs) := REF_578(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_926(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_926"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_929(string[])  = new string[](5)
dynargs(string[]) = ['TMP_929(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_579(string) -> dynargs[0]
REF_580(string) -> args[0]
REF_579(string) (->dynargs) := REF_580(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_581(string) -> dynargs[1]
REF_582(string) -> args[1]
REF_581(string) (->dynargs) := REF_582(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_583(string) -> dynargs[2]
REF_584(string) -> args[2]
REF_583(string) (->dynargs) := REF_584(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_585(string) -> dynargs[3]
REF_586(string) -> args[3]
REF_585(string) (->dynargs) := REF_586(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_587(string) -> dynargs[4]
REF_588(string) -> args[4]
REF_587(string) (->dynargs) := REF_588(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_930(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_930"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_832(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_832(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_833(uint256) = tx.gasprice * 200000
TMP_834(uint256) = 1000000000000000000 + TMP_833
TMP_835(bool) = price > TMP_834
CONDITION TMP_835"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_836(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_836(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_838(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_838"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_840(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_840(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_841(uint256) = tx.gasprice * gaslimit
TMP_842(uint256) = 1000000000000000000 + TMP_841
TMP_843(bool) = price > TMP_842
CONDITION TMP_843"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_844(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_844(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_846(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_846"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-Moon-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_1054(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_1054"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 91.sol-Moon-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_proof[0] == L) && (_proof[1] == P) && (_proof[2] == 1))

IRs:
REF_899(None) -> _proof[0]
TMP_1520(bool) = REF_899 == L
REF_900(None) -> _proof[1]
TMP_1521(bool) = REF_900 == P
TMP_1522(bool) = TMP_1520 && TMP_1521
REF_901(None) -> _proof[2]
TMP_1523(bool) = REF_901 == 1
TMP_1524(bool) = TMP_1522 && TMP_1523
TMP_1525(None) = SOLIDITY_CALL require(bool)(TMP_1524)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_1526 = CONVERT _result to bytes
TMP_1527(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_1528(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_1526,TMP_1527)
proofVerified(bool) := TMP_1528(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(proofVerified)

IRs:
TMP_1529(None) = SOLIDITY_CALL require(bool)(proofVerified)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 91.sol-Moon-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_1341(uint256) = 3 + 65
TMP_1342(uint256) = 3 + 65
TMP_1343(uint256) = TMP_1342 + 1
REF_856(None) -> proof[TMP_1343]
TMP_1344 = CONVERT REF_856 to uint256
TMP_1345(uint256) = TMP_1344 + 2
TMP_1346(uint256) = TMP_1341 + TMP_1345
TMP_1347(uint256) = TMP_1346 + 32
ledgerProofLength(uint256) := TMP_1347(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_1349 = new bytes(32)
keyhash(bytes) := TMP_1349(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_1350(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! (keccak256()(keyhash) == keccak256()(sha256()(context_name,queryId)))

IRs:
TMP_1351(bytes32) = SOLIDITY_CALL keccak256()(keyhash)
TMP_1352(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_1353(bytes32) = SOLIDITY_CALL keccak256()(TMP_1352)
TMP_1354(bool) = TMP_1351 == TMP_1353
TMP_1355 = UnaryType.BANG TMP_1354 
CONDITION TMP_1355"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_1357(uint256) = 32 + 8
TMP_1358(uint256) = TMP_1357 + 1
TMP_1359(uint256) = TMP_1358 + 32
TMP_1360(uint256) = ledgerProofLength + TMP_1359
TMP_1361(uint256) = TMP_1360 + 1
REF_857(None) -> proof[TMP_1361]
TMP_1362 = CONVERT REF_857 to uint256
TMP_1363(uint256) = TMP_1362 + 2
TMP_1364 = new bytes(TMP_1363)
sig1(bytes) := TMP_1364(bytes)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_1365(uint256) = 32 + 8
TMP_1366(uint256) = TMP_1365 + 1
TMP_1367(uint256) = TMP_1366 + 32
TMP_1368(uint256) = ledgerProofLength + TMP_1367
REF_858 -> LENGTH sig1
TMP_1369(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1368,REF_858,sig1,0)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! matchBytes32Prefix(sha256()(sig1),result,uint256(proof[ledgerProofLength + 32 + 8]))

IRs:
TMP_1370(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_1371(uint256) = ledgerProofLength + 32
TMP_1372(uint256) = TMP_1371 + 8
REF_859(None) -> proof[TMP_1372]
TMP_1373 = CONVERT REF_859 to uint256
TMP_1374(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256)(TMP_1370,result,TMP_1373)
TMP_1375 = UnaryType.BANG TMP_1374 
CONDITION TMP_1375"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_1377(uint256) = 8 + 1
TMP_1378(uint256) = TMP_1377 + 32
TMP_1379 = new bytes(TMP_1378)
commitmentSlice1(bytes) := TMP_1379(bytes)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_1380(uint256) = ledgerProofLength + 32
TMP_1381(uint256) = 8 + 1
TMP_1382(uint256) = TMP_1381 + 32
TMP_1383(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1380,TMP_1382,commitmentSlice1,0)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_1385 = new bytes(64)
sessionPubkey(bytes) := TMP_1385(bytes)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_1386(uint256) = ledgerProofLength + 32
TMP_1387(uint256) = 8 + 1
TMP_1388(uint256) = TMP_1387 + 32
TMP_1389(uint256) = TMP_1386 + TMP_1388
REF_860 -> LENGTH sig1
TMP_1390(uint256) = TMP_1389 + REF_860
TMP_1391(uint256) = TMP_1390 + 65
sig2offset(uint256) := TMP_1391(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_1392(uint256) = sig2offset - 64
TMP_1393(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1392,64,sessionPubkey,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_1394(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_1394(bytes32)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
oraclize_randomDS_args[queryId] == keccak256()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_861(bytes32) -> oraclize_randomDS_args[queryId]
TMP_1395(bytes32) = SOLIDITY_CALL keccak256()(commitmentSlice1,sessionPubkeyHash)
TMP_1396(bool) = REF_861 == TMP_1395
CONDITION TMP_1396"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_862(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_862 "];
19->21;
20[label="Node Type: RETURN 20

EXPRESSION:
false

IRs:
RETURN False"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_1398(uint256) = 32 + 8
TMP_1399(uint256) = TMP_1398 + 1
TMP_1400(uint256) = TMP_1399 + 32
TMP_1401 = new bytes(TMP_1400)
tosign1(bytes) := TMP_1401(bytes)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_1402(uint256) = 32 + 8
TMP_1403(uint256) = TMP_1402 + 1
TMP_1404(uint256) = TMP_1403 + 32
TMP_1405(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_1404,tosign1,0)"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
! verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_1406(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_1407(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1406,sig1,sessionPubkey)
TMP_1408 = UnaryType.BANG TMP_1407 
CONDITION TMP_1408"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: RETURN 25

EXPRESSION:
false

IRs:
RETURN False"];
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: IF 27

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_863(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1409(bool) = REF_863 == False
CONDITION TMP_1409"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_864(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1410(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_864(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_1410(bool)"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: RETURN 30

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_865(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_865"];
}
// Function: 91.sol-Moon-oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_850(None) -> _proof[0]
TMP_1327(bool) = REF_850 != L
REF_851(None) -> _proof[1]
TMP_1328(bool) = REF_851 != P
TMP_1329(bool) = TMP_1327 || TMP_1328
REF_852(None) -> _proof[2]
TMP_1330(bool) = REF_852 != 1
TMP_1331(bool) = TMP_1329 || TMP_1330
CONDITION TMP_1331"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_1332 = CONVERT _result to bytes
TMP_1333(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_1334(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_1332,TMP_1333)
proofVerified(bool) := TMP_1334(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_1335(bool) = proofVerified == False
CONDITION TMP_1335"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
2

IRs:
RETURN 2"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 91.sol-Moon-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_1292(uint256) = sig2offset + 1
REF_844(None) -> proof[TMP_1292]
TMP_1293 = CONVERT REF_844 to uint256
TMP_1294(uint256) = TMP_1293 + 2
TMP_1295 = new bytes(TMP_1294)
sig2(bytes) := TMP_1295(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_845 -> LENGTH sig2
TMP_1296(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_845,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_1298 = new bytes(64)
appkey1_pubkey(bytes) := TMP_1298(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_1299(uint256) = 3 + 1
TMP_1300(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1299,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_1302(uint256) = 1 + 65
TMP_1303(uint256) = TMP_1302 + 32
TMP_1304 = new bytes(TMP_1303)
tosign2(bytes) := TMP_1304(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = bytes1(1)

IRs:
REF_846(bytes1) -> tosign2[0]
TMP_1305 = CONVERT 1 to bytes1
REF_846(bytes1) (->tosign2) := TMP_1305(bytes1)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_1306(uint256) = sig2offset - 65
TMP_1307(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1306,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_1308(uint256) = 1 + 65
TMP_1309(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_1308)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_1310(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_1311(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1310,sig2,appkey1_pubkey)
sigok(bool) := TMP_1311(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_1312(bool) = sigok == False
CONDITION TMP_1312"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_1314(uint256) = 1 + 65
TMP_1315 = new bytes(TMP_1314)
tosign3(bytes) := TMP_1315(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_847(uint256) -> tosign3[0]
REF_847(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_1316(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_1318(uint256) = 3 + 65
TMP_1319(uint256) = TMP_1318 + 1
REF_848(None) -> proof[TMP_1319]
TMP_1320 = CONVERT REF_848 to uint256
TMP_1321(uint256) = TMP_1320 + 2
TMP_1322 = new bytes(TMP_1321)
sig3(bytes) := TMP_1322(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_1323(uint256) = 3 + 65
REF_849 -> LENGTH sig3
TMP_1324(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1323,REF_849,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_1325(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_1326(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1325,sig3,LEDGERKEY)
sigok(bool) := TMP_1326(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 91.sol-Moon-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_randomDS_args[queryId] = commitment

IRs:
REF_841(bytes32) -> oraclize_randomDS_args[queryId]
REF_841(bytes32) (->oraclize_randomDS_args) := commitment(bytes32)"];
}
// Function: 91.sol-Moon-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_1052"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 91.sol-Moon-oraclize_setNetwork()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_736(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_737(bool) = TMP_736 > 0
CONDITION TMP_737"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_738 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_738(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_740(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_741(bool) = TMP_740 > 0
CONDITION TMP_741"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_742 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_742(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_744(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_745(bool) = TMP_744 > 0
CONDITION TMP_745"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_746 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_746(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_748(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_749(bool) = TMP_748 > 0
CONDITION TMP_749"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_750 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_750(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_752(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_753(bool) = TMP_752 > 0
CONDITION TMP_753"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_754 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_754(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_755(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_756(bool) = TMP_755 > 0
CONDITION TMP_756"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_757 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_757(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_758(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_759(bool) = TMP_758 > 0
CONDITION TMP_759"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_760 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_760(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 91.sol-Moon-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_setNetwork()

IRs:
TMP_735(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork()()
RETURN TMP_735"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
networkID
"];
}
// Function: 91.sol-Moon-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 91.sol-Moon-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_1050"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 91.sol-Moon-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_1056 = CONVERT _a to bytes
tmp(bytes) := TMP_1056(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_1057(uint256) = 2 * 20
TMP_1058(uint256) = 2 + TMP_1057
TMP_1059(bool) = i < TMP_1058
CONDITION TMP_1059"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_735(None) -> tmp[i]
TMP_1060 = CONVERT REF_735 to uint160
b1(uint160) := TMP_1060(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_1061(uint256) = i + 1
REF_736(None) -> tmp[TMP_1061]
TMP_1062 = CONVERT REF_736 to uint160
b2(uint160) := TMP_1062(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_1063(bool) = b1 >= 97
TMP_1064(bool) = b1 <= 102
TMP_1065(bool) = TMP_1063 && TMP_1064
CONDITION TMP_1065"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_1066(bool) = b1 >= 65
TMP_1067(bool) = b1 <= 70
TMP_1068(bool) = TMP_1066 && TMP_1067
CONDITION TMP_1068"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_1069(bool) = b1 >= 48
TMP_1070(bool) = b1 <= 57
TMP_1071(bool) = TMP_1069 && TMP_1070
CONDITION TMP_1071"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_1072(bool) = b2 >= 97
TMP_1073(bool) = b2 <= 102
TMP_1074(bool) = TMP_1072 && TMP_1073
CONDITION TMP_1074"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_1075(bool) = b2 >= 65
TMP_1076(bool) = b2 <= 70
TMP_1077(bool) = TMP_1075 && TMP_1076
CONDITION TMP_1077"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_1078(bool) = b2 >= 48
TMP_1079(bool) = b2 <= 57
TMP_1080(bool) = TMP_1078 && TMP_1079
CONDITION TMP_1080"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_1081(uint160) = b1 * 16
TMP_1082(uint160) = TMP_1081 + b2
iaddr(uint160) = iaddr + TMP_1082"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_1083 = CONVERT iaddr to address
RETURN TMP_1083"];
}
// Function: 91.sol-Moon-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_1152(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_1152"];
}
// Function: 91.sol-Moon-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_1153 = CONVERT _a to bytes
bresult(bytes) := TMP_1153(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_781 -> LENGTH bresult
TMP_1154(bool) = i < REF_781
CONDITION TMP_1154"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_782(None) -> bresult[i]
TMP_1155(bool) = REF_782 >= 48
REF_783(None) -> bresult[i]
TMP_1156(bool) = REF_783 <= 57
TMP_1157(bool) = TMP_1155 && TMP_1156
CONDITION TMP_1157"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_1158(bool) = _b == 0
CONDITION TMP_1158"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_1159(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_784(None) -> bresult[i]
TMP_1160 = CONVERT REF_784 to uint256
TMP_1161(uint256) = TMP_1160 - 48
mint(uint256) = mint + TMP_1161"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_785(None) -> bresult[i]
TMP_1162(bool) = REF_785 == 46
CONDITION TMP_1162"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_1163(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_1164(bool) = _b > 0
CONDITION TMP_1164"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_1165(uint256) = 10 ** _b
mint(uint256) = mint * TMP_1165"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 91.sol-Moon-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 91.sol-Moon-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_1498(uint256) = 60 * 60
TMP_1499(uint256) = TMP_1498 * 24
day(uint256) := TMP_1499(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_1500(uint256) = 60 * 60
TMP_1501(uint256) = TMP_1500 * 24
TMP_1502(uint256) = TMP_1501 * 7
week(uint256) := TMP_1502(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_1503(uint256) = 60 * 60
TMP_1504(uint256) = TMP_1503 * 24
TMP_1505(uint256) = TMP_1504 * 30
month(uint256) := TMP_1505(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
}
// Function: 91.sol-Moon-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_1084 = CONVERT _a to bytes
a(bytes) := TMP_1084(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_1085 = CONVERT _b to bytes
b(bytes) := TMP_1085(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_737 -> LENGTH a
minLength(uint256) := REF_737(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_738 -> LENGTH b
TMP_1086(bool) = REF_738 < minLength
CONDITION TMP_1086"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_739 -> LENGTH b
minLength(uint256) := REF_739(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_1087(bool) = i < minLength
CONDITION TMP_1087"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_740(None) -> a[i]
REF_741(None) -> b[i]
TMP_1088(bool) = REF_740 < REF_741
CONDITION TMP_1088"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_1089(uint256) = 0 - 1
RETURN TMP_1089"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_742(None) -> a[i]
REF_743(None) -> b[i]
TMP_1090(bool) = REF_742 > REF_743
CONDITION TMP_1090"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_1091(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_744 -> LENGTH a
REF_745 -> LENGTH b
TMP_1092(bool) = REF_744 < REF_745
CONDITION TMP_1092"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_1093(uint256) = 0 - 1
RETURN TMP_1093"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_746 -> LENGTH a
REF_747 -> LENGTH b
TMP_1094(bool) = REF_746 > REF_747
CONDITION TMP_1094"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 91.sol-Moon-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_1151(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_1151"];
}
// Function: 91.sol-Moon-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_1150(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_1150"];
}
// Function: 91.sol-Moon-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_1149(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_1149"];
}
// Function: 91.sol-Moon-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_1121 = CONVERT _a to bytes
_ba(bytes) := TMP_1121(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_1122 = CONVERT _b to bytes
_bb(bytes) := TMP_1122(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_1123 = CONVERT _c to bytes
_bc(bytes) := TMP_1123(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_1124 = CONVERT _d to bytes
_bd(bytes) := TMP_1124(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_1125 = CONVERT _e to bytes
_be(bytes) := TMP_1125(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_761 -> LENGTH _ba
REF_762 -> LENGTH _bb
TMP_1127(uint256) = REF_761 + REF_762
REF_763 -> LENGTH _bc
TMP_1128(uint256) = TMP_1127 + REF_763
REF_764 -> LENGTH _bd
TMP_1129(uint256) = TMP_1128 + REF_764
REF_765 -> LENGTH _be
TMP_1130(uint256) = TMP_1129 + REF_765
TMP_1131 = new string(TMP_1130)
abcde(string) := TMP_1131(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_1132 = CONVERT abcde to bytes
babcde(bytes) := TMP_1132(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_766 -> LENGTH _ba
TMP_1133(bool) = i < REF_766
CONDITION TMP_1133"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_1134(uint256) := k(uint256)
k(uint256) = k + 1
REF_767(None) -> babcde[TMP_1134]
REF_768(None) -> _ba[i]
REF_767(None) (->babcde) := REF_768(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_1135(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_769 -> LENGTH _bb
TMP_1136(bool) = i < REF_769
CONDITION TMP_1136"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_1137(uint256) := k(uint256)
k(uint256) = k + 1
REF_770(None) -> babcde[TMP_1137]
REF_771(None) -> _bb[i]
REF_770(None) (->babcde) := REF_771(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_1138(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_772 -> LENGTH _bc
TMP_1139(bool) = i < REF_772
CONDITION TMP_1139"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_1140(uint256) := k(uint256)
k(uint256) = k + 1
REF_773(None) -> babcde[TMP_1140]
REF_774(None) -> _bc[i]
REF_773(None) (->babcde) := REF_774(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_1141(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_775 -> LENGTH _bd
TMP_1142(bool) = i < REF_775
CONDITION TMP_1142"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_1143(uint256) := k(uint256)
k(uint256) = k + 1
REF_776(None) -> babcde[TMP_1143]
REF_777(None) -> _bd[i]
REF_776(None) (->babcde) := REF_777(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_1144(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_778 -> LENGTH _be
TMP_1145(bool) = i < REF_778
CONDITION TMP_1145"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_1146(uint256) := k(uint256)
k(uint256) = k + 1
REF_779(None) -> babcde[TMP_1146]
REF_780(None) -> _be[i]
REF_779(None) (->babcde) := REF_780(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_1147(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_1148 = CONVERT babcde to string
RETURN TMP_1148"];
}
// Function: 91.sol-Moon-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_787 -> LENGTH arr
arrlen(uint256) := REF_787(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_1179(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_1179(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_1180(bool) = i < arrlen
CONDITION TMP_1180"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_788(bytes) -> elemArray[i]
REF_789(string) -> arr[i]
TMP_1181 = CONVERT REF_789 to bytes
REF_788(bytes) (->elemArray) := TMP_1181(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_790(bytes) -> elemArray[i]
REF_791 -> LENGTH REF_790
REF_792(bytes) -> elemArray[i]
REF_793 -> LENGTH REF_792
TMP_1182(uint256) = REF_793 - 1
TMP_1183(uint256) = TMP_1182 / 23
TMP_1184(uint256) = REF_791 + TMP_1183
TMP_1185(uint256) = TMP_1184 + 3
outputlen(uint256) = outputlen + TMP_1185"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1186(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_1187(uint256) = arrlen + 128
cborlen(uint256) := TMP_1187(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_1188 = CONVERT cborlen to bytes1
REF_794 -> LENGTH TMP_1188
outputlen(uint256) = outputlen + REF_794"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_1190 = new bytes(outputlen)
res(bytes) := TMP_1190(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_1191 = CONVERT cborlen to bytes1
REF_795 -> LENGTH TMP_1191
TMP_1192(bool) = REF_795 > ctr
CONDITION TMP_1192"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_796(None) -> res[ctr]
TMP_1193 = CONVERT cborlen to bytes1
REF_797(None) -> TMP_1193[ctr]
REF_796(None) (->res) := REF_797(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_1194(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_1195(bool) = i < arrlen
CONDITION TMP_1195"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_798(uint256) -> res[ctr]
REF_798(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_1196(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_799(bytes) -> elemArray[i]
REF_800 -> LENGTH REF_799
TMP_1197(bool) = x < REF_800
CONDITION TMP_1197"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_1198(uint256) = x % 23
TMP_1199(bool) = TMP_1198 == 0
CONDITION TMP_1199"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_1200 = CONVERT elemcborlen to bytes1
REF_801 -> LENGTH TMP_1200
TMP_1201(uint256) = ctr - lctr
TMP_1202(bool) = REF_801 > TMP_1201
CONDITION TMP_1202"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_802(None) -> res[ctr]
TMP_1203 = CONVERT elemcborlen to bytes1
TMP_1204(uint256) = ctr - lctr
REF_803(None) -> TMP_1203[TMP_1204]
REF_802(None) (->res) := REF_803(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_1205(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_804(None) -> res[ctr]
REF_805(bytes) -> elemArray[i]
REF_806(None) -> REF_805[x]
REF_804(None) (->res) := REF_806(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_1206(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_1207(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_807(uint256) -> res[ctr]
REF_807(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_1208(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_1209(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_808(bytes) -> elemArray[i]
REF_809 -> LENGTH REF_808
TMP_1210(uint256) = REF_809 - x
TMP_1211(bool) = TMP_1210 >= 24
CONDITION TMP_1211"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_810(bytes) -> elemArray[i]
REF_811 -> LENGTH REF_810
TMP_1212(uint256) = REF_811 - x
elemcborlen(uint256) := TMP_1212(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 91.sol-Moon-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_1166(bool) = i == 0
CONDITION TMP_1166"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_1167(bool) = j != 0
CONDITION TMP_1167"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_1168(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_1170 = new bytes(len)
bstr(bytes) := TMP_1170(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_1171(uint256) = len - 1
k(uint256) := TMP_1171(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_1172(bool) = i != 0
CONDITION TMP_1172"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_1173(uint256) := k(uint256)
k(uint256) = k - 1
REF_786(bytes1) -> bstr[TMP_1173]
TMP_1174(uint256) = i % 10
TMP_1175(uint256) = 48 + TMP_1174
TMP_1176 = CONVERT TMP_1175 to bytes1
REF_786(bytes1) (->bstr) := TMP_1176(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_1177 = CONVERT bstr to string
RETURN TMP_1177"];
}
// Function: 91.sol-Moon-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_1272 = new bytes(32)
sigr_(bytes) := TMP_1272(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_842(None) -> dersig[3]
TMP_1273 = CONVERT REF_842 to uint256
TMP_1274(uint256) = TMP_1273 - 32
TMP_1275(uint256) = 4 + TMP_1274
offset(uint256) := TMP_1275(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_1276(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_1276(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_1278 = new bytes(32)
sigs_(bytes) := TMP_1278(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_1279(uint256) = 32 + 2
offset(uint256) = offset + TMP_1279"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_1280(uint256) = offset - 1
REF_843(None) -> dersig[TMP_1280]
TMP_1281 = CONVERT REF_843 to uint256
TMP_1282(uint256) = TMP_1281 - 32
TMP_1283(uint256) = offset + TMP_1282
TMP_1284(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_1283,32,sigs_,0)
sigs_(bytes) := TMP_1284(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_3(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_3 index: 0 
signer(address)= UNPACK TUPLE_3 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(keccak256()(pubkey)) == signer

IRs:
TMP_1285(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_1286 = CONVERT TMP_1285 to address
TMP_1287(bool) = TMP_1286 == signer
CONDITION TMP_1287"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_4(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_4 index: 0 
signer(address)= UNPACK TUPLE_4 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(keccak256()(pubkey)) == signer)

IRs:
TMP_1288(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_1289 = CONVERT TMP_1288 to address
TMP_1290(bool) = TMP_1289 == signer
RETURN TMP_1290"];
}
// Function: 91.sol-Moon-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withdrawStatus = 0

IRs:
withdrawStatus(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = earnings[msg.sender]

IRs:
REF_872(uint256) -> earnings[msg.sender]
amount(uint256) := REF_872(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
amount > 0

IRs:
TMP_1440(bool) = amount > 0
CONDITION TMP_1440"];
3->4[label="True"];
3->11[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
withdrawStatus = 1

IRs:
withdrawStatus(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
earnings[msg.sender] = 0

IRs:
REF_873(uint256) -> earnings[msg.sender]
REF_873(uint256) (->earnings) := 0(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
! msg.sender.send(amount)

IRs:
TMP_1441 = SEND dest:msg.sender value:amount
TMP_1442 = UnaryType.BANG TMP_1441 
CONDITION TMP_1442"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
earnings[msg.sender] = amount

IRs:
REF_875(uint256) -> earnings[msg.sender]
REF_875(uint256) (->earnings) := amount(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
withdrawStatus = 2

IRs:
withdrawStatus(uint256) := 2(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
withdrawStatus

IRs:
RETURN withdrawStatus"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
withdrawStatus

IRs:
RETURN withdrawStatus"];
}
// Function: 91.sol-OraclizeAddrResolverI-getAddress()
digraph{
}
// Function: 91.sol-OraclizeI-getPrice(string)
digraph{
}
// Function: 91.sol-OraclizeI-getPrice(string,uint256)
digraph{
}
// Function: 91.sol-OraclizeI-query(uint256,string,string)
digraph{
}
// Function: 91.sol-OraclizeI-query2(uint256,string,string,string)
digraph{
}
// Function: 91.sol-OraclizeI-query2_withGasLimit(uint256,string,string,string,uint256)
digraph{
}
// Function: 91.sol-OraclizeI-queryN(uint256,string,bytes)
digraph{
}
// Function: 91.sol-OraclizeI-queryN_withGasLimit(uint256,string,bytes,uint256)
digraph{
}
// Function: 91.sol-OraclizeI-query_withGasLimit(uint256,string,string,uint256)
digraph{
}
// Function: 91.sol-OraclizeI-randomDS_getSessionPubKeyHash()
digraph{
}
// Function: 91.sol-OraclizeI-setCustomGasPrice(uint256)
digraph{
}
// Function: 91.sol-OraclizeI-setProofType(bytes1)
digraph{
}
// Function: 91.sol-Strings-concat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_baseBytes = bytes(_base)

IRs:
TMP_721 = CONVERT _base to bytes
_baseBytes(bytes) := TMP_721(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_valueBytes = bytes(_value)

IRs:
TMP_722 = CONVERT _value to bytes
_valueBytes(bytes) := TMP_722(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_tmpValue = new string(_baseBytes.length + _valueBytes.length)

IRs:
REF_433 -> LENGTH _baseBytes
REF_434 -> LENGTH _valueBytes
TMP_724(uint256) = REF_433 + REF_434
TMP_725 = new string(TMP_724)
_tmpValue(string) := TMP_725(string)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_newValue = bytes(_tmpValue)

IRs:
TMP_726 = CONVERT _tmpValue to bytes
_newValue(bytes) := TMP_726(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->15;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < _baseBytes.length

IRs:
REF_435 -> LENGTH _baseBytes
TMP_727(bool) = i < REF_435
CONDITION TMP_727"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_newValue[j ++] = _baseBytes[i]

IRs:
TMP_728(uint256) := j(uint256)
j(uint256) = j + 1
REF_436(None) -> _newValue[TMP_728]
REF_437(None) -> _baseBytes[i]
REF_436(None) (->_newValue) := REF_437(None)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_729(uint256) := i(uint256)
i(uint256) = i + 1"];
12->10;
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i < _valueBytes.length

IRs:
REF_438 -> LENGTH _valueBytes
TMP_730(bool) = i < REF_438
CONDITION TMP_730"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_newValue[j ++] = _valueBytes[i ++]

IRs:
TMP_731(uint256) := j(uint256)
j(uint256) = j + 1
REF_439(None) -> _newValue[TMP_731]
TMP_732(uint256) := i(uint256)
i(uint256) = i + 1
REF_440(None) -> _valueBytes[TMP_732]
REF_439(None) (->_newValue) := REF_440(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_733(uint256) := i(uint256)
i(uint256) = i + 1"];
18->16;
19[label="Node Type: RETURN 19

EXPRESSION:
string(_newValue)

IRs:
TMP_734 = CONVERT _newValue to string
RETURN TMP_734"];
}
// Function: 91.sol-usingOraclize-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_27 = new bytes(0)
INTERNAL_CALL, usingOraclize.__callback(bytes32,string,bytes)(myid,result,TMP_27)"];
}
// Function: 91.sol-usingOraclize-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1
"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
myid
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
result
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
proof
"];
}
// Function: 91.sol-usingOraclize-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_371 -> LENGTH arr
arrlen(uint256) := REF_371(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_479(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_479(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_480(bool) = i < arrlen
CONDITION TMP_480"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_372(bytes) -> elemArray[i]
REF_373(bytes) -> arr[i]
TMP_481 = CONVERT REF_373 to bytes
REF_372(bytes) (->elemArray) := TMP_481(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_374(bytes) -> elemArray[i]
REF_375 -> LENGTH REF_374
REF_376(bytes) -> elemArray[i]
REF_377 -> LENGTH REF_376
TMP_482(uint256) = REF_377 - 1
TMP_483(uint256) = TMP_482 / 23
TMP_484(uint256) = REF_375 + TMP_483
TMP_485(uint256) = TMP_484 + 3
outputlen(uint256) = outputlen + TMP_485"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_486(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_487(uint256) = arrlen + 128
cborlen(uint256) := TMP_487(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_488 = CONVERT cborlen to bytes1
REF_378 -> LENGTH TMP_488
outputlen(uint256) = outputlen + REF_378"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_490 = new bytes(outputlen)
res(bytes) := TMP_490(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_491 = CONVERT cborlen to bytes1
REF_379 -> LENGTH TMP_491
TMP_492(bool) = REF_379 > ctr
CONDITION TMP_492"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_380(None) -> res[ctr]
TMP_493 = CONVERT cborlen to bytes1
REF_381(None) -> TMP_493[ctr]
REF_380(None) (->res) := REF_381(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_494(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_495(bool) = i < arrlen
CONDITION TMP_495"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_382(uint256) -> res[ctr]
REF_382(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_496(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_383(bytes) -> elemArray[i]
REF_384 -> LENGTH REF_383
TMP_497(bool) = x < REF_384
CONDITION TMP_497"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_498(uint256) = x % 23
TMP_499(bool) = TMP_498 == 0
CONDITION TMP_499"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_500 = CONVERT elemcborlen to bytes1
REF_385 -> LENGTH TMP_500
TMP_501(uint256) = ctr - lctr
TMP_502(bool) = REF_385 > TMP_501
CONDITION TMP_502"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_386(None) -> res[ctr]
TMP_503 = CONVERT elemcborlen to bytes1
TMP_504(uint256) = ctr - lctr
REF_387(None) -> TMP_503[TMP_504]
REF_386(None) (->res) := REF_387(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_505(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_388(None) -> res[ctr]
REF_389(bytes) -> elemArray[i]
REF_390(None) -> REF_389[x]
REF_388(None) (->res) := REF_390(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_506(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_507(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_391(uint256) -> res[ctr]
REF_391(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_508(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_509(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_392(bytes) -> elemArray[i]
REF_393 -> LENGTH REF_392
TMP_510(uint256) = REF_393 - x
TMP_511(bool) = TMP_510 >= 24
CONDITION TMP_511"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_394(bytes) -> elemArray[i]
REF_395 -> LENGTH REF_394
TMP_512(uint256) = REF_395 - x
elemcborlen(uint256) := TMP_512(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 91.sol-usingOraclize-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_676(uint256) = length + toOffset
minLength(uint256) := TMP_676(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to.length >= minLength)

IRs:
REF_425 -> LENGTH to
TMP_677(bool) = REF_425 >= minLength
TMP_678(None) = SOLIDITY_CALL require(bool)(TMP_677)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_679(uint256) = 32 + fromOffset
i(uint256) := TMP_679(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_680(uint256) = 32 + toOffset
j(uint256) := TMP_680(uint256)"];
4->5;
5[label="Node Type: BEGIN_LOOP 5
"];
5->6;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_681(uint256) = 32 + fromOffset
TMP_682(uint256) = TMP_681 + length
TMP_683(bool) = i < TMP_682
CONDITION TMP_683"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
10->6;
11[label="Node Type: END_LOOP 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 91.sol-usingOraclize-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_709(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_710 = CONVERT TMP_709 to OraclizeI
oraclize(OraclizeI) := TMP_710(OraclizeI)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 91.sol-usingOraclize-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_426 -> LENGTH sig
TMP_684(bool) = REF_426 != 65
CONDITION TMP_684"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_685(bool) = v < 27
CONDITION TMP_685"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_686(bool) = v != 27
TMP_687(bool) = v != 28
TMP_688(bool) = TMP_686 && TMP_687
CONDITION TMP_688"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_2(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_2"];
}
// Function: 91.sol-usingOraclize-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 91.sol-usingOraclize-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_360 = CONVERT _haystack to bytes
h(bytes) := TMP_360(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_361 = CONVERT _needle to bytes
n(bytes) := TMP_361(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_307 -> LENGTH h
TMP_362(bool) = REF_307 < 1
REF_308 -> LENGTH n
TMP_363(bool) = REF_308 < 1
TMP_364(bool) = TMP_362 || TMP_363
REF_309 -> LENGTH n
REF_310 -> LENGTH h
TMP_365(bool) = REF_309 > REF_310
TMP_366(bool) = TMP_364 || TMP_365
CONDITION TMP_366"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_367(uint256) = 0 - 1
RETURN TMP_367"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_311 -> LENGTH h
TMP_368(uint256) = 2 ** 128
TMP_369(uint256) = TMP_368 - 1
TMP_370(bool) = REF_311 > TMP_369
CONDITION TMP_370"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_371(uint256) = 0 - 1
RETURN TMP_371"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_312 -> LENGTH h
TMP_372(bool) = i < REF_312
CONDITION TMP_372"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_313(None) -> h[i]
REF_314(None) -> n[0]
TMP_373(bool) = REF_313 == REF_314
CONDITION TMP_373"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_315 -> LENGTH n
TMP_374(bool) = subindex < REF_315
TMP_375(uint256) = i + subindex
REF_316 -> LENGTH h
TMP_376(bool) = TMP_375 < REF_316
TMP_377(bool) = TMP_374 && TMP_376
TMP_378(uint256) = i + subindex
REF_317(None) -> h[TMP_378]
REF_318(None) -> n[subindex]
TMP_379(bool) = REF_317 == REF_318
TMP_380(bool) = TMP_377 && TMP_379
CONDITION TMP_380"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_381(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_319 -> LENGTH n
TMP_382(bool) = subindex == REF_319
CONDITION TMP_382"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_383 = CONVERT i to int256
RETURN TMP_383"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_384(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_385(uint256) = 0 - 1
RETURN TMP_385"];
}
// Function: 91.sol-usingOraclize-matchBytes32Prefix(bytes32,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(prefix.length == n_random_bytes)

IRs:
REF_412 -> LENGTH prefix
TMP_601(bool) = REF_412 == n_random_bytes
TMP_602(None) = SOLIDITY_CALL require(bool)(TMP_601)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < n_random_bytes

IRs:
TMP_603(bool) = i < n_random_bytes
CONDITION TMP_603"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_413(None) -> content[i]
REF_414(None) -> prefix[i]
TMP_604(bool) = REF_413 != REF_414
CONDITION TMP_604"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_605(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: RETURN 11

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 91.sol-usingOraclize-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_697 = CONVERT OAR to address
TMP_698(bool) = TMP_697 == 0
TMP_699 = CONVERT OAR to address
TMP_700(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_699)
TMP_701(bool) = TMP_700 == 0
TMP_702(bool) = TMP_698 || TMP_701
CONDITION TMP_702"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_703(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_704 = CONVERT oraclize to address
TMP_705(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_706(bool) = TMP_704 != TMP_705
CONDITION TMP_706"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_707(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_708 = CONVERT TMP_707 to OraclizeI
oraclize(OraclizeI) := TMP_708(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 91.sol-usingOraclize-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_313(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_313"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 91.sol-usingOraclize-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 91.sol-usingOraclize-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_29(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_29"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 91.sol-usingOraclize-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_31(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_31"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 91.sol-usingOraclize-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_nbytes > 0) && (_nbytes <= 32))

IRs:
TMP_513(bool) = _nbytes > 0
TMP_514(bool) = _nbytes <= 32
TMP_515(bool) = TMP_513 && TMP_514
TMP_516(None) = SOLIDITY_CALL require(bool)(TMP_515)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_delay *= 10

IRs:
_delay(uint256) = _delay * 10"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_518 = new bytes(1)
nbytes(bytes) := TMP_518(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_396(bytes1) -> nbytes[0]
TMP_519 = CONVERT _nbytes to bytes1
REF_396(bytes1) (->nbytes) := TMP_519(bytes1)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
unonce = new bytes(32)

IRs:
TMP_521 = new bytes(32)
unonce(bytes) := TMP_521(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
sessionKeyHash = new bytes(32)

IRs:
TMP_523 = new bytes(32)
sessionKeyHash(bytes) := TMP_523(bytes)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_524(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_524(bytes32)"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
delay = new bytes(32)

IRs:
TMP_526 = new bytes(32)
delay(bytes) := TMP_526(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
delay_bytes8 = new bytes(8)

IRs:
TMP_528 = new bytes(8)
delay_bytes8(bytes) := TMP_528(bytes)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
copyBytes(delay,24,8,delay_bytes8,0)

IRs:
TMP_529(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(delay,24,8,delay_bytes8,0)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash,delay)

IRs:
args(bytes[4]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)', 'delay(bytes)']"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
queryId = oraclize_query(random,args,_customGasLimit)

IRs:
TMP_530(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[4],uint256)(random,args,_customGasLimit)
queryId(bytes32) := TMP_530(bytes32)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
delay_bytes8_left = new bytes(8)

IRs:
TMP_532 = new bytes(8)
delay_bytes8_left(bytes) := TMP_532(bytes)"];
17->18;
18[label="Node Type: INLINE ASM 18
"];
18->19;
19[label="Node Type: END INLINE ASM 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,keccak256()(delay_bytes8_left,args[1],sha256()(args[0]),args[2]))

IRs:
REF_397(bytes) -> args[1]
REF_398(bytes) -> args[0]
TMP_533(bytes32) = SOLIDITY_CALL sha256()(REF_398)
REF_399(bytes) -> args[2]
TMP_534(bytes32) = SOLIDITY_CALL keccak256()(delay_bytes8_left,REF_397,TMP_533,REF_399)
INTERNAL_CALL, usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_534)"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_234(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_234(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_170(bytes) -> dynargs[0]
REF_171(bytes) -> args[0]
REF_170(bytes) (->dynargs) := REF_171(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_235(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_235"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_246(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_246(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_176(bytes) -> dynargs[0]
REF_177(bytes) -> args[0]
REF_176(bytes) (->dynargs) := REF_177(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_247(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_247"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_250(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_250(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_178(bytes) -> dynargs[0]
REF_179(bytes) -> args[0]
REF_178(bytes) (->dynargs) := REF_179(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_180(bytes) -> dynargs[1]
REF_181(bytes) -> args[1]
REF_180(bytes) (->dynargs) := REF_181(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_251(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_251"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_262(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_262(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_190(bytes) -> dynargs[0]
REF_191(bytes) -> args[0]
REF_190(bytes) (->dynargs) := REF_191(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_192(bytes) -> dynargs[1]
REF_193(bytes) -> args[1]
REF_192(bytes) (->dynargs) := REF_193(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_263(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_263"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_266(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_266(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_194(bytes) -> dynargs[0]
REF_195(bytes) -> args[0]
REF_194(bytes) (->dynargs) := REF_195(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_196(bytes) -> dynargs[1]
REF_197(bytes) -> args[1]
REF_196(bytes) (->dynargs) := REF_197(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_198(bytes) -> dynargs[2]
REF_199(bytes) -> args[2]
REF_198(bytes) (->dynargs) := REF_199(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_267(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_267"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_278(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_278(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_212(bytes) -> dynargs[0]
REF_213(bytes) -> args[0]
REF_212(bytes) (->dynargs) := REF_213(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_214(bytes) -> dynargs[1]
REF_215(bytes) -> args[1]
REF_214(bytes) (->dynargs) := REF_215(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_216(bytes) -> dynargs[2]
REF_217(bytes) -> args[2]
REF_216(bytes) (->dynargs) := REF_217(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_279(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_279"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_282(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_282(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_218(bytes) -> dynargs[0]
REF_219(bytes) -> args[0]
REF_218(bytes) (->dynargs) := REF_219(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_220(bytes) -> dynargs[1]
REF_221(bytes) -> args[1]
REF_220(bytes) (->dynargs) := REF_221(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_222(bytes) -> dynargs[2]
REF_223(bytes) -> args[2]
REF_222(bytes) (->dynargs) := REF_223(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_224(bytes) -> dynargs[3]
REF_225(bytes) -> args[3]
REF_224(bytes) (->dynargs) := REF_225(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_283(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_283"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_294(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_294(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_242(bytes) -> dynargs[0]
REF_243(bytes) -> args[0]
REF_242(bytes) (->dynargs) := REF_243(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_244(bytes) -> dynargs[1]
REF_245(bytes) -> args[1]
REF_244(bytes) (->dynargs) := REF_245(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_246(bytes) -> dynargs[2]
REF_247(bytes) -> args[2]
REF_246(bytes) (->dynargs) := REF_247(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_248(bytes) -> dynargs[3]
REF_249(bytes) -> args[3]
REF_248(bytes) (->dynargs) := REF_249(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_295(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_295"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_298(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_298(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_250(bytes) -> dynargs[0]
REF_251(bytes) -> args[0]
REF_250(bytes) (->dynargs) := REF_251(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_252(bytes) -> dynargs[1]
REF_253(bytes) -> args[1]
REF_252(bytes) (->dynargs) := REF_253(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_254(bytes) -> dynargs[2]
REF_255(bytes) -> args[2]
REF_254(bytes) (->dynargs) := REF_255(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_256(bytes) -> dynargs[3]
REF_257(bytes) -> args[3]
REF_256(bytes) (->dynargs) := REF_257(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_258(bytes) -> dynargs[4]
REF_259(bytes) -> args[4]
REF_258(bytes) (->dynargs) := REF_259(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_299(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_299"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_310(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_310(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_280(bytes) -> dynargs[0]
REF_281(bytes) -> args[0]
REF_280(bytes) (->dynargs) := REF_281(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_282(bytes) -> dynargs[1]
REF_283(bytes) -> args[1]
REF_282(bytes) (->dynargs) := REF_283(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_284(bytes) -> dynargs[2]
REF_285(bytes) -> args[2]
REF_284(bytes) (->dynargs) := REF_285(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_286(bytes) -> dynargs[3]
REF_287(bytes) -> args[3]
REF_286(bytes) (->dynargs) := REF_287(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_288(bytes) -> dynargs[4]
REF_289(bytes) -> args[4]
REF_288(bytes) (->dynargs) := REF_289(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_311(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_311"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_201(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_201(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_202(uint256) = tx.gasprice * 200000
TMP_203(uint256) = 1000000000000000000 + TMP_202
TMP_204(bool) = price > TMP_203
CONDITION TMP_204"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_205(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_205(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_207(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_207"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_225(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_225(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_226(uint256) = tx.gasprice * gaslimit
TMP_227(uint256) = 1000000000000000000 + TMP_226
TMP_228(bool) = price > TMP_227
CONDITION TMP_228"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_229(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_229(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_231(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_231"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_33(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_33(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_34(uint256) = tx.gasprice * 200000
TMP_35(uint256) = 1000000000000000000 + TMP_34
TMP_36(bool) = price > TMP_35
CONDITION TMP_36"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_38(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_38"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_61(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_62(uint256) = tx.gasprice * 200000
TMP_63(uint256) = 1000000000000000000 + TMP_62
TMP_64(bool) = price > TMP_63
CONDITION TMP_64"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_66(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_66"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_82(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_82(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_83(uint256) = tx.gasprice * gaslimit
TMP_84(uint256) = 1000000000000000000 + TMP_83
TMP_85(bool) = price > TMP_84
CONDITION TMP_85"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_87(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_87"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_54(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_54(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_55(uint256) = tx.gasprice * gaslimit
TMP_56(uint256) = 1000000000000000000 + TMP_55
TMP_57(bool) = price > TMP_56
CONDITION TMP_57"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_59(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_59"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_122(string[])  = new string[](1)
dynargs(string[]) = ['TMP_122(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_38(string) -> dynargs[0]
REF_39(string) -> args[0]
REF_38(string) (->dynargs) := REF_39(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_123(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_123"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_134(string[])  = new string[](1)
dynargs(string[]) = ['TMP_134(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_44(string) -> dynargs[0]
REF_45(string) -> args[0]
REF_44(string) (->dynargs) := REF_45(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_135(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_135"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_138(string[])  = new string[](2)
dynargs(string[]) = ['TMP_138(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_46(string) -> dynargs[0]
REF_47(string) -> args[0]
REF_46(string) (->dynargs) := REF_47(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_48(string) -> dynargs[1]
REF_49(string) -> args[1]
REF_48(string) (->dynargs) := REF_49(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_139(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_139"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_150(string[])  = new string[](2)
dynargs(string[]) = ['TMP_150(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_58(string) -> dynargs[0]
REF_59(string) -> args[0]
REF_58(string) (->dynargs) := REF_59(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_60(string) -> dynargs[1]
REF_61(string) -> args[1]
REF_60(string) (->dynargs) := REF_61(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_151(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_151"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_154(string[])  = new string[](3)
dynargs(string[]) = ['TMP_154(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_62(string) -> dynargs[0]
REF_63(string) -> args[0]
REF_62(string) (->dynargs) := REF_63(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_64(string) -> dynargs[1]
REF_65(string) -> args[1]
REF_64(string) (->dynargs) := REF_65(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_66(string) -> dynargs[2]
REF_67(string) -> args[2]
REF_66(string) (->dynargs) := REF_67(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_155(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_155"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_166(string[])  = new string[](3)
dynargs(string[]) = ['TMP_166(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_80(string) -> dynargs[0]
REF_81(string) -> args[0]
REF_80(string) (->dynargs) := REF_81(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_82(string) -> dynargs[1]
REF_83(string) -> args[1]
REF_82(string) (->dynargs) := REF_83(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_84(string) -> dynargs[2]
REF_85(string) -> args[2]
REF_84(string) (->dynargs) := REF_85(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_167(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_167"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_170(string[])  = new string[](4)
dynargs(string[]) = ['TMP_170(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_86(string) -> dynargs[0]
REF_87(string) -> args[0]
REF_86(string) (->dynargs) := REF_87(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_88(string) -> dynargs[1]
REF_89(string) -> args[1]
REF_88(string) (->dynargs) := REF_89(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_90(string) -> dynargs[2]
REF_91(string) -> args[2]
REF_90(string) (->dynargs) := REF_91(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_92(string) -> dynargs[3]
REF_93(string) -> args[3]
REF_92(string) (->dynargs) := REF_93(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_171(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_171"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_182(string[])  = new string[](4)
dynargs(string[]) = ['TMP_182(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_110(string) -> dynargs[0]
REF_111(string) -> args[0]
REF_110(string) (->dynargs) := REF_111(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_112(string) -> dynargs[1]
REF_113(string) -> args[1]
REF_112(string) (->dynargs) := REF_113(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_114(string) -> dynargs[2]
REF_115(string) -> args[2]
REF_114(string) (->dynargs) := REF_115(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_116(string) -> dynargs[3]
REF_117(string) -> args[3]
REF_116(string) (->dynargs) := REF_117(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_183(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_183"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_186(string[])  = new string[](5)
dynargs(string[]) = ['TMP_186(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_118(string) -> dynargs[0]
REF_119(string) -> args[0]
REF_118(string) (->dynargs) := REF_119(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_120(string) -> dynargs[1]
REF_121(string) -> args[1]
REF_120(string) (->dynargs) := REF_121(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_122(string) -> dynargs[2]
REF_123(string) -> args[2]
REF_122(string) (->dynargs) := REF_123(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_124(string) -> dynargs[3]
REF_125(string) -> args[3]
REF_124(string) (->dynargs) := REF_125(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_126(string) -> dynargs[4]
REF_127(string) -> args[4]
REF_126(string) (->dynargs) := REF_127(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_187(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_187"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_198(string[])  = new string[](5)
dynargs(string[]) = ['TMP_198(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_148(string) -> dynargs[0]
REF_149(string) -> args[0]
REF_148(string) (->dynargs) := REF_149(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_150(string) -> dynargs[1]
REF_151(string) -> args[1]
REF_150(string) (->dynargs) := REF_151(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_152(string) -> dynargs[2]
REF_153(string) -> args[2]
REF_152(string) (->dynargs) := REF_153(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_154(string) -> dynargs[3]
REF_155(string) -> args[3]
REF_154(string) (->dynargs) := REF_155(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_156(string) -> dynargs[4]
REF_157(string) -> args[4]
REF_156(string) (->dynargs) := REF_157(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_199(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_199"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_89(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_89(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_90(uint256) = tx.gasprice * 200000
TMP_91(uint256) = 1000000000000000000 + TMP_90
TMP_92(bool) = price > TMP_91
CONDITION TMP_92"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_93(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_93(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_95(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_95"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_113(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_113(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_114(uint256) = tx.gasprice * gaslimit
TMP_115(uint256) = 1000000000000000000 + TMP_114
TMP_116(bool) = price > TMP_115
CONDITION TMP_116"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_117(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_117(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_119(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_119"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_238(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_238(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_172(bytes) -> dynargs[0]
REF_173(bytes) -> args[0]
REF_172(bytes) (->dynargs) := REF_173(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_239(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_239"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_242(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_242(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_174(bytes) -> dynargs[0]
REF_175(bytes) -> args[0]
REF_174(bytes) (->dynargs) := REF_175(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_243(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_243"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_254(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_254(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_182(bytes) -> dynargs[0]
REF_183(bytes) -> args[0]
REF_182(bytes) (->dynargs) := REF_183(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_184(bytes) -> dynargs[1]
REF_185(bytes) -> args[1]
REF_184(bytes) (->dynargs) := REF_185(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_255(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_255"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_258(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_258(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_186(bytes) -> dynargs[0]
REF_187(bytes) -> args[0]
REF_186(bytes) (->dynargs) := REF_187(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_188(bytes) -> dynargs[1]
REF_189(bytes) -> args[1]
REF_188(bytes) (->dynargs) := REF_189(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_259(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_259"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_270(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_270(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_200(bytes) -> dynargs[0]
REF_201(bytes) -> args[0]
REF_200(bytes) (->dynargs) := REF_201(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_202(bytes) -> dynargs[1]
REF_203(bytes) -> args[1]
REF_202(bytes) (->dynargs) := REF_203(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_204(bytes) -> dynargs[2]
REF_205(bytes) -> args[2]
REF_204(bytes) (->dynargs) := REF_205(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_271(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_271"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_274(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_274(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_206(bytes) -> dynargs[0]
REF_207(bytes) -> args[0]
REF_206(bytes) (->dynargs) := REF_207(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_208(bytes) -> dynargs[1]
REF_209(bytes) -> args[1]
REF_208(bytes) (->dynargs) := REF_209(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_210(bytes) -> dynargs[2]
REF_211(bytes) -> args[2]
REF_210(bytes) (->dynargs) := REF_211(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_275(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_275"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_286(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_286(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_226(bytes) -> dynargs[0]
REF_227(bytes) -> args[0]
REF_226(bytes) (->dynargs) := REF_227(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_228(bytes) -> dynargs[1]
REF_229(bytes) -> args[1]
REF_228(bytes) (->dynargs) := REF_229(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_230(bytes) -> dynargs[2]
REF_231(bytes) -> args[2]
REF_230(bytes) (->dynargs) := REF_231(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_232(bytes) -> dynargs[3]
REF_233(bytes) -> args[3]
REF_232(bytes) (->dynargs) := REF_233(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_287(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_287"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_290(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_290(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_234(bytes) -> dynargs[0]
REF_235(bytes) -> args[0]
REF_234(bytes) (->dynargs) := REF_235(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_236(bytes) -> dynargs[1]
REF_237(bytes) -> args[1]
REF_236(bytes) (->dynargs) := REF_237(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_238(bytes) -> dynargs[2]
REF_239(bytes) -> args[2]
REF_238(bytes) (->dynargs) := REF_239(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_240(bytes) -> dynargs[3]
REF_241(bytes) -> args[3]
REF_240(bytes) (->dynargs) := REF_241(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_291(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_291"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_302(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_302(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_260(bytes) -> dynargs[0]
REF_261(bytes) -> args[0]
REF_260(bytes) (->dynargs) := REF_261(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_262(bytes) -> dynargs[1]
REF_263(bytes) -> args[1]
REF_262(bytes) (->dynargs) := REF_263(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_264(bytes) -> dynargs[2]
REF_265(bytes) -> args[2]
REF_264(bytes) (->dynargs) := REF_265(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_266(bytes) -> dynargs[3]
REF_267(bytes) -> args[3]
REF_266(bytes) (->dynargs) := REF_267(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_268(bytes) -> dynargs[4]
REF_269(bytes) -> args[4]
REF_268(bytes) (->dynargs) := REF_269(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_303(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_303"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_306(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_306(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_270(bytes) -> dynargs[0]
REF_271(bytes) -> args[0]
REF_270(bytes) (->dynargs) := REF_271(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_272(bytes) -> dynargs[1]
REF_273(bytes) -> args[1]
REF_272(bytes) (->dynargs) := REF_273(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_274(bytes) -> dynargs[2]
REF_275(bytes) -> args[2]
REF_274(bytes) (->dynargs) := REF_275(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_276(bytes) -> dynargs[3]
REF_277(bytes) -> args[3]
REF_276(bytes) (->dynargs) := REF_277(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_278(bytes) -> dynargs[4]
REF_279(bytes) -> args[4]
REF_278(bytes) (->dynargs) := REF_279(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_307(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_307"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_209(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_209(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_210(uint256) = tx.gasprice * 200000
TMP_211(uint256) = 1000000000000000000 + TMP_210
TMP_212(bool) = price > TMP_211
CONDITION TMP_212"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_213(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_213(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_215(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_215"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_217(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_217(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_218(uint256) = tx.gasprice * gaslimit
TMP_219(uint256) = 1000000000000000000 + TMP_218
TMP_220(bool) = price > TMP_219
CONDITION TMP_220"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_221(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_221(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_223(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_223"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_40(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_40(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_41(uint256) = tx.gasprice * 200000
TMP_42(uint256) = 1000000000000000000 + TMP_41
TMP_43(bool) = price > TMP_42
CONDITION TMP_43"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_45(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_45"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_68(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_68(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_69(uint256) = tx.gasprice * 200000
TMP_70(uint256) = 1000000000000000000 + TMP_69
TMP_71(bool) = price > TMP_70
CONDITION TMP_71"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_73(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_73"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_75(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_75(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_76(uint256) = tx.gasprice * gaslimit
TMP_77(uint256) = 1000000000000000000 + TMP_76
TMP_78(bool) = price > TMP_77
CONDITION TMP_78"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_80(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_80"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_47(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_47(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_48(uint256) = tx.gasprice * gaslimit
TMP_49(uint256) = 1000000000000000000 + TMP_48
TMP_50(bool) = price > TMP_49
CONDITION TMP_50"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_52(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_52"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_126(string[])  = new string[](1)
dynargs(string[]) = ['TMP_126(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_40(string) -> dynargs[0]
REF_41(string) -> args[0]
REF_40(string) (->dynargs) := REF_41(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_127(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_127"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_130(string[])  = new string[](1)
dynargs(string[]) = ['TMP_130(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_42(string) -> dynargs[0]
REF_43(string) -> args[0]
REF_42(string) (->dynargs) := REF_43(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_131(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_131"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_142(string[])  = new string[](2)
dynargs(string[]) = ['TMP_142(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_50(string) -> dynargs[0]
REF_51(string) -> args[0]
REF_50(string) (->dynargs) := REF_51(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_52(string) -> dynargs[1]
REF_53(string) -> args[1]
REF_52(string) (->dynargs) := REF_53(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_143(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_143"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_146(string[])  = new string[](2)
dynargs(string[]) = ['TMP_146(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_54(string) -> dynargs[0]
REF_55(string) -> args[0]
REF_54(string) (->dynargs) := REF_55(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_56(string) -> dynargs[1]
REF_57(string) -> args[1]
REF_56(string) (->dynargs) := REF_57(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_147(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_147"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_158(string[])  = new string[](3)
dynargs(string[]) = ['TMP_158(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_68(string) -> dynargs[0]
REF_69(string) -> args[0]
REF_68(string) (->dynargs) := REF_69(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_70(string) -> dynargs[1]
REF_71(string) -> args[1]
REF_70(string) (->dynargs) := REF_71(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_72(string) -> dynargs[2]
REF_73(string) -> args[2]
REF_72(string) (->dynargs) := REF_73(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_159(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_159"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_162(string[])  = new string[](3)
dynargs(string[]) = ['TMP_162(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_74(string) -> dynargs[0]
REF_75(string) -> args[0]
REF_74(string) (->dynargs) := REF_75(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_76(string) -> dynargs[1]
REF_77(string) -> args[1]
REF_76(string) (->dynargs) := REF_77(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_78(string) -> dynargs[2]
REF_79(string) -> args[2]
REF_78(string) (->dynargs) := REF_79(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_163(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_163"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_174(string[])  = new string[](4)
dynargs(string[]) = ['TMP_174(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_94(string) -> dynargs[0]
REF_95(string) -> args[0]
REF_94(string) (->dynargs) := REF_95(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_96(string) -> dynargs[1]
REF_97(string) -> args[1]
REF_96(string) (->dynargs) := REF_97(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_98(string) -> dynargs[2]
REF_99(string) -> args[2]
REF_98(string) (->dynargs) := REF_99(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_100(string) -> dynargs[3]
REF_101(string) -> args[3]
REF_100(string) (->dynargs) := REF_101(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_175(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_175"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_178(string[])  = new string[](4)
dynargs(string[]) = ['TMP_178(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_102(string) -> dynargs[0]
REF_103(string) -> args[0]
REF_102(string) (->dynargs) := REF_103(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_104(string) -> dynargs[1]
REF_105(string) -> args[1]
REF_104(string) (->dynargs) := REF_105(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_106(string) -> dynargs[2]
REF_107(string) -> args[2]
REF_106(string) (->dynargs) := REF_107(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_108(string) -> dynargs[3]
REF_109(string) -> args[3]
REF_108(string) (->dynargs) := REF_109(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_179(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_179"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_190(string[])  = new string[](5)
dynargs(string[]) = ['TMP_190(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_128(string) -> dynargs[0]
REF_129(string) -> args[0]
REF_128(string) (->dynargs) := REF_129(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_130(string) -> dynargs[1]
REF_131(string) -> args[1]
REF_130(string) (->dynargs) := REF_131(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_132(string) -> dynargs[2]
REF_133(string) -> args[2]
REF_132(string) (->dynargs) := REF_133(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_134(string) -> dynargs[3]
REF_135(string) -> args[3]
REF_134(string) (->dynargs) := REF_135(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_136(string) -> dynargs[4]
REF_137(string) -> args[4]
REF_136(string) (->dynargs) := REF_137(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_191(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_191"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_194(string[])  = new string[](5)
dynargs(string[]) = ['TMP_194(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_138(string) -> dynargs[0]
REF_139(string) -> args[0]
REF_138(string) (->dynargs) := REF_139(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_140(string) -> dynargs[1]
REF_141(string) -> args[1]
REF_140(string) (->dynargs) := REF_141(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_142(string) -> dynargs[2]
REF_143(string) -> args[2]
REF_142(string) (->dynargs) := REF_143(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_144(string) -> dynargs[3]
REF_145(string) -> args[3]
REF_144(string) (->dynargs) := REF_145(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_146(string) -> dynargs[4]
REF_147(string) -> args[4]
REF_146(string) (->dynargs) := REF_147(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_195(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_195"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_97(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_97(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_98(uint256) = tx.gasprice * 200000
TMP_99(uint256) = 1000000000000000000 + TMP_98
TMP_100(bool) = price > TMP_99
CONDITION TMP_100"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_101(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_101(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_103(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_103"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_105(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_106(uint256) = tx.gasprice * gaslimit
TMP_107(uint256) = 1000000000000000000 + TMP_106
TMP_108(bool) = price > TMP_107
CONDITION TMP_108"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_109(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_109(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_111(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_111"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 91.sol-usingOraclize-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_319(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_319"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 91.sol-usingOraclize-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_proof[0] == L) && (_proof[1] == P) && (_proof[2] == 1))

IRs:
REF_430(None) -> _proof[0]
TMP_711(bool) = REF_430 == L
REF_431(None) -> _proof[1]
TMP_712(bool) = REF_431 == P
TMP_713(bool) = TMP_711 && TMP_712
REF_432(None) -> _proof[2]
TMP_714(bool) = REF_432 == 1
TMP_715(bool) = TMP_713 && TMP_714
TMP_716(None) = SOLIDITY_CALL require(bool)(TMP_715)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_717 = CONVERT _result to bytes
TMP_718(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_719(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_717,TMP_718)
proofVerified(bool) := TMP_719(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(proofVerified)

IRs:
TMP_720(None) = SOLIDITY_CALL require(bool)(proofVerified)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 91.sol-usingOraclize-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_606(uint256) = 3 + 65
TMP_607(uint256) = 3 + 65
TMP_608(uint256) = TMP_607 + 1
REF_415(None) -> proof[TMP_608]
TMP_609 = CONVERT REF_415 to uint256
TMP_610(uint256) = TMP_609 + 2
TMP_611(uint256) = TMP_606 + TMP_610
TMP_612(uint256) = TMP_611 + 32
ledgerProofLength(uint256) := TMP_612(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_614 = new bytes(32)
keyhash(bytes) := TMP_614(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_615(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! (keccak256()(keyhash) == keccak256()(sha256()(context_name,queryId)))

IRs:
TMP_616(bytes32) = SOLIDITY_CALL keccak256()(keyhash)
TMP_617(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_618(bytes32) = SOLIDITY_CALL keccak256()(TMP_617)
TMP_619(bool) = TMP_616 == TMP_618
TMP_620 = UnaryType.BANG TMP_619 
CONDITION TMP_620"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_622(uint256) = 32 + 8
TMP_623(uint256) = TMP_622 + 1
TMP_624(uint256) = TMP_623 + 32
TMP_625(uint256) = ledgerProofLength + TMP_624
TMP_626(uint256) = TMP_625 + 1
REF_416(None) -> proof[TMP_626]
TMP_627 = CONVERT REF_416 to uint256
TMP_628(uint256) = TMP_627 + 2
TMP_629 = new bytes(TMP_628)
sig1(bytes) := TMP_629(bytes)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_630(uint256) = 32 + 8
TMP_631(uint256) = TMP_630 + 1
TMP_632(uint256) = TMP_631 + 32
TMP_633(uint256) = ledgerProofLength + TMP_632
REF_417 -> LENGTH sig1
TMP_634(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_633,REF_417,sig1,0)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! matchBytes32Prefix(sha256()(sig1),result,uint256(proof[ledgerProofLength + 32 + 8]))

IRs:
TMP_635(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_636(uint256) = ledgerProofLength + 32
TMP_637(uint256) = TMP_636 + 8
REF_418(None) -> proof[TMP_637]
TMP_638 = CONVERT REF_418 to uint256
TMP_639(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256)(TMP_635,result,TMP_638)
TMP_640 = UnaryType.BANG TMP_639 
CONDITION TMP_640"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_642(uint256) = 8 + 1
TMP_643(uint256) = TMP_642 + 32
TMP_644 = new bytes(TMP_643)
commitmentSlice1(bytes) := TMP_644(bytes)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_645(uint256) = ledgerProofLength + 32
TMP_646(uint256) = 8 + 1
TMP_647(uint256) = TMP_646 + 32
TMP_648(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_645,TMP_647,commitmentSlice1,0)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_650 = new bytes(64)
sessionPubkey(bytes) := TMP_650(bytes)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_651(uint256) = ledgerProofLength + 32
TMP_652(uint256) = 8 + 1
TMP_653(uint256) = TMP_652 + 32
TMP_654(uint256) = TMP_651 + TMP_653
REF_419 -> LENGTH sig1
TMP_655(uint256) = TMP_654 + REF_419
TMP_656(uint256) = TMP_655 + 65
sig2offset(uint256) := TMP_656(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_657(uint256) = sig2offset - 64
TMP_658(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_657,64,sessionPubkey,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_659(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_659(bytes32)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
oraclize_randomDS_args[queryId] == keccak256()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_420(bytes32) -> oraclize_randomDS_args[queryId]
TMP_660(bytes32) = SOLIDITY_CALL keccak256()(commitmentSlice1,sessionPubkeyHash)
TMP_661(bool) = REF_420 == TMP_660
CONDITION TMP_661"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_421(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_421 "];
19->21;
20[label="Node Type: RETURN 20

EXPRESSION:
false

IRs:
RETURN False"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_663(uint256) = 32 + 8
TMP_664(uint256) = TMP_663 + 1
TMP_665(uint256) = TMP_664 + 32
TMP_666 = new bytes(TMP_665)
tosign1(bytes) := TMP_666(bytes)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_667(uint256) = 32 + 8
TMP_668(uint256) = TMP_667 + 1
TMP_669(uint256) = TMP_668 + 32
TMP_670(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_669,tosign1,0)"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
! verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_671(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_672(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_671,sig1,sessionPubkey)
TMP_673 = UnaryType.BANG TMP_672 
CONDITION TMP_673"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: RETURN 25

EXPRESSION:
false

IRs:
RETURN False"];
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: IF 27

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_422(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_674(bool) = REF_422 == False
CONDITION TMP_674"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_423(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_675(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_423(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_675(bool)"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: RETURN 30

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_424(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_424"];
}
// Function: 91.sol-usingOraclize-oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_409(None) -> _proof[0]
TMP_592(bool) = REF_409 != L
REF_410(None) -> _proof[1]
TMP_593(bool) = REF_410 != P
TMP_594(bool) = TMP_592 || TMP_593
REF_411(None) -> _proof[2]
TMP_595(bool) = REF_411 != 1
TMP_596(bool) = TMP_594 || TMP_595
CONDITION TMP_596"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_597 = CONVERT _result to bytes
TMP_598(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_599(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_597,TMP_598)
proofVerified(bool) := TMP_599(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_600(bool) = proofVerified == False
CONDITION TMP_600"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
2

IRs:
RETURN 2"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 91.sol-usingOraclize-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_557(uint256) = sig2offset + 1
REF_403(None) -> proof[TMP_557]
TMP_558 = CONVERT REF_403 to uint256
TMP_559(uint256) = TMP_558 + 2
TMP_560 = new bytes(TMP_559)
sig2(bytes) := TMP_560(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_404 -> LENGTH sig2
TMP_561(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_404,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_563 = new bytes(64)
appkey1_pubkey(bytes) := TMP_563(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_564(uint256) = 3 + 1
TMP_565(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_564,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_567(uint256) = 1 + 65
TMP_568(uint256) = TMP_567 + 32
TMP_569 = new bytes(TMP_568)
tosign2(bytes) := TMP_569(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = bytes1(1)

IRs:
REF_405(bytes1) -> tosign2[0]
TMP_570 = CONVERT 1 to bytes1
REF_405(bytes1) (->tosign2) := TMP_570(bytes1)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_571(uint256) = sig2offset - 65
TMP_572(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_571,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_573(uint256) = 1 + 65
TMP_574(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_573)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_575(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_576(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_575,sig2,appkey1_pubkey)
sigok(bool) := TMP_576(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_577(bool) = sigok == False
CONDITION TMP_577"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_579(uint256) = 1 + 65
TMP_580 = new bytes(TMP_579)
tosign3(bytes) := TMP_580(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_406(uint256) -> tosign3[0]
REF_406(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_581(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_583(uint256) = 3 + 65
TMP_584(uint256) = TMP_583 + 1
REF_407(None) -> proof[TMP_584]
TMP_585 = CONVERT REF_407 to uint256
TMP_586(uint256) = TMP_585 + 2
TMP_587 = new bytes(TMP_586)
sig3(bytes) := TMP_587(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_588(uint256) = 3 + 65
REF_408 -> LENGTH sig3
TMP_589(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_588,REF_408,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_590(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_591(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_590,sig3,LEDGERKEY)
sigok(bool) := TMP_591(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 91.sol-usingOraclize-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_randomDS_args[queryId] = commitment

IRs:
REF_400(bytes32) -> oraclize_randomDS_args[queryId]
REF_400(bytes32) (->oraclize_randomDS_args) := commitment(bytes32)"];
}
// Function: 91.sol-usingOraclize-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_317"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 91.sol-usingOraclize-oraclize_setNetwork()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_1(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_2(bool) = TMP_1 > 0
CONDITION TMP_2"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_3 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_3(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_5(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_6(bool) = TMP_5 > 0
CONDITION TMP_6"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_7 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_7(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_9(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_10(bool) = TMP_9 > 0
CONDITION TMP_10"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_11 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_11(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_13(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_14(bool) = TMP_13 > 0
CONDITION TMP_14"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_15 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_15(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_17(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_18(bool) = TMP_17 > 0
CONDITION TMP_18"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_19 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_19(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_20(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_21(bool) = TMP_20 > 0
CONDITION TMP_21"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_22 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_22(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_23(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_24(bool) = TMP_23 > 0
CONDITION TMP_24"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_25 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_25(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 91.sol-usingOraclize-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_setNetwork()

IRs:
TMP_0(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork()()
RETURN TMP_0"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
networkID
"];
}
// Function: 91.sol-usingOraclize-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 91.sol-usingOraclize-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_315"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 91.sol-usingOraclize-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_321 = CONVERT _a to bytes
tmp(bytes) := TMP_321(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_322(uint256) = 2 * 20
TMP_323(uint256) = 2 + TMP_322
TMP_324(bool) = i < TMP_323
CONDITION TMP_324"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_294(None) -> tmp[i]
TMP_325 = CONVERT REF_294 to uint160
b1(uint160) := TMP_325(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_326(uint256) = i + 1
REF_295(None) -> tmp[TMP_326]
TMP_327 = CONVERT REF_295 to uint160
b2(uint160) := TMP_327(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_328(bool) = b1 >= 97
TMP_329(bool) = b1 <= 102
TMP_330(bool) = TMP_328 && TMP_329
CONDITION TMP_330"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_331(bool) = b1 >= 65
TMP_332(bool) = b1 <= 70
TMP_333(bool) = TMP_331 && TMP_332
CONDITION TMP_333"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_334(bool) = b1 >= 48
TMP_335(bool) = b1 <= 57
TMP_336(bool) = TMP_334 && TMP_335
CONDITION TMP_336"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_337(bool) = b2 >= 97
TMP_338(bool) = b2 <= 102
TMP_339(bool) = TMP_337 && TMP_338
CONDITION TMP_339"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_340(bool) = b2 >= 65
TMP_341(bool) = b2 <= 70
TMP_342(bool) = TMP_340 && TMP_341
CONDITION TMP_342"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_343(bool) = b2 >= 48
TMP_344(bool) = b2 <= 57
TMP_345(bool) = TMP_343 && TMP_344
CONDITION TMP_345"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_346(uint160) = b1 * 16
TMP_347(uint160) = TMP_346 + b2
iaddr(uint160) = iaddr + TMP_347"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_348 = CONVERT iaddr to address
RETURN TMP_348"];
}
// Function: 91.sol-usingOraclize-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_417(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_417"];
}
// Function: 91.sol-usingOraclize-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_418 = CONVERT _a to bytes
bresult(bytes) := TMP_418(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_340 -> LENGTH bresult
TMP_419(bool) = i < REF_340
CONDITION TMP_419"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_341(None) -> bresult[i]
TMP_420(bool) = REF_341 >= 48
REF_342(None) -> bresult[i]
TMP_421(bool) = REF_342 <= 57
TMP_422(bool) = TMP_420 && TMP_421
CONDITION TMP_422"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_423(bool) = _b == 0
CONDITION TMP_423"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_424(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_343(None) -> bresult[i]
TMP_425 = CONVERT REF_343 to uint256
TMP_426(uint256) = TMP_425 - 48
mint(uint256) = mint + TMP_426"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_344(None) -> bresult[i]
TMP_427(bool) = REF_344 == 46
CONDITION TMP_427"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_428(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_429(bool) = _b > 0
CONDITION TMP_429"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_430(uint256) = 10 ** _b
mint(uint256) = mint * TMP_430"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 91.sol-usingOraclize-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 91.sol-usingOraclize-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_689(uint256) = 60 * 60
TMP_690(uint256) = TMP_689 * 24
day(uint256) := TMP_690(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_691(uint256) = 60 * 60
TMP_692(uint256) = TMP_691 * 24
TMP_693(uint256) = TMP_692 * 7
week(uint256) := TMP_693(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_694(uint256) = 60 * 60
TMP_695(uint256) = TMP_694 * 24
TMP_696(uint256) = TMP_695 * 30
month(uint256) := TMP_696(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
}
// Function: 91.sol-usingOraclize-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_349 = CONVERT _a to bytes
a(bytes) := TMP_349(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_350 = CONVERT _b to bytes
b(bytes) := TMP_350(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_296 -> LENGTH a
minLength(uint256) := REF_296(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_297 -> LENGTH b
TMP_351(bool) = REF_297 < minLength
CONDITION TMP_351"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_298 -> LENGTH b
minLength(uint256) := REF_298(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_352(bool) = i < minLength
CONDITION TMP_352"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_299(None) -> a[i]
REF_300(None) -> b[i]
TMP_353(bool) = REF_299 < REF_300
CONDITION TMP_353"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_354(uint256) = 0 - 1
RETURN TMP_354"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_301(None) -> a[i]
REF_302(None) -> b[i]
TMP_355(bool) = REF_301 > REF_302
CONDITION TMP_355"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_356(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_303 -> LENGTH a
REF_304 -> LENGTH b
TMP_357(bool) = REF_303 < REF_304
CONDITION TMP_357"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_358(uint256) = 0 - 1
RETURN TMP_358"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_305 -> LENGTH a
REF_306 -> LENGTH b
TMP_359(bool) = REF_305 > REF_306
CONDITION TMP_359"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 91.sol-usingOraclize-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_416(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_416"];
}
// Function: 91.sol-usingOraclize-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_415(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_415"];
}
// Function: 91.sol-usingOraclize-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_414(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_414"];
}
// Function: 91.sol-usingOraclize-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_386 = CONVERT _a to bytes
_ba(bytes) := TMP_386(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_387 = CONVERT _b to bytes
_bb(bytes) := TMP_387(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_388 = CONVERT _c to bytes
_bc(bytes) := TMP_388(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_389 = CONVERT _d to bytes
_bd(bytes) := TMP_389(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_390 = CONVERT _e to bytes
_be(bytes) := TMP_390(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_320 -> LENGTH _ba
REF_321 -> LENGTH _bb
TMP_392(uint256) = REF_320 + REF_321
REF_322 -> LENGTH _bc
TMP_393(uint256) = TMP_392 + REF_322
REF_323 -> LENGTH _bd
TMP_394(uint256) = TMP_393 + REF_323
REF_324 -> LENGTH _be
TMP_395(uint256) = TMP_394 + REF_324
TMP_396 = new string(TMP_395)
abcde(string) := TMP_396(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_397 = CONVERT abcde to bytes
babcde(bytes) := TMP_397(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_325 -> LENGTH _ba
TMP_398(bool) = i < REF_325
CONDITION TMP_398"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_399(uint256) := k(uint256)
k(uint256) = k + 1
REF_326(None) -> babcde[TMP_399]
REF_327(None) -> _ba[i]
REF_326(None) (->babcde) := REF_327(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_400(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_328 -> LENGTH _bb
TMP_401(bool) = i < REF_328
CONDITION TMP_401"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_402(uint256) := k(uint256)
k(uint256) = k + 1
REF_329(None) -> babcde[TMP_402]
REF_330(None) -> _bb[i]
REF_329(None) (->babcde) := REF_330(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_403(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_331 -> LENGTH _bc
TMP_404(bool) = i < REF_331
CONDITION TMP_404"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_405(uint256) := k(uint256)
k(uint256) = k + 1
REF_332(None) -> babcde[TMP_405]
REF_333(None) -> _bc[i]
REF_332(None) (->babcde) := REF_333(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_406(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_334 -> LENGTH _bd
TMP_407(bool) = i < REF_334
CONDITION TMP_407"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_408(uint256) := k(uint256)
k(uint256) = k + 1
REF_335(None) -> babcde[TMP_408]
REF_336(None) -> _bd[i]
REF_335(None) (->babcde) := REF_336(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_409(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_337 -> LENGTH _be
TMP_410(bool) = i < REF_337
CONDITION TMP_410"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_411(uint256) := k(uint256)
k(uint256) = k + 1
REF_338(None) -> babcde[TMP_411]
REF_339(None) -> _be[i]
REF_338(None) (->babcde) := REF_339(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_412(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_413 = CONVERT babcde to string
RETURN TMP_413"];
}
// Function: 91.sol-usingOraclize-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_346 -> LENGTH arr
arrlen(uint256) := REF_346(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_444(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_444(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_445(bool) = i < arrlen
CONDITION TMP_445"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_347(bytes) -> elemArray[i]
REF_348(string) -> arr[i]
TMP_446 = CONVERT REF_348 to bytes
REF_347(bytes) (->elemArray) := TMP_446(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_349(bytes) -> elemArray[i]
REF_350 -> LENGTH REF_349
REF_351(bytes) -> elemArray[i]
REF_352 -> LENGTH REF_351
TMP_447(uint256) = REF_352 - 1
TMP_448(uint256) = TMP_447 / 23
TMP_449(uint256) = REF_350 + TMP_448
TMP_450(uint256) = TMP_449 + 3
outputlen(uint256) = outputlen + TMP_450"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_451(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_452(uint256) = arrlen + 128
cborlen(uint256) := TMP_452(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_453 = CONVERT cborlen to bytes1
REF_353 -> LENGTH TMP_453
outputlen(uint256) = outputlen + REF_353"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_455 = new bytes(outputlen)
res(bytes) := TMP_455(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_456 = CONVERT cborlen to bytes1
REF_354 -> LENGTH TMP_456
TMP_457(bool) = REF_354 > ctr
CONDITION TMP_457"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_355(None) -> res[ctr]
TMP_458 = CONVERT cborlen to bytes1
REF_356(None) -> TMP_458[ctr]
REF_355(None) (->res) := REF_356(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_459(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_460(bool) = i < arrlen
CONDITION TMP_460"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_357(uint256) -> res[ctr]
REF_357(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_461(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_358(bytes) -> elemArray[i]
REF_359 -> LENGTH REF_358
TMP_462(bool) = x < REF_359
CONDITION TMP_462"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_463(uint256) = x % 23
TMP_464(bool) = TMP_463 == 0
CONDITION TMP_464"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_465 = CONVERT elemcborlen to bytes1
REF_360 -> LENGTH TMP_465
TMP_466(uint256) = ctr - lctr
TMP_467(bool) = REF_360 > TMP_466
CONDITION TMP_467"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_361(None) -> res[ctr]
TMP_468 = CONVERT elemcborlen to bytes1
TMP_469(uint256) = ctr - lctr
REF_362(None) -> TMP_468[TMP_469]
REF_361(None) (->res) := REF_362(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_470(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_363(None) -> res[ctr]
REF_364(bytes) -> elemArray[i]
REF_365(None) -> REF_364[x]
REF_363(None) (->res) := REF_365(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_471(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_472(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_366(uint256) -> res[ctr]
REF_366(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_473(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_474(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_367(bytes) -> elemArray[i]
REF_368 -> LENGTH REF_367
TMP_475(uint256) = REF_368 - x
TMP_476(bool) = TMP_475 >= 24
CONDITION TMP_476"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_369(bytes) -> elemArray[i]
REF_370 -> LENGTH REF_369
TMP_477(uint256) = REF_370 - x
elemcborlen(uint256) := TMP_477(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 91.sol-usingOraclize-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_431(bool) = i == 0
CONDITION TMP_431"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_432(bool) = j != 0
CONDITION TMP_432"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_433(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_435 = new bytes(len)
bstr(bytes) := TMP_435(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_436(uint256) = len - 1
k(uint256) := TMP_436(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_437(bool) = i != 0
CONDITION TMP_437"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_438(uint256) := k(uint256)
k(uint256) = k - 1
REF_345(bytes1) -> bstr[TMP_438]
TMP_439(uint256) = i % 10
TMP_440(uint256) = 48 + TMP_439
TMP_441 = CONVERT TMP_440 to bytes1
REF_345(bytes1) (->bstr) := TMP_441(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_442 = CONVERT bstr to string
RETURN TMP_442"];
}
// Function: 91.sol-usingOraclize-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_537 = new bytes(32)
sigr_(bytes) := TMP_537(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_401(None) -> dersig[3]
TMP_538 = CONVERT REF_401 to uint256
TMP_539(uint256) = TMP_538 - 32
TMP_540(uint256) = 4 + TMP_539
offset(uint256) := TMP_540(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_541(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_541(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_543 = new bytes(32)
sigs_(bytes) := TMP_543(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_544(uint256) = 32 + 2
offset(uint256) = offset + TMP_544"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_545(uint256) = offset - 1
REF_402(None) -> dersig[TMP_545]
TMP_546 = CONVERT REF_402 to uint256
TMP_547(uint256) = TMP_546 - 32
TMP_548(uint256) = offset + TMP_547
TMP_549(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_548,32,sigs_,0)
sigs_(bytes) := TMP_549(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_0(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_0 index: 0 
signer(address)= UNPACK TUPLE_0 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(keccak256()(pubkey)) == signer

IRs:
TMP_550(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_551 = CONVERT TMP_550 to address
TMP_552(bool) = TMP_551 == signer
CONDITION TMP_552"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_1(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_1 index: 0 
signer(address)= UNPACK TUPLE_1 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(keccak256()(pubkey)) == signer)

IRs:
TMP_553(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_554 = CONVERT TMP_553 to address
TMP_555(bool) = TMP_554 == signer
RETURN TMP_555"];
}
}
