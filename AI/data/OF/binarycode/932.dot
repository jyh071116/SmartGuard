digraph G {
// Function: 932.sol-POCToken-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_16(bool) = msg.sender == newOwner
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_19 = CONVERT 0 to address
newOwner(address) := TMP_19(address)"];
}
// Function: 932.sol-POCToken-activation(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
airdropBounus = safeAdd(airdropTotal[addr],bounus)

IRs:
REF_6(uint256) -> airdropTotal[addr]
TMP_43(uint256) = INTERNAL_CALL, POCToken.safeAdd(uint256,uint256)(REF_6,bounus)
airdropBounus(uint256) := TMP_43(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
airdrop >= bounus && airdropBounus <= airdropLimit && addr != retentionAddress

IRs:
TMP_44(bool) = airdrop >= bounus
TMP_45(bool) = airdropBounus <= airdropLimit
TMP_46(bool) = TMP_44 && TMP_45
TMP_47(bool) = addr != retentionAddress
TMP_48(bool) = TMP_46 && TMP_47
CONDITION TMP_48"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[addr] = safeAdd(balances[addr],bounus)

IRs:
REF_7(uint256) -> balances[addr]
REF_8(uint256) -> balances[addr]
TMP_49(uint256) = INTERNAL_CALL, POCToken.safeAdd(uint256,uint256)(REF_8,bounus)
REF_7(uint256) (->balances) := TMP_49(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
airdropTotal[addr] = airdropBounus

IRs:
REF_9(uint256) -> airdropTotal[addr]
REF_9(uint256) (->airdropTotal) := airdropBounus(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
airdrop = safeSub(airdrop,bounus)

IRs:
TMP_50(uint256) = INTERNAL_CALL, POCToken.safeSub(uint256,uint256)(airdrop,bounus)
airdrop(uint256) := TMP_50(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(address(0),addr,bounus)

IRs:
TMP_51 = CONVERT 0 to address
Emit Transfer(TMP_51,addr,bounus)"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 932.sol-POCToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(specialAddress(tokenOwner) == false)

IRs:
TMP_37(bool) = INTERNAL_CALL, POCToken.specialAddress(address)(tokenOwner)
TMP_38(bool) = TMP_37 == False
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(specialAddress(spender) == false)

IRs:
TMP_40(bool) = INTERNAL_CALL, POCToken.specialAddress(address)(spender)
TMP_41(bool) = TMP_40 == False
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
remaining = 0

IRs:
remaining(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 932.sol-POCToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokens > 0)

IRs:
TMP_72(bool) = tokens > 0
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(specialAddress(spender) == false)

IRs:
TMP_74(bool) = INTERNAL_CALL, POCToken.specialAddress(address)(spender)
TMP_75(bool) = TMP_74 == False
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
success = false

IRs:
success(bool) := False(bool)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 932.sol-POCToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(specialAddress(tokenOwner) == false)

IRs:
TMP_27(bool) = INTERNAL_CALL, POCToken.specialAddress(address)(tokenOwner)
TMP_28(bool) = TMP_27 == False
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
airdrop >= fadd && airdropRecord[tokenOwner] == address(0) && tokenOwner != retentionAddress

IRs:
TMP_30(bool) = airdrop >= fadd
REF_3(address) -> airdropRecord[tokenOwner]
TMP_31 = CONVERT 0 to address
TMP_32(bool) = REF_3 == TMP_31
TMP_33(bool) = TMP_30 && TMP_32
TMP_34(bool) = tokenOwner != retentionAddress
TMP_35(bool) = TMP_33 && TMP_34
CONDITION TMP_35"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balance = balances[tokenOwner] + fadd

IRs:
REF_4(uint256) -> balances[tokenOwner]
TMP_36(uint256) = REF_4 + fadd
balance(uint256) := TMP_36(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balance = balances[tokenOwner]

IRs:
REF_5(uint256) -> balances[tokenOwner]
balance(uint256) := REF_5(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 932.sol-POCToken-chAirDropFadd(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fadd = _fadd

IRs:
fadd(uint256) := _fadd(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, POCToken.onlyOwner()()"];
2->1;
}
// Function: 932.sol-POCToken-chAirDropFshare(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fshare = _fshare

IRs:
fshare(uint256) := _fshare(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, POCToken.onlyOwner()()"];
2->1;
}
// Function: 932.sol-POCToken-chAirDropLimit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
airdropLimit = _airdropLimit

IRs:
airdropLimit(uint256) := _airdropLimit(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, POCToken.onlyOwner()()"];
2->1;
}
// Function: 932.sol-POCToken-chAllowAirdrop(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowAirdrop = _allowAirdrop

IRs:
allowAirdrop(bool) := _allowAirdrop(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, POCToken.onlyOwner()()"];
2->1;
}
// Function: 932.sol-POCToken-chAllowTransfer(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowTransfer = _allowTransfer

IRs:
allowTransfer(bool) := _allowTransfer(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, POCToken.onlyOwner()()"];
2->1;
}
// Function: 932.sol-POCToken-clearBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Transfer(addr,address(1),balances[addr])

IRs:
TMP_92 = CONVERT 1 to address
REF_19(uint256) -> balances[addr]
Emit Transfer(addr,TMP_92,REF_19)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[addr] = 0

IRs:
REF_20(uint256) -> balances[addr]
REF_20(uint256) (->balances) := 0(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, POCToken.onlyOwner()()"];
3->1;
}
// Function: 932.sol-POCToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
airdropRecord[owner] = owner

IRs:
REF_0(address) -> airdropRecord[owner]
REF_0(address) (->airdropRecord) := owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airdropRecord[retentionAddress] = retentionAddress

IRs:
REF_1(address) -> airdropRecord[retentionAddress]
REF_1(address) (->airdropRecord) := retentionAddress(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[retentionAddress] = retention

IRs:
REF_2(uint256) -> balances[retentionAddress]
REF_2(uint256) (->balances) := retention(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),retentionAddress,retention)

IRs:
TMP_20 = CONVERT 0 to address
Emit Transfer(TMP_20,retentionAddress,retention)"];
}
// Function: 932.sol-POCToken-offlineExchange(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(offline >= tokens)

IRs:
TMP_85(bool) = offline >= tokens
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_17(uint256) -> balances[to]
REF_18(uint256) -> balances[to]
TMP_87(uint256) = INTERNAL_CALL, POCToken.safeAdd(uint256,uint256)(REF_18,tokens)
REF_17(uint256) (->balances) := TMP_87(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
offline = safeSub(offline,tokens)

IRs:
TMP_88(uint256) = INTERNAL_CALL, POCToken.safeSub(uint256,uint256)(offline,tokens)
offline(uint256) := TMP_88(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(1),to,tokens)

IRs:
TMP_89 = CONVERT 1 to address
Emit Transfer(TMP_89,to,tokens)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, POCToken.onlyOwner()()"];
5->1;
}
// Function: 932.sol-POCToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_100(bool) = msg.sender == owner
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 932.sol-POCToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_0(uint256) = a + b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_1(bool) = c >= a
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 932.sol-POCToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_12(bool) = b > 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_14(uint256) = a / b
c(uint256) := TMP_14(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 932.sol-POCToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_6(uint256) = a * b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_7(bool) = a == 0
TMP_8(uint256) = c / a
TMP_9(bool) = TMP_8 == b
TMP_10(bool) = TMP_7 || TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 932.sol-POCToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_3(bool) = b <= a
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_5(uint256) = a - b
c(uint256) := TMP_5(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 932.sol-POCToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
symbol = POC

IRs:
symbol(string) := POC(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Power Candy

IRs:
name(string) := Power Candy(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalSupply = 1e28

IRs:
totalSupply(uint256) := 10000000000000000000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
offline = 6e27

IRs:
offline(uint256) := 6000000000000000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
retention = 3e27

IRs:
retention(uint256) := 3000000000000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
airdrop = 1e27

IRs:
airdrop(uint256) := 1000000000000000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
airdropLimit = 4e23

IRs:
airdropLimit(uint256) := 400000000000000000000000(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
fadd = 3e20

IRs:
fadd(uint256) := 300000000000000000000(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
fshare = 5e19

IRs:
fshare(uint256) := 50000000000000000000(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
allowTransfer = true

IRs:
allowTransfer(bool) := True(bool)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
allowAirdrop = true

IRs:
allowAirdrop(bool) := True(bool)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
retentionAddress = 0x17a896C50F11a4926f97d28EC4e7B26149712e08

IRs:
retentionAddress(address) := 135066446820847528107406540068185139594354830856(address)"];
}
// Function: 932.sol-POCToken-specialAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
spe = (addr == address(0) || addr == address(1))

IRs:
TMP_22 = CONVERT 0 to address
TMP_23(bool) = addr == TMP_22
TMP_24 = CONVERT 1 to address
TMP_25(bool) = addr == TMP_24
TMP_26(bool) = TMP_23 || TMP_25
spe(bool) := TMP_26(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
spe

IRs:
RETURN spe"];
}
// Function: 932.sol-POCToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowTransfer && tokens > 0)

IRs:
TMP_53(bool) = tokens > 0
TMP_54(bool) = allowTransfer && TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != msg.sender)

IRs:
TMP_56(bool) = to != msg.sender
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(specialAddress(to) == false)

IRs:
TMP_58(bool) = INTERNAL_CALL, POCToken.specialAddress(address)(to)
TMP_59(bool) = TMP_58 == False
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
allowAirdrop && airdropRecord[msg.sender] == address(0) && airdropRecord[to] != address(0)

IRs:
REF_10(address) -> airdropRecord[msg.sender]
TMP_61 = CONVERT 0 to address
TMP_62(bool) = REF_10 == TMP_61
TMP_63(bool) = allowAirdrop && TMP_62
REF_11(address) -> airdropRecord[to]
TMP_64 = CONVERT 0 to address
TMP_65(bool) = REF_11 != TMP_64
TMP_66(bool) = TMP_63 && TMP_65
CONDITION TMP_66"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
activation(fadd,msg.sender)

IRs:
INTERNAL_CALL, POCToken.activation(uint256,address)(fadd,msg.sender)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
activation(fshare,to)

IRs:
INTERNAL_CALL, POCToken.activation(uint256,address)(fshare,to)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
airdropRecord[msg.sender] = to

IRs:
REF_12(address) -> airdropRecord[msg.sender]
REF_12(address) (->airdropRecord) := to(address)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],tokens)

IRs:
REF_13(uint256) -> balances[msg.sender]
REF_14(uint256) -> balances[msg.sender]
TMP_69(uint256) = INTERNAL_CALL, POCToken.safeSub(uint256,uint256)(REF_14,tokens)
REF_13(uint256) (->balances) := TMP_69(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_15(uint256) -> balances[to]
REF_16(uint256) -> balances[to]
TMP_70(uint256) = INTERNAL_CALL, POCToken.safeAdd(uint256,uint256)(REF_16,tokens)
REF_15(uint256) (->balances) := TMP_70(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
success = true

IRs:
success(bool) := True(bool)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 932.sol-POCToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokens > 0)

IRs:
TMP_77(bool) = tokens > 0
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(specialAddress(from) == false)

IRs:
TMP_79(bool) = INTERNAL_CALL, POCToken.specialAddress(address)(from)
TMP_80(bool) = TMP_79 == False
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(specialAddress(to) == false)

IRs:
TMP_82(bool) = INTERNAL_CALL, POCToken.specialAddress(address)(to)
TMP_83(bool) = TMP_82 == False
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
success = false

IRs:
success(bool) := False(bool)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 932.sol-POCToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, POCToken.onlyOwner()()"];
2->1;
}
}
