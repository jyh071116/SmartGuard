digraph G {
// Function: 95.sol-BurnableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super._burn(_who,_value)

IRs:
INTERNAL_CALL, StandardToken._burn(address,uint256)(_who,_value)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
}
// Function: 95.sol-BurnableToken-_burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowed[_account][msg.sender] > _amount)

IRs:
REF_109(mapping(address => uint256)) -> allowed[_account]
REF_110(uint256) -> REF_109[msg.sender]
TMP_99(bool) = REF_110 > _amount
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_amount)

IRs:
REF_111(mapping(address => uint256)) -> allowed[_account]
REF_112(uint256) -> REF_111[msg.sender]
REF_113(mapping(address => uint256)) -> allowed[_account]
REF_114(uint256) -> REF_113[msg.sender]
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_114', '_amount'] 
REF_112(uint256) (->allowed) := TMP_101(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(_account,_amount)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(_account,_amount)"];
}
// Function: 95.sol-BurnableToken-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_account != 0)

IRs:
TMP_85(bool) = _account != 0
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_87(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_account] = balances[_account].add(_amount)

IRs:
REF_101(uint256) -> balances[_account]
REF_102(uint256) -> balances[_account]
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_102', '_amount'] 
REF_101(uint256) (->balances) := TMP_88(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_account,_amount)

IRs:
TMP_89 = CONVERT 0 to address
Emit Transfer(TMP_89,_account,_amount)"];
}
// Function: 95.sol-BurnableToken-allowance(address,address)
digraph{
}
// Function: 95.sol-BurnableToken-approve(address,uint256)
digraph{
}
// Function: 95.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 95.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 95.sol-BurnableToken-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burnFrom(_from,_value)

IRs:
INTERNAL_CALL, StandardToken._burnFrom(address,uint256)(_from,_value)"];
}
// Function: 95.sol-BurnableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_91(mapping(address => uint256)) -> allowed[msg.sender]
REF_92(uint256) -> REF_91[_spender]
oldValue(uint256) := REF_92(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_82(bool) = _subtractedValue >= oldValue
CONDITION TMP_82"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_93(mapping(address => uint256)) -> allowed[msg.sender]
REF_94(uint256) -> REF_93[_spender]
REF_94(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_95(mapping(address => uint256)) -> allowed[msg.sender]
REF_96(uint256) -> REF_95[_spender]
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_96(uint256) (->allowed) := TMP_83(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_98(mapping(address => uint256)) -> allowed[msg.sender]
REF_99(uint256) -> REF_98[_spender]
Emit Approval(msg.sender,_spender,REF_99)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 95.sol-BurnableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_84(mapping(address => uint256)) -> allowed[msg.sender]
REF_85(uint256) -> REF_84[_spender]
REF_86(mapping(address => uint256)) -> allowed[msg.sender]
REF_87(uint256) -> REF_86[_spender]
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_87', '_addedValue'] 
REF_85(uint256) (->allowed) := TMP_80(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_89(mapping(address => uint256)) -> allowed[msg.sender]
REF_90(uint256) -> REF_89[_spender]
Emit Approval(msg.sender,_spender,REF_90)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 95.sol-BurnableToken-totalSupply()
digraph{
}
// Function: 95.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 95.sol-BurnableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 95.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 95.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 95.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 95.sol-ERC20-totalSupply()
digraph{
}
// Function: 95.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 95.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 95.sol-KWATT_Token-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_account != 0)

IRs:
TMP_275(bool) = _account != 0
TMP_276(None) = SOLIDITY_CALL require(bool)(TMP_275)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_account] > _amount)

IRs:
REF_220(uint256) -> balances[_account]
TMP_277(bool) = REF_220 > _amount
TMP_278(None) = SOLIDITY_CALL require(bool)(TMP_277)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_amount)

IRs:
TMP_279(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_279(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_account] = balances[_account].sub(_amount)

IRs:
REF_222(uint256) -> balances[_account]
REF_223(uint256) -> balances[_account]
TMP_280(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_223', '_amount'] 
REF_222(uint256) (->balances) := TMP_280(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_account,address(0),_amount)

IRs:
TMP_281 = CONVERT 0 to address
Emit Transfer(_account,TMP_281,_amount)"];
}
// Function: 95.sol-KWATT_Token-_burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowed[_account][msg.sender] > _amount)

IRs:
REF_225(mapping(address => uint256)) -> allowed[_account]
REF_226(uint256) -> REF_225[msg.sender]
TMP_283(bool) = REF_226 > _amount
TMP_284(None) = SOLIDITY_CALL require(bool)(TMP_283)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_amount)

IRs:
REF_227(mapping(address => uint256)) -> allowed[_account]
REF_228(uint256) -> REF_227[msg.sender]
REF_229(mapping(address => uint256)) -> allowed[_account]
REF_230(uint256) -> REF_229[msg.sender]
TMP_285(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_230', '_amount'] 
REF_228(uint256) (->allowed) := TMP_285(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(_account,_amount)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(_account,_amount)"];
}
// Function: 95.sol-KWATT_Token-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_account != 0)

IRs:
TMP_269(bool) = _account != 0
TMP_270(None) = SOLIDITY_CALL require(bool)(TMP_269)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_271(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_271(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_account] = balances[_account].add(_amount)

IRs:
REF_217(uint256) -> balances[_account]
REF_218(uint256) -> balances[_account]
TMP_272(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_218', '_amount'] 
REF_217(uint256) (->balances) := TMP_272(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_account,_amount)

IRs:
TMP_273 = CONVERT 0 to address
Emit Transfer(TMP_273,_account,_amount)"];
}
// Function: 95.sol-KWATT_Token-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_236 = CONVERT 0 to address
TMP_237(bool) = _newOwner != TMP_236
TMP_238(None) = SOLIDITY_CALL require(bool)(TMP_237)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 95.sol-KWATT_Token-allowance(address,address)
digraph{
}
// Function: 95.sol-KWATT_Token-approve(address,uint256)
digraph{
}
// Function: 95.sol-KWATT_Token-balanceOf(address)
digraph{
}
// Function: 95.sol-KWATT_Token-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 95.sol-KWATT_Token-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burnFrom(_from,_value)

IRs:
INTERNAL_CALL, StandardToken._burnFrom(address,uint256)(_from,_value)"];
}
// Function: 95.sol-KWATT_Token-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = INITIAL_SUPPLY

IRs:
totalSupply_(uint256) := INITIAL_SUPPLY(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = totalSupply_

IRs:
REF_232(uint256) -> balances[msg.sender]
REF_232(uint256) (->balances) := totalSupply_(uint256)"];
}
// Function: 95.sol-KWATT_Token-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_207(mapping(address => uint256)) -> allowed[msg.sender]
REF_208(uint256) -> REF_207[_spender]
oldValue(uint256) := REF_208(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_266(bool) = _subtractedValue >= oldValue
CONDITION TMP_266"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_209(mapping(address => uint256)) -> allowed[msg.sender]
REF_210(uint256) -> REF_209[_spender]
REF_210(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_211(mapping(address => uint256)) -> allowed[msg.sender]
REF_212(uint256) -> REF_211[_spender]
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_212(uint256) (->allowed) := TMP_267(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_214(mapping(address => uint256)) -> allowed[msg.sender]
REF_215(uint256) -> REF_214[_spender]
Emit Approval(msg.sender,_spender,REF_215)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 95.sol-KWATT_Token-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_200(mapping(address => uint256)) -> allowed[msg.sender]
REF_201(uint256) -> REF_200[_spender]
REF_202(mapping(address => uint256)) -> allowed[msg.sender]
REF_203(uint256) -> REF_202[_spender]
TMP_264(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_203', '_addedValue'] 
REF_201(uint256) (->allowed) := TMP_264(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_205(mapping(address => uint256)) -> allowed[msg.sender]
REF_206(uint256) -> REF_205[_spender]
Emit Approval(msg.sender,_spender,REF_206)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 95.sol-KWATT_Token-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_290(bool) = msg.sender == owner
TMP_291(None) = SOLIDITY_CALL require(bool)(TMP_290)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 95.sol-KWATT_Token-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 95.sol-KWATT_Token-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_232 = CONVERT 0 to address
owner(address) := TMP_232(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 95.sol-KWATT_Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = 4NEW

IRs:
name(string) := 4NEW(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = KWATT

IRs:
symbol(string) := KWATT(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
INITIAL_SUPPLY = 300000000000000000000000000

IRs:
INITIAL_SUPPLY(uint256) := 300000000000000000000000000(uint256)"];
}
// Function: 95.sol-KWATT_Token-totalSupply()
digraph{
}
// Function: 95.sol-KWATT_Token-transfer(address,uint256)
digraph{
}
// Function: 95.sol-KWATT_Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 95.sol-KWATT_Token-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 95.sol-KWATT_Token-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 95.sol-KWATT_Token-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_287 = UnaryType.BANG paused 
TMP_288(None) = SOLIDITY_CALL require(bool)(TMP_287)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 95.sol-KWATT_Token-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_289(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 95.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_112 = CONVERT 0 to address
TMP_113(bool) = _newOwner != TMP_112
TMP_114(None) = SOLIDITY_CALL require(bool)(TMP_113)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 95.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 95.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_116(bool) = msg.sender == owner
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 95.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_108 = CONVERT 0 to address
owner(address) := TMP_108(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 95.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 95.sol-Pausable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_123 = CONVERT 0 to address
TMP_124(bool) = _newOwner != TMP_123
TMP_125(None) = SOLIDITY_CALL require(bool)(TMP_124)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 95.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 95.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_133(bool) = msg.sender == owner
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 95.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 95.sol-Pausable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_119 = CONVERT 0 to address
owner(address) := TMP_119(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 95.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 95.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 95.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 95.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_135 = UnaryType.BANG paused 
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 95.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_137(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 95.sol-PausableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_account != 0)

IRs:
TMP_188(bool) = _account != 0
TMP_189(None) = SOLIDITY_CALL require(bool)(TMP_188)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_account] > _amount)

IRs:
REF_162(uint256) -> balances[_account]
TMP_190(bool) = REF_162 > _amount
TMP_191(None) = SOLIDITY_CALL require(bool)(TMP_190)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_amount)

IRs:
TMP_192(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_192(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_account] = balances[_account].sub(_amount)

IRs:
REF_164(uint256) -> balances[_account]
REF_165(uint256) -> balances[_account]
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_165', '_amount'] 
REF_164(uint256) (->balances) := TMP_193(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_account,address(0),_amount)

IRs:
TMP_194 = CONVERT 0 to address
Emit Transfer(_account,TMP_194,_amount)"];
}
// Function: 95.sol-PausableToken-_burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowed[_account][msg.sender] > _amount)

IRs:
REF_167(mapping(address => uint256)) -> allowed[_account]
REF_168(uint256) -> REF_167[msg.sender]
TMP_196(bool) = REF_168 > _amount
TMP_197(None) = SOLIDITY_CALL require(bool)(TMP_196)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_amount)

IRs:
REF_169(mapping(address => uint256)) -> allowed[_account]
REF_170(uint256) -> REF_169[msg.sender]
REF_171(mapping(address => uint256)) -> allowed[_account]
REF_172(uint256) -> REF_171[msg.sender]
TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_172', '_amount'] 
REF_170(uint256) (->allowed) := TMP_198(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(_account,_amount)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(_account,_amount)"];
}
// Function: 95.sol-PausableToken-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_account != 0)

IRs:
TMP_182(bool) = _account != 0
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_184(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_184(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_account] = balances[_account].add(_amount)

IRs:
REF_159(uint256) -> balances[_account]
REF_160(uint256) -> balances[_account]
TMP_185(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_160', '_amount'] 
REF_159(uint256) (->balances) := TMP_185(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_account,_amount)

IRs:
TMP_186 = CONVERT 0 to address
Emit Transfer(TMP_186,_account,_amount)"];
}
// Function: 95.sol-PausableToken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_149 = CONVERT 0 to address
TMP_150(bool) = _newOwner != TMP_149
TMP_151(None) = SOLIDITY_CALL require(bool)(TMP_150)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 95.sol-PausableToken-allowance(address,address)
digraph{
}
// Function: 95.sol-PausableToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.approve(_spender,_value)

IRs:
TMP_204(bool) = INTERNAL_CALL, StandardToken.approve(address,uint256)(_spender,_value)
RETURN TMP_204"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 95.sol-PausableToken-balanceOf(address)
digraph{
}
// Function: 95.sol-PausableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 95.sol-PausableToken-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burnFrom(_from,_value)

IRs:
INTERNAL_CALL, StandardToken._burnFrom(address,uint256)(_from,_value)"];
}
// Function: 95.sol-PausableToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 95.sol-PausableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.decreaseApproval(_spender,_subtractedValue)

IRs:
TMP_208(bool) = INTERNAL_CALL, StandardToken.decreaseApproval(address,uint256)(_spender,_subtractedValue)
RETURN TMP_208"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 95.sol-PausableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.increaseApproval(_spender,_addedValue)

IRs:
TMP_206(bool) = INTERNAL_CALL, StandardToken.increaseApproval(address,uint256)(_spender,_addedValue)
RETURN TMP_206"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 95.sol-PausableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_213(bool) = msg.sender == owner
TMP_214(None) = SOLIDITY_CALL require(bool)(TMP_213)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 95.sol-PausableToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 95.sol-PausableToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_145 = CONVERT 0 to address
owner(address) := TMP_145(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 95.sol-PausableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 95.sol-PausableToken-totalSupply()
digraph{
}
// Function: 95.sol-PausableToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_200(bool) = INTERNAL_CALL, StandardToken.transfer(address,uint256)(_to,_value)
RETURN TMP_200"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 95.sol-PausableToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_202(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_202"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 95.sol-PausableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 95.sol-PausableToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 95.sol-PausableToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_210 = UnaryType.BANG paused 
TMP_211(None) = SOLIDITY_CALL require(bool)(TMP_210)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 95.sol-PausableToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_212(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 95.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = _a + _b

IRs:
TMP_11(uint256) = _a + _b
c(uint256) := TMP_11(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= _a)

IRs:
TMP_12(bool) = c >= _a
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 95.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_b > 0)

IRs:
TMP_5(bool) = _b > 0
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = _a / _b

IRs:
TMP_7(uint256) = _a / _b
c(uint256) := TMP_7(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 95.sol-SafeMath-mod(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b != 0)

IRs:
TMP_14(bool) = b != 0
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a % b

IRs:
TMP_16(uint256) = a % b
RETURN TMP_16"];
}
// Function: 95.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_0(bool) = _a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = _a * _b

IRs:
TMP_1(uint256) = _a * _b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(c / _a == _b)

IRs:
TMP_2(uint256) = c / _a
TMP_3(bool) = TMP_2 == _b
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 95.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_b <= _a)

IRs:
TMP_8(bool) = _b <= _a
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = _a - _b

IRs:
TMP_10(uint256) = _a - _b
c(uint256) := TMP_10(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 95.sol-StandardToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_account != 0)

IRs:
TMP_48(bool) = _account != 0
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_account] > _amount)

IRs:
REF_46(uint256) -> balances[_account]
TMP_50(bool) = REF_46 > _amount
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_amount)

IRs:
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_52(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_account] = balances[_account].sub(_amount)

IRs:
REF_48(uint256) -> balances[_account]
REF_49(uint256) -> balances[_account]
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_49', '_amount'] 
REF_48(uint256) (->balances) := TMP_53(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_account,address(0),_amount)

IRs:
TMP_54 = CONVERT 0 to address
Emit Transfer(_account,TMP_54,_amount)"];
}
// Function: 95.sol-StandardToken-_burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowed[_account][msg.sender] > _amount)

IRs:
REF_51(mapping(address => uint256)) -> allowed[_account]
REF_52(uint256) -> REF_51[msg.sender]
TMP_56(bool) = REF_52 > _amount
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_amount)

IRs:
REF_53(mapping(address => uint256)) -> allowed[_account]
REF_54(uint256) -> REF_53[msg.sender]
REF_55(mapping(address => uint256)) -> allowed[_account]
REF_56(uint256) -> REF_55[msg.sender]
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_56', '_amount'] 
REF_54(uint256) (->allowed) := TMP_58(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(_account,_amount)

IRs:
INTERNAL_CALL, StandardToken._burn(address,uint256)(_account,_amount)"];
}
// Function: 95.sol-StandardToken-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_account != 0)

IRs:
TMP_42(bool) = _account != 0
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_44(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_44(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_account] = balances[_account].add(_amount)

IRs:
REF_43(uint256) -> balances[_account]
REF_44(uint256) -> balances[_account]
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_44', '_amount'] 
REF_43(uint256) (->balances) := TMP_45(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_account,_amount)

IRs:
TMP_46 = CONVERT 0 to address
Emit Transfer(TMP_46,_account,_amount)"];
}
// Function: 95.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_1(mapping(address => uint256)) -> allowed[_owner]
REF_2(uint256) -> REF_1[_spender]
RETURN REF_2"];
}
// Function: 95.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_10(mapping(address => uint256)) -> allowed[msg.sender]
REF_11(uint256) -> REF_10[_spender]
REF_11(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 95.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
}
// Function: 95.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_33(mapping(address => uint256)) -> allowed[msg.sender]
REF_34(uint256) -> REF_33[_spender]
oldValue(uint256) := REF_34(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_39(bool) = _subtractedValue >= oldValue
CONDITION TMP_39"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_35(mapping(address => uint256)) -> allowed[msg.sender]
REF_36(uint256) -> REF_35[_spender]
REF_36(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_37(mapping(address => uint256)) -> allowed[msg.sender]
REF_38(uint256) -> REF_37[_spender]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_38(uint256) (->allowed) := TMP_40(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_40(mapping(address => uint256)) -> allowed[msg.sender]
REF_41(uint256) -> REF_40[_spender]
Emit Approval(msg.sender,_spender,REF_41)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 95.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_26(mapping(address => uint256)) -> allowed[msg.sender]
REF_27(uint256) -> REF_26[_spender]
REF_28(mapping(address => uint256)) -> allowed[msg.sender]
REF_29(uint256) -> REF_28[_spender]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_29', '_addedValue'] 
REF_27(uint256) (->allowed) := TMP_37(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
Emit Approval(msg.sender,_spender,REF_32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 95.sol-StandardToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 95.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_3(uint256) -> balances[msg.sender]
TMP_17(bool) = _value <= REF_3
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = _to != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_4(uint256) -> balances[msg.sender]
REF_5(uint256) -> balances[msg.sender]
TMP_22(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_22(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_7(uint256) -> balances[_to]
REF_8(uint256) -> balances[_to]
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', '_value'] 
REF_7(uint256) (->balances) := TMP_23(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 95.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_12(uint256) -> balances[_from]
TMP_26(bool) = _value <= REF_12
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_13(mapping(address => uint256)) -> allowed[_from]
REF_14(uint256) -> REF_13[msg.sender]
TMP_28(bool) = _value <= REF_14
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_30 = CONVERT 0 to address
TMP_31(bool) = _to != TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_15(uint256) -> balances[_from]
REF_16(uint256) -> balances[_from]
TMP_33(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_16', '_value'] 
REF_15(uint256) (->balances) := TMP_33(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_18(uint256) -> balances[_to]
REF_19(uint256) -> balances[_to]
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_19', '_value'] 
REF_18(uint256) (->balances) := TMP_34(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_21(mapping(address => uint256)) -> allowed[_from]
REF_22(uint256) -> REF_21[msg.sender]
REF_23(mapping(address => uint256)) -> allowed[_from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_24', '_value'] 
REF_22(uint256) (->allowed) := TMP_35(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
