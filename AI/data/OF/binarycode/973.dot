digraph G {
// Function: 973.sol-AddressUtils-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
size > 0

IRs:
TMP_12(bool) = size > 0
RETURN TMP_12"];
}
// Function: 973.sol-AviationSecurityToken-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allTokens.push(_id)

IRs:
REF_79 -> LENGTH allTokens
TMP_217(uint256) := REF_79(uint256)
TMP_218(uint256) = TMP_217 + 1
REF_79(uint256) (->allTokens) := TMP_218(uint256)
REF_80(uint256) -> allTokens[TMP_217]
REF_80(uint256) (->allTokens) := _id(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allTokensIndex[_id] = _id

IRs:
REF_81(uint256) -> allTokensIndex[_id]
REF_81(uint256) (->allTokensIndex) := _id(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
super._mint(_to,_id)

IRs:
INTERNAL_CALL, ERC721BasicToken._mint(address,uint256)(_to,_id)"];
}
// Function: 973.sol-AviationSecurityToken-_registerInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_interfaceId != 0xffffffff)

IRs:
TMP_193(bool) = _interfaceId != 4294967295
TMP_194(None) = SOLIDITY_CALL require(bool)(TMP_193)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
supportedInterfaces[_interfaceId] = true

IRs:
REF_49(bool) -> supportedInterfaces[_interfaceId]
REF_49(bool) (->supportedInterfaces) := True(bool)"];
}
// Function: 973.sol-AviationSecurityToken-_setTokenURI(uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_207(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_208(None) = SOLIDITY_CALL require(bool)(TMP_207)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenURIs[_tokenId] = _uri

IRs:
REF_56(string) -> tokenURIs[_tokenId]
REF_56(string) (->tokenURIs) := _uri(string)"];
}
// Function: 973.sol-AviationSecurityToken-addTokenData(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_220(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_221(bool) = TMP_220 == msg.sender
TMP_222(None) = SOLIDITY_CALL require(bool)(TMP_221)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenData[_tokenId].liscence = _liscence

IRs:
REF_82(AviationSecurityToken.Data) -> tokenData[_tokenId]
REF_83(string) -> REF_82.liscence
REF_83(string) (->tokenData) := _liscence(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenData[_tokenId].URL = _URL

IRs:
REF_84(AviationSecurityToken.Data) -> tokenData[_tokenId]
REF_85(string) -> REF_84.URL
REF_85(string) (->tokenData) := _URL(string)"];
}
// Function: 973.sol-AviationSecurityToken-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
length = ownedTokens[_to].length

IRs:
REF_57(uint256[]) -> ownedTokens[_to]
REF_58 -> LENGTH REF_57
length(uint256) := REF_58(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokens[_to].push(_tokenId)

IRs:
REF_59(uint256[]) -> ownedTokens[_to]
REF_61 -> LENGTH REF_59
TMP_211(uint256) := REF_61(uint256)
TMP_212(uint256) = TMP_211 + 1
REF_61(uint256) (->ownedTokens) := TMP_212(uint256)
REF_62(uint256) -> REF_59[TMP_211]
REF_62(uint256) (->ownedTokens) := _tokenId(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownedTokensIndex[_tokenId] = length

IRs:
REF_63(uint256) -> ownedTokensIndex[_tokenId]
REF_63(uint256) (->ownedTokensIndex) := length(uint256)"];
}
// Function: 973.sol-AviationSecurityToken-approve(address,uint256)
digraph{
}
// Function: 973.sol-AviationSecurityToken-arrayOfTokensByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownedTokens[_holder]

IRs:
REF_50(uint256[]) -> ownedTokens[_holder]
RETURN REF_50"];
}
// Function: 973.sol-AviationSecurityToken-balanceOf(address)
digraph{
}
// Function: 973.sol-AviationSecurityToken-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_234(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_235(None) = SOLIDITY_CALL require(bool)(TMP_234)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 973.sol-AviationSecurityToken-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_187(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_188 = UnaryType.BANG TMP_187 
CONDITION TMP_188"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(_from,_tokenId,_data)

IRs:
TMP_189 = CONVERT _to to ERC721Receiver
TMP_190(bytes4) = HIGH_LEVEL_CALL, dest:TMP_189(ERC721Receiver), function:onERC721Received, arguments:['_from', '_tokenId', '_data']  
retval(bytes4) := TMP_190(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_191(bool) = retval == ERC721_RECEIVED
RETURN TMP_191"];
}
// Function: 973.sol-AviationSecurityToken-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_113 = CONVERT 0 to address
pendingOwner(address) := TMP_113(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Ownable.onlyPendingOwner()()"];
4->1;
}
// Function: 973.sol-AviationSecurityToken-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_170(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_171(bool) = TMP_170 == _owner
TMP_172(None) = SOLIDITY_CALL require(bool)(TMP_171)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_35(address) -> tokenApprovals[_tokenId]
TMP_173 = CONVERT 0 to address
TMP_174(bool) = REF_35 != TMP_173
CONDITION TMP_174"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_36(address) -> tokenApprovals[_tokenId]
TMP_175 = CONVERT 0 to address
REF_36(address) (->tokenApprovals) := TMP_175(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(_owner,address(0),_tokenId)

IRs:
TMP_176 = CONVERT 0 to address
Emit Approval(_owner,TMP_176,_tokenId)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 973.sol-AviationSecurityToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_registerInterface(InterfaceId_ERC721Enumerable)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721Enumerable)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_registerInterface(InterfaceId_ERC721Metadata)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721Metadata)"];
}
// Function: 973.sol-AviationSecurityToken-exists(uint256)
digraph{
}
// Function: 973.sol-AviationSecurityToken-getApproved(uint256)
digraph{
}
// Function: 973.sol-AviationSecurityToken-getTokenData(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_223(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_224(None) = SOLIDITY_CALL require(bool)(TMP_223)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Liscence = tokenData[_tokenId].liscence

IRs:
REF_86(AviationSecurityToken.Data) -> tokenData[_tokenId]
REF_87(string) -> REF_86.liscence
Liscence(string) := REF_87(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
URL = tokenData[_tokenId].URL

IRs:
REF_88(AviationSecurityToken.Data) -> tokenData[_tokenId]
REF_89(string) -> REF_88.URL
URL(string) := REF_89(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(Liscence,URL)

IRs:
RETURN Liscence,URL"];
}
// Function: 973.sol-AviationSecurityToken-isApprovedForAll(address,address)
digraph{
}
// Function: 973.sol-AviationSecurityToken-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_157(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_157(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_158(bool) = _spender == owner
TMP_159(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_160(bool) = TMP_159 == _spender
TMP_161(bool) = TMP_158 || TMP_160
TMP_162(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_163(bool) = TMP_161 || TMP_162
RETURN TMP_163"];
}
// Function: 973.sol-AviationSecurityToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_mint(_to,_id)

IRs:
INTERNAL_CALL, AviationSecurityToken._mint(address,uint256)(_to,_id)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyManager()

IRs:
MODIFIER_CALL, Ownable.onlyManager()()"];
2->1;
}
// Function: 973.sol-AviationSecurityToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name_

IRs:
RETURN name_"];
}
// Function: 973.sol-AviationSecurityToken-onlyManager()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == manager)

IRs:
TMP_227(bool) = msg.sender == manager
TMP_228(None) = SOLIDITY_CALL require(bool)(TMP_227)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 973.sol-AviationSecurityToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_225(bool) = msg.sender == owner
TMP_226(None) = SOLIDITY_CALL require(bool)(TMP_225)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 973.sol-AviationSecurityToken-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_231(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_232(bool) = TMP_231 == msg.sender
TMP_233(None) = SOLIDITY_CALL require(bool)(TMP_232)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 973.sol-AviationSecurityToken-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_229(bool) = msg.sender == pendingOwner
TMP_230(None) = SOLIDITY_CALL require(bool)(TMP_229)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 973.sol-AviationSecurityToken-ownerOf(uint256)
digraph{
}
// Function: 973.sol-AviationSecurityToken-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_from,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIndex = ownedTokensIndex[_tokenId]

IRs:
REF_64(uint256) -> ownedTokensIndex[_tokenId]
tokenIndex(uint256) := REF_64(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastTokenIndex = ownedTokens[_from].length.sub(1)

IRs:
REF_65(uint256[]) -> ownedTokens[_from]
REF_66 -> LENGTH REF_65
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_66', '1'] 
lastTokenIndex(uint256) := TMP_214(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lastToken = ownedTokens[_from][lastTokenIndex]

IRs:
REF_68(uint256[]) -> ownedTokens[_from]
REF_69(uint256) -> REF_68[lastTokenIndex]
lastToken(uint256) := REF_69(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownedTokens[_from][tokenIndex] = lastToken

IRs:
REF_70(uint256[]) -> ownedTokens[_from]
REF_71(uint256) -> REF_70[tokenIndex]
REF_71(uint256) (->ownedTokens) := lastToken(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownedTokens[_from][lastTokenIndex] = 0

IRs:
REF_72(uint256[]) -> ownedTokens[_from]
REF_73(uint256) -> REF_72[lastTokenIndex]
REF_73(uint256) (->ownedTokens) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownedTokens[_from].length --

IRs:
REF_74(uint256[]) -> ownedTokens[_from]
REF_75 -> LENGTH REF_74
TMP_215(uint256) := REF_75(uint256)
REF_75(-> ownedTokens) = REF_75 - 1"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownedTokensIndex[_tokenId] = 0

IRs:
REF_76(uint256) -> ownedTokensIndex[_tokenId]
REF_76(uint256) (->ownedTokensIndex) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownedTokensIndex[lastToken] = tokenIndex

IRs:
REF_77(uint256) -> ownedTokensIndex[lastToken]
REF_77(uint256) (->ownedTokensIndex) := tokenIndex(uint256)"];
}
// Function: 973.sol-AviationSecurityToken-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 973.sol-AviationSecurityToken-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 973.sol-AviationSecurityToken-setApprovalForAll(address,bool)
digraph{
}
// Function: 973.sol-AviationSecurityToken-setManager(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_manager != address(0))

IRs:
TMP_115 = CONVERT 0 to address
TMP_116(bool) = _manager != TMP_115
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
manager = _manager

IRs:
manager(address) := _manager(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 973.sol-AviationSecurityToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC165 = 0x01ffc9a7

IRs:
InterfaceId_ERC165(bytes4) := 33540519(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
InterfaceId_ERC721Enumerable = 0x780e9d63

IRs:
InterfaceId_ERC721Enumerable(bytes4) := 2014223715(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
InterfaceId_ERC721Metadata = 0x5b5e139f

IRs:
InterfaceId_ERC721Metadata(bytes4) := 1532892063(uint256)"];
}
// Function: 973.sol-AviationSecurityToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name_ = AviationSecurityToken

IRs:
name_(string) := AviationSecurityToken(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol_ = AVNS

IRs:
symbol_(string) := AVNS(string)"];
}
// Function: 973.sol-AviationSecurityToken-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supportedInterfaces[_interfaceId]

IRs:
REF_48(bool) -> supportedInterfaces[_interfaceId]
RETURN REF_48"];
}
// Function: 973.sol-AviationSecurityToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol_

IRs:
RETURN symbol_"];
}
// Function: 973.sol-AviationSecurityToken-tokenByIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < totalSupply())

IRs:
TMP_204(uint256) = INTERNAL_CALL, AviationSecurityToken.totalSupply()()
TMP_205(bool) = _index < TMP_204
TMP_206(None) = SOLIDITY_CALL require(bool)(TMP_205)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
allTokens[_index]

IRs:
REF_55(uint256) -> allTokens[_index]
RETURN REF_55"];
}
// Function: 973.sol-AviationSecurityToken-tokenOfOwnerByIndex(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < balanceOf(_owner))

IRs:
TMP_201(uint256) = INTERNAL_CALL, ERC721BasicToken.balanceOf(address)(_owner)
TMP_202(bool) = _index < TMP_201
TMP_203(None) = SOLIDITY_CALL require(bool)(TMP_202)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokens[_owner][_index]

IRs:
REF_52(uint256[]) -> ownedTokens[_owner]
REF_53(uint256) -> REF_52[_index]
RETURN REF_53"];
}
// Function: 973.sol-AviationSecurityToken-tokenURI(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_199(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_200(None) = SOLIDITY_CALL require(bool)(TMP_199)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tokenURIs[_tokenId]

IRs:
REF_51(string) -> tokenURIs[_tokenId]
RETURN REF_51"];
}
// Function: 973.sol-AviationSecurityToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allTokens.length

IRs:
REF_54 -> LENGTH allTokens
RETURN REF_54"];
}
// Function: 973.sol-AviationSecurityToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 973.sol-AviationSecurityToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pendingOwner = newOwner

IRs:
pendingOwner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 973.sol-ERC165-supportsInterface(bytes4)
digraph{
}
// Function: 973.sol-ERC721-approve(address,uint256)
digraph{
}
// Function: 973.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 973.sol-ERC721-exists(uint256)
digraph{
}
// Function: 973.sol-ERC721-getApproved(uint256)
digraph{
}
// Function: 973.sol-ERC721-isApprovedForAll(address,address)
digraph{
}
// Function: 973.sol-ERC721-name()
digraph{
}
// Function: 973.sol-ERC721-ownerOf(uint256)
digraph{
}
// Function: 973.sol-ERC721-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 973.sol-ERC721-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 973.sol-ERC721-setApprovalForAll(address,bool)
digraph{
}
// Function: 973.sol-ERC721-supportsInterface(bytes4)
digraph{
}
// Function: 973.sol-ERC721-symbol()
digraph{
}
// Function: 973.sol-ERC721-tokenByIndex(uint256)
digraph{
}
// Function: 973.sol-ERC721-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 973.sol-ERC721-tokenURI(uint256)
digraph{
}
// Function: 973.sol-ERC721-totalSupply()
digraph{
}
// Function: 973.sol-ERC721-transferFrom(address,address,uint256)
digraph{
}
// Function: 973.sol-ERC721Basic-approve(address,uint256)
digraph{
}
// Function: 973.sol-ERC721Basic-balanceOf(address)
digraph{
}
// Function: 973.sol-ERC721Basic-exists(uint256)
digraph{
}
// Function: 973.sol-ERC721Basic-getApproved(uint256)
digraph{
}
// Function: 973.sol-ERC721Basic-isApprovedForAll(address,address)
digraph{
}
// Function: 973.sol-ERC721Basic-ownerOf(uint256)
digraph{
}
// Function: 973.sol-ERC721Basic-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 973.sol-ERC721Basic-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 973.sol-ERC721Basic-setApprovalForAll(address,bool)
digraph{
}
// Function: 973.sol-ERC721Basic-supportsInterface(bytes4)
digraph{
}
// Function: 973.sol-ERC721Basic-transferFrom(address,address,uint256)
digraph{
}
// Function: 973.sol-ERC721BasicToken-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_64 = CONVERT 0 to address
TMP_65(bool) = _to != TMP_64
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_68 = CONVERT 0 to address
Emit Transfer(TMP_68,_to,_tokenId)"];
}
// Function: 973.sol-ERC721BasicToken-_registerInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_interfaceId != 0xffffffff)

IRs:
TMP_17(bool) = _interfaceId != 4294967295
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
supportedInterfaces[_interfaceId] = true

IRs:
REF_3(bool) -> supportedInterfaces[_interfaceId]
REF_3(bool) (->supportedInterfaces) := True(bool)"];
}
// Function: 973.sol-ERC721BasicToken-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_15(address) -> tokenOwner[_tokenId]
TMP_78 = CONVERT 0 to address
TMP_79(bool) = REF_15 == TMP_78
TMP_80(None) = SOLIDITY_CALL require(bool)(TMP_79)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_16(address) -> tokenOwner[_tokenId]
REF_16(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_17(uint256) -> ownedTokensCount[_to]
REF_18(uint256) -> ownedTokensCount[_to]
TMP_81(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_18', '1'] 
REF_17(uint256) (->ownedTokensCount) := TMP_81(uint256)"];
}
// Function: 973.sol-ERC721BasicToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_29(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_29(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != owner)

IRs:
TMP_30(bool) = _to != owner
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == owner || isApprovedForAll(owner,msg.sender))

IRs:
TMP_32(bool) = msg.sender == owner
TMP_33(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,msg.sender)
TMP_34(bool) = TMP_32 || TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenApprovals[_tokenId] = _to

IRs:
REF_7(address) -> tokenApprovals[_tokenId]
REF_7(address) (->tokenApprovals) := _to(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(owner,_to,_tokenId)

IRs:
Emit Approval(owner,_to,_tokenId)"];
}
// Function: 973.sol-ERC721BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_21 = CONVERT 0 to address
TMP_22(bool) = _owner != TMP_21
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokensCount[_owner]

IRs:
REF_4(uint256) -> ownedTokensCount[_owner]
RETURN REF_4"];
}
// Function: 973.sol-ERC721BasicToken-canTransfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isApprovedOrOwner(msg.sender,_tokenId))

IRs:
TMP_95(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedOrOwner(address,uint256)(msg.sender,_tokenId)
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 973.sol-ERC721BasicToken-checkAndCallSafeTransfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _to.isContract()

IRs:
TMP_87(bool) = LIBRARY_CALL, dest:AddressUtils, function:AddressUtils.isContract(address), arguments:['_to'] 
TMP_88 = UnaryType.BANG TMP_87 
CONDITION TMP_88"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
retval = ERC721Receiver(_to).onERC721Received(_from,_tokenId,_data)

IRs:
TMP_89 = CONVERT _to to ERC721Receiver
TMP_90(bytes4) = HIGH_LEVEL_CALL, dest:TMP_89(ERC721Receiver), function:onERC721Received, arguments:['_from', '_tokenId', '_data']  
retval(bytes4) := TMP_90(bytes4)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(retval == ERC721_RECEIVED)

IRs:
TMP_91(bool) = retval == ERC721_RECEIVED
RETURN TMP_91"];
}
// Function: 973.sol-ERC721BasicToken-clearApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _owner)

IRs:
TMP_70(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_71(bool) = TMP_70 == _owner
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenApprovals[_tokenId] != address(0)

IRs:
REF_13(address) -> tokenApprovals[_tokenId]
TMP_73 = CONVERT 0 to address
TMP_74(bool) = REF_13 != TMP_73
CONDITION TMP_74"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenApprovals[_tokenId] = address(0)

IRs:
REF_14(address) -> tokenApprovals[_tokenId]
TMP_75 = CONVERT 0 to address
REF_14(address) (->tokenApprovals) := TMP_75(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(_owner,address(0),_tokenId)

IRs:
TMP_76 = CONVERT 0 to address
Emit Approval(_owner,TMP_76,_tokenId)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 973.sol-ERC721BasicToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_registerInterface(InterfaceId_ERC721)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_registerInterface(InterfaceId_ERC721Exists)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC721Exists)"];
}
// Function: 973.sol-ERC721BasicToken-exists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_6(address) -> tokenOwner[_tokenId]
owner(address) := REF_6(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
owner != address(0)

IRs:
TMP_27 = CONVERT 0 to address
TMP_28(bool) = owner != TMP_27
RETURN TMP_28"];
}
// Function: 973.sol-ERC721BasicToken-getApproved(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenApprovals[_tokenId]

IRs:
REF_8(address) -> tokenApprovals[_tokenId]
RETURN REF_8"];
}
// Function: 973.sol-ERC721BasicToken-isApprovedForAll(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
operatorApprovals[_owner][_operator]

IRs:
REF_11(mapping(address => bool)) -> operatorApprovals[_owner]
REF_12(bool) -> REF_11[_operator]
RETURN REF_12"];
}
// Function: 973.sol-ERC721BasicToken-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_57(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_57(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner,_spender))

IRs:
TMP_58(bool) = _spender == owner
TMP_59(address) = INTERNAL_CALL, ERC721BasicToken.getApproved(uint256)(_tokenId)
TMP_60(bool) = TMP_59 == _spender
TMP_61(bool) = TMP_58 || TMP_60
TMP_62(bool) = INTERNAL_CALL, ERC721BasicToken.isApprovedForAll(address,address)(owner,_spender)
TMP_63(bool) = TMP_61 || TMP_62
RETURN TMP_63"];
}
// Function: 973.sol-ERC721BasicToken-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_92(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_93(bool) = TMP_92 == msg.sender
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 973.sol-ERC721BasicToken-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_5(address) -> tokenOwner[_tokenId]
owner(address) := REF_5(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = owner != TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 973.sol-ERC721BasicToken-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_82(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_83(bool) = TMP_82 == _from
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_20(uint256) -> ownedTokensCount[_from]
REF_21(uint256) -> ownedTokensCount[_from]
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_21', '1'] 
REF_20(uint256) (->ownedTokensCount) := TMP_85(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_23(address) -> tokenOwner[_tokenId]
TMP_86 = CONVERT 0 to address
REF_23(address) (->tokenOwner) := TMP_86(address)"];
}
// Function: 973.sol-ERC721BasicToken-safeTransferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeTransferFrom(_from,_to,_tokenId,)

IRs:
INTERNAL_CALL, ERC721BasicToken.safeTransferFrom(address,address,uint256,bytes)(_from,_to,_tokenId,)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
2->1;
}
// Function: 973.sol-ERC721BasicToken-safeTransferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferFrom(_from,_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.transferFrom(address,address,uint256)(_from,_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(checkAndCallSafeTransfer(_from,_to,_tokenId,_data))

IRs:
TMP_54(bool) = INTERNAL_CALL, ERC721BasicToken.checkAndCallSafeTransfer(address,address,uint256,bytes)(_from,_to,_tokenId,_data)
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
3->1;
}
// Function: 973.sol-ERC721BasicToken-setApprovalForAll(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != msg.sender)

IRs:
TMP_37(bool) = _to != msg.sender
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operatorApprovals[msg.sender][_to] = _approved

IRs:
REF_9(mapping(address => bool)) -> operatorApprovals[msg.sender]
REF_10(bool) -> REF_9[_to]
REF_10(bool) (->operatorApprovals) := _approved(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApprovalForAll(msg.sender,_to,_approved)

IRs:
Emit ApprovalForAll(msg.sender,_to,_approved)"];
}
// Function: 973.sol-ERC721BasicToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC165 = 0x01ffc9a7

IRs:
InterfaceId_ERC165(bytes4) := 33540519(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
InterfaceId_ERC721 = 0x80ac58cd

IRs:
InterfaceId_ERC721(bytes4) := 2158778573(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
InterfaceId_ERC721Exists = 0x4f558e79

IRs:
InterfaceId_ERC721Exists(bytes4) := 1331007097(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 973.sol-ERC721BasicToken-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supportedInterfaces[_interfaceId]

IRs:
REF_2(bool) -> supportedInterfaces[_interfaceId]
RETURN REF_2"];
}
// Function: 973.sol-ERC721BasicToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_from != address(0))

IRs:
TMP_40 = CONVERT 0 to address
TMP_41(bool) = _from != TMP_40
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_43 = CONVERT 0 to address
TMP_44(bool) = _to != TMP_43
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
clearApproval(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.clearApproval(address,uint256)(_from,_tokenId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_from,_tokenId)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_tokenId)

IRs:
Emit Transfer(_from,_to,_tokenId)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canTransfer(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.canTransfer(uint256)(_tokenId)"];
7->1;
}
// Function: 973.sol-ERC721Enumerable-approve(address,uint256)
digraph{
}
// Function: 973.sol-ERC721Enumerable-balanceOf(address)
digraph{
}
// Function: 973.sol-ERC721Enumerable-exists(uint256)
digraph{
}
// Function: 973.sol-ERC721Enumerable-getApproved(uint256)
digraph{
}
// Function: 973.sol-ERC721Enumerable-isApprovedForAll(address,address)
digraph{
}
// Function: 973.sol-ERC721Enumerable-ownerOf(uint256)
digraph{
}
// Function: 973.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 973.sol-ERC721Enumerable-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 973.sol-ERC721Enumerable-setApprovalForAll(address,bool)
digraph{
}
// Function: 973.sol-ERC721Enumerable-supportsInterface(bytes4)
digraph{
}
// Function: 973.sol-ERC721Enumerable-tokenByIndex(uint256)
digraph{
}
// Function: 973.sol-ERC721Enumerable-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 973.sol-ERC721Enumerable-totalSupply()
digraph{
}
// Function: 973.sol-ERC721Enumerable-transferFrom(address,address,uint256)
digraph{
}
// Function: 973.sol-ERC721Holder-onERC721Received(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC721_RECEIVED

IRs:
RETURN ERC721_RECEIVED"];
}
// Function: 973.sol-ERC721Holder-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 973.sol-ERC721Metadata-approve(address,uint256)
digraph{
}
// Function: 973.sol-ERC721Metadata-balanceOf(address)
digraph{
}
// Function: 973.sol-ERC721Metadata-exists(uint256)
digraph{
}
// Function: 973.sol-ERC721Metadata-getApproved(uint256)
digraph{
}
// Function: 973.sol-ERC721Metadata-isApprovedForAll(address,address)
digraph{
}
// Function: 973.sol-ERC721Metadata-name()
digraph{
}
// Function: 973.sol-ERC721Metadata-ownerOf(uint256)
digraph{
}
// Function: 973.sol-ERC721Metadata-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 973.sol-ERC721Metadata-safeTransferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 973.sol-ERC721Metadata-setApprovalForAll(address,bool)
digraph{
}
// Function: 973.sol-ERC721Metadata-supportsInterface(bytes4)
digraph{
}
// Function: 973.sol-ERC721Metadata-symbol()
digraph{
}
// Function: 973.sol-ERC721Metadata-tokenURI(uint256)
digraph{
}
// Function: 973.sol-ERC721Metadata-transferFrom(address,address,uint256)
digraph{
}
// Function: 973.sol-ERC721Receiver-onERC721Received(address,uint256,bytes)
digraph{
}
// Function: 973.sol-ERC721Receiver-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0xf0b9e5ba

IRs:
ERC721_RECEIVED(bytes4) := 4038714810(uint256)"];
}
// Function: 973.sol-Ownable-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_99 = CONVERT 0 to address
pendingOwner(address) := TMP_99(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Ownable.onlyPendingOwner()()"];
4->1;
}
// Function: 973.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 973.sol-Ownable-onlyManager()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == manager)

IRs:
TMP_107(bool) = msg.sender == manager
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 973.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_105(bool) = msg.sender == owner
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 973.sol-Ownable-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_109(bool) = msg.sender == pendingOwner
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 973.sol-Ownable-setManager(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_manager != address(0))

IRs:
TMP_101 = CONVERT 0 to address
TMP_102(bool) = _manager != TMP_101
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
manager = _manager

IRs:
manager(address) := _manager(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 973.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pendingOwner = newOwner

IRs:
pendingOwner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 973.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 973.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 973.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 973.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 973.sol-SupportsInterfaceWithLookup-_registerInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_interfaceId != 0xffffffff)

IRs:
TMP_14(bool) = _interfaceId != 4294967295
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
supportedInterfaces[_interfaceId] = true

IRs:
REF_1(bool) -> supportedInterfaces[_interfaceId]
REF_1(bool) (->supportedInterfaces) := True(bool)"];
}
// Function: 973.sol-SupportsInterfaceWithLookup-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_registerInterface(InterfaceId_ERC165)

IRs:
INTERNAL_CALL, SupportsInterfaceWithLookup._registerInterface(bytes4)(InterfaceId_ERC165)"];
}
// Function: 973.sol-SupportsInterfaceWithLookup-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
InterfaceId_ERC165 = 0x01ffc9a7

IRs:
InterfaceId_ERC165(bytes4) := 33540519(uint256)"];
}
// Function: 973.sol-SupportsInterfaceWithLookup-supportsInterface(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supportedInterfaces[_interfaceId]

IRs:
REF_0(bool) -> supportedInterfaces[_interfaceId]
RETURN REF_0"];
}
}
