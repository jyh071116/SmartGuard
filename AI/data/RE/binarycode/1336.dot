digraph G {
// Function: 1336.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = _a + _b

IRs:
TMP_9(uint256) = _a + _b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= _a)

IRs:
TMP_10(bool) = c >= _a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1336.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_a / _b

IRs:
TMP_5(uint256) = _a / _b
RETURN TMP_5"];
}
// Function: 1336.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_0(bool) = _a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = _a * _b

IRs:
TMP_1(uint256) = _a * _b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / _a == _b)

IRs:
TMP_2(uint256) = c / _a
TMP_3(bool) = TMP_2 == _b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1336.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_b <= _a)

IRs:
TMP_6(bool) = _b <= _a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_a - _b

IRs:
TMP_8(uint256) = _a - _b
RETURN TMP_8"];
}
// Function: 1336.sol-TokenERC20-TokenERC20(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = initialSupply * 10 ** uint256(decimals)

IRs:
TMP_12 = CONVERT decimals to uint256
TMP_13(uint256) = 10 ** TMP_12
TMP_14(uint256) = initialSupply * TMP_13
totalSupply(uint256) := TMP_14(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] = totalSupply

IRs:
REF_0(uint256) -> balanceOf[msg.sender]
REF_0(uint256) (->balanceOf) := totalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
name = tokenName

IRs:
name(string) := tokenName(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = tokenSymbol

IRs:
symbol(string) := tokenSymbol(string)"];
}
// Function: 1336.sol-TokenERC20-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_15(bool) = _to != 0
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_1(uint256) -> balanceOf[_from]
TMP_17(bool) = REF_1 >= _value
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to].add(_value) > balanceOf[_to])

IRs:
REF_2(uint256) -> balanceOf[_to]
TMP_19(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_2', '_value'] 
REF_4(uint256) -> balanceOf[_to]
TMP_20(bool) = TMP_19 > REF_4
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balanceOf[_from].add(balanceOf[_to])

IRs:
REF_5(uint256) -> balanceOf[_from]
REF_7(uint256) -> balanceOf[_to]
TMP_22(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', 'REF_7'] 
previousBalances(uint256) := TMP_22(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_value)

IRs:
REF_8(uint256) -> balanceOf[_from]
REF_9(uint256) -> balanceOf[_from]
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_9', '_value'] 
REF_8(uint256) (->balanceOf) := TMP_23(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_value)

IRs:
REF_11(uint256) -> balanceOf[_to]
REF_12(uint256) -> balanceOf[_to]
TMP_24(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_12', '_value'] 
REF_11(uint256) (->balanceOf) := TMP_24(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(balanceOf[_from].add(balanceOf[_to]) == previousBalances)

IRs:
REF_14(uint256) -> balanceOf[_from]
REF_16(uint256) -> balanceOf[_to]
TMP_26(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_14', 'REF_16'] 
TMP_27(bool) = TMP_26 == previousBalances
TMP_28(None) = SOLIDITY_CALL assert(bool)(TMP_27)"];
}
// Function: 1336.sol-TokenERC20-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_26(mapping(address => uint256)) -> allowance[msg.sender]
REF_27(uint256) -> REF_26[_spender]
REF_27(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1336.sol-TokenERC20-approve(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spender != address(this))

IRs:
TMP_68 = CONVERT this to address
TMP_69(bool) = _spender != TMP_68
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_71(bool) = INTERNAL_CALL, TokenERC20.approve(address,uint256)(_spender,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_spender.call(_data))

IRs:
TMP_72(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['_data']  
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1336.sol-TokenERC20-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = tokenRecipient(_spender)

IRs:
TMP_38 = CONVERT _spender to tokenRecipient
spender(tokenRecipient) := TMP_38(tokenRecipient)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_39(bool) = INTERNAL_CALL, TokenERC20.approve(address,uint256)(_spender,_value)
CONDITION TMP_39"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spender.receiveApproval(msg.sender,_value,this,_extraData)

IRs:
HIGH_LEVEL_CALL, dest:spender(tokenRecipient), function:receiveApproval, arguments:['msg.sender', '_value', 'this', '_extraData']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1336.sol-TokenERC20-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_29(uint256) -> balanceOf[msg.sender]
TMP_41(bool) = REF_29 >= _value
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value)

IRs:
REF_30(uint256) -> balanceOf[msg.sender]
REF_31(uint256) -> balanceOf[msg.sender]
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_31', '_value'] 
REF_30(uint256) (->balanceOf) := TMP_43(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_44(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_44(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, TokenERC20.onlyOwner()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1336.sol-TokenERC20-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_34(uint256) -> balanceOf[_from]
TMP_47(bool) = REF_34 >= _value
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_35(mapping(address => uint256)) -> allowance[_from]
REF_36(uint256) -> REF_35[msg.sender]
TMP_49(bool) = _value <= REF_36
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_value)

IRs:
REF_37(uint256) -> balanceOf[_from]
REF_38(uint256) -> balanceOf[_from]
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_38', '_value'] 
REF_37(uint256) (->balanceOf) := TMP_51(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_40(mapping(address => uint256)) -> allowance[_from]
REF_41(uint256) -> REF_40[msg.sender]
REF_42(mapping(address => uint256)) -> allowance[_from]
REF_43(uint256) -> REF_42[msg.sender]
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_43', '_value'] 
REF_41(uint256) (->allowance) := TMP_52(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_53(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, TokenERC20.onlyOwner()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1336.sol-TokenERC20-freezeAccount(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozenAccount[target] = freeze

IRs:
REF_53(bool) -> frozenAccount[target]
REF_53(bool) (->frozenAccount) := freeze(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FrozenFunds(target,freeze)

IRs:
Emit FrozenFunds(target,freeze)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, TokenERC20.onlyOwner()()"];
3->1;
}
// Function: 1336.sol-TokenERC20-mintToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[target] = balanceOf[target].add(mintedAmount)

IRs:
REF_49(uint256) -> balanceOf[target]
REF_50(uint256) -> balanceOf[target]
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_50', 'mintedAmount'] 
REF_49(uint256) (->balanceOf) := TMP_75(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = totalSupply.add(mintedAmount)

IRs:
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', 'mintedAmount'] 
totalSupply(uint256) := TMP_76(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0,owner,mintedAmount)

IRs:
Emit Transfer(0,owner,mintedAmount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(owner,target,mintedAmount)

IRs:
Emit Transfer(owner,target,mintedAmount)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, TokenERC20.onlyOwner()()"];
5->1;
}
// Function: 1336.sol-TokenERC20-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_82(bool) = msg.sender == owner
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1336.sol-TokenERC20-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
}
// Function: 1336.sol-TokenERC20-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_17(bool) -> frozenAccount[msg.sender]
TMP_29 = UnaryType.BANG REF_17 
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, TokenERC20._transfer(address,address,uint256)(msg.sender,_to,_value)"];
}
// Function: 1336.sol-TokenERC20-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(this))

IRs:
TMP_56 = CONVERT this to address
TMP_57(bool) = _to != TMP_56
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transfer(_to,_value)

IRs:
INTERNAL_CALL, TokenERC20.transfer(address,uint256)(_to,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to.call(_data))

IRs:
TMP_60(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['_data']  
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1336.sol-TokenERC20-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_18(bool) -> frozenAccount[msg.sender]
TMP_32 = UnaryType.BANG REF_18 
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_19(mapping(address => uint256)) -> allowance[_from]
REF_20(uint256) -> REF_19[msg.sender]
TMP_34(bool) = _value <= REF_20
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_21(mapping(address => uint256)) -> allowance[_from]
REF_22(uint256) -> REF_21[msg.sender]
REF_23(mapping(address => uint256)) -> allowance[_from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_24', '_value'] 
REF_22(uint256) (->allowance) := TMP_36(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, TokenERC20._transfer(address,address,uint256)(_from,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1336.sol-TokenERC20-transferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(this))

IRs:
TMP_62 = CONVERT this to address
TMP_63(bool) = _to != TMP_62
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transferFrom(_from,_to,_value)

IRs:
TMP_65(bool) = INTERNAL_CALL, TokenERC20.transferFrom(address,address,uint256)(_from,_to,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to.call(_data))

IRs:
TMP_66(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['_data']  
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1336.sol-TokenERC20-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, TokenERC20.onlyOwner()()"];
2->1;
}
// Function: 1336.sol-tokenRecipient-receiveApproval(address,uint256,address,bytes)
digraph{
}
}
