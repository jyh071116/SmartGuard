digraph G {
// Function: 1690.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
}
// Function: 1690.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 1690.sol-BasicToken-transfer(address,uint256)
digraph{
}
// Function: 1690.sol-BurnableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_23(uint256) -> balances[_who]
REF_24(uint256) -> balances[_who]
TMP_46(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_24', '_value'] 
REF_23(uint256) (->balances) := TMP_46(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_47(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_49 = CONVERT 0 to address
Emit Transfer(_who,TMP_49,_value)"];
}
// Function: 1690.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 1690.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 1690.sol-BurnableToken-totalSupply()
digraph{
}
// Function: 1690.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 1690.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1690.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1690.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1690.sol-ERC20-totalSupply()
digraph{
}
// Function: 1690.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1690.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1690.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1690.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 1690.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1690.sol-ERC223Interface-transfer(address,uint256,bytes)
digraph{
}
// Function: 1690.sol-ERC223Receiver-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 1690.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1690.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1690.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1690.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1690.sol-Pausable-finalUnpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FinalUnpause()

IRs:
Emit FinalUnpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1690.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_40(bool) = msg.sender == owner
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1690.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! finalUnpaused)

IRs:
TMP_30 = UnaryType.BANG finalUnpaused 
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 1690.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
finalUnpaused = false

IRs:
finalUnpaused(bool) := False(bool)"];
}
// Function: 1690.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_25 = CONVERT 0 to address
TMP_26(bool) = _newOwner != TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1690.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1690.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_42 = UnaryType.BANG paused 
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1690.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_44(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1690.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1690.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 1690.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1690.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 1690.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_4(mapping(address => uint256)) -> allowed[_owner]
REF_5(uint256) -> REF_4[_spender]
RETURN REF_5"];
}
// Function: 1690.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_2(mapping(address => uint256)) -> allowed[msg.sender]
REF_3(uint256) -> REF_2[_spender]
REF_3(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1690.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 1690.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_13(mapping(address => uint256)) -> allowed[msg.sender]
REF_14(uint256) -> REF_13[_spender]
oldValue(uint256) := REF_14(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_22(bool) = _subtractedValue > oldValue
CONDITION TMP_22"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_15(mapping(address => uint256)) -> allowed[msg.sender]
REF_16(uint256) -> REF_15[_spender]
REF_16(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_17(mapping(address => uint256)) -> allowed[msg.sender]
REF_18(uint256) -> REF_17[_spender]
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_18(uint256) (->allowed) := TMP_23(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_20(mapping(address => uint256)) -> allowed[msg.sender]
REF_21(uint256) -> REF_20[_spender]
Emit Approval(msg.sender,_spender,REF_21)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1690.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_6(mapping(address => uint256)) -> allowed[msg.sender]
REF_7(uint256) -> REF_6[_spender]
REF_8(mapping(address => uint256)) -> allowed[msg.sender]
REF_9(uint256) -> REF_8[_spender]
TMP_20(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_9', '_addedValue'] 
REF_7(uint256) (->allowed) := TMP_20(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_11(mapping(address => uint256)) -> allowed[msg.sender]
REF_12(uint256) -> REF_11[_spender]
Emit Approval(msg.sender,_spender,REF_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1690.sol-StandardToken-totalSupply()
digraph{
}
// Function: 1690.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 1690.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1690.sol-TipcoinToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_27(uint256) -> balances[_who]
REF_28(uint256) -> balances[_who]
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_28', '_value'] 
REF_27(uint256) (->balances) := TMP_52(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_53(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_55 = CONVERT 0 to address
Emit Transfer(_who,TMP_55,_value)"];
}
// Function: 1690.sol-TipcoinToken-allowance(address,address)
digraph{
}
// Function: 1690.sol-TipcoinToken-approve(address,uint256)
digraph{
}
// Function: 1690.sol-TipcoinToken-balanceOf(address)
digraph{
}
// Function: 1690.sol-TipcoinToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 1690.sol-TipcoinToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = INITIAL_SUPPLY * 10 ** 18

IRs:
TMP_78(uint256) = 10 ** 18
TMP_79(uint256) = INITIAL_SUPPLY * TMP_78
totalSupply_(uint256) := TMP_79(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[owner] = totalSupply_

IRs:
REF_52(uint256) -> balances[owner]
REF_52(uint256) (->balances) := totalSupply_(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),owner,INITIAL_SUPPLY)

IRs:
TMP_80 = CONVERT 0 to address
Emit Transfer(TMP_80,owner,INITIAL_SUPPLY)"];
}
// Function: 1690.sol-TipcoinToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_43(mapping(address => uint256)) -> allowed[msg.sender]
REF_44(uint256) -> REF_43[_spender]
oldValue(uint256) := REF_44(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_75(bool) = _subtractedValue > oldValue
CONDITION TMP_75"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_45(mapping(address => uint256)) -> allowed[msg.sender]
REF_46(uint256) -> REF_45[_spender]
REF_46(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_47(mapping(address => uint256)) -> allowed[msg.sender]
REF_48(uint256) -> REF_47[_spender]
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_48(uint256) (->allowed) := TMP_76(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_50(mapping(address => uint256)) -> allowed[msg.sender]
REF_51(uint256) -> REF_50[_spender]
Emit Approval(msg.sender,_spender,REF_51)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1690.sol-TipcoinToken-finalUnpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FinalUnpause()

IRs:
Emit FinalUnpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1690.sol-TipcoinToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
REF_38(mapping(address => uint256)) -> allowed[msg.sender]
REF_39(uint256) -> REF_38[_spender]
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_39', '_addedValue'] 
REF_37(uint256) (->allowed) := TMP_73(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_41(mapping(address => uint256)) -> allowed[msg.sender]
REF_42(uint256) -> REF_41[_spender]
Emit Approval(msg.sender,_spender,REF_42)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1690.sol-TipcoinToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_116(bool) = length > 0
RETURN TMP_116"];
}
// Function: 1690.sol-TipcoinToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_134(bool) = msg.sender == owner
TMP_135(None) = SOLIDITY_CALL require(bool)(TMP_134)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1690.sol-TipcoinToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! finalUnpaused)

IRs:
TMP_57 = UnaryType.BANG finalUnpaused 
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 1690.sol-TipcoinToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Tipcoin

IRs:
name(string) := Tipcoin(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = TIPC

IRs:
symbol(string) := TIPC(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
INITIAL_SUPPLY = 1000000000

IRs:
INITIAL_SUPPLY(uint256) := 1000000000(uint256)"];
}
// Function: 1690.sol-TipcoinToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
finalUnpaused = false

IRs:
finalUnpaused(bool) := False(bool)"];
}
// Function: 1690.sol-TipcoinToken-totalSupply()
digraph{
}
// Function: 1690.sol-TipcoinToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_104(bool) = INTERNAL_CALL, TipcoinToken.isContract(address)(_to)
CONDITION TMP_104"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(msg.sender,_to,_value,empty)

IRs:
TMP_105(bool) = INTERNAL_CALL, TipcoinToken.transferToContract(address,address,uint256,bytes)(msg.sender,_to,_value,empty)
RETURN TMP_105"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(msg.sender,_to,_value,empty)

IRs:
TMP_106(bool) = INTERNAL_CALL, TipcoinToken.transferToAddress(address,address,uint256,bytes)(msg.sender,_to,_value,empty)
RETURN TMP_106"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
6->1;
}
// Function: 1690.sol-TipcoinToken-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_100(bool) = INTERNAL_CALL, TipcoinToken.isContract(address)(_to)
CONDITION TMP_100"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
transferToContract(msg.sender,_to,_value,_data)

IRs:
TMP_101(bool) = INTERNAL_CALL, TipcoinToken.transferToContract(address,address,uint256,bytes)(msg.sender,_to,_value,_data)
RETURN TMP_101"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToAddress(msg.sender,_to,_value,_data)

IRs:
TMP_102(bool) = INTERNAL_CALL, TipcoinToken.transferToAddress(address,address,uint256,bytes)(msg.sender,_to,_value,_data)
RETURN TMP_102"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 1690.sol-TipcoinToken-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_82 = CONVERT 0 to address
TMP_83(bool) = _to != TMP_82
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_85(bool) = INTERNAL_CALL, TipcoinToken.isContract(address)(_to)
CONDITION TMP_85"];
2->3[label="True"];
2->12[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_53(uint256) -> balances[msg.sender]
REF_54(uint256) -> balances[msg.sender]
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_54', '_value'] 
REF_53(uint256) (->balances) := TMP_86(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_56(uint256) -> balances[_to]
REF_57(uint256) -> balances[_to]
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_57', '_value'] 
REF_56(uint256) (->balances) := TMP_87(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(_to.call.value(0)(bytes4(keccak256()(abi.encodePacked(_fallback))),msg.sender,_value,_data))

IRs:
TMP_89(bytes) = SOLIDITY_CALL abi.encodePacked()(_fallback)
TMP_90(bytes32) = SOLIDITY_CALL keccak256()(TMP_89)
TMP_91 = CONVERT TMP_90 to bytes4
TMP_92(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['TMP_91', 'msg.sender', '_value', '_data'] value:0 
TMP_93(None) = SOLIDITY_CALL assert(bool)(TMP_92)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_data.length == 0

IRs:
REF_62 -> LENGTH _data
TMP_94(bool) = REF_62 == 0
CONDITION TMP_94"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
7->10;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: RETURN 12

EXPRESSION:
transferToAddress(msg.sender,_to,_value,_data)

IRs:
TMP_98(bool) = INTERNAL_CALL, TipcoinToken.transferToAddress(address,address,uint256,bytes)(msg.sender,_to,_value,_data)
RETURN TMP_98"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
14->1;
}
// Function: 1690.sol-TipcoinToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_108 = CONVERT 0 to address
TMP_109(bool) = _to != TMP_108
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_63(mapping(address => uint256)) -> allowed[_from]
REF_64(uint256) -> REF_63[msg.sender]
REF_65(mapping(address => uint256)) -> allowed[_from]
REF_66(uint256) -> REF_65[msg.sender]
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_66', '_value'] 
REF_64(uint256) (->allowed) := TMP_111(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
isContract(_to)

IRs:
TMP_112(bool) = INTERNAL_CALL, TipcoinToken.isContract(address)(_to)
CONDITION TMP_112"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
transferToContract(_from,_to,_value,empty)

IRs:
TMP_113(bool) = INTERNAL_CALL, TipcoinToken.transferToContract(address,address,uint256,bytes)(_from,_to,_value,empty)
RETURN TMP_113"];
6[label="Node Type: RETURN 6

EXPRESSION:
transferToAddress(_from,_to,_value,empty)

IRs:
TMP_114(bool) = INTERNAL_CALL, TipcoinToken.transferToAddress(address,address,uint256,bytes)(_from,_to,_value,empty)
RETURN TMP_114"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
8->1;
}
// Function: 1690.sol-TipcoinToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_67 = CONVERT 0 to address
TMP_68(bool) = _newOwner != TMP_67
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1690.sol-TipcoinToken-transferToAddress(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_68(uint256) -> balances[_from]
REF_69(uint256) -> balances[_from]
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_69', '_value'] 
REF_68(uint256) (->balances) := TMP_117(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_71(uint256) -> balances[_to]
REF_72(uint256) -> balances[_to]
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_72', '_value'] 
REF_71(uint256) (->balances) := TMP_118(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_data.length == 0

IRs:
REF_74 -> LENGTH _data
TMP_119(bool) = REF_74 == 0
CONDITION TMP_119"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
4->7;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value,_data)

IRs:
Emit Transfer(_from,_to,_value,_data)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1690.sol-TipcoinToken-transferToContract(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_75(uint256) -> balances[_from]
REF_76(uint256) -> balances[_from]
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_76', '_value'] 
REF_75(uint256) (->balances) := TMP_123(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_78(uint256) -> balances[_to]
REF_79(uint256) -> balances[_to]
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_79', '_value'] 
REF_78(uint256) (->balances) := TMP_124(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
receiver = ERC223Receiver(_to)

IRs:
TMP_125 = CONVERT _to to ERC223Receiver
receiver(ERC223Receiver) := TMP_125(ERC223Receiver)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
receiver.tokenFallback(_from,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ERC223Receiver), function:tokenFallback, arguments:['_from', '_value', '_data']  "];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_data.length == 0

IRs:
REF_82 -> LENGTH _data
TMP_127(bool) = REF_82 == 0
CONDITION TMP_127"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->9;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value,_data)

IRs:
Emit Transfer(_from,_to,_value,_data)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1690.sol-TipcoinToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1690.sol-TipcoinToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_131 = UnaryType.BANG paused 
TMP_132(None) = SOLIDITY_CALL require(bool)(TMP_131)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1690.sol-TipcoinToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_133(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
