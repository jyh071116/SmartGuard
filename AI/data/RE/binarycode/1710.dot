digraph G {
// Function: 1710.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1710.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1710.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1710.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1710.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1710.sol-MiddleSaleService-buyFST()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyFST0(msg.sender)

IRs:
INTERNAL_CALL, MiddleSaleService.buyFST0(address)(msg.sender)"];
}
// Function: 1710.sol-MiddleSaleService-buyFST(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyFST0(receiver)

IRs:
INTERNAL_CALL, MiddleSaleService.buyFST0(address)(receiver)"];
}
// Function: 1710.sol-MiddleSaleService-buyFST0(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(salesPipe.call.value(msg.value)())

IRs:
TMP_9(bool) = LOW_LEVEL_CALL, dest:salesPipe, function:call, arguments:[] value:msg.value 
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tmpERCBalance = erc.balanceOf(address(this))

IRs:
TMP_11 = CONVERT this to address
TMP_12(uint256) = HIGH_LEVEL_CALL, dest:erc(ERC20), function:balanceOf, arguments:['TMP_11']  
tmpERCBalance(uint256) := TMP_12(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
tmpEthBalance = address(this).balance

IRs:
TMP_13 = CONVERT this to address
TMP_14(uint256) = SOLIDITY_CALL balance(address)(TMP_13)
tmpEthBalance(uint256) := TMP_14(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
tmpERCBalance > 0

IRs:
TMP_15(bool) = tmpERCBalance > 0
CONDITION TMP_15"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(erc.transfer(receiver,tmpERCBalance))

IRs:
TMP_16(bool) = HIGH_LEVEL_CALL, dest:erc(ERC20), function:transfer, arguments:['receiver', 'tmpERCBalance']  
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
tmpEthBalance > 0

IRs:
TMP_18(bool) = tmpEthBalance > 0
CONDITION TMP_18"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(receiver.send(tmpEthBalance))

IRs:
TMP_19 = SEND dest:receiver value:tmpEthBalance
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
8->9;
9[label="Node Type: END_IF 9
"];
}
// Function: 1710.sol-MiddleSaleService-constructor(address,address,ERC20)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frontWindow = _frontWindow

IRs:
frontWindow(address) := _frontWindow(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
salesPipe = _salesPipe

IRs:
salesPipe(address) := _salesPipe(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
erc = _erc

IRs:
erc(ERC20) := _erc(ERC20)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1710.sol-MiddleSaleService-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyFST0(msg.sender)

IRs:
INTERNAL_CALL, MiddleSaleService.buyFST0(address)(msg.sender)"];
}
// Function: 1710.sol-MiddleSaleService-setERC(ERC20)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_4(bool) = msg.sender == owner
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
erc = _erc

IRs:
erc(ERC20) := _erc(ERC20)"];
}
// Function: 1710.sol-MiddleSaleService-setFrontWindow(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_0(bool) = msg.sender == owner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
frontWindow = _frontWindow

IRs:
frontWindow(address) := _frontWindow(address)"];
}
// Function: 1710.sol-MiddleSaleService-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_6(bool) = msg.sender == owner
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
}
// Function: 1710.sol-MiddleSaleService-setSalesPipe(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_2(bool) = msg.sender == owner
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
salesPipe = _salesPipe

IRs:
salesPipe(address) := _salesPipe(address)"];
}
}
