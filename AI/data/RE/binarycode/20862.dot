digraph G {
// Function: 20862.sol-AbstractPaymentEscrow-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20862.sol-AbstractPaymentEscrow-changeWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 20862.sol-AbstractPaymentEscrow-getDeposit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
deposits[_projectId]

IRs:
REF_0(uint256) -> deposits[_projectId]
RETURN REF_0"];
}
// Function: 20862.sol-AbstractPaymentEscrow-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_26(bool) = msg.sender == owner
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20862.sol-AbstractPaymentEscrow-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_20 = CONVERT 0 to address
TMP_21(bool) = newOwner != TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 20862.sol-AbstractPaymentEscrow-withdrawFunds()
digraph{
}
// Function: 20862.sol-AbstractSingularDTVFund-softWithdrawRewardFor(address)
digraph{
}
// Function: 20862.sol-AbstractSingularDTVToken-allowance(address,address)
digraph{
}
// Function: 20862.sol-AbstractSingularDTVToken-approve(address,uint256)
digraph{
}
// Function: 20862.sol-AbstractSingularDTVToken-balanceOf(address)
digraph{
}
// Function: 20862.sol-AbstractSingularDTVToken-transfer(address,uint256)
digraph{
}
// Function: 20862.sol-AbstractSingularDTVToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 20862.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20862.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_18(bool) = msg.sender == owner
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20862.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = newOwner != TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 20862.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 20862.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 20862.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 20862.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 20862.sol-SingularDTVFund-SingularDTVFund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20862.sol-SingularDTVFund-calcReward(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
singularDTVToken.balanceOf(forAddress) * (totalReward - rewardAtTimeOfWithdraw[forAddress]) / singularDTVToken.totalSupply()

IRs:
TMP_43(uint256) = HIGH_LEVEL_CALL, dest:singularDTVToken(AbstractSingularDTVToken), function:balanceOf, arguments:['forAddress']  
REF_34(uint256) -> rewardAtTimeOfWithdraw[forAddress]
TMP_44(uint256) = totalReward - REF_34
TMP_45(uint256) = TMP_43 * TMP_44
TMP_46(uint256) = HIGH_LEVEL_CALL, dest:singularDTVToken(AbstractSingularDTVToken), function:totalSupply, arguments:[]  
TMP_47(uint256) = TMP_45 / TMP_46
RETURN TMP_47"];
}
// Function: 20862.sol-SingularDTVFund-depositReward()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalReward += msg.value

IRs:
totalReward(uint256) = totalReward + msg.value"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 20862.sol-SingularDTVFund-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value == 0

IRs:
TMP_60(bool) = msg.value == 0
CONDITION TMP_60"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
withdrawReward()

IRs:
TMP_61(uint256) = INTERNAL_CALL, SingularDTVFund.withdrawReward()()"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
depositReward()

IRs:
TMP_62(bool) = INTERNAL_CALL, SingularDTVFund.depositReward()()"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 20862.sol-SingularDTVFund-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_63(bool) = msg.sender != owner
CONDITION TMP_63"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_64(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20862.sol-SingularDTVFund-setup(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
address(singularDTVToken) == 0

IRs:
TMP_56 = CONVERT singularDTVToken to address
TMP_57(bool) = TMP_56 == 0
CONDITION TMP_57"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
singularDTVToken = AbstractSingularDTVToken(singularDTVTokenAddress)

IRs:
TMP_58 = CONVERT singularDTVTokenAddress to AbstractSingularDTVToken
singularDTVToken(AbstractSingularDTVToken) := TMP_58(AbstractSingularDTVToken)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, SingularDTVFund.onlyOwner()()"];
6->1;
}
// Function: 20862.sol-SingularDTVFund-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = 0.1.0

IRs:
version(string) := 0.1.0(string)"];
}
// Function: 20862.sol-SingularDTVFund-softWithdrawRewardFor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
value = calcReward(forAddress)

IRs:
TMP_55(uint256) = INTERNAL_CALL, SingularDTVFund.calcReward(address)(forAddress)
value(uint256) := TMP_55(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rewardAtTimeOfWithdraw[forAddress] = totalReward

IRs:
REF_40(uint256) -> rewardAtTimeOfWithdraw[forAddress]
REF_40(uint256) (->rewardAtTimeOfWithdraw) := totalReward(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owed[forAddress] += value

IRs:
REF_41(uint256) -> owed[forAddress]
REF_41(-> owed) = REF_41 + value"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
value

IRs:
RETURN value"];
}
// Function: 20862.sol-SingularDTVFund-withdrawReward()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
value = calcReward(msg.sender) + owed[msg.sender]

IRs:
TMP_48(uint256) = INTERNAL_CALL, SingularDTVFund.calcReward(address)(msg.sender)
REF_36(uint256) -> owed[msg.sender]
TMP_49(uint256) = TMP_48 + REF_36
value(uint256) := TMP_49(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rewardAtTimeOfWithdraw[msg.sender] = totalReward

IRs:
REF_37(uint256) -> rewardAtTimeOfWithdraw[msg.sender]
REF_37(uint256) (->rewardAtTimeOfWithdraw) := totalReward(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owed[msg.sender] = 0

IRs:
REF_38(uint256) -> owed[msg.sender]
REF_38(uint256) (->owed) := 0(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
value > 0 && ! msg.sender.send(value)

IRs:
TMP_50(bool) = value > 0
TMP_51 = SEND dest:msg.sender value:value
TMP_52 = UnaryType.BANG TMP_51 
TMP_53(bool) = TMP_50 && TMP_52
CONDITION TMP_53"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_54(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
value

IRs:
RETURN value"];
}
// Function: 20862.sol-SingularDTVLaunch-SingularDTVLaunch(address,address,address,uint256,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
singularDTVToken = AbstractSingularDTVToken(singularDTVTokenAddress)

IRs:
TMP_143 = CONVERT singularDTVTokenAddress to AbstractSingularDTVToken
singularDTVToken(AbstractSingularDTVToken) := TMP_143(AbstractSingularDTVToken)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
workshop = _workshop

IRs:
workshop(address) := _workshop(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
CAP = _total

IRs:
CAP(uint256) := _total(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
valuePerToken = _unit_price

IRs:
valuePerToken(uint256) := _unit_price(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
DURATION = _duration

IRs:
DURATION(uint256) := _duration(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
TOKEN_TARGET = _threshold

IRs:
TOKEN_TARGET(uint256) := _threshold(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
SingularDTVWorkshopFee = _singulardtvwoskhop_fee

IRs:
SingularDTVWorkshopFee(uint256) := _singulardtvwoskhop_fee(uint256)"];
}
// Function: 20862.sol-SingularDTVLaunch-atStage(SingularDTVLaunch.Stages)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
stage != _stage

IRs:
TMP_153(bool) = stage != _stage
CONDITION TMP_153"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_154(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20862.sol-SingularDTVLaunch-atStageOR(SingularDTVLaunch.Stages,SingularDTVLaunch.Stages)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
stage != _stage1 && stage != _stage2

IRs:
TMP_155(bool) = stage != _stage1
TMP_156(bool) = stage != _stage2
TMP_157(bool) = TMP_155 && TMP_156
CONDITION TMP_157"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_158(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20862.sol-SingularDTVLaunch-changeValuePerToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
valuePerToken = valueInWei

IRs:
valuePerToken(uint256) := valueInWei(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, SingularDTVLaunch.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
atStage(Stages.Deployed)

IRs:
REF_70(SingularDTVLaunch.Stages) -> Stages.Deployed
MODIFIER_CALL, SingularDTVLaunch.atStage(SingularDTVLaunch.Stages)(REF_70)"];
4->1;
}
// Function: 20862.sol-SingularDTVLaunch-checkInvariants()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
fundBalance > this.balance

IRs:
REF_42(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_65(bool) = fundBalance > REF_42
CONDITION TMP_65"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_66(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 20862.sol-SingularDTVLaunch-emergencyCall()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
fundBalance > this.balance

IRs:
REF_43(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_67(bool) = fundBalance > REF_43
CONDITION TMP_67"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
this.balance > 0 && ! SingularDTVWorkshop.send(this.balance)

IRs:
REF_44(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_68(bool) = REF_44 > 0
REF_46(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_69 = SEND dest:SingularDTVWorkshop value:REF_46
TMP_70 = UnaryType.BANG TMP_69 
TMP_71(bool) = TMP_68 && TMP_70
CONDITION TMP_71"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_72(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 20862.sol-SingularDTVLaunch-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
stage == Stages.GoingAndGoalNotReached || stage == Stages.GoingAndGoalReached

IRs:
REF_74(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalNotReached
TMP_144(bool) = stage == REF_74
REF_75(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalReached
TMP_145(bool) = stage == REF_75
TMP_146(bool) = TMP_144 || TMP_145
CONDITION TMP_146"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fund()

IRs:
TMP_147(uint256) = INTERNAL_CALL, SingularDTVLaunch.fund()()"];
2->7;
3[label="Node Type: IF 3

EXPRESSION:
stage == Stages.EndedAndGoalNotReached

IRs:
REF_76(SingularDTVLaunch.Stages) -> Stages.EndedAndGoalNotReached
TMP_148(bool) = stage == REF_76
CONDITION TMP_148"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
withdrawContribution()

IRs:
TMP_149(uint256) = INTERNAL_CALL, SingularDTVLaunch.withdrawContribution()()"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_150(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 20862.sol-SingularDTVLaunch-fund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->30;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenCount = (msg.value * (10 ** 18)) / valuePerToken

IRs:
TMP_73(uint256) = 10 ** 18
TMP_74(uint256) = msg.value * TMP_73
TMP_75(uint256) = TMP_74 / valuePerToken
tokenCount(uint256) := TMP_75(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(tokenCount > 0)

IRs:
TMP_76(bool) = tokenCount > 0
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
tokensSent + tokenCount > CAP

IRs:
TMP_78(uint256) = tokensSent + tokenCount
TMP_79(bool) = TMP_78 > CAP
CONDITION TMP_79"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenCount = CAP - tokensSent

IRs:
TMP_80(uint256) = CAP - tokensSent
tokenCount(uint256) := TMP_80(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokensSent += tokenCount

IRs:
tokensSent(uint256) = tokensSent + tokenCount"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
contribution = (tokenCount * valuePerToken) / (10 ** 18)

IRs:
TMP_81(uint256) = tokenCount * valuePerToken
TMP_82(uint256) = 10 ** 18
TMP_83(uint256) = TMP_81 / TMP_82
contribution(uint256) := TMP_83(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
msg.value > contribution && ! msg.sender.send(msg.value - contribution)

IRs:
TMP_84(bool) = msg.value > contribution
TMP_85(uint256) = msg.value - contribution
TMP_86 = SEND dest:msg.sender value:TMP_85
TMP_87 = UnaryType.BANG TMP_86 
TMP_88(bool) = TMP_84 && TMP_87
CONDITION TMP_88"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
revert()()

IRs:
TMP_89(None) = SOLIDITY_CALL revert()()"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
fundBalance += contribution

IRs:
fundBalance(uint256) = fundBalance + contribution"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
contributions[msg.sender] += contribution

IRs:
REF_48(uint256) -> contributions[msg.sender]
REF_48(-> contributions) = REF_48 + contribution"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
sentTokens[msg.sender] += tokenCount

IRs:
REF_49(uint256) -> sentTokens[msg.sender]
REF_49(-> sentTokens) = REF_49 + tokenCount"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! singularDTVToken.transfer(msg.sender,tokenCount)

IRs:
TMP_90(bool) = HIGH_LEVEL_CALL, dest:singularDTVToken(AbstractSingularDTVToken), function:transfer, arguments:['msg.sender', 'tokenCount']  
TMP_91 = UnaryType.BANG TMP_90 
CONDITION TMP_91"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
revert()()

IRs:
TMP_92(None) = SOLIDITY_CALL revert()()"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
stage == Stages.GoingAndGoalNotReached

IRs:
REF_51(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalNotReached
TMP_93(bool) = stage == REF_51
CONDITION TMP_93"];
17->18[label="True"];
17->21[label="False"];
18[label="Node Type: IF 18

EXPRESSION:
tokensSent >= TOKEN_TARGET

IRs:
TMP_94(bool) = tokensSent >= TOKEN_TARGET
CONDITION TMP_94"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
stage = Stages.GoingAndGoalReached

IRs:
REF_52(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalReached
stage(SingularDTVLaunch.Stages) := REF_52(SingularDTVLaunch.Stages)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
stage == Stages.GoingAndGoalReached

IRs:
REF_53(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalReached
TMP_95(bool) = stage == REF_53
CONDITION TMP_95"];
22->23[label="True"];
22->26[label="False"];
23[label="Node Type: IF 23

EXPRESSION:
tokensSent == CAP

IRs:
TMP_96(bool) = tokensSent == CAP
CONDITION TMP_96"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
stage = Stages.EndedAndGoalReached

IRs:
REF_54(SingularDTVLaunch.Stages) -> Stages.EndedAndGoalReached
stage(SingularDTVLaunch.Stages) := REF_54(SingularDTVLaunch.Stages)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
checkInvariants()

IRs:
INTERNAL_CALL, SingularDTVLaunch.checkInvariants()()"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
Contributed(msg.sender,contribution,tokenCount)

IRs:
Emit Contributed(msg.sender,contribution,tokenCount)"];
28->29;
29[label="Node Type: RETURN 29

EXPRESSION:
tokenCount

IRs:
RETURN tokenCount"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
timedTransitions()

IRs:
MODIFIER_CALL, SingularDTVLaunch.timedTransitions()()"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
atStageOR(Stages.GoingAndGoalNotReached,Stages.GoingAndGoalReached)

IRs:
REF_55(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalNotReached
REF_56(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalReached
MODIFIER_CALL, SingularDTVLaunch.atStageOR(SingularDTVLaunch.Stages,SingularDTVLaunch.Stages)(REF_55,REF_56)"];
31->1;
}
// Function: 20862.sol-SingularDTVLaunch-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_151(bool) = msg.sender != owner
CONDITION TMP_151"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_152(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 20862.sol-SingularDTVLaunch-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = 0.1.0

IRs:
version(string) := 0.1.0(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
SingularDTVWorkshop = 0xc78310231aA53bD3D0FEA2F8c705C67730929D8f

IRs:
SingularDTVWorkshop(address) := 1139011966756827197666785062002080857210913725839(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
stage = Stages.Deployed

IRs:
REF_77(SingularDTVLaunch.Stages) -> Stages.Deployed
stage(SingularDTVLaunch.Stages) := REF_77(SingularDTVLaunch.Stages)"];
}
// Function: 20862.sol-SingularDTVLaunch-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
! singularDTVToken.transferFrom(msg.sender,this,CAP)

IRs:
TMP_137(bool) = HIGH_LEVEL_CALL, dest:singularDTVToken(AbstractSingularDTVToken), function:transferFrom, arguments:['msg.sender', 'this', 'CAP']  
TMP_138 = UnaryType.BANG TMP_137 
CONDITION TMP_138"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_139(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
startDate = now

IRs:
startDate(uint256) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
stage = Stages.GoingAndGoalNotReached

IRs:
REF_72(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalNotReached
stage(SingularDTVLaunch.Stages) := REF_72(SingularDTVLaunch.Stages)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
checkInvariants()

IRs:
INTERNAL_CALL, SingularDTVLaunch.checkInvariants()()"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
startDate

IRs:
RETURN startDate"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, SingularDTVLaunch.onlyOwner()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
atStage(Stages.Deployed)

IRs:
REF_73(SingularDTVLaunch.Stages) -> Stages.Deployed
MODIFIER_CALL, SingularDTVLaunch.atStage(SingularDTVLaunch.Stages)(REF_73)"];
9->1;
}
// Function: 20862.sol-SingularDTVLaunch-timedTransitions()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
timeElapsed = now - startDate

IRs:
TMP_159(uint256) = now - startDate
timeElapsed(uint256) := TMP_159(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
timeElapsed >= DURATION

IRs:
TMP_160(bool) = timeElapsed >= DURATION
CONDITION TMP_160"];
2->3[label="True"];
2->9[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
stage == Stages.GoingAndGoalNotReached

IRs:
REF_78(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalNotReached
TMP_161(bool) = stage == REF_78
CONDITION TMP_161"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stage = Stages.EndedAndGoalNotReached

IRs:
REF_79(SingularDTVLaunch.Stages) -> Stages.EndedAndGoalNotReached
stage(SingularDTVLaunch.Stages) := REF_79(SingularDTVLaunch.Stages)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
stage == Stages.GoingAndGoalReached

IRs:
REF_80(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalReached
TMP_162(bool) = stage == REF_80
CONDITION TMP_162"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
stage = Stages.EndedAndGoalReached

IRs:
REF_81(SingularDTVLaunch.Stages) -> Stages.EndedAndGoalReached
stage(SingularDTVLaunch.Stages) := REF_81(SingularDTVLaunch.Stages)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: _ 10
"];
}
// Function: 20862.sol-SingularDTVLaunch-updateStage()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
stage

IRs:
RETURN stage"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
timedTransitions()

IRs:
MODIFIER_CALL, SingularDTVLaunch.timedTransitions()()"];
2->1;
}
// Function: 20862.sol-SingularDTVLaunch-withdrawContribution()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokensReceived = sentTokens[msg.sender]

IRs:
REF_57(uint256) -> sentTokens[msg.sender]
tokensReceived(uint256) := REF_57(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sentTokens[msg.sender] = 0

IRs:
REF_58(uint256) -> sentTokens[msg.sender]
REF_58(uint256) (->sentTokens) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! singularDTVToken.transferFrom(msg.sender,owner,tokensReceived)

IRs:
TMP_101(bool) = HIGH_LEVEL_CALL, dest:singularDTVToken(AbstractSingularDTVToken), function:transferFrom, arguments:['msg.sender', 'owner', 'tokensReceived']  
TMP_102 = UnaryType.BANG TMP_101 
CONDITION TMP_102"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_103(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
contribution = contributions[msg.sender]

IRs:
REF_60(uint256) -> contributions[msg.sender]
contribution(uint256) := REF_60(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
contributions[msg.sender] = 0

IRs:
REF_61(uint256) -> contributions[msg.sender]
REF_61(uint256) (->contributions) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
fundBalance -= contribution

IRs:
fundBalance(uint256) = fundBalance - contribution"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
contribution > 0

IRs:
TMP_104(bool) = contribution > 0
CONDITION TMP_104"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
msg.sender.transfer(contribution)

IRs:
Transfer dest:msg.sender value:contribution"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
checkInvariants()

IRs:
INTERNAL_CALL, SingularDTVLaunch.checkInvariants()()"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
contribution

IRs:
RETURN contribution"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
timedTransitions()

IRs:
MODIFIER_CALL, SingularDTVLaunch.timedTransitions()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
atStage(Stages.EndedAndGoalNotReached)

IRs:
REF_63(SingularDTVLaunch.Stages) -> Stages.EndedAndGoalNotReached
MODIFIER_CALL, SingularDTVLaunch.atStage(SingularDTVLaunch.Stages)(REF_63)"];
15->1;
}
// Function: 20862.sol-SingularDTVLaunch-withdrawForWorkshop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
value = fundBalance

IRs:
value(uint256) := fundBalance(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fundBalance = 0

IRs:
fundBalance(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(value > 0)

IRs:
TMP_109(bool) = value > 0
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
networkFee = value * SingularDTVWorkshopFee / 100

IRs:
TMP_111(uint256) = value * SingularDTVWorkshopFee
TMP_112(uint256) = TMP_111 / 100
networkFee(uint256) := TMP_112(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
workshop.transfer(value - networkFee)

IRs:
TMP_113(uint256) = value - networkFee
Transfer dest:workshop value:TMP_113"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
SingularDTVWorkshop.transfer(networkFee)

IRs:
Transfer dest:SingularDTVWorkshop value:networkFee"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
remainingTokens = CAP - tokensSent

IRs:
TMP_116(uint256) = CAP - tokensSent
remainingTokens(uint256) := TMP_116(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
remainingTokens > 0 && ! singularDTVToken.transfer(owner,remainingTokens)

IRs:
TMP_117(bool) = remainingTokens > 0
TMP_118(bool) = HIGH_LEVEL_CALL, dest:singularDTVToken(AbstractSingularDTVToken), function:transfer, arguments:['owner', 'remainingTokens']  
TMP_119 = UnaryType.BANG TMP_118 
TMP_120(bool) = TMP_117 && TMP_119
CONDITION TMP_120"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
revert()()

IRs:
TMP_121(None) = SOLIDITY_CALL revert()()"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
checkInvariants()

IRs:
INTERNAL_CALL, SingularDTVLaunch.checkInvariants()()"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
true

IRs:
RETURN True"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
timedTransitions()

IRs:
MODIFIER_CALL, SingularDTVLaunch.timedTransitions()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
atStage(Stages.EndedAndGoalReached)

IRs:
REF_67(SingularDTVLaunch.Stages) -> Stages.EndedAndGoalReached
MODIFIER_CALL, SingularDTVLaunch.atStage(SingularDTVLaunch.Stages)(REF_67)"];
14->1;
}
// Function: 20862.sol-SingularDTVLaunch-withdrawUnsentTokensForOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
remainingTokens = CAP - tokensSent

IRs:
TMP_125(uint256) = CAP - tokensSent
remainingTokens(uint256) := TMP_125(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
remainingTokens > 0 && ! singularDTVToken.transfer(owner,remainingTokens)

IRs:
TMP_126(bool) = remainingTokens > 0
TMP_127(bool) = HIGH_LEVEL_CALL, dest:singularDTVToken(AbstractSingularDTVToken), function:transfer, arguments:['owner', 'remainingTokens']  
TMP_128 = UnaryType.BANG TMP_127 
TMP_129(bool) = TMP_126 && TMP_128
CONDITION TMP_129"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_130(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
checkInvariants()

IRs:
INTERNAL_CALL, SingularDTVLaunch.checkInvariants()()"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
remainingTokens

IRs:
RETURN remainingTokens"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
timedTransitions()

IRs:
MODIFIER_CALL, SingularDTVLaunch.timedTransitions()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
atStage(Stages.EndedAndGoalNotReached)

IRs:
REF_69(SingularDTVLaunch.Stages) -> Stages.EndedAndGoalNotReached
MODIFIER_CALL, SingularDTVLaunch.atStage(SingularDTVLaunch.Stages)(REF_69)"];
8->1;
}
// Function: 20862.sol-SingularDTVToken-SingularDTVToken(address,address,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
sDTVFundAddr == 0 || _wallet == 0

IRs:
TMP_199(bool) = sDTVFundAddr == 0
TMP_200(bool) = _wallet == 0
TMP_201(bool) = TMP_199 || TMP_200
CONDITION TMP_201"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_202(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_wallet] = _totalSupply

IRs:
REF_122(uint256) -> balances[_wallet]
REF_122(uint256) (->balances) := _totalSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = _totalSupply

IRs:
totalSupply(uint256) := _totalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
singularDTVFund = AbstractSingularDTVFund(sDTVFundAddr)

IRs:
TMP_203 = CONVERT sDTVFundAddr to AbstractSingularDTVFund
singularDTVFund(AbstractSingularDTVFund) := TMP_203(AbstractSingularDTVFund)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(this,_wallet,_totalSupply)

IRs:
Emit Transfer(this,_wallet,_totalSupply)"];
}
// Function: 20862.sol-SingularDTVToken-allowance(address,address)
digraph{
}
// Function: 20862.sol-SingularDTVToken-approve(address,uint256)
digraph{
}
// Function: 20862.sol-SingularDTVToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_115(mapping(address => uint256)) -> allowed[msg.sender]
REF_116(uint256) -> REF_115[_spender]
REF_116(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData))

IRs:
TMP_188(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_189 = CONVERT TMP_188 to bytes32
TMP_190 = CONVERT TMP_189 to bytes4
TMP_191(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_190', 'msg.sender', '_value', 'this', '_extraData']  
TMP_192(None) = SOLIDITY_CALL require(bool)(TMP_191)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20862.sol-SingularDTVToken-balanceOf(address)
digraph{
}
// Function: 20862.sol-SingularDTVToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 20862.sol-SingularDTVToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = 0.1.0

IRs:
version(string) := 0.1.0(string)"];
}
// Function: 20862.sol-SingularDTVToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
singularDTVFund.softWithdrawRewardFor(msg.sender)

IRs:
TMP_193(uint256) = HIGH_LEVEL_CALL, dest:singularDTVFund(AbstractSingularDTVFund), function:softWithdrawRewardFor, arguments:['msg.sender']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
singularDTVFund.softWithdrawRewardFor(to)

IRs:
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:singularDTVFund(AbstractSingularDTVFund), function:softWithdrawRewardFor, arguments:['to']  "];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
super.transfer(to,value)

IRs:
TMP_195(bool) = INTERNAL_CALL, StandardToken.transfer(address,uint256)(to,value)
RETURN TMP_195"];
}
// Function: 20862.sol-SingularDTVToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
singularDTVFund.softWithdrawRewardFor(from)

IRs:
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:singularDTVFund(AbstractSingularDTVFund), function:softWithdrawRewardFor, arguments:['from']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
singularDTVFund.softWithdrawRewardFor(to)

IRs:
TMP_197(uint256) = HIGH_LEVEL_CALL, dest:singularDTVFund(AbstractSingularDTVFund), function:softWithdrawRewardFor, arguments:['to']  "];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
super.transferFrom(from,to,value)

IRs:
TMP_198(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(from,to,value)
RETURN TMP_198"];
}
// Function: 20862.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_95(mapping(address => uint256)) -> allowed[_owner]
REF_96(uint256) -> REF_95[_spender]
RETURN REF_96"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 20862.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_93(mapping(address => uint256)) -> allowed[msg.sender]
REF_94(uint256) -> REF_93[_spender]
REF_94(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20862.sol-StandardToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_97(mapping(address => uint256)) -> allowed[msg.sender]
REF_98(uint256) -> REF_97[_spender]
REF_98(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData))

IRs:
TMP_173(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_174 = CONVERT TMP_173 to bytes32
TMP_175 = CONVERT TMP_174 to bytes4
TMP_176(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_175', 'msg.sender', '_value', 'this', '_extraData']  
TMP_177(None) = SOLIDITY_CALL require(bool)(TMP_176)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20862.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_92(uint256) -> balances[_owner]
RETURN REF_92"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 20862.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_82(uint256) -> balances[msg.sender]
TMP_163(bool) = REF_82 >= _value
TMP_164(None) = SOLIDITY_CALL require(bool)(TMP_163)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_83(uint256) -> balances[msg.sender]
REF_83(-> balances) = REF_83 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_84(uint256) -> balances[_to]
REF_84(-> balances) = REF_84 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20862.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[_from] >= _value && allowed[_from][msg.sender] >= _value)

IRs:
REF_85(uint256) -> balances[_from]
TMP_166(bool) = REF_85 >= _value
REF_86(mapping(address => uint256)) -> allowed[_from]
REF_87(uint256) -> REF_86[msg.sender]
TMP_167(bool) = REF_87 >= _value
TMP_168(bool) = TMP_166 && TMP_167
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_88(uint256) -> balances[_to]
REF_88(-> balances) = REF_88 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_89(uint256) -> balances[_from]
REF_89(-> balances) = REF_89 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_90(mapping(address => uint256)) -> allowed[_from]
REF_91(uint256) -> REF_90[msg.sender]
REF_91(-> allowed) = REF_91 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20862.sol-Token-allowance(address,address)
digraph{
}
// Function: 20862.sol-Token-approve(address,uint256)
digraph{
}
// Function: 20862.sol-Token-balanceOf(address)
digraph{
}
// Function: 20862.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 20862.sol-Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 20862.sol-TokitDeployer-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20862.sol-TokitDeployer-TokitDeployer(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferOwnership(_owner)

IRs:
INTERNAL_CALL, Ownable.transferOwnership(address)(_owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
registry = TokitRegistry(_registry)

IRs:
TMP_211 = CONVERT _registry to TokitRegistry
registry(TokitRegistry) := TMP_211(TokitRegistry)"];
}
// Function: 20862.sol-TokitDeployer-deletePaymentContract(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete paymentContracts[_paymentType]

IRs:
REF_131(AbstractPaymentEscrow) -> paymentContracts[_paymentType]
paymentContracts = delete REF_131 "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 20862.sol-TokitDeployer-deployCampaign(address,uint256,address,uint256,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
(t,f,c) = registry.lookup(_customer,_projectId)

IRs:
TUPLE_1(address,address,address) = HIGH_LEVEL_CALL, dest:registry(TokitRegistry), function:lookup, arguments:['_customer', '_projectId']  
t(address)= UNPACK TUPLE_1 index: 0 
f(address)= UNPACK TUPLE_1 index: 1 
c(address)= UNPACK TUPLE_1 index: 2 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(c == address(0))

IRs:
TMP_227 = CONVERT 0 to address
TMP_228(bool) = c == TMP_227
TMP_229(None) = SOLIDITY_CALL require(bool)(TMP_228)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(t != address(0) && f != address(0))

IRs:
TMP_230 = CONVERT 0 to address
TMP_231(bool) = t != TMP_230
TMP_232 = CONVERT 0 to address
TMP_233(bool) = f != TMP_232
TMP_234(bool) = TMP_231 && TMP_233
TMP_235(None) = SOLIDITY_CALL require(bool)(TMP_234)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
campaign = new SingularDTVLaunch(t,_workshop,_customer,_total,_unitPrice,_duration,_threshold,_networkFee)

IRs:
TMP_237(SingularDTVLaunch) = new SingularDTVLaunch(t,_workshop,_customer,_total,_unitPrice,_duration,_threshold,_networkFee) 
campaign(SingularDTVLaunch) := TMP_237(SingularDTVLaunch)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
registry.register(_customer,_projectId,campaign)

IRs:
HIGH_LEVEL_CALL, dest:registry(TokitRegistry), function:register, arguments:['_customer', '_projectId', 'campaign']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
DeployedCampaign(_customer,_projectId,campaign)

IRs:
Emit DeployedCampaign(_customer,_projectId,campaign)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
// Function: 20862.sol-TokitDeployer-deployToken(address,uint256,uint8,uint256,address,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(AbstractPaymentEscrow(paymentContracts[_payedWith]).getDeposit(_projectId) >= _amountNeeded)

IRs:
REF_123(AbstractPaymentEscrow) -> paymentContracts[_payedWith]
TMP_212 = CONVERT REF_123 to AbstractPaymentEscrow
TMP_213(uint256) = HIGH_LEVEL_CALL, dest:TMP_212(AbstractPaymentEscrow), function:getDeposit, arguments:['_projectId']  
TMP_214(bool) = TMP_213 >= _amountNeeded
TMP_215(None) = SOLIDITY_CALL require(bool)(TMP_214)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(t,None,None) = registry.lookup(_customer,_projectId)

IRs:
TUPLE_0(address,address,address) = HIGH_LEVEL_CALL, dest:registry(TokitRegistry), function:lookup, arguments:['_customer', '_projectId']  
t(address)= UNPACK TUPLE_0 index: 0 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(t == address(0))

IRs:
TMP_216 = CONVERT 0 to address
TMP_217(bool) = t == TMP_216
TMP_218(None) = SOLIDITY_CALL require(bool)(TMP_217)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
fund = new SingularDTVFund()

IRs:
TMP_220(SingularDTVFund) = new SingularDTVFund() 
fund(SingularDTVFund) := TMP_220(SingularDTVFund)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
token = new SingularDTVToken(fund,_wallet,_name,_symbol,_totalSupply)

IRs:
TMP_222(SingularDTVToken) = new SingularDTVToken(fund,_wallet,_name,_symbol,_totalSupply) 
token(SingularDTVToken) := TMP_222(SingularDTVToken)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
fund.setup(token)

IRs:
TMP_223(bool) = HIGH_LEVEL_CALL, dest:fund(SingularDTVFund), function:setup, arguments:['token']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
registry.register(_customer,_projectId,token,fund)

IRs:
HIGH_LEVEL_CALL, dest:registry(TokitRegistry), function:register, arguments:['_customer', '_projectId', 'token', 'fund']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
DeployedToken(_customer,_projectId,token,fund)

IRs:
Emit DeployedToken(_customer,_projectId,token,fund)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
// Function: 20862.sol-TokitDeployer-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_246(bool) = msg.sender == owner
TMP_247(None) = SOLIDITY_CALL require(bool)(TMP_246)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20862.sol-TokitDeployer-setPaymentContract(uint8,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paymentContracts[_paymentType] = AbstractPaymentEscrow(_paymentContract)

IRs:
REF_130(AbstractPaymentEscrow) -> paymentContracts[_paymentType]
TMP_243 = CONVERT _paymentContract to AbstractPaymentEscrow
REF_130(AbstractPaymentEscrow) (->paymentContracts) := TMP_243(AbstractPaymentEscrow)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 20862.sol-TokitDeployer-setRegistryContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
registry = TokitRegistry(_registry)

IRs:
TMP_241 = CONVERT _registry to TokitRegistry
registry(TokitRegistry) := TMP_241(TokitRegistry)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 20862.sol-TokitDeployer-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_205 = CONVERT 0 to address
TMP_206(bool) = newOwner != TMP_205
TMP_207(None) = SOLIDITY_CALL require(bool)(TMP_206)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 20862.sol-TokitRegistry-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20862.sol-TokitRegistry-TokitRegistry(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setRegistrar(_owner,true)

IRs:
INTERNAL_CALL, TokitRegistry.setRegistrar(address,bool)(_owner,True)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transferOwnership(_owner)

IRs:
INTERNAL_CALL, Ownable.transferOwnership(address)(_owner)"];
}
// Function: 20862.sol-TokitRegistry-lookup(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(registry[_customer][_projectId].token,registry[_customer][_projectId].fund,registry[_customer][_projectId].campaign)

IRs:
REF_16(mapping(uint256 => TokitRegistry.ProjectContracts)) -> registry[_customer]
REF_17(TokitRegistry.ProjectContracts) -> REF_16[_projectId]
REF_18(address) -> REF_17.token
REF_19(mapping(uint256 => TokitRegistry.ProjectContracts)) -> registry[_customer]
REF_20(TokitRegistry.ProjectContracts) -> REF_19[_projectId]
REF_21(address) -> REF_20.fund
REF_22(mapping(uint256 => TokitRegistry.ProjectContracts)) -> registry[_customer]
REF_23(TokitRegistry.ProjectContracts) -> REF_22[_projectId]
REF_24(address) -> REF_23.campaign
RETURN REF_18,REF_21,REF_24"];
2[label="Node Type: RETURN 2

EXPRESSION:
(token,fund,campaign)

IRs:
RETURN token,fund,campaign"];
}
// Function: 20862.sol-TokitRegistry-lookupByProject(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(project_registry[_projectId].token,project_registry[_projectId].fund,project_registry[_projectId].campaign)

IRs:
REF_25(TokitRegistry.ProjectContracts) -> project_registry[_projectId]
REF_26(address) -> REF_25.token
REF_27(TokitRegistry.ProjectContracts) -> project_registry[_projectId]
REF_28(address) -> REF_27.fund
REF_29(TokitRegistry.ProjectContracts) -> project_registry[_projectId]
REF_30(address) -> REF_29.campaign
RETURN REF_26,REF_28,REF_30"];
2[label="Node Type: RETURN 2

EXPRESSION:
(token,fund,campaign)

IRs:
RETURN token,fund,campaign"];
}
// Function: 20862.sol-TokitRegistry-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_40(bool) = msg.sender == owner
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20862.sol-TokitRegistry-onlyRegistrars()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(registrars[msg.sender])

IRs:
REF_32(bool) -> registrars[msg.sender]
TMP_42(None) = SOLIDITY_CALL require(bool)(REF_32)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20862.sol-TokitRegistry-register(address,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
registry[_customer][_projectId].campaign = _campaign

IRs:
REF_11(mapping(uint256 => TokitRegistry.ProjectContracts)) -> registry[_customer]
REF_12(TokitRegistry.ProjectContracts) -> REF_11[_projectId]
REF_13(address) -> REF_12.campaign
REF_13(address) (->registry) := _campaign(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
project_registry[_projectId].campaign = _campaign

IRs:
REF_14(TokitRegistry.ProjectContracts) -> project_registry[_projectId]
REF_15(address) -> REF_14.campaign
REF_15(address) (->project_registry) := _campaign(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
RegisteredCampaign(_customer,_projectId,_campaign)

IRs:
Emit RegisteredCampaign(_customer,_projectId,_campaign)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyRegistrars()

IRs:
MODIFIER_CALL, TokitRegistry.onlyRegistrars()()"];
4->1;
}
// Function: 20862.sol-TokitRegistry-register(address,uint256,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
registry[_customer][_projectId].token = _token

IRs:
REF_1(mapping(uint256 => TokitRegistry.ProjectContracts)) -> registry[_customer]
REF_2(TokitRegistry.ProjectContracts) -> REF_1[_projectId]
REF_3(address) -> REF_2.token
REF_3(address) (->registry) := _token(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
registry[_customer][_projectId].fund = _fund

IRs:
REF_4(mapping(uint256 => TokitRegistry.ProjectContracts)) -> registry[_customer]
REF_5(TokitRegistry.ProjectContracts) -> REF_4[_projectId]
REF_6(address) -> REF_5.fund
REF_6(address) (->registry) := _fund(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
project_registry[_projectId].token = _token

IRs:
REF_7(TokitRegistry.ProjectContracts) -> project_registry[_projectId]
REF_8(address) -> REF_7.token
REF_8(address) (->project_registry) := _token(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
project_registry[_projectId].fund = _fund

IRs:
REF_9(TokitRegistry.ProjectContracts) -> project_registry[_projectId]
REF_10(address) -> REF_9.fund
REF_10(address) (->project_registry) := _fund(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
RegisteredToken(_customer,_projectId,_token,_fund)

IRs:
Emit RegisteredToken(_customer,_projectId,_token,_fund)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyRegistrars()

IRs:
MODIFIER_CALL, TokitRegistry.onlyRegistrars()()"];
6->1;
}
// Function: 20862.sol-TokitRegistry-setRegistrar(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
registrars[_registrar] = enabled

IRs:
REF_31(bool) -> registrars[_registrar]
REF_31(bool) (->registrars) := enabled(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 20862.sol-TokitRegistry-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = newOwner != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
}
