digraph G {
// Function: 21277.sol-Ethername-Ethername()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
commission = 200

IRs:
commission(uint256) := 200(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
nameToRecord[bytes32()] = Record(this,0)

IRs:
TMP_193 = CONVERT  to bytes32
REF_109(EthernameRaw.Record) -> nameToRecord[TMP_193]
TMP_194(EthernameRaw.Record) = new Record(this,0)
REF_109(EthernameRaw.Record) (->nameToRecord) := TMP_194(EthernameRaw.Record)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_register(bytes32(ethername),this)

IRs:
TMP_195 = CONVERT ethername to bytes32
INTERNAL_CALL, EthernameRaw._register(bytes32,address)(TMP_195,this)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_register(bytes32(root),msg.sender)

IRs:
TMP_197 = CONVERT root to bytes32
INTERNAL_CALL, EthernameRaw._register(bytes32,address)(TMP_197,msg.sender)"];
}
// Function: 21277.sol-Ethername-Managed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
manager = msg.sender

IRs:
manager(address) := msg.sender(address)"];
}
// Function: 21277.sol-Ethername-_approve(address,address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nameToApproved[_name] = _to

IRs:
REF_102(address) -> nameToApproved[_name]
REF_102(address) (->nameToApproved) := _to(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(_owner,_to,_name)

IRs:
Emit Approval(_owner,_to,_name)"];
}
// Function: 21277.sol-Ethername-_bytes32ToString(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_string

IRs:
RETURN _string"];
}
// Function: 21277.sol-Ethername-_computePrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_price * (10000 + commission) / 10000

IRs:
TMP_176(uint256) = 10000 + commission
TMP_177(uint256) = _price * TMP_176
TMP_178(uint256) = TMP_177 / 10000
RETURN TMP_178"];
}
// Function: 21277.sol-Ethername-_register(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(nameToRecord[_name].owner == address(0))

IRs:
REF_90(EthernameRaw.Record) -> nameToRecord[_name]
REF_91(address) -> REF_90.owner
TMP_148 = CONVERT 0 to address
TMP_149(bool) = REF_91 == TMP_148
TMP_150(None) = SOLIDITY_CALL require(bool)(TMP_149)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _name.length

IRs:
REF_92 -> LENGTH _name
TMP_151(bool) = i < REF_92
CONDITION TMP_151"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)((_name[i] == 0) || (_name[i] > 96 && _name[i] < 123) || (_name[i] > 47 && _name[i] < 58))

IRs:
REF_93(None) -> _name[i]
TMP_152(bool) = REF_93 == 0
REF_94(None) -> _name[i]
TMP_153(bool) = REF_94 > 96
REF_95(None) -> _name[i]
TMP_154(bool) = REF_95 < 123
TMP_155(bool) = TMP_153 && TMP_154
TMP_156(bool) = TMP_152 || TMP_155
REF_96(None) -> _name[i]
TMP_157(bool) = REF_96 > 47
REF_97(None) -> _name[i]
TMP_158(bool) = REF_97 < 58
TMP_159(bool) = TMP_157 && TMP_158
TMP_160(bool) = TMP_156 || TMP_159
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_162(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_transfer(0,_to,_name)

IRs:
INTERNAL_CALL, EthernameRaw._transfer(address,address,bytes32)(0,_to,_name)"];
}
// Function: 21277.sol-Ethername-_stringToBytes32(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(_string).length < 33)

IRs:
TMP_179 = CONVERT _string to bytes
REF_104 -> LENGTH TMP_179
TMP_180(bool) = REF_104 < 33
TMP_181(None) = SOLIDITY_CALL require(bool)(TMP_180)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_bytes32

IRs:
RETURN _bytes32"];
}
// Function: 21277.sol-Ethername-_transfer(address,address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_null = address(0)

IRs:
TMP_164 = CONVERT 0 to address
_null(address) := TMP_164(address)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
nameToApproved[_name] != _null

IRs:
REF_98(address) -> nameToApproved[_name]
TMP_165(bool) = REF_98 != _null
CONDITION TMP_165"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_approve(_from,_null,_name)

IRs:
INTERNAL_CALL, EthernameRaw._approve(address,address,bytes32)(_from,_null,_name)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
ownerToName[_from] == _name

IRs:
REF_99(bytes32) -> ownerToName[_from]
TMP_167(bool) = REF_99 == _name
CONDITION TMP_167"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_useName(_from,0)

IRs:
INTERNAL_CALL, EthernameRaw._useName(address,bytes32)(_from,0)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
nameToRecord[_name] = Record(_to,0)

IRs:
REF_100(EthernameRaw.Record) -> nameToRecord[_name]
TMP_169(EthernameRaw.Record) = new Record(_to,0)
REF_100(EthernameRaw.Record) (->nameToRecord) := TMP_169(EthernameRaw.Record)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
ownerToName[_to] == bytes32(0)

IRs:
REF_101(bytes32) -> ownerToName[_to]
TMP_170 = CONVERT 0 to bytes32
TMP_171(bool) = REF_101 == TMP_170
CONDITION TMP_171"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_useName(_to,_name)

IRs:
INTERNAL_CALL, EthernameRaw._useName(address,bytes32)(_to,_name)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Transfer(_from,_to,_name)

IRs:
Emit Transfer(_from,_to,_name)"];
}
// Function: 21277.sol-Ethername-_useName(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerToName[_owner] = _name

IRs:
REF_103(bytes32) -> ownerToName[_owner]
REF_103(bytes32) (->ownerToName) := _name(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Name(_owner,_name)

IRs:
Emit Name(_owner,_name)"];
}
// Function: 21277.sol-Ethername-approve(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rawApprove(_to,_stringToBytes32(_name))

IRs:
TMP_203(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_name)
INTERNAL_CALL, EthernameRaw.rawApprove(address,bytes32)(_to,TMP_203)"];
}
// Function: 21277.sol-Ethername-buy(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rawBuy(_stringToBytes32(_name))

IRs:
TMP_209(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_name)
INTERNAL_CALL, EthernameRaw.rawBuy(bytes32)(TMP_209)"];
}
// Function: 21277.sol-Ethername-callFor(address,uint256,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
_to.call.value(_value).gas(_gas)(_code)

IRs:
TMP_191(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['_code'] value:_value gas:_gas
RETURN TMP_191"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyManager()

IRs:
MODIFIER_CALL, Managed.onlyManager()()"];
2->1;
}
// Function: 21277.sol-Ethername-detailsOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
rawDetailsOf(_stringToBytes32(_name),_stringToBytes32(_key))

IRs:
TMP_224(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_name)
TMP_225(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_key)
TUPLE_0(address,uint256,bytes) = INTERNAL_CALL, EthernameRaw.rawDetailsOf(bytes32,bytes32)(TMP_224,TMP_225)
RETURN TUPLE_0"];
2[label="Node Type: RETURN 2

EXPRESSION:
(_owner,_price,_value)

IRs:
RETURN _owner,_price,_value"];
}
// Function: 21277.sol-Ethername-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 21277.sol-Ethername-nameOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_name = _bytes32ToString(rawNameOf(_address))

IRs:
TMP_220(bytes32) = INTERNAL_CALL, EthernameRaw.rawNameOf(address)(_address)
TMP_221(string) = INTERNAL_CALL, EthernameRaw._bytes32ToString(bytes32)(TMP_220)
_name(string) := TMP_221(string)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 21277.sol-Ethername-onlyApproved(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(nameToApproved[_name] == _claimant)

IRs:
REF_112(address) -> nameToApproved[_name]
TMP_228(bool) = REF_112 == _claimant
TMP_229(None) = SOLIDITY_CALL require(bool)(TMP_228)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 21277.sol-Ethername-onlyManager()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == manager)

IRs:
TMP_230(bool) = msg.sender == manager
TMP_231(None) = SOLIDITY_CALL require(bool)(TMP_230)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 21277.sol-Ethername-onlyOwner(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(nameToRecord[_name].owner == _claimant)

IRs:
REF_110(EthernameRaw.Record) -> nameToRecord[_name]
REF_111(address) -> REF_110.owner
TMP_226(bool) = REF_111 == _claimant
TMP_227(None) = SOLIDITY_CALL require(bool)(TMP_226)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 21277.sol-Ethername-ownerOf(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner = rawOwnerOf(_stringToBytes32(_name))

IRs:
TMP_222(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_name)
TMP_223(address) = INTERNAL_CALL, EthernameRaw.rawOwnerOf(bytes32)(TMP_222)
_owner(address) := TMP_223(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_owner

IRs:
RETURN _owner"];
}
// Function: 21277.sol-Ethername-rawApprove(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_approve(msg.sender,_to,_name)

IRs:
INTERNAL_CALL, EthernameRaw._approve(address,address,bytes32)(msg.sender,_to,_name)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(msg.sender,_name)"];
2->1;
}
// Function: 21277.sol-Ethername-rawBuy(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_record = nameToRecord[_name]

IRs:
REF_60(EthernameRaw.Record) -> nameToRecord[_name]
_record(EthernameRaw.Record) := REF_60(EthernameRaw.Record)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_record.price > 0)

IRs:
REF_61(uint256) -> _record.price
TMP_120(bool) = REF_61 > 0
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_price = _computePrice(_record.price)

IRs:
REF_62(uint256) -> _record.price
TMP_122(uint256) = INTERNAL_CALL, EthernameRaw._computePrice(uint256)(REF_62)
_price(uint256) := TMP_122(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(msg.value >= _price)

IRs:
TMP_123(bool) = msg.value >= _price
TMP_124(None) = SOLIDITY_CALL require(bool)(TMP_123)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_record.owner.transfer(_record.price)

IRs:
REF_63(address) -> _record.owner
REF_65(uint256) -> _record.price
Transfer dest:REF_63 value:REF_65"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_transfer(_record.owner,msg.sender,_name)

IRs:
REF_66(address) -> _record.owner
INTERNAL_CALL, EthernameRaw._transfer(address,address,bytes32)(REF_66,msg.sender,_name)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
msg.sender.transfer(msg.value - _price)

IRs:
TMP_127(uint256) = msg.value - _price
Transfer dest:msg.sender value:TMP_127"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Buy(_name,msg.sender,_price)

IRs:
Emit Buy(_name,msg.sender,_price)"];
}
// Function: 21277.sol-Ethername-rawDetailsOf(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner = nameToRecord[_name].owner

IRs:
REF_83(EthernameRaw.Record) -> nameToRecord[_name]
REF_84(address) -> REF_83.owner
_owner(address) := REF_84(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_price = _computePrice(nameToRecord[_name].price)

IRs:
REF_85(EthernameRaw.Record) -> nameToRecord[_name]
REF_86(uint256) -> REF_85.price
TMP_147(uint256) = INTERNAL_CALL, EthernameRaw._computePrice(uint256)(REF_86)
_price(uint256) := TMP_147(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_value = nameToRecord[_name].attrs[_key]

IRs:
REF_87(EthernameRaw.Record) -> nameToRecord[_name]
REF_88(mapping(bytes32 => bytes)) -> REF_87.attrs
REF_89(bytes) -> REF_88[_key]
_value(bytes) := REF_89(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(_owner,_price,_value)

IRs:
RETURN _owner,_price,_value"];
}
// Function: 21277.sol-Ethername-rawNameOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_name = ownerToName[_address]

IRs:
REF_80(bytes32) -> ownerToName[_address]
_name(bytes32) := REF_80(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 21277.sol-Ethername-rawOwnerOf(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner = nameToRecord[_name].owner

IRs:
REF_81(EthernameRaw.Record) -> nameToRecord[_name]
REF_82(address) -> REF_81.owner
_owner(address) := REF_82(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_owner

IRs:
RETURN _owner"];
}
// Function: 21277.sol-Ethername-rawRegister(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_register(_name,msg.sender)

IRs:
INTERNAL_CALL, EthernameRaw._register(bytes32,address)(_name,msg.sender)"];
}
// Function: 21277.sol-Ethername-rawSendEther(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_to = nameToRecord[_name].owner

IRs:
REF_77(EthernameRaw.Record) -> nameToRecord[_name]
REF_78(address) -> REF_77.owner
_to(address) := REF_78(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_result = (_name != bytes32(0)) && (_to != address(0)) && _to.send(msg.value)

IRs:
TMP_138 = CONVERT 0 to bytes32
TMP_139(bool) = _name != TMP_138
TMP_140 = CONVERT 0 to address
TMP_141(bool) = _to != TMP_140
TMP_142(bool) = TMP_139 && TMP_141
TMP_143 = SEND dest:_to value:msg.value
TMP_144(bool) = TMP_142 && TMP_143
_result(bool) := TMP_144(bool)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_result

IRs:
CONDITION _result"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
SendEther(msg.sender,_to,rawNameOf(msg.sender),_name,msg.value)

IRs:
TMP_145(bytes32) = INTERNAL_CALL, EthernameRaw.rawNameOf(address)(msg.sender)
Emit SendEther(msg.sender,_to,TMP_145,_name,msg.value)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
_result

IRs:
RETURN _result"];
}
// Function: 21277.sol-Ethername-rawSetAttribute(bytes32,bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nameToRecord[_name].attrs[_key] = _value

IRs:
REF_68(EthernameRaw.Record) -> nameToRecord[_name]
REF_69(mapping(bytes32 => bytes)) -> REF_68.attrs
REF_70(bytes) -> REF_69[_key]
REF_70(bytes) (->nameToRecord) := _value(bytes)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Attribute(_name,_key)

IRs:
Emit Attribute(_name,_key)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(msg.sender,_name)"];
3->1;
}
// Function: 21277.sol-Ethername-rawSetPrice(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_price == uint256(uint128(_price)))

IRs:
TMP_114 = CONVERT _price to uint128
TMP_115 = CONVERT TMP_114 to uint256
TMP_116(bool) = _price == TMP_115
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
nameToRecord[_name].price = _price

IRs:
REF_58(EthernameRaw.Record) -> nameToRecord[_name]
REF_59(uint256) -> REF_58.price
REF_59(uint256) (->nameToRecord) := _price(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Price(_name,_price)

IRs:
Emit Price(_name,_price)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(msg.sender,_name)"];
4->1;
}
// Function: 21277.sol-Ethername-rawTransfer(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_name)

IRs:
INTERNAL_CALL, EthernameRaw._transfer(address,address,bytes32)(msg.sender,_to,_name)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(msg.sender,_name)"];
2->1;
}
// Function: 21277.sol-Ethername-rawTransferFrom(address,address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(_from,_to,_name)

IRs:
INTERNAL_CALL, EthernameRaw._transfer(address,address,bytes32)(_from,_to,_name)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner(_from,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(_from,_name)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyApproved(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyApproved(address,bytes32)(msg.sender,_name)"];
3->1;
}
// Function: 21277.sol-Ethername-rawUseName(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_useName(msg.sender,_name)

IRs:
INTERNAL_CALL, EthernameRaw._useName(address,bytes32)(msg.sender,_name)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(msg.sender,_name)"];
2->1;
}
// Function: 21277.sol-Ethername-rawWipeAttributes(bytes32,bytes32[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
attrs = nameToRecord[_name].attrs

IRs:
REF_71(EthernameRaw.Record) -> nameToRecord[_name]
REF_72(mapping(bytes32 => bytes)) -> REF_71.attrs
attrs(mapping(bytes32 => bytes)) := REF_72(mapping(bytes32 => bytes))"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _keys.length

IRs:
REF_73 -> LENGTH _keys
TMP_134(bool) = i < REF_73
CONDITION TMP_134"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
delete attrs[_keys[i]]

IRs:
REF_74(bytes32) -> _keys[i]
REF_75(bytes) -> attrs[REF_74]
attrs = delete REF_75 "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Attribute(_name,_keys[i])

IRs:
REF_76(bytes32) -> _keys[i]
Emit Attribute(_name,REF_76)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_136(uint256) := i(uint256)
i(uint256) = i + 1"];
8->5;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(msg.sender,_name)"];
9->1;
}
// Function: 21277.sol-Ethername-register(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rawRegister(_stringToBytes32(_name))

IRs:
TMP_199(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_name)
INTERNAL_CALL, EthernameRaw.rawRegister(bytes32)(TMP_199)"];
}
// Function: 21277.sol-Ethername-sendEther(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_result = rawSendEther(_stringToBytes32(_name))

IRs:
TMP_218(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_name)
TMP_219(bool) = INTERNAL_CALL, EthernameRaw.rawSendEther(bytes32)(TMP_218)
_result(bool) := TMP_219(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_result

IRs:
RETURN _result"];
}
// Function: 21277.sol-Ethername-setAttribute(string,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rawSetAttribute(_stringToBytes32(_name),_stringToBytes32(_key),_value)

IRs:
TMP_213(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_name)
TMP_214(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_key)
INTERNAL_CALL, EthernameRaw.rawSetAttribute(bytes32,bytes32,bytes)(TMP_213,TMP_214,_value)"];
}
// Function: 21277.sol-Ethername-setCommission(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_commission < 10000)

IRs:
TMP_182(bool) = _commission < 10000
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
commission = _commission

IRs:
commission(uint256) := _commission(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Commission(commission)

IRs:
Emit Commission(commission)"];
}
// Function: 21277.sol-Ethername-setPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rawSetPrice(_stringToBytes32(_name),_price)

IRs:
TMP_207(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_name)
INTERNAL_CALL, EthernameRaw.rawSetPrice(bytes32,uint256)(TMP_207,_price)"];
}
// Function: 21277.sol-Ethername-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Ethername

IRs:
name(string) := Ethername(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = ENM

IRs:
symbol(string) := ENM(string)"];
}
// Function: 21277.sol-Ethername-transfer(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rawTransfer(_to,_stringToBytes32(_name))

IRs:
TMP_201(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_name)
INTERNAL_CALL, EthernameRaw.rawTransfer(address,bytes32)(_to,TMP_201)"];
}
// Function: 21277.sol-Ethername-transferFrom(address,address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rawTransferFrom(_from,_to,_stringToBytes32(_name))

IRs:
TMP_205(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_name)
INTERNAL_CALL, EthernameRaw.rawTransferFrom(address,address,bytes32)(_from,_to,TMP_205)"];
}
// Function: 21277.sol-Ethername-transferPower(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
manager = _newManager

IRs:
manager(address) := _newManager(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyManager()

IRs:
MODIFIER_CALL, Managed.onlyManager()()"];
2->1;
}
// Function: 21277.sol-Ethername-useName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rawUseName(_stringToBytes32(_name))

IRs:
TMP_211(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_name)
INTERNAL_CALL, EthernameRaw.rawUseName(bytes32)(TMP_211)"];
}
// Function: 21277.sol-Ethername-wipeAttributes(string,bytes32[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rawWipeAttributes(_stringToBytes32(_name),_keys)

IRs:
TMP_216(bytes32) = INTERNAL_CALL, EthernameRaw._stringToBytes32(string)(_name)
INTERNAL_CALL, EthernameRaw.rawWipeAttributes(bytes32,bytes32[])(TMP_216,_keys)"];
}
// Function: 21277.sol-Ethername-withdrawBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
manager.transfer(address(this).balance)

IRs:
TMP_185 = CONVERT this to address
TMP_186(uint256) = SOLIDITY_CALL balance(address)(TMP_185)
Transfer dest:manager value:TMP_186"];
}
// Function: 21277.sol-EthernameRaw-Managed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
manager = msg.sender

IRs:
manager(address) := msg.sender(address)"];
}
// Function: 21277.sol-EthernameRaw-_approve(address,address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nameToApproved[_name] = _to

IRs:
REF_52(address) -> nameToApproved[_name]
REF_52(address) (->nameToApproved) := _to(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(_owner,_to,_name)

IRs:
Emit Approval(_owner,_to,_name)"];
}
// Function: 21277.sol-EthernameRaw-_bytes32ToString(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_string

IRs:
RETURN _string"];
}
// Function: 21277.sol-EthernameRaw-_computePrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_price * (10000 + commission) / 10000

IRs:
TMP_94(uint256) = 10000 + commission
TMP_95(uint256) = _price * TMP_94
TMP_96(uint256) = TMP_95 / 10000
RETURN TMP_96"];
}
// Function: 21277.sol-EthernameRaw-_register(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(nameToRecord[_name].owner == address(0))

IRs:
REF_40(EthernameRaw.Record) -> nameToRecord[_name]
REF_41(address) -> REF_40.owner
TMP_66 = CONVERT 0 to address
TMP_67(bool) = REF_41 == TMP_66
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _name.length

IRs:
REF_42 -> LENGTH _name
TMP_69(bool) = i < REF_42
CONDITION TMP_69"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)((_name[i] == 0) || (_name[i] > 96 && _name[i] < 123) || (_name[i] > 47 && _name[i] < 58))

IRs:
REF_43(None) -> _name[i]
TMP_70(bool) = REF_43 == 0
REF_44(None) -> _name[i]
TMP_71(bool) = REF_44 > 96
REF_45(None) -> _name[i]
TMP_72(bool) = REF_45 < 123
TMP_73(bool) = TMP_71 && TMP_72
TMP_74(bool) = TMP_70 || TMP_73
REF_46(None) -> _name[i]
TMP_75(bool) = REF_46 > 47
REF_47(None) -> _name[i]
TMP_76(bool) = REF_47 < 58
TMP_77(bool) = TMP_75 && TMP_76
TMP_78(bool) = TMP_74 || TMP_77
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_80(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_transfer(0,_to,_name)

IRs:
INTERNAL_CALL, EthernameRaw._transfer(address,address,bytes32)(0,_to,_name)"];
}
// Function: 21277.sol-EthernameRaw-_stringToBytes32(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(_string).length < 33)

IRs:
TMP_97 = CONVERT _string to bytes
REF_54 -> LENGTH TMP_97
TMP_98(bool) = REF_54 < 33
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_bytes32

IRs:
RETURN _bytes32"];
}
// Function: 21277.sol-EthernameRaw-_transfer(address,address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_null = address(0)

IRs:
TMP_82 = CONVERT 0 to address
_null(address) := TMP_82(address)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
nameToApproved[_name] != _null

IRs:
REF_48(address) -> nameToApproved[_name]
TMP_83(bool) = REF_48 != _null
CONDITION TMP_83"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_approve(_from,_null,_name)

IRs:
INTERNAL_CALL, EthernameRaw._approve(address,address,bytes32)(_from,_null,_name)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
ownerToName[_from] == _name

IRs:
REF_49(bytes32) -> ownerToName[_from]
TMP_85(bool) = REF_49 == _name
CONDITION TMP_85"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_useName(_from,0)

IRs:
INTERNAL_CALL, EthernameRaw._useName(address,bytes32)(_from,0)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
nameToRecord[_name] = Record(_to,0)

IRs:
REF_50(EthernameRaw.Record) -> nameToRecord[_name]
TMP_87(EthernameRaw.Record) = new Record(_to,0)
REF_50(EthernameRaw.Record) (->nameToRecord) := TMP_87(EthernameRaw.Record)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
ownerToName[_to] == bytes32(0)

IRs:
REF_51(bytes32) -> ownerToName[_to]
TMP_88 = CONVERT 0 to bytes32
TMP_89(bool) = REF_51 == TMP_88
CONDITION TMP_89"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_useName(_to,_name)

IRs:
INTERNAL_CALL, EthernameRaw._useName(address,bytes32)(_to,_name)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Transfer(_from,_to,_name)

IRs:
Emit Transfer(_from,_to,_name)"];
}
// Function: 21277.sol-EthernameRaw-_useName(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerToName[_owner] = _name

IRs:
REF_53(bytes32) -> ownerToName[_owner]
REF_53(bytes32) (->ownerToName) := _name(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Name(_owner,_name)

IRs:
Emit Name(_owner,_name)"];
}
// Function: 21277.sol-EthernameRaw-callFor(address,uint256,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
_to.call.value(_value).gas(_gas)(_code)

IRs:
TMP_22(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['_code'] value:_value gas:_gas
RETURN TMP_22"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyManager()

IRs:
MODIFIER_CALL, Managed.onlyManager()()"];
2->1;
}
// Function: 21277.sol-EthernameRaw-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 21277.sol-EthernameRaw-onlyApproved(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(nameToApproved[_name] == _claimant)

IRs:
REF_57(address) -> nameToApproved[_name]
TMP_104(bool) = REF_57 == _claimant
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 21277.sol-EthernameRaw-onlyManager()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == manager)

IRs:
TMP_100(bool) = msg.sender == manager
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 21277.sol-EthernameRaw-onlyOwner(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(nameToRecord[_name].owner == _claimant)

IRs:
REF_55(EthernameRaw.Record) -> nameToRecord[_name]
REF_56(address) -> REF_55.owner
TMP_102(bool) = REF_56 == _claimant
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 21277.sol-EthernameRaw-rawApprove(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_approve(msg.sender,_to,_name)

IRs:
INTERNAL_CALL, EthernameRaw._approve(address,address,bytes32)(msg.sender,_to,_name)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(msg.sender,_name)"];
2->1;
}
// Function: 21277.sol-EthernameRaw-rawBuy(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_record = nameToRecord[_name]

IRs:
REF_10(EthernameRaw.Record) -> nameToRecord[_name]
_record(EthernameRaw.Record) := REF_10(EthernameRaw.Record)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_record.price > 0)

IRs:
REF_11(uint256) -> _record.price
TMP_38(bool) = REF_11 > 0
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_price = _computePrice(_record.price)

IRs:
REF_12(uint256) -> _record.price
TMP_40(uint256) = INTERNAL_CALL, EthernameRaw._computePrice(uint256)(REF_12)
_price(uint256) := TMP_40(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(msg.value >= _price)

IRs:
TMP_41(bool) = msg.value >= _price
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_record.owner.transfer(_record.price)

IRs:
REF_13(address) -> _record.owner
REF_15(uint256) -> _record.price
Transfer dest:REF_13 value:REF_15"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_transfer(_record.owner,msg.sender,_name)

IRs:
REF_16(address) -> _record.owner
INTERNAL_CALL, EthernameRaw._transfer(address,address,bytes32)(REF_16,msg.sender,_name)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
msg.sender.transfer(msg.value - _price)

IRs:
TMP_45(uint256) = msg.value - _price
Transfer dest:msg.sender value:TMP_45"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Buy(_name,msg.sender,_price)

IRs:
Emit Buy(_name,msg.sender,_price)"];
}
// Function: 21277.sol-EthernameRaw-rawDetailsOf(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner = nameToRecord[_name].owner

IRs:
REF_33(EthernameRaw.Record) -> nameToRecord[_name]
REF_34(address) -> REF_33.owner
_owner(address) := REF_34(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_price = _computePrice(nameToRecord[_name].price)

IRs:
REF_35(EthernameRaw.Record) -> nameToRecord[_name]
REF_36(uint256) -> REF_35.price
TMP_65(uint256) = INTERNAL_CALL, EthernameRaw._computePrice(uint256)(REF_36)
_price(uint256) := TMP_65(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_value = nameToRecord[_name].attrs[_key]

IRs:
REF_37(EthernameRaw.Record) -> nameToRecord[_name]
REF_38(mapping(bytes32 => bytes)) -> REF_37.attrs
REF_39(bytes) -> REF_38[_key]
_value(bytes) := REF_39(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(_owner,_price,_value)

IRs:
RETURN _owner,_price,_value"];
}
// Function: 21277.sol-EthernameRaw-rawNameOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_name = ownerToName[_address]

IRs:
REF_30(bytes32) -> ownerToName[_address]
_name(bytes32) := REF_30(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 21277.sol-EthernameRaw-rawOwnerOf(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner = nameToRecord[_name].owner

IRs:
REF_31(EthernameRaw.Record) -> nameToRecord[_name]
REF_32(address) -> REF_31.owner
_owner(address) := REF_32(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_owner

IRs:
RETURN _owner"];
}
// Function: 21277.sol-EthernameRaw-rawRegister(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_register(_name,msg.sender)

IRs:
INTERNAL_CALL, EthernameRaw._register(bytes32,address)(_name,msg.sender)"];
}
// Function: 21277.sol-EthernameRaw-rawSendEther(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_to = nameToRecord[_name].owner

IRs:
REF_27(EthernameRaw.Record) -> nameToRecord[_name]
REF_28(address) -> REF_27.owner
_to(address) := REF_28(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_result = (_name != bytes32(0)) && (_to != address(0)) && _to.send(msg.value)

IRs:
TMP_56 = CONVERT 0 to bytes32
TMP_57(bool) = _name != TMP_56
TMP_58 = CONVERT 0 to address
TMP_59(bool) = _to != TMP_58
TMP_60(bool) = TMP_57 && TMP_59
TMP_61 = SEND dest:_to value:msg.value
TMP_62(bool) = TMP_60 && TMP_61
_result(bool) := TMP_62(bool)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_result

IRs:
CONDITION _result"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
SendEther(msg.sender,_to,rawNameOf(msg.sender),_name,msg.value)

IRs:
TMP_63(bytes32) = INTERNAL_CALL, EthernameRaw.rawNameOf(address)(msg.sender)
Emit SendEther(msg.sender,_to,TMP_63,_name,msg.value)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
_result

IRs:
RETURN _result"];
}
// Function: 21277.sol-EthernameRaw-rawSetAttribute(bytes32,bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nameToRecord[_name].attrs[_key] = _value

IRs:
REF_18(EthernameRaw.Record) -> nameToRecord[_name]
REF_19(mapping(bytes32 => bytes)) -> REF_18.attrs
REF_20(bytes) -> REF_19[_key]
REF_20(bytes) (->nameToRecord) := _value(bytes)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Attribute(_name,_key)

IRs:
Emit Attribute(_name,_key)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(msg.sender,_name)"];
3->1;
}
// Function: 21277.sol-EthernameRaw-rawSetPrice(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_price == uint256(uint128(_price)))

IRs:
TMP_32 = CONVERT _price to uint128
TMP_33 = CONVERT TMP_32 to uint256
TMP_34(bool) = _price == TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
nameToRecord[_name].price = _price

IRs:
REF_8(EthernameRaw.Record) -> nameToRecord[_name]
REF_9(uint256) -> REF_8.price
REF_9(uint256) (->nameToRecord) := _price(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Price(_name,_price)

IRs:
Emit Price(_name,_price)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(msg.sender,_name)"];
4->1;
}
// Function: 21277.sol-EthernameRaw-rawTransfer(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_name)

IRs:
INTERNAL_CALL, EthernameRaw._transfer(address,address,bytes32)(msg.sender,_to,_name)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(msg.sender,_name)"];
2->1;
}
// Function: 21277.sol-EthernameRaw-rawTransferFrom(address,address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(_from,_to,_name)

IRs:
INTERNAL_CALL, EthernameRaw._transfer(address,address,bytes32)(_from,_to,_name)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner(_from,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(_from,_name)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyApproved(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyApproved(address,bytes32)(msg.sender,_name)"];
3->1;
}
// Function: 21277.sol-EthernameRaw-rawUseName(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_useName(msg.sender,_name)

IRs:
INTERNAL_CALL, EthernameRaw._useName(address,bytes32)(msg.sender,_name)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(msg.sender,_name)"];
2->1;
}
// Function: 21277.sol-EthernameRaw-rawWipeAttributes(bytes32,bytes32[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
attrs = nameToRecord[_name].attrs

IRs:
REF_21(EthernameRaw.Record) -> nameToRecord[_name]
REF_22(mapping(bytes32 => bytes)) -> REF_21.attrs
attrs(mapping(bytes32 => bytes)) := REF_22(mapping(bytes32 => bytes))"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _keys.length

IRs:
REF_23 -> LENGTH _keys
TMP_52(bool) = i < REF_23
CONDITION TMP_52"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
delete attrs[_keys[i]]

IRs:
REF_24(bytes32) -> _keys[i]
REF_25(bytes) -> attrs[REF_24]
attrs = delete REF_25 "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Attribute(_name,_keys[i])

IRs:
REF_26(bytes32) -> _keys[i]
Emit Attribute(_name,REF_26)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_54(uint256) := i(uint256)
i(uint256) = i + 1"];
8->5;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner(msg.sender,_name)

IRs:
MODIFIER_CALL, EthernameRaw.onlyOwner(address,bytes32)(msg.sender,_name)"];
9->1;
}
// Function: 21277.sol-EthernameRaw-setCommission(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_commission < 10000)

IRs:
TMP_13(bool) = _commission < 10000
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
commission = _commission

IRs:
commission(uint256) := _commission(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Commission(commission)

IRs:
Emit Commission(commission)"];
}
// Function: 21277.sol-EthernameRaw-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Ethername

IRs:
name(string) := Ethername(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = ENM

IRs:
symbol(string) := ENM(string)"];
}
// Function: 21277.sol-EthernameRaw-transferPower(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
manager = _newManager

IRs:
manager(address) := _newManager(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyManager()

IRs:
MODIFIER_CALL, Managed.onlyManager()()"];
2->1;
}
// Function: 21277.sol-EthernameRaw-withdrawBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
manager.transfer(address(this).balance)

IRs:
TMP_16 = CONVERT this to address
TMP_17(uint256) = SOLIDITY_CALL balance(address)(TMP_16)
Transfer dest:manager value:TMP_17"];
}
// Function: 21277.sol-Managed-Managed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
manager = msg.sender

IRs:
manager(address) := msg.sender(address)"];
}
// Function: 21277.sol-Managed-callFor(address,uint256,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
_to.call.value(_value).gas(_gas)(_code)

IRs:
TMP_9(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['_code'] value:_value gas:_gas
RETURN TMP_9"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyManager()

IRs:
MODIFIER_CALL, Managed.onlyManager()()"];
2->1;
}
// Function: 21277.sol-Managed-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 21277.sol-Managed-onlyManager()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == manager)

IRs:
TMP_11(bool) = msg.sender == manager
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 21277.sol-Managed-setCommission(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_commission < 10000)

IRs:
TMP_0(bool) = _commission < 10000
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
commission = _commission

IRs:
commission(uint256) := _commission(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Commission(commission)

IRs:
Emit Commission(commission)"];
}
// Function: 21277.sol-Managed-transferPower(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
manager = _newManager

IRs:
manager(address) := _newManager(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyManager()

IRs:
MODIFIER_CALL, Managed.onlyManager()()"];
2->1;
}
// Function: 21277.sol-Managed-withdrawBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
manager.transfer(address(this).balance)

IRs:
TMP_3 = CONVERT this to address
TMP_4(uint256) = SOLIDITY_CALL balance(address)(TMP_3)
Transfer dest:manager value:TMP_4"];
}
}
