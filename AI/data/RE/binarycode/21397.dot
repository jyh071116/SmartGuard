digraph G {
// Function: 21397.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 21397.sol-HashBux-HashBux()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances_[msg.sender] = uint256(80000000)

IRs:
REF_0(uint256) -> balances_[msg.sender]
TMP_4 = CONVERT 80000000 to uint256
REF_0(uint256) (->balances_) := TMP_4(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = uint256(80000000)

IRs:
TMP_5 = CONVERT 80000000 to uint256
totalSupply(uint256) := TMP_5(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = HashBux

IRs:
name(string) := HashBux(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = uint8(0)

IRs:
TMP_6 = CONVERT 0 to uint8
decimals(uint8) := TMP_6(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = HASH

IRs:
symbol(string) := HASH(string)"];
}
// Function: 21397.sol-HashBux-_transfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to != 0x0)

IRs:
TMP_30(bool) = to != 0
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances_[from] >= value)

IRs:
REF_20(uint256) -> balances_[from]
TMP_32(bool) = REF_20 >= value
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances_[to] + value > balances_[to])

IRs:
REF_21(uint256) -> balances_[to]
TMP_34(uint256) = REF_21 + value
REF_22(uint256) -> balances_[to]
TMP_35(bool) = TMP_34 > REF_22
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances_[from] -= value

IRs:
REF_23(uint256) -> balances_[from]
REF_23(-> balances_) = REF_23 - value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances_[to] += value

IRs:
REF_24(uint256) -> balances_[to]
REF_24(-> balances_) = REF_24 + value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(from,to,value,data)

IRs:
Emit Transfer(from,to,value,data)"];
}
// Function: 21397.sol-HashBux-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowances_[owner][spender]

IRs:
REF_5(mapping(address => uint256)) -> allowances_[owner]
REF_6(uint256) -> REF_5[spender]
RETURN REF_6"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 21397.sol-HashBux-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowances_[msg.sender][spender] = value

IRs:
REF_3(mapping(address => uint256)) -> allowances_[msg.sender]
REF_4(uint256) -> REF_3[spender]
REF_4(uint256) (->allowances_) := value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,value)

IRs:
Emit Approval(msg.sender,spender,value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 21397.sol-HashBux-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
approve(spender,value)

IRs:
TMP_19(bool) = INTERNAL_CALL, HashBux.approve(address,uint256)(spender,value)
CONDITION TMP_19"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
recip = tokenRecipient(spender)

IRs:
TMP_20 = CONVERT spender to tokenRecipient
recip(tokenRecipient) := TMP_20(tokenRecipient)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
recip.receiveApproval(msg.sender,value,context)

IRs:
HIGH_LEVEL_CALL, dest:recip(tokenRecipient), function:receiveApproval, arguments:['msg.sender', 'value', 'context']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 21397.sol-HashBux-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances_[owner]

IRs:
REF_2(uint256) -> balances_[owner]
RETURN REF_2"];
}
// Function: 21397.sol-HashBux-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances_[msg.sender] >= value)

IRs:
REF_12(uint256) -> balances_[msg.sender]
TMP_22(bool) = REF_12 >= value
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances_[msg.sender] -= value

IRs:
REF_13(uint256) -> balances_[msg.sender]
REF_13(-> balances_) = REF_13 - value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply -= value

IRs:
totalSupply(uint256) = totalSupply - value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(msg.sender,value)

IRs:
Emit Burn(msg.sender,value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 21397.sol-HashBux-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances_[from] >= value)

IRs:
REF_14(uint256) -> balances_[from]
TMP_25(bool) = REF_14 >= value
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(value <= allowances_[from][msg.sender])

IRs:
REF_15(mapping(address => uint256)) -> allowances_[from]
REF_16(uint256) -> REF_15[msg.sender]
TMP_27(bool) = value <= REF_16
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances_[from] -= value

IRs:
REF_17(uint256) -> balances_[from]
REF_17(-> balances_) = REF_17 - value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowances_[from][msg.sender] -= value

IRs:
REF_18(mapping(address => uint256)) -> allowances_[from]
REF_19(uint256) -> REF_18[msg.sender]
REF_19(-> allowances_) = REF_19 - value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply -= value

IRs:
totalSupply(uint256) = totalSupply - value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(from,value)

IRs:
Emit Burn(from,value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 21397.sol-HashBux-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newowner

IRs:
owner(address) := newowner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
2->1;
}
// Function: 21397.sol-HashBux-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_13(None) = SOLIDITY_CALL revert()()"];
}
// Function: 21397.sol-HashBux-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_52(bool) = length > 0
RETURN TMP_52"];
}
// Function: 21397.sol-HashBux-mine(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
newTokens + totalSupply > 4e9

IRs:
TMP_7(uint256) = newTokens + totalSupply
TMP_8(bool) = TMP_7 > 4000000000
CONDITION TMP_8"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_9(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply += newTokens

IRs:
totalSupply(uint256) = totalSupply + newTokens"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances_[owner] += newTokens

IRs:
REF_1(uint256) -> balances_[owner]
REF_1(-> balances_) = REF_1 + newTokens"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(address(this),owner,newTokens,empty)

IRs:
TMP_10 = CONVERT this to address
Emit Transfer(TMP_10,owner,newTokens,empty)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
8->1;
}
// Function: 21397.sol-HashBux-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_53(bool) = msg.sender != owner
CONDITION TMP_53"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_54(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 21397.sol-HashBux-owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 21397.sol-HashBux-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_transfer(msg.sender,to,value,empty)

IRs:
INTERNAL_CALL, HashBux._transfer(address,address,uint256,bytes)(msg.sender,to,value,empty)"];
}
// Function: 21397.sol-HashBux-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(to)

IRs:
TMP_46(bool) = INTERNAL_CALL, HashBux.isContract(address)(to)
CONDITION TMP_46"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
transferToContract(to,value,data)

IRs:
TMP_47(bool) = INTERNAL_CALL, HashBux.transferToContract(address,uint256,bytes)(to,value,data)
RETURN TMP_47"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_transfer(msg.sender,to,value,data)

IRs:
INTERNAL_CALL, HashBux._transfer(address,address,uint256,bytes)(msg.sender,to,value,data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 21397.sol-HashBux-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,to,value,data)

IRs:
INTERNAL_CALL, HashBux._transfer(address,address,uint256,bytes)(msg.sender,to,value,data)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(to)

IRs:
TMP_39(bool) = INTERNAL_CALL, HashBux.isContract(address)(to)
CONDITION TMP_39"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
rx = ContractReceiver(to)

IRs:
TMP_40 = CONVERT to to ContractReceiver
rx(ContractReceiver) := TMP_40(ContractReceiver)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(rx.call.value(0)(bytes4(keccak256()(custom_fallback)),msg.sender,value,data))

IRs:
TMP_42(bytes32) = SOLIDITY_CALL keccak256()(custom_fallback)
TMP_43 = CONVERT TMP_42 to bytes4
TMP_44(bool) = LOW_LEVEL_CALL, dest:rx, function:call, arguments:['TMP_43', 'msg.sender', 'value', 'data'] value:0 
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 21397.sol-HashBux-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(value <= allowances_[from][msg.sender])

IRs:
REF_7(mapping(address => uint256)) -> allowances_[from]
REF_8(uint256) -> REF_7[msg.sender]
TMP_16(bool) = value <= REF_8
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowances_[from][msg.sender] -= value

IRs:
REF_9(mapping(address => uint256)) -> allowances_[from]
REF_10(uint256) -> REF_9[msg.sender]
REF_10(-> allowances_) = REF_10 - value"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_transfer(from,to,value,empty)

IRs:
INTERNAL_CALL, HashBux._transfer(address,address,uint256,bytes)(from,to,value,empty)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 21397.sol-HashBux-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,to,value,data)

IRs:
INTERNAL_CALL, HashBux._transfer(address,address,uint256,bytes)(msg.sender,to,value,data)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
rx = ContractReceiver(to)

IRs:
TMP_50 = CONVERT to to ContractReceiver
rx(ContractReceiver) := TMP_50(ContractReceiver)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rx.tokenFallback(msg.sender,value,data)

IRs:
HIGH_LEVEL_CALL, dest:rx(ContractReceiver), function:tokenFallback, arguments:['msg.sender', 'value', 'data']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 21397.sol-owned-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newowner

IRs:
owner(address) := newowner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
2->1;
}
// Function: 21397.sol-owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_1(bool) = msg.sender != owner
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_2(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 21397.sol-owned-owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 21397.sol-tokenRecipient-receiveApproval(address,uint256,bytes)
digraph{
}
}
