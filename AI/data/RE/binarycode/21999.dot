digraph G {
// Function: 21999.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 21999.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_0(bool) = msg.sender != owner
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_1(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 21999.sol-WalletWithEmergencyTransfer-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 21999.sol-WalletWithEmergencyTransfer-WalletWithEmergencyTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 21999.sol-WalletWithEmergencyTransfer-call(address,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
msg.value > 0

IRs:
TMP_11(bool) = msg.value > 0
CONDITION TMP_11"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
deposit()

IRs:
INTERNAL_CALL, WalletWithEmergencyTransfer.deposit()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(addr.call.value(amount)(data))

IRs:
TMP_14(bool) = LOW_LEVEL_CALL, dest:addr, function:call, arguments:['data'] value:amount 
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Call(msg.sender,addr,amount)

IRs:
Emit Call(msg.sender,addr,amount)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
6->1;
}
// Function: 21999.sol-WalletWithEmergencyTransfer-deposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_3(bool) = msg.value > 0
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Deposit(msg.sender,msg.value)

IRs:
Emit Deposit(msg.sender,msg.value)"];
}
// Function: 21999.sol-WalletWithEmergencyTransfer-emergencyTransfer(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(code == emergencyCode) && (msg.value == emergencyAmount) && (newOwner != address(0))

IRs:
TMP_19(bool) = code == emergencyCode
TMP_20(bool) = msg.value == emergencyAmount
TMP_21(bool) = TMP_19 && TMP_20
TMP_22 = CONVERT 0 to address
TMP_23(bool) = newOwner != TMP_22
TMP_24(bool) = TMP_21 && TMP_23
CONDITION TMP_24"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 21999.sol-WalletWithEmergencyTransfer-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
deposit()

IRs:
INTERNAL_CALL, WalletWithEmergencyTransfer.deposit()()"];
}
// Function: 21999.sol-WalletWithEmergencyTransfer-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_25(bool) = msg.sender != owner
CONDITION TMP_25"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_26(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 21999.sol-WalletWithEmergencyTransfer-setEmergencySecrets(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
emergencyCode = code

IRs:
emergencyCode(uint256) := code(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emergencyAmount = amount

IRs:
emergencyAmount(uint256) := amount(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 21999.sol-WalletWithEmergencyTransfer-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 21999.sol-WalletWithEmergencyTransfer-withdraw(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(amount <= this.balance)

IRs:
REF_0(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_6(bool) = amount <= REF_0
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
msg.sender.transfer(amount)

IRs:
Transfer dest:msg.sender value:amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Withdrawal(msg.sender,amount)

IRs:
Emit Withdrawal(msg.sender,amount)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
}
