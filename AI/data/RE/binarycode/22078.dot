digraph G {
// Function: 22078.sol-EIP20Token-allowance(address,address)
digraph{
}
// Function: 22078.sol-EIP20Token-approve(address,uint256)
digraph{
}
// Function: 22078.sol-EIP20Token-balanceOf(address)
digraph{
}
// Function: 22078.sol-EIP20Token-totalSupply()
digraph{
}
// Function: 22078.sol-EIP20Token-transfer(address,uint256)
digraph{
}
// Function: 22078.sol-EIP20Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 22078.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 22078.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_4(bool) = msg.sender == owner
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22078.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 22078.sol-RenderTokenInvestment1-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 22078.sol-RenderTokenInvestment1-approve_unwanted_tokens(EIP20Token,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token.approve(dest,value)

IRs:
TMP_30(bool) = HIGH_LEVEL_CALL, dest:token(EIP20Token), function:approve, arguments:['dest', 'value']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 22078.sol-RenderTokenInvestment1-emergency_withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender.call.gas(gas).value(address(this).balance)())

IRs:
TMP_33 = CONVERT this to address
TMP_34(uint256) = SOLIDITY_CALL balance(address)(TMP_33)
TMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_34 gas:gas
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 22078.sol-RenderTokenInvestment1-execute_transfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
major_fee = transfer_amount * 3 / 105

IRs:
TMP_11(uint256) = transfer_amount * 3
TMP_12(uint256) = TMP_11 / 105
major_fee(uint256) := TMP_12(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
minor_fee = transfer_amount * 2 / 105

IRs:
TMP_13(uint256) = transfer_amount * 2
TMP_14(uint256) = TMP_13 / 105
minor_fee(uint256) := TMP_14(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(major_partner_address.call.gas(gas).value(major_fee)())

IRs:
TMP_17(bool) = LOW_LEVEL_CALL, dest:major_partner_address, function:call, arguments:[] value:major_fee gas:gas
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(minor_partner_address.call.gas(gas).value(minor_fee)())

IRs:
TMP_21(bool) = LOW_LEVEL_CALL, dest:minor_partner_address, function:call, arguments:[] value:minor_fee gas:gas
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
investment_amount = transfer_amount - major_fee - minor_fee

IRs:
TMP_23(uint256) = transfer_amount - major_fee
TMP_24(uint256) = TMP_23 - minor_fee
investment_amount(uint256) := TMP_24(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(investment_address.call.gas(gas).value(investment_amount)())

IRs:
TMP_27(bool) = LOW_LEVEL_CALL, dest:investment_address, function:call, arguments:[] value:investment_amount gas:gas
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
}
// Function: 22078.sol-RenderTokenInvestment1-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
execute_transfer(msg.value)

IRs:
INTERNAL_CALL, RenderTokenInvestment1.execute_transfer(uint256)(msg.value)"];
}
// Function: 22078.sol-RenderTokenInvestment1-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_39(bool) = msg.sender == owner
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22078.sol-RenderTokenInvestment1-set_transfer_gas(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gas = transfer_gas

IRs:
gas(uint256) := transfer_gas(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 22078.sol-RenderTokenInvestment1-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
investment_address = 0x46dda95DEf0ddD0d9F6829352dB2622f27Fe5da7

IRs:
investment_address(address) := 404572572586884099883138252249579033327927451047(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
major_partner_address = 0x212286e36Ae998FAd27b627EB326107B3aF1FeD4

IRs:
major_partner_address(address) := 189166671206459967932268912229821782921130933972(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
minor_partner_address = 0x515962688858eD980EB2Db2b6fA2802D9f620C6d

IRs:
minor_partner_address(address) := 464421591334024447732858307454214894454088797293(address)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
gas = 1000

IRs:
gas(uint256) := 1000(uint256)"];
}
// Function: 22078.sol-RenderTokenInvestment1-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_6 = CONVERT 0 to address
TMP_7(bool) = newOwner != TMP_6
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
}
