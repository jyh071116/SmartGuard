digraph G {
// Function: 22608.sol-Caller-EFOcallBack(string)
digraph{
}
// Function: 22608.sol-EthernityFinancialOracle-EthernityFinancialOracle()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oracleAddress = msg.sender

IRs:
oracleAddress(address) := msg.sender(address)"];
}
// Function: 22608.sol-EthernityFinancialOracle-ban(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
users[_user].banned = true

IRs:
REF_40(EthernityFinancialOracle.User) -> users[_user]
REF_41(bool) -> REF_40.banned
REF_41(bool) (->users) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.onlyOwner()()"];
2->1;
}
// Function: 22608.sol-EthernityFinancialOracle-changeOracleAdd(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oracleAddress = _newOracleAdd

IRs:
oracleAddress(address) := _newOracleAdd(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.onlyOwner()()"];
2->1;
}
// Function: 22608.sol-EthernityFinancialOracle-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.onlyOwner()()"];
2->1;
}
// Function: 22608.sol-EthernityFinancialOracle-desBan(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
users[_user].banned = false

IRs:
REF_42(EthernityFinancialOracle.User) -> users[_user]
REF_43(bool) -> REF_42.banned
REF_43(bool) (->users) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.onlyOwner()()"];
2->1;
}
// Function: 22608.sol-EthernityFinancialOracle-emergencyFlush()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner.send(this.balance))

IRs:
REF_39(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_41 = SEND dest:owner value:REF_39
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.onlyOwner()()"];
2->1;
}
// Function: 22608.sol-EthernityFinancialOracle-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
receivePayment()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.receivePayment()()"];
}
// Function: 22608.sol-EthernityFinancialOracle-getBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
users[msg.sender].balance

IRs:
REF_20(EthernityFinancialOracle.User) -> users[msg.sender]
REF_21(uint256) -> REF_20.balance
RETURN REF_21"];
2[label="Node Type: RETURN 2

EXPRESSION:
_balance

IRs:
RETURN _balance"];
}
// Function: 22608.sol-EthernityFinancialOracle-getBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
users[_address].balance

IRs:
REF_22(EthernityFinancialOracle.User) -> users[_address]
REF_23(uint256) -> REF_22.balance
RETURN REF_23"];
2[label="Node Type: RETURN 2

EXPRESSION:
_balance

IRs:
RETURN _balance"];
}
// Function: 22608.sol-EthernityFinancialOracle-getPrice(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_gasPrice == 0

IRs:
TMP_15(bool) = _gasPrice == 0
CONDITION TMP_15"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_gasPrice = gasPrice

IRs:
_gasPrice(uint256) := gasPrice(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_gasLimit == 0

IRs:
TMP_16(bool) = _gasLimit == 0
CONDITION TMP_16"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_gasLimit = gasLimit

IRs:
_gasLimit(uint256) := gasLimit(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(_gasLimit * _gasPrice / _gasLimit == _gasPrice)

IRs:
TMP_17(uint256) = _gasLimit * _gasPrice
TMP_18(uint256) = TMP_17 / _gasLimit
TMP_19(bool) = TMP_18 == _gasPrice
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
feePrice + _gasLimit * _gasPrice

IRs:
TMP_21(uint256) = _gasLimit * _gasPrice
TMP_22(uint256) = feePrice + TMP_21
RETURN TMP_22"];
9[label="Node Type: RETURN 9

EXPRESSION:
_price

IRs:
RETURN _price"];
}
// Function: 22608.sol-EthernityFinancialOracle-getRefund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == owner

IRs:
TMP_10(bool) = msg.sender == owner
CONDITION TMP_10"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
a = collectedFee

IRs:
a(uint256) := collectedFee(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
collectedFee = 0

IRs:
collectedFee(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(owner.send(a))

IRs:
TMP_11 = SEND dest:owner value:a
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
4->8;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
b = users[msg.sender].balance

IRs:
REF_13(EthernityFinancialOracle.User) -> users[msg.sender]
REF_14(uint256) -> REF_13.balance
b(uint256) := REF_14(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
users[msg.sender].balance = 0

IRs:
REF_15(EthernityFinancialOracle.User) -> users[msg.sender]
REF_16(uint256) -> REF_15.balance
REF_16(uint256) (->users) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(msg.sender.send(b))

IRs:
TMP_13 = SEND dest:msg.sender value:b
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
7->8;
8[label="Node Type: END_IF 8
"];
}
// Function: 22608.sol-EthernityFinancialOracle-getResponse()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
users[msg.sender].response

IRs:
REF_18(EthernityFinancialOracle.User) -> users[msg.sender]
REF_19(string) -> REF_18.response
RETURN REF_19"];
2[label="Node Type: RETURN 2

EXPRESSION:
_response

IRs:
RETURN _response"];
}
// Function: 22608.sol-EthernityFinancialOracle-notBanned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(users[msg.sender].banned == false)

IRs:
REF_44(EthernityFinancialOracle.User) -> users[msg.sender]
REF_45(bool) -> REF_44.banned
TMP_54(bool) = REF_45 == False
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22608.sol-EthernityFinancialOracle-onlyOracle()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == oracleAddress)

IRs:
TMP_48(bool) = msg.sender == oracleAddress
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22608.sol-EthernityFinancialOracle-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_46(bool) = msg.sender == owner
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22608.sol-EthernityFinancialOracle-onlyOwnerOrOracle()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == oracleAddress)

IRs:
TMP_50(bool) = msg.sender == owner
TMP_51(bool) = msg.sender == oracleAddress
TMP_52(bool) = TMP_50 || TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22608.sol-EthernityFinancialOracle-payToOracle(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_gasPrice == 0

IRs:
TMP_28(bool) = _gasPrice == 0
CONDITION TMP_28"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_gasPrice = gasPrice

IRs:
_gasPrice(uint256) := gasPrice(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_gasLimit == 0

IRs:
TMP_29(bool) = _gasLimit == 0
CONDITION TMP_29"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_gasLimit = gasLimit

IRs:
_gasLimit(uint256) := gasLimit(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
gp = getPrice(_gasPrice,_gasLimit)

IRs:
TMP_30(uint256) = INTERNAL_CALL, EthernityFinancialOracle.getPrice(uint256,uint256)(_gasPrice,_gasLimit)
gp(uint256) := TMP_30(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(users[msg.sender].balance >= gp)

IRs:
REF_33(EthernityFinancialOracle.User) -> users[msg.sender]
REF_34(uint256) -> REF_33.balance
TMP_31(bool) = REF_34 >= gp
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
collectedFee += feePrice

IRs:
collectedFee(uint256) = collectedFee + feePrice"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
users[msg.sender].balance -= gp

IRs:
REF_35(EthernityFinancialOracle.User) -> users[msg.sender]
REF_36(uint256) -> REF_35.balance
REF_36(-> users) = REF_36 - gp"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(oracleAddress.send(gp - feePrice))

IRs:
TMP_33(uint256) = gp - feePrice
TMP_34 = SEND dest:oracleAddress value:TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_gasPrice,_gasLimit)

IRs:
RETURN _gasPrice,_gasLimit"];
13[label="Node Type: RETURN 13

EXPRESSION:
(_price,_limit)

IRs:
RETURN _price,_limit"];
}
// Function: 22608.sol-EthernityFinancialOracle-receivePayment()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
users[msg.sender].balance = users[msg.sender].balance + msg.value

IRs:
REF_46(EthernityFinancialOracle.User) -> users[msg.sender]
REF_47(uint256) -> REF_46.balance
REF_48(EthernityFinancialOracle.User) -> users[msg.sender]
REF_49(uint256) -> REF_48.balance
TMP_56(uint256) = REF_49 + msg.value
REF_47(uint256) (->users) := TMP_56(uint256)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22608.sol-EthernityFinancialOracle-requestCoinToUSD(string,bool,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
(_gasPrice,_gasLimit) = payToOracle(_gasPrice,_gasLimit)

IRs:
TUPLE_1(uint256,uint256) = INTERNAL_CALL, EthernityFinancialOracle.payToOracle(uint256,uint256)(_gasPrice,_gasLimit)
_gasPrice(uint256)= UNPACK TUPLE_1 index: 0 
_gasLimit(uint256)= UNPACK TUPLE_1 index: 1 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
users[msg.sender].callBack = _callBack

IRs:
REF_4(EthernityFinancialOracle.User) -> users[msg.sender]
REF_5(bool) -> REF_4.callBack
REF_5(bool) (->users) := _callBack(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
users[msg.sender].asked = true

IRs:
REF_6(EthernityFinancialOracle.User) -> users[msg.sender]
REF_7(bool) -> REF_6.asked
REF_7(bool) (->users) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Request(_coin,USD,msg.sender,_gasPrice,_gasLimit)

IRs:
Emit Request(_coin,USD,msg.sender,_gasPrice,_gasLimit)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
receivePayment()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.receivePayment()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notBanned()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.notBanned()()"];
6->1;
}
// Function: 22608.sol-EthernityFinancialOracle-requestEtherToUSD(bool,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
(_gasPrice,_gasLimit) = payToOracle(_gasPrice,_gasLimit)

IRs:
TUPLE_0(uint256,uint256) = INTERNAL_CALL, EthernityFinancialOracle.payToOracle(uint256,uint256)(_gasPrice,_gasLimit)
_gasPrice(uint256)= UNPACK TUPLE_0 index: 0 
_gasLimit(uint256)= UNPACK TUPLE_0 index: 1 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
users[msg.sender].callBack = _callBack

IRs:
REF_0(EthernityFinancialOracle.User) -> users[msg.sender]
REF_1(bool) -> REF_0.callBack
REF_1(bool) (->users) := _callBack(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
users[msg.sender].asked = true

IRs:
REF_2(EthernityFinancialOracle.User) -> users[msg.sender]
REF_3(bool) -> REF_2.asked
REF_3(bool) (->users) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Request(ETH,USD,msg.sender,_gasPrice,_gasLimit)

IRs:
Emit Request(ETH,USD,msg.sender,_gasPrice,_gasLimit)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
receivePayment()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.receivePayment()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notBanned()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.notBanned()()"];
6->1;
}
// Function: 22608.sol-EthernityFinancialOracle-requestRate(string,string,bool,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
(_gasPrice,_gasLimit) = payToOracle(_gasPrice,_gasLimit)

IRs:
TUPLE_2(uint256,uint256) = INTERNAL_CALL, EthernityFinancialOracle.payToOracle(uint256,uint256)(_gasPrice,_gasLimit)
_gasPrice(uint256)= UNPACK TUPLE_2 index: 0 
_gasLimit(uint256)= UNPACK TUPLE_2 index: 1 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
users[msg.sender].callBack = _callBack

IRs:
REF_8(EthernityFinancialOracle.User) -> users[msg.sender]
REF_9(bool) -> REF_8.callBack
REF_9(bool) (->users) := _callBack(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
users[msg.sender].asked = true

IRs:
REF_10(EthernityFinancialOracle.User) -> users[msg.sender]
REF_11(bool) -> REF_10.asked
REF_11(bool) (->users) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Request(_coin,_againstCoin,msg.sender,_gasPrice,_gasLimit)

IRs:
Emit Request(_coin,_againstCoin,msg.sender,_gasPrice,_gasLimit)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
receivePayment()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.receivePayment()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notBanned()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.notBanned()()"];
6->1;
}
// Function: 22608.sol-EthernityFinancialOracle-setFeePrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
feePrice = _feePrice

IRs:
feePrice(uint256) := _feePrice(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.onlyOwner()()"];
2->1;
}
// Function: 22608.sol-EthernityFinancialOracle-setGasLimit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gasLimit = _gasLimit

IRs:
gasLimit(uint256) := _gasLimit(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwnerOrOracle()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.onlyOwnerOrOracle()()"];
2->1;
}
// Function: 22608.sol-EthernityFinancialOracle-setGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gasPrice = _gasPrice

IRs:
gasPrice(uint256) := _gasPrice(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwnerOrOracle()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.onlyOwnerOrOracle()()"];
2->1;
}
// Function: 22608.sol-EthernityFinancialOracle-setResponse(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(users[_user].asked)

IRs:
REF_24(EthernityFinancialOracle.User) -> users[_user]
REF_25(bool) -> REF_24.asked
TMP_23(None) = SOLIDITY_CALL require(bool)(REF_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
users[_user].asked = false

IRs:
REF_26(EthernityFinancialOracle.User) -> users[_user]
REF_27(bool) -> REF_26.asked
REF_27(bool) (->users) := False(bool)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
users[_user].callBack

IRs:
REF_28(EthernityFinancialOracle.User) -> users[_user]
REF_29(bool) -> REF_28.callBack
CONDITION REF_29"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_caller = Caller(_user)

IRs:
TMP_24 = CONVERT _user to Caller
_caller(Caller) := TMP_24(Caller)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_caller.EFOcallBack(_result)

IRs:
HIGH_LEVEL_CALL, dest:_caller(Caller), function:EFOcallBack, arguments:['_result']  "];
5->8;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
users[_user].response = _result

IRs:
REF_31(EthernityFinancialOracle.User) -> users[_user]
REF_32(string) -> REF_31.response
REF_32(string) (->users) := _result(string)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Response(_user,_result)

IRs:
Emit Response(_user,_result)"];
7->8;
8[label="Node Type: END_IF 8
"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOracle()

IRs:
MODIFIER_CALL, EthernityFinancialOracle.onlyOracle()()"];
9->1;
}
// Function: 22608.sol-EthernityFinancialOracle-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
feePrice = 500000000000000

IRs:
feePrice(uint256) := 500000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
gasLimit = 50000

IRs:
gasLimit(uint256) := 50000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
gasPrice = 40000000000

IRs:
gasPrice(uint256) := 40000000000(uint256)"];
}
}
