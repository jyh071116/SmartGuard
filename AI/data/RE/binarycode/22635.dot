digraph G {
// Function: 22635.sol-DSSafeAddSub-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! safeToAdd(a,b)

IRs:
TMP_875(bool) = INTERNAL_CALL, DSSafeAddSub.safeToAdd(uint256,uint256)(a,b)
TMP_876 = UnaryType.BANG TMP_875 
CONDITION TMP_876"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
a + b

IRs:
TMP_877(uint256) = a + b
RETURN TMP_877"];
}
// Function: 22635.sol-DSSafeAddSub-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! safeToSubtract(a,b)

IRs:
TMP_879(bool) = INTERNAL_CALL, DSSafeAddSub.safeToSubtract(uint256,uint256)(a,b)
TMP_880 = UnaryType.BANG TMP_879 
CONDITION TMP_880"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
a - b

IRs:
TMP_881(uint256) = a - b
RETURN TMP_881"];
}
// Function: 22635.sol-DSSafeAddSub-safeToAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(a + b >= a)

IRs:
TMP_873(uint256) = a + b
TMP_874(bool) = TMP_873 >= a
RETURN TMP_874"];
}
// Function: 22635.sol-DSSafeAddSub-safeToSubtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(b <= a)

IRs:
TMP_878(bool) = b <= a
RETURN TMP_878"];
}
// Function: 22635.sol-LuckyETH-LuckyETH()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
treasury = msg.sender

IRs:
treasury(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_1569(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS)

IRs:
TMP_1570(bytes1) = proofType_TLSNotary | proofStorage_IPFS
INTERNAL_CALL, usingOraclize.oraclize_setProof(bytes1)(TMP_1570)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownerSetMinBet(100000000000000000)

IRs:
INTERNAL_CALL, LuckyETH.ownerSetMinBet(uint256)(100000000000000000)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
gasForOraclize = 255000

IRs:
gasForOraclize(uint32) := 255000(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclize_setCustomGasPrice(20000000000)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setCustomGasPrice(uint256)(20000000000)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isCaissaSet = false

IRs:
isCaissaSet(bool) := False(bool)"];
}
// Function: 22635.sol-LuckyETH-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_917 = new bytes(0)
INTERNAL_CALL, LuckyETH.__callback(bytes32,string,bytes)(myid,result,TMP_917)"];
}
// Function: 22635.sol-LuckyETH-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->50;
1[label="Node Type: IF 1

EXPRESSION:
playerAddress[myid] == 0x0

IRs:
REF_1031(address) -> playerAddress[myid]
TMP_1643(bool) = REF_1031 == 0
CONDITION TMP_1643"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
refundFlag = false

IRs:
refundFlag(bool) := False(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
bytes(result).length > 10

IRs:
TMP_1644 = CONVERT result to bytes
REF_1032 -> LENGTH TMP_1644
TMP_1645(bool) = REF_1032 > 10
CONDITION TMP_1645"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
refundFlag = true

IRs:
refundFlag(bool) := True(bool)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
playerRandomResult[myid] = parseInt(result)

IRs:
REF_1033(uint256) -> playerRandomResult[myid]
TMP_1646(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string)(result)
REF_1033(uint256) (->playerRandomResult) := TMP_1646(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
playerDieResult[myid] = playerRandomResult[myid]

IRs:
REF_1034(uint256) -> playerDieResult[myid]
REF_1035(uint256) -> playerRandomResult[myid]
REF_1034(uint256) (->playerDieResult) := REF_1035(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
playerTempAddress[myid] = playerAddress[myid]

IRs:
REF_1036(address) -> playerTempAddress[myid]
REF_1037(address) -> playerAddress[myid]
REF_1036(address) (->playerTempAddress) := REF_1037(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete playerAddress[myid]

IRs:
REF_1038(address) -> playerAddress[myid]
playerAddress = delete REF_1038 "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
playerTempReward[myid] = playerProfit[myid]

IRs:
REF_1039(uint256) -> playerTempReward[myid]
REF_1040(uint256) -> playerProfit[myid]
REF_1039(uint256) (->playerTempReward) := REF_1040(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
playerProfit[myid] = 0

IRs:
REF_1041(uint256) -> playerProfit[myid]
REF_1041(uint256) (->playerProfit) := 0(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
maxPendingPayouts = safeSub(maxPendingPayouts,playerTempReward[myid])

IRs:
REF_1042(uint256) -> playerTempReward[myid]
TMP_1647(uint256) = INTERNAL_CALL, DSSafeAddSub.safeSub(uint256,uint256)(maxPendingPayouts,REF_1042)
maxPendingPayouts(uint256) := TMP_1647(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
playerTempBetValue[myid] = playerBetValue[myid]

IRs:
REF_1043(uint256) -> playerTempBetValue[myid]
REF_1044(uint256) -> playerBetValue[myid]
REF_1043(uint256) (->playerTempBetValue) := REF_1044(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
playerBetValue[myid] = 0

IRs:
REF_1045(uint256) -> playerBetValue[myid]
REF_1045(uint256) (->playerBetValue) := 0(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
playerDieResult[myid] == 0 || playerRandomResult[myid] == 0 || refundFlag == true

IRs:
REF_1046(uint256) -> playerDieResult[myid]
TMP_1648(bool) = REF_1046 == 0
REF_1047(uint256) -> playerRandomResult[myid]
TMP_1649(bool) = REF_1047 == 0
TMP_1650(bool) = TMP_1648 || TMP_1649
TMP_1651(bool) = refundFlag == True
TMP_1652(bool) = TMP_1650 || TMP_1651
CONDITION TMP_1652"];
17->18[label="True"];
17->22[label="False"];
18[label="Node Type: IF 18

EXPRESSION:
! playerTempAddress[myid].send(playerTempBetValue[myid])

IRs:
REF_1048(address) -> playerTempAddress[myid]
REF_1050(uint256) -> playerTempBetValue[myid]
TMP_1653 = SEND dest:REF_1048 value:REF_1050
TMP_1654 = UnaryType.BANG TMP_1653 
CONDITION TMP_1654"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
playerPendingWithdrawals[playerTempAddress[myid]] = safeAdd(playerPendingWithdrawals[playerTempAddress[myid]],playerTempBetValue[myid])

IRs:
REF_1051(address) -> playerTempAddress[myid]
REF_1052(uint256) -> playerPendingWithdrawals[REF_1051]
REF_1053(address) -> playerTempAddress[myid]
REF_1054(uint256) -> playerPendingWithdrawals[REF_1053]
REF_1055(uint256) -> playerTempBetValue[myid]
TMP_1655(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(REF_1054,REF_1055)
REF_1052(uint256) (->playerPendingWithdrawals) := TMP_1655(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: RETURN 21
"];
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
playerDieResult[myid] == 1

IRs:
REF_1056(uint256) -> playerDieResult[myid]
TMP_1656(bool) = REF_1056 == 1
CONDITION TMP_1656"];
23->24[label="True"];
23->36[label="False"];
24[label="Node Type: NEW VARIABLE 24

EXPRESSION:
cutValue1 = playerTempReward[myid] / 100

IRs:
REF_1057(uint256) -> playerTempReward[myid]
TMP_1657(uint256) = REF_1057 / 100
cutValue1(uint256) := TMP_1657(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
playerTempReward[myid] = safeSub(playerTempReward[myid],cutValue1)

IRs:
REF_1058(uint256) -> playerTempReward[myid]
REF_1059(uint256) -> playerTempReward[myid]
TMP_1658(uint256) = INTERNAL_CALL, DSSafeAddSub.safeSub(uint256,uint256)(REF_1059,cutValue1)
REF_1058(uint256) (->playerTempReward) := TMP_1658(uint256)"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
! playerTempAddress[myid].send(playerTempReward[myid])

IRs:
REF_1060(address) -> playerTempAddress[myid]
REF_1062(uint256) -> playerTempReward[myid]
TMP_1659 = SEND dest:REF_1060 value:REF_1062
TMP_1660 = UnaryType.BANG TMP_1659 
CONDITION TMP_1660"];
26->27[label="True"];
26->28[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
playerPendingWithdrawals[playerTempAddress[myid]] = safeAdd(playerPendingWithdrawals[playerTempAddress[myid]],playerTempReward[myid])

IRs:
REF_1063(address) -> playerTempAddress[myid]
REF_1064(uint256) -> playerPendingWithdrawals[REF_1063]
REF_1065(address) -> playerTempAddress[myid]
REF_1066(uint256) -> playerPendingWithdrawals[REF_1065]
REF_1067(uint256) -> playerTempReward[myid]
TMP_1661(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(REF_1066,REF_1067)
REF_1064(uint256) (->playerPendingWithdrawals) := TMP_1661(uint256)"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
playerFromAddr[myid] == address(0)

IRs:
REF_1068(address) -> playerFromAddr[myid]
TMP_1662 = CONVERT 0 to address
TMP_1663(bool) = REF_1068 == TMP_1662
CONDITION TMP_1663"];
29->30[label="True"];
29->31[label="False"];
30[label="Node Type: RETURN 30
"];
31[label="Node Type: END_IF 31
"];
31->32;
32[label="Node Type: IF 32

EXPRESSION:
! playerFromAddr[myid].send(playerTempBetValue[myid] * 5 / 1000)

IRs:
REF_1069(address) -> playerFromAddr[myid]
REF_1071(uint256) -> playerTempBetValue[myid]
TMP_1664(uint256) = REF_1071 * 5
TMP_1665(uint256) = TMP_1664 / 1000
TMP_1666 = SEND dest:REF_1069 value:TMP_1665
TMP_1667 = UnaryType.BANG TMP_1666 
CONDITION TMP_1667"];
32->33[label="True"];
32->34[label="False"];
33[label="Node Type: EXPRESSION 33

EXPRESSION:
playerPendingWithdrawals[playerFromAddr[myid]] = safeAdd(playerPendingWithdrawals[playerFromAddr[myid]],playerTempBetValue[myid] * 5 / 1000)

IRs:
REF_1072(address) -> playerFromAddr[myid]
REF_1073(uint256) -> playerPendingWithdrawals[REF_1072]
REF_1074(address) -> playerFromAddr[myid]
REF_1075(uint256) -> playerPendingWithdrawals[REF_1074]
REF_1076(uint256) -> playerTempBetValue[myid]
TMP_1668(uint256) = REF_1076 * 5
TMP_1669(uint256) = TMP_1668 / 1000
TMP_1670(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(REF_1075,TMP_1669)
REF_1073(uint256) (->playerPendingWithdrawals) := TMP_1670(uint256)"];
33->34;
34[label="Node Type: END_IF 34
"];
34->35;
35[label="Node Type: RETURN 35
"];
36[label="Node Type: END_IF 36
"];
36->37;
37[label="Node Type: IF 37

EXPRESSION:
playerDieResult[myid] != 1

IRs:
REF_1077(uint256) -> playerDieResult[myid]
TMP_1671(bool) = REF_1077 != 1
CONDITION TMP_1671"];
37->38[label="True"];
37->49[label="False"];
38[label="Node Type: NEW VARIABLE 38

EXPRESSION:
cutValue2 = playerTempBetValue[myid] * 5 / 1000

IRs:
REF_1078(uint256) -> playerTempBetValue[myid]
TMP_1672(uint256) = REF_1078 * 5
TMP_1673(uint256) = TMP_1672 / 1000
cutValue2(uint256) := TMP_1673(uint256)"];
38->39;
39[label="Node Type: IF 39

EXPRESSION:
! playerTempAddress[myid].send(1)

IRs:
REF_1079(address) -> playerTempAddress[myid]
TMP_1674 = SEND dest:REF_1079 value:1
TMP_1675 = UnaryType.BANG TMP_1674 
CONDITION TMP_1675"];
39->40[label="True"];
39->41[label="False"];
40[label="Node Type: EXPRESSION 40

EXPRESSION:
playerPendingWithdrawals[playerTempAddress[myid]] = safeAdd(playerPendingWithdrawals[playerTempAddress[myid]],1)

IRs:
REF_1081(address) -> playerTempAddress[myid]
REF_1082(uint256) -> playerPendingWithdrawals[REF_1081]
REF_1083(address) -> playerTempAddress[myid]
REF_1084(uint256) -> playerPendingWithdrawals[REF_1083]
TMP_1676(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(REF_1084,1)
REF_1082(uint256) (->playerPendingWithdrawals) := TMP_1676(uint256)"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: IF 42

EXPRESSION:
playerFromAddr[myid] == address(0)

IRs:
REF_1085(address) -> playerFromAddr[myid]
TMP_1677 = CONVERT 0 to address
TMP_1678(bool) = REF_1085 == TMP_1677
CONDITION TMP_1678"];
42->43[label="True"];
42->44[label="False"];
43[label="Node Type: RETURN 43
"];
44[label="Node Type: END_IF 44
"];
44->45;
45[label="Node Type: IF 45

EXPRESSION:
! playerFromAddr[myid].send(cutValue2)

IRs:
REF_1086(address) -> playerFromAddr[myid]
TMP_1679 = SEND dest:REF_1086 value:cutValue2
TMP_1680 = UnaryType.BANG TMP_1679 
CONDITION TMP_1680"];
45->46[label="True"];
45->47[label="False"];
46[label="Node Type: EXPRESSION 46

EXPRESSION:
playerPendingWithdrawals[playerFromAddr[myid]] = safeAdd(playerPendingWithdrawals[playerFromAddr[myid]],cutValue2)

IRs:
REF_1088(address) -> playerFromAddr[myid]
REF_1089(uint256) -> playerPendingWithdrawals[REF_1088]
REF_1090(address) -> playerFromAddr[myid]
REF_1091(uint256) -> playerPendingWithdrawals[REF_1090]
TMP_1681(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(REF_1091,cutValue2)
REF_1089(uint256) (->playerPendingWithdrawals) := TMP_1681(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: RETURN 48
"];
49[label="Node Type: END_IF 49
"];
50[label="Node Type: EXPRESSION 50

EXPRESSION:
onlyOraclize()

IRs:
MODIFIER_CALL, LuckyETH.onlyOraclize()()"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
payoutsAreActive()

IRs:
MODIFIER_CALL, LuckyETH.payoutsAreActive()()"];
51->1;
}
// Function: 22635.sol-LuckyETH-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_950 -> LENGTH arr
arrlen(uint256) := REF_950(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_1373(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_1373(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_1374(bool) = i < arrlen
CONDITION TMP_1374"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_951(bytes) -> elemArray[i]
REF_952(bytes) -> arr[i]
TMP_1375 = CONVERT REF_952 to bytes
REF_951(bytes) (->elemArray) := TMP_1375(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_953(bytes) -> elemArray[i]
REF_954 -> LENGTH REF_953
REF_955(bytes) -> elemArray[i]
REF_956 -> LENGTH REF_955
TMP_1376(uint256) = REF_956 - 1
TMP_1377(uint256) = TMP_1376 / 23
TMP_1378(uint256) = REF_954 + TMP_1377
TMP_1379(uint256) = TMP_1378 + 3
outputlen(uint256) = outputlen + TMP_1379"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1380(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_1381(uint256) = arrlen + 128
cborlen(uint256) := TMP_1381(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_1382 = CONVERT cborlen to bytes1
REF_957 -> LENGTH TMP_1382
outputlen(uint256) = outputlen + REF_957"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_1384 = new bytes(outputlen)
res(bytes) := TMP_1384(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_1385 = CONVERT cborlen to bytes1
REF_958 -> LENGTH TMP_1385
TMP_1386(bool) = REF_958 > ctr
CONDITION TMP_1386"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_959(None) -> res[ctr]
TMP_1387 = CONVERT cborlen to bytes1
REF_960(None) -> TMP_1387[ctr]
REF_959(None) (->res) := REF_960(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_1388(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_1389(bool) = i < arrlen
CONDITION TMP_1389"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_961(uint256) -> res[ctr]
REF_961(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_1390(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_962(bytes) -> elemArray[i]
REF_963 -> LENGTH REF_962
TMP_1391(bool) = x < REF_963
CONDITION TMP_1391"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_1392(uint256) = x % 23
TMP_1393(bool) = TMP_1392 == 0
CONDITION TMP_1393"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_1394 = CONVERT elemcborlen to bytes1
REF_964 -> LENGTH TMP_1394
TMP_1395(uint256) = ctr - lctr
TMP_1396(bool) = REF_964 > TMP_1395
CONDITION TMP_1396"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_965(None) -> res[ctr]
TMP_1397 = CONVERT elemcborlen to bytes1
TMP_1398(uint256) = ctr - lctr
REF_966(None) -> TMP_1397[TMP_1398]
REF_965(None) (->res) := REF_966(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_1399(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_967(None) -> res[ctr]
REF_968(bytes) -> elemArray[i]
REF_969(None) -> REF_968[x]
REF_967(None) (->res) := REF_969(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_1400(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_1401(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_970(uint256) -> res[ctr]
REF_970(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_1402(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_1403(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_971(bytes) -> elemArray[i]
REF_972 -> LENGTH REF_971
TMP_1404(uint256) = REF_972 - x
TMP_1405(bool) = TMP_1404 >= 24
CONDITION TMP_1405"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_973(bytes) -> elemArray[i]
REF_974 -> LENGTH REF_973
TMP_1406(uint256) = REF_974 - x
elemcborlen(uint256) := TMP_1406(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 22635.sol-LuckyETH-betIsValid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_betSize < minBet || _playerNumber < minNumber || _playerNumber > maxNumber

IRs:
TMP_1737(bool) = _betSize < minBet
TMP_1738(bool) = _playerNumber < minNumber
TMP_1739(bool) = TMP_1737 || TMP_1738
TMP_1740(bool) = _playerNumber > maxNumber
TMP_1741(bool) = TMP_1739 || TMP_1740
CONDITION TMP_1741"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 22635.sol-LuckyETH-char(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
b < 10

IRs:
TMP_1599(bool) = b < 10
CONDITION TMP_1599"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
bytes1(uint8(b) + 0x30)

IRs:
TMP_1600 = CONVERT b to uint8
TMP_1601(uint8) = TMP_1600 + 48
TMP_1602 = CONVERT TMP_1601 to bytes1
RETURN TMP_1602"];
3[label="Node Type: RETURN 3

EXPRESSION:
bytes1(uint8(b) + 0x57)

IRs:
TMP_1603 = CONVERT b to uint8
TMP_1604(uint8) = TMP_1603 + 87
TMP_1605 = CONVERT TMP_1604 to bytes1
RETURN TMP_1605"];
5[label="Node Type: RETURN 5

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 22635.sol-LuckyETH-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_1557(uint256) = length + toOffset
minLength(uint256) := TMP_1557(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
to.length < minLength

IRs:
REF_1003 -> LENGTH to
TMP_1558(bool) = REF_1003 < minLength
CONDITION TMP_1558"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_1559(uint256) = 32 + fromOffset
i(uint256) := TMP_1559(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_1560(uint256) = 32 + toOffset
j(uint256) := TMP_1560(uint256)"];
6->7;
7[label="Node Type: BEGIN_LOOP 7
"];
7->8;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_1561(uint256) = 32 + fromOffset
TMP_1562(uint256) = TMP_1561 + length
TMP_1563(bool) = i < TMP_1562
CONDITION TMP_1563"];
8->9[label="True"];
8->13[label="False"];
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
12->8;
13[label="Node Type: END_LOOP 13
"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 22635.sol-LuckyETH-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_1725(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1726 = CONVERT TMP_1725 to OraclizeI
oraclize(OraclizeI) := TMP_1726(OraclizeI)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 22635.sol-LuckyETH-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_1004 -> LENGTH sig
TMP_1564(bool) = REF_1004 != 65
CONDITION TMP_1564"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_1565(bool) = v < 27
CONDITION TMP_1565"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_1566(bool) = v != 27
TMP_1567(bool) = v != 28
TMP_1568(bool) = TMP_1566 && TMP_1567
CONDITION TMP_1568"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_5(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_5"];
}
// Function: 22635.sol-LuckyETH-encrypt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isCaissaSet == true)

IRs:
TMP_1611(bool) = isCaissaSet == True
TMP_1612(None) = SOLIDITY_CALL require(bool)(TMP_1611)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
v = bytes(_v)

IRs:
TMP_1613 = CONVERT _v to bytes
v(bytes) := TMP_1613(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
len = v.length

IRs:
REF_1011 -> LENGTH v
len(uint256) := REF_1011(uint256)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->12;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < len

IRs:
TMP_1614(bool) = i < len
CONDITION TMP_1614"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
caissa[v[i]] != 0

IRs:
REF_1012(None) -> v[i]
REF_1013(bytes1) -> caissa[REF_1012]
TMP_1615(bool) = REF_1013 != 0
CONDITION TMP_1615"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
v[i] = caissa[v[i]]

IRs:
REF_1014(bytes1) -> v[i]
REF_1015(None) -> v[i]
REF_1016(bytes1) -> caissa[REF_1015]
REF_1014(bytes1) (->v) := REF_1016(bytes1)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_1616(uint256) := i(uint256)
i(uint256) = i + 1"];
11->7;
12[label="Node Type: RETURN 12

EXPRESSION:
string(v)

IRs:
TMP_1617 = CONVERT v to string
RETURN TMP_1617"];
}
// Function: 22635.sol-LuckyETH-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
onlyTreasury()

IRs:
MODIFIER_CALL, LuckyETH.onlyTreasury()()"];
}
// Function: 22635.sol-LuckyETH-gameIsActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
gamePaused == true

IRs:
TMP_1742(bool) = gamePaused == True
CONDITION TMP_1742"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 22635.sol-LuckyETH-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 22635.sol-LuckyETH-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_1254 = CONVERT _haystack to bytes
h(bytes) := TMP_1254(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_1255 = CONVERT _needle to bytes
n(bytes) := TMP_1255(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_886 -> LENGTH h
TMP_1256(bool) = REF_886 < 1
REF_887 -> LENGTH n
TMP_1257(bool) = REF_887 < 1
TMP_1258(bool) = TMP_1256 || TMP_1257
REF_888 -> LENGTH n
REF_889 -> LENGTH h
TMP_1259(bool) = REF_888 > REF_889
TMP_1260(bool) = TMP_1258 || TMP_1259
CONDITION TMP_1260"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_1261(uint256) = 0 - 1
RETURN TMP_1261"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_890 -> LENGTH h
TMP_1262(uint256) = 2 ** 128
TMP_1263(uint256) = TMP_1262 - 1
TMP_1264(bool) = REF_890 > TMP_1263
CONDITION TMP_1264"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_1265(uint256) = 0 - 1
RETURN TMP_1265"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_891 -> LENGTH h
TMP_1266(bool) = i < REF_891
CONDITION TMP_1266"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_892(None) -> h[i]
REF_893(None) -> n[0]
TMP_1267(bool) = REF_892 == REF_893
CONDITION TMP_1267"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_894 -> LENGTH n
TMP_1268(bool) = subindex < REF_894
TMP_1269(uint256) = i + subindex
REF_895 -> LENGTH h
TMP_1270(bool) = TMP_1269 < REF_895
TMP_1271(bool) = TMP_1268 && TMP_1270
TMP_1272(uint256) = i + subindex
REF_896(None) -> h[TMP_1272]
REF_897(None) -> n[subindex]
TMP_1273(bool) = REF_896 == REF_897
TMP_1274(bool) = TMP_1271 && TMP_1273
CONDITION TMP_1274"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_1275(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_898 -> LENGTH n
TMP_1276(bool) = subindex == REF_898
CONDITION TMP_1276"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_1277 = CONVERT i to int256
RETURN TMP_1277"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_1278(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_1279(uint256) = 0 - 1
RETURN TMP_1279"];
}
// Function: 22635.sol-LuckyETH-matchBytes32Prefix(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < prefix.length

IRs:
REF_991 -> LENGTH prefix
TMP_1487(bool) = i < REF_991
CONDITION TMP_1487"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_992(None) -> content[i]
REF_993(None) -> prefix[i]
TMP_1488(bool) = REF_992 != REF_993
CONDITION TMP_1488"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_1489(uint8) := i(uint8)
i(uint8) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 22635.sol-LuckyETH-onlyOraclize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != oraclize_cbAddress()

IRs:
TMP_1744(address) = INTERNAL_CALL, usingOraclize.oraclize_cbAddress()()
TMP_1745(bool) = msg.sender != TMP_1744
CONDITION TMP_1745"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 22635.sol-LuckyETH-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_1746(bool) = msg.sender != owner
CONDITION TMP_1746"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 22635.sol-LuckyETH-onlyTreasury()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != treasury

IRs:
TMP_1747(bool) = msg.sender != treasury
CONDITION TMP_1747"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 22635.sol-LuckyETH-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_1713 = CONVERT OAR to address
TMP_1714(bool) = TMP_1713 == 0
TMP_1715 = CONVERT OAR to address
TMP_1716(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_1715)
TMP_1717(bool) = TMP_1716 == 0
TMP_1718(bool) = TMP_1714 || TMP_1717
CONDITION TMP_1718"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_1719(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_1720 = CONVERT oraclize to address
TMP_1721(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1722(bool) = TMP_1720 != TMP_1721
CONDITION TMP_1722"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_1723(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1724 = CONVERT TMP_1723 to OraclizeI
oraclize(OraclizeI) := TMP_1724(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 22635.sol-LuckyETH-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_1205(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_1205"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 22635.sol-LuckyETH-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_921(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_921"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_923(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_923"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_nbytes == 0) || (_nbytes > 32)

IRs:
TMP_1407(bool) = _nbytes == 0
TMP_1408(bool) = _nbytes > 32
TMP_1409(bool) = TMP_1407 || TMP_1408
CONDITION TMP_1409"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_1411 = new bytes(1)
nbytes(bytes) := TMP_1411(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_975(bytes1) -> nbytes[0]
TMP_1412 = CONVERT _nbytes to bytes1
REF_975(bytes1) (->nbytes) := TMP_1412(bytes1)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
unonce = new bytes(32)

IRs:
TMP_1414 = new bytes(32)
unonce(bytes) := TMP_1414(bytes)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sessionKeyHash = new bytes(32)

IRs:
TMP_1416 = new bytes(32)
sessionKeyHash(bytes) := TMP_1416(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_1417(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_1417(bytes32)"];
8->9;
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash)

IRs:
args(bytes[3]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)']"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
queryId = oraclize_query(_delay,random,args,_customGasLimit)

IRs:
TMP_1418(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[3],uint256)(_delay,random,args,_customGasLimit)
queryId(bytes32) := TMP_1418(bytes32)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,sha3()(bytes8(_delay),args[1],sha256()(args[0]),args[2]))

IRs:
TMP_1419 = CONVERT _delay to bytes8
REF_976(bytes) -> args[1]
REF_977(bytes) -> args[0]
TMP_1420(bytes32) = SOLIDITY_CALL sha256()(REF_977)
REF_978(bytes) -> args[2]
TMP_1421(bytes32) = SOLIDITY_CALL sha3()(TMP_1419,REF_976,TMP_1420,REF_978)
INTERNAL_CALL, usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_1421)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1126(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1126(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_748(bytes) -> dynargs[0]
REF_749(bytes) -> args[0]
REF_748(bytes) (->dynargs) := REF_749(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1127(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1127"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1138(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1138(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_754(bytes) -> dynargs[0]
REF_755(bytes) -> args[0]
REF_754(bytes) (->dynargs) := REF_755(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1139(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1139"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1142(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1142(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_756(bytes) -> dynargs[0]
REF_757(bytes) -> args[0]
REF_756(bytes) (->dynargs) := REF_757(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_758(bytes) -> dynargs[1]
REF_759(bytes) -> args[1]
REF_758(bytes) (->dynargs) := REF_759(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1143(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1143"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1154(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1154(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_768(bytes) -> dynargs[0]
REF_769(bytes) -> args[0]
REF_768(bytes) (->dynargs) := REF_769(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_770(bytes) -> dynargs[1]
REF_771(bytes) -> args[1]
REF_770(bytes) (->dynargs) := REF_771(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1155(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1155"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1158(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1158(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_772(bytes) -> dynargs[0]
REF_773(bytes) -> args[0]
REF_772(bytes) (->dynargs) := REF_773(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_774(bytes) -> dynargs[1]
REF_775(bytes) -> args[1]
REF_774(bytes) (->dynargs) := REF_775(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_776(bytes) -> dynargs[2]
REF_777(bytes) -> args[2]
REF_776(bytes) (->dynargs) := REF_777(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1159(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1159"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1170(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1170(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_790(bytes) -> dynargs[0]
REF_791(bytes) -> args[0]
REF_790(bytes) (->dynargs) := REF_791(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_792(bytes) -> dynargs[1]
REF_793(bytes) -> args[1]
REF_792(bytes) (->dynargs) := REF_793(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_794(bytes) -> dynargs[2]
REF_795(bytes) -> args[2]
REF_794(bytes) (->dynargs) := REF_795(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1171(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1171"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1174(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1174(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_796(bytes) -> dynargs[0]
REF_797(bytes) -> args[0]
REF_796(bytes) (->dynargs) := REF_797(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_798(bytes) -> dynargs[1]
REF_799(bytes) -> args[1]
REF_798(bytes) (->dynargs) := REF_799(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_800(bytes) -> dynargs[2]
REF_801(bytes) -> args[2]
REF_800(bytes) (->dynargs) := REF_801(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_802(bytes) -> dynargs[3]
REF_803(bytes) -> args[3]
REF_802(bytes) (->dynargs) := REF_803(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1175(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1175"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1186(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1186(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_820(bytes) -> dynargs[0]
REF_821(bytes) -> args[0]
REF_820(bytes) (->dynargs) := REF_821(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_822(bytes) -> dynargs[1]
REF_823(bytes) -> args[1]
REF_822(bytes) (->dynargs) := REF_823(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_824(bytes) -> dynargs[2]
REF_825(bytes) -> args[2]
REF_824(bytes) (->dynargs) := REF_825(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_826(bytes) -> dynargs[3]
REF_827(bytes) -> args[3]
REF_826(bytes) (->dynargs) := REF_827(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1187(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1187"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1190(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1190(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_828(bytes) -> dynargs[0]
REF_829(bytes) -> args[0]
REF_828(bytes) (->dynargs) := REF_829(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_830(bytes) -> dynargs[1]
REF_831(bytes) -> args[1]
REF_830(bytes) (->dynargs) := REF_831(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_832(bytes) -> dynargs[2]
REF_833(bytes) -> args[2]
REF_832(bytes) (->dynargs) := REF_833(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_834(bytes) -> dynargs[3]
REF_835(bytes) -> args[3]
REF_834(bytes) (->dynargs) := REF_835(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_836(bytes) -> dynargs[4]
REF_837(bytes) -> args[4]
REF_836(bytes) (->dynargs) := REF_837(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1191(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1191"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1202(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1202(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_858(bytes) -> dynargs[0]
REF_859(bytes) -> args[0]
REF_858(bytes) (->dynargs) := REF_859(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_860(bytes) -> dynargs[1]
REF_861(bytes) -> args[1]
REF_860(bytes) (->dynargs) := REF_861(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_862(bytes) -> dynargs[2]
REF_863(bytes) -> args[2]
REF_862(bytes) (->dynargs) := REF_863(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_864(bytes) -> dynargs[3]
REF_865(bytes) -> args[3]
REF_864(bytes) (->dynargs) := REF_865(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_866(bytes) -> dynargs[4]
REF_867(bytes) -> args[4]
REF_866(bytes) (->dynargs) := REF_867(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1203(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1203"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_1093(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_1093(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_1094(uint256) = tx.gasprice * 200000
TMP_1095(uint256) = 1000000000000000000 + TMP_1094
TMP_1096(bool) = price > TMP_1095
CONDITION TMP_1096"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_1097(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_1097(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_1099(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_1099"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_1117(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_1117(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_1118(uint256) = tx.gasprice * gaslimit
TMP_1119(uint256) = 1000000000000000000 + TMP_1118
TMP_1120(bool) = price > TMP_1119
CONDITION TMP_1120"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_1121(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_1121(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_1123(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_1123"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_925(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_925(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_926(uint256) = tx.gasprice * 200000
TMP_927(uint256) = 1000000000000000000 + TMP_926
TMP_928(bool) = price > TMP_927
CONDITION TMP_928"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_930(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_930"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_953(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_953(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_954(uint256) = tx.gasprice * 200000
TMP_955(uint256) = 1000000000000000000 + TMP_954
TMP_956(bool) = price > TMP_955
CONDITION TMP_956"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_958(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_958"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_974(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_974(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_975(uint256) = tx.gasprice * gaslimit
TMP_976(uint256) = 1000000000000000000 + TMP_975
TMP_977(bool) = price > TMP_976
CONDITION TMP_977"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_979(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_979"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_946(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_946(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_947(uint256) = tx.gasprice * gaslimit
TMP_948(uint256) = 1000000000000000000 + TMP_947
TMP_949(bool) = price > TMP_948
CONDITION TMP_949"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_951(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_951"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_1014(string[])  = new string[](1)
dynargs(string[]) = ['TMP_1014(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_616(string) -> dynargs[0]
REF_617(string) -> args[0]
REF_616(string) (->dynargs) := REF_617(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1015(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_1015"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_1026(string[])  = new string[](1)
dynargs(string[]) = ['TMP_1026(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_622(string) -> dynargs[0]
REF_623(string) -> args[0]
REF_622(string) (->dynargs) := REF_623(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1027(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1027"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_1030(string[])  = new string[](2)
dynargs(string[]) = ['TMP_1030(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_624(string) -> dynargs[0]
REF_625(string) -> args[0]
REF_624(string) (->dynargs) := REF_625(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_626(string) -> dynargs[1]
REF_627(string) -> args[1]
REF_626(string) (->dynargs) := REF_627(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1031(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_1031"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_1042(string[])  = new string[](2)
dynargs(string[]) = ['TMP_1042(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_636(string) -> dynargs[0]
REF_637(string) -> args[0]
REF_636(string) (->dynargs) := REF_637(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_638(string) -> dynargs[1]
REF_639(string) -> args[1]
REF_638(string) (->dynargs) := REF_639(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1043(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1043"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_1046(string[])  = new string[](3)
dynargs(string[]) = ['TMP_1046(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_640(string) -> dynargs[0]
REF_641(string) -> args[0]
REF_640(string) (->dynargs) := REF_641(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_642(string) -> dynargs[1]
REF_643(string) -> args[1]
REF_642(string) (->dynargs) := REF_643(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_644(string) -> dynargs[2]
REF_645(string) -> args[2]
REF_644(string) (->dynargs) := REF_645(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1047(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_1047"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_1058(string[])  = new string[](3)
dynargs(string[]) = ['TMP_1058(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_658(string) -> dynargs[0]
REF_659(string) -> args[0]
REF_658(string) (->dynargs) := REF_659(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_660(string) -> dynargs[1]
REF_661(string) -> args[1]
REF_660(string) (->dynargs) := REF_661(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_662(string) -> dynargs[2]
REF_663(string) -> args[2]
REF_662(string) (->dynargs) := REF_663(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1059(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1059"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_1062(string[])  = new string[](4)
dynargs(string[]) = ['TMP_1062(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_664(string) -> dynargs[0]
REF_665(string) -> args[0]
REF_664(string) (->dynargs) := REF_665(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_666(string) -> dynargs[1]
REF_667(string) -> args[1]
REF_666(string) (->dynargs) := REF_667(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_668(string) -> dynargs[2]
REF_669(string) -> args[2]
REF_668(string) (->dynargs) := REF_669(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_670(string) -> dynargs[3]
REF_671(string) -> args[3]
REF_670(string) (->dynargs) := REF_671(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1063(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_1063"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_1074(string[])  = new string[](4)
dynargs(string[]) = ['TMP_1074(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_688(string) -> dynargs[0]
REF_689(string) -> args[0]
REF_688(string) (->dynargs) := REF_689(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_690(string) -> dynargs[1]
REF_691(string) -> args[1]
REF_690(string) (->dynargs) := REF_691(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_692(string) -> dynargs[2]
REF_693(string) -> args[2]
REF_692(string) (->dynargs) := REF_693(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_694(string) -> dynargs[3]
REF_695(string) -> args[3]
REF_694(string) (->dynargs) := REF_695(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1075(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1075"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_1078(string[])  = new string[](5)
dynargs(string[]) = ['TMP_1078(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_696(string) -> dynargs[0]
REF_697(string) -> args[0]
REF_696(string) (->dynargs) := REF_697(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_698(string) -> dynargs[1]
REF_699(string) -> args[1]
REF_698(string) (->dynargs) := REF_699(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_700(string) -> dynargs[2]
REF_701(string) -> args[2]
REF_700(string) (->dynargs) := REF_701(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_702(string) -> dynargs[3]
REF_703(string) -> args[3]
REF_702(string) (->dynargs) := REF_703(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_704(string) -> dynargs[4]
REF_705(string) -> args[4]
REF_704(string) (->dynargs) := REF_705(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1079(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_1079"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_1090(string[])  = new string[](5)
dynargs(string[]) = ['TMP_1090(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_726(string) -> dynargs[0]
REF_727(string) -> args[0]
REF_726(string) (->dynargs) := REF_727(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_728(string) -> dynargs[1]
REF_729(string) -> args[1]
REF_728(string) (->dynargs) := REF_729(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_730(string) -> dynargs[2]
REF_731(string) -> args[2]
REF_730(string) (->dynargs) := REF_731(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_732(string) -> dynargs[3]
REF_733(string) -> args[3]
REF_732(string) (->dynargs) := REF_733(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_734(string) -> dynargs[4]
REF_735(string) -> args[4]
REF_734(string) (->dynargs) := REF_735(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1091(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1091"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_981(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_981(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_982(uint256) = tx.gasprice * 200000
TMP_983(uint256) = 1000000000000000000 + TMP_982
TMP_984(bool) = price > TMP_983
CONDITION TMP_984"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_985(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_985(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_987(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_987"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_1005(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_1005(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_1006(uint256) = tx.gasprice * gaslimit
TMP_1007(uint256) = 1000000000000000000 + TMP_1006
TMP_1008(bool) = price > TMP_1007
CONDITION TMP_1008"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_1009(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_1009(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_1011(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_1011"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1130(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1130(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_750(bytes) -> dynargs[0]
REF_751(bytes) -> args[0]
REF_750(bytes) (->dynargs) := REF_751(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1131(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1131"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1134(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1134(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_752(bytes) -> dynargs[0]
REF_753(bytes) -> args[0]
REF_752(bytes) (->dynargs) := REF_753(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1135(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1135"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1146(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1146(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_760(bytes) -> dynargs[0]
REF_761(bytes) -> args[0]
REF_760(bytes) (->dynargs) := REF_761(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_762(bytes) -> dynargs[1]
REF_763(bytes) -> args[1]
REF_762(bytes) (->dynargs) := REF_763(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1147(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1147"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1150(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1150(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_764(bytes) -> dynargs[0]
REF_765(bytes) -> args[0]
REF_764(bytes) (->dynargs) := REF_765(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_766(bytes) -> dynargs[1]
REF_767(bytes) -> args[1]
REF_766(bytes) (->dynargs) := REF_767(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1151(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1151"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1162(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1162(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_778(bytes) -> dynargs[0]
REF_779(bytes) -> args[0]
REF_778(bytes) (->dynargs) := REF_779(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_780(bytes) -> dynargs[1]
REF_781(bytes) -> args[1]
REF_780(bytes) (->dynargs) := REF_781(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_782(bytes) -> dynargs[2]
REF_783(bytes) -> args[2]
REF_782(bytes) (->dynargs) := REF_783(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1163(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1163"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1166(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1166(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_784(bytes) -> dynargs[0]
REF_785(bytes) -> args[0]
REF_784(bytes) (->dynargs) := REF_785(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_786(bytes) -> dynargs[1]
REF_787(bytes) -> args[1]
REF_786(bytes) (->dynargs) := REF_787(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_788(bytes) -> dynargs[2]
REF_789(bytes) -> args[2]
REF_788(bytes) (->dynargs) := REF_789(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1167(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1167"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1178(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1178(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_804(bytes) -> dynargs[0]
REF_805(bytes) -> args[0]
REF_804(bytes) (->dynargs) := REF_805(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_806(bytes) -> dynargs[1]
REF_807(bytes) -> args[1]
REF_806(bytes) (->dynargs) := REF_807(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_808(bytes) -> dynargs[2]
REF_809(bytes) -> args[2]
REF_808(bytes) (->dynargs) := REF_809(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_810(bytes) -> dynargs[3]
REF_811(bytes) -> args[3]
REF_810(bytes) (->dynargs) := REF_811(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1179(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1179"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1182(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1182(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_812(bytes) -> dynargs[0]
REF_813(bytes) -> args[0]
REF_812(bytes) (->dynargs) := REF_813(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_814(bytes) -> dynargs[1]
REF_815(bytes) -> args[1]
REF_814(bytes) (->dynargs) := REF_815(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_816(bytes) -> dynargs[2]
REF_817(bytes) -> args[2]
REF_816(bytes) (->dynargs) := REF_817(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_818(bytes) -> dynargs[3]
REF_819(bytes) -> args[3]
REF_818(bytes) (->dynargs) := REF_819(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1183(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1183"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1194(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1194(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_838(bytes) -> dynargs[0]
REF_839(bytes) -> args[0]
REF_838(bytes) (->dynargs) := REF_839(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_840(bytes) -> dynargs[1]
REF_841(bytes) -> args[1]
REF_840(bytes) (->dynargs) := REF_841(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_842(bytes) -> dynargs[2]
REF_843(bytes) -> args[2]
REF_842(bytes) (->dynargs) := REF_843(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_844(bytes) -> dynargs[3]
REF_845(bytes) -> args[3]
REF_844(bytes) (->dynargs) := REF_845(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_846(bytes) -> dynargs[4]
REF_847(bytes) -> args[4]
REF_846(bytes) (->dynargs) := REF_847(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1195(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1195"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1198(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1198(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_848(bytes) -> dynargs[0]
REF_849(bytes) -> args[0]
REF_848(bytes) (->dynargs) := REF_849(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_850(bytes) -> dynargs[1]
REF_851(bytes) -> args[1]
REF_850(bytes) (->dynargs) := REF_851(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_852(bytes) -> dynargs[2]
REF_853(bytes) -> args[2]
REF_852(bytes) (->dynargs) := REF_853(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_854(bytes) -> dynargs[3]
REF_855(bytes) -> args[3]
REF_854(bytes) (->dynargs) := REF_855(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_856(bytes) -> dynargs[4]
REF_857(bytes) -> args[4]
REF_856(bytes) (->dynargs) := REF_857(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1199(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1199"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_1101(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_1101(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_1102(uint256) = tx.gasprice * 200000
TMP_1103(uint256) = 1000000000000000000 + TMP_1102
TMP_1104(bool) = price > TMP_1103
CONDITION TMP_1104"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_1105(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_1105(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_1107(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_1107"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_1109(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_1109(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_1110(uint256) = tx.gasprice * gaslimit
TMP_1111(uint256) = 1000000000000000000 + TMP_1110
TMP_1112(bool) = price > TMP_1111
CONDITION TMP_1112"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_1113(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_1113(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_1115(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_1115"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_932(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_932(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_933(uint256) = tx.gasprice * 200000
TMP_934(uint256) = 1000000000000000000 + TMP_933
TMP_935(bool) = price > TMP_934
CONDITION TMP_935"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_937(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_937"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_960(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_960(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_961(uint256) = tx.gasprice * 200000
TMP_962(uint256) = 1000000000000000000 + TMP_961
TMP_963(bool) = price > TMP_962
CONDITION TMP_963"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_965(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_965"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_967(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_967(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_968(uint256) = tx.gasprice * gaslimit
TMP_969(uint256) = 1000000000000000000 + TMP_968
TMP_970(bool) = price > TMP_969
CONDITION TMP_970"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_972(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_972"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_939(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_939(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_940(uint256) = tx.gasprice * gaslimit
TMP_941(uint256) = 1000000000000000000 + TMP_940
TMP_942(bool) = price > TMP_941
CONDITION TMP_942"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_944(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_944"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_1018(string[])  = new string[](1)
dynargs(string[]) = ['TMP_1018(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_618(string) -> dynargs[0]
REF_619(string) -> args[0]
REF_618(string) (->dynargs) := REF_619(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1019(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_1019"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_1022(string[])  = new string[](1)
dynargs(string[]) = ['TMP_1022(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_620(string) -> dynargs[0]
REF_621(string) -> args[0]
REF_620(string) (->dynargs) := REF_621(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1023(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1023"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_1034(string[])  = new string[](2)
dynargs(string[]) = ['TMP_1034(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_628(string) -> dynargs[0]
REF_629(string) -> args[0]
REF_628(string) (->dynargs) := REF_629(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_630(string) -> dynargs[1]
REF_631(string) -> args[1]
REF_630(string) (->dynargs) := REF_631(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1035(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_1035"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_1038(string[])  = new string[](2)
dynargs(string[]) = ['TMP_1038(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_632(string) -> dynargs[0]
REF_633(string) -> args[0]
REF_632(string) (->dynargs) := REF_633(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_634(string) -> dynargs[1]
REF_635(string) -> args[1]
REF_634(string) (->dynargs) := REF_635(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1039(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1039"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_1050(string[])  = new string[](3)
dynargs(string[]) = ['TMP_1050(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_646(string) -> dynargs[0]
REF_647(string) -> args[0]
REF_646(string) (->dynargs) := REF_647(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_648(string) -> dynargs[1]
REF_649(string) -> args[1]
REF_648(string) (->dynargs) := REF_649(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_650(string) -> dynargs[2]
REF_651(string) -> args[2]
REF_650(string) (->dynargs) := REF_651(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1051(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_1051"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_1054(string[])  = new string[](3)
dynargs(string[]) = ['TMP_1054(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_652(string) -> dynargs[0]
REF_653(string) -> args[0]
REF_652(string) (->dynargs) := REF_653(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_654(string) -> dynargs[1]
REF_655(string) -> args[1]
REF_654(string) (->dynargs) := REF_655(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_656(string) -> dynargs[2]
REF_657(string) -> args[2]
REF_656(string) (->dynargs) := REF_657(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1055(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1055"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_1066(string[])  = new string[](4)
dynargs(string[]) = ['TMP_1066(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_672(string) -> dynargs[0]
REF_673(string) -> args[0]
REF_672(string) (->dynargs) := REF_673(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_674(string) -> dynargs[1]
REF_675(string) -> args[1]
REF_674(string) (->dynargs) := REF_675(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_676(string) -> dynargs[2]
REF_677(string) -> args[2]
REF_676(string) (->dynargs) := REF_677(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_678(string) -> dynargs[3]
REF_679(string) -> args[3]
REF_678(string) (->dynargs) := REF_679(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1067(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_1067"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_1070(string[])  = new string[](4)
dynargs(string[]) = ['TMP_1070(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_680(string) -> dynargs[0]
REF_681(string) -> args[0]
REF_680(string) (->dynargs) := REF_681(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_682(string) -> dynargs[1]
REF_683(string) -> args[1]
REF_682(string) (->dynargs) := REF_683(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_684(string) -> dynargs[2]
REF_685(string) -> args[2]
REF_684(string) (->dynargs) := REF_685(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_686(string) -> dynargs[3]
REF_687(string) -> args[3]
REF_686(string) (->dynargs) := REF_687(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1071(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1071"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_1082(string[])  = new string[](5)
dynargs(string[]) = ['TMP_1082(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_706(string) -> dynargs[0]
REF_707(string) -> args[0]
REF_706(string) (->dynargs) := REF_707(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_708(string) -> dynargs[1]
REF_709(string) -> args[1]
REF_708(string) (->dynargs) := REF_709(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_710(string) -> dynargs[2]
REF_711(string) -> args[2]
REF_710(string) (->dynargs) := REF_711(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_712(string) -> dynargs[3]
REF_713(string) -> args[3]
REF_712(string) (->dynargs) := REF_713(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_714(string) -> dynargs[4]
REF_715(string) -> args[4]
REF_714(string) (->dynargs) := REF_715(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1083(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_1083"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_1086(string[])  = new string[](5)
dynargs(string[]) = ['TMP_1086(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_716(string) -> dynargs[0]
REF_717(string) -> args[0]
REF_716(string) (->dynargs) := REF_717(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_718(string) -> dynargs[1]
REF_719(string) -> args[1]
REF_718(string) (->dynargs) := REF_719(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_720(string) -> dynargs[2]
REF_721(string) -> args[2]
REF_720(string) (->dynargs) := REF_721(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_722(string) -> dynargs[3]
REF_723(string) -> args[3]
REF_722(string) (->dynargs) := REF_723(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_724(string) -> dynargs[4]
REF_725(string) -> args[4]
REF_724(string) (->dynargs) := REF_725(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1087(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1087"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_989(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_989(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_990(uint256) = tx.gasprice * 200000
TMP_991(uint256) = 1000000000000000000 + TMP_990
TMP_992(bool) = price > TMP_991
CONDITION TMP_992"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_993(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_993(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_995(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_995"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_997(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_997(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_998(uint256) = tx.gasprice * gaslimit
TMP_999(uint256) = 1000000000000000000 + TMP_998
TMP_1000(bool) = price > TMP_999
CONDITION TMP_1000"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_1001(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_1001(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_1003(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_1003"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-LuckyETH-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_1213(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_1213"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_1104(None) -> _proof[0]
TMP_1728(bool) = REF_1104 != L
REF_1105(None) -> _proof[1]
TMP_1729(bool) = REF_1105 != P
TMP_1730(bool) = TMP_1728 || TMP_1729
REF_1106(None) -> _proof[2]
TMP_1731(bool) = REF_1106 != 1
TMP_1732(bool) = TMP_1730 || TMP_1731
CONDITION TMP_1732"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_1733 = CONVERT _result to bytes
TMP_1734(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_1735(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_1733,TMP_1734)
proofVerified(bool) := TMP_1735(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_1736(bool) = proofVerified == False
CONDITION TMP_1736"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: _ 8
"];
}
// Function: 22635.sol-LuckyETH-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_1490(uint256) = 3 + 65
TMP_1491(uint256) = 3 + 65
TMP_1492(uint256) = TMP_1491 + 1
REF_994(None) -> proof[TMP_1492]
TMP_1493 = CONVERT REF_994 to uint256
TMP_1494(uint256) = TMP_1493 + 2
TMP_1495(uint256) = TMP_1490 + TMP_1494
TMP_1496(uint256) = TMP_1495 + 32
ledgerProofLength(uint256) := TMP_1496(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_1498 = new bytes(32)
keyhash(bytes) := TMP_1498(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_1499(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
checkok = (sha3()(keyhash) == sha3()(sha256()(context_name,queryId)))

IRs:
TMP_1500(bytes32) = SOLIDITY_CALL sha3()(keyhash)
TMP_1501(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_1502(bytes32) = SOLIDITY_CALL sha3()(TMP_1501)
TMP_1503(bool) = TMP_1500 == TMP_1502
checkok(bool) := TMP_1503(bool)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
checkok == false

IRs:
TMP_1504(bool) = checkok == False
CONDITION TMP_1504"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_1506(uint256) = 32 + 8
TMP_1507(uint256) = TMP_1506 + 1
TMP_1508(uint256) = TMP_1507 + 32
TMP_1509(uint256) = ledgerProofLength + TMP_1508
TMP_1510(uint256) = TMP_1509 + 1
REF_995(None) -> proof[TMP_1510]
TMP_1511 = CONVERT REF_995 to uint256
TMP_1512(uint256) = TMP_1511 + 2
TMP_1513 = new bytes(TMP_1512)
sig1(bytes) := TMP_1513(bytes)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_1514(uint256) = 32 + 8
TMP_1515(uint256) = TMP_1514 + 1
TMP_1516(uint256) = TMP_1515 + 32
TMP_1517(uint256) = ledgerProofLength + TMP_1516
REF_996 -> LENGTH sig1
TMP_1518(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1517,REF_996,sig1,0)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
checkok = matchBytes32Prefix(sha256()(sig1),result)

IRs:
TMP_1519(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_1520(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes)(TMP_1519,result)
checkok(bool) := TMP_1520(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
checkok == false

IRs:
TMP_1521(bool) = checkok == False
CONDITION TMP_1521"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_1523(uint256) = 8 + 1
TMP_1524(uint256) = TMP_1523 + 32
TMP_1525 = new bytes(TMP_1524)
commitmentSlice1(bytes) := TMP_1525(bytes)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_1526(uint256) = ledgerProofLength + 32
TMP_1527(uint256) = 8 + 1
TMP_1528(uint256) = TMP_1527 + 32
TMP_1529(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1526,TMP_1528,commitmentSlice1,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_1531 = new bytes(64)
sessionPubkey(bytes) := TMP_1531(bytes)"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_1532(uint256) = ledgerProofLength + 32
TMP_1533(uint256) = 8 + 1
TMP_1534(uint256) = TMP_1533 + 32
TMP_1535(uint256) = TMP_1532 + TMP_1534
REF_997 -> LENGTH sig1
TMP_1536(uint256) = TMP_1535 + REF_997
TMP_1537(uint256) = TMP_1536 + 65
sig2offset(uint256) := TMP_1537(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_1538(uint256) = sig2offset - 64
TMP_1539(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1538,64,sessionPubkey,0)"];
19->20;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_1540(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_1540(bytes32)"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
oraclize_randomDS_args[queryId] == sha3()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_998(bytes32) -> oraclize_randomDS_args[queryId]
TMP_1541(bytes32) = SOLIDITY_CALL sha3()(commitmentSlice1,sessionPubkeyHash)
TMP_1542(bool) = REF_998 == TMP_1541
CONDITION TMP_1542"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_999(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_999 "];
22->24;
23[label="Node Type: RETURN 23

EXPRESSION:
false

IRs:
RETURN False"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: NEW VARIABLE 25

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_1544(uint256) = 32 + 8
TMP_1545(uint256) = TMP_1544 + 1
TMP_1546(uint256) = TMP_1545 + 32
TMP_1547 = new bytes(TMP_1546)
tosign1(bytes) := TMP_1547(bytes)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_1548(uint256) = 32 + 8
TMP_1549(uint256) = TMP_1548 + 1
TMP_1550(uint256) = TMP_1549 + 32
TMP_1551(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_1550,tosign1,0)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
checkok = verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_1552(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_1553(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1552,sig1,sessionPubkey)
checkok(bool) := TMP_1553(bool)"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
checkok == false

IRs:
TMP_1554(bool) = checkok == False
CONDITION TMP_1554"];
28->29[label="True"];
28->30[label="False"];
29[label="Node Type: RETURN 29

EXPRESSION:
false

IRs:
RETURN False"];
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: IF 31

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_1000(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1555(bool) = REF_1000 == False
CONDITION TMP_1555"];
31->32[label="True"];
31->33[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_1001(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1556(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_1001(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_1556(bool)"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_1002(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_1002"];
}
// Function: 22635.sol-LuckyETH-oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_988(None) -> _proof[0]
TMP_1478(bool) = REF_988 != L
REF_989(None) -> _proof[1]
TMP_1479(bool) = REF_989 != P
TMP_1480(bool) = TMP_1478 || TMP_1479
REF_990(None) -> _proof[2]
TMP_1481(bool) = REF_990 != 1
TMP_1482(bool) = TMP_1480 || TMP_1481
CONDITION TMP_1482"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_1483 = CONVERT _result to bytes
TMP_1484(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_1485(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_1483,TMP_1484)
proofVerified(bool) := TMP_1485(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_1486(bool) = proofVerified == False
CONDITION TMP_1486"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
2

IRs:
RETURN 2"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 22635.sol-LuckyETH-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_1444(uint256) = sig2offset + 1
REF_982(None) -> proof[TMP_1444]
TMP_1445 = CONVERT REF_982 to uint256
TMP_1446(uint256) = TMP_1445 + 2
TMP_1447 = new bytes(TMP_1446)
sig2(bytes) := TMP_1447(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_983 -> LENGTH sig2
TMP_1448(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_983,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_1450 = new bytes(64)
appkey1_pubkey(bytes) := TMP_1450(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_1451(uint256) = 3 + 1
TMP_1452(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1451,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_1454(uint256) = 1 + 65
TMP_1455(uint256) = TMP_1454 + 32
TMP_1456 = new bytes(TMP_1455)
tosign2(bytes) := TMP_1456(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = 1

IRs:
REF_984(uint256) -> tosign2[0]
REF_984(uint256) (->tosign2) := 1(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_1457(uint256) = sig2offset - 65
TMP_1458(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1457,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_1459(uint256) = 1 + 65
TMP_1460(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_1459)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_1461(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_1462(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1461,sig2,appkey1_pubkey)
sigok(bool) := TMP_1462(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_1463(bool) = sigok == False
CONDITION TMP_1463"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_1465(uint256) = 1 + 65
TMP_1466 = new bytes(TMP_1465)
tosign3(bytes) := TMP_1466(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_985(uint256) -> tosign3[0]
REF_985(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_1467(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_1469(uint256) = 3 + 65
TMP_1470(uint256) = TMP_1469 + 1
REF_986(None) -> proof[TMP_1470]
TMP_1471 = CONVERT REF_986 to uint256
TMP_1472(uint256) = TMP_1471 + 2
TMP_1473 = new bytes(TMP_1472)
sig3(bytes) := TMP_1473(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_1474(uint256) = 3 + 65
REF_987 -> LENGTH sig3
TMP_1475(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1474,REF_987,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_1476(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_1477(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1476,sig3,LEDGERKEY)
sigok(bool) := TMP_1477(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 22635.sol-LuckyETH-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_randomDS_args[queryId] = commitment

IRs:
REF_979(bytes32) -> oraclize_randomDS_args[queryId]
REF_979(bytes32) (->oraclize_randomDS_args) := commitment(bytes32)"];
}
// Function: 22635.sol-LuckyETH-oraclize_setConfig(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setConfig(config)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setConfig, arguments:['config']  
RETURN TMP_1211"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_1209"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_891(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_892(bool) = TMP_891 > 0
CONDITION TMP_892"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_893 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_893(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_895(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_896(bool) = TMP_895 > 0
CONDITION TMP_896"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_897 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_897(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_899(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_900(bool) = TMP_899 > 0
CONDITION TMP_900"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_901 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_901(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_903(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_904(bool) = TMP_903 > 0
CONDITION TMP_904"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_905 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_905(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_907(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_908(bool) = TMP_907 > 0
CONDITION TMP_908"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_909 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_909(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_910(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_911(bool) = TMP_910 > 0
CONDITION TMP_911"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_912 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_912(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_913(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_914(bool) = TMP_913 > 0
CONDITION TMP_914"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_915 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_915(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 22635.sol-LuckyETH-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 22635.sol-LuckyETH-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_1207"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-oraclize_useCoupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-ownerChangeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LuckyETH.onlyOwner()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-ownerPauseGame(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gamePaused = newStatus

IRs:
gamePaused(bool) := newStatus(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LuckyETH.onlyOwner()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-ownerPausePayouts(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
payoutsPaused = newPayoutStatus

IRs:
payoutsPaused(bool) := newPayoutStatus(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LuckyETH.onlyOwner()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-ownerRefundPlayer(bytes32,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
maxPendingPayouts = safeSub(maxPendingPayouts,originalPlayerProfit)

IRs:
TMP_1695(uint256) = INTERNAL_CALL, DSSafeAddSub.safeSub(uint256,uint256)(maxPendingPayouts,originalPlayerProfit)
maxPendingPayouts(uint256) := TMP_1695(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! sendTo.send(originalPlayerBetValue)

IRs:
TMP_1696 = SEND dest:sendTo value:originalPlayerBetValue
TMP_1697 = UnaryType.BANG TMP_1696 
CONDITION TMP_1697"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LuckyETH.onlyOwner()()"];
5->1;
}
// Function: 22635.sol-LuckyETH-ownerSetCallbackGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_setCustomGasPrice(newCallbackGasPrice)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setCustomGasPrice(uint256)(newCallbackGasPrice)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LuckyETH.onlyOwner()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-ownerSetMinBet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minBet = newMinimumBet

IRs:
minBet(uint256) := newMinimumBet(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LuckyETH.onlyOwner()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-ownerSetOraclizeSafeGas(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gasForOraclize = newSafeGasToOraclize

IRs:
gasForOraclize(uint32) := newSafeGasToOraclize(uint32)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LuckyETH.onlyOwner()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-ownerSetTreasury(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
treasury = newTreasury

IRs:
treasury(address) := newTreasury(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LuckyETH.onlyOwner()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-ownerTransferEther(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
! sendTo.send(amount)

IRs:
TMP_1692 = SEND dest:sendTo value:amount
TMP_1693 = UnaryType.BANG TMP_1692 
CONDITION TMP_1693"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LuckyETH.onlyOwner()()"];
4->1;
}
// Function: 22635.sol-LuckyETH-ownerkill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
suicide(address)(owner)

IRs:
TMP_1703(None) = SOLIDITY_CALL suicide(address)(owner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LuckyETH.onlyOwner()()"];
2->1;
}
// Function: 22635.sol-LuckyETH-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_1215 = CONVERT _a to bytes
tmp(bytes) := TMP_1215(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_1216(uint256) = 2 * 20
TMP_1217(uint256) = 2 + TMP_1216
TMP_1218(bool) = i < TMP_1217
CONDITION TMP_1218"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_873(None) -> tmp[i]
TMP_1219 = CONVERT REF_873 to uint160
b1(uint160) := TMP_1219(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_1220(uint256) = i + 1
REF_874(None) -> tmp[TMP_1220]
TMP_1221 = CONVERT REF_874 to uint160
b2(uint160) := TMP_1221(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_1222(bool) = b1 >= 97
TMP_1223(bool) = b1 <= 102
TMP_1224(bool) = TMP_1222 && TMP_1223
CONDITION TMP_1224"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_1225(bool) = b1 >= 65
TMP_1226(bool) = b1 <= 70
TMP_1227(bool) = TMP_1225 && TMP_1226
CONDITION TMP_1227"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_1228(bool) = b1 >= 48
TMP_1229(bool) = b1 <= 57
TMP_1230(bool) = TMP_1228 && TMP_1229
CONDITION TMP_1230"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_1231(bool) = b2 >= 97
TMP_1232(bool) = b2 <= 102
TMP_1233(bool) = TMP_1231 && TMP_1232
CONDITION TMP_1233"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_1234(bool) = b2 >= 65
TMP_1235(bool) = b2 <= 70
TMP_1236(bool) = TMP_1234 && TMP_1235
CONDITION TMP_1236"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_1237(bool) = b2 >= 48
TMP_1238(bool) = b2 <= 57
TMP_1239(bool) = TMP_1237 && TMP_1238
CONDITION TMP_1239"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_1240(uint160) = b1 * 16
TMP_1241(uint160) = TMP_1240 + b2
iaddr(uint160) = iaddr + TMP_1241"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_1242 = CONVERT iaddr to address
RETURN TMP_1242"];
}
// Function: 22635.sol-LuckyETH-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_1311(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_1311"];
}
// Function: 22635.sol-LuckyETH-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_1312 = CONVERT _a to bytes
bresult(bytes) := TMP_1312(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_919 -> LENGTH bresult
TMP_1313(bool) = i < REF_919
CONDITION TMP_1313"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_920(None) -> bresult[i]
TMP_1314(bool) = REF_920 >= 48
REF_921(None) -> bresult[i]
TMP_1315(bool) = REF_921 <= 57
TMP_1316(bool) = TMP_1314 && TMP_1315
CONDITION TMP_1316"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_1317(bool) = _b == 0
CONDITION TMP_1317"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_1318(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_922(None) -> bresult[i]
TMP_1319 = CONVERT REF_922 to uint256
TMP_1320(uint256) = TMP_1319 - 48
mint(uint256) = mint + TMP_1320"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_923(None) -> bresult[i]
TMP_1321(bool) = REF_923 == 46
CONDITION TMP_1321"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_1322(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_1323(bool) = _b > 0
CONDITION TMP_1323"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_1324(uint256) = 10 ** _b
mint(uint256) = mint * TMP_1324"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 22635.sol-LuckyETH-payoutsAreActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
payoutsPaused == true

IRs:
TMP_1743(bool) = payoutsPaused == True
CONDITION TMP_1743"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 22635.sol-LuckyETH-playerGetPendingTxByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
playerPendingWithdrawals[addressToCheck]

IRs:
REF_1097(uint256) -> playerPendingWithdrawals[addressToCheck]
RETURN REF_1097"];
}
// Function: 22635.sol-LuckyETH-playerRollDice(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pre1 = strConcat(queryUrl,encrypt(toAsciiString(msg.sender)),_,encrypt(uint2str(msg.value)),&max=)

IRs:
TMP_1631(string) = INTERNAL_CALL, LuckyETH.toAsciiString(address)(msg.sender)
TMP_1632(string) = INTERNAL_CALL, LuckyETH.encrypt(string)(TMP_1631)
TMP_1633(string) = INTERNAL_CALL, usingOraclize.uint2str(uint256)(msg.value)
TMP_1634(string) = INTERNAL_CALL, LuckyETH.encrypt(string)(TMP_1633)
TMP_1635(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(queryUrl,TMP_1632,_,TMP_1634,&max=)
pre1(string) := TMP_1635(string)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
rngId = oraclize_query(URL,strConcat(pre1,uint2str(rollTimes),&format=pure),gasForOraclize)

IRs:
TMP_1636(string) = INTERNAL_CALL, usingOraclize.uint2str(uint256)(rollTimes)
TMP_1637(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string)(pre1,TMP_1636,&format=pure)
TMP_1638(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string,uint256)(URL,TMP_1637,gasForOraclize)
rngId(bytes32) := TMP_1638(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
playerFromAddr[rngId] = fromAddr

IRs:
REF_1024(address) -> playerFromAddr[rngId]
REF_1024(address) (->playerFromAddr) := fromAddr(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
playerBetId[rngId] = rngId

IRs:
REF_1025(bytes32) -> playerBetId[rngId]
REF_1025(bytes32) (->playerBetId) := rngId(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
playerNumber[rngId] = rollTimes

IRs:
REF_1026(uint256) -> playerNumber[rngId]
REF_1026(uint256) (->playerNumber) := rollTimes(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
playerBetValue[rngId] = msg.value

IRs:
REF_1027(uint256) -> playerBetValue[rngId]
REF_1027(uint256) (->playerBetValue) := msg.value(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
playerAddress[rngId] = msg.sender

IRs:
REF_1028(address) -> playerAddress[rngId]
REF_1028(address) (->playerAddress) := msg.sender(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
playerProfit[rngId] = msg.value * rollTimes

IRs:
REF_1029(uint256) -> playerProfit[rngId]
TMP_1639(uint256) = msg.value * rollTimes
REF_1029(uint256) (->playerProfit) := TMP_1639(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
maxPendingPayouts = safeAdd(maxPendingPayouts,playerProfit[rngId])

IRs:
REF_1030(uint256) -> playerProfit[rngId]
TMP_1640(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(maxPendingPayouts,REF_1030)
maxPendingPayouts(uint256) := TMP_1640(uint256)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
gameIsActive()

IRs:
MODIFIER_CALL, LuckyETH.gameIsActive()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
betIsValid(msg.value,rollTimes)

IRs:
MODIFIER_CALL, LuckyETH.betIsValid(uint256,uint256)(msg.value,rollTimes)"];
11->1;
}
// Function: 22635.sol-LuckyETH-playerRollDiceSingle(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pre1 = strConcat(queryUrl,encrypt(toAsciiString(msg.sender)),_,encrypt(uint2str(msg.value)),&max=)

IRs:
TMP_1618(string) = INTERNAL_CALL, LuckyETH.toAsciiString(address)(msg.sender)
TMP_1619(string) = INTERNAL_CALL, LuckyETH.encrypt(string)(TMP_1618)
TMP_1620(string) = INTERNAL_CALL, usingOraclize.uint2str(uint256)(msg.value)
TMP_1621(string) = INTERNAL_CALL, LuckyETH.encrypt(string)(TMP_1620)
TMP_1622(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(queryUrl,TMP_1619,_,TMP_1621,&max=)
pre1(string) := TMP_1622(string)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
rngId = oraclize_query(URL,strConcat(pre1,uint2str(rollTimes),&format=pure),gasForOraclize)

IRs:
TMP_1623(string) = INTERNAL_CALL, usingOraclize.uint2str(uint256)(rollTimes)
TMP_1624(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string)(pre1,TMP_1623,&format=pure)
TMP_1625(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string,uint256)(URL,TMP_1624,gasForOraclize)
rngId(bytes32) := TMP_1625(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
playerFromAddr[rngId] = address(0)

IRs:
REF_1017(address) -> playerFromAddr[rngId]
TMP_1626 = CONVERT 0 to address
REF_1017(address) (->playerFromAddr) := TMP_1626(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
playerBetId[rngId] = rngId

IRs:
REF_1018(bytes32) -> playerBetId[rngId]
REF_1018(bytes32) (->playerBetId) := rngId(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
playerNumber[rngId] = rollTimes

IRs:
REF_1019(uint256) -> playerNumber[rngId]
REF_1019(uint256) (->playerNumber) := rollTimes(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
playerBetValue[rngId] = msg.value

IRs:
REF_1020(uint256) -> playerBetValue[rngId]
REF_1020(uint256) (->playerBetValue) := msg.value(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
playerAddress[rngId] = msg.sender

IRs:
REF_1021(address) -> playerAddress[rngId]
REF_1021(address) (->playerAddress) := msg.sender(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
playerProfit[rngId] = msg.value * rollTimes

IRs:
REF_1022(uint256) -> playerProfit[rngId]
TMP_1627(uint256) = msg.value * rollTimes
REF_1022(uint256) (->playerProfit) := TMP_1627(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
maxPendingPayouts = safeAdd(maxPendingPayouts,playerProfit[rngId])

IRs:
REF_1023(uint256) -> playerProfit[rngId]
TMP_1628(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(maxPendingPayouts,REF_1023)
maxPendingPayouts(uint256) := TMP_1628(uint256)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
gameIsActive()

IRs:
MODIFIER_CALL, LuckyETH.gameIsActive()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
betIsValid(msg.value,rollTimes)

IRs:
MODIFIER_CALL, LuckyETH.betIsValid(uint256,uint256)(msg.value,rollTimes)"];
11->1;
}
// Function: 22635.sol-LuckyETH-playerWithdrawPendingTransactions()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withdrawAmount = playerPendingWithdrawals[msg.sender]

IRs:
REF_1092(uint256) -> playerPendingWithdrawals[msg.sender]
withdrawAmount(uint256) := REF_1092(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
playerPendingWithdrawals[msg.sender] = 0

IRs:
REF_1093(uint256) -> playerPendingWithdrawals[msg.sender]
REF_1093(uint256) (->playerPendingWithdrawals) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
msg.sender.call.value(withdrawAmount)()

IRs:
TMP_1685(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:withdrawAmount 
CONDITION TMP_1685"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
playerPendingWithdrawals[msg.sender] = withdrawAmount

IRs:
REF_1096(uint256) -> playerPendingWithdrawals[msg.sender]
REF_1096(uint256) (->playerPendingWithdrawals) := withdrawAmount(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
payoutsAreActive()

IRs:
MODIFIER_CALL, LuckyETH.payoutsAreActive()()"];
8->1;
}
// Function: 22635.sol-LuckyETH-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! safeToAdd(a,b)

IRs:
TMP_884(bool) = INTERNAL_CALL, DSSafeAddSub.safeToAdd(uint256,uint256)(a,b)
TMP_885 = UnaryType.BANG TMP_884 
CONDITION TMP_885"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
a + b

IRs:
TMP_886(uint256) = a + b
RETURN TMP_886"];
}
// Function: 22635.sol-LuckyETH-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! safeToSubtract(a,b)

IRs:
TMP_888(bool) = INTERNAL_CALL, DSSafeAddSub.safeToSubtract(uint256,uint256)(a,b)
TMP_889 = UnaryType.BANG TMP_888 
CONDITION TMP_889"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
a - b

IRs:
TMP_890(uint256) = a - b
RETURN TMP_890"];
}
// Function: 22635.sol-LuckyETH-safeToAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(a + b >= a)

IRs:
TMP_882(uint256) = a + b
TMP_883(bool) = TMP_882 >= a
RETURN TMP_883"];
}
// Function: 22635.sol-LuckyETH-safeToSubtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(b <= a)

IRs:
TMP_887(bool) = b <= a
RETURN TMP_887"];
}
// Function: 22635.sol-LuckyETH-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 22635.sol-LuckyETH-setCaissa()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
cfrom = bytes(cryptoFrom)

IRs:
TMP_1606 = CONVERT cryptoFrom to bytes
cfrom(bytes) := TMP_1606(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
cto = bytes(cryptoTo)

IRs:
TMP_1607 = CONVERT cryptoTo to bytes
cto(bytes) := TMP_1607(bytes)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->9;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < cfrom.length

IRs:
REF_1007 -> LENGTH cfrom
TMP_1608(bool) = i < REF_1007
CONDITION TMP_1608"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
caissa[cfrom[i]] = cto[i]

IRs:
REF_1008(None) -> cfrom[i]
REF_1009(bytes1) -> caissa[REF_1008]
REF_1010(None) -> cto[i]
REF_1009(bytes1) (->caissa) := REF_1010(None)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_1609(uint256) := i(uint256)
i(uint256) = i + 1"];
8->6;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isCaissaSet = true

IRs:
isCaissaSet(bool) := True(bool)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LuckyETH.onlyOwner()()"];
10->1;
}
// Function: 22635.sol-LuckyETH-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_1705(uint256) = 60 * 60
TMP_1706(uint256) = TMP_1705 * 24
day(uint256) := TMP_1706(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_1707(uint256) = 60 * 60
TMP_1708(uint256) = TMP_1707 * 24
TMP_1709(uint256) = TMP_1708 * 7
week(uint256) := TMP_1709(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_1710(uint256) = 60 * 60
TMP_1711(uint256) = TMP_1710 * 24
TMP_1712(uint256) = TMP_1711 * 30
month(uint256) := TMP_1712(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
maxNumber = 999

IRs:
maxNumber(uint256) := 999(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
minNumber = 2

IRs:
minNumber(uint256) := 2(uint256)"];
}
// Function: 22635.sol-LuckyETH-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
queryUrl = http://randseed.org/api/randintwithseed?min=1&apikey=wSxw2ssJdSdfD3320S&seed=

IRs:
queryUrl(string) := http://randseed.org/api/randintwithseed?min=1&apikey=wSxw2ssJdSdfD3320S&seed=(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
cryptoFrom = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

IRs:
cryptoFrom(string) := abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
cryptoTo = E8HdOBYKcRCD0UT45s1rLQjXIfWZAqS9xlM2ntFNvapb6uiJoyzVPG7hkmeg3w

IRs:
cryptoTo(string) := E8HdOBYKcRCD0UT45s1rLQjXIfWZAqS9xlM2ntFNvapb6uiJoyzVPG7hkmeg3w(string)"];
}
// Function: 22635.sol-LuckyETH-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_1243 = CONVERT _a to bytes
a(bytes) := TMP_1243(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_1244 = CONVERT _b to bytes
b(bytes) := TMP_1244(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_875 -> LENGTH a
minLength(uint256) := REF_875(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_876 -> LENGTH b
TMP_1245(bool) = REF_876 < minLength
CONDITION TMP_1245"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_877 -> LENGTH b
minLength(uint256) := REF_877(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_1246(bool) = i < minLength
CONDITION TMP_1246"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_878(None) -> a[i]
REF_879(None) -> b[i]
TMP_1247(bool) = REF_878 < REF_879
CONDITION TMP_1247"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_1248(uint256) = 0 - 1
RETURN TMP_1248"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_880(None) -> a[i]
REF_881(None) -> b[i]
TMP_1249(bool) = REF_880 > REF_881
CONDITION TMP_1249"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_1250(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_882 -> LENGTH a
REF_883 -> LENGTH b
TMP_1251(bool) = REF_882 < REF_883
CONDITION TMP_1251"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_1252(uint256) = 0 - 1
RETURN TMP_1252"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_884 -> LENGTH a
REF_885 -> LENGTH b
TMP_1253(bool) = REF_884 > REF_885
CONDITION TMP_1253"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 22635.sol-LuckyETH-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_1310(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_1310"];
}
// Function: 22635.sol-LuckyETH-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_1309(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_1309"];
}
// Function: 22635.sol-LuckyETH-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_1308(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_1308"];
}
// Function: 22635.sol-LuckyETH-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_1280 = CONVERT _a to bytes
_ba(bytes) := TMP_1280(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_1281 = CONVERT _b to bytes
_bb(bytes) := TMP_1281(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_1282 = CONVERT _c to bytes
_bc(bytes) := TMP_1282(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_1283 = CONVERT _d to bytes
_bd(bytes) := TMP_1283(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_1284 = CONVERT _e to bytes
_be(bytes) := TMP_1284(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_899 -> LENGTH _ba
REF_900 -> LENGTH _bb
TMP_1286(uint256) = REF_899 + REF_900
REF_901 -> LENGTH _bc
TMP_1287(uint256) = TMP_1286 + REF_901
REF_902 -> LENGTH _bd
TMP_1288(uint256) = TMP_1287 + REF_902
REF_903 -> LENGTH _be
TMP_1289(uint256) = TMP_1288 + REF_903
TMP_1290 = new string(TMP_1289)
abcde(string) := TMP_1290(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_1291 = CONVERT abcde to bytes
babcde(bytes) := TMP_1291(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_904 -> LENGTH _ba
TMP_1292(bool) = i < REF_904
CONDITION TMP_1292"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_1293(uint256) := k(uint256)
k(uint256) = k + 1
REF_905(None) -> babcde[TMP_1293]
REF_906(None) -> _ba[i]
REF_905(None) (->babcde) := REF_906(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_1294(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_907 -> LENGTH _bb
TMP_1295(bool) = i < REF_907
CONDITION TMP_1295"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_1296(uint256) := k(uint256)
k(uint256) = k + 1
REF_908(None) -> babcde[TMP_1296]
REF_909(None) -> _bb[i]
REF_908(None) (->babcde) := REF_909(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_1297(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_910 -> LENGTH _bc
TMP_1298(bool) = i < REF_910
CONDITION TMP_1298"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_1299(uint256) := k(uint256)
k(uint256) = k + 1
REF_911(None) -> babcde[TMP_1299]
REF_912(None) -> _bc[i]
REF_911(None) (->babcde) := REF_912(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_1300(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_913 -> LENGTH _bd
TMP_1301(bool) = i < REF_913
CONDITION TMP_1301"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_1302(uint256) := k(uint256)
k(uint256) = k + 1
REF_914(None) -> babcde[TMP_1302]
REF_915(None) -> _bd[i]
REF_914(None) (->babcde) := REF_915(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_1303(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_916 -> LENGTH _be
TMP_1304(bool) = i < REF_916
CONDITION TMP_1304"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_1305(uint256) := k(uint256)
k(uint256) = k + 1
REF_917(None) -> babcde[TMP_1305]
REF_918(None) -> _be[i]
REF_917(None) (->babcde) := REF_918(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_1306(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_1307 = CONVERT babcde to string
RETURN TMP_1307"];
}
// Function: 22635.sol-LuckyETH-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_925 -> LENGTH arr
arrlen(uint256) := REF_925(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_1338(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_1338(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_1339(bool) = i < arrlen
CONDITION TMP_1339"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_926(bytes) -> elemArray[i]
REF_927(string) -> arr[i]
TMP_1340 = CONVERT REF_927 to bytes
REF_926(bytes) (->elemArray) := TMP_1340(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_928(bytes) -> elemArray[i]
REF_929 -> LENGTH REF_928
REF_930(bytes) -> elemArray[i]
REF_931 -> LENGTH REF_930
TMP_1341(uint256) = REF_931 - 1
TMP_1342(uint256) = TMP_1341 / 23
TMP_1343(uint256) = REF_929 + TMP_1342
TMP_1344(uint256) = TMP_1343 + 3
outputlen(uint256) = outputlen + TMP_1344"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1345(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_1346(uint256) = arrlen + 128
cborlen(uint256) := TMP_1346(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_1347 = CONVERT cborlen to bytes1
REF_932 -> LENGTH TMP_1347
outputlen(uint256) = outputlen + REF_932"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_1349 = new bytes(outputlen)
res(bytes) := TMP_1349(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_1350 = CONVERT cborlen to bytes1
REF_933 -> LENGTH TMP_1350
TMP_1351(bool) = REF_933 > ctr
CONDITION TMP_1351"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_934(None) -> res[ctr]
TMP_1352 = CONVERT cborlen to bytes1
REF_935(None) -> TMP_1352[ctr]
REF_934(None) (->res) := REF_935(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_1353(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_1354(bool) = i < arrlen
CONDITION TMP_1354"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_936(uint256) -> res[ctr]
REF_936(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_1355(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_937(bytes) -> elemArray[i]
REF_938 -> LENGTH REF_937
TMP_1356(bool) = x < REF_938
CONDITION TMP_1356"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_1357(uint256) = x % 23
TMP_1358(bool) = TMP_1357 == 0
CONDITION TMP_1358"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_1359 = CONVERT elemcborlen to bytes1
REF_939 -> LENGTH TMP_1359
TMP_1360(uint256) = ctr - lctr
TMP_1361(bool) = REF_939 > TMP_1360
CONDITION TMP_1361"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_940(None) -> res[ctr]
TMP_1362 = CONVERT elemcborlen to bytes1
TMP_1363(uint256) = ctr - lctr
REF_941(None) -> TMP_1362[TMP_1363]
REF_940(None) (->res) := REF_941(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_1364(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_942(None) -> res[ctr]
REF_943(bytes) -> elemArray[i]
REF_944(None) -> REF_943[x]
REF_942(None) (->res) := REF_944(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_1365(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_1366(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_945(uint256) -> res[ctr]
REF_945(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_1367(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_1368(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_946(bytes) -> elemArray[i]
REF_947 -> LENGTH REF_946
TMP_1369(uint256) = REF_947 - x
TMP_1370(bool) = TMP_1369 >= 24
CONDITION TMP_1370"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_948(bytes) -> elemArray[i]
REF_949 -> LENGTH REF_948
TMP_1371(uint256) = REF_949 - x
elemcborlen(uint256) := TMP_1371(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 22635.sol-LuckyETH-toAsciiString(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
s = new bytes(40)

IRs:
TMP_1575 = new bytes(40)
s(bytes) := TMP_1575(bytes)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->12;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < 20

IRs:
TMP_1576(bool) = i < 20
CONDITION TMP_1576"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
b = bytes1(uint8(uint256(x) / (2 ** (8 * (19 - i)))))

IRs:
TMP_1577 = CONVERT x to uint256
TMP_1578(uint256) = 19 - i
TMP_1579(uint256) = 8 * TMP_1578
TMP_1580(uint256) = 2 ** TMP_1579
TMP_1581(uint256) = TMP_1577 / TMP_1580
TMP_1582 = CONVERT TMP_1581 to uint8
TMP_1583 = CONVERT TMP_1582 to bytes1
b(bytes1) := TMP_1583(bytes1)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
hi = bytes1(uint8(b) / 16)

IRs:
TMP_1584 = CONVERT b to uint8
TMP_1585(uint8) = TMP_1584 / 16
TMP_1586 = CONVERT TMP_1585 to bytes1
hi(bytes1) := TMP_1586(bytes1)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
lo = bytes1(uint8(b) - 16 * uint8(hi))

IRs:
TMP_1587 = CONVERT b to uint8
TMP_1588 = CONVERT hi to uint8
TMP_1589(uint256) = 16 * TMP_1588
TMP_1590(uint8) = TMP_1587 - TMP_1589
TMP_1591 = CONVERT TMP_1590 to bytes1
lo(bytes1) := TMP_1591(bytes1)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
s[2 * i] = char(hi)

IRs:
TMP_1592(uint256) = 2 * i
REF_1005(bytes1) -> s[TMP_1592]
TMP_1593(bytes1) = INTERNAL_CALL, LuckyETH.char(bytes1)(hi)
REF_1005(bytes1) (->s) := TMP_1593(bytes1)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
s[2 * i + 1] = char(lo)

IRs:
TMP_1594(uint256) = 2 * i
TMP_1595(uint256) = TMP_1594 + 1
REF_1006(bytes1) -> s[TMP_1595]
TMP_1596(bytes1) = INTERNAL_CALL, LuckyETH.char(bytes1)(lo)
REF_1006(bytes1) (->s) := TMP_1596(bytes1)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_1597(uint256) := i(uint256)
i(uint256) = i + 1"];
11->5;
12[label="Node Type: RETURN 12

EXPRESSION:
string(s)

IRs:
TMP_1598 = CONVERT s to string
RETURN TMP_1598"];
}
// Function: 22635.sol-LuckyETH-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_1325(bool) = i == 0
CONDITION TMP_1325"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_1326(bool) = j != 0
CONDITION TMP_1326"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_1327(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_1329 = new bytes(len)
bstr(bytes) := TMP_1329(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_1330(uint256) = len - 1
k(uint256) := TMP_1330(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_1331(bool) = i != 0
CONDITION TMP_1331"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_1332(uint256) := k(uint256)
k(uint256) = k - 1
REF_924(bytes1) -> bstr[TMP_1332]
TMP_1333(uint256) = i % 10
TMP_1334(uint256) = 48 + TMP_1333
TMP_1335 = CONVERT TMP_1334 to bytes1
REF_924(bytes1) (->bstr) := TMP_1335(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_1336 = CONVERT bstr to string
RETURN TMP_1336"];
}
// Function: 22635.sol-LuckyETH-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_1424 = new bytes(32)
sigr_(bytes) := TMP_1424(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_980(None) -> dersig[3]
TMP_1425 = CONVERT REF_980 to uint256
TMP_1426(uint256) = TMP_1425 - 32
TMP_1427(uint256) = 4 + TMP_1426
offset(uint256) := TMP_1427(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_1428(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_1428(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_1430 = new bytes(32)
sigs_(bytes) := TMP_1430(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_1431(uint256) = 32 + 2
offset(uint256) = offset + TMP_1431"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_1432(uint256) = offset - 1
REF_981(None) -> dersig[TMP_1432]
TMP_1433 = CONVERT REF_981 to uint256
TMP_1434(uint256) = TMP_1433 - 32
TMP_1435(uint256) = offset + TMP_1434
TMP_1436(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_1435,32,sigs_,0)
sigs_(bytes) := TMP_1436(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_3(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_3 index: 0 
signer(address)= UNPACK TUPLE_3 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(sha3()(pubkey)) == signer

IRs:
TMP_1437(bytes32) = SOLIDITY_CALL sha3()(pubkey)
TMP_1438 = CONVERT TMP_1437 to address
TMP_1439(bool) = TMP_1438 == signer
CONDITION TMP_1439"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_4(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_4 index: 0 
signer(address)= UNPACK TUPLE_4 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(sha3()(pubkey)) == signer)

IRs:
TMP_1440(bytes32) = SOLIDITY_CALL sha3()(pubkey)
TMP_1441 = CONVERT TMP_1440 to address
TMP_1442(bool) = TMP_1441 == signer
RETURN TMP_1442"];
}
// Function: 22635.sol-OraclizeAddrResolverI-getAddress()
digraph{
}
// Function: 22635.sol-OraclizeI-getPrice(string)
digraph{
}
// Function: 22635.sol-OraclizeI-getPrice(string,uint256)
digraph{
}
// Function: 22635.sol-OraclizeI-query(uint256,string,string)
digraph{
}
// Function: 22635.sol-OraclizeI-query2(uint256,string,string,string)
digraph{
}
// Function: 22635.sol-OraclizeI-query2_withGasLimit(uint256,string,string,string,uint256)
digraph{
}
// Function: 22635.sol-OraclizeI-queryN(uint256,string,bytes)
digraph{
}
// Function: 22635.sol-OraclizeI-queryN_withGasLimit(uint256,string,bytes,uint256)
digraph{
}
// Function: 22635.sol-OraclizeI-query_withGasLimit(uint256,string,string,uint256)
digraph{
}
// Function: 22635.sol-OraclizeI-randomDS_getSessionPubKeyHash()
digraph{
}
// Function: 22635.sol-OraclizeI-setConfig(bytes32)
digraph{
}
// Function: 22635.sol-OraclizeI-setCustomGasPrice(uint256)
digraph{
}
// Function: 22635.sol-OraclizeI-setProofType(bytes1)
digraph{
}
// Function: 22635.sol-OraclizeI-useCoupon(string)
digraph{
}
// Function: 22635.sol-strings-beyond(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
self._len < needle._len

IRs:
REF_472(uint256) -> self._len
REF_473(uint256) -> needle._len
TMP_802(bool) = REF_472 < REF_473
CONDITION TMP_802"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
self

IRs:
RETURN self"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
equal = true

IRs:
equal(bool) := True(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
self._ptr != needle._ptr

IRs:
REF_474(uint256) -> self._ptr
REF_475(uint256) -> needle._ptr
TMP_803(bool) = REF_474 != REF_475
CONDITION TMP_803"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: INLINE ASM 6
"];
6->7;
7[label="Node Type: END INLINE ASM 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
equal

IRs:
CONDITION equal"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
self._len -= needle._len

IRs:
REF_476(uint256) -> self._len
REF_477(uint256) -> needle._len
REF_476(-> self) = REF_476 - REF_477"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
self._ptr += needle._len

IRs:
REF_478(uint256) -> self._ptr
REF_479(uint256) -> needle._len
REF_478(-> self) = REF_478 + REF_479"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
self

IRs:
RETURN self"];
}
// Function: 22635.sol-strings-compare(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
shortest = self._len

IRs:
REF_445(uint256) -> self._len
shortest(uint256) := REF_445(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
other._len < self._len

IRs:
REF_446(uint256) -> other._len
REF_447(uint256) -> self._len
TMP_755(bool) = REF_446 < REF_447
CONDITION TMP_755"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
shortest = other._len

IRs:
REF_448(uint256) -> other._len
shortest(uint256) := REF_448(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
selfptr = self._ptr

IRs:
REF_449(uint256) -> self._ptr
selfptr(uint256) := REF_449(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
otherptr = other._ptr

IRs:
REF_450(uint256) -> other._ptr
otherptr(uint256) := REF_450(uint256)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->25;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
idx = 0

IRs:
idx(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
idx < shortest

IRs:
TMP_756(bool) = idx < shortest
CONDITION TMP_756"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: NEW VARIABLE 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12
"];
12->13;
13[label="Node Type: INLINE ASM 13
"];
13->14;
14[label="Node Type: END INLINE ASM 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
a != b

IRs:
TMP_757(bool) = a != b
CONDITION TMP_757"];
15->16[label="True"];
15->21[label="False"];
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
mask = ~ (2 ** (8 * (32 - shortest + idx)) - 1)

IRs:
TMP_758(uint256) = 32 - shortest
TMP_759(uint256) = TMP_758 + idx
TMP_760(uint256) = 8 * TMP_759
TMP_761(uint256) = 2 ** TMP_760
TMP_762(uint256) = TMP_761 - 1
TMP_763 = UnaryType.TILD TMP_762 
mask(uint256) := TMP_763(uint256)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
diff = (a & mask) - (b & mask)

IRs:
TMP_764(uint256) = a & mask
TMP_765(uint256) = b & mask
TMP_766(uint256) = TMP_764 - TMP_765
diff(uint256) := TMP_766(uint256)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
diff != 0

IRs:
TMP_767(bool) = diff != 0
CONDITION TMP_767"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(diff)

IRs:
TMP_768 = CONVERT diff to int256
RETURN TMP_768"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
selfptr += 32

IRs:
selfptr(uint256) = selfptr + 32"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
otherptr += 32

IRs:
otherptr(uint256) = otherptr + 32"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
idx += 32

IRs:
idx(uint256) = idx + 32"];
24->10;
25[label="Node Type: RETURN 25

EXPRESSION:
int256(self._len) - int256(other._len)

IRs:
REF_451(uint256) -> self._len
TMP_769 = CONVERT REF_451 to int256
REF_452(uint256) -> other._len
TMP_770 = CONVERT REF_452 to int256
TMP_771(int256) = TMP_769 - TMP_770
RETURN TMP_771"];
}
// Function: 22635.sol-strings-concat(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ret = new string(self._len + other._len)

IRs:
REF_553(uint256) -> self._len
REF_554(uint256) -> other._len
TMP_855(uint256) = REF_553 + REF_554
TMP_856 = new string(TMP_855)
ret(string) := TMP_856(string)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
memcpy(retptr,self._ptr,self._len)

IRs:
REF_555(uint256) -> self._ptr
REF_556(uint256) -> self._len
INTERNAL_CALL, strings.memcpy(uint256,uint256,uint256)(retptr,REF_555,REF_556)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
memcpy(retptr + self._len,other._ptr,other._len)

IRs:
REF_557(uint256) -> self._len
TMP_858(uint256) = retptr + REF_557
REF_558(uint256) -> other._ptr
REF_559(uint256) -> other._len
INTERNAL_CALL, strings.memcpy(uint256,uint256,uint256)(TMP_858,REF_558,REF_559)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 22635.sol-strings-contains(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
rfindPtr(self._len,self._ptr,needle._len,needle._ptr) != self._ptr

IRs:
REF_548(uint256) -> self._len
REF_549(uint256) -> self._ptr
REF_550(uint256) -> needle._len
REF_551(uint256) -> needle._ptr
TMP_852(uint256) = INTERNAL_CALL, strings.rfindPtr(uint256,uint256,uint256,uint256)(REF_548,REF_549,REF_550,REF_551)
REF_552(uint256) -> self._ptr
TMP_853(bool) = TMP_852 != REF_552
RETURN TMP_853"];
}
// Function: 22635.sol-strings-copy(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
slice(self._len,self._ptr)

IRs:
REF_437(uint256) -> self._len
REF_438(uint256) -> self._ptr
TMP_741(strings.slice) = new slice(REF_437,REF_438)
RETURN TMP_741"];
}
// Function: 22635.sol-strings-count(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = findPtr(self._len,self._ptr,needle._len,needle._ptr) + needle._len

IRs:
REF_536(uint256) -> self._len
REF_537(uint256) -> self._ptr
REF_538(uint256) -> needle._len
REF_539(uint256) -> needle._ptr
TMP_843(uint256) = INTERNAL_CALL, strings.findPtr(uint256,uint256,uint256,uint256)(REF_536,REF_537,REF_538,REF_539)
REF_540(uint256) -> needle._len
TMP_844(uint256) = TMP_843 + REF_540
ptr(uint256) := TMP_844(uint256)"];
1->2;
2[label="Node Type: BEGIN_LOOP 2
"];
2->3;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
ptr <= self._ptr + self._len

IRs:
REF_541(uint256) -> self._ptr
REF_542(uint256) -> self._len
TMP_845(uint256) = REF_541 + REF_542
TMP_846(bool) = ptr <= TMP_845
CONDITION TMP_846"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
count ++

IRs:
TMP_847(uint256) := count(uint256)
count(uint256) = count + 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ptr = findPtr(self._len - (ptr - self._ptr),ptr,needle._len,needle._ptr) + needle._len

IRs:
REF_543(uint256) -> self._len
REF_544(uint256) -> self._ptr
TMP_848(uint256) = ptr - REF_544
TMP_849(uint256) = REF_543 - TMP_848
REF_545(uint256) -> needle._len
REF_546(uint256) -> needle._ptr
TMP_850(uint256) = INTERNAL_CALL, strings.findPtr(uint256,uint256,uint256,uint256)(TMP_849,ptr,REF_545,REF_546)
REF_547(uint256) -> needle._len
TMP_851(uint256) = TMP_850 + REF_547
ptr(uint256) := TMP_851(uint256)"];
5->3;
6[label="Node Type: END_LOOP 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 22635.sol-strings-empty(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
self._len == 0

IRs:
REF_444(uint256) -> self._len
TMP_754(bool) = REF_444 == 0
RETURN TMP_754"];
}
// Function: 22635.sol-strings-endsWith(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
self._len < needle._len

IRs:
REF_480(uint256) -> self._len
REF_481(uint256) -> needle._len
TMP_804(bool) = REF_480 < REF_481
CONDITION TMP_804"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
selfptr = self._ptr + self._len - needle._len

IRs:
REF_482(uint256) -> self._ptr
REF_483(uint256) -> self._len
TMP_805(uint256) = REF_482 + REF_483
REF_484(uint256) -> needle._len
TMP_806(uint256) = TMP_805 - REF_484
selfptr(uint256) := TMP_806(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
selfptr == needle._ptr

IRs:
REF_485(uint256) -> needle._ptr
TMP_807(bool) = selfptr == REF_485
CONDITION TMP_807"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
equal

IRs:
RETURN equal"];
}
// Function: 22635.sol-strings-equals(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
compare(self,other) == 0

IRs:
TMP_772(int256) = INTERNAL_CALL, strings.compare(strings.slice,strings.slice)(self,other)
TMP_773(bool) = TMP_772 == 0
RETURN TMP_773"];
}
// Function: 22635.sol-strings-find(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = findPtr(self._len,self._ptr,needle._len,needle._ptr)

IRs:
REF_494(uint256) -> self._len
REF_495(uint256) -> self._ptr
REF_496(uint256) -> needle._len
REF_497(uint256) -> needle._ptr
TMP_826(uint256) = INTERNAL_CALL, strings.findPtr(uint256,uint256,uint256,uint256)(REF_494,REF_495,REF_496,REF_497)
ptr(uint256) := TMP_826(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
self._len -= ptr - self._ptr

IRs:
REF_498(uint256) -> self._len
REF_499(uint256) -> self._ptr
TMP_827(uint256) = ptr - REF_499
REF_498(-> self) = REF_498 - TMP_827"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
self._ptr = ptr

IRs:
REF_500(uint256) -> self._ptr
REF_500(uint256) (->self) := ptr(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
self

IRs:
RETURN self"];
}
// Function: 22635.sol-strings-findPtr(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
needlelen <= selflen

IRs:
TMP_812(bool) = needlelen <= selflen
CONDITION TMP_812"];
3->4[label="True"];
3->25[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
needlelen <= 32

IRs:
TMP_813(bool) = needlelen <= 32
CONDITION TMP_813"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
ptr

IRs:
RETURN ptr"];
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ptr = selfptr

IRs:
ptr(uint256) := selfptr(uint256)"];
11->14;
12[label="Node Type: BEGIN_LOOP 12
"];
12->15;
13[label="Node Type: END_LOOP 13
"];
13->24;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
idx = 0

IRs:
idx(uint256) := 0(uint256)"];
14->12;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
idx <= selflen - needlelen

IRs:
TMP_814(uint256) = selflen - needlelen
TMP_815(bool) = idx <= TMP_814
CONDITION TMP_815"];
15->16[label="True"];
15->13[label="False"];
16[label="Node Type: NEW VARIABLE 16
"];
16->17;
17[label="Node Type: INLINE ASM 17
"];
17->18;
18[label="Node Type: END INLINE ASM 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
hash == testHash

IRs:
TMP_816(bool) = hash == testHash
CONDITION TMP_816"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: RETURN 20

EXPRESSION:
ptr

IRs:
RETURN ptr"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
ptr += 1

IRs:
ptr(uint256) = ptr + 1"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
idx ++

IRs:
TMP_817(uint256) := idx(uint256)
idx(uint256) = idx + 1"];
23->15;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: RETURN 26

EXPRESSION:
selfptr + selflen

IRs:
TMP_818(uint256) = selfptr + selflen
RETURN TMP_818"];
}
// Function: 22635.sol-strings-join(strings.slice,strings.slice[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
parts.length == 0

IRs:
REF_560 -> LENGTH parts
TMP_860(bool) = REF_560 == 0
CONDITION TMP_860"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:


IRs:
RETURN "];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
len = self._len * (parts.length - 1)

IRs:
REF_561(uint256) -> self._len
REF_562 -> LENGTH parts
TMP_861(uint256) = REF_562 - 1
TMP_862(uint256) = REF_561 * TMP_861
len(uint256) := TMP_862(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < parts.length

IRs:
REF_563 -> LENGTH parts
TMP_863(bool) = i < REF_563
CONDITION TMP_863"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
len += parts[i]._len

IRs:
REF_564(strings.slice) -> parts[i]
REF_565(uint256) -> REF_564._len
len(uint256) = len + REF_565"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_864(uint256) := i(uint256)
i(uint256) = i + 1"];
10->8;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ret = new string(len)

IRs:
TMP_866 = new string(len)
ret(string) := TMP_866(string)"];
11->12;
12[label="Node Type: NEW VARIABLE 12
"];
12->13;
13[label="Node Type: INLINE ASM 13
"];
13->14;
14[label="Node Type: END INLINE ASM 14
"];
14->17;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->26;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < parts.length

IRs:
REF_566 -> LENGTH parts
TMP_867(bool) = i < REF_566
CONDITION TMP_867"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
memcpy(retptr,parts[i]._ptr,parts[i]._len)

IRs:
REF_567(strings.slice) -> parts[i]
REF_568(uint256) -> REF_567._ptr
REF_569(strings.slice) -> parts[i]
REF_570(uint256) -> REF_569._len
INTERNAL_CALL, strings.memcpy(uint256,uint256,uint256)(retptr,REF_568,REF_570)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
retptr += parts[i]._len

IRs:
REF_571(strings.slice) -> parts[i]
REF_572(uint256) -> REF_571._len
retptr(uint256) = retptr + REF_572"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
i < parts.length - 1

IRs:
REF_573 -> LENGTH parts
TMP_869(uint256) = REF_573 - 1
TMP_870(bool) = i < TMP_869
CONDITION TMP_870"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
memcpy(retptr,self._ptr,self._len)

IRs:
REF_574(uint256) -> self._ptr
REF_575(uint256) -> self._len
INTERNAL_CALL, strings.memcpy(uint256,uint256,uint256)(retptr,REF_574,REF_575)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
retptr += self._len

IRs:
REF_576(uint256) -> self._len
retptr(uint256) = retptr + REF_576"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
i ++

IRs:
TMP_872(uint256) := i(uint256)
i(uint256) = i + 1"];
25->18;
26[label="Node Type: RETURN 26

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 22635.sol-strings-keccak(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 22635.sol-strings-len(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
self == 0

IRs:
TMP_716(bool) = self == 0
CONDITION TMP_716"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
self & 0xffffffffffffffffffffffffffffffff == 0

IRs:
TMP_717(bytes32) = self & 340282366920938463463374607431768211455
TMP_718(bool) = TMP_717 == 0
CONDITION TMP_718"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ret += 16

IRs:
ret(uint256) = ret + 16"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
self = bytes32(uint256(self) / 0x100000000000000000000000000000000)

IRs:
TMP_719 = CONVERT self to uint256
TMP_720(uint256) = TMP_719 / 340282366920938463463374607431768211456
TMP_721 = CONVERT TMP_720 to bytes32
self(bytes32) := TMP_721(bytes32)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
self & 0xffffffffffffffff == 0

IRs:
TMP_722(bytes32) = self & 18446744073709551615
TMP_723(bool) = TMP_722 == 0
CONDITION TMP_723"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ret += 8

IRs:
ret(uint256) = ret + 8"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
self = bytes32(uint256(self) / 0x10000000000000000)

IRs:
TMP_724 = CONVERT self to uint256
TMP_725(uint256) = TMP_724 / 18446744073709551616
TMP_726 = CONVERT TMP_725 to bytes32
self(bytes32) := TMP_726(bytes32)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
self & 0xffffffff == 0

IRs:
TMP_727(bytes32) = self & 4294967295
TMP_728(bool) = TMP_727 == 0
CONDITION TMP_728"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
ret += 4

IRs:
ret(uint256) = ret + 4"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
self = bytes32(uint256(self) / 0x100000000)

IRs:
TMP_729 = CONVERT self to uint256
TMP_730(uint256) = TMP_729 / 4294967296
TMP_731 = CONVERT TMP_730 to bytes32
self(bytes32) := TMP_731(bytes32)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
self & 0xffff == 0

IRs:
TMP_732(bytes32) = self & 65535
TMP_733(bool) = TMP_732 == 0
CONDITION TMP_733"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ret += 2

IRs:
ret(uint256) = ret + 2"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
self = bytes32(uint256(self) / 0x10000)

IRs:
TMP_734 = CONVERT self to uint256
TMP_735(uint256) = TMP_734 / 65536
TMP_736 = CONVERT TMP_735 to bytes32
self(bytes32) := TMP_736(bytes32)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
self & 0xff == 0

IRs:
TMP_737(bytes32) = self & 255
TMP_738(bool) = TMP_737 == 0
CONDITION TMP_738"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
ret += 1

IRs:
ret(uint256) = ret + 1"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: RETURN 24

EXPRESSION:
32 - ret

IRs:
TMP_739(uint256) = 32 - ret
RETURN TMP_739"];
}
// Function: 22635.sol-strings-len(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = self._ptr - 31

IRs:
REF_442(uint256) -> self._ptr
TMP_745(uint256) = REF_442 - 31
ptr(uint256) := TMP_745(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
end = ptr + self._len

IRs:
REF_443(uint256) -> self._len
TMP_746(uint256) = ptr + REF_443
end(uint256) := TMP_746(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->27;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
len = 0

IRs:
len(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
ptr < end

IRs:
TMP_747(bool) = ptr < end
CONDITION TMP_747"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
b < 0x80

IRs:
TMP_748(bool) = b < 128
CONDITION TMP_748"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ptr += 1

IRs:
ptr(uint256) = ptr + 1"];
11->25;
12[label="Node Type: IF 12

EXPRESSION:
b < 0xE0

IRs:
TMP_749(bool) = b < 224
CONDITION TMP_749"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ptr += 2

IRs:
ptr(uint256) = ptr + 2"];
13->24;
14[label="Node Type: IF 14

EXPRESSION:
b < 0xF0

IRs:
TMP_750(bool) = b < 240
CONDITION TMP_750"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
ptr += 3

IRs:
ptr(uint256) = ptr + 3"];
15->23;
16[label="Node Type: IF 16

EXPRESSION:
b < 0xF8

IRs:
TMP_751(bool) = b < 248
CONDITION TMP_751"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
ptr += 4

IRs:
ptr(uint256) = ptr + 4"];
17->22;
18[label="Node Type: IF 18

EXPRESSION:
b < 0xFC

IRs:
TMP_752(bool) = b < 252
CONDITION TMP_752"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
ptr += 5

IRs:
ptr(uint256) = ptr + 5"];
19->21;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
ptr += 6

IRs:
ptr(uint256) = ptr + 6"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
len ++

IRs:
TMP_753(uint256) := len(uint256)
len(uint256) = len + 1"];
26->6;
27[label="Node Type: RETURN 27

EXPRESSION:
len

IRs:
RETURN len"];
}
// Function: 22635.sol-strings-memcpy(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: BEGIN_LOOP 1
"];
1->3;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
len >= 32

IRs:
TMP_710(bool) = len >= 32
CONDITION TMP_710"];
3->4[label="True"];
3->2[label="False"];
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dest += 32

IRs:
dest(uint256) = dest + 32"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
src += 32

IRs:
src(uint256) = src + 32"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len -= 32

IRs:
len(uint256) = len - 32"];
8->3;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
mask = 256 ** (32 - len) - 1

IRs:
TMP_711(uint256) = 32 - len
TMP_712(uint256) = 256 ** TMP_711
TMP_713(uint256) = TMP_712 - 1
mask(uint256) := TMP_713(uint256)"];
9->10;
10[label="Node Type: INLINE ASM 10
"];
10->11;
11[label="Node Type: END INLINE ASM 11
"];
}
// Function: 22635.sol-strings-nextRune(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nextRune(self,ret)

IRs:
TMP_779(strings.slice) = INTERNAL_CALL, strings.nextRune(strings.slice,strings.slice)(self,ret)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 22635.sol-strings-nextRune(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rune._ptr = self._ptr

IRs:
REF_453(uint256) -> rune._ptr
REF_454(uint256) -> self._ptr
REF_453(uint256) (->rune) := REF_454(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
self._len == 0

IRs:
REF_455(uint256) -> self._len
TMP_774(bool) = REF_455 == 0
CONDITION TMP_774"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rune._len = 0

IRs:
REF_456(uint256) -> rune._len
REF_456(uint256) (->rune) := 0(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
rune

IRs:
RETURN rune"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
b < 0x80

IRs:
TMP_775(bool) = b < 128
CONDITION TMP_775"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
len = 1

IRs:
len(uint256) := 1(uint256)"];
11->19;
12[label="Node Type: IF 12

EXPRESSION:
b < 0xE0

IRs:
TMP_776(bool) = b < 224
CONDITION TMP_776"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
len = 2

IRs:
len(uint256) := 2(uint256)"];
13->18;
14[label="Node Type: IF 14

EXPRESSION:
b < 0xF0

IRs:
TMP_777(bool) = b < 240
CONDITION TMP_777"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
len = 3

IRs:
len(uint256) := 3(uint256)"];
15->17;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
len = 4

IRs:
len(uint256) := 4(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
len > self._len

IRs:
REF_457(uint256) -> self._len
TMP_778(bool) = len > REF_457
CONDITION TMP_778"];
20->21[label="True"];
20->25[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
rune._len = self._len

IRs:
REF_458(uint256) -> rune._len
REF_459(uint256) -> self._len
REF_458(uint256) (->rune) := REF_459(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
self._ptr += self._len

IRs:
REF_460(uint256) -> self._ptr
REF_461(uint256) -> self._len
REF_460(-> self) = REF_460 + REF_461"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
self._len = 0

IRs:
REF_462(uint256) -> self._len
REF_462(uint256) (->self) := 0(uint256)"];
23->24;
24[label="Node Type: RETURN 24

EXPRESSION:
rune

IRs:
RETURN rune"];
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
self._ptr += len

IRs:
REF_463(uint256) -> self._ptr
REF_463(-> self) = REF_463 + len"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
self._len -= len

IRs:
REF_464(uint256) -> self._len
REF_464(-> self) = REF_464 - len"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
rune._len = len

IRs:
REF_465(uint256) -> rune._len
REF_465(uint256) (->rune) := len(uint256)"];
28->29;
29[label="Node Type: RETURN 29

EXPRESSION:
rune

IRs:
RETURN rune"];
}
// Function: 22635.sol-strings-ord(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
self._len == 0

IRs:
REF_466(uint256) -> self._len
TMP_780(bool) = REF_466 == 0
CONDITION TMP_780"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
div = 2 ** 248

IRs:
TMP_781(uint256) = 2 ** 248
div(uint256) := TMP_781(uint256)"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
b = word / div

IRs:
TMP_782(uint256) = word / div
b(uint256) := TMP_782(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
b < 0x80

IRs:
TMP_783(bool) = b < 128
CONDITION TMP_783"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ret = b

IRs:
ret(uint256) := b(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
len = 1

IRs:
len(uint256) := 1(uint256)"];
12->23;
13[label="Node Type: IF 13

EXPRESSION:
b < 0xE0

IRs:
TMP_784(bool) = b < 224
CONDITION TMP_784"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
ret = b & 0x1F

IRs:
TMP_785(uint256) = b & 31
ret(uint256) := TMP_785(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
len = 2

IRs:
len(uint256) := 2(uint256)"];
15->22;
16[label="Node Type: IF 16

EXPRESSION:
b < 0xF0

IRs:
TMP_786(bool) = b < 240
CONDITION TMP_786"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
ret = b & 0x0F

IRs:
TMP_787(uint256) = b & 15
ret(uint256) := TMP_787(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
len = 3

IRs:
len(uint256) := 3(uint256)"];
18->21;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
ret = b & 0x07

IRs:
TMP_788(uint256) = b & 7
ret(uint256) := TMP_788(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
len = 4

IRs:
len(uint256) := 4(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
len > self._len

IRs:
REF_467(uint256) -> self._len
TMP_789(bool) = len > REF_467
CONDITION TMP_789"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: RETURN 25

EXPRESSION:
0

IRs:
RETURN 0"];
26[label="Node Type: END_IF 26
"];
26->29;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->38;
29[label="Node Type: NEW VARIABLE 29

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < len

IRs:
TMP_790(bool) = i < len
CONDITION TMP_790"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
div = div / 256

IRs:
TMP_791(uint256) = div / 256
div(uint256) := TMP_791(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
b = (word / div) & 0xFF

IRs:
TMP_792(uint256) = word / div
TMP_793(uint256) = TMP_792 & 255
b(uint256) := TMP_793(uint256)"];
32->33;
33[label="Node Type: IF 33

EXPRESSION:
b & 0xC0 != 0x80

IRs:
TMP_794(uint256) = b & 192
TMP_795(bool) = TMP_794 != 128
CONDITION TMP_795"];
33->34[label="True"];
33->35[label="False"];
34[label="Node Type: RETURN 34

EXPRESSION:
0

IRs:
RETURN 0"];
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
ret = (ret * 64) | (b & 0x3F)

IRs:
TMP_796(uint256) = ret * 64
TMP_797(uint256) = b & 63
TMP_798(uint256) = TMP_796 | TMP_797
ret(uint256) := TMP_798(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
i ++

IRs:
TMP_799(uint256) := i(uint256)
i(uint256) = i + 1"];
37->30;
38[label="Node Type: RETURN 38

EXPRESSION:
ret

IRs:
RETURN ret"];
39[label="Node Type: RETURN 39

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 22635.sol-strings-rfind(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = rfindPtr(self._len,self._ptr,needle._len,needle._ptr)

IRs:
REF_501(uint256) -> self._len
REF_502(uint256) -> self._ptr
REF_503(uint256) -> needle._len
REF_504(uint256) -> needle._ptr
TMP_828(uint256) = INTERNAL_CALL, strings.rfindPtr(uint256,uint256,uint256,uint256)(REF_501,REF_502,REF_503,REF_504)
ptr(uint256) := TMP_828(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
self._len = ptr - self._ptr

IRs:
REF_505(uint256) -> self._len
REF_506(uint256) -> self._ptr
TMP_829(uint256) = ptr - REF_506
REF_505(uint256) (->self) := TMP_829(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
self

IRs:
RETURN self"];
}
// Function: 22635.sol-strings-rfindPtr(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
needlelen <= selflen

IRs:
TMP_819(bool) = needlelen <= selflen
CONDITION TMP_819"];
2->3[label="True"];
2->22[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
needlelen <= 32

IRs:
TMP_820(bool) = needlelen <= 32
CONDITION TMP_820"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
ptr

IRs:
RETURN ptr"];
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ptr = selfptr + (selflen - needlelen)

IRs:
TMP_821(uint256) = selflen - needlelen
TMP_822(uint256) = selfptr + TMP_821
ptr(uint256) := TMP_822(uint256)"];
10->11;
11[label="Node Type: BEGIN_LOOP 11
"];
11->12;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
ptr >= selfptr

IRs:
TMP_823(bool) = ptr >= selfptr
CONDITION TMP_823"];
12->13[label="True"];
12->20[label="False"];
13[label="Node Type: NEW VARIABLE 13
"];
13->14;
14[label="Node Type: INLINE ASM 14
"];
14->15;
15[label="Node Type: END INLINE ASM 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
hash == testHash

IRs:
TMP_824(bool) = hash == testHash
CONDITION TMP_824"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: RETURN 17

EXPRESSION:
ptr + needlelen

IRs:
TMP_825(uint256) = ptr + needlelen
RETURN TMP_825"];
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
ptr -= 1

IRs:
ptr(uint256) = ptr - 1"];
19->12;
20[label="Node Type: END_LOOP 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
selfptr

IRs:
RETURN selfptr"];
}
// Function: 22635.sol-strings-rsplit(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rsplit(self,needle,token)

IRs:
TMP_842(strings.slice) = INTERNAL_CALL, strings.rsplit(strings.slice,strings.slice,strings.slice)(self,needle,token)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
token

IRs:
RETURN token"];
}
// Function: 22635.sol-strings-rsplit(strings.slice,strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = rfindPtr(self._len,self._ptr,needle._len,needle._ptr)

IRs:
REF_523(uint256) -> self._len
REF_524(uint256) -> self._ptr
REF_525(uint256) -> needle._len
REF_526(uint256) -> needle._ptr
TMP_837(uint256) = INTERNAL_CALL, strings.rfindPtr(uint256,uint256,uint256,uint256)(REF_523,REF_524,REF_525,REF_526)
ptr(uint256) := TMP_837(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token._ptr = ptr

IRs:
REF_527(uint256) -> token._ptr
REF_527(uint256) (->token) := ptr(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token._len = self._len - (ptr - self._ptr)

IRs:
REF_528(uint256) -> token._len
REF_529(uint256) -> self._len
REF_530(uint256) -> self._ptr
TMP_838(uint256) = ptr - REF_530
TMP_839(uint256) = REF_529 - TMP_838
REF_528(uint256) (->token) := TMP_839(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
ptr == self._ptr

IRs:
REF_531(uint256) -> self._ptr
TMP_840(bool) = ptr == REF_531
CONDITION TMP_840"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
self._len = 0

IRs:
REF_532(uint256) -> self._len
REF_532(uint256) (->self) := 0(uint256)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
self._len -= token._len + needle._len

IRs:
REF_533(uint256) -> self._len
REF_534(uint256) -> token._len
REF_535(uint256) -> needle._len
TMP_841(uint256) = REF_534 + REF_535
REF_533(-> self) = REF_533 - TMP_841"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
token

IRs:
RETURN token"];
}
// Function: 22635.sol-strings-split(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
split(self,needle,token)

IRs:
TMP_836(strings.slice) = INTERNAL_CALL, strings.split(strings.slice,strings.slice,strings.slice)(self,needle,token)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
token

IRs:
RETURN token"];
}
// Function: 22635.sol-strings-split(strings.slice,strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = findPtr(self._len,self._ptr,needle._len,needle._ptr)

IRs:
REF_507(uint256) -> self._len
REF_508(uint256) -> self._ptr
REF_509(uint256) -> needle._len
REF_510(uint256) -> needle._ptr
TMP_830(uint256) = INTERNAL_CALL, strings.findPtr(uint256,uint256,uint256,uint256)(REF_507,REF_508,REF_509,REF_510)
ptr(uint256) := TMP_830(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token._ptr = self._ptr

IRs:
REF_511(uint256) -> token._ptr
REF_512(uint256) -> self._ptr
REF_511(uint256) (->token) := REF_512(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token._len = ptr - self._ptr

IRs:
REF_513(uint256) -> token._len
REF_514(uint256) -> self._ptr
TMP_831(uint256) = ptr - REF_514
REF_513(uint256) (->token) := TMP_831(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
ptr == self._ptr + self._len

IRs:
REF_515(uint256) -> self._ptr
REF_516(uint256) -> self._len
TMP_832(uint256) = REF_515 + REF_516
TMP_833(bool) = ptr == TMP_832
CONDITION TMP_833"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
self._len = 0

IRs:
REF_517(uint256) -> self._len
REF_517(uint256) (->self) := 0(uint256)"];
5->8;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
self._len -= token._len + needle._len

IRs:
REF_518(uint256) -> self._len
REF_519(uint256) -> token._len
REF_520(uint256) -> needle._len
TMP_834(uint256) = REF_519 + REF_520
REF_518(-> self) = REF_518 - TMP_834"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
self._ptr = ptr + needle._len

IRs:
REF_521(uint256) -> self._ptr
REF_522(uint256) -> needle._len
TMP_835(uint256) = ptr + REF_522
REF_521(uint256) (->self) := TMP_835(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
token

IRs:
RETURN token"];
}
// Function: 22635.sol-strings-startsWith(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
self._len < needle._len

IRs:
REF_468(uint256) -> self._len
REF_469(uint256) -> needle._len
TMP_800(bool) = REF_468 < REF_469
CONDITION TMP_800"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
self._ptr == needle._ptr

IRs:
REF_470(uint256) -> self._ptr
REF_471(uint256) -> needle._ptr
TMP_801(bool) = REF_470 == REF_471
CONDITION TMP_801"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
equal

IRs:
RETURN equal"];
}
// Function: 22635.sol-strings-toSlice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
slice(bytes(self).length,ptr)

IRs:
TMP_714 = CONVERT self to bytes
REF_435 -> LENGTH TMP_714
TMP_715(strings.slice) = new slice(REF_435,ptr)
RETURN TMP_715"];
}
// Function: 22635.sol-strings-toSliceB32(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ret._len = len(self)

IRs:
REF_436(uint256) -> ret._len
TMP_740(uint256) = INTERNAL_CALL, strings.len(bytes32)(self)
REF_436(uint256) (->ret) := TMP_740(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 22635.sol-strings-toString(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ret = new string(self._len)

IRs:
REF_439(uint256) -> self._len
TMP_743 = new string(REF_439)
ret(string) := TMP_743(string)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
memcpy(retptr,self._ptr,self._len)

IRs:
REF_440(uint256) -> self._ptr
REF_441(uint256) -> self._len
INTERNAL_CALL, strings.memcpy(uint256,uint256,uint256)(retptr,REF_440,REF_441)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 22635.sol-strings-until(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
self._len < needle._len

IRs:
REF_486(uint256) -> self._len
REF_487(uint256) -> needle._len
TMP_808(bool) = REF_486 < REF_487
CONDITION TMP_808"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
self

IRs:
RETURN self"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
selfptr = self._ptr + self._len - needle._len

IRs:
REF_488(uint256) -> self._ptr
REF_489(uint256) -> self._len
TMP_809(uint256) = REF_488 + REF_489
REF_490(uint256) -> needle._len
TMP_810(uint256) = TMP_809 - REF_490
selfptr(uint256) := TMP_810(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
equal = true

IRs:
equal(bool) := True(bool)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
selfptr != needle._ptr

IRs:
REF_491(uint256) -> needle._ptr
TMP_811(bool) = selfptr != REF_491
CONDITION TMP_811"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
equal

IRs:
CONDITION equal"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
self._len -= needle._len

IRs:
REF_492(uint256) -> self._len
REF_493(uint256) -> needle._len
REF_492(-> self) = REF_492 - REF_493"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
self

IRs:
RETURN self"];
}
// Function: 22635.sol-usingOraclize-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_26 = new bytes(0)
INTERNAL_CALL, usingOraclize.__callback(bytes32,string,bytes)(myid,result,TMP_26)"];
}
// Function: 22635.sol-usingOraclize-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 22635.sol-usingOraclize-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_373 -> LENGTH arr
arrlen(uint256) := REF_373(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_482(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_482(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_483(bool) = i < arrlen
CONDITION TMP_483"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_374(bytes) -> elemArray[i]
REF_375(bytes) -> arr[i]
TMP_484 = CONVERT REF_375 to bytes
REF_374(bytes) (->elemArray) := TMP_484(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_376(bytes) -> elemArray[i]
REF_377 -> LENGTH REF_376
REF_378(bytes) -> elemArray[i]
REF_379 -> LENGTH REF_378
TMP_485(uint256) = REF_379 - 1
TMP_486(uint256) = TMP_485 / 23
TMP_487(uint256) = REF_377 + TMP_486
TMP_488(uint256) = TMP_487 + 3
outputlen(uint256) = outputlen + TMP_488"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_489(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_490(uint256) = arrlen + 128
cborlen(uint256) := TMP_490(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_491 = CONVERT cborlen to bytes1
REF_380 -> LENGTH TMP_491
outputlen(uint256) = outputlen + REF_380"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_493 = new bytes(outputlen)
res(bytes) := TMP_493(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_494 = CONVERT cborlen to bytes1
REF_381 -> LENGTH TMP_494
TMP_495(bool) = REF_381 > ctr
CONDITION TMP_495"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_382(None) -> res[ctr]
TMP_496 = CONVERT cborlen to bytes1
REF_383(None) -> TMP_496[ctr]
REF_382(None) (->res) := REF_383(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_497(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_498(bool) = i < arrlen
CONDITION TMP_498"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_384(uint256) -> res[ctr]
REF_384(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_499(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_385(bytes) -> elemArray[i]
REF_386 -> LENGTH REF_385
TMP_500(bool) = x < REF_386
CONDITION TMP_500"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_501(uint256) = x % 23
TMP_502(bool) = TMP_501 == 0
CONDITION TMP_502"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_503 = CONVERT elemcborlen to bytes1
REF_387 -> LENGTH TMP_503
TMP_504(uint256) = ctr - lctr
TMP_505(bool) = REF_387 > TMP_504
CONDITION TMP_505"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_388(None) -> res[ctr]
TMP_506 = CONVERT elemcborlen to bytes1
TMP_507(uint256) = ctr - lctr
REF_389(None) -> TMP_506[TMP_507]
REF_388(None) (->res) := REF_389(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_508(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_390(None) -> res[ctr]
REF_391(bytes) -> elemArray[i]
REF_392(None) -> REF_391[x]
REF_390(None) (->res) := REF_392(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_509(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_510(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_393(uint256) -> res[ctr]
REF_393(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_511(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_512(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_394(bytes) -> elemArray[i]
REF_395 -> LENGTH REF_394
TMP_513(uint256) = REF_395 - x
TMP_514(bool) = TMP_513 >= 24
CONDITION TMP_514"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_396(bytes) -> elemArray[i]
REF_397 -> LENGTH REF_396
TMP_515(uint256) = REF_397 - x
elemcborlen(uint256) := TMP_515(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 22635.sol-usingOraclize-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_666(uint256) = length + toOffset
minLength(uint256) := TMP_666(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
to.length < minLength

IRs:
REF_426 -> LENGTH to
TMP_667(bool) = REF_426 < minLength
CONDITION TMP_667"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_668(uint256) = 32 + fromOffset
i(uint256) := TMP_668(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_669(uint256) = 32 + toOffset
j(uint256) := TMP_669(uint256)"];
6->7;
7[label="Node Type: BEGIN_LOOP 7
"];
7->8;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_670(uint256) = 32 + fromOffset
TMP_671(uint256) = TMP_670 + length
TMP_672(bool) = i < TMP_671
CONDITION TMP_672"];
8->9[label="True"];
8->13[label="False"];
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
12->8;
13[label="Node Type: END_LOOP 13
"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 22635.sol-usingOraclize-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_698(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_699 = CONVERT TMP_698 to OraclizeI
oraclize(OraclizeI) := TMP_699(OraclizeI)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 22635.sol-usingOraclize-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_427 -> LENGTH sig
TMP_673(bool) = REF_427 != 65
CONDITION TMP_673"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_674(bool) = v < 27
CONDITION TMP_674"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_675(bool) = v != 27
TMP_676(bool) = v != 28
TMP_677(bool) = TMP_675 && TMP_676
CONDITION TMP_677"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_2(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_2"];
}
// Function: 22635.sol-usingOraclize-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 22635.sol-usingOraclize-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_363 = CONVERT _haystack to bytes
h(bytes) := TMP_363(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_364 = CONVERT _needle to bytes
n(bytes) := TMP_364(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_309 -> LENGTH h
TMP_365(bool) = REF_309 < 1
REF_310 -> LENGTH n
TMP_366(bool) = REF_310 < 1
TMP_367(bool) = TMP_365 || TMP_366
REF_311 -> LENGTH n
REF_312 -> LENGTH h
TMP_368(bool) = REF_311 > REF_312
TMP_369(bool) = TMP_367 || TMP_368
CONDITION TMP_369"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_370(uint256) = 0 - 1
RETURN TMP_370"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_313 -> LENGTH h
TMP_371(uint256) = 2 ** 128
TMP_372(uint256) = TMP_371 - 1
TMP_373(bool) = REF_313 > TMP_372
CONDITION TMP_373"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_374(uint256) = 0 - 1
RETURN TMP_374"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_314 -> LENGTH h
TMP_375(bool) = i < REF_314
CONDITION TMP_375"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_315(None) -> h[i]
REF_316(None) -> n[0]
TMP_376(bool) = REF_315 == REF_316
CONDITION TMP_376"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_317 -> LENGTH n
TMP_377(bool) = subindex < REF_317
TMP_378(uint256) = i + subindex
REF_318 -> LENGTH h
TMP_379(bool) = TMP_378 < REF_318
TMP_380(bool) = TMP_377 && TMP_379
TMP_381(uint256) = i + subindex
REF_319(None) -> h[TMP_381]
REF_320(None) -> n[subindex]
TMP_382(bool) = REF_319 == REF_320
TMP_383(bool) = TMP_380 && TMP_382
CONDITION TMP_383"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_384(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_321 -> LENGTH n
TMP_385(bool) = subindex == REF_321
CONDITION TMP_385"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_386 = CONVERT i to int256
RETURN TMP_386"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_387(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_388(uint256) = 0 - 1
RETURN TMP_388"];
}
// Function: 22635.sol-usingOraclize-matchBytes32Prefix(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < prefix.length

IRs:
REF_414 -> LENGTH prefix
TMP_596(bool) = i < REF_414
CONDITION TMP_596"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_415(None) -> content[i]
REF_416(None) -> prefix[i]
TMP_597(bool) = REF_415 != REF_416
CONDITION TMP_597"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_598(uint8) := i(uint8)
i(uint8) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 22635.sol-usingOraclize-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_686 = CONVERT OAR to address
TMP_687(bool) = TMP_686 == 0
TMP_688 = CONVERT OAR to address
TMP_689(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_688)
TMP_690(bool) = TMP_689 == 0
TMP_691(bool) = TMP_687 || TMP_690
CONDITION TMP_691"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_692(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_693 = CONVERT oraclize to address
TMP_694(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_695(bool) = TMP_693 != TMP_694
CONDITION TMP_695"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_696(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_697 = CONVERT TMP_696 to OraclizeI
oraclize(OraclizeI) := TMP_697(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 22635.sol-usingOraclize-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_314(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_314"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-usingOraclize-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 22635.sol-usingOraclize-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_30(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_30"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-usingOraclize-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_32(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_32"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-usingOraclize-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_nbytes == 0) || (_nbytes > 32)

IRs:
TMP_516(bool) = _nbytes == 0
TMP_517(bool) = _nbytes > 32
TMP_518(bool) = TMP_516 || TMP_517
CONDITION TMP_518"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_520 = new bytes(1)
nbytes(bytes) := TMP_520(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_398(bytes1) -> nbytes[0]
TMP_521 = CONVERT _nbytes to bytes1
REF_398(bytes1) (->nbytes) := TMP_521(bytes1)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
unonce = new bytes(32)

IRs:
TMP_523 = new bytes(32)
unonce(bytes) := TMP_523(bytes)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sessionKeyHash = new bytes(32)

IRs:
TMP_525 = new bytes(32)
sessionKeyHash(bytes) := TMP_525(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_526(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_526(bytes32)"];
8->9;
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash)

IRs:
args(bytes[3]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)']"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
queryId = oraclize_query(_delay,random,args,_customGasLimit)

IRs:
TMP_527(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[3],uint256)(_delay,random,args,_customGasLimit)
queryId(bytes32) := TMP_527(bytes32)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,sha3()(bytes8(_delay),args[1],sha256()(args[0]),args[2]))

IRs:
TMP_528 = CONVERT _delay to bytes8
REF_399(bytes) -> args[1]
REF_400(bytes) -> args[0]
TMP_529(bytes32) = SOLIDITY_CALL sha256()(REF_400)
REF_401(bytes) -> args[2]
TMP_530(bytes32) = SOLIDITY_CALL sha3()(TMP_528,REF_399,TMP_529,REF_401)
INTERNAL_CALL, usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_530)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_235(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_235(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_171(bytes) -> dynargs[0]
REF_172(bytes) -> args[0]
REF_171(bytes) (->dynargs) := REF_172(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_236(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_236"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_247(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_247(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_177(bytes) -> dynargs[0]
REF_178(bytes) -> args[0]
REF_177(bytes) (->dynargs) := REF_178(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_248(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_248"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_251(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_251(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_179(bytes) -> dynargs[0]
REF_180(bytes) -> args[0]
REF_179(bytes) (->dynargs) := REF_180(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_181(bytes) -> dynargs[1]
REF_182(bytes) -> args[1]
REF_181(bytes) (->dynargs) := REF_182(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_252(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_252"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_263(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_263(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_191(bytes) -> dynargs[0]
REF_192(bytes) -> args[0]
REF_191(bytes) (->dynargs) := REF_192(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_193(bytes) -> dynargs[1]
REF_194(bytes) -> args[1]
REF_193(bytes) (->dynargs) := REF_194(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_264(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_264"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_267(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_267(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_195(bytes) -> dynargs[0]
REF_196(bytes) -> args[0]
REF_195(bytes) (->dynargs) := REF_196(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_197(bytes) -> dynargs[1]
REF_198(bytes) -> args[1]
REF_197(bytes) (->dynargs) := REF_198(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_199(bytes) -> dynargs[2]
REF_200(bytes) -> args[2]
REF_199(bytes) (->dynargs) := REF_200(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_268(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_268"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_279(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_279(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_213(bytes) -> dynargs[0]
REF_214(bytes) -> args[0]
REF_213(bytes) (->dynargs) := REF_214(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_215(bytes) -> dynargs[1]
REF_216(bytes) -> args[1]
REF_215(bytes) (->dynargs) := REF_216(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_217(bytes) -> dynargs[2]
REF_218(bytes) -> args[2]
REF_217(bytes) (->dynargs) := REF_218(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_280(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_280"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_283(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_283(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_219(bytes) -> dynargs[0]
REF_220(bytes) -> args[0]
REF_219(bytes) (->dynargs) := REF_220(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_221(bytes) -> dynargs[1]
REF_222(bytes) -> args[1]
REF_221(bytes) (->dynargs) := REF_222(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_223(bytes) -> dynargs[2]
REF_224(bytes) -> args[2]
REF_223(bytes) (->dynargs) := REF_224(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_225(bytes) -> dynargs[3]
REF_226(bytes) -> args[3]
REF_225(bytes) (->dynargs) := REF_226(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_284(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_284"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_295(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_295(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_243(bytes) -> dynargs[0]
REF_244(bytes) -> args[0]
REF_243(bytes) (->dynargs) := REF_244(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_245(bytes) -> dynargs[1]
REF_246(bytes) -> args[1]
REF_245(bytes) (->dynargs) := REF_246(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_247(bytes) -> dynargs[2]
REF_248(bytes) -> args[2]
REF_247(bytes) (->dynargs) := REF_248(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_249(bytes) -> dynargs[3]
REF_250(bytes) -> args[3]
REF_249(bytes) (->dynargs) := REF_250(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_296(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_296"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_299(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_299(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_251(bytes) -> dynargs[0]
REF_252(bytes) -> args[0]
REF_251(bytes) (->dynargs) := REF_252(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_253(bytes) -> dynargs[1]
REF_254(bytes) -> args[1]
REF_253(bytes) (->dynargs) := REF_254(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_255(bytes) -> dynargs[2]
REF_256(bytes) -> args[2]
REF_255(bytes) (->dynargs) := REF_256(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_257(bytes) -> dynargs[3]
REF_258(bytes) -> args[3]
REF_257(bytes) (->dynargs) := REF_258(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_259(bytes) -> dynargs[4]
REF_260(bytes) -> args[4]
REF_259(bytes) (->dynargs) := REF_260(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_300(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_300"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_311(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_311(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_281(bytes) -> dynargs[0]
REF_282(bytes) -> args[0]
REF_281(bytes) (->dynargs) := REF_282(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_283(bytes) -> dynargs[1]
REF_284(bytes) -> args[1]
REF_283(bytes) (->dynargs) := REF_284(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_285(bytes) -> dynargs[2]
REF_286(bytes) -> args[2]
REF_285(bytes) (->dynargs) := REF_286(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_287(bytes) -> dynargs[3]
REF_288(bytes) -> args[3]
REF_287(bytes) (->dynargs) := REF_288(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_289(bytes) -> dynargs[4]
REF_290(bytes) -> args[4]
REF_289(bytes) (->dynargs) := REF_290(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_312(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_312"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_202(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_202(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_203(uint256) = tx.gasprice * 200000
TMP_204(uint256) = 1000000000000000000 + TMP_203
TMP_205(bool) = price > TMP_204
CONDITION TMP_205"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_206(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_206(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_208(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_208"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_226(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_226(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_227(uint256) = tx.gasprice * gaslimit
TMP_228(uint256) = 1000000000000000000 + TMP_227
TMP_229(bool) = price > TMP_228
CONDITION TMP_229"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_230(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_230(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_232(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_232"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_34(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_34(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_35(uint256) = tx.gasprice * 200000
TMP_36(uint256) = 1000000000000000000 + TMP_35
TMP_37(bool) = price > TMP_36
CONDITION TMP_37"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_39(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_39"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_62(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_62(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_63(uint256) = tx.gasprice * 200000
TMP_64(uint256) = 1000000000000000000 + TMP_63
TMP_65(bool) = price > TMP_64
CONDITION TMP_65"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_67(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_67"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_83(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_83(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_84(uint256) = tx.gasprice * gaslimit
TMP_85(uint256) = 1000000000000000000 + TMP_84
TMP_86(bool) = price > TMP_85
CONDITION TMP_86"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_88(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_88"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_55(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_55(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_56(uint256) = tx.gasprice * gaslimit
TMP_57(uint256) = 1000000000000000000 + TMP_56
TMP_58(bool) = price > TMP_57
CONDITION TMP_58"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_60(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_60"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_123(string[])  = new string[](1)
dynargs(string[]) = ['TMP_123(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_39(string) -> dynargs[0]
REF_40(string) -> args[0]
REF_39(string) (->dynargs) := REF_40(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_124(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_124"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_135(string[])  = new string[](1)
dynargs(string[]) = ['TMP_135(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_45(string) -> dynargs[0]
REF_46(string) -> args[0]
REF_45(string) (->dynargs) := REF_46(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_136(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_136"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_139(string[])  = new string[](2)
dynargs(string[]) = ['TMP_139(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_47(string) -> dynargs[0]
REF_48(string) -> args[0]
REF_47(string) (->dynargs) := REF_48(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_49(string) -> dynargs[1]
REF_50(string) -> args[1]
REF_49(string) (->dynargs) := REF_50(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_140(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_140"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_151(string[])  = new string[](2)
dynargs(string[]) = ['TMP_151(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_59(string) -> dynargs[0]
REF_60(string) -> args[0]
REF_59(string) (->dynargs) := REF_60(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_61(string) -> dynargs[1]
REF_62(string) -> args[1]
REF_61(string) (->dynargs) := REF_62(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_152(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_152"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_155(string[])  = new string[](3)
dynargs(string[]) = ['TMP_155(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_63(string) -> dynargs[0]
REF_64(string) -> args[0]
REF_63(string) (->dynargs) := REF_64(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_65(string) -> dynargs[1]
REF_66(string) -> args[1]
REF_65(string) (->dynargs) := REF_66(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_67(string) -> dynargs[2]
REF_68(string) -> args[2]
REF_67(string) (->dynargs) := REF_68(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_156(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_156"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_167(string[])  = new string[](3)
dynargs(string[]) = ['TMP_167(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_81(string) -> dynargs[0]
REF_82(string) -> args[0]
REF_81(string) (->dynargs) := REF_82(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_83(string) -> dynargs[1]
REF_84(string) -> args[1]
REF_83(string) (->dynargs) := REF_84(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_85(string) -> dynargs[2]
REF_86(string) -> args[2]
REF_85(string) (->dynargs) := REF_86(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_168(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_168"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_171(string[])  = new string[](4)
dynargs(string[]) = ['TMP_171(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_87(string) -> dynargs[0]
REF_88(string) -> args[0]
REF_87(string) (->dynargs) := REF_88(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_89(string) -> dynargs[1]
REF_90(string) -> args[1]
REF_89(string) (->dynargs) := REF_90(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_91(string) -> dynargs[2]
REF_92(string) -> args[2]
REF_91(string) (->dynargs) := REF_92(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_93(string) -> dynargs[3]
REF_94(string) -> args[3]
REF_93(string) (->dynargs) := REF_94(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_172(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_172"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_183(string[])  = new string[](4)
dynargs(string[]) = ['TMP_183(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_111(string) -> dynargs[0]
REF_112(string) -> args[0]
REF_111(string) (->dynargs) := REF_112(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_113(string) -> dynargs[1]
REF_114(string) -> args[1]
REF_113(string) (->dynargs) := REF_114(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_115(string) -> dynargs[2]
REF_116(string) -> args[2]
REF_115(string) (->dynargs) := REF_116(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_117(string) -> dynargs[3]
REF_118(string) -> args[3]
REF_117(string) (->dynargs) := REF_118(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_184(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_184"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_187(string[])  = new string[](5)
dynargs(string[]) = ['TMP_187(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_119(string) -> dynargs[0]
REF_120(string) -> args[0]
REF_119(string) (->dynargs) := REF_120(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_121(string) -> dynargs[1]
REF_122(string) -> args[1]
REF_121(string) (->dynargs) := REF_122(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_123(string) -> dynargs[2]
REF_124(string) -> args[2]
REF_123(string) (->dynargs) := REF_124(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_125(string) -> dynargs[3]
REF_126(string) -> args[3]
REF_125(string) (->dynargs) := REF_126(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_127(string) -> dynargs[4]
REF_128(string) -> args[4]
REF_127(string) (->dynargs) := REF_128(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_188(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_188"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_199(string[])  = new string[](5)
dynargs(string[]) = ['TMP_199(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_149(string) -> dynargs[0]
REF_150(string) -> args[0]
REF_149(string) (->dynargs) := REF_150(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_151(string) -> dynargs[1]
REF_152(string) -> args[1]
REF_151(string) (->dynargs) := REF_152(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_153(string) -> dynargs[2]
REF_154(string) -> args[2]
REF_153(string) (->dynargs) := REF_154(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_155(string) -> dynargs[3]
REF_156(string) -> args[3]
REF_155(string) (->dynargs) := REF_156(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_157(string) -> dynargs[4]
REF_158(string) -> args[4]
REF_157(string) (->dynargs) := REF_158(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_200(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_200"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_90(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_90(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_91(uint256) = tx.gasprice * 200000
TMP_92(uint256) = 1000000000000000000 + TMP_91
TMP_93(bool) = price > TMP_92
CONDITION TMP_93"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_94(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_94(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_96(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_96"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_114(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_114(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_115(uint256) = tx.gasprice * gaslimit
TMP_116(uint256) = 1000000000000000000 + TMP_115
TMP_117(bool) = price > TMP_116
CONDITION TMP_117"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_118(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_118(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_120(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_120"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_239(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_239(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_173(bytes) -> dynargs[0]
REF_174(bytes) -> args[0]
REF_173(bytes) (->dynargs) := REF_174(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_240(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_240"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_243(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_243(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_175(bytes) -> dynargs[0]
REF_176(bytes) -> args[0]
REF_175(bytes) (->dynargs) := REF_176(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_244(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_244"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_255(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_255(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_183(bytes) -> dynargs[0]
REF_184(bytes) -> args[0]
REF_183(bytes) (->dynargs) := REF_184(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_185(bytes) -> dynargs[1]
REF_186(bytes) -> args[1]
REF_185(bytes) (->dynargs) := REF_186(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_256(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_256"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_259(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_259(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_187(bytes) -> dynargs[0]
REF_188(bytes) -> args[0]
REF_187(bytes) (->dynargs) := REF_188(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_189(bytes) -> dynargs[1]
REF_190(bytes) -> args[1]
REF_189(bytes) (->dynargs) := REF_190(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_260(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_260"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_271(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_271(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_201(bytes) -> dynargs[0]
REF_202(bytes) -> args[0]
REF_201(bytes) (->dynargs) := REF_202(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_203(bytes) -> dynargs[1]
REF_204(bytes) -> args[1]
REF_203(bytes) (->dynargs) := REF_204(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_205(bytes) -> dynargs[2]
REF_206(bytes) -> args[2]
REF_205(bytes) (->dynargs) := REF_206(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_272(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_272"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_275(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_275(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_207(bytes) -> dynargs[0]
REF_208(bytes) -> args[0]
REF_207(bytes) (->dynargs) := REF_208(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_209(bytes) -> dynargs[1]
REF_210(bytes) -> args[1]
REF_209(bytes) (->dynargs) := REF_210(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_211(bytes) -> dynargs[2]
REF_212(bytes) -> args[2]
REF_211(bytes) (->dynargs) := REF_212(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_276(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_276"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_287(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_287(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_227(bytes) -> dynargs[0]
REF_228(bytes) -> args[0]
REF_227(bytes) (->dynargs) := REF_228(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_229(bytes) -> dynargs[1]
REF_230(bytes) -> args[1]
REF_229(bytes) (->dynargs) := REF_230(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_231(bytes) -> dynargs[2]
REF_232(bytes) -> args[2]
REF_231(bytes) (->dynargs) := REF_232(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_233(bytes) -> dynargs[3]
REF_234(bytes) -> args[3]
REF_233(bytes) (->dynargs) := REF_234(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_288(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_288"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_291(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_291(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_235(bytes) -> dynargs[0]
REF_236(bytes) -> args[0]
REF_235(bytes) (->dynargs) := REF_236(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_237(bytes) -> dynargs[1]
REF_238(bytes) -> args[1]
REF_237(bytes) (->dynargs) := REF_238(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_239(bytes) -> dynargs[2]
REF_240(bytes) -> args[2]
REF_239(bytes) (->dynargs) := REF_240(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_241(bytes) -> dynargs[3]
REF_242(bytes) -> args[3]
REF_241(bytes) (->dynargs) := REF_242(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_292(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_292"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_303(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_303(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_261(bytes) -> dynargs[0]
REF_262(bytes) -> args[0]
REF_261(bytes) (->dynargs) := REF_262(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_263(bytes) -> dynargs[1]
REF_264(bytes) -> args[1]
REF_263(bytes) (->dynargs) := REF_264(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_265(bytes) -> dynargs[2]
REF_266(bytes) -> args[2]
REF_265(bytes) (->dynargs) := REF_266(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_267(bytes) -> dynargs[3]
REF_268(bytes) -> args[3]
REF_267(bytes) (->dynargs) := REF_268(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_269(bytes) -> dynargs[4]
REF_270(bytes) -> args[4]
REF_269(bytes) (->dynargs) := REF_270(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_304(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_304"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_307(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_307(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_271(bytes) -> dynargs[0]
REF_272(bytes) -> args[0]
REF_271(bytes) (->dynargs) := REF_272(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_273(bytes) -> dynargs[1]
REF_274(bytes) -> args[1]
REF_273(bytes) (->dynargs) := REF_274(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_275(bytes) -> dynargs[2]
REF_276(bytes) -> args[2]
REF_275(bytes) (->dynargs) := REF_276(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_277(bytes) -> dynargs[3]
REF_278(bytes) -> args[3]
REF_277(bytes) (->dynargs) := REF_278(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_279(bytes) -> dynargs[4]
REF_280(bytes) -> args[4]
REF_279(bytes) (->dynargs) := REF_280(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_308(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_308"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_210(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_210(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_211(uint256) = tx.gasprice * 200000
TMP_212(uint256) = 1000000000000000000 + TMP_211
TMP_213(bool) = price > TMP_212
CONDITION TMP_213"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_214(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_214(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_216(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_216"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_218(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_218(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_219(uint256) = tx.gasprice * gaslimit
TMP_220(uint256) = 1000000000000000000 + TMP_219
TMP_221(bool) = price > TMP_220
CONDITION TMP_221"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_222(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_222(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_224(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_224"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_41(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_41(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_42(uint256) = tx.gasprice * 200000
TMP_43(uint256) = 1000000000000000000 + TMP_42
TMP_44(bool) = price > TMP_43
CONDITION TMP_44"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_46(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_46"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_69(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_69(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_70(uint256) = tx.gasprice * 200000
TMP_71(uint256) = 1000000000000000000 + TMP_70
TMP_72(bool) = price > TMP_71
CONDITION TMP_72"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_74(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_74"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_76(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_76(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_77(uint256) = tx.gasprice * gaslimit
TMP_78(uint256) = 1000000000000000000 + TMP_77
TMP_79(bool) = price > TMP_78
CONDITION TMP_79"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_81(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_81"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_48(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_48(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_49(uint256) = tx.gasprice * gaslimit
TMP_50(uint256) = 1000000000000000000 + TMP_49
TMP_51(bool) = price > TMP_50
CONDITION TMP_51"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_53(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_53"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_127(string[])  = new string[](1)
dynargs(string[]) = ['TMP_127(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_41(string) -> dynargs[0]
REF_42(string) -> args[0]
REF_41(string) (->dynargs) := REF_42(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_128(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_128"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_131(string[])  = new string[](1)
dynargs(string[]) = ['TMP_131(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_43(string) -> dynargs[0]
REF_44(string) -> args[0]
REF_43(string) (->dynargs) := REF_44(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_132(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_132"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_143(string[])  = new string[](2)
dynargs(string[]) = ['TMP_143(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_51(string) -> dynargs[0]
REF_52(string) -> args[0]
REF_51(string) (->dynargs) := REF_52(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_53(string) -> dynargs[1]
REF_54(string) -> args[1]
REF_53(string) (->dynargs) := REF_54(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_144(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_144"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_147(string[])  = new string[](2)
dynargs(string[]) = ['TMP_147(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_55(string) -> dynargs[0]
REF_56(string) -> args[0]
REF_55(string) (->dynargs) := REF_56(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_57(string) -> dynargs[1]
REF_58(string) -> args[1]
REF_57(string) (->dynargs) := REF_58(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_148(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_148"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_159(string[])  = new string[](3)
dynargs(string[]) = ['TMP_159(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_69(string) -> dynargs[0]
REF_70(string) -> args[0]
REF_69(string) (->dynargs) := REF_70(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_71(string) -> dynargs[1]
REF_72(string) -> args[1]
REF_71(string) (->dynargs) := REF_72(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_73(string) -> dynargs[2]
REF_74(string) -> args[2]
REF_73(string) (->dynargs) := REF_74(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_160(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_160"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_163(string[])  = new string[](3)
dynargs(string[]) = ['TMP_163(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_75(string) -> dynargs[0]
REF_76(string) -> args[0]
REF_75(string) (->dynargs) := REF_76(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_77(string) -> dynargs[1]
REF_78(string) -> args[1]
REF_77(string) (->dynargs) := REF_78(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_79(string) -> dynargs[2]
REF_80(string) -> args[2]
REF_79(string) (->dynargs) := REF_80(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_164(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_164"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_175(string[])  = new string[](4)
dynargs(string[]) = ['TMP_175(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_95(string) -> dynargs[0]
REF_96(string) -> args[0]
REF_95(string) (->dynargs) := REF_96(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_97(string) -> dynargs[1]
REF_98(string) -> args[1]
REF_97(string) (->dynargs) := REF_98(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_99(string) -> dynargs[2]
REF_100(string) -> args[2]
REF_99(string) (->dynargs) := REF_100(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_101(string) -> dynargs[3]
REF_102(string) -> args[3]
REF_101(string) (->dynargs) := REF_102(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_176(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_176"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_179(string[])  = new string[](4)
dynargs(string[]) = ['TMP_179(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_103(string) -> dynargs[0]
REF_104(string) -> args[0]
REF_103(string) (->dynargs) := REF_104(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_105(string) -> dynargs[1]
REF_106(string) -> args[1]
REF_105(string) (->dynargs) := REF_106(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_107(string) -> dynargs[2]
REF_108(string) -> args[2]
REF_107(string) (->dynargs) := REF_108(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_109(string) -> dynargs[3]
REF_110(string) -> args[3]
REF_109(string) (->dynargs) := REF_110(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_180(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_180"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_191(string[])  = new string[](5)
dynargs(string[]) = ['TMP_191(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_129(string) -> dynargs[0]
REF_130(string) -> args[0]
REF_129(string) (->dynargs) := REF_130(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_131(string) -> dynargs[1]
REF_132(string) -> args[1]
REF_131(string) (->dynargs) := REF_132(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_133(string) -> dynargs[2]
REF_134(string) -> args[2]
REF_133(string) (->dynargs) := REF_134(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_135(string) -> dynargs[3]
REF_136(string) -> args[3]
REF_135(string) (->dynargs) := REF_136(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_137(string) -> dynargs[4]
REF_138(string) -> args[4]
REF_137(string) (->dynargs) := REF_138(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_192(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_192"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_195(string[])  = new string[](5)
dynargs(string[]) = ['TMP_195(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_139(string) -> dynargs[0]
REF_140(string) -> args[0]
REF_139(string) (->dynargs) := REF_140(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_141(string) -> dynargs[1]
REF_142(string) -> args[1]
REF_141(string) (->dynargs) := REF_142(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_143(string) -> dynargs[2]
REF_144(string) -> args[2]
REF_143(string) (->dynargs) := REF_144(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_145(string) -> dynargs[3]
REF_146(string) -> args[3]
REF_145(string) (->dynargs) := REF_146(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_147(string) -> dynargs[4]
REF_148(string) -> args[4]
REF_147(string) (->dynargs) := REF_148(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_196(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_196"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_98(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_98(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_99(uint256) = tx.gasprice * 200000
TMP_100(uint256) = 1000000000000000000 + TMP_99
TMP_101(bool) = price > TMP_100
CONDITION TMP_101"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_102(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_102(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_104(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_104"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_106(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_107(uint256) = tx.gasprice * gaslimit
TMP_108(uint256) = 1000000000000000000 + TMP_107
TMP_109(bool) = price > TMP_108
CONDITION TMP_109"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_110(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_110(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_112(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_112"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 22635.sol-usingOraclize-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_322(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_322"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-usingOraclize-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_432(None) -> _proof[0]
TMP_701(bool) = REF_432 != L
REF_433(None) -> _proof[1]
TMP_702(bool) = REF_433 != P
TMP_703(bool) = TMP_701 || TMP_702
REF_434(None) -> _proof[2]
TMP_704(bool) = REF_434 != 1
TMP_705(bool) = TMP_703 || TMP_704
CONDITION TMP_705"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_706 = CONVERT _result to bytes
TMP_707(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_708(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_706,TMP_707)
proofVerified(bool) := TMP_708(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_709(bool) = proofVerified == False
CONDITION TMP_709"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: _ 8
"];
}
// Function: 22635.sol-usingOraclize-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_599(uint256) = 3 + 65
TMP_600(uint256) = 3 + 65
TMP_601(uint256) = TMP_600 + 1
REF_417(None) -> proof[TMP_601]
TMP_602 = CONVERT REF_417 to uint256
TMP_603(uint256) = TMP_602 + 2
TMP_604(uint256) = TMP_599 + TMP_603
TMP_605(uint256) = TMP_604 + 32
ledgerProofLength(uint256) := TMP_605(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_607 = new bytes(32)
keyhash(bytes) := TMP_607(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_608(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
checkok = (sha3()(keyhash) == sha3()(sha256()(context_name,queryId)))

IRs:
TMP_609(bytes32) = SOLIDITY_CALL sha3()(keyhash)
TMP_610(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_611(bytes32) = SOLIDITY_CALL sha3()(TMP_610)
TMP_612(bool) = TMP_609 == TMP_611
checkok(bool) := TMP_612(bool)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
checkok == false

IRs:
TMP_613(bool) = checkok == False
CONDITION TMP_613"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_615(uint256) = 32 + 8
TMP_616(uint256) = TMP_615 + 1
TMP_617(uint256) = TMP_616 + 32
TMP_618(uint256) = ledgerProofLength + TMP_617
TMP_619(uint256) = TMP_618 + 1
REF_418(None) -> proof[TMP_619]
TMP_620 = CONVERT REF_418 to uint256
TMP_621(uint256) = TMP_620 + 2
TMP_622 = new bytes(TMP_621)
sig1(bytes) := TMP_622(bytes)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_623(uint256) = 32 + 8
TMP_624(uint256) = TMP_623 + 1
TMP_625(uint256) = TMP_624 + 32
TMP_626(uint256) = ledgerProofLength + TMP_625
REF_419 -> LENGTH sig1
TMP_627(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_626,REF_419,sig1,0)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
checkok = matchBytes32Prefix(sha256()(sig1),result)

IRs:
TMP_628(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_629(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes)(TMP_628,result)
checkok(bool) := TMP_629(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
checkok == false

IRs:
TMP_630(bool) = checkok == False
CONDITION TMP_630"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_632(uint256) = 8 + 1
TMP_633(uint256) = TMP_632 + 32
TMP_634 = new bytes(TMP_633)
commitmentSlice1(bytes) := TMP_634(bytes)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_635(uint256) = ledgerProofLength + 32
TMP_636(uint256) = 8 + 1
TMP_637(uint256) = TMP_636 + 32
TMP_638(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_635,TMP_637,commitmentSlice1,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_640 = new bytes(64)
sessionPubkey(bytes) := TMP_640(bytes)"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_641(uint256) = ledgerProofLength + 32
TMP_642(uint256) = 8 + 1
TMP_643(uint256) = TMP_642 + 32
TMP_644(uint256) = TMP_641 + TMP_643
REF_420 -> LENGTH sig1
TMP_645(uint256) = TMP_644 + REF_420
TMP_646(uint256) = TMP_645 + 65
sig2offset(uint256) := TMP_646(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_647(uint256) = sig2offset - 64
TMP_648(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_647,64,sessionPubkey,0)"];
19->20;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_649(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_649(bytes32)"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
oraclize_randomDS_args[queryId] == sha3()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_421(bytes32) -> oraclize_randomDS_args[queryId]
TMP_650(bytes32) = SOLIDITY_CALL sha3()(commitmentSlice1,sessionPubkeyHash)
TMP_651(bool) = REF_421 == TMP_650
CONDITION TMP_651"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_422(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_422 "];
22->24;
23[label="Node Type: RETURN 23

EXPRESSION:
false

IRs:
RETURN False"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: NEW VARIABLE 25

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_653(uint256) = 32 + 8
TMP_654(uint256) = TMP_653 + 1
TMP_655(uint256) = TMP_654 + 32
TMP_656 = new bytes(TMP_655)
tosign1(bytes) := TMP_656(bytes)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_657(uint256) = 32 + 8
TMP_658(uint256) = TMP_657 + 1
TMP_659(uint256) = TMP_658 + 32
TMP_660(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_659,tosign1,0)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
checkok = verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_661(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_662(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_661,sig1,sessionPubkey)
checkok(bool) := TMP_662(bool)"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
checkok == false

IRs:
TMP_663(bool) = checkok == False
CONDITION TMP_663"];
28->29[label="True"];
28->30[label="False"];
29[label="Node Type: RETURN 29

EXPRESSION:
false

IRs:
RETURN False"];
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: IF 31

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_423(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_664(bool) = REF_423 == False
CONDITION TMP_664"];
31->32[label="True"];
31->33[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_424(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_665(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_424(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_665(bool)"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_425(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_425"];
}
// Function: 22635.sol-usingOraclize-oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_411(None) -> _proof[0]
TMP_587(bool) = REF_411 != L
REF_412(None) -> _proof[1]
TMP_588(bool) = REF_412 != P
TMP_589(bool) = TMP_587 || TMP_588
REF_413(None) -> _proof[2]
TMP_590(bool) = REF_413 != 1
TMP_591(bool) = TMP_589 || TMP_590
CONDITION TMP_591"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_592 = CONVERT _result to bytes
TMP_593(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_594(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_592,TMP_593)
proofVerified(bool) := TMP_594(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_595(bool) = proofVerified == False
CONDITION TMP_595"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
2

IRs:
RETURN 2"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 22635.sol-usingOraclize-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_553(uint256) = sig2offset + 1
REF_405(None) -> proof[TMP_553]
TMP_554 = CONVERT REF_405 to uint256
TMP_555(uint256) = TMP_554 + 2
TMP_556 = new bytes(TMP_555)
sig2(bytes) := TMP_556(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_406 -> LENGTH sig2
TMP_557(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_406,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_559 = new bytes(64)
appkey1_pubkey(bytes) := TMP_559(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_560(uint256) = 3 + 1
TMP_561(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_560,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_563(uint256) = 1 + 65
TMP_564(uint256) = TMP_563 + 32
TMP_565 = new bytes(TMP_564)
tosign2(bytes) := TMP_565(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = 1

IRs:
REF_407(uint256) -> tosign2[0]
REF_407(uint256) (->tosign2) := 1(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_566(uint256) = sig2offset - 65
TMP_567(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_566,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_568(uint256) = 1 + 65
TMP_569(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_568)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_570(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_571(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_570,sig2,appkey1_pubkey)
sigok(bool) := TMP_571(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_572(bool) = sigok == False
CONDITION TMP_572"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_574(uint256) = 1 + 65
TMP_575 = new bytes(TMP_574)
tosign3(bytes) := TMP_575(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_408(uint256) -> tosign3[0]
REF_408(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_576(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_578(uint256) = 3 + 65
TMP_579(uint256) = TMP_578 + 1
REF_409(None) -> proof[TMP_579]
TMP_580 = CONVERT REF_409 to uint256
TMP_581(uint256) = TMP_580 + 2
TMP_582 = new bytes(TMP_581)
sig3(bytes) := TMP_582(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_583(uint256) = 3 + 65
REF_410 -> LENGTH sig3
TMP_584(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_583,REF_410,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_585(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_586(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_585,sig3,LEDGERKEY)
sigok(bool) := TMP_586(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 22635.sol-usingOraclize-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_randomDS_args[queryId] = commitment

IRs:
REF_402(bytes32) -> oraclize_randomDS_args[queryId]
REF_402(bytes32) (->oraclize_randomDS_args) := commitment(bytes32)"];
}
// Function: 22635.sol-usingOraclize-oraclize_setConfig(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setConfig(config)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setConfig, arguments:['config']  
RETURN TMP_320"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-usingOraclize-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_318"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-usingOraclize-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_0(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_1(bool) = TMP_0 > 0
CONDITION TMP_1"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_2 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_2(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_4(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_5(bool) = TMP_4 > 0
CONDITION TMP_5"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_6 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_6(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_8(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_9(bool) = TMP_8 > 0
CONDITION TMP_9"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_10 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_10(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_12(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_13(bool) = TMP_12 > 0
CONDITION TMP_13"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_14 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_14(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_16(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_17(bool) = TMP_16 > 0
CONDITION TMP_17"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_18 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_18(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_19(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_20(bool) = TMP_19 > 0
CONDITION TMP_20"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_21 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_21(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_22(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_23(bool) = TMP_22 > 0
CONDITION TMP_23"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_24 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_24(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 22635.sol-usingOraclize-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 22635.sol-usingOraclize-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_316"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-usingOraclize-oraclize_useCoupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 22635.sol-usingOraclize-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_324 = CONVERT _a to bytes
tmp(bytes) := TMP_324(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_325(uint256) = 2 * 20
TMP_326(uint256) = 2 + TMP_325
TMP_327(bool) = i < TMP_326
CONDITION TMP_327"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_296(None) -> tmp[i]
TMP_328 = CONVERT REF_296 to uint160
b1(uint160) := TMP_328(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_329(uint256) = i + 1
REF_297(None) -> tmp[TMP_329]
TMP_330 = CONVERT REF_297 to uint160
b2(uint160) := TMP_330(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_331(bool) = b1 >= 97
TMP_332(bool) = b1 <= 102
TMP_333(bool) = TMP_331 && TMP_332
CONDITION TMP_333"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_334(bool) = b1 >= 65
TMP_335(bool) = b1 <= 70
TMP_336(bool) = TMP_334 && TMP_335
CONDITION TMP_336"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_337(bool) = b1 >= 48
TMP_338(bool) = b1 <= 57
TMP_339(bool) = TMP_337 && TMP_338
CONDITION TMP_339"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_340(bool) = b2 >= 97
TMP_341(bool) = b2 <= 102
TMP_342(bool) = TMP_340 && TMP_341
CONDITION TMP_342"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_343(bool) = b2 >= 65
TMP_344(bool) = b2 <= 70
TMP_345(bool) = TMP_343 && TMP_344
CONDITION TMP_345"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_346(bool) = b2 >= 48
TMP_347(bool) = b2 <= 57
TMP_348(bool) = TMP_346 && TMP_347
CONDITION TMP_348"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_349(uint160) = b1 * 16
TMP_350(uint160) = TMP_349 + b2
iaddr(uint160) = iaddr + TMP_350"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_351 = CONVERT iaddr to address
RETURN TMP_351"];
}
// Function: 22635.sol-usingOraclize-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_420(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_420"];
}
// Function: 22635.sol-usingOraclize-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_421 = CONVERT _a to bytes
bresult(bytes) := TMP_421(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_342 -> LENGTH bresult
TMP_422(bool) = i < REF_342
CONDITION TMP_422"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_343(None) -> bresult[i]
TMP_423(bool) = REF_343 >= 48
REF_344(None) -> bresult[i]
TMP_424(bool) = REF_344 <= 57
TMP_425(bool) = TMP_423 && TMP_424
CONDITION TMP_425"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_426(bool) = _b == 0
CONDITION TMP_426"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_427(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_345(None) -> bresult[i]
TMP_428 = CONVERT REF_345 to uint256
TMP_429(uint256) = TMP_428 - 48
mint(uint256) = mint + TMP_429"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_346(None) -> bresult[i]
TMP_430(bool) = REF_346 == 46
CONDITION TMP_430"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_431(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_432(bool) = _b > 0
CONDITION TMP_432"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_433(uint256) = 10 ** _b
mint(uint256) = mint * TMP_433"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 22635.sol-usingOraclize-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 22635.sol-usingOraclize-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_678(uint256) = 60 * 60
TMP_679(uint256) = TMP_678 * 24
day(uint256) := TMP_679(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_680(uint256) = 60 * 60
TMP_681(uint256) = TMP_680 * 24
TMP_682(uint256) = TMP_681 * 7
week(uint256) := TMP_682(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_683(uint256) = 60 * 60
TMP_684(uint256) = TMP_683 * 24
TMP_685(uint256) = TMP_684 * 30
month(uint256) := TMP_685(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
}
// Function: 22635.sol-usingOraclize-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_352 = CONVERT _a to bytes
a(bytes) := TMP_352(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_353 = CONVERT _b to bytes
b(bytes) := TMP_353(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_298 -> LENGTH a
minLength(uint256) := REF_298(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_299 -> LENGTH b
TMP_354(bool) = REF_299 < minLength
CONDITION TMP_354"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_300 -> LENGTH b
minLength(uint256) := REF_300(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_355(bool) = i < minLength
CONDITION TMP_355"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_301(None) -> a[i]
REF_302(None) -> b[i]
TMP_356(bool) = REF_301 < REF_302
CONDITION TMP_356"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_357(uint256) = 0 - 1
RETURN TMP_357"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_303(None) -> a[i]
REF_304(None) -> b[i]
TMP_358(bool) = REF_303 > REF_304
CONDITION TMP_358"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_359(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_305 -> LENGTH a
REF_306 -> LENGTH b
TMP_360(bool) = REF_305 < REF_306
CONDITION TMP_360"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_361(uint256) = 0 - 1
RETURN TMP_361"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_307 -> LENGTH a
REF_308 -> LENGTH b
TMP_362(bool) = REF_307 > REF_308
CONDITION TMP_362"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 22635.sol-usingOraclize-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_419(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_419"];
}
// Function: 22635.sol-usingOraclize-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_418(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_418"];
}
// Function: 22635.sol-usingOraclize-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_417(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_417"];
}
// Function: 22635.sol-usingOraclize-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_389 = CONVERT _a to bytes
_ba(bytes) := TMP_389(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_390 = CONVERT _b to bytes
_bb(bytes) := TMP_390(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_391 = CONVERT _c to bytes
_bc(bytes) := TMP_391(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_392 = CONVERT _d to bytes
_bd(bytes) := TMP_392(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_393 = CONVERT _e to bytes
_be(bytes) := TMP_393(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_322 -> LENGTH _ba
REF_323 -> LENGTH _bb
TMP_395(uint256) = REF_322 + REF_323
REF_324 -> LENGTH _bc
TMP_396(uint256) = TMP_395 + REF_324
REF_325 -> LENGTH _bd
TMP_397(uint256) = TMP_396 + REF_325
REF_326 -> LENGTH _be
TMP_398(uint256) = TMP_397 + REF_326
TMP_399 = new string(TMP_398)
abcde(string) := TMP_399(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_400 = CONVERT abcde to bytes
babcde(bytes) := TMP_400(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_327 -> LENGTH _ba
TMP_401(bool) = i < REF_327
CONDITION TMP_401"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_402(uint256) := k(uint256)
k(uint256) = k + 1
REF_328(None) -> babcde[TMP_402]
REF_329(None) -> _ba[i]
REF_328(None) (->babcde) := REF_329(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_403(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_330 -> LENGTH _bb
TMP_404(bool) = i < REF_330
CONDITION TMP_404"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_405(uint256) := k(uint256)
k(uint256) = k + 1
REF_331(None) -> babcde[TMP_405]
REF_332(None) -> _bb[i]
REF_331(None) (->babcde) := REF_332(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_406(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_333 -> LENGTH _bc
TMP_407(bool) = i < REF_333
CONDITION TMP_407"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_408(uint256) := k(uint256)
k(uint256) = k + 1
REF_334(None) -> babcde[TMP_408]
REF_335(None) -> _bc[i]
REF_334(None) (->babcde) := REF_335(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_409(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_336 -> LENGTH _bd
TMP_410(bool) = i < REF_336
CONDITION TMP_410"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_411(uint256) := k(uint256)
k(uint256) = k + 1
REF_337(None) -> babcde[TMP_411]
REF_338(None) -> _bd[i]
REF_337(None) (->babcde) := REF_338(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_412(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_339 -> LENGTH _be
TMP_413(bool) = i < REF_339
CONDITION TMP_413"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_414(uint256) := k(uint256)
k(uint256) = k + 1
REF_340(None) -> babcde[TMP_414]
REF_341(None) -> _be[i]
REF_340(None) (->babcde) := REF_341(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_415(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_416 = CONVERT babcde to string
RETURN TMP_416"];
}
// Function: 22635.sol-usingOraclize-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_348 -> LENGTH arr
arrlen(uint256) := REF_348(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_447(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_447(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_448(bool) = i < arrlen
CONDITION TMP_448"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_349(bytes) -> elemArray[i]
REF_350(string) -> arr[i]
TMP_449 = CONVERT REF_350 to bytes
REF_349(bytes) (->elemArray) := TMP_449(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_351(bytes) -> elemArray[i]
REF_352 -> LENGTH REF_351
REF_353(bytes) -> elemArray[i]
REF_354 -> LENGTH REF_353
TMP_450(uint256) = REF_354 - 1
TMP_451(uint256) = TMP_450 / 23
TMP_452(uint256) = REF_352 + TMP_451
TMP_453(uint256) = TMP_452 + 3
outputlen(uint256) = outputlen + TMP_453"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_454(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_455(uint256) = arrlen + 128
cborlen(uint256) := TMP_455(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_456 = CONVERT cborlen to bytes1
REF_355 -> LENGTH TMP_456
outputlen(uint256) = outputlen + REF_355"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_458 = new bytes(outputlen)
res(bytes) := TMP_458(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_459 = CONVERT cborlen to bytes1
REF_356 -> LENGTH TMP_459
TMP_460(bool) = REF_356 > ctr
CONDITION TMP_460"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_357(None) -> res[ctr]
TMP_461 = CONVERT cborlen to bytes1
REF_358(None) -> TMP_461[ctr]
REF_357(None) (->res) := REF_358(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_462(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_463(bool) = i < arrlen
CONDITION TMP_463"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_359(uint256) -> res[ctr]
REF_359(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_464(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_360(bytes) -> elemArray[i]
REF_361 -> LENGTH REF_360
TMP_465(bool) = x < REF_361
CONDITION TMP_465"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_466(uint256) = x % 23
TMP_467(bool) = TMP_466 == 0
CONDITION TMP_467"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_468 = CONVERT elemcborlen to bytes1
REF_362 -> LENGTH TMP_468
TMP_469(uint256) = ctr - lctr
TMP_470(bool) = REF_362 > TMP_469
CONDITION TMP_470"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_363(None) -> res[ctr]
TMP_471 = CONVERT elemcborlen to bytes1
TMP_472(uint256) = ctr - lctr
REF_364(None) -> TMP_471[TMP_472]
REF_363(None) (->res) := REF_364(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_473(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_365(None) -> res[ctr]
REF_366(bytes) -> elemArray[i]
REF_367(None) -> REF_366[x]
REF_365(None) (->res) := REF_367(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_474(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_475(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_368(uint256) -> res[ctr]
REF_368(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_476(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_477(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_369(bytes) -> elemArray[i]
REF_370 -> LENGTH REF_369
TMP_478(uint256) = REF_370 - x
TMP_479(bool) = TMP_478 >= 24
CONDITION TMP_479"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_371(bytes) -> elemArray[i]
REF_372 -> LENGTH REF_371
TMP_480(uint256) = REF_372 - x
elemcborlen(uint256) := TMP_480(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 22635.sol-usingOraclize-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_434(bool) = i == 0
CONDITION TMP_434"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_435(bool) = j != 0
CONDITION TMP_435"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_436(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_438 = new bytes(len)
bstr(bytes) := TMP_438(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_439(uint256) = len - 1
k(uint256) := TMP_439(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_440(bool) = i != 0
CONDITION TMP_440"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_441(uint256) := k(uint256)
k(uint256) = k - 1
REF_347(bytes1) -> bstr[TMP_441]
TMP_442(uint256) = i % 10
TMP_443(uint256) = 48 + TMP_442
TMP_444 = CONVERT TMP_443 to bytes1
REF_347(bytes1) (->bstr) := TMP_444(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_445 = CONVERT bstr to string
RETURN TMP_445"];
}
// Function: 22635.sol-usingOraclize-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_533 = new bytes(32)
sigr_(bytes) := TMP_533(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_403(None) -> dersig[3]
TMP_534 = CONVERT REF_403 to uint256
TMP_535(uint256) = TMP_534 - 32
TMP_536(uint256) = 4 + TMP_535
offset(uint256) := TMP_536(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_537(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_537(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_539 = new bytes(32)
sigs_(bytes) := TMP_539(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_540(uint256) = 32 + 2
offset(uint256) = offset + TMP_540"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_541(uint256) = offset - 1
REF_404(None) -> dersig[TMP_541]
TMP_542 = CONVERT REF_404 to uint256
TMP_543(uint256) = TMP_542 - 32
TMP_544(uint256) = offset + TMP_543
TMP_545(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_544,32,sigs_,0)
sigs_(bytes) := TMP_545(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_0(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_0 index: 0 
signer(address)= UNPACK TUPLE_0 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(sha3()(pubkey)) == signer

IRs:
TMP_546(bytes32) = SOLIDITY_CALL sha3()(pubkey)
TMP_547 = CONVERT TMP_546 to address
TMP_548(bool) = TMP_547 == signer
CONDITION TMP_548"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_1(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_1 index: 0 
signer(address)= UNPACK TUPLE_1 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(sha3()(pubkey)) == signer)

IRs:
TMP_549(bytes32) = SOLIDITY_CALL sha3()(pubkey)
TMP_550 = CONVERT TMP_549 to address
TMP_551(bool) = TMP_550 == signer
RETURN TMP_551"];
}
}
