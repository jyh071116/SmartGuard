digraph G {
// Function: 23126.sol-GasToken2-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
s_allowances[owner][spender]

IRs:
REF_12(mapping(address => uint256)) -> s_allowances[owner]
REF_13(uint256) -> REF_12[spender]
RETURN REF_13"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 23126.sol-GasToken2-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
value != 0 && s_allowances[owner][spender] != 0

IRs:
TMP_39(bool) = value != 0
REF_8(mapping(address => uint256)) -> s_allowances[owner]
REF_9(uint256) -> REF_8[spender]
TMP_40(bool) = REF_9 != 0
TMP_41(bool) = TMP_39 && TMP_40
CONDITION TMP_41"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
s_allowances[owner][spender] = value

IRs:
REF_10(mapping(address => uint256)) -> s_allowances[owner]
REF_11(uint256) -> REF_10[spender]
REF_11(uint256) (->s_allowances) := value(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(owner,spender,value)

IRs:
Emit Approval(owner,spender,value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 23126.sol-GasToken2-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
s_balances[owner]

IRs:
REF_0(uint256) -> s_balances[owner]
RETURN REF_0"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 23126.sol-GasToken2-count_bytes(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mask = 1

IRs:
mask(uint256) := 1(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
n >= mask

IRs:
TMP_0(bool) = n >= mask
CONDITION TMP_0"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
i += 1

IRs:
i(uint256) = i + 1"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
mask *= 256

IRs:
mask(uint256) = mask * 256"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
i

IRs:
RETURN i"];
9[label="Node Type: RETURN 9

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 23126.sol-GasToken2-destroyChildren(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tail = s_tail

IRs:
tail(uint256) := s_tail(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = tail + 1

IRs:
TMP_47(uint256) = tail + 1
i(uint256) := TMP_47(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= tail + value

IRs:
TMP_48(uint256) = tail + value
TMP_49(bool) = i <= TMP_48
CONDITION TMP_49"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
mk_contract_address(this,i).call()

IRs:
TMP_50(address) = INTERNAL_CALL, GasToken2.mk_contract_address(address,uint256)(this,i)
TMP_51(bool) = LOW_LEVEL_CALL, dest:TMP_50, function:call, arguments:[]  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_52(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
s_tail = tail + value

IRs:
TMP_53(uint256) = tail + value
s_tail(uint256) := TMP_53(uint256)"];
}
// Function: 23126.sol-GasToken2-free(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
from_balance = s_balances[msg.sender]

IRs:
REF_16(uint256) -> s_balances[msg.sender]
from_balance(uint256) := REF_16(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
value > from_balance

IRs:
TMP_54(bool) = value > from_balance
CONDITION TMP_54"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
destroyChildren(value)

IRs:
INTERNAL_CALL, GasToken2.destroyChildren(uint256)(value)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
s_balances[msg.sender] = from_balance - value

IRs:
REF_17(uint256) -> s_balances[msg.sender]
TMP_56(uint256) = from_balance - value
REF_17(uint256) (->s_balances) := TMP_56(uint256)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 23126.sol-GasToken2-freeFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = msg.sender

IRs:
spender(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
from_balance = s_balances[from]

IRs:
REF_20(uint256) -> s_balances[from]
from_balance(uint256) := REF_20(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
value > from_balance

IRs:
TMP_60(bool) = value > from_balance
CONDITION TMP_60"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
from_allowances = s_allowances[from]

IRs:
REF_21(mapping(address => uint256)) -> s_allowances[from]
from_allowances(mapping(address => uint256)) := REF_21(mapping(address => uint256))"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
spender_allowance = from_allowances[spender]

IRs:
REF_22(uint256) -> from_allowances[spender]
spender_allowance(uint256) := REF_22(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
value > spender_allowance

IRs:
TMP_61(bool) = value > spender_allowance
CONDITION TMP_61"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9

EXPRESSION:
false

IRs:
RETURN False"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
destroyChildren(value)

IRs:
INTERNAL_CALL, GasToken2.destroyChildren(uint256)(value)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
s_balances[from] = from_balance - value

IRs:
REF_23(uint256) -> s_balances[from]
TMP_63(uint256) = from_balance - value
REF_23(uint256) (->s_balances) := TMP_63(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
from_allowances[spender] = spender_allowance - value

IRs:
REF_24(uint256) -> from_allowances[spender]
TMP_64(uint256) = spender_allowance - value
REF_24(uint256) (->from_allowances) := TMP_64(uint256)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: RETURN 15

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 23126.sol-GasToken2-freeFromUpTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = msg.sender

IRs:
spender(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
from_balance = s_balances[from]

IRs:
REF_25(uint256) -> s_balances[from]
from_balance(uint256) := REF_25(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
value > from_balance

IRs:
TMP_65(bool) = value > from_balance
CONDITION TMP_65"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
value = from_balance

IRs:
value(uint256) := from_balance(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
from_allowances = s_allowances[from]

IRs:
REF_26(mapping(address => uint256)) -> s_allowances[from]
from_allowances(mapping(address => uint256)) := REF_26(mapping(address => uint256))"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
spender_allowance = from_allowances[spender]

IRs:
REF_27(uint256) -> from_allowances[spender]
spender_allowance(uint256) := REF_27(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
value > spender_allowance

IRs:
TMP_66(bool) = value > spender_allowance
CONDITION TMP_66"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
value = spender_allowance

IRs:
value(uint256) := spender_allowance(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
destroyChildren(value)

IRs:
INTERNAL_CALL, GasToken2.destroyChildren(uint256)(value)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
s_balances[from] = from_balance - value

IRs:
REF_28(uint256) -> s_balances[from]
TMP_68(uint256) = from_balance - value
REF_28(uint256) (->s_balances) := TMP_68(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
from_allowances[spender] = spender_allowance - value

IRs:
REF_29(uint256) -> from_allowances[spender]
TMP_69(uint256) = spender_allowance - value
REF_29(uint256) (->from_allowances) := TMP_69(uint256)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
value

IRs:
RETURN value"];
15[label="Node Type: RETURN 15

EXPRESSION:
freed

IRs:
RETURN freed"];
}
// Function: 23126.sol-GasToken2-freeUpTo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
from_balance = s_balances[msg.sender]

IRs:
REF_18(uint256) -> s_balances[msg.sender]
from_balance(uint256) := REF_18(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
value > from_balance

IRs:
TMP_57(bool) = value > from_balance
CONDITION TMP_57"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
value = from_balance

IRs:
value(uint256) := from_balance(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
destroyChildren(value)

IRs:
INTERNAL_CALL, GasToken2.destroyChildren(uint256)(value)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
s_balances[msg.sender] = from_balance - value

IRs:
REF_19(uint256) -> s_balances[msg.sender]
TMP_59(uint256) = from_balance - value
REF_19(uint256) (->s_balances) := TMP_59(uint256)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
value

IRs:
RETURN value"];
8[label="Node Type: RETURN 8

EXPRESSION:
freed

IRs:
RETURN freed"];
}
// Function: 23126.sol-GasToken2-internalTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value <= s_balances[from]

IRs:
REF_1(uint256) -> s_balances[from]
TMP_33(bool) = value <= REF_1
CONDITION TMP_33"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
s_balances[from] -= value

IRs:
REF_2(uint256) -> s_balances[from]
REF_2(-> s_balances) = REF_2 - value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
s_balances[to] += value

IRs:
REF_3(uint256) -> s_balances[to]
REF_3(-> s_balances) = REF_3 + value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,value)

IRs:
Emit Transfer(from,to,value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 23126.sol-GasToken2-makeChild()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
addr

IRs:
RETURN addr"];
}
// Function: 23126.sol-GasToken2-mint(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < value

IRs:
TMP_44(bool) = i < value
CONDITION TMP_44"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
makeChild()

IRs:
TMP_45(address) = INTERNAL_CALL, GasToken2.makeChild()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_46(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
s_head += value

IRs:
s_head(uint256) = s_head + value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
s_balances[msg.sender] += value

IRs:
REF_14(uint256) -> s_balances[msg.sender]
REF_14(-> s_balances) = REF_14 + value"];
}
// Function: 23126.sol-GasToken2-mk_contract_address(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(n <= MAX_NONCE)

IRs:
TMP_1(bool) = n <= MAX_NONCE
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
0 < n && n < MAX_SINGLE_BYTE

IRs:
TMP_3(bool) = 0 < n
TMP_4(bool) = n < MAX_SINGLE_BYTE
TMP_5(bool) = TMP_3 && TMP_4
CONDITION TMP_5"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nonce_bytes = 1

IRs:
nonce_bytes(uint256) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
nonce_rlp_len = 1

IRs:
nonce_rlp_len(uint256) := 1(uint256)"];
6->9;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
nonce_bytes = count_bytes(n)

IRs:
TMP_6(uint256) = INTERNAL_CALL, GasToken2.count_bytes(uint256)(n)
nonce_bytes(uint256) := TMP_6(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
nonce_rlp_len = nonce_bytes + 1

IRs:
TMP_7(uint256) = nonce_bytes + 1
nonce_rlp_len(uint256) := TMP_7(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
tot_bytes = 1 + ADDRESS_BYTES + nonce_rlp_len

IRs:
TMP_8(uint256) = 1 + ADDRESS_BYTES
TMP_9(uint256) = TMP_8 + nonce_rlp_len
tot_bytes(uint256) := TMP_9(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
word = ((192 + tot_bytes) * 256 ** 31) + ((128 + ADDRESS_BYTES) * 256 ** 30) + (uint256(a) * 256 ** 10)

IRs:
TMP_10(uint256) = 192 + tot_bytes
TMP_11(uint256) = 256 ** 31
TMP_12(uint256) = TMP_10 * TMP_11
TMP_13(uint256) = 128 + ADDRESS_BYTES
TMP_14(uint256) = 256 ** 30
TMP_15(uint256) = TMP_13 * TMP_14
TMP_16(uint256) = TMP_12 + TMP_15
TMP_17 = CONVERT a to uint256
TMP_18(uint256) = 256 ** 10
TMP_19(uint256) = TMP_17 * TMP_18
TMP_20(uint256) = TMP_16 + TMP_19
word(uint256) := TMP_20(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
0 < n && n < MAX_SINGLE_BYTE

IRs:
TMP_21(bool) = 0 < n
TMP_22(bool) = n < MAX_SINGLE_BYTE
TMP_23(bool) = TMP_21 && TMP_22
CONDITION TMP_23"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
word += n * 256 ** 9

IRs:
TMP_24(uint256) = 256 ** 9
TMP_25(uint256) = n * TMP_24
word(uint256) = word + TMP_25"];
13->16;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
word += (128 + nonce_bytes) * 256 ** 9

IRs:
TMP_26(uint256) = 128 + nonce_bytes
TMP_27(uint256) = 256 ** 9
TMP_28(uint256) = TMP_26 * TMP_27
word(uint256) = word + TMP_28"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
word += n * 256 ** (9 - nonce_bytes)

IRs:
TMP_29(uint256) = 9 - nonce_bytes
TMP_30(uint256) = 256 ** TMP_29
TMP_31(uint256) = n * TMP_30
word(uint256) = word + TMP_31"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: NEW VARIABLE 17
"];
17->18;
18[label="Node Type: INLINE ASM 18
"];
18->19;
19[label="Node Type: END INLINE ASM 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
address(hash)

IRs:
TMP_32 = CONVERT hash to address
RETURN TMP_32"];
21[label="Node Type: RETURN 21

EXPRESSION:
rlp

IRs:
RETURN rlp"];
}
// Function: 23126.sol-GasToken2-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ADDRESS_BYTES = 20

IRs:
ADDRESS_BYTES(uint256) := 20(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
MAX_SINGLE_BYTE = 128

IRs:
MAX_SINGLE_BYTE(uint256) := 128(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
MAX_NONCE = 256 ** 9 - 1

IRs:
TMP_70(uint256) = 256 ** 9
TMP_71(uint256) = TMP_70 - 1
MAX_NONCE(uint256) := TMP_71(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 2

IRs:
decimals(uint8) := 2(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
name = Gastoken.io

IRs:
name(string) := Gastoken.io(string)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
symbol = GST2

IRs:
symbol(string) := GST2(string)"];
}
// Function: 23126.sol-GasToken2-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
s_head - s_tail

IRs:
TMP_43(uint256) = s_head - s_tail
RETURN TMP_43"];
2[label="Node Type: RETURN 2

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 23126.sol-GasToken2-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
from = msg.sender

IRs:
from(address) := msg.sender(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
internalTransfer(from,to,value)

IRs:
TMP_35(bool) = INTERNAL_CALL, GasToken2.internalTransfer(address,address,uint256)(from,to,value)
RETURN TMP_35"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 23126.sol-GasToken2-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = msg.sender

IRs:
spender(address) := msg.sender(address)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
value <= s_allowances[from][spender] && internalTransfer(from,to,value)

IRs:
REF_4(mapping(address => uint256)) -> s_allowances[from]
REF_5(uint256) -> REF_4[spender]
TMP_36(bool) = value <= REF_5
TMP_37(bool) = INTERNAL_CALL, GasToken2.internalTransfer(address,address,uint256)(from,to,value)
TMP_38(bool) = TMP_36 && TMP_37
CONDITION TMP_38"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
s_allowances[from][spender] -= value

IRs:
REF_6(mapping(address => uint256)) -> s_allowances[from]
REF_7(uint256) -> REF_6[spender]
REF_7(-> s_allowances) = REF_7 - value"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
}
