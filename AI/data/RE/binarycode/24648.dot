digraph G {
// Function: 24648.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 24648.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 24648.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 24648.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 24648.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 24648.sol-LZLCoin-LZLCoin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_40(uint256) -> balances[msg.sender]
REF_40(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 24648.sol-LZLCoin-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 24648.sol-LZLCoin-allowance(address,address)
digraph{
}
// Function: 24648.sol-LZLCoin-approve(address,uint256)
digraph{
}
// Function: 24648.sol-LZLCoin-balanceOf(address)
digraph{
}
// Function: 24648.sol-LZLCoin-eT(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_tkA)

IRs:
REF_34(uint256) -> balances[msg.sender]
REF_35(uint256) -> balances[msg.sender]
TMP_105(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_35,_tkA)
REF_34(uint256) (->balances) := TMP_105(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_pd] = safeAdd(balances[_pd],_tkA)

IRs:
REF_36(uint256) -> balances[_pd]
REF_37(uint256) -> balances[_pd]
TMP_106(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_37,_tkA)
REF_36(uint256) (->balances) := TMP_106(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _pd.call.value(_etA)()

IRs:
TMP_108(bool) = LOW_LEVEL_CALL, dest:_pd, function:call, arguments:[] value:_etA 
TMP_109 = UnaryType.BANG TMP_108 
CONDITION TMP_109"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_110(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ET(_pd,_tkA,_etA)

IRs:
Emit ET(_pd,_tkA,_etA)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 24648.sol-LZLCoin-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 24648.sol-LZLCoin-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_99(bool) = a >= b
CONDITION TMP_99"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 24648.sol-LZLCoin-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_97(bool) = a >= b
CONDITION TMP_97"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 24648.sol-LZLCoin-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_100(bool) = a < b
CONDITION TMP_100"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 24648.sol-LZLCoin-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_98(bool) = a < b
CONDITION TMP_98"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 24648.sol-LZLCoin-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_122(bool) = msg.sender == owner
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24648.sol-LZLCoin-sAssert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_101 = UnaryType.BANG assertion 
CONDITION TMP_101"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 24648.sol-LZLCoin-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_92(uint256) = a + b
c(uint256) := TMP_92(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sAssert(c >= a && c >= b)

IRs:
TMP_93(bool) = c >= a
TMP_94(bool) = c >= b
TMP_95(bool) = TMP_93 && TMP_94
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_95)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24648.sol-LZLCoin-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sAssert(b > 0)

IRs:
TMP_81(bool) = b > 0
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_81)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_83(uint256) = a / b
c(uint256) := TMP_83(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
sAssert(a == b * c + a % b)

IRs:
TMP_84(uint256) = b * c
TMP_85(uint256) = a % b
TMP_86(uint256) = TMP_84 + TMP_85
TMP_87(bool) = a == TMP_86
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_87)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24648.sol-LZLCoin-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_75(uint256) = a * b
c(uint256) := TMP_75(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sAssert(a == 0 || c / a == b)

IRs:
TMP_76(bool) = a == 0
TMP_77(uint256) = c / a
TMP_78(bool) = TMP_77 == b
TMP_79(bool) = TMP_76 || TMP_78
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_79)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24648.sol-LZLCoin-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sAssert(b <= a)

IRs:
TMP_89(bool) = b <= a
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_89)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_91(uint256) = a - b
RETURN TMP_91"];
}
// Function: 24648.sol-LZLCoin-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 1 * (10 ** 9) * (10 ** 18)

IRs:
TMP_118(uint256) = 10 ** 9
TMP_119(uint256) = 1 * TMP_118
TMP_120(uint256) = 10 ** 18
TMP_121(uint256) = TMP_119 * TMP_120
totalSupply(uint256) := TMP_121(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Lianzhiliao

IRs:
name(string) := Lianzhiliao(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = LZL

IRs:
symbol(string) := LZL(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
}
// Function: 24648.sol-LZLCoin-transfer(address,uint256)
digraph{
}
// Function: 24648.sol-LZLCoin-transferAnyERC20Token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20(tokenAddress).transfer(owner,amount)

IRs:
TMP_115 = CONVERT tokenAddress to ERC20
TMP_116(bool) = HIGH_LEVEL_CALL, dest:TMP_115(ERC20), function:transfer, arguments:['owner', 'amount']  
RETURN TMP_116"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 24648.sol-LZLCoin-transferFrom(address,address,uint256)
digraph{
}
// Function: 24648.sol-LZLCoin-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_newOwner] = safeAdd(balances[owner],balances[_newOwner])

IRs:
REF_41(uint256) -> balances[_newOwner]
REF_42(uint256) -> balances[owner]
REF_43(uint256) -> balances[_newOwner]
TMP_112(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_42,REF_43)
REF_41(uint256) (->balances) := TMP_112(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[owner] = 0

IRs:
REF_44(uint256) -> balances[owner]
REF_44(uint256) (->balances) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Ownable.transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable.transferOwnership(address)(_newOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 24648.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 24648.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_3(bool) = msg.sender == owner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24648.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 24648.sol-SafeMath-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_29(bool) = a >= b
CONDITION TMP_29"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 24648.sol-SafeMath-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_27(bool) = a >= b
CONDITION TMP_27"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 24648.sol-SafeMath-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_30(bool) = a < b
CONDITION TMP_30"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 24648.sol-SafeMath-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_28(bool) = a < b
CONDITION TMP_28"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 24648.sol-SafeMath-sAssert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_31 = UnaryType.BANG assertion 
CONDITION TMP_31"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 24648.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_22(uint256) = a + b
c(uint256) := TMP_22(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sAssert(c >= a && c >= b)

IRs:
TMP_23(bool) = c >= a
TMP_24(bool) = c >= b
TMP_25(bool) = TMP_23 && TMP_24
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_25)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24648.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sAssert(b > 0)

IRs:
TMP_11(bool) = b > 0
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_11)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_13(uint256) = a / b
c(uint256) := TMP_13(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
sAssert(a == b * c + a % b)

IRs:
TMP_14(uint256) = b * c
TMP_15(uint256) = a % b
TMP_16(uint256) = TMP_14 + TMP_15
TMP_17(bool) = a == TMP_16
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_17)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24648.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_5(uint256) = a * b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sAssert(a == 0 || c / a == b)

IRs:
TMP_6(bool) = a == 0
TMP_7(uint256) = c / a
TMP_8(bool) = TMP_7 == b
TMP_9(bool) = TMP_6 || TMP_8
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_9)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24648.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sAssert(b <= a)

IRs:
TMP_19(bool) = b <= a
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_19)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_21(uint256) = a - b
RETURN TMP_21"];
}
// Function: 24648.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_15(mapping(address => uint256)) -> allowed[_owner]
REF_16(uint256) -> REF_15[_spender]
RETURN REF_16"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 24648.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_13(mapping(address => uint256)) -> allowed[msg.sender]
REF_14(uint256) -> REF_13[_spender]
REF_14(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 24648.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_12(uint256) -> balances[_owner]
RETURN REF_12"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 24648.sol-StandardToken-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_56(bool) = a >= b
CONDITION TMP_56"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 24648.sol-StandardToken-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_54(bool) = a >= b
CONDITION TMP_54"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 24648.sol-StandardToken-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_57(bool) = a < b
CONDITION TMP_57"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 24648.sol-StandardToken-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_55(bool) = a < b
CONDITION TMP_55"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 24648.sol-StandardToken-sAssert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_58 = UnaryType.BANG assertion 
CONDITION TMP_58"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 24648.sol-StandardToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_49(uint256) = a + b
c(uint256) := TMP_49(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sAssert(c >= a && c >= b)

IRs:
TMP_50(bool) = c >= a
TMP_51(bool) = c >= b
TMP_52(bool) = TMP_50 && TMP_51
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_52)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24648.sol-StandardToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sAssert(b > 0)

IRs:
TMP_38(bool) = b > 0
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_38)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_40(uint256) = a / b
c(uint256) := TMP_40(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
sAssert(a == b * c + a % b)

IRs:
TMP_41(uint256) = b * c
TMP_42(uint256) = a % b
TMP_43(uint256) = TMP_41 + TMP_42
TMP_44(bool) = a == TMP_43
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_44)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24648.sol-StandardToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_32(uint256) = a * b
c(uint256) := TMP_32(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sAssert(a == 0 || c / a == b)

IRs:
TMP_33(bool) = a == 0
TMP_34(uint256) = c / a
TMP_35(bool) = TMP_34 == b
TMP_36(bool) = TMP_33 || TMP_35
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_36)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24648.sol-StandardToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sAssert(b <= a)

IRs:
TMP_46(bool) = b <= a
INTERNAL_CALL, SafeMath.sAssert(bool)(TMP_46)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_48(uint256) = a - b
RETURN TMP_48"];
}
// Function: 24648.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_value)

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_1(uint256) -> balances[msg.sender]
TMP_59(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_1,_value)
REF_0(uint256) (->balances) := TMP_59(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_2(uint256) -> balances[_to]
REF_3(uint256) -> balances[_to]
TMP_60(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_3,_value)
REF_2(uint256) (->balances) := TMP_60(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 24648.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
_allowance(uint256) := REF_5(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_6(uint256) -> balances[_to]
REF_7(uint256) -> balances[_to]
TMP_62(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_7,_value)
REF_6(uint256) (->balances) := TMP_62(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = safeSub(balances[_from],_value)

IRs:
REF_8(uint256) -> balances[_from]
REF_9(uint256) -> balances[_from]
TMP_63(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_9,_value)
REF_8(uint256) (->balances) := TMP_63(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] = safeSub(_allowance,_value)

IRs:
REF_10(mapping(address => uint256)) -> allowed[_from]
REF_11(uint256) -> REF_10[msg.sender]
TMP_64(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(_allowance,_value)
REF_11(uint256) (->allowed) := TMP_64(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
}
