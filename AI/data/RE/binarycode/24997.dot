digraph G {
// Function: 24997.sol-DivisibleForeverRose-DivisibleForeverRose()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractOwner = msg.sender

IRs:
contractOwner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = ForeverRose

IRs:
name(string) := ForeverRose(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = ROSE

IRs:
symbol(string) := ROSE(string)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
newGift = GiftToken({giftId:foreverRoseId})

IRs:
TMP_0(DivisibleForeverRose.GiftToken) = new GiftToken(foreverRoseId)
newGift(DivisibleForeverRose.GiftToken) := TMP_0(DivisibleForeverRose.GiftToken)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
giftStorage[foreverRoseId] = newGift

IRs:
REF_0(DivisibleForeverRose.GiftToken) -> giftStorage[foreverRoseId]
REF_0(DivisibleForeverRose.GiftToken) (->giftStorage) := newGift(DivisibleForeverRose.GiftToken)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
foreverRoseCreated[foreverRoseId] = true

IRs:
REF_1(bool) -> foreverRoseCreated[foreverRoseId]
REF_1(bool) (->foreverRoseCreated) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_addNewOwnerHoldingsToToken(contractOwner,foreverRoseId,totalSupply)

IRs:
INTERNAL_CALL, DivisibleForeverRose._addNewOwnerHoldingsToToken(address,uint256,uint256)(contractOwner,foreverRoseId,totalSupply)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_addShareToNewOwner(contractOwner,foreverRoseId,totalSupply)

IRs:
INTERNAL_CALL, DivisibleForeverRose._addShareToNewOwner(address,uint256,uint256)(contractOwner,foreverRoseId,totalSupply)"];
}
// Function: 24997.sol-DivisibleForeverRose-_addNewOwnerHoldingsToToken(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenToOwnersHoldings[_tokenId][_owner] += _units

IRs:
REF_12(mapping(address => uint256)) -> tokenToOwnersHoldings[_tokenId]
REF_13(uint256) -> REF_12[_owner]
REF_13(-> tokenToOwnersHoldings) = REF_13 + _units"];
}
// Function: 24997.sol-DivisibleForeverRose-_addShareToNewOwner(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerToTokenShare[_owner][_tokenId] += _units

IRs:
REF_10(mapping(uint256 => uint256)) -> ownerToTokenShare[_owner]
REF_11(uint256) -> REF_10[_tokenId]
REF_11(-> ownerToTokenShare) = REF_11 + _units"];
}
// Function: 24997.sol-DivisibleForeverRose-_removeLastOwnerHoldingsFromToken(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenToOwnersHoldings[_tokenId][_owner] -= _units

IRs:
REF_16(mapping(address => uint256)) -> tokenToOwnersHoldings[_tokenId]
REF_17(uint256) -> REF_16[_owner]
REF_17(-> tokenToOwnersHoldings) = REF_17 - _units"];
}
// Function: 24997.sol-DivisibleForeverRose-_removeShareFromLastOwner(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerToTokenShare[_owner][_tokenId] -= _units

IRs:
REF_14(mapping(uint256 => uint256)) -> ownerToTokenShare[_owner]
REF_15(uint256) -> REF_14[_tokenId]
REF_15(-> ownerToTokenShare) = REF_15 - _units"];
}
// Function: 24997.sol-DivisibleForeverRose-assignSharedOwnership(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_18 = CONVERT 0 to address
TMP_19(bool) = _to != TMP_18
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.sender != _to)

IRs:
TMP_21(bool) = msg.sender != _to
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(this))

IRs:
TMP_23 = CONVERT this to address
TMP_24(bool) = _to != TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(tokenToOwnersHoldings[foreverRoseId][msg.sender] >= _divisibility)

IRs:
REF_6(mapping(address => uint256)) -> tokenToOwnersHoldings[foreverRoseId]
REF_7(uint256) -> REF_6[msg.sender]
TMP_26(bool) = REF_7 >= _divisibility
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_removeLastOwnerHoldingsFromToken(msg.sender,foreverRoseId,_divisibility)

IRs:
INTERNAL_CALL, DivisibleForeverRose._removeLastOwnerHoldingsFromToken(address,uint256,uint256)(msg.sender,foreverRoseId,_divisibility)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_removeShareFromLastOwner(msg.sender,foreverRoseId,_divisibility)

IRs:
INTERNAL_CALL, DivisibleForeverRose._removeShareFromLastOwner(address,uint256,uint256)(msg.sender,foreverRoseId,_divisibility)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_addShareToNewOwner(_to,foreverRoseId,_divisibility)

IRs:
INTERNAL_CALL, DivisibleForeverRose._addShareToNewOwner(address,uint256,uint256)(_to,foreverRoseId,_divisibility)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_addNewOwnerHoldingsToToken(_to,foreverRoseId,_divisibility)

IRs:
INTERNAL_CALL, DivisibleForeverRose._addNewOwnerHoldingsToToken(address,uint256,uint256)(_to,foreverRoseId,_divisibility)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to,foreverRoseId)

IRs:
Emit Transfer(msg.sender,_to,foreverRoseId)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DivisibleForeverRose.onlyOwner()()"];
11->1;
12[label="Node Type: RETURN 12

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 24997.sol-DivisibleForeverRose-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ownerToTokenShare[_owner][foreverRoseId]

IRs:
REF_2(mapping(uint256 => uint256)) -> ownerToTokenShare[_owner]
REF_3(uint256) -> REF_2[foreverRoseId]
RETURN REF_3"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 24997.sol-DivisibleForeverRose-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_3(None) = SOLIDITY_CALL revert()()"];
}
// Function: 24997.sol-DivisibleForeverRose-getForeverRose()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
giftStorage[foreverRoseId].giftId

IRs:
REF_8(DivisibleForeverRose.GiftToken) -> giftStorage[foreverRoseId]
REF_9(uint256) -> REF_8.giftId
RETURN REF_9"];
2[label="Node Type: RETURN 2

EXPRESSION:
_foreverRoseId

IRs:
RETURN _foreverRoseId"];
}
// Function: 24997.sol-DivisibleForeverRose-onlyExistentToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(foreverRoseCreated[_tokenId] == true)

IRs:
REF_20(bool) -> foreverRoseCreated[_tokenId]
TMP_37(bool) = REF_20 == True
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24997.sol-DivisibleForeverRose-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == contractOwner)

IRs:
TMP_39(bool) = msg.sender == contractOwner
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24997.sol-DivisibleForeverRose-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 10

IRs:
totalSupply(uint256) := 10(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
tradable = false

IRs:
tradable(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
foreverRoseId = 1

IRs:
foreverRoseId(uint256) := 1(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 1

IRs:
decimals(uint8) := 1(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
version = 1.0

IRs:
version(string) := 1.0(string)"];
}
// Function: 24997.sol-DivisibleForeverRose-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
total

IRs:
RETURN total"];
}
// Function: 24997.sol-DivisibleForeverRose-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tradable == true)

IRs:
TMP_4(bool) = tradable == True
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_6 = CONVERT 0 to address
TMP_7(bool) = _to != TMP_6
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender != _to)

IRs:
TMP_9(bool) = msg.sender != _to
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_divisibility = _tokenId

IRs:
_divisibility(uint256) := _tokenId(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(tokenToOwnersHoldings[foreverRoseId][msg.sender] >= _divisibility)

IRs:
REF_4(mapping(address => uint256)) -> tokenToOwnersHoldings[foreverRoseId]
REF_5(uint256) -> REF_4[msg.sender]
TMP_11(bool) = REF_5 >= _divisibility
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_removeShareFromLastOwner(msg.sender,foreverRoseId,_divisibility)

IRs:
INTERNAL_CALL, DivisibleForeverRose._removeShareFromLastOwner(address,uint256,uint256)(msg.sender,foreverRoseId,_divisibility)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_removeLastOwnerHoldingsFromToken(msg.sender,foreverRoseId,_divisibility)

IRs:
INTERNAL_CALL, DivisibleForeverRose._removeLastOwnerHoldingsFromToken(address,uint256,uint256)(msg.sender,foreverRoseId,_divisibility)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_addNewOwnerHoldingsToToken(_to,foreverRoseId,_divisibility)

IRs:
INTERNAL_CALL, DivisibleForeverRose._addNewOwnerHoldingsToToken(address,uint256,uint256)(_to,foreverRoseId,_divisibility)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_addShareToNewOwner(_to,foreverRoseId,_divisibility)

IRs:
INTERNAL_CALL, DivisibleForeverRose._addShareToNewOwner(address,uint256,uint256)(_to,foreverRoseId,_divisibility)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(msg.sender,_to,foreverRoseId)

IRs:
Emit Transfer(msg.sender,_to,foreverRoseId)"];
}
// Function: 24997.sol-DivisibleForeverRose-turnOnTradable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tradable = true

IRs:
tradable(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DivisibleForeverRose.onlyOwner()()"];
2->1;
}
// Function: 24997.sol-DivisibleForeverRose-withdrawEther()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
contractOwner.send(this.balance)

IRs:
REF_19(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_35 = SEND dest:contractOwner value:REF_19
RETURN TMP_35"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DivisibleForeverRose.onlyOwner()()"];
2->1;
}
// Function: 24997.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 24997.sol-ERC721-totalSupply()
digraph{
}
// Function: 24997.sol-ERC721-transfer(address,uint256)
digraph{
}
// Function: 24997.sol-MultiSigWallet-MultiSigWallet(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _owners.length

IRs:
REF_21 -> LENGTH _owners
TMP_43(bool) = i < REF_21
CONDITION TMP_43"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
isOwner[_owners[i]] || _owners[i] == 0

IRs:
REF_22(address) -> _owners[i]
REF_23(bool) -> isOwner[REF_22]
REF_24(address) -> _owners[i]
TMP_44(bool) = REF_24 == 0
TMP_45(bool) = REF_23 || TMP_44
CONDITION TMP_45"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_46(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isOwner[_owners[i]] = true

IRs:
REF_25(address) -> _owners[i]
REF_26(bool) -> isOwner[REF_25]
REF_26(bool) (->isOwner) := True(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_47(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owners = _owners

IRs:
owners(address[]) := _owners(address[])"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
required = _required

IRs:
required(uint256) := _required(uint256)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
validRequirement(_owners.length,_required)

IRs:
REF_27 -> LENGTH _owners
MODIFIER_CALL, MultiSigWallet.validRequirement(uint256,uint256)(REF_27,_required)"];
12->3;
}
// Function: 24997.sol-MultiSigWallet-addOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isOwner[owner] = true

IRs:
REF_28(bool) -> isOwner[owner]
REF_28(bool) (->isOwner) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owners.push(owner)

IRs:
REF_30 -> LENGTH owners
TMP_50(uint256) := REF_30(uint256)
TMP_51(uint256) = TMP_50 + 1
REF_30(uint256) (->owners) := TMP_51(uint256)
REF_31(address) -> owners[TMP_50]
REF_31(address) (->owners) := owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerAddition(owner)

IRs:
Emit OwnerAddition(owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownerDoesNotExist(owner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerDoesNotExist(address)(owner)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notNull(owner)

IRs:
MODIFIER_CALL, MultiSigWallet.notNull(address)(owner)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
validRequirement(owners.length + 1,required)

IRs:
REF_32 -> LENGTH owners
TMP_56(uint256) = REF_32 + 1
MODIFIER_CALL, MultiSigWallet.validRequirement(uint256,uint256)(TMP_56,required)"];
7->1;
}
// Function: 24997.sol-MultiSigWallet-addTransaction(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transactionId = transactionCount

IRs:
transactionId(uint256) := transactionCount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transactions[transactionId] = Transaction({destination:destination,value:value,data:data,executed:false})

IRs:
REF_64(MultiSigWallet.Transaction) -> transactions[transactionId]
TMP_99(MultiSigWallet.Transaction) = new Transaction(destination,value,data,False)
REF_64(MultiSigWallet.Transaction) (->transactions) := TMP_99(MultiSigWallet.Transaction)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transactionCount += 1

IRs:
transactionCount(uint256) = transactionCount + 1"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Submission(transactionId)

IRs:
Emit Submission(transactionId)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
notNull(destination)

IRs:
MODIFIER_CALL, MultiSigWallet.notNull(address)(destination)"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
transactionId

IRs:
RETURN transactionId"];
}
// Function: 24997.sol-MultiSigWallet-changeRequirement(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
required = _required

IRs:
required(uint256) := _required(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RequirementChange(_required)

IRs:
Emit RequirementChange(_required)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validRequirement(owners.length,_required)

IRs:
REF_47 -> LENGTH owners
MODIFIER_CALL, MultiSigWallet.validRequirement(uint256,uint256)(REF_47,_required)"];
4->1;
}
// Function: 24997.sol-MultiSigWallet-confirmTransaction(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
confirmations[transactionId][msg.sender] = true

IRs:
REF_48(mapping(address => bool)) -> confirmations[transactionId]
REF_49(bool) -> REF_48[msg.sender]
REF_49(bool) (->confirmations) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Confirmation(msg.sender,transactionId)

IRs:
Emit Confirmation(msg.sender,transactionId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
executeTransaction(transactionId)

IRs:
INTERNAL_CALL, MultiSigWallet.executeTransaction(uint256)(transactionId)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
transactionExists(transactionId)

IRs:
MODIFIER_CALL, MultiSigWallet.transactionExists(uint256)(transactionId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notConfirmed(transactionId,msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.notConfirmed(uint256,address)(transactionId,msg.sender)"];
6->1;
}
// Function: 24997.sol-MultiSigWallet-confirmed(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! confirmations[transactionId][owner]

IRs:
REF_93(mapping(address => bool)) -> confirmations[transactionId]
REF_94(bool) -> REF_93[owner]
TMP_146 = UnaryType.BANG REF_94 
CONDITION TMP_146"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_147(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 24997.sol-MultiSigWallet-createForeverRose()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(flag == true)

IRs:
TMP_132(bool) = flag == True
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
CoinCreation(new DivisibleForeverRose())

IRs:
TMP_135(DivisibleForeverRose) = new DivisibleForeverRose() 
Emit CoinCreation(TMP_135)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
flag = false

IRs:
flag(bool) := False(bool)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
4->1;
}
// Function: 24997.sol-MultiSigWallet-executeTransaction(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
isConfirmed(transactionId)

IRs:
TMP_90(bool) = INTERNAL_CALL, MultiSigWallet.isConfirmed(uint256)(transactionId)
CONDITION TMP_90"];
1->2[label="True"];
1->9[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tx = transactions[transactionId]

IRs:
REF_52(MultiSigWallet.Transaction) -> transactions[transactionId]
tx(MultiSigWallet.Transaction) := REF_52(MultiSigWallet.Transaction)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tx.executed = true

IRs:
REF_53(bool) -> tx.executed
REF_53(bool) (->tx) := True(bool)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
tx.destination.call.value(tx.value)(tx.data)

IRs:
REF_54(address) -> tx.destination
REF_57(uint256) -> tx.value
REF_58(bytes) -> tx.data
TMP_92(bool) = LOW_LEVEL_CALL, dest:REF_54, function:call, arguments:['REF_58'] value:REF_57 
CONDITION TMP_92"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Execution(transactionId)

IRs:
Emit Execution(transactionId)"];
5->8;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ExecutionFailure(transactionId)

IRs:
Emit ExecutionFailure(transactionId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tx.executed = false

IRs:
REF_59(bool) -> tx.executed
REF_59(bool) (->tx) := False(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
notExecuted(transactionId)

IRs:
MODIFIER_CALL, MultiSigWallet.notExecuted(uint256)(transactionId)"];
10->1;
}
// Function: 24997.sol-MultiSigWallet-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value > 0

IRs:
TMP_41(bool) = msg.value > 0
CONDITION TMP_41"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Deposit(msg.sender,msg.value)

IRs:
Emit Deposit(msg.sender,msg.value)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 24997.sol-MultiSigWallet-getConfirmationCount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < owners.length

IRs:
REF_65 -> LENGTH owners
TMP_102(bool) = i < REF_65
CONDITION TMP_102"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
confirmations[transactionId][owners[i]]

IRs:
REF_66(mapping(address => bool)) -> confirmations[transactionId]
REF_67(address) -> owners[i]
REF_68(bool) -> REF_66[REF_67]
CONDITION REF_68"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_103(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 24997.sol-MultiSigWallet-getConfirmations(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
confirmationsTemp = new address[](owners.length)

IRs:
REF_73 -> LENGTH owners
TMP_111(address[])  = new address[](REF_73)
confirmationsTemp(address[]) = ['TMP_111(address[])']"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->13;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < owners.length

IRs:
REF_74 -> LENGTH owners
TMP_112(bool) = i < REF_74
CONDITION TMP_112"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
confirmations[transactionId][owners[i]]

IRs:
REF_75(mapping(address => bool)) -> confirmations[transactionId]
REF_76(address) -> owners[i]
REF_77(bool) -> REF_75[REF_76]
CONDITION REF_77"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
confirmationsTemp[count] = owners[i]

IRs:
REF_78(address) -> confirmationsTemp[count]
REF_79(address) -> owners[i]
REF_78(address) (->confirmationsTemp) := REF_79(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_113(uint256) := i(uint256)
i(uint256) = i + 1"];
12->7;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_confirmations = new address[](count)

IRs:
TMP_115(address[])  = new address[](count)
_confirmations(address[]) = ['TMP_115(address[])']"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
i < count

IRs:
TMP_116(bool) = i < count
CONDITION TMP_116"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_confirmations[i] = confirmationsTemp[i]

IRs:
REF_80(address) -> _confirmations[i]
REF_81(address) -> confirmationsTemp[i]
REF_80(address) (->_confirmations) := REF_81(address)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i ++

IRs:
TMP_117(uint256) := i(uint256)
i(uint256) = i + 1"];
19->17;
20[label="Node Type: RETURN 20

EXPRESSION:
_confirmations

IRs:
RETURN _confirmations"];
}
// Function: 24997.sol-MultiSigWallet-getOwners()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owners

IRs:
RETURN owners"];
}
// Function: 24997.sol-MultiSigWallet-getTransactionCount(bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < transactionCount

IRs:
TMP_104(bool) = i < transactionCount
CONDITION TMP_104"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
pending && ! transactions[i].executed || executed && transactions[i].executed

IRs:
REF_69(MultiSigWallet.Transaction) -> transactions[i]
REF_70(bool) -> REF_69.executed
TMP_105 = UnaryType.BANG REF_70 
TMP_106(bool) = pending && TMP_105
REF_71(MultiSigWallet.Transaction) -> transactions[i]
REF_72(bool) -> REF_71.executed
TMP_107(bool) = executed && REF_72
TMP_108(bool) = TMP_106 || TMP_107
CONDITION TMP_108"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_109(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 24997.sol-MultiSigWallet-getTransactionIds(uint256,uint256,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
transactionIdsTemp = new uint256[](transactionCount)

IRs:
TMP_119(uint256[])  = new uint256[](transactionCount)
transactionIdsTemp(uint256[]) = ['TMP_119(uint256[])']"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->13;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < transactionCount

IRs:
TMP_120(bool) = i < transactionCount
CONDITION TMP_120"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
pending && ! transactions[i].executed || executed && transactions[i].executed

IRs:
REF_82(MultiSigWallet.Transaction) -> transactions[i]
REF_83(bool) -> REF_82.executed
TMP_121 = UnaryType.BANG REF_83 
TMP_122(bool) = pending && TMP_121
REF_84(MultiSigWallet.Transaction) -> transactions[i]
REF_85(bool) -> REF_84.executed
TMP_123(bool) = executed && REF_85
TMP_124(bool) = TMP_122 || TMP_123
CONDITION TMP_124"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
transactionIdsTemp[count] = i

IRs:
REF_86(uint256) -> transactionIdsTemp[count]
REF_86(uint256) (->transactionIdsTemp) := i(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_125(uint256) := i(uint256)
i(uint256) = i + 1"];
12->7;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_transactionIds = new uint256[](to - from)

IRs:
TMP_127(uint256) = to - from
TMP_128(uint256[])  = new uint256[](TMP_127)
_transactionIds(uint256[]) = ['TMP_128(uint256[])']"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i = from

IRs:
i(uint256) := from(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
i < to

IRs:
TMP_129(bool) = i < to
CONDITION TMP_129"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_transactionIds[i - from] = transactionIdsTemp[i]

IRs:
TMP_130(uint256) = i - from
REF_87(uint256) -> _transactionIds[TMP_130]
REF_88(uint256) -> transactionIdsTemp[i]
REF_87(uint256) (->_transactionIds) := REF_88(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i ++

IRs:
TMP_131(uint256) := i(uint256)
i(uint256) = i + 1"];
19->17;
20[label="Node Type: RETURN 20

EXPRESSION:
_transactionIds

IRs:
RETURN _transactionIds"];
}
// Function: 24997.sol-MultiSigWallet-isConfirmed(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < owners.length

IRs:
REF_60 -> LENGTH owners
TMP_96(bool) = i < REF_60
CONDITION TMP_96"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
confirmations[transactionId][owners[i]]

IRs:
REF_61(mapping(address => bool)) -> confirmations[transactionId]
REF_62(address) -> owners[i]
REF_63(bool) -> REF_61[REF_62]
CONDITION REF_63"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
count == required

IRs:
TMP_97(bool) = count == required
CONDITION TMP_97"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_98(uint256) := i(uint256)
i(uint256) = i + 1"];
12->5;
}
// Function: 24997.sol-MultiSigWallet-notConfirmed(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
confirmations[transactionId][owner]

IRs:
REF_95(mapping(address => bool)) -> confirmations[transactionId]
REF_96(bool) -> REF_95[owner]
CONDITION REF_96"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_148(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 24997.sol-MultiSigWallet-notExecuted(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
transactions[transactionId].executed

IRs:
REF_97(MultiSigWallet.Transaction) -> transactions[transactionId]
REF_98(bool) -> REF_97.executed
CONDITION REF_98"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_149(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 24997.sol-MultiSigWallet-notNull(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_address == 0

IRs:
TMP_150(bool) = _address == 0
CONDITION TMP_150"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_151(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 24997.sol-MultiSigWallet-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner[msg.sender] == true)

IRs:
REF_99(bool) -> isOwner[msg.sender]
TMP_160(bool) = REF_99 == True
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24997.sol-MultiSigWallet-onlyWallet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != address(this)

IRs:
TMP_138 = CONVERT this to address
TMP_139(bool) = msg.sender != TMP_138
CONDITION TMP_139"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_140(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 24997.sol-MultiSigWallet-ownerDoesNotExist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isOwner[owner]

IRs:
REF_89(bool) -> isOwner[owner]
CONDITION REF_89"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_141(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 24997.sol-MultiSigWallet-ownerExists(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isOwner[owner]

IRs:
REF_90(bool) -> isOwner[owner]
TMP_142 = UnaryType.BANG REF_90 
CONDITION TMP_142"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_143(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 24997.sol-MultiSigWallet-removeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isOwner[owner] = false

IRs:
REF_33(bool) -> isOwner[owner]
REF_33(bool) (->isOwner) := False(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->11;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < owners.length - 1

IRs:
REF_34 -> LENGTH owners
TMP_58(uint256) = REF_34 - 1
TMP_59(bool) = i < TMP_58
CONDITION TMP_59"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
owners[i] == owner

IRs:
REF_35(address) -> owners[i]
TMP_60(bool) = REF_35 == owner
CONDITION TMP_60"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
owners[i] = owners[owners.length - 1]

IRs:
REF_36(address) -> owners[i]
REF_37 -> LENGTH owners
TMP_61(uint256) = REF_37 - 1
REF_38(address) -> owners[TMP_61]
REF_36(address) (->owners) := REF_38(address)"];
7->8;
8[label="Node Type: BREAK 8
"];
8->3;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_62(uint256) := i(uint256)
i(uint256) = i + 1"];
10->5;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
owners.length -= 1

IRs:
REF_39 -> LENGTH owners
REF_39(-> owners) = REF_39 - 1"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
required > owners.length

IRs:
REF_40 -> LENGTH owners
TMP_63(bool) = required > REF_40
CONDITION TMP_63"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
changeRequirement(owners.length)

IRs:
REF_41 -> LENGTH owners
INTERNAL_CALL, MultiSigWallet.changeRequirement(uint256)(REF_41)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
OwnerRemoval(owner)

IRs:
Emit OwnerRemoval(owner)"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
ownerExists(owner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(owner)"];
17->1;
}
// Function: 24997.sol-MultiSigWallet-replaceOwner(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < owners.length

IRs:
REF_42 -> LENGTH owners
TMP_68(bool) = i < REF_42
CONDITION TMP_68"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
owners[i] == owner

IRs:
REF_43(address) -> owners[i]
TMP_69(bool) = REF_43 == owner
CONDITION TMP_69"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
owners[i] = newOwner

IRs:
REF_44(address) -> owners[i]
REF_44(address) (->owners) := newOwner(address)"];
6->7;
7[label="Node Type: BREAK 7
"];
7->2;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_70(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isOwner[owner] = false

IRs:
REF_45(bool) -> isOwner[owner]
REF_45(bool) (->isOwner) := False(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isOwner[newOwner] = true

IRs:
REF_46(bool) -> isOwner[newOwner]
REF_46(bool) (->isOwner) := True(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OwnerRemoval(owner)

IRs:
Emit OwnerRemoval(owner)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
OwnerAddition(newOwner)

IRs:
Emit OwnerAddition(newOwner)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
ownerExists(owner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(owner)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
ownerDoesNotExist(newOwner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerDoesNotExist(address)(newOwner)"];
16->3;
}
// Function: 24997.sol-MultiSigWallet-revokeConfirmation(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
confirmations[transactionId][msg.sender] = false

IRs:
REF_50(mapping(address => bool)) -> confirmations[transactionId]
REF_51(bool) -> REF_50[msg.sender]
REF_51(bool) (->confirmations) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Revocation(msg.sender,transactionId)

IRs:
Emit Revocation(msg.sender,transactionId)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
confirmed(transactionId,msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.confirmed(uint256,address)(transactionId,msg.sender)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
notExecuted(transactionId)

IRs:
MODIFIER_CALL, MultiSigWallet.notExecuted(uint256)(transactionId)"];
5->1;
}
// Function: 24997.sol-MultiSigWallet-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_OWNER_COUNT = 50

IRs:
MAX_OWNER_COUNT(uint256) := 50(uint256)"];
}
// Function: 24997.sol-MultiSigWallet-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
flag = true

IRs:
flag(bool) := True(bool)"];
}
// Function: 24997.sol-MultiSigWallet-submitTransaction(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transactionId = addTransaction(destination,value,data)

IRs:
TMP_79(uint256) = INTERNAL_CALL, MultiSigWallet.addTransaction(address,uint256,bytes)(destination,value,data)
transactionId(uint256) := TMP_79(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
confirmTransaction(transactionId)

IRs:
INTERNAL_CALL, MultiSigWallet.confirmTransaction(uint256)(transactionId)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
transactionId

IRs:
RETURN transactionId"];
}
// Function: 24997.sol-MultiSigWallet-transactionExists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
transactions[transactionId].destination == 0

IRs:
REF_91(MultiSigWallet.Transaction) -> transactions[transactionId]
REF_92(address) -> REF_91.destination
TMP_144(bool) = REF_92 == 0
CONDITION TMP_144"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_145(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 24997.sol-MultiSigWallet-validRequirement(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
ownerCount > MAX_OWNER_COUNT || _required > ownerCount || _required == 0 || ownerCount == 0

IRs:
TMP_152(bool) = ownerCount > MAX_OWNER_COUNT
TMP_153(bool) = _required > ownerCount
TMP_154(bool) = TMP_152 || TMP_153
TMP_155(bool) = _required == 0
TMP_156(bool) = TMP_154 || TMP_155
TMP_157(bool) = ownerCount == 0
TMP_158(bool) = TMP_156 || TMP_157
CONDITION TMP_158"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_159(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
}
