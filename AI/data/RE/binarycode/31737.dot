digraph G {
// Function: 31737.sol-Controlled-Controlled()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setExclude(msg.sender)

IRs:
TMP_14(bool) = INTERNAL_CALL, Controlled.setExclude(address)(msg.sender)"];
}
// Function: 31737.sol-Controlled-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 31737.sol-Controlled-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_11(bool) = msg.sender == newOwner
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerUpdate(owner,newOwner)

IRs:
Emit OwnerUpdate(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = 0x0

IRs:
newOwner(address) := 0(uint256)"];
}
// Function: 31737.sol-Controlled-addLock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addr != msg.sender)

IRs:
TMP_17(bool) = _addr != msg.sender
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
locked[_addr] = true

IRs:
REF_0(bool) -> locked[_addr]
REF_0(bool) (->locked) := True(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-Controlled-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != owner)

IRs:
TMP_8(bool) = _newOwner != owner
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 31737.sol-Controlled-disableLock(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lockFlag = _enable

IRs:
lockFlag(bool) := _enable(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-Controlled-enableTransfer(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferEnabled = _enable

IRs:
transferEnabled(bool) := _enable(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 31737.sol-Controlled-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_22(bool) = msg.sender == owner
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31737.sol-Controlled-removeLock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
locked[_addr] = false

IRs:
REF_2(bool) -> locked[_addr]
REF_2(bool) (->locked) := False(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-Controlled-setExclude(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
exclude[_addr] = true

IRs:
REF_1(bool) -> exclude[_addr]
REF_1(bool) (->exclude) := True(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-Controlled-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
newOwner = 0x0

IRs:
newOwner(address) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
transferEnabled = false

IRs:
transferEnabled(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
lockFlag = true

IRs:
lockFlag(bool) := True(bool)"];
}
// Function: 31737.sol-Controlled-transferAllowed(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! exclude[_addr]

IRs:
REF_3(bool) -> exclude[_addr]
TMP_24 = UnaryType.BANG REF_3 
CONDITION TMP_24"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(transferEnabled)

IRs:
TMP_25(None) = SOLIDITY_CALL assert(bool)(transferEnabled)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
lockFlag

IRs:
CONDITION lockFlag"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(! locked[_addr])

IRs:
REF_4(bool) -> locked[_addr]
TMP_26 = UnaryType.BANG REF_4 
TMP_27(None) = SOLIDITY_CALL assert(bool)(TMP_26)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 31737.sol-MESH-Controlled()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setExclude(msg.sender)

IRs:
TMP_78(bool) = INTERNAL_CALL, Controlled.setExclude(address)(msg.sender)"];
}
// Function: 31737.sol-MESH-MESH(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = initialSupply * 10 ** uint256(decimals)

IRs:
TMP_93 = CONVERT decimals to uint256
TMP_94(uint256) = 10 ** TMP_93
TMP_95(uint256) = initialSupply * TMP_94
totalSupply(uint256) := TMP_95(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_51(uint256) -> balances[msg.sender]
REF_51(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 31737.sol-MESH-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 31737.sol-MESH-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_89(bool) = msg.sender == newOwner
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerUpdate(owner,newOwner)

IRs:
Emit OwnerUpdate(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = 0x0

IRs:
newOwner(address) := 0(uint256)"];
}
// Function: 31737.sol-MESH-addLock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addr != msg.sender)

IRs:
TMP_81(bool) = _addr != msg.sender
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
locked[_addr] = true

IRs:
REF_48(bool) -> locked[_addr]
REF_48(bool) (->locked) := True(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-MESH-allowance(address,address)
digraph{
}
// Function: 31737.sol-MESH-approve(address,uint256)
digraph{
}
// Function: 31737.sol-MESH-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_67(mapping(address => uint256)) -> allowed[msg.sender]
REF_68(uint256) -> REF_67[_spender]
REF_68(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

IRs:
TMP_121(bytes32) = SOLIDITY_CALL keccak256()(receiveApproval(address,uint256,address,bytes))
TMP_122 = CONVERT TMP_121 to bytes32
TMP_123 = CONVERT TMP_122 to bytes4
TMP_124(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_123', 'msg.sender', '_value', 'this', '_extraData']  
TMP_125 = UnaryType.BANG TMP_124 
CONDITION TMP_125"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_126(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-MESH-approveAndCallcode(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
REF_71(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(_extraData)

IRs:
TMP_128(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['_extraData']  
TMP_129 = UnaryType.BANG TMP_128 
CONDITION TMP_129"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_130(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-MESH-approveProxy(address,address,uint256,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
nonce = nonces[_from]

IRs:
REF_62(uint256) -> nonces[_from]
nonce(uint256) := REF_62(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
hash = keccak256()(_from,_spender,_value,nonce)

IRs:
TMP_114(bytes32) = SOLIDITY_CALL keccak256()(_from,_spender,_value,nonce)
hash(bytes32) := TMP_114(bytes32)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_from != ecrecover(bytes32,uint8,bytes32,bytes32)(hash,_v,_r,_s)

IRs:
TMP_115(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(hash,_v,_r,_s)
TMP_116(bool) = _from != TMP_115
CONDITION TMP_116"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_117(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][_spender] = _value

IRs:
REF_63(mapping(address => uint256)) -> allowed[_from]
REF_64(uint256) -> REF_63[_spender]
REF_64(uint256) (->allowed) := _value(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Approval(_from,_spender,_value)

IRs:
Emit Approval(_from,_spender,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
nonces[_from] = nonce + 1

IRs:
REF_65(uint256) -> nonces[_from]
TMP_119(uint256) = nonce + 1
REF_65(uint256) (->nonces) := TMP_119(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-MESH-balanceOf(address)
digraph{
}
// Function: 31737.sol-MESH-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != owner)

IRs:
TMP_86(bool) = _newOwner != owner
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 31737.sol-MESH-disableLock(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lockFlag = _enable

IRs:
lockFlag(bool) := _enable(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-MESH-enableTransfer(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferEnabled = _enable

IRs:
transferEnabled(bool) := _enable(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 31737.sol-MESH-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_92(None) = SOLIDITY_CALL revert()()"];
}
// Function: 31737.sol-MESH-getNonce(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
nonces[_addr]

IRs:
REF_66(uint256) -> nonces[_addr]
RETURN REF_66"];
}
// Function: 31737.sol-MESH-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_135(bool) = msg.sender == owner
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31737.sol-MESH-removeLock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
locked[_addr] = false

IRs:
REF_50(bool) -> locked[_addr]
REF_50(bool) (->locked) := False(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-MESH-setExclude(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
exclude[_addr] = true

IRs:
REF_49(bool) -> exclude[_addr]
REF_49(bool) (->exclude) := True(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-MESH-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
newOwner = 0x0

IRs:
newOwner(address) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
transferEnabled = false

IRs:
transferEnabled(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
lockFlag = true

IRs:
lockFlag(bool) := True(bool)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
name = M2C Mesh Network

IRs:
name(string) := M2C Mesh Network(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
symbol = mesh

IRs:
symbol(string) := mesh(string)"];
}
// Function: 31737.sol-MESH-transfer(address,uint256)
digraph{
}
// Function: 31737.sol-MESH-transferAllowed(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! exclude[_addr]

IRs:
REF_73(bool) -> exclude[_addr]
TMP_131 = UnaryType.BANG REF_73 
CONDITION TMP_131"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(transferEnabled)

IRs:
TMP_132(None) = SOLIDITY_CALL assert(bool)(transferEnabled)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
lockFlag

IRs:
CONDITION lockFlag"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(! locked[_addr])

IRs:
REF_74(bool) -> locked[_addr]
TMP_133 = UnaryType.BANG REF_74 
TMP_134(None) = SOLIDITY_CALL assert(bool)(TMP_133)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 31737.sol-MESH-transferFrom(address,address,uint256)
digraph{
}
// Function: 31737.sol-MESH-transferProxy(address,address,uint256,uint256,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->19;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] < _fee + _value

IRs:
REF_52(uint256) -> balances[_from]
TMP_96(uint256) = _fee + _value
TMP_97(bool) = REF_52 < TMP_96
CONDITION TMP_97"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_98(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nonce = nonces[_from]

IRs:
REF_53(uint256) -> nonces[_from]
nonce(uint256) := REF_53(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
h = keccak256()(_from,_to,_value,_fee,nonce)

IRs:
TMP_99(bytes32) = SOLIDITY_CALL keccak256()(_from,_to,_value,_fee,nonce)
h(bytes32) := TMP_99(bytes32)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_from != ecrecover(bytes32,uint8,bytes32,bytes32)(h,_v,_r,_s)

IRs:
TMP_100(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(h,_v,_r,_s)
TMP_101(bool) = _from != TMP_100
CONDITION TMP_101"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
revert()()

IRs:
TMP_102(None) = SOLIDITY_CALL revert()()"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
balances[_to] + _value < balances[_to] || balances[msg.sender] + _fee < balances[msg.sender]

IRs:
REF_54(uint256) -> balances[_to]
TMP_103(uint256) = REF_54 + _value
REF_55(uint256) -> balances[_to]
TMP_104(bool) = TMP_103 < REF_55
REF_56(uint256) -> balances[msg.sender]
TMP_105(uint256) = REF_56 + _fee
REF_57(uint256) -> balances[msg.sender]
TMP_106(bool) = TMP_105 < REF_57
TMP_107(bool) = TMP_104 || TMP_106
CONDITION TMP_107"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
revert()()

IRs:
TMP_108(None) = SOLIDITY_CALL revert()()"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
balances[_to] += _value

IRs:
REF_58(uint256) -> balances[_to]
REF_58(-> balances) = REF_58 + _value"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balances[msg.sender] += _fee

IRs:
REF_59(uint256) -> balances[msg.sender]
REF_59(-> balances) = REF_59 + _fee"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Transfer(_from,msg.sender,_fee)

IRs:
Emit Transfer(_from,msg.sender,_fee)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
balances[_from] -= _value + _fee

IRs:
REF_60(uint256) -> balances[_from]
TMP_111(uint256) = _value + _fee
REF_60(-> balances) = REF_60 - TMP_111"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
nonces[_from] = nonce + 1

IRs:
REF_61(uint256) -> nonces[_from]
TMP_112(uint256) = nonce + 1
REF_61(uint256) (->nonces) := TMP_112(uint256)"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
true

IRs:
RETURN True"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
transferAllowed(_from)

IRs:
MODIFIER_CALL, Controlled.transferAllowed(address)(_from)"];
19->1;
}
// Function: 31737.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 31737.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_3(bool) = msg.sender == newOwner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerUpdate(owner,newOwner)

IRs:
Emit OwnerUpdate(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = 0x0

IRs:
newOwner(address) := 0(uint256)"];
}
// Function: 31737.sol-Owned-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != owner)

IRs:
TMP_0(bool) = _newOwner != owner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 31737.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_6(bool) = msg.sender == owner
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31737.sol-Owned-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
newOwner = 0x0

IRs:
newOwner(address) := 0(uint256)"];
}
// Function: 31737.sol-StandardToken-Controlled()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setExclude(msg.sender)

IRs:
TMP_28(bool) = INTERNAL_CALL, Controlled.setExclude(address)(msg.sender)"];
}
// Function: 31737.sol-StandardToken-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 31737.sol-StandardToken-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_39(bool) = msg.sender == newOwner
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerUpdate(owner,newOwner)

IRs:
Emit OwnerUpdate(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = 0x0

IRs:
newOwner(address) := 0(uint256)"];
}
// Function: 31737.sol-StandardToken-addLock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addr != msg.sender)

IRs:
TMP_31(bool) = _addr != msg.sender
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
locked[_addr] = true

IRs:
REF_5(bool) -> locked[_addr]
REF_5(bool) (->locked) := True(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_25(mapping(address => uint256)) -> allowed[_owner]
REF_26(uint256) -> REF_25[_spender]
RETURN REF_26"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 31737.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_23(mapping(address => uint256)) -> allowed[msg.sender]
REF_24(uint256) -> REF_23[_spender]
REF_24(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_22(uint256) -> balances[_owner]
RETURN REF_22"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 31737.sol-StandardToken-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != owner)

IRs:
TMP_36(bool) = _newOwner != owner
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 31737.sol-StandardToken-disableLock(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lockFlag = _enable

IRs:
lockFlag(bool) := _enable(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-StandardToken-enableTransfer(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferEnabled = _enable

IRs:
transferEnabled(bool) := _enable(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 31737.sol-StandardToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_61(bool) = msg.sender == owner
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31737.sol-StandardToken-removeLock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
locked[_addr] = false

IRs:
REF_7(bool) -> locked[_addr]
REF_7(bool) (->locked) := False(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-StandardToken-setExclude(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
exclude[_addr] = true

IRs:
REF_6(bool) -> exclude[_addr]
REF_6(bool) (->exclude) := True(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-StandardToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
newOwner = 0x0

IRs:
newOwner(address) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
transferEnabled = false

IRs:
transferEnabled(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
lockFlag = true

IRs:
lockFlag(bool) := True(bool)"];
}
// Function: 31737.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]

IRs:
REF_8(uint256) -> balances[msg.sender]
TMP_42(bool) = REF_8 >= _value
REF_9(uint256) -> balances[_to]
TMP_43(uint256) = REF_9 + _value
REF_10(uint256) -> balances[_to]
TMP_44(bool) = TMP_43 > REF_10
TMP_45(bool) = TMP_42 && TMP_44
CONDITION TMP_45"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_11(uint256) -> balances[msg.sender]
REF_11(-> balances) = REF_11 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_12(uint256) -> balances[_to]
REF_12(-> balances) = REF_12 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
transferAllowed(msg.sender)

IRs:
MODIFIER_CALL, Controlled.transferAllowed(address)(msg.sender)"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-StandardToken-transferAllowed(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! exclude[_addr]

IRs:
REF_27(bool) -> exclude[_addr]
TMP_57 = UnaryType.BANG REF_27 
CONDITION TMP_57"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(transferEnabled)

IRs:
TMP_58(None) = SOLIDITY_CALL assert(bool)(transferEnabled)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
lockFlag

IRs:
CONDITION lockFlag"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(! locked[_addr])

IRs:
REF_28(bool) -> locked[_addr]
TMP_59 = UnaryType.BANG REF_28 
TMP_60(None) = SOLIDITY_CALL assert(bool)(TMP_59)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 31737.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]

IRs:
REF_13(uint256) -> balances[_from]
TMP_48(bool) = REF_13 >= _value
REF_14(mapping(address => uint256)) -> allowed[_from]
REF_15(uint256) -> REF_14[msg.sender]
TMP_49(bool) = REF_15 >= _value
TMP_50(bool) = TMP_48 && TMP_49
REF_16(uint256) -> balances[_to]
TMP_51(uint256) = REF_16 + _value
REF_17(uint256) -> balances[_to]
TMP_52(bool) = TMP_51 > REF_17
TMP_53(bool) = TMP_50 && TMP_52
CONDITION TMP_53"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_18(uint256) -> balances[_to]
REF_18(-> balances) = REF_18 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_19(uint256) -> balances[_from]
REF_19(-> balances) = REF_19 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_20(mapping(address => uint256)) -> allowed[_from]
REF_21(uint256) -> REF_20[msg.sender]
REF_21(-> allowed) = REF_21 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
transferAllowed(_from)

IRs:
MODIFIER_CALL, Controlled.transferAllowed(address)(_from)"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31737.sol-Token-allowance(address,address)
digraph{
}
// Function: 31737.sol-Token-approve(address,uint256)
digraph{
}
// Function: 31737.sol-Token-balanceOf(address)
digraph{
}
// Function: 31737.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 31737.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
