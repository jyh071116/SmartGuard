digraph G {
// Function: 31761.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 31761.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 31761.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 31761.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 31761.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 31761.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 31761.sol-Gifto-Gifto()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setBuyPrice(_originalBuyPrice)

IRs:
INTERNAL_CALL, Gifto.setBuyPrice(uint256)(_originalBuyPrice)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[owner] = _totalSupply

IRs:
REF_5(uint256) -> balances[owner]
REF_5(uint256) (->balances) := _totalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(0x0,owner,_totalSupply)

IRs:
Emit Transfer(0,owner,_totalSupply)"];
}
// Function: 31761.sol-Gifto-addInvestorList(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < newInvestorList.length

IRs:
REF_9 -> LENGTH newInvestorList
TMP_27(bool) = i < REF_9
CONDITION TMP_27"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
approvedInvestorList[newInvestorList[i]] = true

IRs:
REF_10(address) -> newInvestorList[i]
REF_11(bool) -> approvedInvestorList[REF_10]
REF_11(bool) (->approvedInvestorList) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_28(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Gifto.onlyOwner()()"];
7->3;
}
// Function: 31761.sol-Gifto-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_31(mapping(address => uint256)) -> allowed[_owner]
REF_32(uint256) -> REF_31[_spender]
RETURN REF_32"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 31761.sol-Gifto-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _amount

IRs:
REF_29(mapping(address => uint256)) -> allowed[msg.sender]
REF_30(uint256) -> REF_29[_spender]
REF_30(uint256) (->allowed) := _amount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_amount)

IRs:
Emit Approval(msg.sender,_spender,_amount)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isTradable()

IRs:
MODIFIER_CALL, Gifto.isTradable()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31761.sol-Gifto-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_addr]

IRs:
REF_6(uint256) -> balances[_addr]
RETURN REF_6"];
}
// Function: 31761.sol-Gifto-buyGifto()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
requestedUnits = (msg.value * _originalBuyPrice) / 10 ** 18

IRs:
TMP_1(uint256) = msg.value * _originalBuyPrice
TMP_2(uint256) = 10 ** 18
TMP_3(uint256) = TMP_1 / TMP_2
requestedUnits(uint256) := TMP_3(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[owner] >= requestedUnits)

IRs:
REF_0(uint256) -> balances[owner]
TMP_4(bool) = REF_0 >= requestedUnits
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[owner] -= requestedUnits

IRs:
REF_1(uint256) -> balances[owner]
REF_1(-> balances) = REF_1 - requestedUnits"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] += requestedUnits

IRs:
REF_2(uint256) -> balances[msg.sender]
REF_2(-> balances) = REF_2 + requestedUnits"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
deposit[msg.sender] += msg.value

IRs:
REF_3(uint256) -> deposit[msg.sender]
REF_3(-> deposit) = REF_3 + msg.value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalTokenSold += requestedUnits

IRs:
totalTokenSold(uint256) = totalTokenSold + requestedUnits"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
totalTokenSold >= _icoSupply

IRs:
TMP_6(bool) = totalTokenSold >= _icoSupply
CONDITION TMP_6"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_selling = false

IRs:
_selling(bool) := False(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(owner,msg.sender,requestedUnits)

IRs:
Emit Transfer(owner,msg.sender,requestedUnits)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
owner.transfer(msg.value)

IRs:
Transfer dest:owner value:msg.value"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onSale()

IRs:
MODIFIER_CALL, Gifto.onSale()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
validValue()

IRs:
MODIFIER_CALL, Gifto.validValue()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
validInvestor()

IRs:
MODIFIER_CALL, Gifto.validInvestor()()"];
14->1;
}
// Function: 31761.sol-Gifto-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyGifto()

IRs:
INTERNAL_CALL, Gifto.buyGifto()()"];
}
// Function: 31761.sol-Gifto-getDeposit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
deposit[_addr]

IRs:
REF_8(uint256) -> deposit[_addr]
RETURN REF_8"];
}
// Function: 31761.sol-Gifto-isApprovedInvestor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
approvedInvestorList[_addr]

IRs:
REF_7(bool) -> approvedInvestorList[_addr]
RETURN REF_7"];
}
// Function: 31761.sol-Gifto-isTradable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tradable == true || msg.sender == owner)

IRs:
TMP_73(bool) = tradable == True
TMP_74(bool) = msg.sender == owner
TMP_75(bool) = TMP_73 || TMP_74
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31761.sol-Gifto-onSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_selling)

IRs:
TMP_66(None) = SOLIDITY_CALL require(bool)(_selling)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31761.sol-Gifto-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_64(bool) = msg.sender == owner
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31761.sol-Gifto-removeInvestorList(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < investorList.length

IRs:
REF_12 -> LENGTH investorList
TMP_30(bool) = i < REF_12
CONDITION TMP_30"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
approvedInvestorList[investorList[i]] = false

IRs:
REF_13(address) -> investorList[i]
REF_14(bool) -> approvedInvestorList[REF_13]
REF_14(bool) (->approvedInvestorList) := False(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_31(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Gifto.onlyOwner()()"];
7->3;
}
// Function: 31761.sol-Gifto-setBuyPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newBuyPrice > 0)

IRs:
TMP_21(bool) = newBuyPrice > 0
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_originalBuyPrice = newBuyPrice

IRs:
_originalBuyPrice(uint256) := newBuyPrice(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_maximumBuy = 10 ** 18 * 10000000000 / _originalBuyPrice

IRs:
TMP_23(uint256) = 10 ** 18
TMP_24(uint256) = TMP_23 * 10000000000
TMP_25(uint256) = TMP_24 / _originalBuyPrice
_maximumBuy(uint256) := TMP_25(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Gifto.onlyOwner()()"];
4->1;
}
// Function: 31761.sol-Gifto-setIcoPercent(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_icoPercent = newIcoPercent

IRs:
_icoPercent(uint256) := newIcoPercent(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_icoSupply = _totalSupply * _icoPercent / 100

IRs:
TMP_17(uint256) = _totalSupply * _icoPercent
TMP_18(uint256) = TMP_17 / 100
_icoSupply(uint256) := TMP_18(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Gifto.onlyOwner()()"];
3->1;
}
// Function: 31761.sol-Gifto-setMaximumBuy(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_maximumBuy = newMaximumBuy

IRs:
_maximumBuy(uint256) := newMaximumBuy(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Gifto.onlyOwner()()"];
2->1;
}
// Function: 31761.sol-Gifto-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 5

IRs:
decimals(uint256) := 5(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = GTO

IRs:
symbol(string) := GTO(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = Gifto

IRs:
name(string) := Gifto(string)"];
}
// Function: 31761.sol-Gifto-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
_selling = true

IRs:
_selling(bool) := True(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
_totalSupply = 10 ** 14

IRs:
TMP_55(uint256) = 10 ** 14
_totalSupply(uint256) := TMP_55(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
_originalBuyPrice = 43 * 10 ** 7

IRs:
TMP_56(uint256) = 10 ** 7
TMP_57(uint256) = 43 * TMP_56
_originalBuyPrice(uint256) := TMP_57(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
_icoPercent = 10

IRs:
_icoPercent(uint256) := 10(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
_icoSupply = _totalSupply * _icoPercent / 100

IRs:
TMP_58(uint256) = _totalSupply * _icoPercent
TMP_59(uint256) = TMP_58 / 100
_icoSupply(uint256) := TMP_59(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
_minimumBuy = 3 * 10 ** 17

IRs:
TMP_60(uint256) = 10 ** 17
TMP_61(uint256) = 3 * TMP_60
_minimumBuy(uint256) := TMP_61(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
_maximumBuy = 25 * 10 ** 18

IRs:
TMP_62(uint256) = 10 ** 18
TMP_63(uint256) = 25 * TMP_62
_maximumBuy(uint256) := TMP_63(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
totalTokenSold = 0

IRs:
totalTokenSold(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
tradable = false

IRs:
tradable(bool) := False(bool)"];
}
// Function: 31761.sol-Gifto-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 31761.sol-Gifto-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
(balances[msg.sender] >= _amount) && (_amount >= 0) && (balances[_to] + _amount > balances[_to])

IRs:
REF_15(uint256) -> balances[msg.sender]
TMP_33(bool) = REF_15 >= _amount
TMP_34(bool) = _amount >= 0
TMP_35(bool) = TMP_33 && TMP_34
REF_16(uint256) -> balances[_to]
TMP_36(uint256) = REF_16 + _amount
REF_17(uint256) -> balances[_to]
TMP_37(bool) = TMP_36 > REF_17
TMP_38(bool) = TMP_35 && TMP_37
CONDITION TMP_38"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _amount

IRs:
REF_18(uint256) -> balances[msg.sender]
REF_18(-> balances) = REF_18 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _amount

IRs:
REF_19(uint256) -> balances[_to]
REF_19(-> balances) = REF_19 + _amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isTradable()

IRs:
MODIFIER_CALL, Gifto.isTradable()()"];
8->1;
}
// Function: 31761.sol-Gifto-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]

IRs:
REF_20(uint256) -> balances[_from]
TMP_41(bool) = REF_20 >= _amount
REF_21(mapping(address => uint256)) -> allowed[_from]
REF_22(uint256) -> REF_21[msg.sender]
TMP_42(bool) = REF_22 >= _amount
TMP_43(bool) = TMP_41 && TMP_42
TMP_44(bool) = _amount > 0
TMP_45(bool) = TMP_43 && TMP_44
REF_23(uint256) -> balances[_to]
TMP_46(uint256) = REF_23 + _amount
REF_24(uint256) -> balances[_to]
TMP_47(bool) = TMP_46 > REF_24
TMP_48(bool) = TMP_45 && TMP_47
CONDITION TMP_48"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_from] -= _amount

IRs:
REF_25(uint256) -> balances[_from]
REF_25(-> balances) = REF_25 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[_from][msg.sender] -= _amount

IRs:
REF_26(mapping(address => uint256)) -> allowed[_from]
REF_27(uint256) -> REF_26[msg.sender]
REF_27(-> allowed) = REF_27 - _amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] += _amount

IRs:
REF_28(uint256) -> balances[_to]
REF_28(-> balances) = REF_28 + _amount"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_amount)

IRs:
Emit Transfer(_from,_to,_amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isTradable()

IRs:
MODIFIER_CALL, Gifto.isTradable()()"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 31761.sol-Gifto-turnOffSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_selling = false

IRs:
_selling(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Gifto.onlyOwner()()"];
2->1;
}
// Function: 31761.sol-Gifto-turnOnSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_selling = true

IRs:
_selling(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Gifto.onlyOwner()()"];
2->1;
}
// Function: 31761.sol-Gifto-turnOnTradable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tradable = true

IRs:
tradable(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Gifto.onlyOwner()()"];
2->1;
}
// Function: 31761.sol-Gifto-validInvestor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(approvedInvestorList[msg.sender])

IRs:
REF_35(bool) -> approvedInvestorList[msg.sender]
TMP_67(None) = SOLIDITY_CALL require(bool)(REF_35)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31761.sol-Gifto-validValue()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((msg.value >= _minimumBuy) && ((deposit[msg.sender] + msg.value) <= _maximumBuy))

IRs:
TMP_68(bool) = msg.value >= _minimumBuy
REF_36(uint256) -> deposit[msg.sender]
TMP_69(uint256) = REF_36 + msg.value
TMP_70(bool) = TMP_69 <= _maximumBuy
TMP_71(bool) = TMP_68 && TMP_70
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31761.sol-Gifto-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
owner.send(this.balance)

IRs:
REF_34(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_53 = SEND dest:owner value:REF_34
RETURN TMP_53"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Gifto.onlyOwner()()"];
2->1;
}
// Function: 31761.sol-MultiSigWallet-MultiSigWallet(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _owners.length

IRs:
REF_37 -> LENGTH _owners
TMP_79(bool) = i < REF_37
CONDITION TMP_79"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
isOwner[_owners[i]] || _owners[i] == 0

IRs:
REF_38(address) -> _owners[i]
REF_39(bool) -> isOwner[REF_38]
REF_40(address) -> _owners[i]
TMP_80(bool) = REF_40 == 0
TMP_81(bool) = REF_39 || TMP_80
CONDITION TMP_81"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_82(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isOwner[_owners[i]] = true

IRs:
REF_41(address) -> _owners[i]
REF_42(bool) -> isOwner[REF_41]
REF_42(bool) (->isOwner) := True(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_83(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owners = _owners

IRs:
owners(address[]) := _owners(address[])"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
required = _required

IRs:
required(uint256) := _required(uint256)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
validRequirement(_owners.length,_required)

IRs:
REF_43 -> LENGTH _owners
MODIFIER_CALL, MultiSigWallet.validRequirement(uint256,uint256)(REF_43,_required)"];
12->3;
}
// Function: 31761.sol-MultiSigWallet-addOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isOwner[owner] = true

IRs:
REF_44(bool) -> isOwner[owner]
REF_44(bool) (->isOwner) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owners.push(owner)

IRs:
REF_46 -> LENGTH owners
TMP_86(uint256) := REF_46(uint256)
TMP_87(uint256) = TMP_86 + 1
REF_46(uint256) (->owners) := TMP_87(uint256)
REF_47(address) -> owners[TMP_86]
REF_47(address) (->owners) := owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerAddition(owner)

IRs:
Emit OwnerAddition(owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownerDoesNotExist(owner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerDoesNotExist(address)(owner)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notNull(owner)

IRs:
MODIFIER_CALL, MultiSigWallet.notNull(address)(owner)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
validRequirement(owners.length + 1,required)

IRs:
REF_48 -> LENGTH owners
TMP_92(uint256) = REF_48 + 1
MODIFIER_CALL, MultiSigWallet.validRequirement(uint256,uint256)(TMP_92,required)"];
7->1;
}
// Function: 31761.sol-MultiSigWallet-addTransaction(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transactionId = transactionCount

IRs:
transactionId(uint256) := transactionCount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transactions[transactionId] = Transaction({destination:destination,value:value,data:data,executed:false})

IRs:
REF_80(MultiSigWallet.Transaction) -> transactions[transactionId]
TMP_135(MultiSigWallet.Transaction) = new Transaction(destination,value,data,False)
REF_80(MultiSigWallet.Transaction) (->transactions) := TMP_135(MultiSigWallet.Transaction)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transactionCount += 1

IRs:
transactionCount(uint256) = transactionCount + 1"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Submission(transactionId)

IRs:
Emit Submission(transactionId)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
notNull(destination)

IRs:
MODIFIER_CALL, MultiSigWallet.notNull(address)(destination)"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
transactionId

IRs:
RETURN transactionId"];
}
// Function: 31761.sol-MultiSigWallet-changeRequirement(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
required = _required

IRs:
required(uint256) := _required(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RequirementChange(_required)

IRs:
Emit RequirementChange(_required)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validRequirement(owners.length,_required)

IRs:
REF_63 -> LENGTH owners
MODIFIER_CALL, MultiSigWallet.validRequirement(uint256,uint256)(REF_63,_required)"];
4->1;
}
// Function: 31761.sol-MultiSigWallet-confirmTransaction(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
confirmations[transactionId][msg.sender] = true

IRs:
REF_64(mapping(address => bool)) -> confirmations[transactionId]
REF_65(bool) -> REF_64[msg.sender]
REF_65(bool) (->confirmations) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Confirmation(msg.sender,transactionId)

IRs:
Emit Confirmation(msg.sender,transactionId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
executeTransaction(transactionId)

IRs:
INTERNAL_CALL, MultiSigWallet.executeTransaction(uint256)(transactionId)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
transactionExists(transactionId)

IRs:
MODIFIER_CALL, MultiSigWallet.transactionExists(uint256)(transactionId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notConfirmed(transactionId,msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.notConfirmed(uint256,address)(transactionId,msg.sender)"];
6->1;
}
// Function: 31761.sol-MultiSigWallet-confirmed(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! confirmations[transactionId][owner]

IRs:
REF_109(mapping(address => bool)) -> confirmations[transactionId]
REF_110(bool) -> REF_109[owner]
TMP_182 = UnaryType.BANG REF_110 
CONDITION TMP_182"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_183(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 31761.sol-MultiSigWallet-createCoin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(flag == true)

IRs:
TMP_168(bool) = flag == True
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
CoinCreation(new Gifto())

IRs:
TMP_171(Gifto) = new Gifto() 
Emit CoinCreation(TMP_171)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
flag = false

IRs:
flag(bool) := False(bool)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
4->1;
}
// Function: 31761.sol-MultiSigWallet-executeTransaction(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
isConfirmed(transactionId)

IRs:
TMP_126(bool) = INTERNAL_CALL, MultiSigWallet.isConfirmed(uint256)(transactionId)
CONDITION TMP_126"];
1->2[label="True"];
1->9[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tx = transactions[transactionId]

IRs:
REF_68(MultiSigWallet.Transaction) -> transactions[transactionId]
tx(MultiSigWallet.Transaction) := REF_68(MultiSigWallet.Transaction)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tx.executed = true

IRs:
REF_69(bool) -> tx.executed
REF_69(bool) (->tx) := True(bool)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
tx.destination.call.value(tx.value)(tx.data)

IRs:
REF_70(address) -> tx.destination
REF_73(uint256) -> tx.value
REF_74(bytes) -> tx.data
TMP_128(bool) = LOW_LEVEL_CALL, dest:REF_70, function:call, arguments:['REF_74'] value:REF_73 
CONDITION TMP_128"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Execution(transactionId)

IRs:
Emit Execution(transactionId)"];
5->8;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ExecutionFailure(transactionId)

IRs:
Emit ExecutionFailure(transactionId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tx.executed = false

IRs:
REF_75(bool) -> tx.executed
REF_75(bool) (->tx) := False(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
notExecuted(transactionId)

IRs:
MODIFIER_CALL, MultiSigWallet.notExecuted(uint256)(transactionId)"];
10->1;
}
// Function: 31761.sol-MultiSigWallet-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value > 0

IRs:
TMP_77(bool) = msg.value > 0
CONDITION TMP_77"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Deposit(msg.sender,msg.value)

IRs:
Emit Deposit(msg.sender,msg.value)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31761.sol-MultiSigWallet-getConfirmationCount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < owners.length

IRs:
REF_81 -> LENGTH owners
TMP_138(bool) = i < REF_81
CONDITION TMP_138"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
confirmations[transactionId][owners[i]]

IRs:
REF_82(mapping(address => bool)) -> confirmations[transactionId]
REF_83(address) -> owners[i]
REF_84(bool) -> REF_82[REF_83]
CONDITION REF_84"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_139(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 31761.sol-MultiSigWallet-getConfirmations(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
confirmationsTemp = new address[](owners.length)

IRs:
REF_89 -> LENGTH owners
TMP_147(address[])  = new address[](REF_89)
confirmationsTemp(address[]) = ['TMP_147(address[])']"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->13;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < owners.length

IRs:
REF_90 -> LENGTH owners
TMP_148(bool) = i < REF_90
CONDITION TMP_148"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
confirmations[transactionId][owners[i]]

IRs:
REF_91(mapping(address => bool)) -> confirmations[transactionId]
REF_92(address) -> owners[i]
REF_93(bool) -> REF_91[REF_92]
CONDITION REF_93"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
confirmationsTemp[count] = owners[i]

IRs:
REF_94(address) -> confirmationsTemp[count]
REF_95(address) -> owners[i]
REF_94(address) (->confirmationsTemp) := REF_95(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_149(uint256) := i(uint256)
i(uint256) = i + 1"];
12->7;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_confirmations = new address[](count)

IRs:
TMP_151(address[])  = new address[](count)
_confirmations(address[]) = ['TMP_151(address[])']"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
i < count

IRs:
TMP_152(bool) = i < count
CONDITION TMP_152"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_confirmations[i] = confirmationsTemp[i]

IRs:
REF_96(address) -> _confirmations[i]
REF_97(address) -> confirmationsTemp[i]
REF_96(address) (->_confirmations) := REF_97(address)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i ++

IRs:
TMP_153(uint256) := i(uint256)
i(uint256) = i + 1"];
19->17;
20[label="Node Type: RETURN 20

EXPRESSION:
_confirmations

IRs:
RETURN _confirmations"];
}
// Function: 31761.sol-MultiSigWallet-getOwners()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owners

IRs:
RETURN owners"];
}
// Function: 31761.sol-MultiSigWallet-getTransactionCount(bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < transactionCount

IRs:
TMP_140(bool) = i < transactionCount
CONDITION TMP_140"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
pending && ! transactions[i].executed || executed && transactions[i].executed

IRs:
REF_85(MultiSigWallet.Transaction) -> transactions[i]
REF_86(bool) -> REF_85.executed
TMP_141 = UnaryType.BANG REF_86 
TMP_142(bool) = pending && TMP_141
REF_87(MultiSigWallet.Transaction) -> transactions[i]
REF_88(bool) -> REF_87.executed
TMP_143(bool) = executed && REF_88
TMP_144(bool) = TMP_142 || TMP_143
CONDITION TMP_144"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_145(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 31761.sol-MultiSigWallet-getTransactionIds(uint256,uint256,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
transactionIdsTemp = new uint256[](transactionCount)

IRs:
TMP_155(uint256[])  = new uint256[](transactionCount)
transactionIdsTemp(uint256[]) = ['TMP_155(uint256[])']"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->13;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < transactionCount

IRs:
TMP_156(bool) = i < transactionCount
CONDITION TMP_156"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
pending && ! transactions[i].executed || executed && transactions[i].executed

IRs:
REF_98(MultiSigWallet.Transaction) -> transactions[i]
REF_99(bool) -> REF_98.executed
TMP_157 = UnaryType.BANG REF_99 
TMP_158(bool) = pending && TMP_157
REF_100(MultiSigWallet.Transaction) -> transactions[i]
REF_101(bool) -> REF_100.executed
TMP_159(bool) = executed && REF_101
TMP_160(bool) = TMP_158 || TMP_159
CONDITION TMP_160"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
transactionIdsTemp[count] = i

IRs:
REF_102(uint256) -> transactionIdsTemp[count]
REF_102(uint256) (->transactionIdsTemp) := i(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_161(uint256) := i(uint256)
i(uint256) = i + 1"];
12->7;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_transactionIds = new uint256[](to - from)

IRs:
TMP_163(uint256) = to - from
TMP_164(uint256[])  = new uint256[](TMP_163)
_transactionIds(uint256[]) = ['TMP_164(uint256[])']"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i = from

IRs:
i(uint256) := from(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
i < to

IRs:
TMP_165(bool) = i < to
CONDITION TMP_165"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_transactionIds[i - from] = transactionIdsTemp[i]

IRs:
TMP_166(uint256) = i - from
REF_103(uint256) -> _transactionIds[TMP_166]
REF_104(uint256) -> transactionIdsTemp[i]
REF_103(uint256) (->_transactionIds) := REF_104(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i ++

IRs:
TMP_167(uint256) := i(uint256)
i(uint256) = i + 1"];
19->17;
20[label="Node Type: RETURN 20

EXPRESSION:
_transactionIds

IRs:
RETURN _transactionIds"];
}
// Function: 31761.sol-MultiSigWallet-isConfirmed(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < owners.length

IRs:
REF_76 -> LENGTH owners
TMP_132(bool) = i < REF_76
CONDITION TMP_132"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
confirmations[transactionId][owners[i]]

IRs:
REF_77(mapping(address => bool)) -> confirmations[transactionId]
REF_78(address) -> owners[i]
REF_79(bool) -> REF_77[REF_78]
CONDITION REF_79"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
count == required

IRs:
TMP_133(bool) = count == required
CONDITION TMP_133"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_134(uint256) := i(uint256)
i(uint256) = i + 1"];
12->5;
}
// Function: 31761.sol-MultiSigWallet-notConfirmed(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
confirmations[transactionId][owner]

IRs:
REF_111(mapping(address => bool)) -> confirmations[transactionId]
REF_112(bool) -> REF_111[owner]
CONDITION REF_112"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_184(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 31761.sol-MultiSigWallet-notExecuted(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
transactions[transactionId].executed

IRs:
REF_113(MultiSigWallet.Transaction) -> transactions[transactionId]
REF_114(bool) -> REF_113.executed
CONDITION REF_114"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_185(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 31761.sol-MultiSigWallet-notNull(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_address == 0

IRs:
TMP_186(bool) = _address == 0
CONDITION TMP_186"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_187(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 31761.sol-MultiSigWallet-onlyWallet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != address(this)

IRs:
TMP_174 = CONVERT this to address
TMP_175(bool) = msg.sender != TMP_174
CONDITION TMP_175"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_176(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 31761.sol-MultiSigWallet-ownerDoesNotExist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isOwner[owner]

IRs:
REF_105(bool) -> isOwner[owner]
CONDITION REF_105"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_177(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 31761.sol-MultiSigWallet-ownerExists(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isOwner[owner]

IRs:
REF_106(bool) -> isOwner[owner]
TMP_178 = UnaryType.BANG REF_106 
CONDITION TMP_178"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_179(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 31761.sol-MultiSigWallet-removeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isOwner[owner] = false

IRs:
REF_49(bool) -> isOwner[owner]
REF_49(bool) (->isOwner) := False(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->11;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < owners.length - 1

IRs:
REF_50 -> LENGTH owners
TMP_94(uint256) = REF_50 - 1
TMP_95(bool) = i < TMP_94
CONDITION TMP_95"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
owners[i] == owner

IRs:
REF_51(address) -> owners[i]
TMP_96(bool) = REF_51 == owner
CONDITION TMP_96"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
owners[i] = owners[owners.length - 1]

IRs:
REF_52(address) -> owners[i]
REF_53 -> LENGTH owners
TMP_97(uint256) = REF_53 - 1
REF_54(address) -> owners[TMP_97]
REF_52(address) (->owners) := REF_54(address)"];
7->8;
8[label="Node Type: BREAK 8
"];
8->3;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_98(uint256) := i(uint256)
i(uint256) = i + 1"];
10->5;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
owners.length -= 1

IRs:
REF_55 -> LENGTH owners
REF_55(-> owners) = REF_55 - 1"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
required > owners.length

IRs:
REF_56 -> LENGTH owners
TMP_99(bool) = required > REF_56
CONDITION TMP_99"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
changeRequirement(owners.length)

IRs:
REF_57 -> LENGTH owners
INTERNAL_CALL, MultiSigWallet.changeRequirement(uint256)(REF_57)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
OwnerRemoval(owner)

IRs:
Emit OwnerRemoval(owner)"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
ownerExists(owner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(owner)"];
17->1;
}
// Function: 31761.sol-MultiSigWallet-replaceOwner(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < owners.length

IRs:
REF_58 -> LENGTH owners
TMP_104(bool) = i < REF_58
CONDITION TMP_104"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
owners[i] == owner

IRs:
REF_59(address) -> owners[i]
TMP_105(bool) = REF_59 == owner
CONDITION TMP_105"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
owners[i] = newOwner

IRs:
REF_60(address) -> owners[i]
REF_60(address) (->owners) := newOwner(address)"];
6->7;
7[label="Node Type: BREAK 7
"];
7->2;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_106(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isOwner[owner] = false

IRs:
REF_61(bool) -> isOwner[owner]
REF_61(bool) (->isOwner) := False(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isOwner[newOwner] = true

IRs:
REF_62(bool) -> isOwner[newOwner]
REF_62(bool) (->isOwner) := True(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OwnerRemoval(owner)

IRs:
Emit OwnerRemoval(owner)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
OwnerAddition(newOwner)

IRs:
Emit OwnerAddition(newOwner)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
ownerExists(owner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(owner)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
ownerDoesNotExist(newOwner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerDoesNotExist(address)(newOwner)"];
16->3;
}
// Function: 31761.sol-MultiSigWallet-revokeConfirmation(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
confirmations[transactionId][msg.sender] = false

IRs:
REF_66(mapping(address => bool)) -> confirmations[transactionId]
REF_67(bool) -> REF_66[msg.sender]
REF_67(bool) (->confirmations) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Revocation(msg.sender,transactionId)

IRs:
Emit Revocation(msg.sender,transactionId)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
confirmed(transactionId,msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.confirmed(uint256,address)(transactionId,msg.sender)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
notExecuted(transactionId)

IRs:
MODIFIER_CALL, MultiSigWallet.notExecuted(uint256)(transactionId)"];
5->1;
}
// Function: 31761.sol-MultiSigWallet-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_OWNER_COUNT = 50

IRs:
MAX_OWNER_COUNT(uint256) := 50(uint256)"];
}
// Function: 31761.sol-MultiSigWallet-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
flag = true

IRs:
flag(bool) := True(bool)"];
}
// Function: 31761.sol-MultiSigWallet-submitTransaction(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transactionId = addTransaction(destination,value,data)

IRs:
TMP_115(uint256) = INTERNAL_CALL, MultiSigWallet.addTransaction(address,uint256,bytes)(destination,value,data)
transactionId(uint256) := TMP_115(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
confirmTransaction(transactionId)

IRs:
INTERNAL_CALL, MultiSigWallet.confirmTransaction(uint256)(transactionId)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
transactionId

IRs:
RETURN transactionId"];
}
// Function: 31761.sol-MultiSigWallet-transactionExists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
transactions[transactionId].destination == 0

IRs:
REF_107(MultiSigWallet.Transaction) -> transactions[transactionId]
REF_108(address) -> REF_107.destination
TMP_180(bool) = REF_108 == 0
CONDITION TMP_180"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_181(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 31761.sol-MultiSigWallet-validRequirement(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
ownerCount > MAX_OWNER_COUNT || _required > ownerCount || _required == 0 || ownerCount == 0

IRs:
TMP_188(bool) = ownerCount > MAX_OWNER_COUNT
TMP_189(bool) = _required > ownerCount
TMP_190(bool) = TMP_188 || TMP_189
TMP_191(bool) = _required == 0
TMP_192(bool) = TMP_190 || TMP_191
TMP_193(bool) = ownerCount == 0
TMP_194(bool) = TMP_192 || TMP_193
CONDITION TMP_194"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_195(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
}
