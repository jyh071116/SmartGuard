digraph G {
// Function: 32172.sol-BSEToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 32172.sol-BSEToken-allowance(address,address)
digraph{
}
// Function: 32172.sol-BSEToken-approve(address,uint256)
digraph{
}
// Function: 32172.sol-BSEToken-balanceOf(address)
digraph{
}
// Function: 32172.sol-BSEToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_103(bool) = _value > 0
TMP_104(None) = SOLIDITY_CALL require(bool)(TMP_103)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_90(uint256) -> balances[msg.sender]
TMP_105(bool) = _value <= REF_90
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_91(uint256) -> balances[burner]
REF_92(uint256) -> balances[burner]
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_92', '_value'] 
REF_91(uint256) (->balances) := TMP_107(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_108(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
}
// Function: 32172.sol-BSEToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_110 = UnaryType.BANG mintingFinished 
TMP_111(None) = SOLIDITY_CALL require(bool)(TMP_110)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32172.sol-BSEToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 32172.sol-BSEToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_77(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_63(uint256) -> balances[_to]
REF_64(uint256) -> balances[_to]
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_64', '_amount'] 
REF_63(uint256) (->balances) := TMP_78(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(this,_to,_amount)

IRs:
Emit Transfer(this,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 32172.sol-BSEToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_112(bool) = msg.sender == owner
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32172.sol-BSEToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length == size + 4)

IRs:
REF_95 -> LENGTH msg.data
TMP_114(uint256) = size + 4
TMP_115(bool) = REF_95 == TMP_114
TMP_116(None) = SOLIDITY_CALL assert(bool)(TMP_115)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32172.sol-BSEToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name =  BLACK SNAIL ENERGY 

IRs:
name(string) :=  BLACK SNAIL ENERGY (string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = BSE

IRs:
symbol(string) := BSE(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint32) := 18(uint256)"];
}
// Function: 32172.sol-BSEToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 32172.sol-BSEToken-transfer(address,uint256)
digraph{
}
// Function: 32172.sol-BSEToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 32172.sol-BSEToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_85 = CONVERT 0 to address
TMP_86(bool) = newOwner != TMP_85
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 32172.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_6(uint256) -> balances[_owner]
RETURN REF_6"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 32172.sol-BasicToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length == size + 4)

IRs:
REF_7 -> LENGTH msg.data
TMP_18(uint256) = size + 4
TMP_19(bool) = REF_7 == TMP_18
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32172.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_1(uint256) -> balances[msg.sender]
TMP_13(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1', '_value'] 
REF_0(uint256) (->balances) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_3(uint256) -> balances[_to]
REF_4(uint256) -> balances[_to]
TMP_14(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_4', '_value'] 
REF_3(uint256) (->balances) := TMP_14(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_16(uint256) = 2 * 32
MODIFIER_CALL, BasicToken.onlyPayloadSize(uint256)(TMP_16)"];
5->1;
}
// Function: 32172.sol-Crowdsale-Crowdsale(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
priceUSD = _priceUSD

IRs:
priceUSD(uint256) := _priceUSD(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
multisig = _multisig

IRs:
multisig(address) := _multisig(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token = new BSEToken()

IRs:
TMP_131(BSEToken) = new BSEToken() 
token(BSEToken) := TMP_131(BSEToken)"];
}
// Function: 32172.sol-Crowdsale-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 32172.sol-Crowdsale-changeOracle(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_oracle != 0)

IRs:
TMP_125(bool) = _oracle != 0
TMP_126(None) = SOLIDITY_CALL require(bool)(TMP_125)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oracle = _oracle

IRs:
oracle(address) := _oracle(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 32172.sol-Crowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintTokens()

IRs:
INTERNAL_CALL, Crowdsale.mintTokens()()"];
}
// Function: 32172.sol-Crowdsale-finishICO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.ICO)

IRs:
REF_124(Stateful.State) -> State.ICO
TMP_180(bool) = state == REF_124
TMP_181(None) = SOLIDITY_CALL require(bool)(TMP_180)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setState(State.CrowdsaleFinished)

IRs:
REF_125(Stateful.State) -> State.CrowdsaleFinished
INTERNAL_CALL, Stateful.setState(Stateful.State)(REF_125)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
isSent = multisig.call.gas(3000000).value(this.balance)()

IRs:
REF_129(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_185(bool) = LOW_LEVEL_CALL, dest:multisig, function:call, arguments:[] value:REF_129 gas:3000000
isSent(bool) := TMP_185(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(isSent)

IRs:
TMP_186(None) = SOLIDITY_CALL require(bool)(isSent)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 32172.sol-Crowdsale-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token.finishMinting()

IRs:
TMP_188(bool) = HIGH_LEVEL_CALL, dest:token(BSEToken), function:finishMinting, arguments:[]  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 32172.sol-Crowdsale-finishPreIco()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.PreIco)

IRs:
REF_114(Stateful.State) -> State.PreIco
TMP_160(bool) = state == REF_114
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setState(State.preIcoFinished)

IRs:
REF_115(Stateful.State) -> State.preIcoFinished
INTERNAL_CALL, Stateful.setState(Stateful.State)(REF_115)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
isSent = multisig.call.gas(3000000).value(this.balance)()

IRs:
REF_119(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_165(bool) = LOW_LEVEL_CALL, dest:multisig, function:call, arguments:[] value:REF_119 gas:3000000
isSent(bool) := TMP_165(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(isSent)

IRs:
TMP_166(None) = SOLIDITY_CALL require(bool)(isSent)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 32172.sol-Crowdsale-getDouble()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.ICO || state == State.companySold)

IRs:
REF_131(Stateful.State) -> State.ICO
TMP_190(bool) = state == REF_131
REF_132(Stateful.State) -> State.companySold
TMP_191(bool) = state == REF_132
TMP_192(bool) = TMP_190 || TMP_191
TMP_193(None) = SOLIDITY_CALL require(bool)(TMP_192)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
state == State.ICO

IRs:
REF_133(Stateful.State) -> State.ICO
TMP_194(bool) = state == REF_133
CONDITION TMP_194"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
extraTokensAmount = preICOinvestors[msg.sender]

IRs:
REF_134(uint256) -> preICOinvestors[msg.sender]
extraTokensAmount(uint256) := REF_134(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
preICOinvestors[msg.sender] = 0

IRs:
REF_135(uint256) -> preICOinvestors[msg.sender]
REF_135(uint256) (->preICOinvestors) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token.mint(msg.sender,extraTokensAmount)

IRs:
TMP_195(bool) = HIGH_LEVEL_CALL, dest:token(BSEToken), function:mint, arguments:['msg.sender', 'extraTokensAmount']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ICOinvestors[msg.sender] += extraTokensAmount

IRs:
REF_137(uint256) -> ICOinvestors[msg.sender]
REF_137(-> ICOinvestors) = REF_137 + extraTokensAmount"];
7->14;
8[label="Node Type: IF 8

EXPRESSION:
state == State.companySold

IRs:
REF_138(Stateful.State) -> State.companySold
TMP_196(bool) = state == REF_138
CONDITION TMP_196"];
8->9[label="True"];
8->13[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
extraTokensAmount = preICOinvestors[msg.sender] + ICOinvestors[msg.sender]

IRs:
REF_139(uint256) -> preICOinvestors[msg.sender]
REF_140(uint256) -> ICOinvestors[msg.sender]
TMP_197(uint256) = REF_139 + REF_140
extraTokensAmount(uint256) := TMP_197(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
preICOinvestors[msg.sender] = 0

IRs:
REF_141(uint256) -> preICOinvestors[msg.sender]
REF_141(uint256) (->preICOinvestors) := 0(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ICOinvestors[msg.sender] = 0

IRs:
REF_142(uint256) -> ICOinvestors[msg.sender]
REF_142(uint256) (->ICOinvestors) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
token.mint(msg.sender,extraTokensAmount)

IRs:
TMP_198(bool) = HIGH_LEVEL_CALL, dest:token(BSEToken), function:mint, arguments:['msg.sender', 'extraTokensAmount']  "];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
15->1;
}
// Function: 32172.sol-Crowdsale-getHardcap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
state == State.PreIco

IRs:
REF_97(Stateful.State) -> State.PreIco
TMP_128(bool) = state == REF_97
CONDITION TMP_128"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
preICOTokenHardCap

IRs:
RETURN preICOTokenHardCap"];
3[label="Node Type: IF 3

EXPRESSION:
state == State.ICO

IRs:
REF_98(Stateful.State) -> State.ICO
TMP_129(bool) = state == REF_98
CONDITION TMP_129"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
ICOTokenHardCap

IRs:
RETURN ICOTokenHardCap"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 32172.sol-Crowdsale-isUnderHardCap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(soldTokens < getHardcap())

IRs:
TMP_239(uint256) = INTERNAL_CALL, Crowdsale.getHardcap()()
TMP_240(bool) = soldTokens < TMP_239
TMP_241(None) = SOLIDITY_CALL require(bool)(TMP_240)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32172.sol-Crowdsale-mintTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
valueWEI = msg.value

IRs:
valueWEI(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
valueCent = valueWEI.div(priceUSD)

IRs:
TMP_200(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['valueWEI', 'priceUSD'] 
valueCent(uint256) := TMP_200(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
tokens = rateCent.mul(valueCent)

IRs:
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['rateCent', 'valueCent'] 
tokens(uint256) := TMP_201(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
hardcap = getHardcap()

IRs:
TMP_202(uint256) = INTERNAL_CALL, Crowdsale.getHardcap()()
hardcap(uint256) := TMP_202(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
soldTokens + tokens > hardcap

IRs:
TMP_203(uint256) = soldTokens + tokens
TMP_204(bool) = TMP_203 > hardcap
CONDITION TMP_204"];
5->6[label="True"];
5->12[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokens = hardcap.sub(soldTokens)

IRs:
TMP_205(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['hardcap', 'soldTokens'] 
tokens(uint256) := TMP_205(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
valueCent = tokens.div(rateCent)

IRs:
TMP_206(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['tokens', 'rateCent'] 
valueCent(uint256) := TMP_206(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
valueWEI = valueCent.mul(priceUSD)

IRs:
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['valueCent', 'priceUSD'] 
valueWEI(uint256) := TMP_207(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
change = msg.value - valueWEI

IRs:
TMP_208(uint256) = msg.value - valueWEI
change(uint256) := TMP_208(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
isSent = msg.sender.call.gas(3000000).value(change)()

IRs:
TMP_211(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:change gas:3000000
isSent(bool) := TMP_211(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(isSent)

IRs:
TMP_212(None) = SOLIDITY_CALL require(bool)(isSent)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
token.mint(msg.sender,tokens)

IRs:
TMP_213(bool) = HIGH_LEVEL_CALL, dest:token(BSEToken), function:mint, arguments:['msg.sender', 'tokens']  "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
collectedCent += valueCent

IRs:
collectedCent(uint256) = collectedCent + valueCent"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
soldTokens += tokens

IRs:
soldTokens(uint256) = soldTokens + tokens"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
state == State.PreIco

IRs:
REF_153(Stateful.State) -> State.PreIco
TMP_214(bool) = state == REF_153
CONDITION TMP_214"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
preICOinvestors[msg.sender] += tokens

IRs:
REF_154(uint256) -> preICOinvestors[msg.sender]
REF_154(-> preICOinvestors) = REF_154 + tokens"];
17->19;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ICOinvestors[msg.sender] += tokens

IRs:
REF_155(uint256) -> ICOinvestors[msg.sender]
REF_155(-> ICOinvestors) = REF_155 + tokens"];
18->19;
19[label="Node Type: END_IF 19
"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
saleIsOn()

IRs:
MODIFIER_CALL, Crowdsale.saleIsOn()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isUnderHardCap()

IRs:
MODIFIER_CALL, Crowdsale.isUnderHardCap()()"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
22->1;
}
// Function: 32172.sol-Crowdsale-nonReentrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! rentrancy_lock)

IRs:
TMP_221 = UnaryType.BANG rentrancy_lock 
TMP_222(None) = SOLIDITY_CALL require(bool)(TMP_221)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rentrancy_lock = true

IRs:
rentrancy_lock(bool) := True(bool)"];
2->3;
3[label="Node Type: _ 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rentrancy_lock = false

IRs:
rentrancy_lock(bool) := False(bool)"];
}
// Function: 32172.sol-Crowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_223(bool) = msg.sender == owner
TMP_224(None) = SOLIDITY_CALL require(bool)(TMP_223)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32172.sol-Crowdsale-onlyOwnerOrOracle()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == oracle || msg.sender == owner)

IRs:
TMP_225(bool) = msg.sender == oracle
TMP_226(bool) = msg.sender == owner
TMP_227(bool) = TMP_225 || TMP_226
TMP_228(None) = SOLIDITY_CALL require(bool)(TMP_227)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32172.sol-Crowdsale-pausePreSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.PreIco)

IRs:
REF_109(Stateful.State) -> State.PreIco
TMP_147(bool) = state == REF_109
TMP_148(None) = SOLIDITY_CALL require(bool)(TMP_147)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setState(State.PreIcoPaused)

IRs:
REF_110(Stateful.State) -> State.PreIcoPaused
INTERNAL_CALL, Stateful.setState(Stateful.State)(REF_110)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 32172.sol-Crowdsale-pauseSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.ICO)

IRs:
REF_107(Stateful.State) -> State.ICO
TMP_143(bool) = state == REF_107
TMP_144(None) = SOLIDITY_CALL require(bool)(TMP_143)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setState(State.salePaused)

IRs:
REF_108(Stateful.State) -> State.salePaused
INTERNAL_CALL, Stateful.setState(Stateful.State)(REF_108)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 32172.sol-Crowdsale-saleIsOn()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((state == State.PreIco || state == State.ICO) && (now < startICO + period || now < startPreICO + period))

IRs:
REF_157(Stateful.State) -> State.PreIco
TMP_229(bool) = state == REF_157
REF_158(Stateful.State) -> State.ICO
TMP_230(bool) = state == REF_158
TMP_231(bool) = TMP_229 || TMP_230
TMP_232(uint256) = startICO + period
TMP_233(bool) = now < TMP_232
TMP_234(uint256) = startPreICO + period
TMP_235(bool) = now < TMP_234
TMP_236(bool) = TMP_233 || TMP_235
TMP_237(bool) = TMP_231 && TMP_236
TMP_238(None) = SOLIDITY_CALL require(bool)(TMP_237)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32172.sol-Crowdsale-setPriceUSD(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
priceUSD = _priceUSD

IRs:
priceUSD(uint256) := _priceUSD(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwnerOrOracle()

IRs:
MODIFIER_CALL, Crowdsale.onlyOwnerOrOracle()()"];
2->1;
}
// Function: 32172.sol-Crowdsale-setState(Stateful.State)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldState = state

IRs:
oldState(Stateful.State) := state(Stateful.State)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
state = newState

IRs:
state(Stateful.State) := newState(Stateful.State)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
StateChanged(oldState,newState)

IRs:
Emit StateChanged(oldState,newState)"];
}
// Function: 32172.sol-Crowdsale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rateCent = 2000000000000000

IRs:
rateCent(uint256) := 2000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
preICOTokenHardCap = 440000 * 1000000000000000000

IRs:
TMP_219(uint256) = 440000 * 1000000000000000000
preICOTokenHardCap(uint256) := TMP_219(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
ICOTokenHardCap = 1540000 * 1000000000000000000

IRs:
TMP_220(uint256) = 1540000 * 1000000000000000000
ICOTokenHardCap(uint256) := TMP_220(uint256)"];
}
// Function: 32172.sol-Crowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
state = State.Init

IRs:
REF_156(Stateful.State) -> State.Init
state(Stateful.State) := REF_156(Stateful.State)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
day = 86400

IRs:
day(uint256) := 86400(uint256)"];
}
// Function: 32172.sol-Crowdsale-startCompanySell()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.CrowdsaleFinished)

IRs:
REF_99(Stateful.State) -> State.CrowdsaleFinished
TMP_132(bool) = state == REF_99
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setState(State.companySold)

IRs:
REF_100(Stateful.State) -> State.companySold
INTERNAL_CALL, Stateful.setState(Stateful.State)(REF_100)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 32172.sol-Crowdsale-startIco(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_period > 0)

IRs:
TMP_168(bool) = _period > 0
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(state == State.PreIco || state == State.salePaused || state == State.preIcoFinished)

IRs:
REF_120(Stateful.State) -> State.PreIco
TMP_170(bool) = state == REF_120
REF_121(Stateful.State) -> State.salePaused
TMP_171(bool) = state == REF_121
TMP_172(bool) = TMP_170 || TMP_171
REF_122(Stateful.State) -> State.preIcoFinished
TMP_173(bool) = state == REF_122
TMP_174(bool) = TMP_172 || TMP_173
TMP_175(None) = SOLIDITY_CALL require(bool)(TMP_174)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
priceUSD = _priceUSD

IRs:
priceUSD(uint256) := _priceUSD(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
startICO = now

IRs:
startICO(uint256) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
period = _period * day

IRs:
TMP_176(uint256) = _period * day
period(uint256) := TMP_176(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
setState(State.ICO)

IRs:
REF_123(Stateful.State) -> State.ICO
INTERNAL_CALL, Stateful.setState(Stateful.State)(REF_123)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 32172.sol-Crowdsale-startPreIco(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_period > 0)

IRs:
TMP_151(bool) = _period > 0
TMP_152(None) = SOLIDITY_CALL require(bool)(TMP_151)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(state == State.Init || state == State.PreIcoPaused)

IRs:
REF_111(Stateful.State) -> State.Init
TMP_153(bool) = state == REF_111
REF_112(Stateful.State) -> State.PreIcoPaused
TMP_154(bool) = state == REF_112
TMP_155(bool) = TMP_153 || TMP_154
TMP_156(None) = SOLIDITY_CALL require(bool)(TMP_155)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
priceUSD = _priceUSD

IRs:
priceUSD(uint256) := _priceUSD(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
startPreICO = now

IRs:
startPreICO(uint256) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
period = _period * day

IRs:
TMP_157(uint256) = _period * day
period(uint256) := TMP_157(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
setState(State.PreIco)

IRs:
REF_113(Stateful.State) -> State.PreIco
INTERNAL_CALL, Stateful.setState(Stateful.State)(REF_113)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 32172.sol-Crowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_121 = CONVERT 0 to address
TMP_122(bool) = newOwner != TMP_121
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 32172.sol-Crowdsale-usdSale(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
valueCent = _valueUSD * 100

IRs:
TMP_136(uint256) = _valueUSD * 100
valueCent(uint256) := TMP_136(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokensAmount = rateCent.mul(valueCent)

IRs:
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['rateCent', 'valueCent'] 
tokensAmount(uint256) := TMP_137(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
collectedCent += valueCent

IRs:
collectedCent(uint256) = collectedCent + valueCent"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.mint(_to,tokensAmount)

IRs:
TMP_138(bool) = HIGH_LEVEL_CALL, dest:token(BSEToken), function:mint, arguments:['_to', 'tokensAmount']  "];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
state == State.ICO || state == State.preIcoFinished

IRs:
REF_103(Stateful.State) -> State.ICO
TMP_139(bool) = state == REF_103
REF_104(Stateful.State) -> State.preIcoFinished
TMP_140(bool) = state == REF_104
TMP_141(bool) = TMP_139 || TMP_140
CONDITION TMP_141"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ICOinvestors[_to] += tokensAmount

IRs:
REF_105(uint256) -> ICOinvestors[_to]
REF_105(-> ICOinvestors) = REF_105 + tokensAmount"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
preICOinvestors[_to] += tokensAmount

IRs:
REF_106(uint256) -> preICOinvestors[_to]
REF_106(-> preICOinvestors) = REF_106 + tokensAmount"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
soldTokens += tokensAmount

IRs:
soldTokens(uint256) = soldTokens + tokensAmount"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
// Function: 32172.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 32172.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 32172.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 32172.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 32172.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 32172.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 32172.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 32172.sol-FiatContract-ETH(uint256)
digraph{
}
// Function: 32172.sol-FiatContract-EUR(uint256)
digraph{
}
// Function: 32172.sol-FiatContract-GBP(uint256)
digraph{
}
// Function: 32172.sol-FiatContract-USD(uint256)
digraph{
}
// Function: 32172.sol-FiatContract-updatedAt(uint256)
digraph{
}
// Function: 32172.sol-MintableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 32172.sol-MintableToken-allowance(address,address)
digraph{
}
// Function: 32172.sol-MintableToken-approve(address,uint256)
digraph{
}
// Function: 32172.sol-MintableToken-balanceOf(address)
digraph{
}
// Function: 32172.sol-MintableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_75 = UnaryType.BANG mintingFinished 
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32172.sol-MintableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 32172.sol-MintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_62(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_58(uint256) -> balances[_to]
REF_59(uint256) -> balances[_to]
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_59', '_amount'] 
REF_58(uint256) (->balances) := TMP_63(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(this,_to,_amount)

IRs:
Emit Transfer(this,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 32172.sol-MintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_70(bool) = msg.sender == owner
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32172.sol-MintableToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length == size + 4)

IRs:
REF_61 -> LENGTH msg.data
TMP_72(uint256) = size + 4
TMP_73(bool) = REF_61 == TMP_72
TMP_74(None) = SOLIDITY_CALL assert(bool)(TMP_73)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32172.sol-MintableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 32172.sol-MintableToken-transfer(address,uint256)
digraph{
}
// Function: 32172.sol-MintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 32172.sol-MintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_44 = CONVERT 0 to address
TMP_45(bool) = newOwner != TMP_44
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 32172.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 32172.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_42(bool) = msg.sender == owner
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32172.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_38 = CONVERT 0 to address
TMP_39(bool) = newOwner != TMP_38
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 32172.sol-ReentrancyGuard-nonReentrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! rentrancy_lock)

IRs:
TMP_117 = UnaryType.BANG rentrancy_lock 
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rentrancy_lock = true

IRs:
rentrancy_lock(bool) := True(bool)"];
2->3;
3[label="Node Type: _ 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rentrancy_lock = false

IRs:
rentrancy_lock(bool) := False(bool)"];
}
// Function: 32172.sol-ReentrancyGuard-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rentrancy_lock = false

IRs:
rentrancy_lock(bool) := False(bool)"];
}
// Function: 32172.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 32172.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 32172.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 32172.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 32172.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_30(mapping(address => uint256)) -> allowed[_owner]
REF_31(uint256) -> REF_30[_spender]
RETURN REF_31"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 32172.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

IRs:
TMP_30(bool) = _value == 0
REF_26(mapping(address => uint256)) -> allowed[msg.sender]
REF_27(uint256) -> REF_26[_spender]
TMP_31(bool) = REF_27 == 0
TMP_32(bool) = TMP_30 || TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_28(mapping(address => uint256)) -> allowed[msg.sender]
REF_29(uint256) -> REF_28[_spender]
REF_29(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 32172.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 32172.sol-StandardToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length == size + 4)

IRs:
REF_32 -> LENGTH msg.data
TMP_35(uint256) = size + 4
TMP_36(bool) = REF_32 == TMP_35
TMP_37(None) = SOLIDITY_CALL assert(bool)(TMP_36)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32172.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 32172.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_15(mapping(address => uint256)) -> allowed[_from]
REF_16(uint256) -> REF_15[msg.sender]
_allowance(uint256) := REF_16(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_17(uint256) -> balances[_to]
REF_18(uint256) -> balances[_to]
TMP_26(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_18', '_value'] 
REF_17(uint256) (->balances) := TMP_26(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_20(uint256) -> balances[_from]
REF_21(uint256) -> balances[_from]
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_21', '_value'] 
REF_20(uint256) (->balances) := TMP_27(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] = _allowance.sub(_value)

IRs:
REF_23(mapping(address => uint256)) -> allowed[_from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_allowance', '_value'] 
REF_24(uint256) (->allowed) := TMP_28(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 32172.sol-Stateful-setState(Stateful.State)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldState = state

IRs:
oldState(Stateful.State) := state(Stateful.State)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
state = newState

IRs:
state(Stateful.State) := newState(Stateful.State)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
StateChanged(oldState,newState)

IRs:
Emit StateChanged(oldState,newState)"];
}
// Function: 32172.sol-Stateful-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
state = State.Init

IRs:
REF_96(Stateful.State) -> State.Init
state(Stateful.State) := REF_96(Stateful.State)"];
}
}
