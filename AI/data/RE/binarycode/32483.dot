digraph G {
// Function: 32483.sol-Balances-Balances()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = 190 * 1000000 * 1000000000000000000

IRs:
REF_50(uint256) -> _balances[msg.sender]
TMP_107(uint256) = 190 * 1000000
TMP_108(uint256) = TMP_107 * 1000000000000000000
REF_50(uint256) (->_balances) := TMP_108(uint256)"];
}
// Function: 32483.sol-Balances-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x <= x + y)

IRs:
TMP_93(uint256) = x + y
TMP_94(bool) = x <= TMP_93
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x + y

IRs:
TMP_96(uint256) = x + y
RETURN TMP_96"];
}
// Function: 32483.sol-Balances-get(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_balances[_account]

IRs:
REF_48(uint256) -> _balances[_account]
RETURN REF_48"];
}
// Function: 32483.sol-Balances-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_115(bool) = msg.sender == owner
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-Balances-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= _size + 4)

IRs:
REF_55 -> LENGTH msg.data
TMP_117(uint256) = _size + 4
TMP_118(bool) = REF_55 >= TMP_117
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-Balances-onlyToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == tokenContract())

IRs:
TMP_120(address) = INTERNAL_CALL, Balances.tokenContract()()
TMP_121(bool) = msg.sender == TMP_120
TMP_122(None) = SOLIDITY_CALL require(bool)(TMP_121)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-Balances-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
web = ContractWeb(0x5F9489D7FfC63ce0bDCD282D14E595A865B259d7)

IRs:
TMP_114 = CONVERT 545666641401511274636224938926813239840257235415 to ContractWeb
web(ContractWeb) := TMP_114(ContractWeb)"];
}
// Function: 32483.sol-Balances-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x >= y)

IRs:
TMP_97(bool) = x >= y
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x - y

IRs:
TMP_99(uint256) = x - y
RETURN TMP_99"];
}
// Function: 32483.sol-Balances-tokenContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
web.getContractAddress(Token)

IRs:
TMP_106(address) = HIGH_LEVEL_CALL, dest:web(ContractWeb), function:getContractAddress, arguments:['Token']  
RETURN TMP_106"];
}
// Function: 32483.sol-Balances-transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[_from] = sub(_balances[_from],_value)

IRs:
REF_51(uint256) -> _balances[_from]
REF_52(uint256) -> _balances[_from]
TMP_109(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(REF_52,_value)
REF_51(uint256) (->_balances) := TMP_109(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_balances[_to] = add(_balances[_to],_value)

IRs:
REF_53(uint256) -> _balances[_to]
REF_54(uint256) -> _balances[_to]
TMP_110(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(REF_54,_value)
REF_53(uint256) (->_balances) := TMP_110(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_111(uint256) = 3 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_111)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyToken()

IRs:
MODIFIER_CALL, Balances.onlyToken()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32483.sol-Balances-transferCustomToken(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tkn = Token(_token)

IRs:
TMP_100 = CONVERT _token to Token
tkn(Token) := TMP_100(Token)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tkn.transfer(_to,_value)

IRs:
TMP_101(bool) = HIGH_LEVEL_CALL, dest:tkn(Token), function:transfer, arguments:['_to', '_value']  
RETURN TMP_101"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_102(uint256) = 3 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_102)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 32483.sol-Balances-transferOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32483.sol-CanTransferTokens-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_13(bool) = msg.sender == owner
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-CanTransferTokens-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= _size + 4)

IRs:
REF_2 -> LENGTH msg.data
TMP_15(uint256) = _size + 4
TMP_16(bool) = REF_2 >= TMP_15
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-CanTransferTokens-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 32483.sol-CanTransferTokens-transferCustomToken(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tkn = Token(_token)

IRs:
TMP_8 = CONVERT _token to Token
tkn(Token) := TMP_8(Token)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tkn.transfer(_to,_value)

IRs:
TMP_9(bool) = HIGH_LEVEL_CALL, dest:tkn(Token), function:transfer, arguments:['_to', '_value']  
RETURN TMP_9"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_10(uint256) = 3 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_10)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 32483.sol-CanTransferTokens-transferOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32483.sol-CheckIfContract-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0x0)

IRs:
TMP_25 = CONVERT 0 to address
TMP_26(bool) = _addr == TMP_25
CONDITION TMP_26"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
length > 0

IRs:
TMP_27(bool) = length > 0
CONDITION TMP_27"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 32483.sol-CheckPayloadSize-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= _size + 4)

IRs:
REF_0 -> LENGTH msg.data
TMP_4(uint256) = _size + 4
TMP_5(bool) = REF_0 >= TMP_4
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-ContractReceiver-getFallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
fallback

IRs:
RETURN fallback"];
}
// Function: 32483.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tkn.sender = _from

IRs:
REF_3(address) -> tkn.sender
REF_3(address) (->tkn) := _from(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tkn.value = _value

IRs:
REF_4(uint256) -> tkn.value
REF_4(uint256) (->tkn) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tkn.data = _data

IRs:
REF_5(bytes) -> tkn.data
REF_5(bytes) (->tkn) := _data(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24)

IRs:
REF_6(None) -> _data[3]
TMP_28 = CONVERT REF_6 to uint32
REF_7(None) -> _data[2]
TMP_29 = CONVERT REF_7 to uint32
TMP_30(uint32) = TMP_29 << 8
TMP_31(uint32) = TMP_28 + TMP_30
REF_8(None) -> _data[1]
TMP_32 = CONVERT REF_8 to uint32
TMP_33(uint32) = TMP_32 << 16
TMP_34(uint32) = TMP_31 + TMP_33
REF_9(None) -> _data[0]
TMP_35 = CONVERT REF_9 to uint32
TMP_36(uint32) = TMP_35 << 24
TMP_37(uint32) = TMP_34 + TMP_36
u(uint32) := TMP_37(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tkn.sig = bytes4(u)

IRs:
REF_10(bytes4) -> tkn.sig
TMP_38 = CONVERT u to bytes4
REF_10(bytes4) (->tkn) := TMP_38(bytes4)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
fallback = tkn

IRs:
fallback(ContractReceiver.TKN) := tkn(ContractReceiver.TKN)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 32483.sol-ContractWeb-getContractAddress(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
contracts[_name].contractAddress

IRs:
REF_28(ContractWeb.contractInfo) -> contracts[_name]
REF_29(address) -> REF_28.contractAddress
RETURN REF_29"];
}
// Function: 32483.sol-ContractWeb-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0x0)

IRs:
TMP_49 = CONVERT 0 to address
TMP_50(bool) = _addr == TMP_49
CONDITION TMP_50"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
length > 0

IRs:
TMP_51(bool) = length > 0
CONDITION TMP_51"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 32483.sol-ContractWeb-isContractPermanent(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
contracts[_name].isPermanent

IRs:
REF_30(ContractWeb.contractInfo) -> contracts[_name]
REF_31(bool) -> REF_30.isPermanent
RETURN REF_31"];
}
// Function: 32483.sol-ContractWeb-makeContractPermanent(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(contracts[_name].contractAddress != address(0x0))

IRs:
REF_40(ContractWeb.contractInfo) -> contracts[_name]
REF_41(address) -> REF_40.contractAddress
TMP_73 = CONVERT 0 to address
TMP_74(bool) = REF_41 != TMP_73
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(contracts[_name].isPermanent == false)

IRs:
REF_42(ContractWeb.contractInfo) -> contracts[_name]
REF_43(bool) -> REF_42.isPermanent
TMP_76(bool) = REF_43 == False
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
contracts[_name].isPermanent = true

IRs:
REF_44(ContractWeb.contractInfo) -> contracts[_name]
REF_45(bool) -> REF_44.isPermanent
REF_45(bool) (->contracts) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ContractMadePermanent(_name)

IRs:
Emit ContractMadePermanent(_name)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
6->1;
}
// Function: 32483.sol-ContractWeb-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_88(bool) = msg.sender == owner
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-ContractWeb-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= _size + 4)

IRs:
REF_46 -> LENGTH msg.data
TMP_90(uint256) = _size + 4
TMP_91(bool) = REF_46 >= TMP_90
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-ContractWeb-setContract(string,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isContract(_address))

IRs:
TMP_58(bool) = INTERNAL_CALL, CheckIfContract.isContract(address)(_address)
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(this != _address)

IRs:
TMP_60(bool) = this != _address
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(contracts[_name].contractAddress != _address)

IRs:
REF_32(ContractWeb.contractInfo) -> contracts[_name]
REF_33(address) -> REF_32.contractAddress
TMP_62(bool) = REF_33 != _address
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(contracts[_name].isPermanent == false)

IRs:
REF_34(ContractWeb.contractInfo) -> contracts[_name]
REF_35(bool) -> REF_34.isPermanent
TMP_64(bool) = REF_35 == False
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
oldAddress = contracts[_name].contractAddress

IRs:
REF_36(ContractWeb.contractInfo) -> contracts[_name]
REF_37(address) -> REF_36.contractAddress
oldAddress(address) := REF_37(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
contracts[_name].contractAddress = _address

IRs:
REF_38(ContractWeb.contractInfo) -> contracts[_name]
REF_39(address) -> REF_38.contractAddress
REF_39(address) (->contracts) := _address(address)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
oldAddress == address(0x0)

IRs:
TMP_66 = CONVERT 0 to address
TMP_67(bool) = oldAddress == TMP_66
CONDITION TMP_67"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ContractAdded(_name,_address)

IRs:
Emit ContractAdded(_name,_address)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ContractEdited(_name,_address)

IRs:
Emit ContractEdited(_name,_address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_70(uint256) = 2 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_70)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
13->1;
}
// Function: 32483.sol-ContractWeb-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 32483.sol-ContractWeb-tokenSetup(address,address,address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setContract(Token1st,_Tokens1st)

IRs:
TMP_80(bool) = INTERNAL_CALL, ContractWeb.setContract(string,address)(Token1st,_Tokens1st)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setContract(Balances,_Balancecs)

IRs:
TMP_81(bool) = INTERNAL_CALL, ContractWeb.setContract(string,address)(Balances,_Balancecs)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setContract(Token,_Token)

IRs:
TMP_82(bool) = INTERNAL_CALL, ContractWeb.setContract(string,address)(Token,_Token)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setContract(Conversion,_Conversion)

IRs:
TMP_83(bool) = INTERNAL_CALL, ContractWeb.setContract(string,address)(Conversion,_Conversion)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
setContract(Distribution,_Distribution)

IRs:
TMP_84(bool) = INTERNAL_CALL, ContractWeb.setContract(string,address)(Distribution,_Distribution)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyPayloadSize(5 * 32)

IRs:
TMP_85(uint256) = 5 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_85)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
8->1;
}
// Function: 32483.sol-ContractWeb-transferCustomToken(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tkn = Token(_token)

IRs:
TMP_52 = CONVERT _token to Token
tkn(Token) := TMP_52(Token)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tkn.transfer(_to,_value)

IRs:
TMP_53(bool) = HIGH_LEVEL_CALL, dest:tkn(Token), function:transfer, arguments:['_to', '_value']  
RETURN TMP_53"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_54(uint256) = 3 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_54)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 32483.sol-ContractWeb-transferOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32483.sol-Conversion-convert()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
senderBalance = Token1st(token1stContract()).getBalanceOf(msg.sender)

IRs:
TMP_257(address) = INTERNAL_CALL, Conversion.token1stContract()()
TMP_258 = CONVERT TMP_257 to Token1st
TMP_259(uint256) = HIGH_LEVEL_CALL, dest:TMP_258(Token1st), function:getBalanceOf, arguments:['msg.sender']  
senderBalance(uint256) := TMP_259(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(Token1st(token1stContract()).allowance(msg.sender,this) >= senderBalance)

IRs:
TMP_260(address) = INTERNAL_CALL, Conversion.token1stContract()()
TMP_261 = CONVERT TMP_260 to Token1st
TMP_262(uint256) = HIGH_LEVEL_CALL, dest:TMP_261(Token1st), function:allowance, arguments:['msg.sender', 'this']  
TMP_263(bool) = TMP_262 >= senderBalance
TMP_264(None) = SOLIDITY_CALL require(bool)(TMP_263)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Token1st(token1stContract()).transferDecimalAmountFrom(msg.sender,owner,senderBalance)

IRs:
TMP_265(address) = INTERNAL_CALL, Conversion.token1stContract()()
TMP_266 = CONVERT TMP_265 to Token1st
TMP_267(bool) = HIGH_LEVEL_CALL, dest:TMP_266(Token1st), function:transferDecimalAmountFrom, arguments:['msg.sender', 'owner', 'senderBalance']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
Token(tokenContract()).transfer(msg.sender,senderBalance * 10000000000)

IRs:
TMP_268(address) = INTERNAL_CALL, Conversion.tokenContract()()
TMP_269 = CONVERT TMP_268 to Token
TMP_270(uint256) = senderBalance * 10000000000
TMP_271(bool) = HIGH_LEVEL_CALL, dest:TMP_269(Token), function:transfer, arguments:['msg.sender', 'TMP_270']  
RETURN TMP_271"];
}
// Function: 32483.sol-Conversion-deposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Token(tokenContract()).allowance(owner,this) > 0)

IRs:
TMP_245(address) = INTERNAL_CALL, Conversion.tokenContract()()
TMP_246 = CONVERT TMP_245 to Token
TMP_247(uint256) = HIGH_LEVEL_CALL, dest:TMP_246(Token), function:allowance, arguments:['owner', 'this']  
TMP_248(bool) = TMP_247 > 0
TMP_249(None) = SOLIDITY_CALL require(bool)(TMP_248)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
Token(tokenContract()).transferFrom(owner,this,Token(tokenContract()).allowance(owner,this))

IRs:
TMP_250(address) = INTERNAL_CALL, Conversion.tokenContract()()
TMP_251 = CONVERT TMP_250 to Token
TMP_252(address) = INTERNAL_CALL, Conversion.tokenContract()()
TMP_253 = CONVERT TMP_252 to Token
TMP_254(uint256) = HIGH_LEVEL_CALL, dest:TMP_253(Token), function:allowance, arguments:['owner', 'this']  
TMP_255(bool) = HIGH_LEVEL_CALL, dest:TMP_251(Token), function:transferFrom, arguments:['owner', 'this', 'TMP_254']  
RETURN TMP_255"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32483.sol-Conversion-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_273(bool) = msg.sender == owner
TMP_274(None) = SOLIDITY_CALL require(bool)(TMP_273)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-Conversion-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= _size + 4)

IRs:
REF_93 -> LENGTH msg.data
TMP_275(uint256) = _size + 4
TMP_276(bool) = REF_93 >= TMP_275
TMP_277(None) = SOLIDITY_CALL require(bool)(TMP_276)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-Conversion-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
web = ContractWeb(0x5F9489D7FfC63ce0bDCD282D14E595A865B259d7)

IRs:
TMP_272 = CONVERT 545666641401511274636224938926813239840257235415 to ContractWeb
web(ContractWeb) := TMP_272(ContractWeb)"];
}
// Function: 32483.sol-Conversion-token1stContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
web.getContractAddress(Token1st)

IRs:
TMP_243(address) = HIGH_LEVEL_CALL, dest:web(ContractWeb), function:getContractAddress, arguments:['Token1st']  
RETURN TMP_243"];
}
// Function: 32483.sol-Conversion-tokenContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
web.getContractAddress(Token)

IRs:
TMP_244(address) = HIGH_LEVEL_CALL, dest:web(ContractWeb), function:getContractAddress, arguments:['Token']  
RETURN TMP_244"];
}
// Function: 32483.sol-Conversion-transferCustomToken(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tkn = Token(_token)

IRs:
TMP_237 = CONVERT _token to Token
tkn(Token) := TMP_237(Token)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tkn.transfer(_to,_value)

IRs:
TMP_238(bool) = HIGH_LEVEL_CALL, dest:tkn(Token), function:transfer, arguments:['_to', '_value']  
RETURN TMP_238"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_239(uint256) = 3 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_239)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 32483.sol-Conversion-transferOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32483.sol-Distribution-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x <= x + y)

IRs:
TMP_278(uint256) = x + y
TMP_279(bool) = x <= TMP_278
TMP_280(None) = SOLIDITY_CALL require(bool)(TMP_279)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x + y

IRs:
TMP_281(uint256) = x + y
RETURN TMP_281"];
}
// Function: 32483.sol-Distribution-allowedSince()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
secondsLive() * 380265185769276972

IRs:
TMP_294(uint256) = INTERNAL_CALL, Distribution.secondsLive()()
TMP_295(uint256) = TMP_294 * 380265185769276972
RETURN TMP_295"];
}
// Function: 32483.sol-Distribution-allowedSinceReadable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
secondsLive() * 380265185769276972 / 1000000000000000000

IRs:
TMP_296(uint256) = INTERNAL_CALL, Distribution.secondsLive()()
TMP_297(uint256) = TMP_296 * 380265185769276972
TMP_298(uint256) = TMP_297 / 1000000000000000000
RETURN TMP_298"];
}
// Function: 32483.sol-Distribution-deposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Token(tokenContract()).allowance(owner,this) > 0)

IRs:
TMP_308(address) = INTERNAL_CALL, Distribution.tokenContract()()
TMP_309 = CONVERT TMP_308 to Token
TMP_310(uint256) = HIGH_LEVEL_CALL, dest:TMP_309(Token), function:allowance, arguments:['owner', 'this']  
TMP_311(bool) = TMP_310 > 0
TMP_312(None) = SOLIDITY_CALL require(bool)(TMP_311)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
Token(tokenContract()).transferFrom(owner,this,Token(tokenContract()).allowance(owner,this))

IRs:
TMP_313(address) = INTERNAL_CALL, Distribution.tokenContract()()
TMP_314 = CONVERT TMP_313 to Token
TMP_315(address) = INTERNAL_CALL, Distribution.tokenContract()()
TMP_316 = CONVERT TMP_315 to Token
TMP_317(uint256) = HIGH_LEVEL_CALL, dest:TMP_316(Token), function:allowance, arguments:['owner', 'this']  
TMP_318(bool) = HIGH_LEVEL_CALL, dest:TMP_314(Token), function:transferFrom, arguments:['owner', 'this', 'TMP_317']  
RETURN TMP_318"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32483.sol-Distribution-makeLive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(liveSince == 0)

IRs:
TMP_305(bool) = liveSince == 0
TMP_306(None) = SOLIDITY_CALL require(bool)(TMP_305)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
liveSince = now

IRs:
liveSince(uint256) := now(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 32483.sol-Distribution-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_353(bool) = msg.sender == owner
TMP_354(None) = SOLIDITY_CALL require(bool)(TMP_353)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-Distribution-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= _size + 4)

IRs:
REF_101 -> LENGTH msg.data
TMP_355(uint256) = _size + 4
TMP_356(bool) = REF_101 >= TMP_355
TMP_357(None) = SOLIDITY_CALL require(bool)(TMP_356)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-Distribution-secondsLive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
liveSince != 0

IRs:
TMP_292(bool) = liveSince != 0
CONDITION TMP_292"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
now - liveSince

IRs:
TMP_293(uint256) = now - liveSince
RETURN TMP_293"];
3[label="Node Type: END_IF 3
"];
}
// Function: 32483.sol-Distribution-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
web = ContractWeb(0x5F9489D7FfC63ce0bDCD282D14E595A865B259d7)

IRs:
TMP_352 = CONVERT 545666641401511274636224938926813239840257235415 to ContractWeb
web(ContractWeb) := TMP_352(ContractWeb)"];
}
// Function: 32483.sol-Distribution-stillAllowed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowedSince() - withdrawn

IRs:
TMP_299(uint256) = INTERNAL_CALL, Distribution.allowedSince()()
TMP_300(uint256) = TMP_299 - withdrawn
RETURN TMP_300"];
}
// Function: 32483.sol-Distribution-stillAllowedReadable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_1 = allowedSince() - withdrawn

IRs:
TMP_301(uint256) = INTERNAL_CALL, Distribution.allowedSince()()
TMP_302(uint256) = TMP_301 - withdrawn
_1(uint256) := TMP_302(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_1 / 1000000000000000000

IRs:
TMP_303(uint256) = _1 / 1000000000000000000
RETURN TMP_303"];
}
// Function: 32483.sol-Distribution-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x >= y)

IRs:
TMP_282(bool) = x >= y
TMP_283(None) = SOLIDITY_CALL require(bool)(TMP_282)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x - y

IRs:
TMP_284(uint256) = x - y
RETURN TMP_284"];
}
// Function: 32483.sol-Distribution-tokenContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
web.getContractAddress(Token)

IRs:
TMP_304(address) = HIGH_LEVEL_CALL, dest:web(ContractWeb), function:getContractAddress, arguments:['Token']  
RETURN TMP_304"];
}
// Function: 32483.sol-Distribution-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(stillAllowed() >= _value && _value > 0 && liveSince != 0)

IRs:
TMP_320(uint256) = INTERNAL_CALL, Distribution.stillAllowed()()
TMP_321(bool) = TMP_320 >= _value
TMP_322(bool) = _value > 0
TMP_323(bool) = TMP_321 && TMP_322
TMP_324(bool) = liveSince != 0
TMP_325(bool) = TMP_323 && TMP_324
TMP_326(None) = SOLIDITY_CALL require(bool)(TMP_325)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
withdrawn = add(withdrawn,_value)

IRs:
TMP_327(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(withdrawn,_value)
withdrawn(uint256) := TMP_327(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
Token(tokenContract()).transfer(_to,_value)

IRs:
TMP_328(address) = INTERNAL_CALL, Distribution.tokenContract()()
TMP_329 = CONVERT TMP_328 to Token
TMP_330(bool) = HIGH_LEVEL_CALL, dest:TMP_329(Token), function:transfer, arguments:['_to', '_value']  
RETURN TMP_330"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_331(uint256) = 2 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_331)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 32483.sol-Distribution-transferCustomToken(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tkn = Token(_token)

IRs:
TMP_285 = CONVERT _token to Token
tkn(Token) := TMP_285(Token)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tkn.transfer(_to,_value)

IRs:
TMP_286(bool) = HIGH_LEVEL_CALL, dest:tkn(Token), function:transfer, arguments:['_to', '_value']  
RETURN TMP_286"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_287(uint256) = 3 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_287)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 32483.sol-Distribution-transferOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32483.sol-Distribution-transferReadable(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(stillAllowed() >= _value * 1000000000000000000 && stillAllowed() != 0 && liveSince != 0)

IRs:
TMP_334(uint256) = INTERNAL_CALL, Distribution.stillAllowed()()
TMP_335(uint256) = _value * 1000000000000000000
TMP_336(bool) = TMP_334 >= TMP_335
TMP_337(uint256) = INTERNAL_CALL, Distribution.stillAllowed()()
TMP_338(bool) = TMP_337 != 0
TMP_339(bool) = TMP_336 && TMP_338
TMP_340(bool) = liveSince != 0
TMP_341(bool) = TMP_339 && TMP_340
TMP_342(None) = SOLIDITY_CALL require(bool)(TMP_341)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
withdrawn = add(withdrawn,_value * 1000000000000000000)

IRs:
TMP_343(uint256) = _value * 1000000000000000000
TMP_344(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(withdrawn,TMP_343)
withdrawn(uint256) := TMP_344(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
Token(tokenContract()).transfer(_to,_value * 1000000000000000000)

IRs:
TMP_345(address) = INTERNAL_CALL, Distribution.tokenContract()()
TMP_346 = CONVERT TMP_345 to Token
TMP_347(uint256) = _value * 1000000000000000000
TMP_348(bool) = HIGH_LEVEL_CALL, dest:TMP_346(Token), function:transfer, arguments:['_to', 'TMP_347']  
RETURN TMP_348"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_349(uint256) = 2 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_349)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 32483.sol-Distribution-withdrawnReadable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
withdrawn / 1000000000000000000

IRs:
TMP_291(uint256) = withdrawn / 1000000000000000000
RETURN TMP_291"];
}
// Function: 32483.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_2(bool) = msg.sender == owner
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-Owned-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 32483.sol-Owned-transferOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32483.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x <= x + y)

IRs:
TMP_18(uint256) = x + y
TMP_19(bool) = x <= TMP_18
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x + y

IRs:
TMP_21(uint256) = x + y
RETURN TMP_21"];
}
// Function: 32483.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x >= y)

IRs:
TMP_22(bool) = x >= y
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x - y

IRs:
TMP_24(uint256) = x - y
RETURN TMP_24"];
}
// Function: 32483.sol-Token-Token()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(this,msg.sender,190 * 1000000 * 1000000000000000000)

IRs:
TMP_143(uint256) = 190 * 1000000
TMP_144(uint256) = TMP_143 * 1000000000000000000
Emit Transfer(this,msg.sender,TMP_144)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(this,msg.sender,190 * 1000000 * 1000000000000000000,empty)

IRs:
TMP_146(uint256) = 190 * 1000000
TMP_147(uint256) = TMP_146 * 1000000000000000000
Emit Transfer(this,msg.sender,TMP_147,empty)"];
}
// Function: 32483.sol-Token-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x <= x + y)

IRs:
TMP_126(uint256) = x + y
TMP_127(bool) = x <= TMP_126
TMP_128(None) = SOLIDITY_CALL require(bool)(TMP_127)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x + y

IRs:
TMP_129(uint256) = x + y
RETURN TMP_129"];
}
// Function: 32483.sol-Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_allowance[_from][_to]

IRs:
REF_58(mapping(address => uint256)) -> _allowance[_from]
REF_59(uint256) -> REF_58[_to]
RETURN REF_59"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 32483.sol-Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_allowance[msg.sender][_spender] = _value

IRs:
REF_80(mapping(address => uint256)) -> _allowance[msg.sender]
REF_81(uint256) -> REF_80[_spender]
REF_81(uint256) (->_allowance) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_227(uint256) = 2 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_227)"];
4->1;
}
// Function: 32483.sol-Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Balances(balancesContract()).get(_account)

IRs:
TMP_139(address) = INTERNAL_CALL, Token.balancesContract()()
TMP_140 = CONVERT TMP_139 to Balances
TMP_141(uint256) = HIGH_LEVEL_CALL, dest:TMP_140(Balances), function:get, arguments:['_account']  
RETURN TMP_141"];
}
// Function: 32483.sol-Token-balancesContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
web.getContractAddress(Balances)

IRs:
TMP_142(address) = HIGH_LEVEL_CALL, dest:web(ContractWeb), function:getContractAddress, arguments:['Balances']  
RETURN TMP_142"];
}
// Function: 32483.sol-Token-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0x0)

IRs:
TMP_123 = CONVERT 0 to address
TMP_124(bool) = _addr == TMP_123
CONDITION TMP_124"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
length > 0

IRs:
TMP_125(bool) = length > 0
CONDITION TMP_125"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 32483.sol-Token-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_232(bool) = msg.sender == owner
TMP_233(None) = SOLIDITY_CALL require(bool)(TMP_232)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-Token-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= _size + 4)

IRs:
REF_82 -> LENGTH msg.data
TMP_234(uint256) = _size + 4
TMP_235(bool) = REF_82 >= TMP_234
TMP_236(None) = SOLIDITY_CALL require(bool)(TMP_235)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32483.sol-Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
web = ContractWeb(0x5F9489D7FfC63ce0bDCD282D14E595A865B259d7)

IRs:
TMP_229 = CONVERT 545666641401511274636224938926813239840257235415 to ContractWeb
web(ContractWeb) := TMP_229(ContractWeb)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = SHC

IRs:
symbol(string) := SHC(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
name = ShineCoin

IRs:
name(string) := ShineCoin(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
totalSupply = 190 * 1000000 * 1000000000000000000

IRs:
TMP_230(uint256) = 190 * 1000000
TMP_231(uint256) = TMP_230 * 1000000000000000000
totalSupply(uint256) := TMP_231(uint256)"];
}
// Function: 32483.sol-Token-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(x >= y)

IRs:
TMP_130(bool) = x >= y
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
x - y

IRs:
TMP_132(uint256) = x - y
RETURN TMP_132"];
}
// Function: 32483.sol-Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_174(bool) = INTERNAL_CALL, CheckIfContract.isContract(address)(_to)
CONDITION TMP_174"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(_to,_value,empty)

IRs:
TMP_175(bool) = INTERNAL_CALL, Token.transferToContract(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_175"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(_to,_value,empty)

IRs:
TMP_176(bool) = INTERNAL_CALL, Token.transferToAddress(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_176"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_177(uint256) = 2 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_177)"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32483.sol-Token-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_169(bool) = INTERNAL_CALL, CheckIfContract.isContract(address)(_to)
CONDITION TMP_169"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_170(bool) = INTERNAL_CALL, Token.transferToContract(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_170"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_171(bool) = INTERNAL_CALL, Token.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_171"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_172(uint256) = 3 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_172)"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32483.sol-Token-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_149(bool) = INTERNAL_CALL, CheckIfContract.isContract(address)(_to)
CONDITION TMP_149"];
1->2[label="True"];
1->9[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(Balances(balancesContract()).get(msg.sender) >= _value)

IRs:
TMP_150(address) = INTERNAL_CALL, Token.balancesContract()()
TMP_151 = CONVERT TMP_150 to Balances
TMP_152(uint256) = HIGH_LEVEL_CALL, dest:TMP_151(Balances), function:get, arguments:['msg.sender']  
TMP_153(bool) = TMP_152 >= _value
TMP_154(None) = SOLIDITY_CALL require(bool)(TMP_153)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Balances(balancesContract()).transfer(msg.sender,_to,_value)

IRs:
TMP_155(address) = INTERNAL_CALL, Token.balancesContract()()
TMP_156 = CONVERT TMP_155 to Balances
TMP_157(bool) = HIGH_LEVEL_CALL, dest:TMP_156(Balances), function:transfer, arguments:['msg.sender', '_to', '_value']  "];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_158 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_158(ContractReceiver)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(receiver.call.value(0)(bytes4(keccak256()(_custom_fallback)),msg.sender,_value,_data))

IRs:
TMP_160(bytes32) = SOLIDITY_CALL keccak256()(_custom_fallback)
TMP_161 = CONVERT TMP_160 to bytes4
TMP_162(bool) = LOW_LEVEL_CALL, dest:receiver, function:call, arguments:['TMP_161', 'msg.sender', '_value', '_data'] value:0 
TMP_163(None) = SOLIDITY_CALL require(bool)(TMP_162)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_166(bool) = INTERNAL_CALL, Token.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_166"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyPayloadSize(4 * 32)

IRs:
TMP_167(uint256) = 4 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_167)"];
11->1;
12[label="Node Type: RETURN 12

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32483.sol-Token-transferCustomToken(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tkn = Token(_token)

IRs:
TMP_133 = CONVERT _token to Token
tkn(Token) := TMP_133(Token)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tkn.transfer(_to,_value)

IRs:
TMP_134(bool) = HIGH_LEVEL_CALL, dest:tkn(Token), function:transfer, arguments:['_to', '_value']  
RETURN TMP_134"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_135(uint256) = 3 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_135)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 32483.sol-Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0 && _allowance[_from][msg.sender] >= _value && Balances(balancesContract()).get(_from) >= _value)

IRs:
TMP_201(bool) = _value > 0
REF_70(mapping(address => uint256)) -> _allowance[_from]
REF_71(uint256) -> REF_70[msg.sender]
TMP_202(bool) = REF_71 >= _value
TMP_203(bool) = TMP_201 && TMP_202
TMP_204(address) = INTERNAL_CALL, Token.balancesContract()()
TMP_205 = CONVERT TMP_204 to Balances
TMP_206(uint256) = HIGH_LEVEL_CALL, dest:TMP_205(Balances), function:get, arguments:['_from']  
TMP_207(bool) = TMP_206 >= _value
TMP_208(bool) = TMP_203 && TMP_207
TMP_209(None) = SOLIDITY_CALL require(bool)(TMP_208)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_allowance[_from][msg.sender] = sub(_allowance[_from][msg.sender],_value)

IRs:
REF_73(mapping(address => uint256)) -> _allowance[_from]
REF_74(uint256) -> REF_73[msg.sender]
REF_75(mapping(address => uint256)) -> _allowance[_from]
REF_76(uint256) -> REF_75[msg.sender]
TMP_210(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(REF_76,_value)
REF_74(uint256) (->_allowance) := TMP_210(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.sender != _to && isContract(_to)

IRs:
TMP_211(bool) = msg.sender != _to
TMP_212(bool) = INTERNAL_CALL, CheckIfContract.isContract(address)(_to)
TMP_213(bool) = TMP_211 && TMP_212
CONDITION TMP_213"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Balances(balancesContract()).transfer(_from,_to,_value)

IRs:
TMP_214(address) = INTERNAL_CALL, Token.balancesContract()()
TMP_215 = CONVERT TMP_214 to Balances
TMP_216(bool) = HIGH_LEVEL_CALL, dest:TMP_215(Balances), function:transfer, arguments:['_from', '_to', '_value']  "];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_217 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_217(ContractReceiver)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
receiver.tokenFallback(_from,_value,empty)

IRs:
TMP_218(bool) = HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['_from', '_value', 'empty']  "];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Balances(balancesContract()).transfer(_from,_to,_value)

IRs:
TMP_219(address) = INTERNAL_CALL, Token.balancesContract()()
TMP_220 = CONVERT TMP_219 to Balances
TMP_221(bool) = HIGH_LEVEL_CALL, dest:TMP_220(Balances), function:transfer, arguments:['_from', '_to', '_value']  "];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Transfer(_from,_to,_value,empty)

IRs:
Emit Transfer(_from,_to,_value,empty)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
true

IRs:
RETURN True"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_224(uint256) = 3 * 32
MODIFIER_CALL, CheckPayloadSize.onlyPayloadSize(uint256)(TMP_224)"];
13->1;
}
// Function: 32483.sol-Token-transferOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32483.sol-Token-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Balances(balancesContract()).get(msg.sender) >= _value)

IRs:
TMP_179(address) = INTERNAL_CALL, Token.balancesContract()()
TMP_180 = CONVERT TMP_179 to Balances
TMP_181(uint256) = HIGH_LEVEL_CALL, dest:TMP_180(Balances), function:get, arguments:['msg.sender']  
TMP_182(bool) = TMP_181 >= _value
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Balances(balancesContract()).transfer(msg.sender,_to,_value)

IRs:
TMP_184(address) = INTERNAL_CALL, Token.balancesContract()()
TMP_185 = CONVERT TMP_184 to Balances
TMP_186(bool) = HIGH_LEVEL_CALL, dest:TMP_185(Balances), function:transfer, arguments:['msg.sender', '_to', '_value']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32483.sol-Token-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Balances(balancesContract()).get(msg.sender) >= _value)

IRs:
TMP_189(address) = INTERNAL_CALL, Token.balancesContract()()
TMP_190 = CONVERT TMP_189 to Balances
TMP_191(uint256) = HIGH_LEVEL_CALL, dest:TMP_190(Balances), function:get, arguments:['msg.sender']  
TMP_192(bool) = TMP_191 >= _value
TMP_193(None) = SOLIDITY_CALL require(bool)(TMP_192)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Balances(balancesContract()).transfer(msg.sender,_to,_value)

IRs:
TMP_194(address) = INTERNAL_CALL, Token.balancesContract()()
TMP_195 = CONVERT TMP_194 to Balances
TMP_196(bool) = HIGH_LEVEL_CALL, dest:TMP_195(Balances), function:transfer, arguments:['msg.sender', '_to', '_value']  "];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_197 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_197(ContractReceiver)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
TMP_198(bool) = HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32483.sol-Token1st-approveSpenderDecimalAmount(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_25(mapping(address => uint256)) -> allowance[msg.sender]
REF_26(uint256) -> REF_25[_spender]
REF_26(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32483.sol-Token1st-getBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balanceOf[_address]

IRs:
REF_11(uint256) -> balanceOf[_address]
RETURN REF_11"];
2[label="Node Type: RETURN 2

EXPRESSION:
amount

IRs:
RETURN amount"];
}
// Function: 32483.sol-Token1st-transferDecimalAmountFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[_from] - tradingBalanceOf[_from][currentTradingSystem] - exchangeBalanceOf[_from][currentExchangeSystem] >= _value)

IRs:
REF_12(uint256) -> balanceOf[_from]
REF_13(mapping(address => uint256)) -> tradingBalanceOf[_from]
REF_14(uint256) -> REF_13[currentTradingSystem]
TMP_39(uint256) = REF_12 - REF_14
REF_15(mapping(address => uint256)) -> exchangeBalanceOf[_from]
REF_16(uint256) -> REF_15[currentExchangeSystem]
TMP_40(uint256) = TMP_39 - REF_16
TMP_41(bool) = TMP_40 >= _value
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_to] + (_value) >= balanceOf[_to])

IRs:
REF_17(uint256) -> balanceOf[_to]
TMP_43(uint256) = REF_17 + _value
REF_18(uint256) -> balanceOf[_to]
TMP_44(bool) = TMP_43 >= REF_18
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_19(mapping(address => uint256)) -> allowance[_from]
REF_20(uint256) -> REF_19[msg.sender]
TMP_46(bool) = _value <= REF_20
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_21(uint256) -> balanceOf[_from]
REF_21(-> balanceOf) = REF_21 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_22(uint256) -> balanceOf[_to]
REF_22(-> balanceOf) = REF_22 + _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_23(mapping(address => uint256)) -> allowance[_from]
REF_24(uint256) -> REF_23[msg.sender]
REF_24(-> allowance) = REF_24 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_to,_from,_value)

IRs:
Emit Transfer(_to,_from,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32483.sol-useContractWeb-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
web = ContractWeb(0x5F9489D7FfC63ce0bDCD282D14E595A865B259d7)

IRs:
TMP_0 = CONVERT 545666641401511274636224938926813239840257235415 to ContractWeb
web(ContractWeb) := TMP_0(ContractWeb)"];
}
}
