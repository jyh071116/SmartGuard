digraph G {
// Function: 32741.sol-SMART-SMART(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
founder = msg.sender

IRs:
founder(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
walletAddress = _walletAddress

IRs:
walletAddress(address) := _walletAddress(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
releaseTime = 1511917200

IRs:
releaseTime(uint256) := 1511917200(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allocateEndTime = releaseTime + 3196800

IRs:
TMP_36(uint256) = releaseTime + 3196800
allocateEndTime(uint256) := TMP_36(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
targetWei = 3900000000000000000000

IRs:
targetWei(uint256) := 3900000000000000000000(uint256)"];
}
// Function: 32741.sol-SMART-allocateTokens(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != founder

IRs:
TMP_71(bool) = msg.sender != founder
CONDITION TMP_71"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_72(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
allocateEndTime < now

IRs:
TMP_73(bool) = allocateEndTime < now
CONDITION TMP_73"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_74(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_owners.length != _values.length

IRs:
REF_60 -> LENGTH _owners
REF_61 -> LENGTH _values
TMP_75(bool) = REF_60 != REF_61
CONDITION TMP_75"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_76(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _owners.length

IRs:
REF_62 -> LENGTH _owners
TMP_77(bool) = i < REF_62
CONDITION TMP_77"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
owner = _owners[i]

IRs:
REF_63(address) -> _owners[i]
owner(address) := REF_63(address)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
value = _values[i]

IRs:
REF_64(uint256) -> _values[i]
value(uint256) := REF_64(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
totalSupply + value <= totalSupply || balances[owner] + value <= balances[owner]

IRs:
TMP_78(uint256) = totalSupply + value
TMP_79(bool) = TMP_78 <= totalSupply
REF_65(uint256) -> balances[owner]
TMP_80(uint256) = REF_65 + value
REF_66(uint256) -> balances[owner]
TMP_81(bool) = TMP_80 <= REF_66
TMP_82(bool) = TMP_79 || TMP_81
CONDITION TMP_82"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
revert()()

IRs:
TMP_83(None) = SOLIDITY_CALL revert()()"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
totalSupply += value

IRs:
totalSupply(uint256) = totalSupply + value"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
balances[owner] += value

IRs:
REF_67(uint256) -> balances[owner]
REF_67(-> balances) = REF_67 + value"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_84(uint256) := i(uint256)
i(uint256) = i + 1"];
21->13;
}
// Function: 32741.sol-SMART-allowance(address,address)
digraph{
}
// Function: 32741.sol-SMART-approve(address,uint256)
digraph{
}
// Function: 32741.sol-SMART-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_54(mapping(address => uint256)) -> allowed[msg.sender]
REF_55(uint256) -> REF_54[_spender]
REF_55(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

IRs:
TMP_61(bytes32) = SOLIDITY_CALL keccak256()(receiveApproval(address,uint256,address,bytes))
TMP_62 = CONVERT TMP_61 to bytes32
TMP_63 = CONVERT TMP_62 to bytes4
TMP_64(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_63', 'msg.sender', '_value', 'this', '_extraData']  
TMP_65 = UnaryType.BANG TMP_64 
CONDITION TMP_65"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_66(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32741.sol-SMART-approveAndCallcode(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_57(mapping(address => uint256)) -> allowed[msg.sender]
REF_58(uint256) -> REF_57[_spender]
REF_58(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(_extraData)

IRs:
TMP_68(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['_extraData']  
TMP_69 = UnaryType.BANG TMP_68 
CONDITION TMP_69"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_70(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32741.sol-SMART-approveProxy(address,address,uint256,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
nonce = nonces[_from]

IRs:
REF_49(uint256) -> nonces[_from]
nonce(uint256) := REF_49(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
hash = keccak256()(_from,_spender,_value,nonce)

IRs:
TMP_54(bytes32) = SOLIDITY_CALL keccak256()(_from,_spender,_value,nonce)
hash(bytes32) := TMP_54(bytes32)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_from != ecrecover(bytes32,uint8,bytes32,bytes32)(hash,_v,_r,_s)

IRs:
TMP_55(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(hash,_v,_r,_s)
TMP_56(bool) = _from != TMP_55
CONDITION TMP_56"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_57(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][_spender] = _value

IRs:
REF_50(mapping(address => uint256)) -> allowed[_from]
REF_51(uint256) -> REF_50[_spender]
REF_51(uint256) (->allowed) := _value(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Approval(_from,_spender,_value)

IRs:
Emit Approval(_from,_spender,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
nonces[_from] = nonce + 1

IRs:
REF_52(uint256) -> nonces[_from]
TMP_59(uint256) = nonce + 1
REF_52(uint256) (->nonces) := TMP_59(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32741.sol-SMART-balanceOf(address)
digraph{
}
// Function: 32741.sol-SMART-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value > 0 && receivedWei < targetWei)

IRs:
TMP_26(bool) = msg.value > 0
TMP_27(bool) = receivedWei < targetWei
TMP_28(bool) = TMP_26 && TMP_27
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now > releaseTime)

IRs:
TMP_30(bool) = now > releaseTime
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
receivedWei += msg.value

IRs:
receivedWei(uint256) = receivedWei + msg.value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
walletAddress.transfer(msg.value)

IRs:
Transfer dest:walletAddress value:msg.value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
NewSale(msg.sender,msg.value)

IRs:
Emit NewSale(msg.sender,msg.value)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(receivedWei >= msg.value)

IRs:
TMP_34(bool) = receivedWei >= msg.value
TMP_35(None) = SOLIDITY_CALL assert(bool)(TMP_34)"];
}
// Function: 32741.sol-SMART-getNonce(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
nonces[_addr]

IRs:
REF_53(uint256) -> nonces[_addr]
RETURN REF_53"];
}
// Function: 32741.sol-SMART-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = SmartMesh Token

IRs:
name(string) := SmartMesh Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = SMART

IRs:
symbol(string) := SMART(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
version = v0.1

IRs:
version(string) := v0.1(string)"];
}
// Function: 32741.sol-SMART-transfer(address,uint256)
digraph{
}
// Function: 32741.sol-SMART-transferFrom(address,address,uint256)
digraph{
}
// Function: 32741.sol-SMART-transferProxy(address,address,uint256,uint256,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] < _feeSmart + _value

IRs:
REF_39(uint256) -> balances[_from]
TMP_37(uint256) = _feeSmart + _value
TMP_38(bool) = REF_39 < TMP_37
CONDITION TMP_38"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_39(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nonce = nonces[_from]

IRs:
REF_40(uint256) -> nonces[_from]
nonce(uint256) := REF_40(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
h = keccak256()(_from,_to,_value,_feeSmart,nonce)

IRs:
TMP_40(bytes32) = SOLIDITY_CALL keccak256()(_from,_to,_value,_feeSmart,nonce)
h(bytes32) := TMP_40(bytes32)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_from != ecrecover(bytes32,uint8,bytes32,bytes32)(h,_v,_r,_s)

IRs:
TMP_41(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(h,_v,_r,_s)
TMP_42(bool) = _from != TMP_41
CONDITION TMP_42"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
revert()()

IRs:
TMP_43(None) = SOLIDITY_CALL revert()()"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
balances[_to] + _value < balances[_to] || balances[msg.sender] + _feeSmart < balances[msg.sender]

IRs:
REF_41(uint256) -> balances[_to]
TMP_44(uint256) = REF_41 + _value
REF_42(uint256) -> balances[_to]
TMP_45(bool) = TMP_44 < REF_42
REF_43(uint256) -> balances[msg.sender]
TMP_46(uint256) = REF_43 + _feeSmart
REF_44(uint256) -> balances[msg.sender]
TMP_47(bool) = TMP_46 < REF_44
TMP_48(bool) = TMP_45 || TMP_47
CONDITION TMP_48"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
revert()()

IRs:
TMP_49(None) = SOLIDITY_CALL revert()()"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
balances[_to] += _value

IRs:
REF_45(uint256) -> balances[_to]
REF_45(-> balances) = REF_45 + _value"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balances[msg.sender] += _feeSmart

IRs:
REF_46(uint256) -> balances[msg.sender]
REF_46(-> balances) = REF_46 + _feeSmart"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Transfer(_from,msg.sender,_feeSmart)

IRs:
Emit Transfer(_from,msg.sender,_feeSmart)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
balances[_from] -= _value + _feeSmart

IRs:
REF_47(uint256) -> balances[_from]
TMP_52(uint256) = _value + _feeSmart
REF_47(-> balances) = REF_47 - TMP_52"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
nonces[_from] = nonce + 1

IRs:
REF_48(uint256) -> nonces[_from]
TMP_53(uint256) = nonce + 1
REF_48(uint256) (->nonces) := TMP_53(uint256)"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 32741.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_17(mapping(address => uint256)) -> allowed[_owner]
REF_18(uint256) -> REF_17[_spender]
RETURN REF_18"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 32741.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_15(mapping(address => uint256)) -> allowed[msg.sender]
REF_16(uint256) -> REF_15[_spender]
REF_16(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32741.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_14(uint256) -> balances[_owner]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 32741.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_0 >= _value
REF_1(uint256) -> balances[_to]
TMP_1(uint256) = REF_1 + _value
REF_2(uint256) -> balances[_to]
TMP_2(bool) = TMP_1 > REF_2
TMP_3(bool) = TMP_0 && TMP_2
CONDITION TMP_3"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_3(-> balances) = REF_3 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_4(uint256) -> balances[_to]
REF_4(-> balances) = REF_4 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32741.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]

IRs:
REF_5(uint256) -> balances[_from]
TMP_5(bool) = REF_5 >= _value
REF_6(mapping(address => uint256)) -> allowed[_from]
REF_7(uint256) -> REF_6[msg.sender]
TMP_6(bool) = REF_7 >= _value
TMP_7(bool) = TMP_5 && TMP_6
REF_8(uint256) -> balances[_to]
TMP_8(uint256) = REF_8 + _value
REF_9(uint256) -> balances[_to]
TMP_9(bool) = TMP_8 > REF_9
TMP_10(bool) = TMP_7 && TMP_9
CONDITION TMP_10"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_10(uint256) -> balances[_to]
REF_10(-> balances) = REF_10 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_11(uint256) -> balances[_from]
REF_11(-> balances) = REF_11 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_12(mapping(address => uint256)) -> allowed[_from]
REF_13(uint256) -> REF_12[msg.sender]
REF_13(-> allowed) = REF_13 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32741.sol-Token-allowance(address,address)
digraph{
}
// Function: 32741.sol-Token-approve(address,uint256)
digraph{
}
// Function: 32741.sol-Token-balanceOf(address)
digraph{
}
// Function: 32741.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 32741.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
