digraph G {
// Function: 32837.sol-Marriage-Marriage(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
}
// Function: 32837.sol-Marriage-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 32837.sol-Marriage-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newOwner

IRs:
TMP_8(bool) = msg.sender == newOwner
CONDITION TMP_8"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 32837.sol-Marriage-areMarried()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(sha3()(marriageStatus) == sha3()(Married))

IRs:
TMP_39(bytes32) = SOLIDITY_CALL sha3()(marriageStatus)
TMP_40(bytes32) = SOLIDITY_CALL sha3()(Married)
TMP_41(bool) = TMP_39 == TMP_40
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32837.sol-Marriage-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 32837.sol-Marriage-createMarriage(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(majorEvents.length == 0)

IRs:
REF_6 -> LENGTH majorEvents
TMP_12(bool) = REF_6 == 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
partner1 = _partner1

IRs:
partner1(string) := _partner1(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
partner2 = _partner2

IRs:
partner2(string) := _partner2(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
marriageDate = now

IRs:
marriageDate(uint256) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
vows = _vows

IRs:
vows(string) := _vows(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
marriageStatus = Married

IRs:
marriageStatus(string) := Married(string)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
majorEvents.push(Event(now,Marriage,vows,url))

IRs:
TMP_14(Marriage.Event) = new Event(now,Marriage,vows,url)
REF_8 -> LENGTH majorEvents
TMP_16(uint256) := REF_8(uint256)
TMP_17(uint256) = TMP_16 + 1
REF_8(uint256) (->majorEvents) := TMP_17(uint256)
REF_9(Marriage.Event) -> majorEvents[TMP_16]
REF_9(Marriage.Event) (->majorEvents) := TMP_14(Marriage.Event)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
MajorEvent(Marrigage,vows,url)

IRs:
Emit MajorEvent(Marrigage,vows,url)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
9->1;
}
// Function: 32837.sol-Marriage-execute(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_dst.call.value(_value)(_data)

IRs:
TMP_10(bool) = LOW_LEVEL_CALL, dest:_dst, function:call, arguments:['_data'] value:_value "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 32837.sol-Marriage-numberOfMajorEvents()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
majorEvents.length

IRs:
REF_4 -> LENGTH majorEvents
RETURN REF_4"];
}
// Function: 32837.sol-Marriage-numberOfMessages()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
messages.length

IRs:
REF_5 -> LENGTH messages
RETURN REF_5"];
}
// Function: 32837.sol-Marriage-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_37(bool) = msg.sender == owner
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32837.sol-Marriage-sendMessage(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
msg.value > 0

IRs:
TMP_29(bool) = msg.value > 0
CONDITION TMP_29"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(this.balance)

IRs:
REF_14(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:owner value:REF_14"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
messages.push(Message(now,nameFrom,text,url,msg.value))

IRs:
TMP_31(Marriage.Message) = new Message(now,nameFrom,text,url,msg.value)
REF_16 -> LENGTH messages
TMP_33(uint256) := REF_16(uint256)
TMP_34(uint256) = TMP_33 + 1
REF_16(uint256) (->messages) := TMP_34(uint256)
REF_17(Marriage.Message) -> messages[TMP_33]
REF_17(Marriage.Message) (->messages) := TMP_31(Marriage.Message)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
MessageSent(nameFrom,text,url,msg.value)

IRs:
Emit MessageSent(nameFrom,text,url,msg.value)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
areMarried()

IRs:
MODIFIER_CALL, Marriage.areMarried()()"];
6->1;
}
// Function: 32837.sol-Marriage-setMajorEvent(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
majorEvents.push(Event(now,name,description,url))

IRs:
TMP_22(Marriage.Event) = new Event(now,name,description,url)
REF_11 -> LENGTH majorEvents
TMP_24(uint256) := REF_11(uint256)
TMP_25(uint256) = TMP_24 + 1
REF_11(uint256) (->majorEvents) := TMP_25(uint256)
REF_12(Marriage.Event) -> majorEvents[TMP_24]
REF_12(Marriage.Event) (->majorEvents) := TMP_22(Marriage.Event)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MajorEvent(name,description,url)

IRs:
Emit MajorEvent(name,description,url)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
areMarried()

IRs:
MODIFIER_CALL, Marriage.areMarried()()"];
4->1;
}
// Function: 32837.sol-Marriage-setStatus(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
marriageStatus = status

IRs:
marriageStatus(string) := status(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setMajorEvent(Changed Status,status,url)

IRs:
INTERNAL_CALL, Marriage.setMajorEvent(string,string,string)(Changed Status,status,url)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32837.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 32837.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newOwner

IRs:
TMP_1(bool) = msg.sender == newOwner
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 32837.sol-Owned-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 32837.sol-Owned-execute(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_dst.call.value(_value)(_data)

IRs:
TMP_3(bool) = LOW_LEVEL_CALL, dest:_dst, function:call, arguments:['_data'] value:_value "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 32837.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
