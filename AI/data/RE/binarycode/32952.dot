digraph G {
// Function: 32952.sol-FinalTestToken2-FinalTestToken2()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_totalSupply = 800000000000000000000000000

IRs:
_totalSupply(uint256) := 800000000000000000000000000(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_owner = msg.sender

IRs:
_owner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = _totalSupply

IRs:
REF_60(uint256) -> balances[msg.sender]
REF_60(uint256) (->balances) := _totalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allocate(0x98592d09bA9B739BF9D563a601CB3F6c3A238475,20)

IRs:
INTERNAL_CALL, FinalTestToken2.allocate(address,uint256)(869755286851344622706436417114672674232554718325,20)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allocate(0xf088394D9AEec53096A18Fb192C98FD90495416C,20)

IRs:
INTERNAL_CALL, FinalTestToken2.allocate(address,uint256)(1373195678152702891296994053169467802582089285996,20)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allocate(0x353c65713fDf8169f14bE74012a59eF9BAB00e9b,5)

IRs:
INTERNAL_CALL, FinalTestToken2.allocate(address,uint256)(303923392443263772782182999464182625404279852699,5)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allocate(0x52B8fA840468e2dd978936B54d0DC83392f4B4aC,35)

IRs:
INTERNAL_CALL, FinalTestToken2.allocate(address,uint256)(472262403318701361508018947449355713437041472684,35)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allocate(0x7DfE12664C21c00B6A3d1cd09444fC2CC9e7f192,20)

IRs:
INTERNAL_CALL, FinalTestToken2.allocate(address,uint256)(719289838464551485030274205680388508835031544210,20)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
maxFee = 100

IRs:
maxFee(uint256) := 100(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
name = Final Test Token

IRs:
name(string) := Final Test Token(string)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
symbol = EQL

IRs:
symbol(string) := EQL(string)"];
}
// Function: 32952.sol-FinalTestToken2-allocate(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bal = _totalSupply.onePercent().mul(percent)

IRs:
TMP_91(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.onePercent(uint256), arguments:['_totalSupply'] 
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_91', 'percent'] 
bal(uint256) := TMP_92(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
withoutFee[_address] = true

IRs:
REF_63(bool) -> withoutFee[_address]
REF_63(bool) (->withoutFee) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
doTransfer(msg.sender,_address,bal,0)

IRs:
INTERNAL_CALL, StandardToken.doTransfer(address,address,uint256,uint256)(msg.sender,_address,bal,0)"];
}
// Function: 32952.sol-FinalTestToken2-allowance(address,address)
digraph{
}
// Function: 32952.sol-FinalTestToken2-approve(address,uint256)
digraph{
}
// Function: 32952.sol-FinalTestToken2-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_65(mapping(address => uint256)) -> allowed[msg.sender]
REF_66(uint256) -> REF_65[_spender]
REF_66(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

IRs:
TMP_97(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_98 = CONVERT TMP_97 to bytes32
TMP_99 = CONVERT TMP_98 to bytes4
TMP_100(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_99', 'msg.sender', '_value', 'this', '_extraData']  
TMP_101 = UnaryType.BANG TMP_100 
CONDITION TMP_101"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_102(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32952.sol-FinalTestToken2-balanceOf(address)
digraph{
}
// Function: 32952.sol-FinalTestToken2-burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
doBurn(_from,_value)

IRs:
TMP_73(bool) = INTERNAL_CALL, StandardToken.doBurn(address,uint256)(_from,_value)
RETURN TMP_73"];
2[label="Node Type: RETURN 2

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32952.sol-FinalTestToken2-doBurn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf(_from) >= _value)

IRs:
TMP_67(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_from)
TMP_68(bool) = TMP_67 >= _value
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_41(uint256) -> balances[_from]
REF_42(uint256) -> balances[_from]
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_42', '_value'] 
REF_41(uint256) (->balances) := TMP_70(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalSupply = _totalSupply.sub(_value)

IRs:
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', '_value'] 
_totalSupply(uint256) := TMP_71(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32952.sol-FinalTestToken2-doTransfer(address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_34(uint256) -> balances[_from]
REF_35(uint256) -> balances[_from]
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_35', '_value'] 
REF_34(uint256) (->balances) := TMP_62(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_37(uint256) -> balances[_to]
REF_38(uint256) -> balances[_to]
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_38', '_value'] 
REF_37(uint256) (->balances) := TMP_63(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! withoutFee[_from]

IRs:
REF_40(bool) -> withoutFee[_from]
TMP_65 = UnaryType.BANG REF_40 
CONDITION TMP_65"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
doBurn(_from,fee)

IRs:
TMP_66(bool) = INTERNAL_CALL, StandardToken.doBurn(address,uint256)(_from,fee)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 32952.sol-FinalTestToken2-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_85(None) = SOLIDITY_CALL revert()()"];
}
// Function: 32952.sol-FinalTestToken2-getFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
onePercentOfValue = _value.onePercent()

IRs:
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.onePercent(uint256), arguments:['_value'] 
onePercentOfValue(uint256) := TMP_57(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
fee = uint256(maxFee).power(decimals)

IRs:
TMP_58 = CONVERT maxFee to uint256
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.power(uint256,uint256), arguments:['TMP_58', 'decimals'] 
fee(uint256) := TMP_59(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
onePercentOfValue >= fee

IRs:
TMP_60(bool) = onePercentOfValue >= fee
CONDITION TMP_60"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
fee

IRs:
RETURN fee"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
onePercentOfValue < fee

IRs:
TMP_61(bool) = onePercentOfValue < fee
CONDITION TMP_61"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
onePercentOfValue

IRs:
RETURN onePercentOfValue"];
8[label="Node Type: END_IF 8
"];
}
// Function: 32952.sol-FinalTestToken2-setWithoutFee(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner == msg.sender)

IRs:
TMP_94(bool) = _owner == msg.sender
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
withoutFee[_address] = _withoutFee

IRs:
REF_64(bool) -> withoutFee[_address]
REF_64(bool) (->withoutFee) := _withoutFee(bool)"];
}
// Function: 32952.sol-FinalTestToken2-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = H1.0

IRs:
version(string) := H1.0(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
feeInfo = Each operation costs 1% of the transaction amount, but not more than 250 tokens.

IRs:
feeInfo(string) := Each operation costs 1% of the transaction amount, but not more than 250 tokens.(string)"];
}
// Function: 32952.sol-FinalTestToken2-totalSupply()
digraph{
}
// Function: 32952.sol-FinalTestToken2-transfer(address,uint256)
digraph{
}
// Function: 32952.sol-FinalTestToken2-transferFrom(address,address,uint256)
digraph{
}
// Function: 32952.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 32952.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 32952.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 32952.sol-SafeMath-onePercent(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
div(a,uint256(100))

IRs:
TMP_13 = CONVERT 100 to uint256
TMP_14(uint256) = INTERNAL_CALL, SafeMath.div(uint256,uint256)(a,TMP_13)
RETURN TMP_14"];
}
// Function: 32952.sol-SafeMath-power(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
mul(a,10 ** b)

IRs:
TMP_15(uint256) = 10 ** b
TMP_16(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(a,TMP_15)
RETURN TMP_16"];
}
// Function: 32952.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 32952.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_28(mapping(address => uint256)) -> allowed[_owner]
REF_29(uint256) -> REF_28[_spender]
RETURN REF_29"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 32952.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_26(mapping(address => uint256)) -> allowed[msg.sender]
REF_27(uint256) -> REF_26[_spender]
REF_27(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32952.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_25(uint256) -> balances[_owner]
RETURN REF_25"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 32952.sol-StandardToken-burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
doBurn(_from,_value)

IRs:
TMP_39(bool) = INTERNAL_CALL, StandardToken.doBurn(address,uint256)(_from,_value)
RETURN TMP_39"];
2[label="Node Type: RETURN 2

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32952.sol-StandardToken-doBurn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf(_from) >= _value)

IRs:
TMP_33(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_from)
TMP_34(bool) = TMP_33 >= _value
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_11(uint256) -> balances[_from]
REF_12(uint256) -> balances[_from]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_12', '_value'] 
REF_11(uint256) (->balances) := TMP_36(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalSupply = _totalSupply.sub(_value)

IRs:
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', '_value'] 
_totalSupply(uint256) := TMP_37(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32952.sol-StandardToken-doTransfer(address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_4(uint256) -> balances[_from]
REF_5(uint256) -> balances[_from]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_28(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_7(uint256) -> balances[_to]
REF_8(uint256) -> balances[_to]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', '_value'] 
REF_7(uint256) (->balances) := TMP_29(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! withoutFee[_from]

IRs:
REF_10(bool) -> withoutFee[_from]
TMP_31 = UnaryType.BANG REF_10 
CONDITION TMP_31"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
doBurn(_from,fee)

IRs:
TMP_32(bool) = INTERNAL_CALL, StandardToken.doBurn(address,uint256)(_from,fee)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 32952.sol-StandardToken-getFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
onePercentOfValue = _value.onePercent()

IRs:
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.onePercent(uint256), arguments:['_value'] 
onePercentOfValue(uint256) := TMP_23(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
fee = uint256(maxFee).power(decimals)

IRs:
TMP_24 = CONVERT maxFee to uint256
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.power(uint256,uint256), arguments:['TMP_24', 'decimals'] 
fee(uint256) := TMP_25(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
onePercentOfValue >= fee

IRs:
TMP_26(bool) = onePercentOfValue >= fee
CONDITION TMP_26"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
fee

IRs:
RETURN fee"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
onePercentOfValue < fee

IRs:
TMP_27(bool) = onePercentOfValue < fee
CONDITION TMP_27"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
onePercentOfValue

IRs:
RETURN onePercentOfValue"];
8[label="Node Type: END_IF 8
"];
}
// Function: 32952.sol-StandardToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
}
// Function: 32952.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
fee = getFee(_value)

IRs:
TMP_17(uint256) = INTERNAL_CALL, StandardToken.getFee(uint256)(_value)
fee(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
balances[msg.sender].add(fee) >= _value && _value > 0

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_0', 'fee'] 
TMP_19(bool) = TMP_18 >= _value
TMP_20(bool) = _value > 0
TMP_21(bool) = TMP_19 && TMP_20
CONDITION TMP_21"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
doTransfer(msg.sender,_to,_value,fee)

IRs:
INTERNAL_CALL, StandardToken.doTransfer(address,address,uint256,uint256)(msg.sender,_to,_value,fee)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32952.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
fee = getFee(_value)

IRs:
TMP_40(uint256) = INTERNAL_CALL, StandardToken.getFee(uint256)(_value)
fee(uint256) := TMP_40(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
valueWithFee = _value

IRs:
valueWithFee(uint256) := _value(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! withoutFee[_from]

IRs:
REF_15(bool) -> withoutFee[_from]
TMP_41 = UnaryType.BANG REF_15 
CONDITION TMP_41"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
valueWithFee = valueWithFee.add(fee)

IRs:
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['valueWithFee', 'fee'] 
valueWithFee(uint256) := TMP_42(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
balances[_from] >= valueWithFee && allowed[_from][msg.sender] >= valueWithFee && _value > 0

IRs:
REF_17(uint256) -> balances[_from]
TMP_43(bool) = REF_17 >= valueWithFee
REF_18(mapping(address => uint256)) -> allowed[_from]
REF_19(uint256) -> REF_18[msg.sender]
TMP_44(bool) = REF_19 >= valueWithFee
TMP_45(bool) = TMP_43 && TMP_44
TMP_46(bool) = _value > 0
TMP_47(bool) = TMP_45 && TMP_46
CONDITION TMP_47"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
doTransfer(_from,_to,_value,fee)

IRs:
INTERNAL_CALL, StandardToken.doTransfer(address,address,uint256,uint256)(_from,_to,_value,fee)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(valueWithFee)

IRs:
REF_20(mapping(address => uint256)) -> allowed[_from]
REF_21(uint256) -> REF_20[msg.sender]
REF_22(mapping(address => uint256)) -> allowed[_from]
REF_23(uint256) -> REF_22[msg.sender]
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_23', 'valueWithFee'] 
REF_21(uint256) (->allowed) := TMP_49(uint256)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
12[label="Node Type: RETURN 12

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32952.sol-Token-allowance(address,address)
digraph{
}
// Function: 32952.sol-Token-approve(address,uint256)
digraph{
}
// Function: 32952.sol-Token-balanceOf(address)
digraph{
}
// Function: 32952.sol-Token-totalSupply()
digraph{
}
// Function: 32952.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 32952.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
