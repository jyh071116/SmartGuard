digraph G {
// Function: 33008.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 33008.sol-ERC223-balanceOf(address)
digraph{
}
// Function: 33008.sol-ERC223-decimals()
digraph{
}
// Function: 33008.sol-ERC223-name()
digraph{
}
// Function: 33008.sol-ERC223-symbol()
digraph{
}
// Function: 33008.sol-ERC223-totalSupply()
digraph{
}
// Function: 33008.sol-ERC223-transfer(address,uint256)
digraph{
}
// Function: 33008.sol-ERC223-transfer(address,uint256,bytes)
digraph{
}
// Function: 33008.sol-ERC223-transfer(address,uint256,bytes,string)
digraph{
}
// Function: 33008.sol-ERC223-transferFrom(address,address,uint256)
digraph{
}
// Function: 33008.sol-GXVCToken-GXVCToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
locked = true

IRs:
locked(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = 160000000 * multiplier

IRs:
TMP_6(uint256) = 160000000 * multiplier
totalSupply(uint256) := TMP_6(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = Genevieve VC

IRs:
name(string) := Genevieve VC(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = GXVC

IRs:
symbol(string) := GXVC(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = 10

IRs:
decimals(uint8) := 10(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
rootAddress = msg.sender

IRs:
rootAddress(address) := msg.sender(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Owner = msg.sender

IRs:
Owner(address) := msg.sender(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[rootAddress] = totalSupply

IRs:
REF_0(uint256) -> balances[rootAddress]
REF_0(uint256) (->balances) := totalSupply(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
allowed[rootAddress][swapperAddress] = totalSupply

IRs:
REF_1(mapping(address => uint256)) -> allowed[rootAddress]
REF_2(uint256) -> REF_1[swapperAddress]
REF_2(uint256) (->allowed) := totalSupply(uint256)"];
}
// Function: 33008.sol-GXVCToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_52(mapping(address => uint256)) -> allowed[_owner]
REF_53(uint256) -> REF_52[_spender]
RETURN REF_53"];
}
// Function: 33008.sol-GXVCToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_50(mapping(address => uint256)) -> allowed[msg.sender]
REF_51(uint256) -> REF_50[_spender]
REF_51(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33008.sol-GXVCToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_49(uint256) -> balances[_owner]
RETURN REF_49"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 33008.sol-GXVCToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
balances[msg.sender] < _value

IRs:
REF_13(uint256) -> balances[msg.sender]
TMP_14(bool) = REF_13 < _value
CONDITION TMP_14"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_15(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_value)

IRs:
REF_14(uint256) -> balances[msg.sender]
REF_15(uint256) -> balances[msg.sender]
TMP_16(uint256) = INTERNAL_CALL, GXVCToken.safeSub(uint256,uint256)(REF_15,_value)
REF_14(uint256) (->balances) := TMP_16(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalSupply = safeSub(totalSupply,_value)

IRs:
TMP_17(uint256) = INTERNAL_CALL, GXVCToken.safeSub(uint256,uint256)(totalSupply,_value)
totalSupply(uint256) := TMP_17(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,0x0,_value,empty)

IRs:
Emit Transfer(msg.sender,0,_value,empty)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, GXVCToken.onlyOwner()()"];
9->1;
}
// Function: 33008.sol-GXVCToken-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Owner = _newOwner

IRs:
Owner(address) := _newOwner(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, GXVCToken.onlyOwner()()"];
3->1;
}
// Function: 33008.sol-GXVCToken-changeRoot(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[rootAddress][swapperAddress] = 0

IRs:
REF_3(mapping(address => uint256)) -> allowed[rootAddress]
REF_4(uint256) -> REF_3[swapperAddress]
REF_4(uint256) (->allowed) := 0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rootAddress = _newrootAddress

IRs:
rootAddress(address) := _newrootAddress(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[_newrootAddress][swapperAddress] = totalSupply

IRs:
REF_5(mapping(address => uint256)) -> allowed[_newrootAddress]
REF_6(uint256) -> REF_5[swapperAddress]
REF_6(uint256) (->allowed) := totalSupply(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyRoot()

IRs:
MODIFIER_CALL, GXVCToken.onlyRoot()()"];
5->1;
}
// Function: 33008.sol-GXVCToken-changeSwapperAdd(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[rootAddress][swapperAddress] = 0

IRs:
REF_7(mapping(address => uint256)) -> allowed[rootAddress]
REF_8(uint256) -> REF_7[swapperAddress]
REF_8(uint256) (->allowed) := 0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
swapperAddress = _newSwapper

IRs:
swapperAddress(address) := _newSwapper(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[rootAddress][_newSwapper] = totalSupply

IRs:
REF_9(mapping(address => uint256)) -> allowed[rootAddress]
REF_10(uint256) -> REF_9[_newSwapper]
REF_10(uint256) (->allowed) := totalSupply(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, GXVCToken.onlyOwner()()"];
5->1;
}
// Function: 33008.sol-GXVCToken-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
decimals

IRs:
RETURN decimals"];
2[label="Node Type: RETURN 2

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 33008.sol-GXVCToken-freeze(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
freezed[_address] = true

IRs:
REF_11(bool) -> freezed[_address]
REF_11(bool) (->freezed) := True(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, GXVCToken.onlyOwner()()"];
3->1;
}
// Function: 33008.sol-GXVCToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_43(bool) = length > 0
RETURN TMP_43"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 33008.sol-GXVCToken-isFreezed(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
freezed[_address]

IRs:
REF_16(bool) -> freezed[_address]
RETURN REF_16"];
}
// Function: 33008.sol-GXVCToken-isLocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
locked

IRs:
RETURN locked"];
}
// Function: 33008.sol-GXVCToken-isUnfreezed(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
freezed[msg.sender] || freezed[_to]

IRs:
REF_54(bool) -> freezed[msg.sender]
REF_55(bool) -> freezed[_to]
TMP_78(bool) = REF_54 || REF_55
CONDITION TMP_78"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_79(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 33008.sol-GXVCToken-isUnlocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
locked && msg.sender != rootAddress && msg.sender != Owner

IRs:
TMP_73(bool) = msg.sender != rootAddress
TMP_74(bool) = locked && TMP_73
TMP_75(bool) = msg.sender != Owner
TMP_76(bool) = TMP_74 && TMP_75
CONDITION TMP_76"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_77(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 33008.sol-GXVCToken-lock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
locked = true

IRs:
locked(bool) := True(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, GXVCToken.onlyOwner()()"];
3->1;
}
// Function: 33008.sol-GXVCToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name

IRs:
RETURN name"];
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 33008.sol-GXVCToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != rootAddress && msg.sender != Owner

IRs:
TMP_67(bool) = msg.sender != rootAddress
TMP_68(bool) = msg.sender != Owner
TMP_69(bool) = TMP_67 && TMP_68
CONDITION TMP_69"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_70(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 33008.sol-GXVCToken-onlyRoot()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != rootAddress

IRs:
TMP_71(bool) = msg.sender != rootAddress
CONDITION TMP_71"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_72(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 33008.sol-GXVCToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x + y) >= x)

IRs:
TMP_0(uint256) = x + y
z(uint256) := TMP_0(uint256)
TMP_1(bool) = z >= x
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 33008.sol-GXVCToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x - y) <= x)

IRs:
TMP_3(uint256) = x - y
z(uint256) := TMP_3(uint256)
TMP_4(bool) = z <= x
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 33008.sol-GXVCToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = v0.2

IRs:
version(string) := v0.2(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
multiplier = 10000000000

IRs:
multiplier(uint256) := 10000000000(uint256)"];
}
// Function: 33008.sol-GXVCToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol

IRs:
RETURN symbol"];
2[label="Node Type: RETURN 2

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 33008.sol-GXVCToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 33008.sol-GXVCToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_38(bool) = INTERNAL_CALL, GXVCToken.isContract(address)(_to)
CONDITION TMP_38"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(_to,_value,empty)

IRs:
TMP_39(bool) = INTERNAL_CALL, GXVCToken.transferToContract(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_39"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(_to,_value,empty)

IRs:
TMP_40(bool) = INTERNAL_CALL, GXVCToken.transferToAddress(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_40"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isUnlocked()

IRs:
MODIFIER_CALL, GXVCToken.isUnlocked()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isUnfreezed(_to)

IRs:
MODIFIER_CALL, GXVCToken.isUnfreezed(address)(_to)"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33008.sol-GXVCToken-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_33(bool) = INTERNAL_CALL, GXVCToken.isContract(address)(_to)
CONDITION TMP_33"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_34(bool) = INTERNAL_CALL, GXVCToken.transferToContract(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_34"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_35(bool) = INTERNAL_CALL, GXVCToken.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_35"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isUnlocked()

IRs:
MODIFIER_CALL, GXVCToken.isUnlocked()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isUnfreezed(_to)

IRs:
MODIFIER_CALL, GXVCToken.isUnfreezed(address)(_to)"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33008.sol-GXVCToken-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_20(bool) = INTERNAL_CALL, GXVCToken.isContract(address)(_to)
CONDITION TMP_20"];
1->2[label="True"];
1->11[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
balances[msg.sender] < _value

IRs:
REF_17(uint256) -> balances[msg.sender]
TMP_21(bool) = REF_17 < _value
CONDITION TMP_21"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_value)

IRs:
REF_18(uint256) -> balances[msg.sender]
REF_19(uint256) -> balances[msg.sender]
TMP_22(uint256) = INTERNAL_CALL, GXVCToken.safeSub(uint256,uint256)(REF_19,_value)
REF_18(uint256) (->balances) := TMP_22(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_20(uint256) -> balances[_to]
REF_21(uint256) -> balances[_to]
TMP_23(uint256) = INTERNAL_CALL, GXVCToken.safeAdd(uint256,uint256)(REF_21,_value)
REF_20(uint256) (->balances) := TMP_23(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_24 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_24(ContractReceiver)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
receiver.call.value(0)(bytes4(sha3()(_custom_fallback)),msg.sender,_value,_data)

IRs:
TMP_26(bytes32) = SOLIDITY_CALL sha3()(_custom_fallback)
TMP_27 = CONVERT TMP_26 to bytes4
TMP_28(bool) = LOW_LEVEL_CALL, dest:receiver, function:call, arguments:['TMP_27', 'msg.sender', '_value', '_data'] value:0 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_30(bool) = INTERNAL_CALL, GXVCToken.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_30"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isUnlocked()

IRs:
MODIFIER_CALL, GXVCToken.isUnlocked()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isUnfreezed(_to)

IRs:
MODIFIER_CALL, GXVCToken.isUnfreezed(address)(_to)"];
14->1;
15[label="Node Type: RETURN 15

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33008.sol-GXVCToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
locked && msg.sender != swapperAddress

IRs:
TMP_54(bool) = msg.sender != swapperAddress
TMP_55(bool) = locked && TMP_54
CONDITION TMP_55"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
freezed[_from] || freezed[_to]

IRs:
REF_35(bool) -> freezed[_from]
REF_36(bool) -> freezed[_to]
TMP_56(bool) = REF_35 || REF_36
CONDITION TMP_56"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
balances[_from] < _value

IRs:
REF_37(uint256) -> balances[_from]
TMP_57(bool) = REF_37 < _value
CONDITION TMP_57"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_value > allowed[_from][msg.sender]

IRs:
REF_38(mapping(address => uint256)) -> allowed[_from]
REF_39(uint256) -> REF_38[msg.sender]
TMP_58(bool) = _value > REF_39
CONDITION TMP_58"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
false

IRs:
RETURN False"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
balances[_from] = safeSub(balances[_from],_value)

IRs:
REF_40(uint256) -> balances[_from]
REF_41(uint256) -> balances[_from]
TMP_59(uint256) = INTERNAL_CALL, GXVCToken.safeSub(uint256,uint256)(REF_41,_value)
REF_40(uint256) (->balances) := TMP_59(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_42(uint256) -> balances[_to]
REF_43(uint256) -> balances[_to]
TMP_60(uint256) = INTERNAL_CALL, GXVCToken.safeAdd(uint256,uint256)(REF_43,_value)
REF_42(uint256) (->balances) := TMP_60(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value)

IRs:
REF_44(mapping(address => uint256)) -> allowed[_from]
REF_45(uint256) -> REF_44[msg.sender]
REF_46(mapping(address => uint256)) -> allowed[_from]
REF_47(uint256) -> REF_46[msg.sender]
TMP_61(uint256) = INTERNAL_CALL, GXVCToken.safeSub(uint256,uint256)(REF_47,_value)
REF_45(uint256) (->allowed) := TMP_61(uint256)"];
15->16;
16[label="Node Type: NEW VARIABLE 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
isContract(_to)

IRs:
TMP_62(bool) = INTERNAL_CALL, GXVCToken.isContract(address)(_to)
CONDITION TMP_62"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_63 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_63(ContractReceiver)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
receiver.tokenFallback(_from,_value,empty)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['_from', '_value', 'empty']  "];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
Transfer(_from,_to,_value,empty)

IRs:
Emit Transfer(_from,_to,_value,empty)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33008.sol-GXVCToken-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] < _value

IRs:
REF_24(uint256) -> balances[msg.sender]
TMP_44(bool) = REF_24 < _value
CONDITION TMP_44"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_value)

IRs:
REF_25(uint256) -> balances[msg.sender]
REF_26(uint256) -> balances[msg.sender]
TMP_45(uint256) = INTERNAL_CALL, GXVCToken.safeSub(uint256,uint256)(REF_26,_value)
REF_25(uint256) (->balances) := TMP_45(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_27(uint256) -> balances[_to]
REF_28(uint256) -> balances[_to]
TMP_46(uint256) = INTERNAL_CALL, GXVCToken.safeAdd(uint256,uint256)(REF_28,_value)
REF_27(uint256) (->balances) := TMP_46(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33008.sol-GXVCToken-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] < _value

IRs:
REF_29(uint256) -> balances[msg.sender]
TMP_48(bool) = REF_29 < _value
CONDITION TMP_48"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_value)

IRs:
REF_30(uint256) -> balances[msg.sender]
REF_31(uint256) -> balances[msg.sender]
TMP_49(uint256) = INTERNAL_CALL, GXVCToken.safeSub(uint256,uint256)(REF_31,_value)
REF_30(uint256) (->balances) := TMP_49(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_32(uint256) -> balances[_to]
REF_33(uint256) -> balances[_to]
TMP_50(uint256) = INTERNAL_CALL, GXVCToken.safeAdd(uint256,uint256)(REF_33,_value)
REF_32(uint256) (->balances) := TMP_50(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_51 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_51(ContractReceiver)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33008.sol-GXVCToken-unfreeze(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
freezed[_address] = false

IRs:
REF_12(bool) -> freezed[_address]
REF_12(bool) (->freezed) := False(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, GXVCToken.onlyOwner()()"];
3->1;
}
// Function: 33008.sol-GXVCToken-unlock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
locked = false

IRs:
locked(bool) := False(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, GXVCToken.onlyOwner()()"];
3->1;
}
}
