digraph G {
// Function: 33518.sol-Controller-Controller(address,address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
PowerEnabled(_powerAddr,_pullAddr,_nutzAddr,_storageAddr)

IRs:
INTERNAL_CALL, PowerEnabled.PowerEnabled(address,address,address,address)(_powerAddr,_pullAddr,_nutzAddr,_storageAddr)"];
}
// Function: 33518.sol-Controller-Governable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admins.length = 1

IRs:
REF_459 -> LENGTH admins
REF_459(uint256) (->admins) := 1(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admins[0] = msg.sender

IRs:
REF_460(address) -> admins[0]
REF_460(address) (->admins) := msg.sender(address)"];
}
// Function: 33518.sol-Controller-MarketEnabled(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pullAddr = _pullAddr

IRs:
pullAddr(address) := _pullAddr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
NutzEnabled(_nutzAddr,_storageAddr)

IRs:
INTERNAL_CALL, NutzEnabled.NutzEnabled(address,address)(_nutzAddr,_storageAddr)"];
2->1;
}
// Function: 33518.sol-Controller-NutzEnabled(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nutzAddr = _nutzAddr

IRs:
nutzAddr(address) := _nutzAddr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
StorageEnabled(_storageAddr)

IRs:
INTERNAL_CALL, StorageEnabled.StorageEnabled(address)(_storageAddr)"];
2->1;
}
// Function: 33518.sol-Controller-PowerEnabled(address,address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
powerAddr = _powerAddr

IRs:
powerAddr(address) := _powerAddr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MarketEnabled(_pullAddr,_nutzAddr,_storageAddr)

IRs:
INTERNAL_CALL, MarketEnabled.MarketEnabled(address,address,address)(_pullAddr,_nutzAddr,_storageAddr)"];
2->1;
}
// Function: 33518.sol-Controller-StorageEnabled(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
storageAddr = _storageAddr

IRs:
storageAddr(address) := _storageAddr(address)"];
}
// Function: 33518.sol-Controller-_setActiveSupply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,activeSupply,_newActiveSupply)

IRs:
TMP_1173 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_1173(Storage), function:setUInt, arguments:['Nutz', 'activeSupply', '_newActiveSupply']  "];
}
// Function: 33518.sol-Controller-_setAuthorizedPower(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Power,authorizedPower,_newAuthorizedPower)

IRs:
TMP_1193 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_1193(Storage), function:setUInt, arguments:['Power', 'authorizedPower', '_newAuthorizedPower']  "];
}
// Function: 33518.sol-Controller-_setBabzBalanceOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setBal(Nutz,_owner,_newValue)

IRs:
TMP_1169 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_1169(Storage), function:setBal, arguments:['Nutz', '_owner', '_newValue']  "];
}
// Function: 33518.sol-Controller-_setBurnPool(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,burnPool,_newBurnPool)

IRs:
TMP_1177 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_1177(Storage), function:setUInt, arguments:['Nutz', 'burnPool', '_newBurnPool']  "];
}
// Function: 33518.sol-Controller-_setDownRequest(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
result = uint64(start) + (left << 64) + (total << (96 + 64))

IRs:
TMP_1203 = CONVERT start to uint64
TMP_1204(uint256) = left << 64
TMP_1205(uint64) = TMP_1203 + TMP_1204
TMP_1206(uint256) = 96 + 64
TMP_1207(uint256) = total << TMP_1206
TMP_1208(uint64) = TMP_1205 + TMP_1207
result(uint256) := TMP_1208(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Storage(storageAddr).setBal(PowerDown,_holder,result)

IRs:
TMP_1209 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_1209(Storage), function:setBal, arguments:['PowerDown', '_holder', 'result']  "];
}
// Function: 33518.sol-Controller-_setOutstandingPower(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Power,outstandingPower,_newOutstandingPower)

IRs:
TMP_1189 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_1189(Storage), function:setUInt, arguments:['Power', 'outstandingPower', '_newOutstandingPower']  "];
}
// Function: 33518.sol-Controller-_setPowerBalanceOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setBal(Power,_owner,_newValue)

IRs:
TMP_1185 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_1185(Storage), function:setBal, arguments:['Power', '_owner', '_newValue']  "];
}
// Function: 33518.sol-Controller-_setPowerPool(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,powerPool,_newPowerPool)

IRs:
TMP_1181 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_1181(Storage), function:setUInt, arguments:['Nutz', 'powerPool', '_newPowerPool']  "];
}
// Function: 33518.sol-Controller-_slashPower(address,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
previouslyOutstanding = outstandingPower()

IRs:
TMP_940(uint256) = INTERNAL_CALL, StorageEnabled.outstandingPower()()
previouslyOutstanding(uint256) := TMP_940(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_setOutstandingPower(previouslyOutstanding.sub(_value))

IRs:
TMP_941(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['previouslyOutstanding', '_value'] 
INTERNAL_CALL, StorageEnabled._setOutstandingPower(uint256)(TMP_941)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
powPool = powerPool()

IRs:
TMP_943(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
powPool(uint256) := TMP_943(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
slashingBabz = _value.mul(powPool).div(previouslyOutstanding)

IRs:
TMP_944(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_value', 'powPool'] 
TMP_945(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_944', 'previouslyOutstanding'] 
slashingBabz(uint256) := TMP_945(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_setPowerPool(powPool.sub(slashingBabz))

IRs:
TMP_946(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['powPool', 'slashingBabz'] 
INTERNAL_CALL, StorageEnabled._setPowerPool(uint256)(TMP_946)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Power(powerAddr).slashPower(_holder,_value,_data)

IRs:
TMP_948 = CONVERT powerAddr to Power
HIGH_LEVEL_CALL, dest:TMP_948(Power), function:slashPower, arguments:['_holder', '_value', '_data']  "];
}
// Function: 33518.sol-Controller-_transfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(this))

IRs:
TMP_1144 = CONVERT this to address
TMP_1145(bool) = _to != TMP_1144
TMP_1146(None) = SOLIDITY_CALL require(bool)(TMP_1145)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_1147 = CONVERT 0 to address
TMP_1148(bool) = _to != TMP_1147
TMP_1149(None) = SOLIDITY_CALL require(bool)(TMP_1148)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_amountBabz > 0)

IRs:
TMP_1150(bool) = _amountBabz > 0
TMP_1151(None) = SOLIDITY_CALL require(bool)(TMP_1150)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_from != _to)

IRs:
TMP_1152(bool) = _from != _to
TMP_1153(None) = SOLIDITY_CALL require(bool)(TMP_1152)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_setBabzBalanceOf(_from,babzBalanceOf(_from).sub(_amountBabz))

IRs:
TMP_1154(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_from)
TMP_1155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_1154', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_from,TMP_1155)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_setBabzBalanceOf(_to,babzBalanceOf(_to).add(_amountBabz))

IRs:
TMP_1157(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_to)
TMP_1158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_1157', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_to,TMP_1158)"];
}
// Function: 33518.sol-Controller-_vestedDown(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_now <= _start

IRs:
TMP_999(bool) = _now <= _start
CONDITION TMP_999"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
timePassed = _now.sub(_start)

IRs:
TMP_1000(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_now', '_start'] 
timePassed(uint256) := TMP_1000(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
timePassed > downtime

IRs:
TMP_1001(bool) = timePassed > downtime
CONDITION TMP_1001"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
timePassed = downtime

IRs:
timePassed(uint256) := downtime(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
amountVested = _total.mul(timePassed).div(downtime)

IRs:
TMP_1002(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_total', 'timePassed'] 
TMP_1003(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1002', 'downtime'] 
amountVested(uint256) := TMP_1003(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
amountFrozen = _total.sub(amountVested)

IRs:
TMP_1004(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_total', 'amountVested'] 
amountFrozen(uint256) := TMP_1004(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_left <= amountFrozen

IRs:
TMP_1005(bool) = _left <= amountFrozen
CONDITION TMP_1005"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
0

IRs:
RETURN 0"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
_left.sub(amountFrozen)

IRs:
TMP_1006(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_left', 'amountFrozen'] 
RETURN TMP_1006"];
}
// Function: 33518.sol-Controller-activeSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,activeSupply)

IRs:
TMP_1171 = CONVERT storageAddr to Storage
TMP_1172(uint256) = HIGH_LEVEL_CALL, dest:TMP_1171(Storage), function:getUInt, arguments:['Nutz', 'activeSupply']  
RETURN TMP_1172"];
}
// Function: 33518.sol-Controller-addAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < admins.length

IRs:
REF_461 -> LENGTH admins
TMP_1215(bool) = i < REF_461
CONDITION TMP_1215"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_admin != admins[i])

IRs:
REF_462(address) -> admins[i]
TMP_1216(bool) = _admin != REF_462
TMP_1217(None) = SOLIDITY_CALL require(bool)(TMP_1216)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_1218(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(admins.length < 10)

IRs:
REF_463 -> LENGTH admins
TMP_1219(bool) = REF_463 < 10
TMP_1220(None) = SOLIDITY_CALL require(bool)(TMP_1219)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
admins[admins.length ++] = _admin

IRs:
REF_464 -> LENGTH admins
TMP_1221(uint256) := REF_464(uint256)
REF_464(-> admins) = REF_464 + 1
REF_465(address) -> admins[TMP_1221]
REF_465(address) (->admins) := _admin(address)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
9->3;
}
// Function: 33518.sol-Controller-allocateEther(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amountWei > 0)

IRs:
TMP_1121(bool) = _amountWei > 0
TMP_1122(None) = SOLIDITY_CALL require(bool)(TMP_1121)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(nutzAddr.balance.sub(_amountWei) >= activeSupply().mul(1000000).div(salePrice))

IRs:
TMP_1123(uint256) = SOLIDITY_CALL balance(address)(nutzAddr)
TMP_1124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_1123', '_amountWei'] 
TMP_1125(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_1126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_1125', '1000000'] 
TMP_1127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1126', 'salePrice'] 
TMP_1128(bool) = TMP_1124 >= TMP_1127
TMP_1129(None) = SOLIDITY_CALL require(bool)(TMP_1128)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Nutz(nutzAddr).asyncSend(pullAddr,_beneficiary,_amountWei)

IRs:
TMP_1130 = CONVERT nutzAddr to Nutz
HIGH_LEVEL_CALL, dest:TMP_1130(Nutz), function:asyncSend, arguments:['pullAddr', '_beneficiary', '_amountWei']  "];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
4->1;
}
// Function: 33518.sol-Controller-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_432(mapping(address => uint256)) -> allowed[_owner]
REF_433(uint256) -> REF_432[_spender]
RETURN REF_433"];
}
// Function: 33518.sol-Controller-approve(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != _spender)

IRs:
TMP_1140(bool) = _owner != _spender
TMP_1141(None) = SOLIDITY_CALL require(bool)(TMP_1140)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_owner][_spender] = _amountBabz

IRs:
REF_434(mapping(address => uint256)) -> allowed[_owner]
REF_435(uint256) -> REF_434[_spender]
REF_435(uint256) (->allowed) := _amountBabz(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 33518.sol-Controller-authorizedPower()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Power,authorizedPower)

IRs:
TMP_1191 = CONVERT storageAddr to Storage
TMP_1192(uint256) = HIGH_LEVEL_CALL, dest:TMP_1191(Storage), function:getUInt, arguments:['Power', 'authorizedPower']  
RETURN TMP_1192"];
}
// Function: 33518.sol-Controller-babzBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getBal(Nutz,_owner)

IRs:
TMP_1167 = CONVERT storageAddr to Storage
TMP_1168(uint256) = HIGH_LEVEL_CALL, dest:TMP_1167(Storage), function:getBal, arguments:['Nutz', '_owner']  
RETURN TMP_1168"];
}
// Function: 33518.sol-Controller-burnPool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,burnPool)

IRs:
TMP_1175 = CONVERT storageAddr to Storage
TMP_1176(uint256) = HIGH_LEVEL_CALL, dest:TMP_1175(Storage), function:getUInt, arguments:['Nutz', 'burnPool']  
RETURN TMP_1176"];
}
// Function: 33518.sol-Controller-ceiling()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
purchasePrice

IRs:
RETURN purchasePrice"];
}
// Function: 33518.sol-Controller-changeDailyLimit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
PullPayment(pullAddr).changeDailyLimit(_dailyLimit)

IRs:
TMP_1236 = CONVERT pullAddr to PullPayment
HIGH_LEVEL_CALL, dest:TMP_1236(PullPayment), function:changeDailyLimit, arguments:['_dailyLimit']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
2->1;
}
// Function: 33518.sol-Controller-completeSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
activeSupply().add(powerPool()).add(burnPool())

IRs:
TMP_1135(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_1136(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
TMP_1137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_1135', 'TMP_1136'] 
TMP_1138(uint256) = INTERNAL_CALL, StorageEnabled.burnPool()()
TMP_1139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_1137', 'TMP_1138'] 
RETURN TMP_1139"];
}
// Function: 33518.sol-Controller-createDownRequest(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amountPower >= authorizedPower().div(MIN_SHARE_OF_POWER))

IRs:
TMP_1007(uint256) = INTERNAL_CALL, StorageEnabled.authorizedPower()()
TMP_1008(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1007', 'MIN_SHARE_OF_POWER'] 
TMP_1009(bool) = _amountPower >= TMP_1008
TMP_1010(None) = SOLIDITY_CALL require(bool)(TMP_1009)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_setPowerBalanceOf(_owner,powerBalanceOf(_owner).sub(_amountPower))

IRs:
TMP_1011(uint256) = INTERNAL_CALL, StorageEnabled.powerBalanceOf(address)(_owner)
TMP_1012(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_1011', '_amountPower'] 
INTERNAL_CALL, StorageEnabled._setPowerBalanceOf(address,uint256)(_owner,TMP_1012)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
left = downs(_owner)

IRs:
TUPLE_5(uint256,uint256,uint256) = INTERNAL_CALL, StorageEnabled.downs(address)(_owner)
left(uint256) := TUPLE_5([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f437dbff580>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f437dbff670>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f437dbff760>])"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
total = _amountPower.add(left)

IRs:
TMP_1014(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_amountPower', 'left'] 
total(uint256) := TMP_1014(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_setDownRequest(_owner,total,total,now)

IRs:
INTERNAL_CALL, StorageEnabled._setDownRequest(address,uint256,uint256,uint256)(_owner,total,total,now)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyPower()

IRs:
MODIFIER_CALL, PowerEnabled.onlyPower()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
7->1;
}
// Function: 33518.sol-Controller-dilutePower(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
authorizedPow = authorizedPower()

IRs:
TMP_925(uint256) = INTERNAL_CALL, StorageEnabled.authorizedPower()()
authorizedPow(uint256) := TMP_925(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalBabz = completeSupply()

IRs:
TMP_926(uint256) = INTERNAL_CALL, NutzEnabled.completeSupply()()
totalBabz(uint256) := TMP_926(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
authorizedPow == 0

IRs:
TMP_927(bool) = authorizedPow == 0
CONDITION TMP_927"];
3->9[label="True"];
3->5[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_setAuthorizedPower(authorizedPow.mul(totalBabz.add(_amountBabz)).div(totalBabz))

IRs:
TMP_928(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalBabz', '_amountBabz'] 
TMP_929(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['authorizedPow', 'TMP_928'] 
TMP_930(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_929', 'totalBabz'] 
INTERNAL_CALL, StorageEnabled._setAuthorizedPower(uint256)(TMP_930)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_setBurnPool(burnPool().add(_amountBabz))

IRs:
TMP_932(uint256) = INTERNAL_CALL, StorageEnabled.burnPool()()
TMP_933(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_932', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBurnPool(uint256)(TMP_933)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
8->1;
9[label="Node Type: IF 9

EXPRESSION:
(_amountPower > 0)

IRs:
TMP_936(bool) = _amountPower > 0
CONDITION TMP_936"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_setAuthorizedPower(_amountPower)

IRs:
INTERNAL_CALL, StorageEnabled._setAuthorizedPower(uint256)(_amountPower)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_setAuthorizedPower(_amountBabz.add(totalBabz))

IRs:
TMP_938(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_amountBabz', 'totalBabz'] 
INTERNAL_CALL, StorageEnabled._setAuthorizedPower(uint256)(TMP_938)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->6;
}
// Function: 33518.sol-Controller-downTick(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
(total,left,start) = downs(_holder)

IRs:
TUPLE_6(uint256,uint256,uint256) = INTERNAL_CALL, StorageEnabled.downs(address)(_holder)
total(uint256)= UNPACK TUPLE_6 index: 0 
left(uint256)= UNPACK TUPLE_6 index: 1 
start(uint256)= UNPACK TUPLE_6 index: 2 "];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
amountPow = _vestedDown(total,left,start,_now)

IRs:
TMP_1018(uint256) = INTERNAL_CALL, PowerEnabled._vestedDown(uint256,uint256,uint256,uint256)(total,left,start,_now)
amountPow(uint256) := TMP_1018(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
minStep = total.div(10)

IRs:
TMP_1019(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['total', '10'] 
minStep(uint256) := TMP_1019(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(left <= minStep || minStep <= amountPow)

IRs:
TMP_1020(bool) = left <= minStep
TMP_1021(bool) = minStep <= amountPow
TMP_1022(bool) = TMP_1020 || TMP_1021
TMP_1023(None) = SOLIDITY_CALL require(bool)(TMP_1022)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
amountBabz = amountPow.mul(completeSupply()).div(authorizedPower())

IRs:
TMP_1024(uint256) = INTERNAL_CALL, NutzEnabled.completeSupply()()
TMP_1025(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amountPow', 'TMP_1024'] 
TMP_1026(uint256) = INTERNAL_CALL, StorageEnabled.authorizedPower()()
TMP_1027(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1025', 'TMP_1026'] 
amountBabz(uint256) := TMP_1027(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_setOutstandingPower(outstandingPower().sub(amountPow))

IRs:
TMP_1028(uint256) = INTERNAL_CALL, StorageEnabled.outstandingPower()()
TMP_1029(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_1028', 'amountPow'] 
INTERNAL_CALL, StorageEnabled._setOutstandingPower(uint256)(TMP_1029)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
left = left.sub(amountPow)

IRs:
TMP_1031(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['left', 'amountPow'] 
left(uint256) := TMP_1031(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_setPowerPool(powerPool().sub(amountBabz))

IRs:
TMP_1032(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
TMP_1033(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_1032', 'amountBabz'] 
INTERNAL_CALL, StorageEnabled._setPowerPool(uint256)(TMP_1033)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_setActiveSupply(activeSupply().add(amountBabz))

IRs:
TMP_1035(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_1036(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_1035', 'amountBabz'] 
INTERNAL_CALL, StorageEnabled._setActiveSupply(uint256)(TMP_1036)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_setBabzBalanceOf(_holder,babzBalanceOf(_holder).add(amountBabz))

IRs:
TMP_1038(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_holder)
TMP_1039(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_1038', 'amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_holder,TMP_1039)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
left == 0

IRs:
TMP_1041(bool) = left == 0
CONDITION TMP_1041"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
start = 0

IRs:
start(uint256) := 0(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
total = 0

IRs:
total(uint256) := 0(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_setDownRequest(_holder,total,left,start)

IRs:
INTERNAL_CALL, StorageEnabled._setDownRequest(address,uint256,uint256,uint256)(_holder,total,left,start)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Nutz(nutzAddr).powerDown(powerAddr,_holder,amountBabz)

IRs:
TMP_1043 = CONVERT nutzAddr to Nutz
HIGH_LEVEL_CALL, dest:TMP_1043(Nutz), function:powerDown, arguments:['powerAddr', '_holder', 'amountBabz']  "];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyPower()

IRs:
MODIFIER_CALL, PowerEnabled.onlyPower()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
21->1;
}
// Function: 33518.sol-Controller-downs(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
rawBytes = Storage(storageAddr).getBal(PowerDown,_user)

IRs:
TMP_1195 = CONVERT storageAddr to Storage
TMP_1196(uint256) = HIGH_LEVEL_CALL, dest:TMP_1195(Storage), function:getBal, arguments:['PowerDown', '_user']  
rawBytes(uint256) := TMP_1196(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
start = uint64(rawBytes)

IRs:
TMP_1197 = CONVERT rawBytes to uint64
start(uint256) := TMP_1197(uint64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
left = uint96(rawBytes >> (64))

IRs:
TMP_1198(uint256) = rawBytes >> 64
TMP_1199 = CONVERT TMP_1198 to uint96
left(uint256) := TMP_1199(uint96)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
total = uint96(rawBytes >> (96 + 64))

IRs:
TMP_1200(uint256) = 96 + 64
TMP_1201(uint256) = rawBytes >> TMP_1200
TMP_1202 = CONVERT TMP_1201 to uint96
total(uint256) := TMP_1202(uint96)"];
4->5;
5[label="Node Type: RETURN 5
"];
6[label="Node Type: RETURN 6

EXPRESSION:
(total,left,start)

IRs:
RETURN total,left,start"];
}
// Function: 33518.sol-Controller-floor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
nutzAddr.balance == 0

IRs:
TMP_1048(uint256) = SOLIDITY_CALL balance(address)(nutzAddr)
TMP_1049(bool) = TMP_1048 == 0
CONDITION TMP_1049"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
INFINITY

IRs:
RETURN INFINITY"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
maxFloor = activeSupply().mul(1000000).div(nutzAddr.balance)

IRs:
TMP_1050(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_1051(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_1050', '1000000'] 
TMP_1052(uint256) = SOLIDITY_CALL balance(address)(nutzAddr)
TMP_1053(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1051', 'TMP_1052'] 
maxFloor(uint256) := TMP_1053(uint256)"];
4->6;
6[label="Node Type: IF 6

EXPRESSION:
maxFloor >= salePrice

IRs:
TMP_1054(bool) = maxFloor >= salePrice
CONDITION TMP_1054"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
maxFloor

IRs:
RETURN maxFloor"];
8[label="Node Type: RETURN 8

EXPRESSION:
salePrice

IRs:
RETURN salePrice"];
}
// Function: 33518.sol-Controller-kill(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: IF 1

EXPRESSION:
powerAddr != address(0)

IRs:
TMP_1239 = CONVERT 0 to address
TMP_1240(bool) = powerAddr != TMP_1239
CONDITION TMP_1240"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Ownable(powerAddr).transferOwnership(msg.sender)

IRs:
TMP_1241 = CONVERT powerAddr to Ownable
HIGH_LEVEL_CALL, dest:TMP_1241(Ownable), function:transferOwnership, arguments:['msg.sender']  "];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
pullAddr != address(0)

IRs:
TMP_1243 = CONVERT 0 to address
TMP_1244(bool) = pullAddr != TMP_1243
CONDITION TMP_1244"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Ownable(pullAddr).transferOwnership(msg.sender)

IRs:
TMP_1245 = CONVERT pullAddr to Ownable
HIGH_LEVEL_CALL, dest:TMP_1245(Ownable), function:transferOwnership, arguments:['msg.sender']  "];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
nutzAddr != address(0)

IRs:
TMP_1247 = CONVERT 0 to address
TMP_1248(bool) = nutzAddr != TMP_1247
CONDITION TMP_1248"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Ownable(nutzAddr).transferOwnership(msg.sender)

IRs:
TMP_1249 = CONVERT nutzAddr to Ownable
HIGH_LEVEL_CALL, dest:TMP_1249(Ownable), function:transferOwnership, arguments:['msg.sender']  "];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
storageAddr != address(0)

IRs:
TMP_1251 = CONVERT 0 to address
TMP_1252(bool) = storageAddr != TMP_1251
CONDITION TMP_1252"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Ownable(storageAddr).transferOwnership(msg.sender)

IRs:
TMP_1253 = CONVERT storageAddr to Ownable
HIGH_LEVEL_CALL, dest:TMP_1253(Ownable), function:transferOwnership, arguments:['msg.sender']  "];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
selfdestruct(address)(_newController)

IRs:
TMP_1255(None) = SOLIDITY_CALL selfdestruct(address)(_newController)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
15->1;
}
// Function: 33518.sol-Controller-minimumPowerUpSizeBabz()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
completeSupplyBabz = completeSupply()

IRs:
TMP_922(uint256) = INTERNAL_CALL, NutzEnabled.completeSupply()()
completeSupplyBabz(uint256) := TMP_922(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
completeSupplyBabz == 0

IRs:
TMP_923(bool) = completeSupplyBabz == 0
CONDITION TMP_923"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
INFINITY

IRs:
RETURN INFINITY"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
completeSupplyBabz.div(MIN_SHARE_OF_POWER)

IRs:
TMP_924(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['completeSupplyBabz', 'MIN_SHARE_OF_POWER'] 
RETURN TMP_924"];
}
// Function: 33518.sol-Controller-moveCeiling(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newPurchasePrice <= salePrice)

IRs:
TMP_1055(bool) = _newPurchasePrice <= salePrice
TMP_1056(None) = SOLIDITY_CALL require(bool)(TMP_1055)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
purchasePrice = _newPurchasePrice

IRs:
purchasePrice(uint256) := _newPurchasePrice(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
3->1;
}
// Function: 33518.sol-Controller-moveFloor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newSalePrice >= purchasePrice)

IRs:
TMP_1058(bool) = _newSalePrice >= purchasePrice
TMP_1059(None) = SOLIDITY_CALL require(bool)(TMP_1058)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_newSalePrice < INFINITY

IRs:
TMP_1060(bool) = _newSalePrice < INFINITY
CONDITION TMP_1060"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(nutzAddr.balance >= activeSupply().mul(1000000).div(_newSalePrice))

IRs:
TMP_1061(uint256) = SOLIDITY_CALL balance(address)(nutzAddr)
TMP_1062(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_1063(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_1062', '1000000'] 
TMP_1064(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1063', '_newSalePrice'] 
TMP_1065(bool) = TMP_1061 >= TMP_1064
TMP_1066(None) = SOLIDITY_CALL require(bool)(TMP_1065)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
salePrice = _newSalePrice

IRs:
salePrice(uint256) := _newSalePrice(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
6->1;
}
// Function: 33518.sol-Controller-onlyAdmins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
isAdmin = false

IRs:
isAdmin(bool) := False(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < admins.length

IRs:
REF_480 -> LENGTH admins
TMP_1265(bool) = i < REF_480
CONDITION TMP_1265"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
msg.sender == admins[i]

IRs:
REF_481(address) -> admins[i]
TMP_1266(bool) = msg.sender == REF_481
CONDITION TMP_1266"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isAdmin = true

IRs:
isAdmin(bool) := True(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_1267(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(isAdmin == true)

IRs:
TMP_1268(bool) = isAdmin == True
TMP_1269(None) = SOLIDITY_CALL require(bool)(TMP_1268)"];
10->11;
11[label="Node Type: _ 11
"];
}
// Function: 33518.sol-Controller-onlyNutz()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nutzAddr)

IRs:
TMP_1260(bool) = msg.sender == nutzAddr
TMP_1261(None) = SOLIDITY_CALL require(bool)(TMP_1260)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-Controller-onlyPower()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == powerAddr)

IRs:
TMP_1258(bool) = msg.sender == powerAddr
TMP_1259(None) = SOLIDITY_CALL require(bool)(TMP_1258)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-Controller-outstandingPower()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Power,outstandingPower)

IRs:
TMP_1187 = CONVERT storageAddr to Storage
TMP_1188(uint256) = HIGH_LEVEL_CALL, dest:TMP_1187(Storage), function:getUInt, arguments:['Power', 'outstandingPower']  
RETURN TMP_1188"];
}
// Function: 33518.sol-Controller-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 33518.sol-Controller-powerBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getBal(Power,_owner)

IRs:
TMP_1183 = CONVERT storageAddr to Storage
TMP_1184(uint256) = HIGH_LEVEL_CALL, dest:TMP_1183(Storage), function:getBal, arguments:['Power', '_owner']  
RETURN TMP_1184"];
}
// Function: 33518.sol-Controller-powerPool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,powerPool)

IRs:
TMP_1179 = CONVERT storageAddr to Storage
TMP_1180(uint256) = HIGH_LEVEL_CALL, dest:TMP_1179(Storage), function:getUInt, arguments:['Nutz', 'powerPool']  
RETURN TMP_1180"];
}
// Function: 33518.sol-Controller-powerTotalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
issuedPower = authorizedPower().div(2)

IRs:
TMP_996(uint256) = INTERNAL_CALL, StorageEnabled.authorizedPower()()
TMP_997(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_996', '2'] 
issuedPower(uint256) := TMP_997(uint256)"];
1->3;
3[label="Node Type: IF 3

EXPRESSION:
maxPower >= issuedPower

IRs:
TMP_998(bool) = maxPower >= issuedPower
CONDITION TMP_998"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
maxPower

IRs:
RETURN maxPower"];
5[label="Node Type: RETURN 5

EXPRESSION:
issuedPower

IRs:
RETURN issuedPower"];
}
// Function: 33518.sol-Controller-powerUp(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
authorizedPow = authorizedPower()

IRs:
TMP_959(uint256) = INTERNAL_CALL, StorageEnabled.authorizedPower()()
authorizedPow(uint256) := TMP_959(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(authorizedPow != 0)

IRs:
TMP_960(bool) = authorizedPow != 0
TMP_961(None) = SOLIDITY_CALL require(bool)(TMP_960)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_amountBabz != 0)

IRs:
TMP_962(bool) = _amountBabz != 0
TMP_963(None) = SOLIDITY_CALL require(bool)(TMP_962)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
totalBabz = completeSupply()

IRs:
TMP_964(uint256) = INTERNAL_CALL, NutzEnabled.completeSupply()()
totalBabz(uint256) := TMP_964(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(totalBabz != 0)

IRs:
TMP_965(bool) = totalBabz != 0
TMP_966(None) = SOLIDITY_CALL require(bool)(TMP_965)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
amountPow = _amountBabz.mul(authorizedPow).div(totalBabz)

IRs:
TMP_967(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amountBabz', 'authorizedPow'] 
TMP_968(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_967', 'totalBabz'] 
amountPow(uint256) := TMP_968(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
outstandingPow = outstandingPower()

IRs:
TMP_969(uint256) = INTERNAL_CALL, StorageEnabled.outstandingPower()()
outstandingPow(uint256) := TMP_969(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(outstandingPow.add(amountPow) <= maxPower)

IRs:
TMP_970(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['outstandingPow', 'amountPow'] 
TMP_971(bool) = TMP_970 <= maxPower
TMP_972(None) = SOLIDITY_CALL require(bool)(TMP_971)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
powBal = powerBalanceOf(_from).add(amountPow)

IRs:
TMP_973(uint256) = INTERNAL_CALL, StorageEnabled.powerBalanceOf(address)(_from)
TMP_974(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_973', 'amountPow'] 
powBal(uint256) := TMP_974(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(powBal >= authorizedPow.div(MIN_SHARE_OF_POWER))

IRs:
TMP_975(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['authorizedPow', 'MIN_SHARE_OF_POWER'] 
TMP_976(bool) = powBal >= TMP_975
TMP_977(None) = SOLIDITY_CALL require(bool)(TMP_976)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_sender != _from

IRs:
TMP_978(bool) = _sender != _from
CONDITION TMP_978"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
allowed[_from][_sender] = allowed[_from][_sender].sub(_amountBabz)

IRs:
REF_377(mapping(address => uint256)) -> allowed[_from]
REF_378(uint256) -> REF_377[_sender]
REF_379(mapping(address => uint256)) -> allowed[_from]
REF_380(uint256) -> REF_379[_sender]
TMP_979(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_380', '_amountBabz'] 
REF_378(uint256) (->allowed) := TMP_979(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_setOutstandingPower(outstandingPow.add(amountPow))

IRs:
TMP_980(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['outstandingPow', 'amountPow'] 
INTERNAL_CALL, StorageEnabled._setOutstandingPower(uint256)(TMP_980)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_setPowerBalanceOf(_from,powBal)

IRs:
INTERNAL_CALL, StorageEnabled._setPowerBalanceOf(address,uint256)(_from,powBal)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_setActiveSupply(activeSupply().sub(_amountBabz))

IRs:
TMP_983(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_984(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_983', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setActiveSupply(uint256)(TMP_984)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_setBabzBalanceOf(_from,babzBalanceOf(_from).sub(_amountBabz))

IRs:
TMP_986(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_from)
TMP_987(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_986', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_from,TMP_987)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_setPowerPool(powerPool().add(_amountBabz))

IRs:
TMP_989(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
TMP_990(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_989', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setPowerPool(uint256)(TMP_990)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Power(powerAddr).powerUp(_from,amountPow)

IRs:
TMP_992 = CONVERT powerAddr to Power
HIGH_LEVEL_CALL, dest:TMP_992(Power), function:powerUp, arguments:['_from', 'amountPow']  "];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
21->1;
}
// Function: 33518.sol-Controller-purchase(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(purchasePrice > 0)

IRs:
TMP_1068(bool) = purchasePrice > 0
TMP_1069(None) = SOLIDITY_CALL require(bool)(TMP_1068)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_price == purchasePrice)

IRs:
TMP_1070(bool) = _price == purchasePrice
TMP_1071(None) = SOLIDITY_CALL require(bool)(TMP_1070)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountBabz = purchasePrice.mul(_value).div(1000000)

IRs:
TMP_1072(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['purchasePrice', '_value'] 
TMP_1073(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1072', '1000000'] 
amountBabz(uint256) := TMP_1073(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(amountBabz > 0)

IRs:
TMP_1074(bool) = amountBabz > 0
TMP_1075(None) = SOLIDITY_CALL require(bool)(TMP_1074)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
activeSup = activeSupply()

IRs:
TMP_1076(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
activeSup(uint256) := TMP_1076(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
powPool = powerPool()

IRs:
TMP_1077(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
powPool(uint256) := TMP_1077(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
powPool > 0

IRs:
TMP_1078(bool) = powPool > 0
CONDITION TMP_1078"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
powerShare = powPool.mul(amountBabz).div(activeSup.add(burnPool()))

IRs:
TMP_1079(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['powPool', 'amountBabz'] 
TMP_1080(uint256) = INTERNAL_CALL, StorageEnabled.burnPool()()
TMP_1081(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['activeSup', 'TMP_1080'] 
TMP_1082(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1079', 'TMP_1081'] 
powerShare(uint256) := TMP_1082(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_setPowerPool(powPool.add(powerShare))

IRs:
TMP_1083(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['powPool', 'powerShare'] 
INTERNAL_CALL, StorageEnabled._setPowerPool(uint256)(TMP_1083)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_setActiveSupply(activeSup.add(amountBabz))

IRs:
TMP_1085(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['activeSup', 'amountBabz'] 
INTERNAL_CALL, StorageEnabled._setActiveSupply(uint256)(TMP_1085)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_setBabzBalanceOf(_sender,babzBalanceOf(_sender).add(amountBabz))

IRs:
TMP_1087(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_sender)
TMP_1088(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_1087', 'amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_sender,TMP_1088)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
amountBabz

IRs:
RETURN amountBabz"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
15->1;
}
// Function: 33518.sol-Controller-removeAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pos = admins.length

IRs:
REF_466 -> LENGTH admins
pos(uint256) := REF_466(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < admins.length

IRs:
REF_467 -> LENGTH admins
TMP_1223(bool) = i < REF_467
CONDITION TMP_1223"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
_admin == admins[i]

IRs:
REF_468(address) -> admins[i]
TMP_1224(bool) = _admin == REF_468
CONDITION TMP_1224"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
pos = i

IRs:
pos(uint256) := i(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_1225(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(pos < admins.length)

IRs:
REF_469 -> LENGTH admins
TMP_1226(bool) = pos < REF_469
TMP_1227(None) = SOLIDITY_CALL require(bool)(TMP_1226)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
pos < admins.length - 1

IRs:
REF_470 -> LENGTH admins
TMP_1228(uint256) = REF_470 - 1
TMP_1229(bool) = pos < TMP_1228
CONDITION TMP_1229"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
admins[pos] = admins[admins.length - 1]

IRs:
REF_471(address) -> admins[pos]
REF_472 -> LENGTH admins
TMP_1230(uint256) = REF_472 - 1
REF_473(address) -> admins[TMP_1230]
REF_471(address) (->admins) := REF_473(address)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
admins.length --

IRs:
REF_474 -> LENGTH admins
TMP_1231(uint256) := REF_474(uint256)
REF_474(-> admins) = REF_474 - 1"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
15->1;
}
// Function: 33518.sol-Controller-sell(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
effectiveFloor = floor()

IRs:
TMP_1092(uint256) = INTERNAL_CALL, MarketEnabled.floor()()
effectiveFloor(uint256) := TMP_1092(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amountBabz != 0)

IRs:
TMP_1093(bool) = _amountBabz != 0
TMP_1094(None) = SOLIDITY_CALL require(bool)(TMP_1093)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(effectiveFloor != INFINITY)

IRs:
TMP_1095(bool) = effectiveFloor != INFINITY
TMP_1096(None) = SOLIDITY_CALL require(bool)(TMP_1095)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_price == effectiveFloor)

IRs:
TMP_1097(bool) = _price == effectiveFloor
TMP_1098(None) = SOLIDITY_CALL require(bool)(TMP_1097)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
amountWei = _amountBabz.mul(1000000).div(effectiveFloor)

IRs:
TMP_1099(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amountBabz', '1000000'] 
TMP_1100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1099', 'effectiveFloor'] 
amountWei(uint256) := TMP_1100(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(amountWei > 0)

IRs:
TMP_1101(bool) = amountWei > 0
TMP_1102(None) = SOLIDITY_CALL require(bool)(TMP_1101)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
powPool = powerPool()

IRs:
TMP_1103(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
powPool(uint256) := TMP_1103(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
activeSup = activeSupply()

IRs:
TMP_1104(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
activeSup(uint256) := TMP_1104(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
powPool > 0

IRs:
TMP_1105(bool) = powPool > 0
CONDITION TMP_1105"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
powerShare = powPool.mul(_amountBabz).div(activeSup.add(burnPool()))

IRs:
TMP_1106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['powPool', '_amountBabz'] 
TMP_1107(uint256) = INTERNAL_CALL, StorageEnabled.burnPool()()
TMP_1108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['activeSup', 'TMP_1107'] 
TMP_1109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1106', 'TMP_1108'] 
powerShare(uint256) := TMP_1109(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_setPowerPool(powPool.sub(powerShare))

IRs:
TMP_1110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['powPool', 'powerShare'] 
INTERNAL_CALL, StorageEnabled._setPowerPool(uint256)(TMP_1110)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_setActiveSupply(activeSup.sub(_amountBabz))

IRs:
TMP_1112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['activeSup', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setActiveSupply(uint256)(TMP_1112)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_setBabzBalanceOf(_from,babzBalanceOf(_from).sub(_amountBabz))

IRs:
TMP_1114(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_from)
TMP_1115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_1114', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_from,TMP_1115)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Nutz(nutzAddr).asyncSend(pullAddr,_from,amountWei)

IRs:
TMP_1117 = CONVERT nutzAddr to Nutz
HIGH_LEVEL_CALL, dest:TMP_1117(Nutz), function:asyncSend, arguments:['pullAddr', '_from', 'amountWei']  "];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
17->1;
}
// Function: 33518.sol-Controller-setContracts(address,address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
storageAddr = _storageAddr

IRs:
storageAddr(address) := _storageAddr(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
nutzAddr = _nutzAddr

IRs:
nutzAddr(address) := _nutzAddr(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
powerAddr = _powerAddr

IRs:
powerAddr(address) := _powerAddr(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pullAddr = _pullAddr

IRs:
pullAddr(address) := _pullAddr(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
6->1;
}
// Function: 33518.sol-Controller-setDowntime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
downtime = _downtime

IRs:
downtime(uint256) := _downtime(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
2->1;
}
// Function: 33518.sol-Controller-setMaxPower(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(outstandingPower() <= _maxPower && _maxPower < authorizedPower())

IRs:
TMP_914(uint256) = INTERNAL_CALL, StorageEnabled.outstandingPower()()
TMP_915(bool) = TMP_914 <= _maxPower
TMP_916(uint256) = INTERNAL_CALL, StorageEnabled.authorizedPower()()
TMP_917(bool) = _maxPower < TMP_916
TMP_918(bool) = TMP_915 && TMP_917
TMP_919(None) = SOLIDITY_CALL require(bool)(TMP_918)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
maxPower = _maxPower

IRs:
maxPower(uint256) := _maxPower(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
3->1;
}
// Function: 33518.sol-Controller-slashDownRequest(uint256,address,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
(total,left,start) = downs(_holder)

IRs:
TUPLE_4(uint256,uint256,uint256) = INTERNAL_CALL, StorageEnabled.downs(address)(_holder)
total(uint256)= UNPACK TUPLE_4 index: 0 
left(uint256)= UNPACK TUPLE_4 index: 1 
start(uint256)= UNPACK TUPLE_4 index: 2 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
left = left.sub(_value)

IRs:
TMP_955(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['left', '_value'] 
left(uint256) := TMP_955(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_setDownRequest(_holder,total,left,start)

IRs:
INTERNAL_CALL, StorageEnabled._setDownRequest(address,uint256,uint256,uint256)(_holder,total,left,start)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_slashPower(_holder,_value,_data)

IRs:
INTERNAL_CALL, PowerEnabled._slashPower(address,uint256,bytes32)(_holder,_value,_data)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
8->1;
}
// Function: 33518.sol-Controller-slashPower(address,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_setPowerBalanceOf(_holder,powerBalanceOf(_holder).sub(_value))

IRs:
TMP_950(uint256) = INTERNAL_CALL, StorageEnabled.powerBalanceOf(address)(_holder)
TMP_951(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_950', '_value'] 
INTERNAL_CALL, StorageEnabled._setPowerBalanceOf(address,uint256)(_holder,TMP_951)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_slashPower(_holder,_value,_data)

IRs:
INTERNAL_CALL, PowerEnabled._slashPower(address,uint256,bytes32)(_holder,_value,_data)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
3->1;
}
// Function: 33518.sol-Controller-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
INFINITY = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

IRs:
INFINITY(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
MIN_SHARE_OF_POWER = 100000

IRs:
MIN_SHARE_OF_POWER(uint256) := 100000(uint256)"];
}
// Function: 33518.sol-Controller-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
maxPower = 0

IRs:
maxPower(uint256) := 0(uint256)"];
}
// Function: 33518.sol-Controller-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
activeSupply()

IRs:
TMP_1134(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
RETURN TMP_1134"];
}
// Function: 33518.sol-Controller-transfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(_from,_to,_amountBabz,_data)

IRs:
INTERNAL_CALL, NutzEnabled._transfer(address,address,uint256,bytes)(_from,_to,_amountBabz,_data)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 33518.sol-Controller-transferFrom(address,address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[_from][_sender] = allowed[_from][_sender].sub(_amountBabz)

IRs:
REF_438(mapping(address => uint256)) -> allowed[_from]
REF_439(uint256) -> REF_438[_sender]
REF_440(mapping(address => uint256)) -> allowed[_from]
REF_441(uint256) -> REF_440[_sender]
TMP_1163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_441', '_amountBabz'] 
REF_439(uint256) (->allowed) := TMP_1163(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_transfer(_from,_to,_amountBabz,_data)

IRs:
INTERNAL_CALL, NutzEnabled._transfer(address,address,uint256,bytes)(_from,_to,_amountBabz,_data)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 33518.sol-Controller-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
3->1;
}
// Function: 33518.sol-Controller-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_1262 = UnaryType.BANG paused 
TMP_1263(None) = SOLIDITY_CALL require(bool)(TMP_1262)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-Controller-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_1264(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-ControllerInterface-activeSupply()
digraph{
}
// Function: 33518.sol-ControllerInterface-allowance(address,address)
digraph{
}
// Function: 33518.sol-ControllerInterface-approve(address,address,uint256)
digraph{
}
// Function: 33518.sol-ControllerInterface-authorizedPower()
digraph{
}
// Function: 33518.sol-ControllerInterface-babzBalanceOf(address)
digraph{
}
// Function: 33518.sol-ControllerInterface-burnPool()
digraph{
}
// Function: 33518.sol-ControllerInterface-ceiling()
digraph{
}
// Function: 33518.sol-ControllerInterface-completeSupply()
digraph{
}
// Function: 33518.sol-ControllerInterface-createDownRequest(address,uint256)
digraph{
}
// Function: 33518.sol-ControllerInterface-downTick(address,uint256)
digraph{
}
// Function: 33518.sol-ControllerInterface-downs(address)
digraph{
}
// Function: 33518.sol-ControllerInterface-downtime()
digraph{
}
// Function: 33518.sol-ControllerInterface-floor()
digraph{
}
// Function: 33518.sol-ControllerInterface-outstandingPower()
digraph{
}
// Function: 33518.sol-ControllerInterface-powerBalanceOf(address)
digraph{
}
// Function: 33518.sol-ControllerInterface-powerPool()
digraph{
}
// Function: 33518.sol-ControllerInterface-powerTotalSupply()
digraph{
}
// Function: 33518.sol-ControllerInterface-powerUp(address,address,uint256)
digraph{
}
// Function: 33518.sol-ControllerInterface-purchase(address,uint256,uint256)
digraph{
}
// Function: 33518.sol-ControllerInterface-sell(address,uint256,uint256)
digraph{
}
// Function: 33518.sol-ControllerInterface-totalSupply()
digraph{
}
// Function: 33518.sol-ControllerInterface-transfer(address,address,uint256,bytes)
digraph{
}
// Function: 33518.sol-ControllerInterface-transferFrom(address,address,address,uint256,bytes)
digraph{
}
// Function: 33518.sol-ERC20-activeSupply()
digraph{
}
// Function: 33518.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 33518.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 33518.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 33518.sol-ERC20-totalSupply()
digraph{
}
// Function: 33518.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 33518.sol-ERC20-transfer(address,uint256,bytes)
digraph{
}
// Function: 33518.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 33518.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 33518.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 33518.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 33518.sol-ERC223Basic-balanceOf(address)
digraph{
}
// Function: 33518.sol-ERC223Basic-totalSupply()
digraph{
}
// Function: 33518.sol-ERC223Basic-transfer(address,uint256)
digraph{
}
// Function: 33518.sol-ERC223Basic-transfer(address,uint256,bytes)
digraph{
}
// Function: 33518.sol-ERC223ReceivingContract-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 33518.sol-Governable-Governable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admins.length = 1

IRs:
REF_0 -> LENGTH admins
REF_0(uint256) (->admins) := 1(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admins[0] = msg.sender

IRs:
REF_1(address) -> admins[0]
REF_1(address) (->admins) := msg.sender(address)"];
}
// Function: 33518.sol-Governable-addAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < admins.length

IRs:
REF_2 -> LENGTH admins
TMP_0(bool) = i < REF_2
CONDITION TMP_0"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_admin != admins[i])

IRs:
REF_3(address) -> admins[i]
TMP_1(bool) = _admin != REF_3
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_3(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(admins.length < 10)

IRs:
REF_4 -> LENGTH admins
TMP_4(bool) = REF_4 < 10
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
admins[admins.length ++] = _admin

IRs:
REF_5 -> LENGTH admins
TMP_6(uint256) := REF_5(uint256)
REF_5(-> admins) = REF_5 + 1
REF_6(address) -> admins[TMP_6]
REF_6(address) (->admins) := _admin(address)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
9->3;
}
// Function: 33518.sol-Governable-onlyAdmins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
isAdmin = false

IRs:
isAdmin(bool) := False(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < admins.length

IRs:
REF_16 -> LENGTH admins
TMP_18(bool) = i < REF_16
CONDITION TMP_18"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
msg.sender == admins[i]

IRs:
REF_17(address) -> admins[i]
TMP_19(bool) = msg.sender == REF_17
CONDITION TMP_19"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isAdmin = true

IRs:
isAdmin(bool) := True(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_20(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(isAdmin == true)

IRs:
TMP_21(bool) = isAdmin == True
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
10->11;
11[label="Node Type: _ 11
"];
}
// Function: 33518.sol-Governable-removeAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pos = admins.length

IRs:
REF_7 -> LENGTH admins
pos(uint256) := REF_7(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < admins.length

IRs:
REF_8 -> LENGTH admins
TMP_8(bool) = i < REF_8
CONDITION TMP_8"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
_admin == admins[i]

IRs:
REF_9(address) -> admins[i]
TMP_9(bool) = _admin == REF_9
CONDITION TMP_9"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
pos = i

IRs:
pos(uint256) := i(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_10(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(pos < admins.length)

IRs:
REF_10 -> LENGTH admins
TMP_11(bool) = pos < REF_10
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
pos < admins.length - 1

IRs:
REF_11 -> LENGTH admins
TMP_13(uint256) = REF_11 - 1
TMP_14(bool) = pos < TMP_13
CONDITION TMP_14"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
admins[pos] = admins[admins.length - 1]

IRs:
REF_12(address) -> admins[pos]
REF_13 -> LENGTH admins
TMP_15(uint256) = REF_13 - 1
REF_14(address) -> admins[TMP_15]
REF_12(address) (->admins) := REF_14(address)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
admins.length --

IRs:
REF_15 -> LENGTH admins
TMP_16(uint256) := REF_15(uint256)
REF_15(-> admins) = REF_15 - 1"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
15->1;
}
// Function: 33518.sol-MarketEnabled-Governable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admins.length = 1

IRs:
REF_198 -> LENGTH admins
REF_198(uint256) (->admins) := 1(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admins[0] = msg.sender

IRs:
REF_199(address) -> admins[0]
REF_199(address) (->admins) := msg.sender(address)"];
}
// Function: 33518.sol-MarketEnabled-MarketEnabled(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pullAddr = _pullAddr

IRs:
pullAddr(address) := _pullAddr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
NutzEnabled(_nutzAddr,_storageAddr)

IRs:
INTERNAL_CALL, NutzEnabled.NutzEnabled(address,address)(_nutzAddr,_storageAddr)"];
2->1;
}
// Function: 33518.sol-MarketEnabled-NutzEnabled(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nutzAddr = _nutzAddr

IRs:
nutzAddr(address) := _nutzAddr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
StorageEnabled(_storageAddr)

IRs:
INTERNAL_CALL, StorageEnabled.StorageEnabled(address)(_storageAddr)"];
2->1;
}
// Function: 33518.sol-MarketEnabled-StorageEnabled(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
storageAddr = _storageAddr

IRs:
storageAddr(address) := _storageAddr(address)"];
}
// Function: 33518.sol-MarketEnabled-_setActiveSupply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,activeSupply,_newActiveSupply)

IRs:
TMP_412 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_412(Storage), function:setUInt, arguments:['Nutz', 'activeSupply', '_newActiveSupply']  "];
}
// Function: 33518.sol-MarketEnabled-_setAuthorizedPower(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Power,authorizedPower,_newAuthorizedPower)

IRs:
TMP_432 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_432(Storage), function:setUInt, arguments:['Power', 'authorizedPower', '_newAuthorizedPower']  "];
}
// Function: 33518.sol-MarketEnabled-_setBabzBalanceOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setBal(Nutz,_owner,_newValue)

IRs:
TMP_408 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_408(Storage), function:setBal, arguments:['Nutz', '_owner', '_newValue']  "];
}
// Function: 33518.sol-MarketEnabled-_setBurnPool(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,burnPool,_newBurnPool)

IRs:
TMP_416 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_416(Storage), function:setUInt, arguments:['Nutz', 'burnPool', '_newBurnPool']  "];
}
// Function: 33518.sol-MarketEnabled-_setDownRequest(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
result = uint64(start) + (left << 64) + (total << (96 + 64))

IRs:
TMP_442 = CONVERT start to uint64
TMP_443(uint256) = left << 64
TMP_444(uint64) = TMP_442 + TMP_443
TMP_445(uint256) = 96 + 64
TMP_446(uint256) = total << TMP_445
TMP_447(uint64) = TMP_444 + TMP_446
result(uint256) := TMP_447(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Storage(storageAddr).setBal(PowerDown,_holder,result)

IRs:
TMP_448 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_448(Storage), function:setBal, arguments:['PowerDown', '_holder', 'result']  "];
}
// Function: 33518.sol-MarketEnabled-_setOutstandingPower(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Power,outstandingPower,_newOutstandingPower)

IRs:
TMP_428 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_428(Storage), function:setUInt, arguments:['Power', 'outstandingPower', '_newOutstandingPower']  "];
}
// Function: 33518.sol-MarketEnabled-_setPowerBalanceOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setBal(Power,_owner,_newValue)

IRs:
TMP_424 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_424(Storage), function:setBal, arguments:['Power', '_owner', '_newValue']  "];
}
// Function: 33518.sol-MarketEnabled-_setPowerPool(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,powerPool,_newPowerPool)

IRs:
TMP_420 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_420(Storage), function:setUInt, arguments:['Nutz', 'powerPool', '_newPowerPool']  "];
}
// Function: 33518.sol-MarketEnabled-_transfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(this))

IRs:
TMP_383 = CONVERT this to address
TMP_384(bool) = _to != TMP_383
TMP_385(None) = SOLIDITY_CALL require(bool)(TMP_384)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_386 = CONVERT 0 to address
TMP_387(bool) = _to != TMP_386
TMP_388(None) = SOLIDITY_CALL require(bool)(TMP_387)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_amountBabz > 0)

IRs:
TMP_389(bool) = _amountBabz > 0
TMP_390(None) = SOLIDITY_CALL require(bool)(TMP_389)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_from != _to)

IRs:
TMP_391(bool) = _from != _to
TMP_392(None) = SOLIDITY_CALL require(bool)(TMP_391)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_setBabzBalanceOf(_from,babzBalanceOf(_from).sub(_amountBabz))

IRs:
TMP_393(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_from)
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_393', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_from,TMP_394)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_setBabzBalanceOf(_to,babzBalanceOf(_to).add(_amountBabz))

IRs:
TMP_396(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_to)
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_396', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_to,TMP_397)"];
}
// Function: 33518.sol-MarketEnabled-activeSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,activeSupply)

IRs:
TMP_410 = CONVERT storageAddr to Storage
TMP_411(uint256) = HIGH_LEVEL_CALL, dest:TMP_410(Storage), function:getUInt, arguments:['Nutz', 'activeSupply']  
RETURN TMP_411"];
}
// Function: 33518.sol-MarketEnabled-addAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < admins.length

IRs:
REF_200 -> LENGTH admins
TMP_454(bool) = i < REF_200
CONDITION TMP_454"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_admin != admins[i])

IRs:
REF_201(address) -> admins[i]
TMP_455(bool) = _admin != REF_201
TMP_456(None) = SOLIDITY_CALL require(bool)(TMP_455)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_457(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(admins.length < 10)

IRs:
REF_202 -> LENGTH admins
TMP_458(bool) = REF_202 < 10
TMP_459(None) = SOLIDITY_CALL require(bool)(TMP_458)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
admins[admins.length ++] = _admin

IRs:
REF_203 -> LENGTH admins
TMP_460(uint256) := REF_203(uint256)
REF_203(-> admins) = REF_203 + 1
REF_204(address) -> admins[TMP_460]
REF_204(address) (->admins) := _admin(address)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
9->3;
}
// Function: 33518.sol-MarketEnabled-allocateEther(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amountWei > 0)

IRs:
TMP_546(bool) = _amountWei > 0
TMP_547(None) = SOLIDITY_CALL require(bool)(TMP_546)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(nutzAddr.balance.sub(_amountWei) >= activeSupply().mul(1000000).div(salePrice))

IRs:
TMP_548(uint256) = SOLIDITY_CALL balance(address)(nutzAddr)
TMP_549(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_548', '_amountWei'] 
TMP_550(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_551(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_550', '1000000'] 
TMP_552(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_551', 'salePrice'] 
TMP_553(bool) = TMP_549 >= TMP_552
TMP_554(None) = SOLIDITY_CALL require(bool)(TMP_553)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Nutz(nutzAddr).asyncSend(pullAddr,_beneficiary,_amountWei)

IRs:
TMP_555 = CONVERT nutzAddr to Nutz
HIGH_LEVEL_CALL, dest:TMP_555(Nutz), function:asyncSend, arguments:['pullAddr', '_beneficiary', '_amountWei']  "];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
4->1;
}
// Function: 33518.sol-MarketEnabled-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_171(mapping(address => uint256)) -> allowed[_owner]
REF_172(uint256) -> REF_171[_spender]
RETURN REF_172"];
}
// Function: 33518.sol-MarketEnabled-approve(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != _spender)

IRs:
TMP_379(bool) = _owner != _spender
TMP_380(None) = SOLIDITY_CALL require(bool)(TMP_379)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_owner][_spender] = _amountBabz

IRs:
REF_173(mapping(address => uint256)) -> allowed[_owner]
REF_174(uint256) -> REF_173[_spender]
REF_174(uint256) (->allowed) := _amountBabz(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 33518.sol-MarketEnabled-authorizedPower()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Power,authorizedPower)

IRs:
TMP_430 = CONVERT storageAddr to Storage
TMP_431(uint256) = HIGH_LEVEL_CALL, dest:TMP_430(Storage), function:getUInt, arguments:['Power', 'authorizedPower']  
RETURN TMP_431"];
}
// Function: 33518.sol-MarketEnabled-babzBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getBal(Nutz,_owner)

IRs:
TMP_406 = CONVERT storageAddr to Storage
TMP_407(uint256) = HIGH_LEVEL_CALL, dest:TMP_406(Storage), function:getBal, arguments:['Nutz', '_owner']  
RETURN TMP_407"];
}
// Function: 33518.sol-MarketEnabled-burnPool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,burnPool)

IRs:
TMP_414 = CONVERT storageAddr to Storage
TMP_415(uint256) = HIGH_LEVEL_CALL, dest:TMP_414(Storage), function:getUInt, arguments:['Nutz', 'burnPool']  
RETURN TMP_415"];
}
// Function: 33518.sol-MarketEnabled-ceiling()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
purchasePrice

IRs:
RETURN purchasePrice"];
}
// Function: 33518.sol-MarketEnabled-completeSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
activeSupply().add(powerPool()).add(burnPool())

IRs:
TMP_374(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_375(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_374', 'TMP_375'] 
TMP_377(uint256) = INTERNAL_CALL, StorageEnabled.burnPool()()
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_376', 'TMP_377'] 
RETURN TMP_378"];
}
// Function: 33518.sol-MarketEnabled-downs(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
rawBytes = Storage(storageAddr).getBal(PowerDown,_user)

IRs:
TMP_434 = CONVERT storageAddr to Storage
TMP_435(uint256) = HIGH_LEVEL_CALL, dest:TMP_434(Storage), function:getBal, arguments:['PowerDown', '_user']  
rawBytes(uint256) := TMP_435(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
start = uint64(rawBytes)

IRs:
TMP_436 = CONVERT rawBytes to uint64
start(uint256) := TMP_436(uint64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
left = uint96(rawBytes >> (64))

IRs:
TMP_437(uint256) = rawBytes >> 64
TMP_438 = CONVERT TMP_437 to uint96
left(uint256) := TMP_438(uint96)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
total = uint96(rawBytes >> (96 + 64))

IRs:
TMP_439(uint256) = 96 + 64
TMP_440(uint256) = rawBytes >> TMP_439
TMP_441 = CONVERT TMP_440 to uint96
total(uint256) := TMP_441(uint96)"];
4->5;
5[label="Node Type: RETURN 5
"];
6[label="Node Type: RETURN 6

EXPRESSION:
(total,left,start)

IRs:
RETURN total,left,start"];
}
// Function: 33518.sol-MarketEnabled-floor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
nutzAddr.balance == 0

IRs:
TMP_473(uint256) = SOLIDITY_CALL balance(address)(nutzAddr)
TMP_474(bool) = TMP_473 == 0
CONDITION TMP_474"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
INFINITY

IRs:
RETURN INFINITY"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
maxFloor = activeSupply().mul(1000000).div(nutzAddr.balance)

IRs:
TMP_475(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_476(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_475', '1000000'] 
TMP_477(uint256) = SOLIDITY_CALL balance(address)(nutzAddr)
TMP_478(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_476', 'TMP_477'] 
maxFloor(uint256) := TMP_478(uint256)"];
4->6;
6[label="Node Type: IF 6

EXPRESSION:
maxFloor >= salePrice

IRs:
TMP_479(bool) = maxFloor >= salePrice
CONDITION TMP_479"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
maxFloor

IRs:
RETURN maxFloor"];
8[label="Node Type: RETURN 8

EXPRESSION:
salePrice

IRs:
RETURN salePrice"];
}
// Function: 33518.sol-MarketEnabled-moveCeiling(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newPurchasePrice <= salePrice)

IRs:
TMP_480(bool) = _newPurchasePrice <= salePrice
TMP_481(None) = SOLIDITY_CALL require(bool)(TMP_480)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
purchasePrice = _newPurchasePrice

IRs:
purchasePrice(uint256) := _newPurchasePrice(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
3->1;
}
// Function: 33518.sol-MarketEnabled-moveFloor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newSalePrice >= purchasePrice)

IRs:
TMP_483(bool) = _newSalePrice >= purchasePrice
TMP_484(None) = SOLIDITY_CALL require(bool)(TMP_483)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_newSalePrice < INFINITY

IRs:
TMP_485(bool) = _newSalePrice < INFINITY
CONDITION TMP_485"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(nutzAddr.balance >= activeSupply().mul(1000000).div(_newSalePrice))

IRs:
TMP_486(uint256) = SOLIDITY_CALL balance(address)(nutzAddr)
TMP_487(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_487', '1000000'] 
TMP_489(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_488', '_newSalePrice'] 
TMP_490(bool) = TMP_486 >= TMP_489
TMP_491(None) = SOLIDITY_CALL require(bool)(TMP_490)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
salePrice = _newSalePrice

IRs:
salePrice(uint256) := _newSalePrice(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
6->1;
}
// Function: 33518.sol-MarketEnabled-onlyAdmins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
isAdmin = false

IRs:
isAdmin(bool) := False(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < admins.length

IRs:
REF_239 -> LENGTH admins
TMP_563(bool) = i < REF_239
CONDITION TMP_563"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
msg.sender == admins[i]

IRs:
REF_240(address) -> admins[i]
TMP_564(bool) = msg.sender == REF_240
CONDITION TMP_564"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isAdmin = true

IRs:
isAdmin(bool) := True(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_565(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(isAdmin == true)

IRs:
TMP_566(bool) = isAdmin == True
TMP_567(None) = SOLIDITY_CALL require(bool)(TMP_566)"];
10->11;
11[label="Node Type: _ 11
"];
}
// Function: 33518.sol-MarketEnabled-onlyNutz()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nutzAddr)

IRs:
TMP_558(bool) = msg.sender == nutzAddr
TMP_559(None) = SOLIDITY_CALL require(bool)(TMP_558)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-MarketEnabled-outstandingPower()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Power,outstandingPower)

IRs:
TMP_426 = CONVERT storageAddr to Storage
TMP_427(uint256) = HIGH_LEVEL_CALL, dest:TMP_426(Storage), function:getUInt, arguments:['Power', 'outstandingPower']  
RETURN TMP_427"];
}
// Function: 33518.sol-MarketEnabled-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 33518.sol-MarketEnabled-powerBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getBal(Power,_owner)

IRs:
TMP_422 = CONVERT storageAddr to Storage
TMP_423(uint256) = HIGH_LEVEL_CALL, dest:TMP_422(Storage), function:getBal, arguments:['Power', '_owner']  
RETURN TMP_423"];
}
// Function: 33518.sol-MarketEnabled-powerPool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,powerPool)

IRs:
TMP_418 = CONVERT storageAddr to Storage
TMP_419(uint256) = HIGH_LEVEL_CALL, dest:TMP_418(Storage), function:getUInt, arguments:['Nutz', 'powerPool']  
RETURN TMP_419"];
}
// Function: 33518.sol-MarketEnabled-purchase(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(purchasePrice > 0)

IRs:
TMP_493(bool) = purchasePrice > 0
TMP_494(None) = SOLIDITY_CALL require(bool)(TMP_493)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_price == purchasePrice)

IRs:
TMP_495(bool) = _price == purchasePrice
TMP_496(None) = SOLIDITY_CALL require(bool)(TMP_495)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountBabz = purchasePrice.mul(_value).div(1000000)

IRs:
TMP_497(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['purchasePrice', '_value'] 
TMP_498(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_497', '1000000'] 
amountBabz(uint256) := TMP_498(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(amountBabz > 0)

IRs:
TMP_499(bool) = amountBabz > 0
TMP_500(None) = SOLIDITY_CALL require(bool)(TMP_499)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
activeSup = activeSupply()

IRs:
TMP_501(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
activeSup(uint256) := TMP_501(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
powPool = powerPool()

IRs:
TMP_502(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
powPool(uint256) := TMP_502(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
powPool > 0

IRs:
TMP_503(bool) = powPool > 0
CONDITION TMP_503"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
powerShare = powPool.mul(amountBabz).div(activeSup.add(burnPool()))

IRs:
TMP_504(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['powPool', 'amountBabz'] 
TMP_505(uint256) = INTERNAL_CALL, StorageEnabled.burnPool()()
TMP_506(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['activeSup', 'TMP_505'] 
TMP_507(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_504', 'TMP_506'] 
powerShare(uint256) := TMP_507(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_setPowerPool(powPool.add(powerShare))

IRs:
TMP_508(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['powPool', 'powerShare'] 
INTERNAL_CALL, StorageEnabled._setPowerPool(uint256)(TMP_508)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_setActiveSupply(activeSup.add(amountBabz))

IRs:
TMP_510(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['activeSup', 'amountBabz'] 
INTERNAL_CALL, StorageEnabled._setActiveSupply(uint256)(TMP_510)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_setBabzBalanceOf(_sender,babzBalanceOf(_sender).add(amountBabz))

IRs:
TMP_512(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_sender)
TMP_513(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_512', 'amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_sender,TMP_513)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
amountBabz

IRs:
RETURN amountBabz"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
15->1;
}
// Function: 33518.sol-MarketEnabled-removeAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pos = admins.length

IRs:
REF_205 -> LENGTH admins
pos(uint256) := REF_205(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < admins.length

IRs:
REF_206 -> LENGTH admins
TMP_462(bool) = i < REF_206
CONDITION TMP_462"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
_admin == admins[i]

IRs:
REF_207(address) -> admins[i]
TMP_463(bool) = _admin == REF_207
CONDITION TMP_463"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
pos = i

IRs:
pos(uint256) := i(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_464(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(pos < admins.length)

IRs:
REF_208 -> LENGTH admins
TMP_465(bool) = pos < REF_208
TMP_466(None) = SOLIDITY_CALL require(bool)(TMP_465)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
pos < admins.length - 1

IRs:
REF_209 -> LENGTH admins
TMP_467(uint256) = REF_209 - 1
TMP_468(bool) = pos < TMP_467
CONDITION TMP_468"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
admins[pos] = admins[admins.length - 1]

IRs:
REF_210(address) -> admins[pos]
REF_211 -> LENGTH admins
TMP_469(uint256) = REF_211 - 1
REF_212(address) -> admins[TMP_469]
REF_210(address) (->admins) := REF_212(address)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
admins.length --

IRs:
REF_213 -> LENGTH admins
TMP_470(uint256) := REF_213(uint256)
REF_213(-> admins) = REF_213 - 1"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
15->1;
}
// Function: 33518.sol-MarketEnabled-sell(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
effectiveFloor = floor()

IRs:
TMP_517(uint256) = INTERNAL_CALL, MarketEnabled.floor()()
effectiveFloor(uint256) := TMP_517(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amountBabz != 0)

IRs:
TMP_518(bool) = _amountBabz != 0
TMP_519(None) = SOLIDITY_CALL require(bool)(TMP_518)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(effectiveFloor != INFINITY)

IRs:
TMP_520(bool) = effectiveFloor != INFINITY
TMP_521(None) = SOLIDITY_CALL require(bool)(TMP_520)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_price == effectiveFloor)

IRs:
TMP_522(bool) = _price == effectiveFloor
TMP_523(None) = SOLIDITY_CALL require(bool)(TMP_522)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
amountWei = _amountBabz.mul(1000000).div(effectiveFloor)

IRs:
TMP_524(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amountBabz', '1000000'] 
TMP_525(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_524', 'effectiveFloor'] 
amountWei(uint256) := TMP_525(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(amountWei > 0)

IRs:
TMP_526(bool) = amountWei > 0
TMP_527(None) = SOLIDITY_CALL require(bool)(TMP_526)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
powPool = powerPool()

IRs:
TMP_528(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
powPool(uint256) := TMP_528(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
activeSup = activeSupply()

IRs:
TMP_529(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
activeSup(uint256) := TMP_529(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
powPool > 0

IRs:
TMP_530(bool) = powPool > 0
CONDITION TMP_530"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
powerShare = powPool.mul(_amountBabz).div(activeSup.add(burnPool()))

IRs:
TMP_531(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['powPool', '_amountBabz'] 
TMP_532(uint256) = INTERNAL_CALL, StorageEnabled.burnPool()()
TMP_533(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['activeSup', 'TMP_532'] 
TMP_534(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_531', 'TMP_533'] 
powerShare(uint256) := TMP_534(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_setPowerPool(powPool.sub(powerShare))

IRs:
TMP_535(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['powPool', 'powerShare'] 
INTERNAL_CALL, StorageEnabled._setPowerPool(uint256)(TMP_535)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_setActiveSupply(activeSup.sub(_amountBabz))

IRs:
TMP_537(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['activeSup', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setActiveSupply(uint256)(TMP_537)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_setBabzBalanceOf(_from,babzBalanceOf(_from).sub(_amountBabz))

IRs:
TMP_539(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_from)
TMP_540(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_539', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_from,TMP_540)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Nutz(nutzAddr).asyncSend(pullAddr,_from,amountWei)

IRs:
TMP_542 = CONVERT nutzAddr to Nutz
HIGH_LEVEL_CALL, dest:TMP_542(Nutz), function:asyncSend, arguments:['pullAddr', '_from', 'amountWei']  "];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
17->1;
}
// Function: 33518.sol-MarketEnabled-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
INFINITY = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

IRs:
INFINITY(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)"];
}
// Function: 33518.sol-MarketEnabled-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
}
// Function: 33518.sol-MarketEnabled-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
activeSupply()

IRs:
TMP_373(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
RETURN TMP_373"];
}
// Function: 33518.sol-MarketEnabled-transfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(_from,_to,_amountBabz,_data)

IRs:
INTERNAL_CALL, NutzEnabled._transfer(address,address,uint256,bytes)(_from,_to,_amountBabz,_data)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 33518.sol-MarketEnabled-transferFrom(address,address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[_from][_sender] = allowed[_from][_sender].sub(_amountBabz)

IRs:
REF_177(mapping(address => uint256)) -> allowed[_from]
REF_178(uint256) -> REF_177[_sender]
REF_179(mapping(address => uint256)) -> allowed[_from]
REF_180(uint256) -> REF_179[_sender]
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_180', '_amountBabz'] 
REF_178(uint256) (->allowed) := TMP_402(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_transfer(_from,_to,_amountBabz,_data)

IRs:
INTERNAL_CALL, NutzEnabled._transfer(address,address,uint256,bytes)(_from,_to,_amountBabz,_data)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 33518.sol-MarketEnabled-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
3->1;
}
// Function: 33518.sol-MarketEnabled-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_560 = UnaryType.BANG paused 
TMP_561(None) = SOLIDITY_CALL require(bool)(TMP_560)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-MarketEnabled-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_562(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-Nutz-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33518.sol-Nutz-_checkDestination(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
codeLength > 0

IRs:
TMP_324(bool) = codeLength > 0
CONDITION TMP_324"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
untrustedReceiver = ERC223ReceivingContract(_to)

IRs:
TMP_325 = CONVERT _to to ERC223ReceivingContract
untrustedReceiver(ERC223ReceivingContract) := TMP_325(ERC223ReceivingContract)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
untrustedReceiver.tokenFallback(_from,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:untrustedReceiver(ERC223ReceivingContract), function:tokenFallback, arguments:['_from', '_value', '_data']  "];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 33518.sol-Nutz-activeSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ControllerInterface(owner).activeSupply()

IRs:
TMP_314 = CONVERT owner to ControllerInterface
TMP_315(uint256) = HIGH_LEVEL_CALL, dest:TMP_314(ControllerInterface), function:activeSupply, arguments:[]  
RETURN TMP_315"];
}
// Function: 33518.sol-Nutz-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ControllerInterface(owner).allowance(_owner,_spender)

IRs:
TMP_316 = CONVERT owner to ControllerInterface
TMP_317(uint256) = HIGH_LEVEL_CALL, dest:TMP_316(ControllerInterface), function:allowance, arguments:['_owner', '_spender']  
RETURN TMP_317"];
}
// Function: 33518.sol-Nutz-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ControllerInterface(owner).approve(msg.sender,_spender,_amountBabz)

IRs:
TMP_336 = CONVERT owner to ControllerInterface
HIGH_LEVEL_CALL, dest:TMP_336(ControllerInterface), function:approve, arguments:['msg.sender', '_spender', '_amountBabz']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_amountBabz)

IRs:
Emit Approval(msg.sender,_spender,_amountBabz)"];
}
// Function: 33518.sol-Nutz-asyncSend(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_amountWei <= this.balance)

IRs:
REF_159(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_330(bool) = _amountWei <= REF_159
TMP_331(None) = SOLIDITY_CALL assert(bool)(TMP_330)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PullPayInterface(_pullAddr).asyncSend.value(_amountWei)(_dest)

IRs:
TMP_332 = CONVERT _pullAddr to PullPayInterface
HIGH_LEVEL_CALL, dest:TMP_332(PullPayInterface), function:asyncSend, arguments:['_dest'] value:_amountWei "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 33518.sol-Nutz-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ControllerInterface(owner).babzBalanceOf(_owner)

IRs:
TMP_310 = CONVERT owner to ControllerInterface
TMP_311(uint256) = HIGH_LEVEL_CALL, dest:TMP_310(ControllerInterface), function:babzBalanceOf, arguments:['_owner']  
RETURN TMP_311"];
}
// Function: 33518.sol-Nutz-ceiling()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ControllerInterface(owner).ceiling()

IRs:
TMP_320 = CONVERT owner to ControllerInterface
TMP_321(uint256) = HIGH_LEVEL_CALL, dest:TMP_320(ControllerInterface), function:ceiling, arguments:[]  
RETURN TMP_321"];
}
// Function: 33518.sol-Nutz-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = ControllerInterface(owner).ceiling()

IRs:
TMP_350 = CONVERT owner to ControllerInterface
TMP_351(uint256) = HIGH_LEVEL_CALL, dest:TMP_350(ControllerInterface), function:ceiling, arguments:[]  
price(uint256) := TMP_351(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
purchase(price)

IRs:
INTERNAL_CALL, Nutz.purchase(uint256)(price)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_353(bool) = msg.value > 0
TMP_354(None) = SOLIDITY_CALL require(bool)(TMP_353)"];
}
// Function: 33518.sol-Nutz-floor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ControllerInterface(owner).floor()

IRs:
TMP_318 = CONVERT owner to ControllerInterface
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:TMP_318(ControllerInterface), function:floor, arguments:[]  
RETURN TMP_319"];
}
// Function: 33518.sol-Nutz-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_370(bool) = msg.sender == owner
TMP_371(None) = SOLIDITY_CALL require(bool)(TMP_370)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-Nutz-powerDown(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_checkDestination(powerAddr,_holder,_amountBabz,empty)

IRs:
INTERNAL_CALL, Nutz._checkDestination(address,address,uint256,bytes)(powerAddr,_holder,_amountBabz,empty)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(powerAddr,_holder,_amountBabz)

IRs:
Emit Transfer(powerAddr,_holder,_amountBabz)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 33518.sol-Nutz-powerPool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ControllerInterface(owner).powerPool()

IRs:
TMP_322 = CONVERT owner to ControllerInterface
TMP_323(uint256) = HIGH_LEVEL_CALL, dest:TMP_322(ControllerInterface), function:powerPool, arguments:[]  
RETURN TMP_323"];
}
// Function: 33518.sol-Nutz-powerUp(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Transfer(msg.sender,owner,_amountBabz)

IRs:
Emit Transfer(msg.sender,owner,_amountBabz)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ControllerInterface(owner).powerUp(msg.sender,msg.sender,_amountBabz)

IRs:
TMP_368 = CONVERT owner to ControllerInterface
HIGH_LEVEL_CALL, dest:TMP_368(ControllerInterface), function:powerUp, arguments:['msg.sender', 'msg.sender', '_amountBabz']  "];
}
// Function: 33518.sol-Nutz-purchase(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_355(bool) = msg.value > 0
TMP_356(None) = SOLIDITY_CALL require(bool)(TMP_355)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amountBabz = ControllerInterface(owner).purchase(msg.sender,msg.value,_price)

IRs:
TMP_357 = CONVERT owner to ControllerInterface
TMP_358(uint256) = HIGH_LEVEL_CALL, dest:TMP_357(ControllerInterface), function:purchase, arguments:['msg.sender', 'msg.value', '_price']  
amountBabz(uint256) := TMP_358(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(owner,msg.sender,amountBabz)

IRs:
Emit Transfer(owner,msg.sender,amountBabz)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_checkDestination(address(this),msg.sender,amountBabz,empty)

IRs:
TMP_360 = CONVERT this to address
INTERNAL_CALL, Nutz._checkDestination(address,address,uint256,bytes)(TMP_360,msg.sender,amountBabz,empty)"];
}
// Function: 33518.sol-Nutz-sell(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amountBabz != 0)

IRs:
TMP_362(bool) = _amountBabz != 0
TMP_363(None) = SOLIDITY_CALL require(bool)(TMP_362)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ControllerInterface(owner).sell(msg.sender,_price,_amountBabz)

IRs:
TMP_364 = CONVERT owner to ControllerInterface
HIGH_LEVEL_CALL, dest:TMP_364(ControllerInterface), function:sell, arguments:['msg.sender', '_price', '_amountBabz']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Sell(msg.sender,_amountBabz)

IRs:
Emit Sell(msg.sender,_amountBabz)"];
}
// Function: 33518.sol-Nutz-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Acebusters Nutz

IRs:
name(string) := Acebusters Nutz(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = NTZ

IRs:
symbol(string) := NTZ(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 12

IRs:
decimals(uint256) := 12(uint256)"];
}
// Function: 33518.sol-Nutz-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ControllerInterface(owner).totalSupply()

IRs:
TMP_312 = CONVERT owner to ControllerInterface
TMP_313(uint256) = HIGH_LEVEL_CALL, dest:TMP_312(ControllerInterface), function:totalSupply, arguments:[]  
RETURN TMP_313"];
}
// Function: 33518.sol-Nutz-transData(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transfer(_to,_amountBabz,_data)

IRs:
TMP_344(bool) = INTERNAL_CALL, Nutz.transfer(address,uint256,bytes)(_to,_amountBabz,_data)
RETURN TMP_344"];
}
// Function: 33518.sol-Nutz-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
transfer(_to,_amountBabz,empty)

IRs:
TMP_343(bool) = INTERNAL_CALL, Nutz.transfer(address,uint256,bytes)(_to,_amountBabz,empty)
RETURN TMP_343"];
}
// Function: 33518.sol-Nutz-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ControllerInterface(owner).transfer(msg.sender,_to,_amountBabz,_data)

IRs:
TMP_339 = CONVERT owner to ControllerInterface
HIGH_LEVEL_CALL, dest:TMP_339(ControllerInterface), function:transfer, arguments:['msg.sender', '_to', '_amountBabz', '_data']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(msg.sender,_to,_amountBabz)

IRs:
Emit Transfer(msg.sender,_to,_amountBabz)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_checkDestination(msg.sender,_to,_amountBabz,_data)

IRs:
INTERNAL_CALL, Nutz._checkDestination(address,address,uint256,bytes)(msg.sender,_to,_amountBabz,_data)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33518.sol-Nutz-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
transferFrom(_from,_to,_amountBabz,empty)

IRs:
TMP_349(bool) = INTERNAL_CALL, Nutz.transferFrom(address,address,uint256,bytes)(_from,_to,_amountBabz,empty)
RETURN TMP_349"];
}
// Function: 33518.sol-Nutz-transferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ControllerInterface(owner).transferFrom(msg.sender,_from,_to,_amountBabz,_data)

IRs:
TMP_345 = CONVERT owner to ControllerInterface
HIGH_LEVEL_CALL, dest:TMP_345(ControllerInterface), function:transferFrom, arguments:['msg.sender', '_from', '_to', '_amountBabz', '_data']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(_from,_to,_amountBabz)

IRs:
Emit Transfer(_from,_to,_amountBabz)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_checkDestination(_from,_to,_amountBabz,_data)

IRs:
INTERNAL_CALL, Nutz._checkDestination(address,address,uint256,bytes)(_from,_to,_amountBabz,_data)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33518.sol-Nutz-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_306 = CONVERT 0 to address
TMP_307(bool) = newOwner != TMP_306
TMP_308(None) = SOLIDITY_CALL require(bool)(TMP_307)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 33518.sol-NutzEnabled-Governable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admins.length = 1

IRs:
REF_99 -> LENGTH admins
REF_99(uint256) (->admins) := 1(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admins[0] = msg.sender

IRs:
REF_100(address) -> admins[0]
REF_100(address) (->admins) := msg.sender(address)"];
}
// Function: 33518.sol-NutzEnabled-NutzEnabled(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nutzAddr = _nutzAddr

IRs:
nutzAddr(address) := _nutzAddr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
StorageEnabled(_storageAddr)

IRs:
INTERNAL_CALL, StorageEnabled.StorageEnabled(address)(_storageAddr)"];
2->1;
}
// Function: 33518.sol-NutzEnabled-StorageEnabled(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
storageAddr = _storageAddr

IRs:
storageAddr(address) := _storageAddr(address)"];
}
// Function: 33518.sol-NutzEnabled-_setActiveSupply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,activeSupply,_newActiveSupply)

IRs:
TMP_147 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_147(Storage), function:setUInt, arguments:['Nutz', 'activeSupply', '_newActiveSupply']  "];
}
// Function: 33518.sol-NutzEnabled-_setAuthorizedPower(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Power,authorizedPower,_newAuthorizedPower)

IRs:
TMP_167 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_167(Storage), function:setUInt, arguments:['Power', 'authorizedPower', '_newAuthorizedPower']  "];
}
// Function: 33518.sol-NutzEnabled-_setBabzBalanceOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setBal(Nutz,_owner,_newValue)

IRs:
TMP_143 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_143(Storage), function:setBal, arguments:['Nutz', '_owner', '_newValue']  "];
}
// Function: 33518.sol-NutzEnabled-_setBurnPool(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,burnPool,_newBurnPool)

IRs:
TMP_151 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_151(Storage), function:setUInt, arguments:['Nutz', 'burnPool', '_newBurnPool']  "];
}
// Function: 33518.sol-NutzEnabled-_setDownRequest(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
result = uint64(start) + (left << 64) + (total << (96 + 64))

IRs:
TMP_177 = CONVERT start to uint64
TMP_178(uint256) = left << 64
TMP_179(uint64) = TMP_177 + TMP_178
TMP_180(uint256) = 96 + 64
TMP_181(uint256) = total << TMP_180
TMP_182(uint64) = TMP_179 + TMP_181
result(uint256) := TMP_182(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Storage(storageAddr).setBal(PowerDown,_holder,result)

IRs:
TMP_183 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_183(Storage), function:setBal, arguments:['PowerDown', '_holder', 'result']  "];
}
// Function: 33518.sol-NutzEnabled-_setOutstandingPower(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Power,outstandingPower,_newOutstandingPower)

IRs:
TMP_163 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_163(Storage), function:setUInt, arguments:['Power', 'outstandingPower', '_newOutstandingPower']  "];
}
// Function: 33518.sol-NutzEnabled-_setPowerBalanceOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setBal(Power,_owner,_newValue)

IRs:
TMP_159 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_159(Storage), function:setBal, arguments:['Power', '_owner', '_newValue']  "];
}
// Function: 33518.sol-NutzEnabled-_setPowerPool(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,powerPool,_newPowerPool)

IRs:
TMP_155 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_155(Storage), function:setUInt, arguments:['Nutz', 'powerPool', '_newPowerPool']  "];
}
// Function: 33518.sol-NutzEnabled-_transfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(this))

IRs:
TMP_218 = CONVERT this to address
TMP_219(bool) = _to != TMP_218
TMP_220(None) = SOLIDITY_CALL require(bool)(TMP_219)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_221 = CONVERT 0 to address
TMP_222(bool) = _to != TMP_221
TMP_223(None) = SOLIDITY_CALL require(bool)(TMP_222)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_amountBabz > 0)

IRs:
TMP_224(bool) = _amountBabz > 0
TMP_225(None) = SOLIDITY_CALL require(bool)(TMP_224)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_from != _to)

IRs:
TMP_226(bool) = _from != _to
TMP_227(None) = SOLIDITY_CALL require(bool)(TMP_226)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_setBabzBalanceOf(_from,babzBalanceOf(_from).sub(_amountBabz))

IRs:
TMP_228(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_from)
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_228', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_from,TMP_229)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_setBabzBalanceOf(_to,babzBalanceOf(_to).add(_amountBabz))

IRs:
TMP_231(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_to)
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_231', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_to,TMP_232)"];
}
// Function: 33518.sol-NutzEnabled-activeSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,activeSupply)

IRs:
TMP_145 = CONVERT storageAddr to Storage
TMP_146(uint256) = HIGH_LEVEL_CALL, dest:TMP_145(Storage), function:getUInt, arguments:['Nutz', 'activeSupply']  
RETURN TMP_146"];
}
// Function: 33518.sol-NutzEnabled-addAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < admins.length

IRs:
REF_101 -> LENGTH admins
TMP_189(bool) = i < REF_101
CONDITION TMP_189"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_admin != admins[i])

IRs:
REF_102(address) -> admins[i]
TMP_190(bool) = _admin != REF_102
TMP_191(None) = SOLIDITY_CALL require(bool)(TMP_190)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_192(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(admins.length < 10)

IRs:
REF_103 -> LENGTH admins
TMP_193(bool) = REF_103 < 10
TMP_194(None) = SOLIDITY_CALL require(bool)(TMP_193)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
admins[admins.length ++] = _admin

IRs:
REF_104 -> LENGTH admins
TMP_195(uint256) := REF_104(uint256)
REF_104(-> admins) = REF_104 + 1
REF_105(address) -> admins[TMP_195]
REF_105(address) (->admins) := _admin(address)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
9->3;
}
// Function: 33518.sol-NutzEnabled-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_117(mapping(address => uint256)) -> allowed[_owner]
REF_118(uint256) -> REF_117[_spender]
RETURN REF_118"];
}
// Function: 33518.sol-NutzEnabled-approve(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != _spender)

IRs:
TMP_214(bool) = _owner != _spender
TMP_215(None) = SOLIDITY_CALL require(bool)(TMP_214)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_owner][_spender] = _amountBabz

IRs:
REF_119(mapping(address => uint256)) -> allowed[_owner]
REF_120(uint256) -> REF_119[_spender]
REF_120(uint256) (->allowed) := _amountBabz(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 33518.sol-NutzEnabled-authorizedPower()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Power,authorizedPower)

IRs:
TMP_165 = CONVERT storageAddr to Storage
TMP_166(uint256) = HIGH_LEVEL_CALL, dest:TMP_165(Storage), function:getUInt, arguments:['Power', 'authorizedPower']  
RETURN TMP_166"];
}
// Function: 33518.sol-NutzEnabled-babzBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getBal(Nutz,_owner)

IRs:
TMP_141 = CONVERT storageAddr to Storage
TMP_142(uint256) = HIGH_LEVEL_CALL, dest:TMP_141(Storage), function:getBal, arguments:['Nutz', '_owner']  
RETURN TMP_142"];
}
// Function: 33518.sol-NutzEnabled-burnPool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,burnPool)

IRs:
TMP_149 = CONVERT storageAddr to Storage
TMP_150(uint256) = HIGH_LEVEL_CALL, dest:TMP_149(Storage), function:getUInt, arguments:['Nutz', 'burnPool']  
RETURN TMP_150"];
}
// Function: 33518.sol-NutzEnabled-completeSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
activeSupply().add(powerPool()).add(burnPool())

IRs:
TMP_209(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_210(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_209', 'TMP_210'] 
TMP_212(uint256) = INTERNAL_CALL, StorageEnabled.burnPool()()
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_211', 'TMP_212'] 
RETURN TMP_213"];
}
// Function: 33518.sol-NutzEnabled-downs(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
rawBytes = Storage(storageAddr).getBal(PowerDown,_user)

IRs:
TMP_169 = CONVERT storageAddr to Storage
TMP_170(uint256) = HIGH_LEVEL_CALL, dest:TMP_169(Storage), function:getBal, arguments:['PowerDown', '_user']  
rawBytes(uint256) := TMP_170(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
start = uint64(rawBytes)

IRs:
TMP_171 = CONVERT rawBytes to uint64
start(uint256) := TMP_171(uint64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
left = uint96(rawBytes >> (64))

IRs:
TMP_172(uint256) = rawBytes >> 64
TMP_173 = CONVERT TMP_172 to uint96
left(uint256) := TMP_173(uint96)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
total = uint96(rawBytes >> (96 + 64))

IRs:
TMP_174(uint256) = 96 + 64
TMP_175(uint256) = rawBytes >> TMP_174
TMP_176 = CONVERT TMP_175 to uint96
total(uint256) := TMP_176(uint96)"];
4->5;
5[label="Node Type: RETURN 5
"];
6[label="Node Type: RETURN 6

EXPRESSION:
(total,left,start)

IRs:
RETURN total,left,start"];
}
// Function: 33518.sol-NutzEnabled-onlyAdmins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
isAdmin = false

IRs:
isAdmin(bool) := False(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < admins.length

IRs:
REF_128 -> LENGTH admins
TMP_244(bool) = i < REF_128
CONDITION TMP_244"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
msg.sender == admins[i]

IRs:
REF_129(address) -> admins[i]
TMP_245(bool) = msg.sender == REF_129
CONDITION TMP_245"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isAdmin = true

IRs:
isAdmin(bool) := True(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_246(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(isAdmin == true)

IRs:
TMP_247(bool) = isAdmin == True
TMP_248(None) = SOLIDITY_CALL require(bool)(TMP_247)"];
10->11;
11[label="Node Type: _ 11
"];
}
// Function: 33518.sol-NutzEnabled-onlyNutz()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nutzAddr)

IRs:
TMP_249(bool) = msg.sender == nutzAddr
TMP_250(None) = SOLIDITY_CALL require(bool)(TMP_249)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-NutzEnabled-outstandingPower()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Power,outstandingPower)

IRs:
TMP_161 = CONVERT storageAddr to Storage
TMP_162(uint256) = HIGH_LEVEL_CALL, dest:TMP_161(Storage), function:getUInt, arguments:['Power', 'outstandingPower']  
RETURN TMP_162"];
}
// Function: 33518.sol-NutzEnabled-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 33518.sol-NutzEnabled-powerBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getBal(Power,_owner)

IRs:
TMP_157 = CONVERT storageAddr to Storage
TMP_158(uint256) = HIGH_LEVEL_CALL, dest:TMP_157(Storage), function:getBal, arguments:['Power', '_owner']  
RETURN TMP_158"];
}
// Function: 33518.sol-NutzEnabled-powerPool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,powerPool)

IRs:
TMP_153 = CONVERT storageAddr to Storage
TMP_154(uint256) = HIGH_LEVEL_CALL, dest:TMP_153(Storage), function:getUInt, arguments:['Nutz', 'powerPool']  
RETURN TMP_154"];
}
// Function: 33518.sol-NutzEnabled-removeAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pos = admins.length

IRs:
REF_106 -> LENGTH admins
pos(uint256) := REF_106(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < admins.length

IRs:
REF_107 -> LENGTH admins
TMP_197(bool) = i < REF_107
CONDITION TMP_197"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
_admin == admins[i]

IRs:
REF_108(address) -> admins[i]
TMP_198(bool) = _admin == REF_108
CONDITION TMP_198"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
pos = i

IRs:
pos(uint256) := i(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_199(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(pos < admins.length)

IRs:
REF_109 -> LENGTH admins
TMP_200(bool) = pos < REF_109
TMP_201(None) = SOLIDITY_CALL require(bool)(TMP_200)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
pos < admins.length - 1

IRs:
REF_110 -> LENGTH admins
TMP_202(uint256) = REF_110 - 1
TMP_203(bool) = pos < TMP_202
CONDITION TMP_203"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
admins[pos] = admins[admins.length - 1]

IRs:
REF_111(address) -> admins[pos]
REF_112 -> LENGTH admins
TMP_204(uint256) = REF_112 - 1
REF_113(address) -> admins[TMP_204]
REF_111(address) (->admins) := REF_113(address)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
admins.length --

IRs:
REF_114 -> LENGTH admins
TMP_205(uint256) := REF_114(uint256)
REF_114(-> admins) = REF_114 - 1"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
15->1;
}
// Function: 33518.sol-NutzEnabled-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
}
// Function: 33518.sol-NutzEnabled-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
activeSupply()

IRs:
TMP_208(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
RETURN TMP_208"];
}
// Function: 33518.sol-NutzEnabled-transfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(_from,_to,_amountBabz,_data)

IRs:
INTERNAL_CALL, NutzEnabled._transfer(address,address,uint256,bytes)(_from,_to,_amountBabz,_data)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 33518.sol-NutzEnabled-transferFrom(address,address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[_from][_sender] = allowed[_from][_sender].sub(_amountBabz)

IRs:
REF_123(mapping(address => uint256)) -> allowed[_from]
REF_124(uint256) -> REF_123[_sender]
REF_125(mapping(address => uint256)) -> allowed[_from]
REF_126(uint256) -> REF_125[_sender]
TMP_237(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_126', '_amountBabz'] 
REF_124(uint256) (->allowed) := TMP_237(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_transfer(_from,_to,_amountBabz,_data)

IRs:
INTERNAL_CALL, NutzEnabled._transfer(address,address,uint256,bytes)(_from,_to,_amountBabz,_data)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 33518.sol-NutzEnabled-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
3->1;
}
// Function: 33518.sol-NutzEnabled-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_241 = UnaryType.BANG paused 
TMP_242(None) = SOLIDITY_CALL require(bool)(TMP_241)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-NutzEnabled-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_243(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33518.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_101(bool) = msg.sender == owner
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_97 = CONVERT 0 to address
TMP_98(bool) = newOwner != TMP_97
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 33518.sol-Pausable-Governable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admins.length = 1

IRs:
REF_34 -> LENGTH admins
REF_34(uint256) (->admins) := 1(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admins[0] = msg.sender

IRs:
REF_35(address) -> admins[0]
REF_35(address) (->admins) := msg.sender(address)"];
}
// Function: 33518.sol-Pausable-addAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < admins.length

IRs:
REF_36 -> LENGTH admins
TMP_67(bool) = i < REF_36
CONDITION TMP_67"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_admin != admins[i])

IRs:
REF_37(address) -> admins[i]
TMP_68(bool) = _admin != REF_37
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_70(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(admins.length < 10)

IRs:
REF_38 -> LENGTH admins
TMP_71(bool) = REF_38 < 10
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
admins[admins.length ++] = _admin

IRs:
REF_39 -> LENGTH admins
TMP_73(uint256) := REF_39(uint256)
REF_39(-> admins) = REF_39 + 1
REF_40(address) -> admins[TMP_73]
REF_40(address) (->admins) := _admin(address)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
9->3;
}
// Function: 33518.sol-Pausable-onlyAdmins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
isAdmin = false

IRs:
isAdmin(bool) := False(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < admins.length

IRs:
REF_50 -> LENGTH admins
TMP_89(bool) = i < REF_50
CONDITION TMP_89"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
msg.sender == admins[i]

IRs:
REF_51(address) -> admins[i]
TMP_90(bool) = msg.sender == REF_51
CONDITION TMP_90"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isAdmin = true

IRs:
isAdmin(bool) := True(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_91(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(isAdmin == true)

IRs:
TMP_92(bool) = isAdmin == True
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
10->11;
11[label="Node Type: _ 11
"];
}
// Function: 33518.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 33518.sol-Pausable-removeAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pos = admins.length

IRs:
REF_41 -> LENGTH admins
pos(uint256) := REF_41(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < admins.length

IRs:
REF_42 -> LENGTH admins
TMP_75(bool) = i < REF_42
CONDITION TMP_75"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
_admin == admins[i]

IRs:
REF_43(address) -> admins[i]
TMP_76(bool) = _admin == REF_43
CONDITION TMP_76"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
pos = i

IRs:
pos(uint256) := i(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_77(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(pos < admins.length)

IRs:
REF_44 -> LENGTH admins
TMP_78(bool) = pos < REF_44
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
pos < admins.length - 1

IRs:
REF_45 -> LENGTH admins
TMP_80(uint256) = REF_45 - 1
TMP_81(bool) = pos < TMP_80
CONDITION TMP_81"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
admins[pos] = admins[admins.length - 1]

IRs:
REF_46(address) -> admins[pos]
REF_47 -> LENGTH admins
TMP_82(uint256) = REF_47 - 1
REF_48(address) -> admins[TMP_82]
REF_46(address) (->admins) := REF_48(address)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
admins.length --

IRs:
REF_49 -> LENGTH admins
TMP_83(uint256) := REF_49(uint256)
REF_49(-> admins) = REF_49 - 1"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
15->1;
}
// Function: 33518.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
}
// Function: 33518.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
3->1;
}
// Function: 33518.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_94 = UnaryType.BANG paused 
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_96(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-Power-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33518.sol-Power-activeSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ControllerInterface(owner).outstandingPower()

IRs:
TMP_111 = CONVERT owner to ControllerInterface
TMP_112(uint256) = HIGH_LEVEL_CALL, dest:TMP_111(ControllerInterface), function:outstandingPower, arguments:[]  
RETURN TMP_112"];
}
// Function: 33518.sol-Power-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ControllerInterface(owner).powerBalanceOf(_holder)

IRs:
TMP_107 = CONVERT owner to ControllerInterface
TMP_108(uint256) = HIGH_LEVEL_CALL, dest:TMP_107(ControllerInterface), function:powerBalanceOf, arguments:['_holder']  
RETURN TMP_108"];
}
// Function: 33518.sol-Power-downTick(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ControllerInterface(owner).downTick(_owner,now)

IRs:
TMP_126 = CONVERT owner to ControllerInterface
HIGH_LEVEL_CALL, dest:TMP_126(ControllerInterface), function:downTick, arguments:['_owner', 'now']  "];
}
// Function: 33518.sol-Power-downs(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ControllerInterface(owner).downs(_owner)

IRs:
TMP_128 = CONVERT owner to ControllerInterface
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_128(ControllerInterface), function:downs, arguments:['_owner']  
RETURN TUPLE_0"];
}
// Function: 33518.sol-Power-downtime()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ControllerInterface(owner).downtime

IRs:
TMP_125 = CONVERT owner to ControllerInterface
REF_56(downtime) -> TMP_125.downtime"];
}
// Function: 33518.sol-Power-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_129(bool) = msg.sender == owner
TMP_130(None) = SOLIDITY_CALL require(bool)(TMP_129)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-Power-powerUp(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Transfer(address(0),_holder,_value)

IRs:
TMP_115 = CONVERT 0 to address
Emit Transfer(TMP_115,_holder,_value)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33518.sol-Power-slashPower(address,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Slashing(_holder,_value,_data)

IRs:
Emit Slashing(_holder,_value,_data)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33518.sol-Power-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Acebusters Power

IRs:
name(string) := Acebusters Power(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = ABP

IRs:
symbol(string) := ABP(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 12

IRs:
decimals(uint256) := 12(uint256)"];
}
// Function: 33518.sol-Power-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ControllerInterface(owner).powerTotalSupply()

IRs:
TMP_109 = CONVERT owner to ControllerInterface
TMP_110(uint256) = HIGH_LEVEL_CALL, dest:TMP_109(ControllerInterface), function:powerTotalSupply, arguments:[]  
RETURN TMP_110"];
}
// Function: 33518.sol-Power-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to == address(0))

IRs:
TMP_118 = CONVERT 0 to address
TMP_119(bool) = _to == TMP_118
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ControllerInterface(owner).createDownRequest(msg.sender,_amountPower)

IRs:
TMP_121 = CONVERT owner to ControllerInterface
HIGH_LEVEL_CALL, dest:TMP_121(ControllerInterface), function:createDownRequest, arguments:['msg.sender', '_amountPower']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,address(0),_amountPower)

IRs:
TMP_123 = CONVERT 0 to address
Emit Transfer(msg.sender,TMP_123,_amountPower)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33518.sol-Power-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_103 = CONVERT 0 to address
TMP_104(bool) = newOwner != TMP_103
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 33518.sol-PowerEnabled-Governable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admins.length = 1

IRs:
REF_295 -> LENGTH admins
REF_295(uint256) (->admins) := 1(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admins[0] = msg.sender

IRs:
REF_296(address) -> admins[0]
REF_296(address) (->admins) := msg.sender(address)"];
}
// Function: 33518.sol-PowerEnabled-MarketEnabled(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pullAddr = _pullAddr

IRs:
pullAddr(address) := _pullAddr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
NutzEnabled(_nutzAddr,_storageAddr)

IRs:
INTERNAL_CALL, NutzEnabled.NutzEnabled(address,address)(_nutzAddr,_storageAddr)"];
2->1;
}
// Function: 33518.sol-PowerEnabled-NutzEnabled(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nutzAddr = _nutzAddr

IRs:
nutzAddr(address) := _nutzAddr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
StorageEnabled(_storageAddr)

IRs:
INTERNAL_CALL, StorageEnabled.StorageEnabled(address)(_storageAddr)"];
2->1;
}
// Function: 33518.sol-PowerEnabled-PowerEnabled(address,address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
powerAddr = _powerAddr

IRs:
powerAddr(address) := _powerAddr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MarketEnabled(_pullAddr,_nutzAddr,_storageAddr)

IRs:
INTERNAL_CALL, MarketEnabled.MarketEnabled(address,address,address)(_pullAddr,_nutzAddr,_storageAddr)"];
2->1;
}
// Function: 33518.sol-PowerEnabled-StorageEnabled(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
storageAddr = _storageAddr

IRs:
storageAddr(address) := _storageAddr(address)"];
}
// Function: 33518.sol-PowerEnabled-_setActiveSupply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,activeSupply,_newActiveSupply)

IRs:
TMP_694 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_694(Storage), function:setUInt, arguments:['Nutz', 'activeSupply', '_newActiveSupply']  "];
}
// Function: 33518.sol-PowerEnabled-_setAuthorizedPower(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Power,authorizedPower,_newAuthorizedPower)

IRs:
TMP_714 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_714(Storage), function:setUInt, arguments:['Power', 'authorizedPower', '_newAuthorizedPower']  "];
}
// Function: 33518.sol-PowerEnabled-_setBabzBalanceOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setBal(Nutz,_owner,_newValue)

IRs:
TMP_690 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_690(Storage), function:setBal, arguments:['Nutz', '_owner', '_newValue']  "];
}
// Function: 33518.sol-PowerEnabled-_setBurnPool(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,burnPool,_newBurnPool)

IRs:
TMP_698 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_698(Storage), function:setUInt, arguments:['Nutz', 'burnPool', '_newBurnPool']  "];
}
// Function: 33518.sol-PowerEnabled-_setDownRequest(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
result = uint64(start) + (left << 64) + (total << (96 + 64))

IRs:
TMP_724 = CONVERT start to uint64
TMP_725(uint256) = left << 64
TMP_726(uint64) = TMP_724 + TMP_725
TMP_727(uint256) = 96 + 64
TMP_728(uint256) = total << TMP_727
TMP_729(uint64) = TMP_726 + TMP_728
result(uint256) := TMP_729(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Storage(storageAddr).setBal(PowerDown,_holder,result)

IRs:
TMP_730 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_730(Storage), function:setBal, arguments:['PowerDown', '_holder', 'result']  "];
}
// Function: 33518.sol-PowerEnabled-_setOutstandingPower(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Power,outstandingPower,_newOutstandingPower)

IRs:
TMP_710 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_710(Storage), function:setUInt, arguments:['Power', 'outstandingPower', '_newOutstandingPower']  "];
}
// Function: 33518.sol-PowerEnabled-_setPowerBalanceOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setBal(Power,_owner,_newValue)

IRs:
TMP_706 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_706(Storage), function:setBal, arguments:['Power', '_owner', '_newValue']  "];
}
// Function: 33518.sol-PowerEnabled-_setPowerPool(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,powerPool,_newPowerPool)

IRs:
TMP_702 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_702(Storage), function:setUInt, arguments:['Nutz', 'powerPool', '_newPowerPool']  "];
}
// Function: 33518.sol-PowerEnabled-_slashPower(address,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
previouslyOutstanding = outstandingPower()

IRs:
TMP_781(uint256) = INTERNAL_CALL, StorageEnabled.outstandingPower()()
previouslyOutstanding(uint256) := TMP_781(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_setOutstandingPower(previouslyOutstanding.sub(_value))

IRs:
TMP_782(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['previouslyOutstanding', '_value'] 
INTERNAL_CALL, StorageEnabled._setOutstandingPower(uint256)(TMP_782)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
powPool = powerPool()

IRs:
TMP_784(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
powPool(uint256) := TMP_784(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
slashingBabz = _value.mul(powPool).div(previouslyOutstanding)

IRs:
TMP_785(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_value', 'powPool'] 
TMP_786(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_785', 'previouslyOutstanding'] 
slashingBabz(uint256) := TMP_786(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_setPowerPool(powPool.sub(slashingBabz))

IRs:
TMP_787(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['powPool', 'slashingBabz'] 
INTERNAL_CALL, StorageEnabled._setPowerPool(uint256)(TMP_787)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Power(powerAddr).slashPower(_holder,_value,_data)

IRs:
TMP_789 = CONVERT powerAddr to Power
HIGH_LEVEL_CALL, dest:TMP_789(Power), function:slashPower, arguments:['_holder', '_value', '_data']  "];
}
// Function: 33518.sol-PowerEnabled-_transfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(this))

IRs:
TMP_665 = CONVERT this to address
TMP_666(bool) = _to != TMP_665
TMP_667(None) = SOLIDITY_CALL require(bool)(TMP_666)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_668 = CONVERT 0 to address
TMP_669(bool) = _to != TMP_668
TMP_670(None) = SOLIDITY_CALL require(bool)(TMP_669)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_amountBabz > 0)

IRs:
TMP_671(bool) = _amountBabz > 0
TMP_672(None) = SOLIDITY_CALL require(bool)(TMP_671)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_from != _to)

IRs:
TMP_673(bool) = _from != _to
TMP_674(None) = SOLIDITY_CALL require(bool)(TMP_673)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_setBabzBalanceOf(_from,babzBalanceOf(_from).sub(_amountBabz))

IRs:
TMP_675(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_from)
TMP_676(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_675', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_from,TMP_676)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_setBabzBalanceOf(_to,babzBalanceOf(_to).add(_amountBabz))

IRs:
TMP_678(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_to)
TMP_679(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_678', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_to,TMP_679)"];
}
// Function: 33518.sol-PowerEnabled-_vestedDown(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_now <= _start

IRs:
TMP_840(bool) = _now <= _start
CONDITION TMP_840"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
timePassed = _now.sub(_start)

IRs:
TMP_841(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_now', '_start'] 
timePassed(uint256) := TMP_841(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
timePassed > downtime

IRs:
TMP_842(bool) = timePassed > downtime
CONDITION TMP_842"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
timePassed = downtime

IRs:
timePassed(uint256) := downtime(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
amountVested = _total.mul(timePassed).div(downtime)

IRs:
TMP_843(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_total', 'timePassed'] 
TMP_844(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_843', 'downtime'] 
amountVested(uint256) := TMP_844(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
amountFrozen = _total.sub(amountVested)

IRs:
TMP_845(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_total', 'amountVested'] 
amountFrozen(uint256) := TMP_845(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_left <= amountFrozen

IRs:
TMP_846(bool) = _left <= amountFrozen
CONDITION TMP_846"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
0

IRs:
RETURN 0"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
_left.sub(amountFrozen)

IRs:
TMP_847(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_left', 'amountFrozen'] 
RETURN TMP_847"];
}
// Function: 33518.sol-PowerEnabled-activeSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,activeSupply)

IRs:
TMP_692 = CONVERT storageAddr to Storage
TMP_693(uint256) = HIGH_LEVEL_CALL, dest:TMP_692(Storage), function:getUInt, arguments:['Nutz', 'activeSupply']  
RETURN TMP_693"];
}
// Function: 33518.sol-PowerEnabled-addAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < admins.length

IRs:
REF_297 -> LENGTH admins
TMP_736(bool) = i < REF_297
CONDITION TMP_736"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_admin != admins[i])

IRs:
REF_298(address) -> admins[i]
TMP_737(bool) = _admin != REF_298
TMP_738(None) = SOLIDITY_CALL require(bool)(TMP_737)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_739(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(admins.length < 10)

IRs:
REF_299 -> LENGTH admins
TMP_740(bool) = REF_299 < 10
TMP_741(None) = SOLIDITY_CALL require(bool)(TMP_740)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
admins[admins.length ++] = _admin

IRs:
REF_300 -> LENGTH admins
TMP_742(uint256) := REF_300(uint256)
REF_300(-> admins) = REF_300 + 1
REF_301(address) -> admins[TMP_742]
REF_301(address) (->admins) := _admin(address)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
9->3;
}
// Function: 33518.sol-PowerEnabled-allocateEther(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amountWei > 0)

IRs:
TMP_642(bool) = _amountWei > 0
TMP_643(None) = SOLIDITY_CALL require(bool)(TMP_642)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(nutzAddr.balance.sub(_amountWei) >= activeSupply().mul(1000000).div(salePrice))

IRs:
TMP_644(uint256) = SOLIDITY_CALL balance(address)(nutzAddr)
TMP_645(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_644', '_amountWei'] 
TMP_646(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_647(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_646', '1000000'] 
TMP_648(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_647', 'salePrice'] 
TMP_649(bool) = TMP_645 >= TMP_648
TMP_650(None) = SOLIDITY_CALL require(bool)(TMP_649)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Nutz(nutzAddr).asyncSend(pullAddr,_beneficiary,_amountWei)

IRs:
TMP_651 = CONVERT nutzAddr to Nutz
HIGH_LEVEL_CALL, dest:TMP_651(Nutz), function:asyncSend, arguments:['pullAddr', '_beneficiary', '_amountWei']  "];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
4->1;
}
// Function: 33518.sol-PowerEnabled-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_268(mapping(address => uint256)) -> allowed[_owner]
REF_269(uint256) -> REF_268[_spender]
RETURN REF_269"];
}
// Function: 33518.sol-PowerEnabled-approve(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != _spender)

IRs:
TMP_661(bool) = _owner != _spender
TMP_662(None) = SOLIDITY_CALL require(bool)(TMP_661)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_owner][_spender] = _amountBabz

IRs:
REF_270(mapping(address => uint256)) -> allowed[_owner]
REF_271(uint256) -> REF_270[_spender]
REF_271(uint256) (->allowed) := _amountBabz(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 33518.sol-PowerEnabled-authorizedPower()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Power,authorizedPower)

IRs:
TMP_712 = CONVERT storageAddr to Storage
TMP_713(uint256) = HIGH_LEVEL_CALL, dest:TMP_712(Storage), function:getUInt, arguments:['Power', 'authorizedPower']  
RETURN TMP_713"];
}
// Function: 33518.sol-PowerEnabled-babzBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getBal(Nutz,_owner)

IRs:
TMP_688 = CONVERT storageAddr to Storage
TMP_689(uint256) = HIGH_LEVEL_CALL, dest:TMP_688(Storage), function:getBal, arguments:['Nutz', '_owner']  
RETURN TMP_689"];
}
// Function: 33518.sol-PowerEnabled-burnPool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,burnPool)

IRs:
TMP_696 = CONVERT storageAddr to Storage
TMP_697(uint256) = HIGH_LEVEL_CALL, dest:TMP_696(Storage), function:getUInt, arguments:['Nutz', 'burnPool']  
RETURN TMP_697"];
}
// Function: 33518.sol-PowerEnabled-ceiling()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
purchasePrice

IRs:
RETURN purchasePrice"];
}
// Function: 33518.sol-PowerEnabled-completeSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
activeSupply().add(powerPool()).add(burnPool())

IRs:
TMP_656(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_657(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
TMP_658(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_656', 'TMP_657'] 
TMP_659(uint256) = INTERNAL_CALL, StorageEnabled.burnPool()()
TMP_660(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_658', 'TMP_659'] 
RETURN TMP_660"];
}
// Function: 33518.sol-PowerEnabled-createDownRequest(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amountPower >= authorizedPower().div(MIN_SHARE_OF_POWER))

IRs:
TMP_848(uint256) = INTERNAL_CALL, StorageEnabled.authorizedPower()()
TMP_849(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_848', 'MIN_SHARE_OF_POWER'] 
TMP_850(bool) = _amountPower >= TMP_849
TMP_851(None) = SOLIDITY_CALL require(bool)(TMP_850)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_setPowerBalanceOf(_owner,powerBalanceOf(_owner).sub(_amountPower))

IRs:
TMP_852(uint256) = INTERNAL_CALL, StorageEnabled.powerBalanceOf(address)(_owner)
TMP_853(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_852', '_amountPower'] 
INTERNAL_CALL, StorageEnabled._setPowerBalanceOf(address,uint256)(_owner,TMP_853)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
left = downs(_owner)

IRs:
TUPLE_2(uint256,uint256,uint256) = INTERNAL_CALL, StorageEnabled.downs(address)(_owner)
left(uint256) := TUPLE_2([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f437dee4bb0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f437dee4ca0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f437dee4d90>])"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
total = _amountPower.add(left)

IRs:
TMP_855(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_amountPower', 'left'] 
total(uint256) := TMP_855(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_setDownRequest(_owner,total,total,now)

IRs:
INTERNAL_CALL, StorageEnabled._setDownRequest(address,uint256,uint256,uint256)(_owner,total,total,now)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyPower()

IRs:
MODIFIER_CALL, PowerEnabled.onlyPower()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
7->1;
}
// Function: 33518.sol-PowerEnabled-dilutePower(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
authorizedPow = authorizedPower()

IRs:
TMP_766(uint256) = INTERNAL_CALL, StorageEnabled.authorizedPower()()
authorizedPow(uint256) := TMP_766(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalBabz = completeSupply()

IRs:
TMP_767(uint256) = INTERNAL_CALL, NutzEnabled.completeSupply()()
totalBabz(uint256) := TMP_767(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
authorizedPow == 0

IRs:
TMP_768(bool) = authorizedPow == 0
CONDITION TMP_768"];
3->9[label="True"];
3->5[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_setAuthorizedPower(authorizedPow.mul(totalBabz.add(_amountBabz)).div(totalBabz))

IRs:
TMP_769(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalBabz', '_amountBabz'] 
TMP_770(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['authorizedPow', 'TMP_769'] 
TMP_771(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_770', 'totalBabz'] 
INTERNAL_CALL, StorageEnabled._setAuthorizedPower(uint256)(TMP_771)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_setBurnPool(burnPool().add(_amountBabz))

IRs:
TMP_773(uint256) = INTERNAL_CALL, StorageEnabled.burnPool()()
TMP_774(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_773', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBurnPool(uint256)(TMP_774)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
8->1;
9[label="Node Type: IF 9

EXPRESSION:
(_amountPower > 0)

IRs:
TMP_777(bool) = _amountPower > 0
CONDITION TMP_777"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_setAuthorizedPower(_amountPower)

IRs:
INTERNAL_CALL, StorageEnabled._setAuthorizedPower(uint256)(_amountPower)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_setAuthorizedPower(_amountBabz.add(totalBabz))

IRs:
TMP_779(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_amountBabz', 'totalBabz'] 
INTERNAL_CALL, StorageEnabled._setAuthorizedPower(uint256)(TMP_779)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->6;
}
// Function: 33518.sol-PowerEnabled-downTick(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
(total,left,start) = downs(_holder)

IRs:
TUPLE_3(uint256,uint256,uint256) = INTERNAL_CALL, StorageEnabled.downs(address)(_holder)
total(uint256)= UNPACK TUPLE_3 index: 0 
left(uint256)= UNPACK TUPLE_3 index: 1 
start(uint256)= UNPACK TUPLE_3 index: 2 "];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
amountPow = _vestedDown(total,left,start,_now)

IRs:
TMP_859(uint256) = INTERNAL_CALL, PowerEnabled._vestedDown(uint256,uint256,uint256,uint256)(total,left,start,_now)
amountPow(uint256) := TMP_859(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
minStep = total.div(10)

IRs:
TMP_860(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['total', '10'] 
minStep(uint256) := TMP_860(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(left <= minStep || minStep <= amountPow)

IRs:
TMP_861(bool) = left <= minStep
TMP_862(bool) = minStep <= amountPow
TMP_863(bool) = TMP_861 || TMP_862
TMP_864(None) = SOLIDITY_CALL require(bool)(TMP_863)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
amountBabz = amountPow.mul(completeSupply()).div(authorizedPower())

IRs:
TMP_865(uint256) = INTERNAL_CALL, NutzEnabled.completeSupply()()
TMP_866(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amountPow', 'TMP_865'] 
TMP_867(uint256) = INTERNAL_CALL, StorageEnabled.authorizedPower()()
TMP_868(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_866', 'TMP_867'] 
amountBabz(uint256) := TMP_868(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_setOutstandingPower(outstandingPower().sub(amountPow))

IRs:
TMP_869(uint256) = INTERNAL_CALL, StorageEnabled.outstandingPower()()
TMP_870(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_869', 'amountPow'] 
INTERNAL_CALL, StorageEnabled._setOutstandingPower(uint256)(TMP_870)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
left = left.sub(amountPow)

IRs:
TMP_872(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['left', 'amountPow'] 
left(uint256) := TMP_872(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_setPowerPool(powerPool().sub(amountBabz))

IRs:
TMP_873(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
TMP_874(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_873', 'amountBabz'] 
INTERNAL_CALL, StorageEnabled._setPowerPool(uint256)(TMP_874)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_setActiveSupply(activeSupply().add(amountBabz))

IRs:
TMP_876(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_877(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_876', 'amountBabz'] 
INTERNAL_CALL, StorageEnabled._setActiveSupply(uint256)(TMP_877)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_setBabzBalanceOf(_holder,babzBalanceOf(_holder).add(amountBabz))

IRs:
TMP_879(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_holder)
TMP_880(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_879', 'amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_holder,TMP_880)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
left == 0

IRs:
TMP_882(bool) = left == 0
CONDITION TMP_882"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
start = 0

IRs:
start(uint256) := 0(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
total = 0

IRs:
total(uint256) := 0(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_setDownRequest(_holder,total,left,start)

IRs:
INTERNAL_CALL, StorageEnabled._setDownRequest(address,uint256,uint256,uint256)(_holder,total,left,start)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Nutz(nutzAddr).powerDown(powerAddr,_holder,amountBabz)

IRs:
TMP_884 = CONVERT nutzAddr to Nutz
HIGH_LEVEL_CALL, dest:TMP_884(Nutz), function:powerDown, arguments:['powerAddr', '_holder', 'amountBabz']  "];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyPower()

IRs:
MODIFIER_CALL, PowerEnabled.onlyPower()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
21->1;
}
// Function: 33518.sol-PowerEnabled-downs(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
rawBytes = Storage(storageAddr).getBal(PowerDown,_user)

IRs:
TMP_716 = CONVERT storageAddr to Storage
TMP_717(uint256) = HIGH_LEVEL_CALL, dest:TMP_716(Storage), function:getBal, arguments:['PowerDown', '_user']  
rawBytes(uint256) := TMP_717(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
start = uint64(rawBytes)

IRs:
TMP_718 = CONVERT rawBytes to uint64
start(uint256) := TMP_718(uint64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
left = uint96(rawBytes >> (64))

IRs:
TMP_719(uint256) = rawBytes >> 64
TMP_720 = CONVERT TMP_719 to uint96
left(uint256) := TMP_720(uint96)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
total = uint96(rawBytes >> (96 + 64))

IRs:
TMP_721(uint256) = 96 + 64
TMP_722(uint256) = rawBytes >> TMP_721
TMP_723 = CONVERT TMP_722 to uint96
total(uint256) := TMP_723(uint96)"];
4->5;
5[label="Node Type: RETURN 5
"];
6[label="Node Type: RETURN 6

EXPRESSION:
(total,left,start)

IRs:
RETURN total,left,start"];
}
// Function: 33518.sol-PowerEnabled-floor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
nutzAddr.balance == 0

IRs:
TMP_569(uint256) = SOLIDITY_CALL balance(address)(nutzAddr)
TMP_570(bool) = TMP_569 == 0
CONDITION TMP_570"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
INFINITY

IRs:
RETURN INFINITY"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
maxFloor = activeSupply().mul(1000000).div(nutzAddr.balance)

IRs:
TMP_571(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_572(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_571', '1000000'] 
TMP_573(uint256) = SOLIDITY_CALL balance(address)(nutzAddr)
TMP_574(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_572', 'TMP_573'] 
maxFloor(uint256) := TMP_574(uint256)"];
4->6;
6[label="Node Type: IF 6

EXPRESSION:
maxFloor >= salePrice

IRs:
TMP_575(bool) = maxFloor >= salePrice
CONDITION TMP_575"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
maxFloor

IRs:
RETURN maxFloor"];
8[label="Node Type: RETURN 8

EXPRESSION:
salePrice

IRs:
RETURN salePrice"];
}
// Function: 33518.sol-PowerEnabled-minimumPowerUpSizeBabz()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
completeSupplyBabz = completeSupply()

IRs:
TMP_763(uint256) = INTERNAL_CALL, NutzEnabled.completeSupply()()
completeSupplyBabz(uint256) := TMP_763(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
completeSupplyBabz == 0

IRs:
TMP_764(bool) = completeSupplyBabz == 0
CONDITION TMP_764"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
INFINITY

IRs:
RETURN INFINITY"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
completeSupplyBabz.div(MIN_SHARE_OF_POWER)

IRs:
TMP_765(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['completeSupplyBabz', 'MIN_SHARE_OF_POWER'] 
RETURN TMP_765"];
}
// Function: 33518.sol-PowerEnabled-moveCeiling(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newPurchasePrice <= salePrice)

IRs:
TMP_576(bool) = _newPurchasePrice <= salePrice
TMP_577(None) = SOLIDITY_CALL require(bool)(TMP_576)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
purchasePrice = _newPurchasePrice

IRs:
purchasePrice(uint256) := _newPurchasePrice(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
3->1;
}
// Function: 33518.sol-PowerEnabled-moveFloor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newSalePrice >= purchasePrice)

IRs:
TMP_579(bool) = _newSalePrice >= purchasePrice
TMP_580(None) = SOLIDITY_CALL require(bool)(TMP_579)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_newSalePrice < INFINITY

IRs:
TMP_581(bool) = _newSalePrice < INFINITY
CONDITION TMP_581"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(nutzAddr.balance >= activeSupply().mul(1000000).div(_newSalePrice))

IRs:
TMP_582(uint256) = SOLIDITY_CALL balance(address)(nutzAddr)
TMP_583(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_584(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_583', '1000000'] 
TMP_585(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_584', '_newSalePrice'] 
TMP_586(bool) = TMP_582 >= TMP_585
TMP_587(None) = SOLIDITY_CALL require(bool)(TMP_586)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
salePrice = _newSalePrice

IRs:
salePrice(uint256) := _newSalePrice(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
6->1;
}
// Function: 33518.sol-PowerEnabled-onlyAdmins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
isAdmin = false

IRs:
isAdmin(bool) := False(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < admins.length

IRs:
REF_357 -> LENGTH admins
TMP_893(bool) = i < REF_357
CONDITION TMP_893"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
msg.sender == admins[i]

IRs:
REF_358(address) -> admins[i]
TMP_894(bool) = msg.sender == REF_358
CONDITION TMP_894"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isAdmin = true

IRs:
isAdmin(bool) := True(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_895(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(isAdmin == true)

IRs:
TMP_896(bool) = isAdmin == True
TMP_897(None) = SOLIDITY_CALL require(bool)(TMP_896)"];
10->11;
11[label="Node Type: _ 11
"];
}
// Function: 33518.sol-PowerEnabled-onlyNutz()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == nutzAddr)

IRs:
TMP_888(bool) = msg.sender == nutzAddr
TMP_889(None) = SOLIDITY_CALL require(bool)(TMP_888)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-PowerEnabled-onlyPower()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == powerAddr)

IRs:
TMP_898(bool) = msg.sender == powerAddr
TMP_899(None) = SOLIDITY_CALL require(bool)(TMP_898)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-PowerEnabled-outstandingPower()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Power,outstandingPower)

IRs:
TMP_708 = CONVERT storageAddr to Storage
TMP_709(uint256) = HIGH_LEVEL_CALL, dest:TMP_708(Storage), function:getUInt, arguments:['Power', 'outstandingPower']  
RETURN TMP_709"];
}
// Function: 33518.sol-PowerEnabled-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 33518.sol-PowerEnabled-powerBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getBal(Power,_owner)

IRs:
TMP_704 = CONVERT storageAddr to Storage
TMP_705(uint256) = HIGH_LEVEL_CALL, dest:TMP_704(Storage), function:getBal, arguments:['Power', '_owner']  
RETURN TMP_705"];
}
// Function: 33518.sol-PowerEnabled-powerPool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,powerPool)

IRs:
TMP_700 = CONVERT storageAddr to Storage
TMP_701(uint256) = HIGH_LEVEL_CALL, dest:TMP_700(Storage), function:getUInt, arguments:['Nutz', 'powerPool']  
RETURN TMP_701"];
}
// Function: 33518.sol-PowerEnabled-powerTotalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
issuedPower = authorizedPower().div(2)

IRs:
TMP_837(uint256) = INTERNAL_CALL, StorageEnabled.authorizedPower()()
TMP_838(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_837', '2'] 
issuedPower(uint256) := TMP_838(uint256)"];
1->3;
3[label="Node Type: IF 3

EXPRESSION:
maxPower >= issuedPower

IRs:
TMP_839(bool) = maxPower >= issuedPower
CONDITION TMP_839"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
maxPower

IRs:
RETURN maxPower"];
5[label="Node Type: RETURN 5

EXPRESSION:
issuedPower

IRs:
RETURN issuedPower"];
}
// Function: 33518.sol-PowerEnabled-powerUp(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
authorizedPow = authorizedPower()

IRs:
TMP_800(uint256) = INTERNAL_CALL, StorageEnabled.authorizedPower()()
authorizedPow(uint256) := TMP_800(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(authorizedPow != 0)

IRs:
TMP_801(bool) = authorizedPow != 0
TMP_802(None) = SOLIDITY_CALL require(bool)(TMP_801)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_amountBabz != 0)

IRs:
TMP_803(bool) = _amountBabz != 0
TMP_804(None) = SOLIDITY_CALL require(bool)(TMP_803)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
totalBabz = completeSupply()

IRs:
TMP_805(uint256) = INTERNAL_CALL, NutzEnabled.completeSupply()()
totalBabz(uint256) := TMP_805(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(totalBabz != 0)

IRs:
TMP_806(bool) = totalBabz != 0
TMP_807(None) = SOLIDITY_CALL require(bool)(TMP_806)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
amountPow = _amountBabz.mul(authorizedPow).div(totalBabz)

IRs:
TMP_808(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amountBabz', 'authorizedPow'] 
TMP_809(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_808', 'totalBabz'] 
amountPow(uint256) := TMP_809(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
outstandingPow = outstandingPower()

IRs:
TMP_810(uint256) = INTERNAL_CALL, StorageEnabled.outstandingPower()()
outstandingPow(uint256) := TMP_810(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(outstandingPow.add(amountPow) <= maxPower)

IRs:
TMP_811(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['outstandingPow', 'amountPow'] 
TMP_812(bool) = TMP_811 <= maxPower
TMP_813(None) = SOLIDITY_CALL require(bool)(TMP_812)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
powBal = powerBalanceOf(_from).add(amountPow)

IRs:
TMP_814(uint256) = INTERNAL_CALL, StorageEnabled.powerBalanceOf(address)(_from)
TMP_815(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_814', 'amountPow'] 
powBal(uint256) := TMP_815(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(powBal >= authorizedPow.div(MIN_SHARE_OF_POWER))

IRs:
TMP_816(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['authorizedPow', 'MIN_SHARE_OF_POWER'] 
TMP_817(bool) = powBal >= TMP_816
TMP_818(None) = SOLIDITY_CALL require(bool)(TMP_817)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_sender != _from

IRs:
TMP_819(bool) = _sender != _from
CONDITION TMP_819"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
allowed[_from][_sender] = allowed[_from][_sender].sub(_amountBabz)

IRs:
REF_329(mapping(address => uint256)) -> allowed[_from]
REF_330(uint256) -> REF_329[_sender]
REF_331(mapping(address => uint256)) -> allowed[_from]
REF_332(uint256) -> REF_331[_sender]
TMP_820(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_332', '_amountBabz'] 
REF_330(uint256) (->allowed) := TMP_820(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_setOutstandingPower(outstandingPow.add(amountPow))

IRs:
TMP_821(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['outstandingPow', 'amountPow'] 
INTERNAL_CALL, StorageEnabled._setOutstandingPower(uint256)(TMP_821)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_setPowerBalanceOf(_from,powBal)

IRs:
INTERNAL_CALL, StorageEnabled._setPowerBalanceOf(address,uint256)(_from,powBal)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_setActiveSupply(activeSupply().sub(_amountBabz))

IRs:
TMP_824(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
TMP_825(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_824', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setActiveSupply(uint256)(TMP_825)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_setBabzBalanceOf(_from,babzBalanceOf(_from).sub(_amountBabz))

IRs:
TMP_827(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_from)
TMP_828(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_827', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_from,TMP_828)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_setPowerPool(powerPool().add(_amountBabz))

IRs:
TMP_830(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
TMP_831(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_830', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setPowerPool(uint256)(TMP_831)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Power(powerAddr).powerUp(_from,amountPow)

IRs:
TMP_833 = CONVERT powerAddr to Power
HIGH_LEVEL_CALL, dest:TMP_833(Power), function:powerUp, arguments:['_from', 'amountPow']  "];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
21->1;
}
// Function: 33518.sol-PowerEnabled-purchase(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(purchasePrice > 0)

IRs:
TMP_589(bool) = purchasePrice > 0
TMP_590(None) = SOLIDITY_CALL require(bool)(TMP_589)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_price == purchasePrice)

IRs:
TMP_591(bool) = _price == purchasePrice
TMP_592(None) = SOLIDITY_CALL require(bool)(TMP_591)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountBabz = purchasePrice.mul(_value).div(1000000)

IRs:
TMP_593(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['purchasePrice', '_value'] 
TMP_594(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_593', '1000000'] 
amountBabz(uint256) := TMP_594(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(amountBabz > 0)

IRs:
TMP_595(bool) = amountBabz > 0
TMP_596(None) = SOLIDITY_CALL require(bool)(TMP_595)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
activeSup = activeSupply()

IRs:
TMP_597(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
activeSup(uint256) := TMP_597(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
powPool = powerPool()

IRs:
TMP_598(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
powPool(uint256) := TMP_598(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
powPool > 0

IRs:
TMP_599(bool) = powPool > 0
CONDITION TMP_599"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
powerShare = powPool.mul(amountBabz).div(activeSup.add(burnPool()))

IRs:
TMP_600(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['powPool', 'amountBabz'] 
TMP_601(uint256) = INTERNAL_CALL, StorageEnabled.burnPool()()
TMP_602(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['activeSup', 'TMP_601'] 
TMP_603(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_600', 'TMP_602'] 
powerShare(uint256) := TMP_603(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_setPowerPool(powPool.add(powerShare))

IRs:
TMP_604(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['powPool', 'powerShare'] 
INTERNAL_CALL, StorageEnabled._setPowerPool(uint256)(TMP_604)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_setActiveSupply(activeSup.add(amountBabz))

IRs:
TMP_606(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['activeSup', 'amountBabz'] 
INTERNAL_CALL, StorageEnabled._setActiveSupply(uint256)(TMP_606)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_setBabzBalanceOf(_sender,babzBalanceOf(_sender).add(amountBabz))

IRs:
TMP_608(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_sender)
TMP_609(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_608', 'amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_sender,TMP_609)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
amountBabz

IRs:
RETURN amountBabz"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
15->1;
}
// Function: 33518.sol-PowerEnabled-removeAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pos = admins.length

IRs:
REF_302 -> LENGTH admins
pos(uint256) := REF_302(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < admins.length

IRs:
REF_303 -> LENGTH admins
TMP_744(bool) = i < REF_303
CONDITION TMP_744"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
_admin == admins[i]

IRs:
REF_304(address) -> admins[i]
TMP_745(bool) = _admin == REF_304
CONDITION TMP_745"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
pos = i

IRs:
pos(uint256) := i(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_746(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(pos < admins.length)

IRs:
REF_305 -> LENGTH admins
TMP_747(bool) = pos < REF_305
TMP_748(None) = SOLIDITY_CALL require(bool)(TMP_747)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
pos < admins.length - 1

IRs:
REF_306 -> LENGTH admins
TMP_749(uint256) = REF_306 - 1
TMP_750(bool) = pos < TMP_749
CONDITION TMP_750"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
admins[pos] = admins[admins.length - 1]

IRs:
REF_307(address) -> admins[pos]
REF_308 -> LENGTH admins
TMP_751(uint256) = REF_308 - 1
REF_309(address) -> admins[TMP_751]
REF_307(address) (->admins) := REF_309(address)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
admins.length --

IRs:
REF_310 -> LENGTH admins
TMP_752(uint256) := REF_310(uint256)
REF_310(-> admins) = REF_310 - 1"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
15->1;
}
// Function: 33518.sol-PowerEnabled-sell(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
effectiveFloor = floor()

IRs:
TMP_613(uint256) = INTERNAL_CALL, MarketEnabled.floor()()
effectiveFloor(uint256) := TMP_613(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amountBabz != 0)

IRs:
TMP_614(bool) = _amountBabz != 0
TMP_615(None) = SOLIDITY_CALL require(bool)(TMP_614)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(effectiveFloor != INFINITY)

IRs:
TMP_616(bool) = effectiveFloor != INFINITY
TMP_617(None) = SOLIDITY_CALL require(bool)(TMP_616)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_price == effectiveFloor)

IRs:
TMP_618(bool) = _price == effectiveFloor
TMP_619(None) = SOLIDITY_CALL require(bool)(TMP_618)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
amountWei = _amountBabz.mul(1000000).div(effectiveFloor)

IRs:
TMP_620(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amountBabz', '1000000'] 
TMP_621(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_620', 'effectiveFloor'] 
amountWei(uint256) := TMP_621(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(amountWei > 0)

IRs:
TMP_622(bool) = amountWei > 0
TMP_623(None) = SOLIDITY_CALL require(bool)(TMP_622)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
powPool = powerPool()

IRs:
TMP_624(uint256) = INTERNAL_CALL, StorageEnabled.powerPool()()
powPool(uint256) := TMP_624(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
activeSup = activeSupply()

IRs:
TMP_625(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
activeSup(uint256) := TMP_625(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
powPool > 0

IRs:
TMP_626(bool) = powPool > 0
CONDITION TMP_626"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
powerShare = powPool.mul(_amountBabz).div(activeSup.add(burnPool()))

IRs:
TMP_627(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['powPool', '_amountBabz'] 
TMP_628(uint256) = INTERNAL_CALL, StorageEnabled.burnPool()()
TMP_629(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['activeSup', 'TMP_628'] 
TMP_630(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_627', 'TMP_629'] 
powerShare(uint256) := TMP_630(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_setPowerPool(powPool.sub(powerShare))

IRs:
TMP_631(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['powPool', 'powerShare'] 
INTERNAL_CALL, StorageEnabled._setPowerPool(uint256)(TMP_631)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_setActiveSupply(activeSup.sub(_amountBabz))

IRs:
TMP_633(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['activeSup', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setActiveSupply(uint256)(TMP_633)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_setBabzBalanceOf(_from,babzBalanceOf(_from).sub(_amountBabz))

IRs:
TMP_635(uint256) = INTERNAL_CALL, StorageEnabled.babzBalanceOf(address)(_from)
TMP_636(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_635', '_amountBabz'] 
INTERNAL_CALL, StorageEnabled._setBabzBalanceOf(address,uint256)(_from,TMP_636)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Nutz(nutzAddr).asyncSend(pullAddr,_from,amountWei)

IRs:
TMP_638 = CONVERT nutzAddr to Nutz
HIGH_LEVEL_CALL, dest:TMP_638(Nutz), function:asyncSend, arguments:['pullAddr', '_from', 'amountWei']  "];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
17->1;
}
// Function: 33518.sol-PowerEnabled-setDowntime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
downtime = _downtime

IRs:
downtime(uint256) := _downtime(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
2->1;
}
// Function: 33518.sol-PowerEnabled-setMaxPower(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(outstandingPower() <= _maxPower && _maxPower < authorizedPower())

IRs:
TMP_755(uint256) = INTERNAL_CALL, StorageEnabled.outstandingPower()()
TMP_756(bool) = TMP_755 <= _maxPower
TMP_757(uint256) = INTERNAL_CALL, StorageEnabled.authorizedPower()()
TMP_758(bool) = _maxPower < TMP_757
TMP_759(bool) = TMP_756 && TMP_758
TMP_760(None) = SOLIDITY_CALL require(bool)(TMP_759)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
maxPower = _maxPower

IRs:
maxPower(uint256) := _maxPower(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
3->1;
}
// Function: 33518.sol-PowerEnabled-slashDownRequest(uint256,address,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
(total,left,start) = downs(_holder)

IRs:
TUPLE_1(uint256,uint256,uint256) = INTERNAL_CALL, StorageEnabled.downs(address)(_holder)
total(uint256)= UNPACK TUPLE_1 index: 0 
left(uint256)= UNPACK TUPLE_1 index: 1 
start(uint256)= UNPACK TUPLE_1 index: 2 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
left = left.sub(_value)

IRs:
TMP_796(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['left', '_value'] 
left(uint256) := TMP_796(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_setDownRequest(_holder,total,left,start)

IRs:
INTERNAL_CALL, StorageEnabled._setDownRequest(address,uint256,uint256,uint256)(_holder,total,left,start)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_slashPower(_holder,_value,_data)

IRs:
INTERNAL_CALL, PowerEnabled._slashPower(address,uint256,bytes32)(_holder,_value,_data)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
8->1;
}
// Function: 33518.sol-PowerEnabled-slashPower(address,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_setPowerBalanceOf(_holder,powerBalanceOf(_holder).sub(_value))

IRs:
TMP_791(uint256) = INTERNAL_CALL, StorageEnabled.powerBalanceOf(address)(_holder)
TMP_792(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_791', '_value'] 
INTERNAL_CALL, StorageEnabled._setPowerBalanceOf(address,uint256)(_holder,TMP_792)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_slashPower(_holder,_value,_data)

IRs:
INTERNAL_CALL, PowerEnabled._slashPower(address,uint256,bytes32)(_holder,_value,_data)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
3->1;
}
// Function: 33518.sol-PowerEnabled-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
INFINITY = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

IRs:
INFINITY(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
MIN_SHARE_OF_POWER = 100000

IRs:
MIN_SHARE_OF_POWER(uint256) := 100000(uint256)"];
}
// Function: 33518.sol-PowerEnabled-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
maxPower = 0

IRs:
maxPower(uint256) := 0(uint256)"];
}
// Function: 33518.sol-PowerEnabled-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
activeSupply()

IRs:
TMP_655(uint256) = INTERNAL_CALL, StorageEnabled.activeSupply()()
RETURN TMP_655"];
}
// Function: 33518.sol-PowerEnabled-transfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(_from,_to,_amountBabz,_data)

IRs:
INTERNAL_CALL, NutzEnabled._transfer(address,address,uint256,bytes)(_from,_to,_amountBabz,_data)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 33518.sol-PowerEnabled-transferFrom(address,address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[_from][_sender] = allowed[_from][_sender].sub(_amountBabz)

IRs:
REF_274(mapping(address => uint256)) -> allowed[_from]
REF_275(uint256) -> REF_274[_sender]
REF_276(mapping(address => uint256)) -> allowed[_from]
REF_277(uint256) -> REF_276[_sender]
TMP_684(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_277', '_amountBabz'] 
REF_275(uint256) (->allowed) := TMP_684(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_transfer(_from,_to,_amountBabz,_data)

IRs:
INTERNAL_CALL, NutzEnabled._transfer(address,address,uint256,bytes)(_from,_to,_amountBabz,_data)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, NutzEnabled.onlyNutz()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 33518.sol-PowerEnabled-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, Governable.onlyAdmins()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
3->1;
}
// Function: 33518.sol-PowerEnabled-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_890 = UnaryType.BANG paused 
TMP_891(None) = SOLIDITY_CALL require(bool)(TMP_890)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-PowerEnabled-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_892(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-PullPayInterface-asyncSend(address)
digraph{
}
// Function: 33518.sol-PullPayment-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33518.sol-PullPayment-asyncSend(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_263(bool) = msg.value > 0
TMP_264(None) = SOLIDITY_CALL require(bool)(TMP_263)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newValue = msg.value.add(uint192(payments[_dest]))

IRs:
REF_136(uint256) -> payments[_dest]
TMP_265 = CONVERT REF_136 to uint192
TMP_266(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['msg.value', 'TMP_265'] 
newValue(uint256) := TMP_266(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
isUnderLimit(msg.value)

IRs:
TMP_267(bool) = INTERNAL_CALL, PullPayment.isUnderLimit(uint256)(msg.value)
CONDITION TMP_267"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
date = payments[_dest] >> 192

IRs:
REF_137(uint256) -> payments[_dest]
TMP_268(uint256) = REF_137 >> 192
date(uint256) := TMP_268(uint256)"];
5->12;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
newDate = now.add(259200)

IRs:
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', '259200'] 
newDate(uint256) := TMP_269(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
spentToday = spentToday.add(msg.value)

IRs:
TMP_270(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['spentToday', 'msg.value'] 
spentToday(uint256) := TMP_270(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
payments[_dest] = (newDate << 192) + uint192(newValue)

IRs:
REF_140(uint256) -> payments[_dest]
TMP_271(uint256) = newDate << 192
TMP_272 = CONVERT newValue to uint192
TMP_273(uint256) = TMP_271 + TMP_272
REF_140(uint256) (->payments) := TMP_273(uint256)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyNutz()

IRs:
MODIFIER_CALL, PullPayment.onlyNutz()()"];
11->1;
12[label="Node Type: IF 12

EXPRESSION:
(date > now)

IRs:
TMP_275(bool) = date > now
CONDITION TMP_275"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
newDate = date

IRs:
newDate(uint256) := date(uint256)"];
13->15;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
newDate = now

IRs:
newDate(uint256) := now(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->8;
}
// Function: 33518.sol-PullPayment-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint192(payments[_owner])

IRs:
REF_130(uint256) -> payments[_owner]
TMP_255 = CONVERT REF_130 to uint192
RETURN TMP_255"];
2[label="Node Type: RETURN 2

EXPRESSION:
value

IRs:
RETURN value"];
}
// Function: 33518.sol-PullPayment-changeDailyLimit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
dailyLimit = _dailyLimit

IRs:
dailyLimit(uint256) := _dailyLimit(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33518.sol-PullPayment-changeWithdrawalDate(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
payments[_owner] = (_newDate << 192) + uint192(payments[_owner])

IRs:
REF_133(uint256) -> payments[_owner]
TMP_259(uint256) = _newDate << 192
REF_134(uint256) -> payments[_owner]
TMP_260 = CONVERT REF_134 to uint192
TMP_261(uint256) = TMP_259 + TMP_260
REF_133(uint256) (->payments) := TMP_261(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33518.sol-PullPayment-isUnderLimit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
now > lastDay.add(86400)

IRs:
TMP_289(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lastDay', '86400'] 
TMP_290(bool) = now > TMP_289
CONDITION TMP_290"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lastDay = now

IRs:
lastDay(uint256) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spentToday = 0

IRs:
spentToday(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
spentToday + amount > dailyLimit || spentToday + amount < spentToday

IRs:
TMP_291(uint256) = spentToday + amount
TMP_292(bool) = TMP_291 > dailyLimit
TMP_293(uint256) = spentToday + amount
TMP_294(bool) = TMP_293 < spentToday
TMP_295(bool) = TMP_292 || TMP_294
CONDITION TMP_295"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33518.sol-PullPayment-onlyNutz()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ControllerInterface(owner).nutzAddr())

IRs:
TMP_298 = CONVERT owner to ControllerInterface
TMP_299(address) = HIGH_LEVEL_CALL, dest:TMP_298(ControllerInterface), function:nutzAddr, arguments:[]  
TMP_300(bool) = msg.sender == TMP_299
TMP_301(None) = SOLIDITY_CALL require(bool)(TMP_300)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-PullPayment-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_296(bool) = msg.sender == owner
TMP_297(None) = SOLIDITY_CALL require(bool)(TMP_296)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-PullPayment-paymentOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
value = uint192(payments[_owner])

IRs:
REF_131(uint256) -> payments[_owner]
TMP_256 = CONVERT REF_131 to uint192
value(uint256) := TMP_256(uint192)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
date = (payments[_owner] >> 192)

IRs:
REF_132(uint256) -> payments[_owner]
TMP_257(uint256) = REF_132 >> 192
date(uint256) := TMP_257(uint256)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: RETURN 4

EXPRESSION:
(value,date)

IRs:
RETURN value,date"];
}
// Function: 33518.sol-PullPayment-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
dailyLimit = 1000000000000000000000

IRs:
dailyLimit(uint256) := 1000000000000000000000(uint256)"];
}
// Function: 33518.sol-PullPayment-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_251 = CONVERT 0 to address
TMP_252(bool) = newOwner != TMP_251
TMP_253(None) = SOLIDITY_CALL require(bool)(TMP_252)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 33518.sol-PullPayment-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! ControllerInterface(owner).paused())

IRs:
TMP_302 = CONVERT owner to ControllerInterface
TMP_303(bool) = HIGH_LEVEL_CALL, dest:TMP_302(ControllerInterface), function:paused, arguments:[]  
TMP_304 = UnaryType.BANG TMP_303 
TMP_305(None) = SOLIDITY_CALL require(bool)(TMP_304)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-PullPayment-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
untrustedRecipient = msg.sender

IRs:
untrustedRecipient(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amountWei = uint192(payments[untrustedRecipient])

IRs:
REF_141(uint256) -> payments[untrustedRecipient]
TMP_276 = CONVERT REF_141 to uint192
amountWei(uint256) := TMP_276(uint192)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(amountWei != 0)

IRs:
TMP_277(bool) = amountWei != 0
TMP_278(None) = SOLIDITY_CALL require(bool)(TMP_277)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(now >= (payments[untrustedRecipient] >> 192))

IRs:
REF_142(uint256) -> payments[untrustedRecipient]
TMP_279(uint256) = REF_142 >> 192
TMP_280(bool) = now >= TMP_279
TMP_281(None) = SOLIDITY_CALL require(bool)(TMP_280)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(this.balance >= amountWei)

IRs:
REF_143(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_282(bool) = REF_143 >= amountWei
TMP_283(None) = SOLIDITY_CALL require(bool)(TMP_282)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
payments[untrustedRecipient] = 0

IRs:
REF_144(uint256) -> payments[untrustedRecipient]
REF_144(uint256) (->payments) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(untrustedRecipient.call.gas(1000).value(amountWei)())

IRs:
TMP_286(bool) = LOW_LEVEL_CALL, dest:untrustedRecipient, function:call, arguments:[] value:amountWei gas:1000
TMP_287(None) = SOLIDITY_CALL assert(bool)(TMP_286)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, PullPayment.whenNotPaused()()"];
8->1;
}
// Function: 33518.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_910(uint256) = a + b
c(uint256) := TMP_910(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_911(bool) = c >= a
TMP_912(None) = SOLIDITY_CALL assert(bool)(TMP_911)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 33518.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_906(uint256) = a / b
c(uint256) := TMP_906(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 33518.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_900(uint256) = a * b
c(uint256) := TMP_900(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_901(bool) = a == 0
TMP_902(uint256) = c / a
TMP_903(bool) = TMP_902 == b
TMP_904(bool) = TMP_901 || TMP_903
TMP_905(None) = SOLIDITY_CALL assert(bool)(TMP_904)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 33518.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_907(bool) = b <= a
TMP_908(None) = SOLIDITY_CALL assert(bool)(TMP_907)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_909(uint256) = a - b
RETURN TMP_909"];
}
// Function: 33518.sol-Storage-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33518.sol-Storage-getAddress(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
crates[_crate].addresses[_key]

IRs:
REF_68(Storage.Crate) -> crates[_crate]
REF_69(mapping(bytes32 => address)) -> REF_68.addresses
REF_70(address) -> REF_69[_key]
RETURN REF_70"];
}
// Function: 33518.sol-Storage-getBal(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
crates[_crate].bals[_key]

IRs:
REF_80(Storage.Crate) -> crates[_crate]
REF_81(mapping(address => uint256)) -> REF_80.bals
REF_82(uint256) -> REF_81[_key]
RETURN REF_82"];
}
// Function: 33518.sol-Storage-getBool(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
crates[_crate].bools[_key]

IRs:
REF_74(Storage.Crate) -> crates[_crate]
REF_75(mapping(bytes32 => bool)) -> REF_74.bools
REF_76(bool) -> REF_75[_key]
RETURN REF_76"];
}
// Function: 33518.sol-Storage-getUInt(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
crates[_crate].uints[_key]

IRs:
REF_62(Storage.Crate) -> crates[_crate]
REF_63(mapping(bytes32 => uint256)) -> REF_62.uints
REF_64(uint256) -> REF_63[_key]
RETURN REF_64"];
}
// Function: 33518.sol-Storage-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_139(bool) = msg.sender == owner
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33518.sol-Storage-setAddress(bytes32,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
crates[_crate].addresses[_key] = _value

IRs:
REF_65(Storage.Crate) -> crates[_crate]
REF_66(mapping(bytes32 => address)) -> REF_65.addresses
REF_67(address) -> REF_66[_key]
REF_67(address) (->crates) := _value(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33518.sol-Storage-setBal(bytes32,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
crates[_crate].bals[_key] = _value

IRs:
REF_77(Storage.Crate) -> crates[_crate]
REF_78(mapping(address => uint256)) -> REF_77.bals
REF_79(uint256) -> REF_78[_key]
REF_79(uint256) (->crates) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33518.sol-Storage-setBool(bytes32,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
crates[_crate].bools[_key] = _value

IRs:
REF_71(Storage.Crate) -> crates[_crate]
REF_72(mapping(bytes32 => bool)) -> REF_71.bools
REF_73(bool) -> REF_72[_key]
REF_73(bool) (->crates) := _value(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33518.sol-Storage-setUInt(bytes32,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
crates[_crate].uints[_key] = _value

IRs:
REF_59(Storage.Crate) -> crates[_crate]
REF_60(mapping(bytes32 => uint256)) -> REF_59.uints
REF_61(uint256) -> REF_60[_key]
REF_61(uint256) (->crates) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33518.sol-Storage-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_131 = CONVERT 0 to address
TMP_132(bool) = newOwner != TMP_131
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 33518.sol-StorageEnabled-StorageEnabled(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
storageAddr = _storageAddr

IRs:
storageAddr(address) := _storageAddr(address)"];
}
// Function: 33518.sol-StorageEnabled-_setActiveSupply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,activeSupply,_newActiveSupply)

IRs:
TMP_29 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_29(Storage), function:setUInt, arguments:['Nutz', 'activeSupply', '_newActiveSupply']  "];
}
// Function: 33518.sol-StorageEnabled-_setAuthorizedPower(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Power,authorizedPower,_newAuthorizedPower)

IRs:
TMP_49 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_49(Storage), function:setUInt, arguments:['Power', 'authorizedPower', '_newAuthorizedPower']  "];
}
// Function: 33518.sol-StorageEnabled-_setBabzBalanceOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setBal(Nutz,_owner,_newValue)

IRs:
TMP_25 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_25(Storage), function:setBal, arguments:['Nutz', '_owner', '_newValue']  "];
}
// Function: 33518.sol-StorageEnabled-_setBurnPool(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,burnPool,_newBurnPool)

IRs:
TMP_33 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_33(Storage), function:setUInt, arguments:['Nutz', 'burnPool', '_newBurnPool']  "];
}
// Function: 33518.sol-StorageEnabled-_setDownRequest(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
result = uint64(start) + (left << 64) + (total << (96 + 64))

IRs:
TMP_59 = CONVERT start to uint64
TMP_60(uint256) = left << 64
TMP_61(uint64) = TMP_59 + TMP_60
TMP_62(uint256) = 96 + 64
TMP_63(uint256) = total << TMP_62
TMP_64(uint64) = TMP_61 + TMP_63
result(uint256) := TMP_64(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Storage(storageAddr).setBal(PowerDown,_holder,result)

IRs:
TMP_65 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_65(Storage), function:setBal, arguments:['PowerDown', '_holder', 'result']  "];
}
// Function: 33518.sol-StorageEnabled-_setOutstandingPower(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Power,outstandingPower,_newOutstandingPower)

IRs:
TMP_45 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_45(Storage), function:setUInt, arguments:['Power', 'outstandingPower', '_newOutstandingPower']  "];
}
// Function: 33518.sol-StorageEnabled-_setPowerBalanceOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setBal(Power,_owner,_newValue)

IRs:
TMP_41 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_41(Storage), function:setBal, arguments:['Power', '_owner', '_newValue']  "];
}
// Function: 33518.sol-StorageEnabled-_setPowerPool(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Storage(storageAddr).setUInt(Nutz,powerPool,_newPowerPool)

IRs:
TMP_37 = CONVERT storageAddr to Storage
HIGH_LEVEL_CALL, dest:TMP_37(Storage), function:setUInt, arguments:['Nutz', 'powerPool', '_newPowerPool']  "];
}
// Function: 33518.sol-StorageEnabled-activeSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,activeSupply)

IRs:
TMP_27 = CONVERT storageAddr to Storage
TMP_28(uint256) = HIGH_LEVEL_CALL, dest:TMP_27(Storage), function:getUInt, arguments:['Nutz', 'activeSupply']  
RETURN TMP_28"];
}
// Function: 33518.sol-StorageEnabled-authorizedPower()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Power,authorizedPower)

IRs:
TMP_47 = CONVERT storageAddr to Storage
TMP_48(uint256) = HIGH_LEVEL_CALL, dest:TMP_47(Storage), function:getUInt, arguments:['Power', 'authorizedPower']  
RETURN TMP_48"];
}
// Function: 33518.sol-StorageEnabled-babzBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getBal(Nutz,_owner)

IRs:
TMP_23 = CONVERT storageAddr to Storage
TMP_24(uint256) = HIGH_LEVEL_CALL, dest:TMP_23(Storage), function:getBal, arguments:['Nutz', '_owner']  
RETURN TMP_24"];
}
// Function: 33518.sol-StorageEnabled-burnPool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,burnPool)

IRs:
TMP_31 = CONVERT storageAddr to Storage
TMP_32(uint256) = HIGH_LEVEL_CALL, dest:TMP_31(Storage), function:getUInt, arguments:['Nutz', 'burnPool']  
RETURN TMP_32"];
}
// Function: 33518.sol-StorageEnabled-downs(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
rawBytes = Storage(storageAddr).getBal(PowerDown,_user)

IRs:
TMP_51 = CONVERT storageAddr to Storage
TMP_52(uint256) = HIGH_LEVEL_CALL, dest:TMP_51(Storage), function:getBal, arguments:['PowerDown', '_user']  
rawBytes(uint256) := TMP_52(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
start = uint64(rawBytes)

IRs:
TMP_53 = CONVERT rawBytes to uint64
start(uint256) := TMP_53(uint64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
left = uint96(rawBytes >> (64))

IRs:
TMP_54(uint256) = rawBytes >> 64
TMP_55 = CONVERT TMP_54 to uint96
left(uint256) := TMP_55(uint96)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
total = uint96(rawBytes >> (96 + 64))

IRs:
TMP_56(uint256) = 96 + 64
TMP_57(uint256) = rawBytes >> TMP_56
TMP_58 = CONVERT TMP_57 to uint96
total(uint256) := TMP_58(uint96)"];
4->5;
5[label="Node Type: RETURN 5
"];
6[label="Node Type: RETURN 6

EXPRESSION:
(total,left,start)

IRs:
RETURN total,left,start"];
}
// Function: 33518.sol-StorageEnabled-outstandingPower()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Power,outstandingPower)

IRs:
TMP_43 = CONVERT storageAddr to Storage
TMP_44(uint256) = HIGH_LEVEL_CALL, dest:TMP_43(Storage), function:getUInt, arguments:['Power', 'outstandingPower']  
RETURN TMP_44"];
}
// Function: 33518.sol-StorageEnabled-powerBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getBal(Power,_owner)

IRs:
TMP_39 = CONVERT storageAddr to Storage
TMP_40(uint256) = HIGH_LEVEL_CALL, dest:TMP_39(Storage), function:getBal, arguments:['Power', '_owner']  
RETURN TMP_40"];
}
// Function: 33518.sol-StorageEnabled-powerPool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Storage(storageAddr).getUInt(Nutz,powerPool)

IRs:
TMP_35 = CONVERT storageAddr to Storage
TMP_36(uint256) = HIGH_LEVEL_CALL, dest:TMP_35(Storage), function:getUInt, arguments:['Nutz', 'powerPool']  
RETURN TMP_36"];
}
}
