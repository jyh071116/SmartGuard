digraph G {
// Function: 34904.sol-MultiOwner-MultiOwner(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerRequired = _required

IRs:
ownerRequired(uint256) := _required(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isOwner[msg.sender] = true

IRs:
REF_0(bool) -> isOwner[msg.sender]
REF_0(bool) (->isOwner) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owners.push(msg.sender)

IRs:
REF_2 -> LENGTH owners
TMP_1(uint256) := REF_2(uint256)
TMP_2(uint256) = TMP_1 + 1
REF_2(uint256) (->owners) := TMP_2(uint256)
REF_3(address) -> owners[TMP_1]
REF_3(address) (->owners) := msg.sender(address)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < _owners.length

IRs:
REF_4 -> LENGTH _owners
TMP_3(bool) = i < REF_4
CONDITION TMP_3"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(! isOwner[_owners[i]])

IRs:
REF_5(address) -> _owners[i]
REF_6(bool) -> isOwner[REF_5]
TMP_4 = UnaryType.BANG REF_6 
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isOwner[_owners[i]] = true

IRs:
REF_7(address) -> _owners[i]
REF_8(bool) -> isOwner[REF_7]
REF_8(bool) (->isOwner) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owners.push(_owners[i])

IRs:
REF_10(address) -> _owners[i]
REF_11 -> LENGTH owners
TMP_7(uint256) := REF_11(uint256)
TMP_8(uint256) = TMP_7 + 1
REF_11(uint256) (->owners) := TMP_8(uint256)
REF_12(address) -> owners[TMP_7]
REF_12(address) (->owners) := REF_10(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
11->7;
}
// Function: 34904.sol-MultiOwner-addOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isOwner[owner] = true

IRs:
REF_13(bool) -> isOwner[owner]
REF_13(bool) (->isOwner) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owners.push(owner)

IRs:
REF_15 -> LENGTH owners
TMP_10(uint256) := REF_15(uint256)
TMP_11(uint256) = TMP_10 + 1
REF_15(uint256) (->owners) := TMP_11(uint256)
REF_16(address) -> owners[TMP_10]
REF_16(address) (->owners) := owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerAdded(owner)

IRs:
Emit OwnerAdded(owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwner.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownerDoesNotExist(owner)

IRs:
MODIFIER_CALL, MultiOwner.ownerDoesNotExist(address)(owner)"];
5->1;
}
// Function: 34904.sol-MultiOwner-changeRequirement(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newRequired >= owners.length)

IRs:
REF_26 -> LENGTH owners
TMP_25(bool) = _newRequired >= REF_26
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerRequired = _newRequired

IRs:
ownerRequired(uint256) := _newRequired(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
RequirementChanged(_newRequired)

IRs:
Emit RequirementChanged(_newRequired)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwner.onlyOwner()()"];
4->1;
}
// Function: 34904.sol-MultiOwner-numberOwners()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
NumberOwners = owners.length

IRs:
REF_17 -> LENGTH owners
NumberOwners(uint256) := REF_17(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
NumberOwners

IRs:
RETURN NumberOwners"];
}
// Function: 34904.sol-MultiOwner-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner[msg.sender])

IRs:
REF_27(bool) -> isOwner[msg.sender]
TMP_29(None) = SOLIDITY_CALL require(bool)(REF_27)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34904.sol-MultiOwner-ownerDoesNotExist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isOwner[owner])

IRs:
REF_28(bool) -> isOwner[owner]
TMP_30 = UnaryType.BANG REF_28 
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34904.sol-MultiOwner-ownerExists(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner[owner])

IRs:
REF_29(bool) -> isOwner[owner]
TMP_32(None) = SOLIDITY_CALL require(bool)(REF_29)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34904.sol-MultiOwner-removeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owners.length > 2)

IRs:
REF_18 -> LENGTH owners
TMP_15(bool) = REF_18 > 2
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isOwner[owner] = false

IRs:
REF_19(bool) -> isOwner[owner]
REF_19(bool) (->isOwner) := False(bool)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->12;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < owners.length - 1

IRs:
REF_20 -> LENGTH owners
TMP_17(uint256) = REF_20 - 1
TMP_18(bool) = i < TMP_17
CONDITION TMP_18"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
owners[i] == owner

IRs:
REF_21(address) -> owners[i]
TMP_19(bool) = REF_21 == owner
CONDITION TMP_19"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
owners[i] = owners[owners.length - 1]

IRs:
REF_22(address) -> owners[i]
REF_23 -> LENGTH owners
TMP_20(uint256) = REF_23 - 1
REF_24(address) -> owners[TMP_20]
REF_22(address) (->owners) := REF_24(address)"];
8->9;
9[label="Node Type: BREAK 9
"];
9->4;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_21(uint256) := i(uint256)
i(uint256) = i + 1"];
11->6;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
owners.length -= 1

IRs:
REF_25 -> LENGTH owners
REF_25(-> owners) = REF_25 - 1"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
OwnerRemoved(owner)

IRs:
Emit OwnerRemoved(owner)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwner.onlyOwner()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
ownerExists(owner)

IRs:
MODIFIER_CALL, MultiOwner.ownerExists(address)(owner)"];
15->1;
}
// Function: 34904.sol-VVToken-MultiOwner(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerRequired = _required

IRs:
ownerRequired(uint256) := _required(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isOwner[msg.sender] = true

IRs:
REF_30(bool) -> isOwner[msg.sender]
REF_30(bool) (->isOwner) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owners.push(msg.sender)

IRs:
REF_32 -> LENGTH owners
TMP_34(uint256) := REF_32(uint256)
TMP_35(uint256) = TMP_34 + 1
REF_32(uint256) (->owners) := TMP_35(uint256)
REF_33(address) -> owners[TMP_34]
REF_33(address) (->owners) := msg.sender(address)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < _owners.length

IRs:
REF_34 -> LENGTH _owners
TMP_36(bool) = i < REF_34
CONDITION TMP_36"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(! isOwner[_owners[i]])

IRs:
REF_35(address) -> _owners[i]
REF_36(bool) -> isOwner[REF_35]
TMP_37 = UnaryType.BANG REF_36 
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isOwner[_owners[i]] = true

IRs:
REF_37(address) -> _owners[i]
REF_38(bool) -> isOwner[REF_37]
REF_38(bool) (->isOwner) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owners.push(_owners[i])

IRs:
REF_40(address) -> _owners[i]
REF_41 -> LENGTH owners
TMP_40(uint256) := REF_41(uint256)
TMP_41(uint256) = TMP_40 + 1
REF_41(uint256) (->owners) := TMP_41(uint256)
REF_42(address) -> owners[TMP_40]
REF_42(address) (->owners) := REF_40(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
11->7;
}
// Function: 34904.sol-VVToken-VVToken(uint256,string,uint8,string,address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
decimals = decimalUnits

IRs:
decimals(uint8) := decimalUnits(uint8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = initialSupply * 10 ** uint256(decimals)

IRs:
TMP_62 = CONVERT decimals to uint256
TMP_63(uint256) = 10 ** TMP_62
TMP_64(uint256) = initialSupply * TMP_63
totalSupply(uint256) := TMP_64(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] = totalSupply

IRs:
REF_57(uint256) -> balanceOf[msg.sender]
REF_57(uint256) (->balanceOf) := totalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
name = tokenName

IRs:
name(string) := tokenName(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = tokenSymbol

IRs:
symbol(string) := tokenSymbol(string)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
MultiOwner(_owners,_required)

IRs:
INTERNAL_CALL, MultiOwner.MultiOwner(address[],uint256)(_owners,_required)"];
6->1;
}
// Function: 34904.sol-VVToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_66(bool) = _to != 0
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] > _value)

IRs:
REF_58(uint256) -> balanceOf[_from]
TMP_68(bool) = REF_58 > _value
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value > balanceOf[_to])

IRs:
REF_59(uint256) -> balanceOf[_to]
TMP_70(uint256) = REF_59 + _value
REF_60(uint256) -> balanceOf[_to]
TMP_71(bool) = TMP_70 > REF_60
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(! frozenAccount[_from])

IRs:
REF_61(bool) -> frozenAccount[_from]
TMP_73 = UnaryType.BANG REF_61 
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
previousBalances = balanceOf[_from] + balanceOf[_to]

IRs:
REF_62(uint256) -> balanceOf[_from]
REF_63(uint256) -> balanceOf[_to]
TMP_75(uint256) = REF_62 + REF_63
previousBalances(uint256) := TMP_75(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_64(uint256) -> balanceOf[_from]
REF_64(-> balanceOf) = REF_64 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_65(uint256) -> balanceOf[_to]
REF_65(-> balanceOf) = REF_65 + _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances)

IRs:
REF_66(uint256) -> balanceOf[_from]
REF_67(uint256) -> balanceOf[_to]
TMP_77(uint256) = REF_66 + REF_67
TMP_78(bool) = TMP_77 == previousBalances
TMP_79(None) = SOLIDITY_CALL assert(bool)(TMP_78)"];
}
// Function: 34904.sol-VVToken-addConfirmation(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Confirmations[TransHash][msg.sender] = true

IRs:
REF_73(mapping(address => bool)) -> Confirmations[TransHash]
REF_74(bool) -> REF_73[msg.sender]
REF_74(bool) (->Confirmations) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Confirmation(msg.sender,TransHash)

IRs:
Emit Confirmation(msg.sender,TransHash)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwner.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notConfirmed(TransHash)

IRs:
MODIFIER_CALL, VVToken.notConfirmed(bytes32)(TransHash)"];
4->1;
}
// Function: 34904.sol-VVToken-addOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isOwner[owner] = true

IRs:
REF_43(bool) -> isOwner[owner]
REF_43(bool) (->isOwner) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owners.push(owner)

IRs:
REF_45 -> LENGTH owners
TMP_43(uint256) := REF_45(uint256)
TMP_44(uint256) = TMP_43 + 1
REF_45(uint256) (->owners) := TMP_44(uint256)
REF_46(address) -> owners[TMP_43]
REF_46(address) (->owners) := owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerAdded(owner)

IRs:
Emit OwnerAdded(owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwner.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownerDoesNotExist(owner)

IRs:
MODIFIER_CALL, MultiOwner.ownerDoesNotExist(address)(owner)"];
5->1;
}
// Function: 34904.sol-VVToken-addTransaction(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
TransHash = sha3()(destination,value,data)

IRs:
TMP_89(bytes32) = SOLIDITY_CALL sha3()(destination,value,data)
TransHash(bytes32) := TMP_89(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
Transactions[TransHash].destination == 0

IRs:
REF_70(VVToken.Transaction) -> Transactions[TransHash]
REF_71(address) -> REF_70.destination
TMP_90(bool) = REF_71 == 0
CONDITION TMP_90"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transactions[TransHash] = Transaction({destination:destination,value:value,data:data,executed:false})

IRs:
REF_72(VVToken.Transaction) -> Transactions[TransHash]
TMP_91(VVToken.Transaction) = new Transaction(destination,value,data,False)
REF_72(VVToken.Transaction) (->Transactions) := TMP_91(VVToken.Transaction)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
SubmitTransaction(TransHash)

IRs:
Emit SubmitTransaction(TransHash)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notNull(destination)

IRs:
MODIFIER_CALL, VVToken.notNull(address)(destination)"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
TransHash

IRs:
RETURN TransHash"];
}
// Function: 34904.sol-VVToken-changeRequirement(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newRequired >= owners.length)

IRs:
REF_56 -> LENGTH owners
TMP_58(bool) = _newRequired >= REF_56
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerRequired = _newRequired

IRs:
ownerRequired(uint256) := _newRequired(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
RequirementChanged(_newRequired)

IRs:
Emit RequirementChanged(_newRequired)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwner.onlyOwner()()"];
4->1;
}
// Function: 34904.sol-VVToken-confirmTransaction(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addConfirmation(TransHash)

IRs:
INTERNAL_CALL, VVToken.addConfirmation(bytes32)(TransHash)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
executeTransaction(TransHash)

IRs:
INTERNAL_CALL, VVToken.executeTransaction(bytes32)(TransHash)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwner.onlyOwner()()"];
3->1;
}
// Function: 34904.sol-VVToken-confirmationCount(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < owners.length

IRs:
REF_79 -> LENGTH owners
TMP_100(bool) = i < REF_79
CONDITION TMP_100"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
Confirmations[TransHash][owners[i]]

IRs:
REF_80(mapping(address => bool)) -> Confirmations[TransHash]
REF_81(address) -> owners[i]
REF_82(bool) -> REF_80[REF_81]
CONDITION REF_82"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_101(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 34904.sol-VVToken-confirmed(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Confirmations[transactionHash][msg.sender])

IRs:
REF_96(mapping(address => bool)) -> Confirmations[transactionHash]
REF_97(bool) -> REF_96[msg.sender]
TMP_119(None) = SOLIDITY_CALL require(bool)(REF_97)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34904.sol-VVToken-execute(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_r = addTransaction(_to,_value,_data)

IRs:
TMP_85(bytes32) = INTERNAL_CALL, VVToken.addTransaction(address,uint256,bytes)(_to,_value,_data)
_r(bytes32) := TMP_85(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
confirmTransaction(_r)

IRs:
INTERNAL_CALL, VVToken.confirmTransaction(bytes32)(_r)"];
2->5;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
notNull(_to)

IRs:
MODIFIER_CALL, VVToken.notNull(address)(_to)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwner.onlyOwner()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
_r

IRs:
RETURN _r"];
}
// Function: 34904.sol-VVToken-executeTransaction(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
isConfirmed(TransHash)

IRs:
TMP_105(bool) = INTERNAL_CALL, VVToken.isConfirmed(bytes32)(TransHash)
CONDITION TMP_105"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transactions[TransHash].executed = true

IRs:
REF_83(VVToken.Transaction) -> Transactions[TransHash]
REF_84(bool) -> REF_83.executed
REF_84(bool) (->Transactions) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(Transactions[TransHash].destination.call.value(Transactions[TransHash].value)(Transactions[TransHash].data))

IRs:
REF_85(VVToken.Transaction) -> Transactions[TransHash]
REF_86(address) -> REF_85.destination
REF_89(VVToken.Transaction) -> Transactions[TransHash]
REF_90(uint256) -> REF_89.value
REF_91(VVToken.Transaction) -> Transactions[TransHash]
REF_92(bytes) -> REF_91.data
TMP_107(bool) = LOW_LEVEL_CALL, dest:REF_86, function:call, arguments:['REF_92'] value:REF_90 
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Execution(TransHash)

IRs:
Emit Execution(TransHash)"];
4->5;
5[label="Node Type: END_IF 5
"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notExecuted(TransHash)

IRs:
MODIFIER_CALL, VVToken.notExecuted(bytes32)(TransHash)"];
6->1;
}
// Function: 34904.sol-VVToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_84(None) = SOLIDITY_CALL revert()()"];
}
// Function: 34904.sol-VVToken-freezeAccount(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozenAccount[target] = freeze

IRs:
REF_68(bool) -> frozenAccount[target]
REF_68(bool) (->frozenAccount) := freeze(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FrozenFunds(target,freeze)

IRs:
Emit FrozenFunds(target,freeze)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwner.onlyOwner()()"];
3->1;
}
// Function: 34904.sol-VVToken-isConfirmed(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < owners.length

IRs:
REF_75 -> LENGTH owners
TMP_97(bool) = i < REF_75
CONDITION TMP_97"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
Confirmations[TransHash][owners[i]]

IRs:
REF_76(mapping(address => bool)) -> Confirmations[TransHash]
REF_77(address) -> owners[i]
REF_78(bool) -> REF_76[REF_77]
CONDITION REF_78"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_98(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: IF 10

EXPRESSION:
count == ownerRequired

IRs:
TMP_99(bool) = count == ownerRequired
CONDITION TMP_99"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: END_IF 12
"];
}
// Function: 34904.sol-VVToken-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(msg.sender)

IRs:
TMP_111(None) = SOLIDITY_CALL selfdestruct(address)(msg.sender)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwner.onlyOwner()()"];
2->1;
}
// Function: 34904.sol-VVToken-notConfirmed(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! Confirmations[transactionHash][msg.sender])

IRs:
REF_98(mapping(address => bool)) -> Confirmations[transactionHash]
REF_99(bool) -> REF_98[msg.sender]
TMP_120 = UnaryType.BANG REF_99 
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34904.sol-VVToken-notExecuted(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! Transactions[TransHash].executed)

IRs:
REF_100(VVToken.Transaction) -> Transactions[TransHash]
REF_101(bool) -> REF_100.executed
TMP_122 = UnaryType.BANG REF_101 
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34904.sol-VVToken-notNull(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(destination != 0x0)

IRs:
TMP_117(bool) = destination != 0
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34904.sol-VVToken-numberOwners()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
NumberOwners = owners.length

IRs:
REF_47 -> LENGTH owners
NumberOwners(uint256) := REF_47(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
NumberOwners

IRs:
RETURN NumberOwners"];
}
// Function: 34904.sol-VVToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner[msg.sender])

IRs:
REF_93(bool) -> isOwner[msg.sender]
TMP_113(None) = SOLIDITY_CALL require(bool)(REF_93)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34904.sol-VVToken-ownerDoesNotExist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isOwner[owner])

IRs:
REF_94(bool) -> isOwner[owner]
TMP_114 = UnaryType.BANG REF_94 
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34904.sol-VVToken-ownerExists(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner[owner])

IRs:
REF_95(bool) -> isOwner[owner]
TMP_116(None) = SOLIDITY_CALL require(bool)(REF_95)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34904.sol-VVToken-remainBalanced()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balanceOf[this]

IRs:
REF_69(uint256) -> balanceOf[this]
RETURN REF_69"];
}
// Function: 34904.sol-VVToken-removeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owners.length > 2)

IRs:
REF_48 -> LENGTH owners
TMP_48(bool) = REF_48 > 2
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isOwner[owner] = false

IRs:
REF_49(bool) -> isOwner[owner]
REF_49(bool) (->isOwner) := False(bool)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->12;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < owners.length - 1

IRs:
REF_50 -> LENGTH owners
TMP_50(uint256) = REF_50 - 1
TMP_51(bool) = i < TMP_50
CONDITION TMP_51"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
owners[i] == owner

IRs:
REF_51(address) -> owners[i]
TMP_52(bool) = REF_51 == owner
CONDITION TMP_52"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
owners[i] = owners[owners.length - 1]

IRs:
REF_52(address) -> owners[i]
REF_53 -> LENGTH owners
TMP_53(uint256) = REF_53 - 1
REF_54(address) -> owners[TMP_53]
REF_52(address) (->owners) := REF_54(address)"];
8->9;
9[label="Node Type: BREAK 9
"];
9->4;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_54(uint256) := i(uint256)
i(uint256) = i + 1"];
11->6;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
owners.length -= 1

IRs:
REF_55 -> LENGTH owners
REF_55(-> owners) = REF_55 - 1"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
OwnerRemoved(owner)

IRs:
Emit OwnerRemoved(owner)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwner.onlyOwner()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
ownerExists(owner)

IRs:
MODIFIER_CALL, MultiOwner.ownerExists(address)(owner)"];
15->1;
}
// Function: 34904.sol-VVToken-setPrices(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
EthPerToken = newValue

IRs:
EthPerToken(uint256) := newValue(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiOwner.onlyOwner()()"];
2->1;
}
// Function: 34904.sol-VVToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
EthPerToken = 300

IRs:
EthPerToken(uint256) := 300(uint256)"];
}
// Function: 34904.sol-VVToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, VVToken._transfer(address,address,uint256)(msg.sender,_to,_value)"];
}
}
