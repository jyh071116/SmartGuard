digraph G {
// Function: 35144.sol-BananaGame-BananaGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS)

IRs:
TMP_1388(bytes1) = proofType_TLSNotary | proofStorage_IPFS
INTERNAL_CALL, usingOraclize.oraclize_setProof(bytes1)(TMP_1388)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
houseAddress = msg.sender

IRs:
houseAddress(address) := msg.sender(address)"];
}
// Function: 35144.sol-BananaGame-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_736 = new bytes(0)
INTERNAL_CALL, BananaGame.__callback(bytes32,string,bytes)(myid,result,TMP_736)"];
}
// Function: 35144.sol-BananaGame-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->48;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
queue = bytes(result)

IRs:
TMP_1406 = CONVERT result to bytes
queue(bytes) := TMP_1406(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sd_s = new string(times)

IRs:
TMP_1408 = new string(times)
sd_s(string) := TMP_1408(string)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
sd = bytes(sd_s)

IRs:
TMP_1409 = CONVERT sd_s to bytes
sd(bytes) := TMP_1409(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
queue.length < times

IRs:
REF_869 -> LENGTH queue
TMP_1410(bool) = REF_869 < times
CONDITION TMP_1410"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
user = bets[myid]

IRs:
REF_870(BananaGame.Bet) -> bets[myid]
user(BananaGame.Bet) := REF_870(BananaGame.Bet)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
initAccount = user.amountBet

IRs:
REF_871(uint256) -> user.amountBet
initAccount(uint256) := REF_871(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
initAccount = initAccount * percent / 100

IRs:
TMP_1411(uint256) = initAccount * percent
TMP_1412(uint256) = TMP_1411 / 100
initAccount(uint256) := TMP_1412(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
computeOrNot = true

IRs:
computeOrNot(bool) := True(bool)"];
12->15;
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->42;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i < queue.length

IRs:
REF_872 -> LENGTH queue
TMP_1413(bool) = i < REF_872
CONDITION TMP_1413"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: IF 17

EXPRESSION:
queue[i] == 48

IRs:
REF_873(None) -> queue[i]
TMP_1414(bool) = REF_873 == 48
CONDITION TMP_1414"];
17->18[label="True"];
17->26[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
sd[k] = queue[i]

IRs:
REF_874(None) -> sd[k]
REF_875(None) -> queue[i]
REF_874(None) (->sd) := REF_875(None)"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
computeOrNot

IRs:
CONDITION computeOrNot"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
computeOrNot = false

IRs:
computeOrNot(bool) := False(bool)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
k ++

IRs:
TMP_1415(uint256) := k(uint256)
k(uint256) = k + 1"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
k > times - 1

IRs:
TMP_1416(uint256) = times - 1
TMP_1417(bool) = k > TMP_1416
CONDITION TMP_1417"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: BREAK 24
"];
24->14;
25[label="Node Type: END_IF 25
"];
25->40;
26[label="Node Type: IF 26

EXPRESSION:
queue[i] == 49

IRs:
REF_876(None) -> queue[i]
TMP_1418(bool) = REF_876 == 49
CONDITION TMP_1418"];
26->27[label="True"];
26->39[label="False"];
27[label="Node Type: IF 27

EXPRESSION:
computeOrNot

IRs:
CONDITION computeOrNot"];
27->28[label="True"];
27->33[label="False"];
28[label="Node Type: IF 28

EXPRESSION:
getAccount + initAccount < getAccount || initAccount + getAccount < initAccount

IRs:
TMP_1419(uint256) = getAccount + initAccount
TMP_1420(bool) = TMP_1419 < getAccount
TMP_1421(uint256) = initAccount + getAccount
TMP_1422(bool) = TMP_1421 < initAccount
TMP_1423(bool) = TMP_1420 || TMP_1422
CONDITION TMP_1423"];
28->29[label="True"];
28->30[label="False"];
29[label="Node Type: THROW 29
"];
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
getAccount += initAccount

IRs:
getAccount(uint256) = getAccount + initAccount"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
initAccount = initAccount * percent / 100

IRs:
TMP_1424(uint256) = initAccount * percent
TMP_1425(uint256) = TMP_1424 / 100
initAccount(uint256) := TMP_1425(uint256)"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
sd[k] = queue[i]

IRs:
REF_877(None) -> sd[k]
REF_878(None) -> queue[i]
REF_877(None) (->sd) := REF_878(None)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
k ++

IRs:
TMP_1426(uint256) := k(uint256)
k(uint256) = k + 1"];
35->36;
36[label="Node Type: IF 36

EXPRESSION:
k > times - 1

IRs:
TMP_1427(uint256) = times - 1
TMP_1428(bool) = k > TMP_1427
CONDITION TMP_1428"];
36->37[label="True"];
36->38[label="False"];
37[label="Node Type: BREAK 37
"];
37->14;
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: END_IF 40
"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
i ++

IRs:
TMP_1429(uint256) := i(uint256)
i(uint256) = i + 1"];
41->16;
42[label="Node Type: IF 42

EXPRESSION:
getAccount != 0

IRs:
TMP_1430(bool) = getAccount != 0
CONDITION TMP_1430"];
42->43[label="True"];
42->44[label="False"];
43[label="Node Type: EXPRESSION 43

EXPRESSION:
safeSend(user.playerAddr,user.amountBet,getAccount)

IRs:
REF_879(address) -> user.playerAddr
REF_880(uint256) -> user.amountBet
INTERNAL_CALL, BananaGame.safeSend(address,uint256,uint256)(REF_879,REF_880,getAccount)"];
43->45;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
safeSend(user.playerAddr,user.amountBet,1)

IRs:
REF_881(address) -> user.playerAddr
REF_882(uint256) -> user.amountBet
INTERNAL_CALL, BananaGame.safeSend(address,uint256,uint256)(REF_881,REF_882,1)"];
44->45;
45[label="Node Type: END_IF 45
"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
user.betResult = sd

IRs:
REF_883(bytes) -> user.betResult
REF_883(bytes) (->user) := sd(bytes)"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
delete profitDistributed

IRs:
profitDistributed = delete profitDistributed "];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
onlyOraclize()

IRs:
MODIFIER_CALL, BananaGame.onlyOraclize()()"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
onlyIfBetExist(myid)

IRs:
MODIFIER_CALL, BananaGame.onlyIfBetExist(bytes32)(myid)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
onlyIfNotProcessed(myid)

IRs:
MODIFIER_CALL, BananaGame.onlyIfNotProcessed(bytes32)(myid)"];
50->1;
}
// Function: 35144.sol-BananaGame-addInvest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->18;
1[label="Node Type: IF 1

EXPRESSION:
investorIDs[msg.sender] > 0

IRs:
REF_944(uint256) -> investorIDs[msg.sender]
TMP_1546(bool) = REF_944 > 0
CONDITION TMP_1546"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
profitDistribution()

IRs:
INTERNAL_CALL, BananaGame.profitDistribution()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
investors[investorIDs[msg.sender]].amountInvested += msg.value

IRs:
REF_945(uint256) -> investorIDs[msg.sender]
REF_946(BananaGame.Investor) -> investors[REF_945]
REF_947(uint256) -> REF_946.amountInvested
REF_947(-> investors) = REF_947 + msg.value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
investors[investorIDs[msg.sender]].originInvested += msg.value

IRs:
REF_948(uint256) -> investorIDs[msg.sender]
REF_949(BananaGame.Investor) -> investors[REF_948]
REF_950(uint256) -> REF_949.originInvested
REF_950(-> investors) = REF_950 + msg.value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
invest += msg.value

IRs:
invest(uint256) = invest + msg.value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LOG_InvestorEntrance(msg.sender,msg.value,2)

IRs:
Emit LOG_InvestorEntrance(msg.sender,msg.value,2)"];
6->17;
7[label="Node Type: IF 7

EXPRESSION:
msg.value > getMinInvestment()

IRs:
TMP_1549(uint256) = INTERNAL_CALL, BananaGame.getMinInvestment()()
TMP_1550(bool) = msg.value > TMP_1549
CONDITION TMP_1550"];
7->8[label="True"];
7->15[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
profitDistribution()

IRs:
INTERNAL_CALL, BananaGame.profitDistribution()()"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
investorsNum == maxInvestors

IRs:
TMP_1552(bool) = investorsNum == maxInvestors
CONDITION TMP_1552"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
minId = searchSmallestInvestor()

IRs:
TMP_1553(uint256) = INTERNAL_CALL, BananaGame.searchSmallestInvestor()()
minId(uint256) := TMP_1553(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
divest(investors[minId].investorAddress)

IRs:
REF_951(BananaGame.Investor) -> investors[minId]
REF_952(address) -> REF_951.investorAddress
INTERNAL_CALL, BananaGame.divest(address)(REF_952)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
investorsNum ++

IRs:
TMP_1555(uint256) := investorsNum(uint256)
investorsNum(uint256) = investorsNum + 1"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
addInvestorAtID(investorsNum)

IRs:
INTERNAL_CALL, BananaGame.addInvestorAtID(uint256)(investorsNum)"];
14->16;
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
onlyIfNotStopped()

IRs:
MODIFIER_CALL, BananaGame.onlyIfNotStopped()()"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
onlyMoreThanZero()

IRs:
MODIFIER_CALL, BananaGame.onlyMoreThanZero()()"];
19->1;
}
// Function: 35144.sol-BananaGame-addInvestorAtID(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
investorIDs[msg.sender] = id

IRs:
REF_953(uint256) -> investorIDs[msg.sender]
REF_953(uint256) (->investorIDs) := id(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
investors[id].investorAddress = msg.sender

IRs:
REF_954(BananaGame.Investor) -> investors[id]
REF_955(address) -> REF_954.investorAddress
REF_955(address) (->investors) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
investors[id].amountInvested = msg.value

IRs:
REF_956(BananaGame.Investor) -> investors[id]
REF_957(uint256) -> REF_956.amountInvested
REF_957(uint256) (->investors) := msg.value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
investors[id].originInvested = msg.value

IRs:
REF_958(BananaGame.Investor) -> investors[id]
REF_959(uint256) -> REF_958.originInvested
REF_959(uint256) (->investors) := msg.value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
invest += msg.value

IRs:
invest(uint256) = invest + msg.value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LOG_InvestorEntrance(msg.sender,msg.value,1)

IRs:
Emit LOG_InvestorEntrance(msg.sender,msg.value,1)"];
}
// Function: 35144.sol-BananaGame-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_808 -> LENGTH arr
arrlen(uint256) := REF_808(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_1192(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_1192(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_1193(bool) = i < arrlen
CONDITION TMP_1193"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_809(bytes) -> elemArray[i]
REF_810(bytes) -> arr[i]
TMP_1194 = CONVERT REF_810 to bytes
REF_809(bytes) (->elemArray) := TMP_1194(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_811(bytes) -> elemArray[i]
REF_812 -> LENGTH REF_811
REF_813(bytes) -> elemArray[i]
REF_814 -> LENGTH REF_813
TMP_1195(uint256) = REF_814 - 1
TMP_1196(uint256) = TMP_1195 / 23
TMP_1197(uint256) = REF_812 + TMP_1196
TMP_1198(uint256) = TMP_1197 + 3
outputlen(uint256) = outputlen + TMP_1198"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1199(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_1200(uint256) = arrlen + 128
cborlen(uint256) := TMP_1200(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_1201 = CONVERT cborlen to bytes1
REF_815 -> LENGTH TMP_1201
outputlen(uint256) = outputlen + REF_815"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_1203 = new bytes(outputlen)
res(bytes) := TMP_1203(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_1204 = CONVERT cborlen to bytes1
REF_816 -> LENGTH TMP_1204
TMP_1205(bool) = REF_816 > ctr
CONDITION TMP_1205"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_817(None) -> res[ctr]
TMP_1206 = CONVERT cborlen to bytes1
REF_818(None) -> TMP_1206[ctr]
REF_817(None) (->res) := REF_818(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_1207(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_1208(bool) = i < arrlen
CONDITION TMP_1208"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_819(uint256) -> res[ctr]
REF_819(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_1209(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_820(bytes) -> elemArray[i]
REF_821 -> LENGTH REF_820
TMP_1210(bool) = x < REF_821
CONDITION TMP_1210"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_1211(uint256) = x % 23
TMP_1212(bool) = TMP_1211 == 0
CONDITION TMP_1212"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_1213 = CONVERT elemcborlen to bytes1
REF_822 -> LENGTH TMP_1213
TMP_1214(uint256) = ctr - lctr
TMP_1215(bool) = REF_822 > TMP_1214
CONDITION TMP_1215"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_823(None) -> res[ctr]
TMP_1216 = CONVERT elemcborlen to bytes1
TMP_1217(uint256) = ctr - lctr
REF_824(None) -> TMP_1216[TMP_1217]
REF_823(None) (->res) := REF_824(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_1218(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_825(None) -> res[ctr]
REF_826(bytes) -> elemArray[i]
REF_827(None) -> REF_826[x]
REF_825(None) (->res) := REF_827(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_1219(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_1220(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_828(uint256) -> res[ctr]
REF_828(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_1221(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_1222(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_829(bytes) -> elemArray[i]
REF_830 -> LENGTH REF_829
TMP_1223(uint256) = REF_830 - x
TMP_1224(bool) = TMP_1223 >= 24
CONDITION TMP_1224"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_831(bytes) -> elemArray[i]
REF_832 -> LENGTH REF_831
TMP_1225(uint256) = REF_832 - x
elemcborlen(uint256) := TMP_1225(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 35144.sol-BananaGame-bet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(URL,ORACLIZE_GAS_LIMIT + safeGas)

IRs:
TMP_1391(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1392 = CONVERT TMP_1391 to OraclizeI
TMP_1393(uint256) = ORACLIZE_GAS_LIMIT + safeGas
TMP_1394(uint256) = HIGH_LEVEL_CALL, dest:TMP_1392(OraclizeI), function:getPrice, arguments:['URL', 'TMP_1393']  
oraclizeFee(uint256) := TMP_1394(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
oraclizeFee >= msg.value

IRs:
TMP_1395(bool) = oraclizeFee >= msg.value
CONDITION TMP_1395"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
betValue = msg.value - oraclizeFee

IRs:
TMP_1396(uint256) = msg.value - oraclizeFee
betValue(uint256) := TMP_1396(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LOG_NewBet(msg.sender,betValue)

IRs:
Emit LOG_NewBet(msg.sender,betValue)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
myid = oraclize_query(nested,[URL] ['json(https://api.random.org/json-rpc/1/invoke).result.random.data', '\n{"jsonrpc":"2.0","method":"generateSignedIntegers","params":{"apiKey":${[decrypt] BKIKtXqteUWKc5NZV65n1ioNrhWdKsJ2+AK4wkjlUWSympyWgJ0HuO106V/duAf3YGBp/lPr9+wN489QCUgbyyqE7SIG2wxa/DnKwF+z9hr3GGYLM1R64AibTHg12RTzSP/d+kOJKkOo54mCJ1XIuVAm5yT71Rk=},"n":16,"min":0,"max":1${[identity] "}"},"id":1${[identity] "}"}'],ORACLIZE_GAS_LIMIT + safeGas)

IRs:
TMP_1398(uint256) = ORACLIZE_GAS_LIMIT + safeGas
TMP_1399(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string,uint256)(nested,[URL] ['json(https://api.random.org/json-rpc/1/invoke).result.random.data', '\n{"jsonrpc":"2.0","method":"generateSignedIntegers","params":{"apiKey":${[decrypt] BKIKtXqteUWKc5NZV65n1ioNrhWdKsJ2+AK4wkjlUWSympyWgJ0HuO106V/duAf3YGBp/lPr9+wN489QCUgbyyqE7SIG2wxa/DnKwF+z9hr3GGYLM1R64AibTHg12RTzSP/d+kOJKkOo54mCJ1XIuVAm5yT71Rk=},"n":16,"min":0,"max":1${[identity] "}"},"id":1${[identity] "}"}'],TMP_1398)
myid(bytes32) := TMP_1399(bytes32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
bets[myid] = Bet(msg.sender,betValue,)

IRs:
REF_865(BananaGame.Bet) -> bets[myid]
TMP_1400(BananaGame.Bet) = new Bet(msg.sender,betValue,)
REF_865(BananaGame.Bet) (->bets) := TMP_1400(BananaGame.Bet)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
betsKeys.push(myid)

IRs:
REF_867 -> LENGTH betsKeys
TMP_1402(uint256) := REF_867(uint256)
TMP_1403(uint256) = TMP_1402 + 1
REF_867(uint256) (->betsKeys) := TMP_1403(uint256)
REF_868(bytes32) -> betsKeys[TMP_1402]
REF_868(bytes32) (->betsKeys) := myid(bytes32)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyIfNotStopped()

IRs:
MODIFIER_CALL, BananaGame.onlyIfNotStopped()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
checkBetValue(msg.value)

IRs:
MODIFIER_CALL, BananaGame.checkBetValue(uint256)(msg.value)"];
11->1;
}
// Function: 35144.sol-BananaGame-changeDivestFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
value < 0 || value > 10000

IRs:
TMP_1575(bool) = value < 0
TMP_1576(bool) = value > 10000
TMP_1577(bool) = TMP_1575 || TMP_1576
CONDITION TMP_1577"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
divestFee = value

IRs:
divestFee(uint256) := value(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
4->1;
}
// Function: 35144.sol-BananaGame-changeGasLimitOfSafeSend(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safeGas = newGasLimit

IRs:
safeGas(uint256) := newGasLimit(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LOG_GasLimitChanged(safeGas,newGasLimit)

IRs:
Emit LOG_GasLimitChanged(safeGas,newGasLimit)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyIfValidGas(newGasLimit)

IRs:
MODIFIER_CALL, BananaGame.onlyIfValidGas(uint256)(newGasLimit)"];
4->1;
}
// Function: 35144.sol-BananaGame-changeHouseAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
addr == address(0x0)

IRs:
TMP_1609 = CONVERT 0 to address
TMP_1610(bool) = addr == TMP_1609
CONDITION TMP_1610"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
houseAddress = addr

IRs:
houseAddress(address) := addr(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
5->1;
}
// Function: 35144.sol-BananaGame-changeInvestNum(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
num <= investorsNum

IRs:
TMP_1572(bool) = num <= investorsNum
CONDITION TMP_1572"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
maxInvestors = num

IRs:
maxInvestors(uint256) := num(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LOG_MaxInvestorsChanged(num)

IRs:
Emit LOG_MaxInvestorsChanged(num)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
6->1;
}
// Function: 35144.sol-BananaGame-changeMinBet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
value < 0 || value > getBankroll() * (100 - percent) / 100

IRs:
TMP_1596(bool) = value < 0
TMP_1597(uint256) = INTERNAL_CALL, BananaGame.getBankroll()()
TMP_1598(uint256) = 100 - percent
TMP_1599(uint256) = TMP_1597 * TMP_1598
TMP_1600(uint256) = TMP_1599 / 100
TMP_1601(bool) = value > TMP_1600
TMP_1602(bool) = TMP_1596 || TMP_1601
CONDITION TMP_1602"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
minBet = value

IRs:
minBet(uint256) := value(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
5->1;
}
// Function: 35144.sol-BananaGame-changeORACLIZE_GAS_LIMIT(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ORACLIZE_GAS_LIMIT = value

IRs:
ORACLIZE_GAS_LIMIT(uint256) := value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
2->1;
}
// Function: 35144.sol-BananaGame-changeOraclizeConfig(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_setConfig(_config)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setConfig(bytes32)(_config)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
2->1;
}
// Function: 35144.sol-BananaGame-changeOraclizeProofType(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_proofType == 0x00

IRs:
TMP_1476(bool) = _proofType == 0
CONDITION TMP_1476"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclize_setProof(_proofType | proofStorage_IPFS)

IRs:
TMP_1477(bytes1) = _proofType | proofStorage_IPFS
INTERNAL_CALL, usingOraclize.oraclize_setProof(bytes1)(TMP_1477)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
5->1;
}
// Function: 35144.sol-BananaGame-changeOwnerAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
newOwner == address(0x0)

IRs:
TMP_1465 = CONVERT 0 to address
TMP_1466(bool) = newOwner == TMP_1465
CONDITION TMP_1466"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LOG_OwnerAddressChanged(owner,newOwner)

IRs:
Emit LOG_OwnerAddressChanged(owner,newOwner)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
6->1;
}
// Function: 35144.sol-BananaGame-changePercent(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_percent < 0 || _percent > 100

IRs:
TMP_1472(bool) = _percent < 0
TMP_1473(bool) = _percent > 100
TMP_1474(bool) = TMP_1472 || TMP_1473
CONDITION TMP_1474"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
percent = _percent

IRs:
percent(uint256) := _percent(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
5->1;
}
// Function: 35144.sol-BananaGame-checkBetValue(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value < getMinBetAmount() || value > getMaxBetAmount()

IRs:
TMP_1653(uint256) = INTERNAL_CALL, BananaGame.getMinBetAmount()()
TMP_1654(bool) = value < TMP_1653
TMP_1655(uint256) = INTERNAL_CALL, BananaGame.getMaxBetAmount()()
TMP_1656(bool) = value > TMP_1655
TMP_1657(bool) = TMP_1654 || TMP_1656
CONDITION TMP_1657"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 35144.sol-BananaGame-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_1376(uint256) = length + toOffset
minLength(uint256) := TMP_1376(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
to.length < minLength

IRs:
REF_861 -> LENGTH to
TMP_1377(bool) = REF_861 < minLength
CONDITION TMP_1377"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_1378(uint256) = 32 + fromOffset
i(uint256) := TMP_1378(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_1379(uint256) = 32 + toOffset
j(uint256) := TMP_1379(uint256)"];
6->7;
7[label="Node Type: BEGIN_LOOP 7
"];
7->8;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_1380(uint256) = 32 + fromOffset
TMP_1381(uint256) = TMP_1380 + length
TMP_1382(bool) = i < TMP_1381
CONDITION TMP_1382"];
8->9[label="True"];
8->13[label="False"];
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
12->8;
13[label="Node Type: END_LOOP 13
"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 35144.sol-BananaGame-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_1635(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1636 = CONVERT TMP_1635 to OraclizeI
oraclize(OraclizeI) := TMP_1636(OraclizeI)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 35144.sol-BananaGame-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
forceDivestOfAllInvestors()

IRs:
INTERNAL_CALL, BananaGame.forceDivestOfAllInvestors()()"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
suicide(address)(owner)

IRs:
TMP_1613(None) = SOLIDITY_CALL suicide(address)(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
3->1;
}
// Function: 35144.sol-BananaGame-divest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
divest(msg.sender)

IRs:
INTERNAL_CALL, BananaGame.divest(address)(msg.sender)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyInvestors()

IRs:
MODIFIER_CALL, BananaGame.onlyInvestors()()"];
2->1;
}
// Function: 35144.sol-BananaGame-divest(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
profitDistribution()

IRs:
INTERNAL_CALL, BananaGame.profitDistribution()()"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
currentID = investorIDs[currentInvestor]

IRs:
REF_932(uint256) -> investorIDs[currentInvestor]
currentID(uint256) := REF_932(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountToReturn = getBalance(currentInvestor)

IRs:
TMP_1536(uint256) = INTERNAL_CALL, BananaGame.getBalance(address)(currentInvestor)
amountToReturn(uint256) := TMP_1536(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(invest >= investors[currentID].amountInvested)

IRs:
REF_933(BananaGame.Investor) -> investors[currentID]
REF_934(uint256) -> REF_933.amountInvested
TMP_1537(bool) = invest >= REF_934
CONDITION TMP_1537"];
4->5[label="True"];
4->20[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
invest -= investors[currentID].amountInvested

IRs:
REF_935(BananaGame.Investor) -> investors[currentID]
REF_936(uint256) -> REF_935.amountInvested
invest(uint256) = invest - REF_936"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
divestFeeAmount = (amountToReturn * divestFee) / 10000

IRs:
TMP_1538(uint256) = amountToReturn * divestFee
TMP_1539(uint256) = TMP_1538 / 10000
divestFeeAmount(uint256) := TMP_1539(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
amountToReturn -= divestFeeAmount

IRs:
amountToReturn(uint256) = amountToReturn - divestFeeAmount"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete investors[currentID]

IRs:
REF_937(BananaGame.Investor) -> investors[currentID]
investors = delete REF_937 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
delete investorIDs[currentInvestor]

IRs:
REF_938(uint256) -> investorIDs[currentInvestor]
investorIDs = delete REF_938 "];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
currentID != investorsNum

IRs:
TMP_1540(bool) = currentID != investorsNum
CONDITION TMP_1540"];
10->11[label="True"];
10->15[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
lastInvestor = investors[investorsNum]

IRs:
REF_939(BananaGame.Investor) -> investors[investorsNum]
lastInvestor(BananaGame.Investor) := REF_939(BananaGame.Investor)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
investorIDs[lastInvestor.investorAddress] = currentID

IRs:
REF_940(address) -> lastInvestor.investorAddress
REF_941(uint256) -> investorIDs[REF_940]
REF_941(uint256) (->investorIDs) := currentID(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
investors[currentID] = lastInvestor

IRs:
REF_942(BananaGame.Investor) -> investors[currentID]
REF_942(BananaGame.Investor) (->investors) := lastInvestor(BananaGame.Investor)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
delete investors[investorsNum]

IRs:
REF_943(BananaGame.Investor) -> investors[investorsNum]
investors = delete REF_943 "];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
investorsNum --

IRs:
TMP_1541(uint256) := investorsNum(uint256)
investorsNum(uint256) = investorsNum - 1"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
safeSend(currentInvestor,amountToReturn)

IRs:
INTERNAL_CALL, BananaGame.safeSend(address,uint256)(currentInvestor,amountToReturn)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
safeSend(houseAddress,divestFeeAmount)

IRs:
INTERNAL_CALL, BananaGame.safeSend(address,uint256)(houseAddress,divestFeeAmount)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
LOG_InvestorEntrance(msg.sender,amountToReturn,3)

IRs:
Emit LOG_InvestorEntrance(msg.sender,amountToReturn,3)"];
19->22;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
isStopped = true

IRs:
isStopped(bool) := True(bool)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
LOG_EmergencyAutoStop()

IRs:
Emit LOG_EmergencyAutoStop()"];
21->22;
22[label="Node Type: END_IF 22
"];
}
// Function: 35144.sol-BananaGame-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_862 -> LENGTH sig
TMP_1383(bool) = REF_862 != 65
CONDITION TMP_1383"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_1384(bool) = v < 27
CONDITION TMP_1384"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_1385(bool) = v != 27
TMP_1386(bool) = v != 28
TMP_1387(bool) = TMP_1385 && TMP_1386
CONDITION TMP_1387"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_5(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_5"];
}
// Function: 35144.sol-BananaGame-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bet()

IRs:
INTERNAL_CALL, BananaGame.bet()()"];
}
// Function: 35144.sol-BananaGame-forceDivestOfAllInvestors()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
copyNumInvestors = investorsNum

IRs:
copyNumInvestors(uint256) := investorsNum(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= copyNumInvestors

IRs:
TMP_1568(bool) = i <= copyNumInvestors
CONDITION TMP_1568"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
divest(investors[1].investorAddress)

IRs:
REF_966(BananaGame.Investor) -> investors[1]
REF_967(address) -> REF_966.investorAddress
INTERNAL_CALL, BananaGame.divest(address)(REF_967)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_1570(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
8->1;
}
// Function: 35144.sol-BananaGame-getBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
invested = investors[investorIDs[currentInvestor]].amountInvested

IRs:
REF_915(uint256) -> investorIDs[currentInvestor]
REF_916(BananaGame.Investor) -> investors[REF_915]
REF_917(uint256) -> REF_916.amountInvested
invested(uint256) := REF_917(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
profit = getProfitShare(currentInvestor)

IRs:
TMP_1504(uint256) = INTERNAL_CALL, BananaGame.getProfitShare(address)(currentInvestor)
profit(uint256) := TMP_1504(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
losses = getLossesShare(currentInvestor)

IRs:
TMP_1505(uint256) = INTERNAL_CALL, BananaGame.getLossesShare(address)(currentInvestor)
losses(uint256) := TMP_1505(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(invested + profit < profit) || (invested + profit < invested) || (invested + profit < losses)

IRs:
TMP_1506(uint256) = invested + profit
TMP_1507(bool) = TMP_1506 < profit
TMP_1508(uint256) = invested + profit
TMP_1509(bool) = TMP_1508 < invested
TMP_1510(bool) = TMP_1507 || TMP_1509
TMP_1511(uint256) = invested + profit
TMP_1512(bool) = TMP_1511 < losses
TMP_1513(bool) = TMP_1510 || TMP_1512
CONDITION TMP_1513"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
0

IRs:
RETURN 0"];
6[label="Node Type: RETURN 6

EXPRESSION:
invested + profit - losses

IRs:
TMP_1514(uint256) = invested + profit
TMP_1515(uint256) = TMP_1514 - losses
RETURN TMP_1515"];
}
// Function: 35144.sol-BananaGame-getBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(invest < investorsProfit) || (invest + investorsProfit < invest) || (invest + investorsProfit < investorsLosses)

IRs:
TMP_1579(bool) = invest < investorsProfit
TMP_1580(uint256) = invest + investorsProfit
TMP_1581(bool) = TMP_1580 < invest
TMP_1582(bool) = TMP_1579 || TMP_1581
TMP_1583(uint256) = invest + investorsProfit
TMP_1584(bool) = TMP_1583 < investorsLosses
TMP_1585(bool) = TMP_1582 || TMP_1584
CONDITION TMP_1585"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: RETURN 3

EXPRESSION:
invest + investorsProfit - investorsLosses

IRs:
TMP_1586(uint256) = invest + investorsProfit
TMP_1587(uint256) = TMP_1586 - investorsLosses
RETURN TMP_1587"];
}
// Function: 35144.sol-BananaGame-getBet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
id < betsKeys.length

IRs:
REF_893 -> LENGTH betsKeys
TMP_1463(bool) = id < REF_893
CONDITION TMP_1463"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
betKey = betsKeys[id]

IRs:
REF_894(bytes32) -> betsKeys[id]
betKey(bytes32) := REF_894(bytes32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(bets[betKey].playerAddr,bets[betKey].amountBet,string(bets[betKey].betResult))

IRs:
REF_895(BananaGame.Bet) -> bets[betKey]
REF_896(address) -> REF_895.playerAddr
REF_897(BananaGame.Bet) -> bets[betKey]
REF_898(uint256) -> REF_897.amountBet
REF_899(BananaGame.Bet) -> bets[betKey]
REF_900(bytes) -> REF_899.betResult
TMP_1464 = CONVERT REF_900 to string
RETURN REF_896,REF_898,TMP_1464"];
4[label="Node Type: END_IF 4
"];
}
// Function: 35144.sol-BananaGame-getBetKey(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
betsKeys[i]

IRs:
REF_974(bytes32) -> betsKeys[i]
RETURN REF_974"];
}
// Function: 35144.sol-BananaGame-getBetNum()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
betsKeys.length

IRs:
REF_892 -> LENGTH betsKeys
RETURN REF_892"];
}
// Function: 35144.sol-BananaGame-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 35144.sol-BananaGame-getInvestStatus(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
addr = investors[n].investorAddress

IRs:
REF_968(BananaGame.Investor) -> investors[n]
REF_969(address) -> REF_968.investorAddress
addr(address) := REF_969(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
originInvested = investors[n].originInvested

IRs:
REF_970(BananaGame.Investor) -> investors[n]
REF_971(uint256) -> REF_970.originInvested
originInvested(uint256) := REF_971(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
currentCaptial = getBalance(addr) * (10000 - divestFee) / 10000

IRs:
TMP_1591(uint256) = INTERNAL_CALL, BananaGame.getBalance(address)(addr)
TMP_1592(uint256) = 10000 - divestFee
TMP_1593(uint256) = TMP_1591 * TMP_1592
TMP_1594(uint256) = TMP_1593 / 10000
currentCaptial(uint256) := TMP_1594(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(addr,originInvested,currentCaptial)

IRs:
RETURN addr,originInvested,currentCaptial"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
validInvestNum(n)

IRs:
MODIFIER_CALL, BananaGame.validInvestNum(uint256)(n)"];
5->1;
}
// Function: 35144.sol-BananaGame-getLossesShare(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
investors[investorIDs[currentInvestor]].amountInvested * (investorsLosses) / invest

IRs:
REF_909(uint256) -> investorIDs[currentInvestor]
REF_910(BananaGame.Investor) -> investors[REF_909]
REF_911(uint256) -> REF_910.amountInvested
TMP_1500(uint256) = REF_911 * investorsLosses
TMP_1501(uint256) = TMP_1500 / invest
RETURN TMP_1501"];
}
// Function: 35144.sol-BananaGame-getMaxBetAmount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(URL,ORACLIZE_GAS_LIMIT + safeGas)

IRs:
TMP_1487(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1488 = CONVERT TMP_1487 to OraclizeI
TMP_1489(uint256) = ORACLIZE_GAS_LIMIT + safeGas
TMP_1490(uint256) = HIGH_LEVEL_CALL, dest:TMP_1488(OraclizeI), function:getPrice, arguments:['URL', 'TMP_1489']  
oraclizeFee(uint256) := TMP_1490(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
oraclizeFee + getBankroll() * (100 - percent) / 100

IRs:
TMP_1491(uint256) = INTERNAL_CALL, BananaGame.getBankroll()()
TMP_1492(uint256) = 100 - percent
TMP_1493(uint256) = TMP_1491 * TMP_1492
TMP_1494(uint256) = TMP_1493 / 100
TMP_1495(uint256) = oraclizeFee + TMP_1494
RETURN TMP_1495"];
}
// Function: 35144.sol-BananaGame-getMinBetAmount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(URL,ORACLIZE_GAS_LIMIT + safeGas)

IRs:
TMP_1482(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1483 = CONVERT TMP_1482 to OraclizeI
TMP_1484(uint256) = ORACLIZE_GAS_LIMIT + safeGas
TMP_1485(uint256) = HIGH_LEVEL_CALL, dest:TMP_1483(OraclizeI), function:getPrice, arguments:['URL', 'TMP_1484']  
oraclizeFee(uint256) := TMP_1485(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
minBet + oraclizeFee

IRs:
TMP_1486(uint256) = minBet + oraclizeFee
RETURN TMP_1486"];
}
// Function: 35144.sol-BananaGame-getMinInvestment()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
investorsNum == maxInvestors

IRs:
TMP_1560(bool) = investorsNum == maxInvestors
CONDITION TMP_1560"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
investorID = searchSmallestInvestor()

IRs:
TMP_1561(uint256) = INTERNAL_CALL, BananaGame.searchSmallestInvestor()()
investorID(uint256) := TMP_1561(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
getBalance(investors[investorID].investorAddress)

IRs:
REF_960(BananaGame.Investor) -> investors[investorID]
REF_961(address) -> REF_960.investorAddress
TMP_1562(uint256) = INTERNAL_CALL, BananaGame.getBalance(address)(REF_961)
RETURN TMP_1562"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 35144.sol-BananaGame-getOraFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
OraclizeI(OAR.getAddress()).getPrice(URL,ORACLIZE_GAS_LIMIT + safeGas)

IRs:
TMP_1605(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1606 = CONVERT TMP_1605 to OraclizeI
TMP_1607(uint256) = ORACLIZE_GAS_LIMIT + safeGas
TMP_1608(uint256) = HIGH_LEVEL_CALL, dest:TMP_1606(OraclizeI), function:getPrice, arguments:['URL', 'TMP_1607']  
RETURN TMP_1608"];
}
// Function: 35144.sol-BananaGame-getPlayerBetResult(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i >= 0 && i < betsKeys.length

IRs:
TMP_1496(bool) = i >= 0
REF_905 -> LENGTH betsKeys
TMP_1497(bool) = i < REF_905
TMP_1498(bool) = TMP_1496 && TMP_1497
CONDITION TMP_1498"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
id = betsKeys[i]

IRs:
REF_906(bytes32) -> betsKeys[i]
id(bytes32) := REF_906(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
player = bets[id]

IRs:
REF_907(BananaGame.Bet) -> bets[id]
player(BananaGame.Bet) := REF_907(BananaGame.Bet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
string(player.betResult)

IRs:
REF_908(bytes) -> player.betResult
TMP_1499 = CONVERT REF_908 to string
RETURN TMP_1499"];
5[label="Node Type: THROW 5
"];
}
// Function: 35144.sol-BananaGame-getProfitShare(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
investors[investorIDs[currentInvestor]].amountInvested * (investorsProfit) / invest

IRs:
REF_912(uint256) -> investorIDs[currentInvestor]
REF_913(BananaGame.Investor) -> investors[REF_912]
REF_914(uint256) -> REF_913.amountInvested
TMP_1502(uint256) = REF_914 * investorsProfit
TMP_1503(uint256) = TMP_1502 / invest
RETURN TMP_1503"];
}
// Function: 35144.sol-BananaGame-getStatus()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bankroll = getBankroll()

IRs:
TMP_1588(uint256) = INTERNAL_CALL, BananaGame.getBankroll()()
bankroll(uint256) := TMP_1588(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
minBet = getMinBetAmount()

IRs:
TMP_1589(uint256) = INTERNAL_CALL, BananaGame.getMinBetAmount()()
minBet(uint256) := TMP_1589(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
maxBet = getMaxBetAmount()

IRs:
TMP_1590(uint256) = INTERNAL_CALL, BananaGame.getMaxBetAmount()()
maxBet(uint256) := TMP_1590(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(bankroll,minBet,maxBet,investorsNum)

IRs:
RETURN bankroll,minBet,maxBet,investorsNum"];
}
// Function: 35144.sol-BananaGame-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_1073 = CONVERT _haystack to bytes
h(bytes) := TMP_1073(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_1074 = CONVERT _needle to bytes
n(bytes) := TMP_1074(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_744 -> LENGTH h
TMP_1075(bool) = REF_744 < 1
REF_745 -> LENGTH n
TMP_1076(bool) = REF_745 < 1
TMP_1077(bool) = TMP_1075 || TMP_1076
REF_746 -> LENGTH n
REF_747 -> LENGTH h
TMP_1078(bool) = REF_746 > REF_747
TMP_1079(bool) = TMP_1077 || TMP_1078
CONDITION TMP_1079"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_1080(uint256) = 0 - 1
RETURN TMP_1080"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_748 -> LENGTH h
TMP_1081(uint256) = 2 ** 128
TMP_1082(uint256) = TMP_1081 - 1
TMP_1083(bool) = REF_748 > TMP_1082
CONDITION TMP_1083"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_1084(uint256) = 0 - 1
RETURN TMP_1084"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_749 -> LENGTH h
TMP_1085(bool) = i < REF_749
CONDITION TMP_1085"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_750(None) -> h[i]
REF_751(None) -> n[0]
TMP_1086(bool) = REF_750 == REF_751
CONDITION TMP_1086"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_752 -> LENGTH n
TMP_1087(bool) = subindex < REF_752
TMP_1088(uint256) = i + subindex
REF_753 -> LENGTH h
TMP_1089(bool) = TMP_1088 < REF_753
TMP_1090(bool) = TMP_1087 && TMP_1089
TMP_1091(uint256) = i + subindex
REF_754(None) -> h[TMP_1091]
REF_755(None) -> n[subindex]
TMP_1092(bool) = REF_754 == REF_755
TMP_1093(bool) = TMP_1090 && TMP_1092
CONDITION TMP_1093"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_1094(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_756 -> LENGTH n
TMP_1095(bool) = subindex == REF_756
CONDITION TMP_1095"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_1096 = CONVERT i to int256
RETURN TMP_1096"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_1097(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_1098(uint256) = 0 - 1
RETURN TMP_1098"];
}
// Function: 35144.sol-BananaGame-matchBytes32Prefix(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < prefix.length

IRs:
REF_849 -> LENGTH prefix
TMP_1306(bool) = i < REF_849
CONDITION TMP_1306"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_850(None) -> content[i]
REF_851(None) -> prefix[i]
TMP_1307(bool) = REF_850 != REF_851
CONDITION TMP_1307"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_1308(uint8) := i(uint8)
i(uint8) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 35144.sol-BananaGame-onlyIfBetExist(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
bets[myid].playerAddr == address(0x0)

IRs:
REF_982(BananaGame.Bet) -> bets[myid]
REF_983(address) -> REF_982.playerAddr
TMP_1658 = CONVERT 0 to address
TMP_1659(bool) = REF_983 == TMP_1658
CONDITION TMP_1659"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 35144.sol-BananaGame-onlyIfNotProcessed(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
bets[myid].betResult.length >= times

IRs:
REF_984(BananaGame.Bet) -> bets[myid]
REF_985(bytes) -> REF_984.betResult
REF_986 -> LENGTH REF_985
TMP_1660(bool) = REF_986 >= times
CONDITION TMP_1660"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 35144.sol-BananaGame-onlyIfNotStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isStopped

IRs:
CONDITION isStopped"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 35144.sol-BananaGame-onlyIfProfitNotDistributed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! profitDistributed

IRs:
TMP_1661 = UnaryType.BANG profitDistributed 
CONDITION TMP_1661"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 35144.sol-BananaGame-onlyIfValidGas(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
ORACLIZE_GAS_LIMIT + newGasLimit < ORACLIZE_GAS_LIMIT

IRs:
TMP_1650(uint256) = ORACLIZE_GAS_LIMIT + newGasLimit
TMP_1651(bool) = TMP_1650 < ORACLIZE_GAS_LIMIT
CONDITION TMP_1651"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
newGasLimit < 1000

IRs:
TMP_1652(bool) = newGasLimit < 1000
CONDITION TMP_1652"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 35144.sol-BananaGame-onlyInvestors()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
investorIDs[msg.sender] == 0

IRs:
REF_987(uint256) -> investorIDs[msg.sender]
TMP_1662(bool) = REF_987 == 0
CONDITION TMP_1662"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 35144.sol-BananaGame-onlyMoreThanZero()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value == 0

IRs:
TMP_1663(bool) = msg.value == 0
CONDITION TMP_1663"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 35144.sol-BananaGame-onlyOraclize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != oraclize_cbAddress()

IRs:
TMP_1648(address) = INTERNAL_CALL, usingOraclize.oraclize_cbAddress()()
TMP_1649(bool) = msg.sender != TMP_1648
CONDITION TMP_1649"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 35144.sol-BananaGame-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_1647(bool) = msg.sender != owner
CONDITION TMP_1647"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 35144.sol-BananaGame-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_1623 = CONVERT OAR to address
TMP_1624(bool) = TMP_1623 == 0
TMP_1625 = CONVERT OAR to address
TMP_1626(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_1625)
TMP_1627(bool) = TMP_1626 == 0
TMP_1628(bool) = TMP_1624 || TMP_1627
CONDITION TMP_1628"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_1629(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_1630 = CONVERT oraclize to address
TMP_1631(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1632(bool) = TMP_1630 != TMP_1631
CONDITION TMP_1632"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_1633(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1634 = CONVERT TMP_1633 to OraclizeI
oraclize(OraclizeI) := TMP_1634(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 35144.sol-BananaGame-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_1024(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_1024"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-BananaGame-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 35144.sol-BananaGame-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_740(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_740"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-BananaGame-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_742(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_742"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-BananaGame-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_nbytes == 0) || (_nbytes > 32)

IRs:
TMP_1226(bool) = _nbytes == 0
TMP_1227(bool) = _nbytes > 32
TMP_1228(bool) = TMP_1226 || TMP_1227
CONDITION TMP_1228"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_1230 = new bytes(1)
nbytes(bytes) := TMP_1230(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_833(bytes1) -> nbytes[0]
TMP_1231 = CONVERT _nbytes to bytes1
REF_833(bytes1) (->nbytes) := TMP_1231(bytes1)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
unonce = new bytes(32)

IRs:
TMP_1233 = new bytes(32)
unonce(bytes) := TMP_1233(bytes)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sessionKeyHash = new bytes(32)

IRs:
TMP_1235 = new bytes(32)
sessionKeyHash(bytes) := TMP_1235(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_1236(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_1236(bytes32)"];
8->9;
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash)

IRs:
args(bytes[3]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)']"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
queryId = oraclize_query(_delay,random,args,_customGasLimit)

IRs:
TMP_1237(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[3],uint256)(_delay,random,args,_customGasLimit)
queryId(bytes32) := TMP_1237(bytes32)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,sha3()(bytes8(_delay),args[1],sha256()(args[0]),args[2]))

IRs:
TMP_1238 = CONVERT _delay to bytes8
REF_834(bytes) -> args[1]
REF_835(bytes) -> args[0]
TMP_1239(bytes32) = SOLIDITY_CALL sha256()(REF_835)
REF_836(bytes) -> args[2]
TMP_1240(bytes32) = SOLIDITY_CALL sha3()(TMP_1238,REF_834,TMP_1239,REF_836)
INTERNAL_CALL, usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_1240)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_945(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_945(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_606(bytes) -> dynargs[0]
REF_607(bytes) -> args[0]
REF_606(bytes) (->dynargs) := REF_607(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_946(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_946"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_957(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_957(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_612(bytes) -> dynargs[0]
REF_613(bytes) -> args[0]
REF_612(bytes) (->dynargs) := REF_613(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_958(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_958"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_961(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_961(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_614(bytes) -> dynargs[0]
REF_615(bytes) -> args[0]
REF_614(bytes) (->dynargs) := REF_615(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_616(bytes) -> dynargs[1]
REF_617(bytes) -> args[1]
REF_616(bytes) (->dynargs) := REF_617(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_962(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_962"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_973(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_973(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_626(bytes) -> dynargs[0]
REF_627(bytes) -> args[0]
REF_626(bytes) (->dynargs) := REF_627(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_628(bytes) -> dynargs[1]
REF_629(bytes) -> args[1]
REF_628(bytes) (->dynargs) := REF_629(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_974(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_974"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_977(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_977(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_630(bytes) -> dynargs[0]
REF_631(bytes) -> args[0]
REF_630(bytes) (->dynargs) := REF_631(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_632(bytes) -> dynargs[1]
REF_633(bytes) -> args[1]
REF_632(bytes) (->dynargs) := REF_633(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_634(bytes) -> dynargs[2]
REF_635(bytes) -> args[2]
REF_634(bytes) (->dynargs) := REF_635(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_978(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_978"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_989(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_989(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_648(bytes) -> dynargs[0]
REF_649(bytes) -> args[0]
REF_648(bytes) (->dynargs) := REF_649(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_650(bytes) -> dynargs[1]
REF_651(bytes) -> args[1]
REF_650(bytes) (->dynargs) := REF_651(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_652(bytes) -> dynargs[2]
REF_653(bytes) -> args[2]
REF_652(bytes) (->dynargs) := REF_653(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_990(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_990"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_993(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_993(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_654(bytes) -> dynargs[0]
REF_655(bytes) -> args[0]
REF_654(bytes) (->dynargs) := REF_655(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_656(bytes) -> dynargs[1]
REF_657(bytes) -> args[1]
REF_656(bytes) (->dynargs) := REF_657(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_658(bytes) -> dynargs[2]
REF_659(bytes) -> args[2]
REF_658(bytes) (->dynargs) := REF_659(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_660(bytes) -> dynargs[3]
REF_661(bytes) -> args[3]
REF_660(bytes) (->dynargs) := REF_661(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_994(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_994"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1005(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1005(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_678(bytes) -> dynargs[0]
REF_679(bytes) -> args[0]
REF_678(bytes) (->dynargs) := REF_679(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_680(bytes) -> dynargs[1]
REF_681(bytes) -> args[1]
REF_680(bytes) (->dynargs) := REF_681(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_682(bytes) -> dynargs[2]
REF_683(bytes) -> args[2]
REF_682(bytes) (->dynargs) := REF_683(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_684(bytes) -> dynargs[3]
REF_685(bytes) -> args[3]
REF_684(bytes) (->dynargs) := REF_685(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1006(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1006"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1009(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1009(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_686(bytes) -> dynargs[0]
REF_687(bytes) -> args[0]
REF_686(bytes) (->dynargs) := REF_687(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_688(bytes) -> dynargs[1]
REF_689(bytes) -> args[1]
REF_688(bytes) (->dynargs) := REF_689(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_690(bytes) -> dynargs[2]
REF_691(bytes) -> args[2]
REF_690(bytes) (->dynargs) := REF_691(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_692(bytes) -> dynargs[3]
REF_693(bytes) -> args[3]
REF_692(bytes) (->dynargs) := REF_693(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_694(bytes) -> dynargs[4]
REF_695(bytes) -> args[4]
REF_694(bytes) (->dynargs) := REF_695(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1010(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1010"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1021(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1021(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_716(bytes) -> dynargs[0]
REF_717(bytes) -> args[0]
REF_716(bytes) (->dynargs) := REF_717(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_718(bytes) -> dynargs[1]
REF_719(bytes) -> args[1]
REF_718(bytes) (->dynargs) := REF_719(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_720(bytes) -> dynargs[2]
REF_721(bytes) -> args[2]
REF_720(bytes) (->dynargs) := REF_721(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_722(bytes) -> dynargs[3]
REF_723(bytes) -> args[3]
REF_722(bytes) (->dynargs) := REF_723(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_724(bytes) -> dynargs[4]
REF_725(bytes) -> args[4]
REF_724(bytes) (->dynargs) := REF_725(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1022(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1022"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_912(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_912(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_913(uint256) = tx.gasprice * 200000
TMP_914(uint256) = 1000000000000000000 + TMP_913
TMP_915(bool) = price > TMP_914
CONDITION TMP_915"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_916(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_916(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_918(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_918"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_936(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_936(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_937(uint256) = tx.gasprice * gaslimit
TMP_938(uint256) = 1000000000000000000 + TMP_937
TMP_939(bool) = price > TMP_938
CONDITION TMP_939"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_940(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_940(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_942(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_942"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_744(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_744(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_745(uint256) = tx.gasprice * 200000
TMP_746(uint256) = 1000000000000000000 + TMP_745
TMP_747(bool) = price > TMP_746
CONDITION TMP_747"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_749(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_749"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_772(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_772(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_773(uint256) = tx.gasprice * 200000
TMP_774(uint256) = 1000000000000000000 + TMP_773
TMP_775(bool) = price > TMP_774
CONDITION TMP_775"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_777(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_777"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_793(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_793(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_794(uint256) = tx.gasprice * gaslimit
TMP_795(uint256) = 1000000000000000000 + TMP_794
TMP_796(bool) = price > TMP_795
CONDITION TMP_796"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_798(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_798"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_765(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_765(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_766(uint256) = tx.gasprice * gaslimit
TMP_767(uint256) = 1000000000000000000 + TMP_766
TMP_768(bool) = price > TMP_767
CONDITION TMP_768"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_770(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_770"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_833(string[])  = new string[](1)
dynargs(string[]) = ['TMP_833(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_474(string) -> dynargs[0]
REF_475(string) -> args[0]
REF_474(string) (->dynargs) := REF_475(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_834(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_834"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_845(string[])  = new string[](1)
dynargs(string[]) = ['TMP_845(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_480(string) -> dynargs[0]
REF_481(string) -> args[0]
REF_480(string) (->dynargs) := REF_481(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_846(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_846"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_849(string[])  = new string[](2)
dynargs(string[]) = ['TMP_849(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_482(string) -> dynargs[0]
REF_483(string) -> args[0]
REF_482(string) (->dynargs) := REF_483(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_484(string) -> dynargs[1]
REF_485(string) -> args[1]
REF_484(string) (->dynargs) := REF_485(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_850(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_850"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_861(string[])  = new string[](2)
dynargs(string[]) = ['TMP_861(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_494(string) -> dynargs[0]
REF_495(string) -> args[0]
REF_494(string) (->dynargs) := REF_495(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_496(string) -> dynargs[1]
REF_497(string) -> args[1]
REF_496(string) (->dynargs) := REF_497(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_862(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_862"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_865(string[])  = new string[](3)
dynargs(string[]) = ['TMP_865(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_498(string) -> dynargs[0]
REF_499(string) -> args[0]
REF_498(string) (->dynargs) := REF_499(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_500(string) -> dynargs[1]
REF_501(string) -> args[1]
REF_500(string) (->dynargs) := REF_501(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_502(string) -> dynargs[2]
REF_503(string) -> args[2]
REF_502(string) (->dynargs) := REF_503(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_866(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_866"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_877(string[])  = new string[](3)
dynargs(string[]) = ['TMP_877(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_516(string) -> dynargs[0]
REF_517(string) -> args[0]
REF_516(string) (->dynargs) := REF_517(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_518(string) -> dynargs[1]
REF_519(string) -> args[1]
REF_518(string) (->dynargs) := REF_519(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_520(string) -> dynargs[2]
REF_521(string) -> args[2]
REF_520(string) (->dynargs) := REF_521(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_878(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_878"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_881(string[])  = new string[](4)
dynargs(string[]) = ['TMP_881(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_522(string) -> dynargs[0]
REF_523(string) -> args[0]
REF_522(string) (->dynargs) := REF_523(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_524(string) -> dynargs[1]
REF_525(string) -> args[1]
REF_524(string) (->dynargs) := REF_525(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_526(string) -> dynargs[2]
REF_527(string) -> args[2]
REF_526(string) (->dynargs) := REF_527(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_528(string) -> dynargs[3]
REF_529(string) -> args[3]
REF_528(string) (->dynargs) := REF_529(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_882(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_882"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_893(string[])  = new string[](4)
dynargs(string[]) = ['TMP_893(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_546(string) -> dynargs[0]
REF_547(string) -> args[0]
REF_546(string) (->dynargs) := REF_547(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_548(string) -> dynargs[1]
REF_549(string) -> args[1]
REF_548(string) (->dynargs) := REF_549(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_550(string) -> dynargs[2]
REF_551(string) -> args[2]
REF_550(string) (->dynargs) := REF_551(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_552(string) -> dynargs[3]
REF_553(string) -> args[3]
REF_552(string) (->dynargs) := REF_553(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_894(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_894"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_897(string[])  = new string[](5)
dynargs(string[]) = ['TMP_897(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_554(string) -> dynargs[0]
REF_555(string) -> args[0]
REF_554(string) (->dynargs) := REF_555(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_556(string) -> dynargs[1]
REF_557(string) -> args[1]
REF_556(string) (->dynargs) := REF_557(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_558(string) -> dynargs[2]
REF_559(string) -> args[2]
REF_558(string) (->dynargs) := REF_559(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_560(string) -> dynargs[3]
REF_561(string) -> args[3]
REF_560(string) (->dynargs) := REF_561(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_562(string) -> dynargs[4]
REF_563(string) -> args[4]
REF_562(string) (->dynargs) := REF_563(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_898(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_898"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_909(string[])  = new string[](5)
dynargs(string[]) = ['TMP_909(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_584(string) -> dynargs[0]
REF_585(string) -> args[0]
REF_584(string) (->dynargs) := REF_585(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_586(string) -> dynargs[1]
REF_587(string) -> args[1]
REF_586(string) (->dynargs) := REF_587(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_588(string) -> dynargs[2]
REF_589(string) -> args[2]
REF_588(string) (->dynargs) := REF_589(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_590(string) -> dynargs[3]
REF_591(string) -> args[3]
REF_590(string) (->dynargs) := REF_591(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_592(string) -> dynargs[4]
REF_593(string) -> args[4]
REF_592(string) (->dynargs) := REF_593(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_910(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_910"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_800(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_800(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_801(uint256) = tx.gasprice * 200000
TMP_802(uint256) = 1000000000000000000 + TMP_801
TMP_803(bool) = price > TMP_802
CONDITION TMP_803"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_804(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_804(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_806(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_806"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_824(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_824(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_825(uint256) = tx.gasprice * gaslimit
TMP_826(uint256) = 1000000000000000000 + TMP_825
TMP_827(bool) = price > TMP_826
CONDITION TMP_827"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_828(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_828(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_830(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_830"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_949(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_949(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_608(bytes) -> dynargs[0]
REF_609(bytes) -> args[0]
REF_608(bytes) (->dynargs) := REF_609(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_950(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_950"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_953(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_953(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_610(bytes) -> dynargs[0]
REF_611(bytes) -> args[0]
REF_610(bytes) (->dynargs) := REF_611(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_954(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_954"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_965(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_965(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_618(bytes) -> dynargs[0]
REF_619(bytes) -> args[0]
REF_618(bytes) (->dynargs) := REF_619(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_620(bytes) -> dynargs[1]
REF_621(bytes) -> args[1]
REF_620(bytes) (->dynargs) := REF_621(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_966(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_966"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_969(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_969(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_622(bytes) -> dynargs[0]
REF_623(bytes) -> args[0]
REF_622(bytes) (->dynargs) := REF_623(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_624(bytes) -> dynargs[1]
REF_625(bytes) -> args[1]
REF_624(bytes) (->dynargs) := REF_625(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_970(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_970"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_981(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_981(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_636(bytes) -> dynargs[0]
REF_637(bytes) -> args[0]
REF_636(bytes) (->dynargs) := REF_637(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_638(bytes) -> dynargs[1]
REF_639(bytes) -> args[1]
REF_638(bytes) (->dynargs) := REF_639(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_640(bytes) -> dynargs[2]
REF_641(bytes) -> args[2]
REF_640(bytes) (->dynargs) := REF_641(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_982(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_982"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_985(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_985(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_642(bytes) -> dynargs[0]
REF_643(bytes) -> args[0]
REF_642(bytes) (->dynargs) := REF_643(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_644(bytes) -> dynargs[1]
REF_645(bytes) -> args[1]
REF_644(bytes) (->dynargs) := REF_645(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_646(bytes) -> dynargs[2]
REF_647(bytes) -> args[2]
REF_646(bytes) (->dynargs) := REF_647(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_986(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_986"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_997(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_997(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_662(bytes) -> dynargs[0]
REF_663(bytes) -> args[0]
REF_662(bytes) (->dynargs) := REF_663(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_664(bytes) -> dynargs[1]
REF_665(bytes) -> args[1]
REF_664(bytes) (->dynargs) := REF_665(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_666(bytes) -> dynargs[2]
REF_667(bytes) -> args[2]
REF_666(bytes) (->dynargs) := REF_667(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_668(bytes) -> dynargs[3]
REF_669(bytes) -> args[3]
REF_668(bytes) (->dynargs) := REF_669(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_998(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_998"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1001(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1001(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_670(bytes) -> dynargs[0]
REF_671(bytes) -> args[0]
REF_670(bytes) (->dynargs) := REF_671(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_672(bytes) -> dynargs[1]
REF_673(bytes) -> args[1]
REF_672(bytes) (->dynargs) := REF_673(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_674(bytes) -> dynargs[2]
REF_675(bytes) -> args[2]
REF_674(bytes) (->dynargs) := REF_675(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_676(bytes) -> dynargs[3]
REF_677(bytes) -> args[3]
REF_676(bytes) (->dynargs) := REF_677(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1002(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1002"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1013(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1013(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_696(bytes) -> dynargs[0]
REF_697(bytes) -> args[0]
REF_696(bytes) (->dynargs) := REF_697(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_698(bytes) -> dynargs[1]
REF_699(bytes) -> args[1]
REF_698(bytes) (->dynargs) := REF_699(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_700(bytes) -> dynargs[2]
REF_701(bytes) -> args[2]
REF_700(bytes) (->dynargs) := REF_701(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_702(bytes) -> dynargs[3]
REF_703(bytes) -> args[3]
REF_702(bytes) (->dynargs) := REF_703(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_704(bytes) -> dynargs[4]
REF_705(bytes) -> args[4]
REF_704(bytes) (->dynargs) := REF_705(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1014(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1014"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1017(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1017(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_706(bytes) -> dynargs[0]
REF_707(bytes) -> args[0]
REF_706(bytes) (->dynargs) := REF_707(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_708(bytes) -> dynargs[1]
REF_709(bytes) -> args[1]
REF_708(bytes) (->dynargs) := REF_709(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_710(bytes) -> dynargs[2]
REF_711(bytes) -> args[2]
REF_710(bytes) (->dynargs) := REF_711(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_712(bytes) -> dynargs[3]
REF_713(bytes) -> args[3]
REF_712(bytes) (->dynargs) := REF_713(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_714(bytes) -> dynargs[4]
REF_715(bytes) -> args[4]
REF_714(bytes) (->dynargs) := REF_715(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1018(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1018"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_920(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_920(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_921(uint256) = tx.gasprice * 200000
TMP_922(uint256) = 1000000000000000000 + TMP_921
TMP_923(bool) = price > TMP_922
CONDITION TMP_923"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_924(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_924(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_926(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_926"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_928(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_928(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_929(uint256) = tx.gasprice * gaslimit
TMP_930(uint256) = 1000000000000000000 + TMP_929
TMP_931(bool) = price > TMP_930
CONDITION TMP_931"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_932(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_932(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_934(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_934"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_751(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_751(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_752(uint256) = tx.gasprice * 200000
TMP_753(uint256) = 1000000000000000000 + TMP_752
TMP_754(bool) = price > TMP_753
CONDITION TMP_754"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_756(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_756"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_779(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_779(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_780(uint256) = tx.gasprice * 200000
TMP_781(uint256) = 1000000000000000000 + TMP_780
TMP_782(bool) = price > TMP_781
CONDITION TMP_782"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_784(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_784"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_786(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_786(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_787(uint256) = tx.gasprice * gaslimit
TMP_788(uint256) = 1000000000000000000 + TMP_787
TMP_789(bool) = price > TMP_788
CONDITION TMP_789"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_791(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_791"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_758(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_758(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_759(uint256) = tx.gasprice * gaslimit
TMP_760(uint256) = 1000000000000000000 + TMP_759
TMP_761(bool) = price > TMP_760
CONDITION TMP_761"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_763(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_763"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_837(string[])  = new string[](1)
dynargs(string[]) = ['TMP_837(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_476(string) -> dynargs[0]
REF_477(string) -> args[0]
REF_476(string) (->dynargs) := REF_477(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_838(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_838"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_841(string[])  = new string[](1)
dynargs(string[]) = ['TMP_841(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_478(string) -> dynargs[0]
REF_479(string) -> args[0]
REF_478(string) (->dynargs) := REF_479(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_842(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_842"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_853(string[])  = new string[](2)
dynargs(string[]) = ['TMP_853(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_486(string) -> dynargs[0]
REF_487(string) -> args[0]
REF_486(string) (->dynargs) := REF_487(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_488(string) -> dynargs[1]
REF_489(string) -> args[1]
REF_488(string) (->dynargs) := REF_489(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_854(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_854"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_857(string[])  = new string[](2)
dynargs(string[]) = ['TMP_857(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_490(string) -> dynargs[0]
REF_491(string) -> args[0]
REF_490(string) (->dynargs) := REF_491(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_492(string) -> dynargs[1]
REF_493(string) -> args[1]
REF_492(string) (->dynargs) := REF_493(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_858(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_858"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_869(string[])  = new string[](3)
dynargs(string[]) = ['TMP_869(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_504(string) -> dynargs[0]
REF_505(string) -> args[0]
REF_504(string) (->dynargs) := REF_505(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_506(string) -> dynargs[1]
REF_507(string) -> args[1]
REF_506(string) (->dynargs) := REF_507(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_508(string) -> dynargs[2]
REF_509(string) -> args[2]
REF_508(string) (->dynargs) := REF_509(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_870(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_870"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_873(string[])  = new string[](3)
dynargs(string[]) = ['TMP_873(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_510(string) -> dynargs[0]
REF_511(string) -> args[0]
REF_510(string) (->dynargs) := REF_511(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_512(string) -> dynargs[1]
REF_513(string) -> args[1]
REF_512(string) (->dynargs) := REF_513(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_514(string) -> dynargs[2]
REF_515(string) -> args[2]
REF_514(string) (->dynargs) := REF_515(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_874(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_874"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_885(string[])  = new string[](4)
dynargs(string[]) = ['TMP_885(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_530(string) -> dynargs[0]
REF_531(string) -> args[0]
REF_530(string) (->dynargs) := REF_531(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_532(string) -> dynargs[1]
REF_533(string) -> args[1]
REF_532(string) (->dynargs) := REF_533(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_534(string) -> dynargs[2]
REF_535(string) -> args[2]
REF_534(string) (->dynargs) := REF_535(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_536(string) -> dynargs[3]
REF_537(string) -> args[3]
REF_536(string) (->dynargs) := REF_537(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_886(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_886"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_889(string[])  = new string[](4)
dynargs(string[]) = ['TMP_889(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_538(string) -> dynargs[0]
REF_539(string) -> args[0]
REF_538(string) (->dynargs) := REF_539(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_540(string) -> dynargs[1]
REF_541(string) -> args[1]
REF_540(string) (->dynargs) := REF_541(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_542(string) -> dynargs[2]
REF_543(string) -> args[2]
REF_542(string) (->dynargs) := REF_543(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_544(string) -> dynargs[3]
REF_545(string) -> args[3]
REF_544(string) (->dynargs) := REF_545(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_890(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_890"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_901(string[])  = new string[](5)
dynargs(string[]) = ['TMP_901(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_564(string) -> dynargs[0]
REF_565(string) -> args[0]
REF_564(string) (->dynargs) := REF_565(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_566(string) -> dynargs[1]
REF_567(string) -> args[1]
REF_566(string) (->dynargs) := REF_567(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_568(string) -> dynargs[2]
REF_569(string) -> args[2]
REF_568(string) (->dynargs) := REF_569(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_570(string) -> dynargs[3]
REF_571(string) -> args[3]
REF_570(string) (->dynargs) := REF_571(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_572(string) -> dynargs[4]
REF_573(string) -> args[4]
REF_572(string) (->dynargs) := REF_573(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_902(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_902"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_905(string[])  = new string[](5)
dynargs(string[]) = ['TMP_905(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_574(string) -> dynargs[0]
REF_575(string) -> args[0]
REF_574(string) (->dynargs) := REF_575(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_576(string) -> dynargs[1]
REF_577(string) -> args[1]
REF_576(string) (->dynargs) := REF_577(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_578(string) -> dynargs[2]
REF_579(string) -> args[2]
REF_578(string) (->dynargs) := REF_579(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_580(string) -> dynargs[3]
REF_581(string) -> args[3]
REF_580(string) (->dynargs) := REF_581(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_582(string) -> dynargs[4]
REF_583(string) -> args[4]
REF_582(string) (->dynargs) := REF_583(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_906(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_906"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_808(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_808(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_809(uint256) = tx.gasprice * 200000
TMP_810(uint256) = 1000000000000000000 + TMP_809
TMP_811(bool) = price > TMP_810
CONDITION TMP_811"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_812(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_812(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_814(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_814"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_816(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_816(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_817(uint256) = tx.gasprice * gaslimit
TMP_818(uint256) = 1000000000000000000 + TMP_817
TMP_819(bool) = price > TMP_818
CONDITION TMP_819"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_820(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_820(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_822(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_822"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-BananaGame-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_1032(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_1032"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-BananaGame-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_979(None) -> _proof[0]
TMP_1638(bool) = REF_979 != L
REF_980(None) -> _proof[1]
TMP_1639(bool) = REF_980 != P
TMP_1640(bool) = TMP_1638 || TMP_1639
REF_981(None) -> _proof[2]
TMP_1641(bool) = REF_981 != 1
TMP_1642(bool) = TMP_1640 || TMP_1641
CONDITION TMP_1642"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_1643 = CONVERT _result to bytes
TMP_1644(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_1645(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_1643,TMP_1644)
proofVerified(bool) := TMP_1645(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_1646(bool) = proofVerified == False
CONDITION TMP_1646"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: _ 8
"];
}
// Function: 35144.sol-BananaGame-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_1309(uint256) = 3 + 65
TMP_1310(uint256) = 3 + 65
TMP_1311(uint256) = TMP_1310 + 1
REF_852(None) -> proof[TMP_1311]
TMP_1312 = CONVERT REF_852 to uint256
TMP_1313(uint256) = TMP_1312 + 2
TMP_1314(uint256) = TMP_1309 + TMP_1313
TMP_1315(uint256) = TMP_1314 + 32
ledgerProofLength(uint256) := TMP_1315(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_1317 = new bytes(32)
keyhash(bytes) := TMP_1317(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_1318(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
checkok = (sha3()(keyhash) == sha3()(sha256()(context_name,queryId)))

IRs:
TMP_1319(bytes32) = SOLIDITY_CALL sha3()(keyhash)
TMP_1320(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_1321(bytes32) = SOLIDITY_CALL sha3()(TMP_1320)
TMP_1322(bool) = TMP_1319 == TMP_1321
checkok(bool) := TMP_1322(bool)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
checkok == false

IRs:
TMP_1323(bool) = checkok == False
CONDITION TMP_1323"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_1325(uint256) = 32 + 8
TMP_1326(uint256) = TMP_1325 + 1
TMP_1327(uint256) = TMP_1326 + 32
TMP_1328(uint256) = ledgerProofLength + TMP_1327
TMP_1329(uint256) = TMP_1328 + 1
REF_853(None) -> proof[TMP_1329]
TMP_1330 = CONVERT REF_853 to uint256
TMP_1331(uint256) = TMP_1330 + 2
TMP_1332 = new bytes(TMP_1331)
sig1(bytes) := TMP_1332(bytes)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_1333(uint256) = 32 + 8
TMP_1334(uint256) = TMP_1333 + 1
TMP_1335(uint256) = TMP_1334 + 32
TMP_1336(uint256) = ledgerProofLength + TMP_1335
REF_854 -> LENGTH sig1
TMP_1337(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1336,REF_854,sig1,0)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
checkok = matchBytes32Prefix(sha256()(sig1),result)

IRs:
TMP_1338(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_1339(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes)(TMP_1338,result)
checkok(bool) := TMP_1339(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
checkok == false

IRs:
TMP_1340(bool) = checkok == False
CONDITION TMP_1340"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_1342(uint256) = 8 + 1
TMP_1343(uint256) = TMP_1342 + 32
TMP_1344 = new bytes(TMP_1343)
commitmentSlice1(bytes) := TMP_1344(bytes)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_1345(uint256) = ledgerProofLength + 32
TMP_1346(uint256) = 8 + 1
TMP_1347(uint256) = TMP_1346 + 32
TMP_1348(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1345,TMP_1347,commitmentSlice1,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_1350 = new bytes(64)
sessionPubkey(bytes) := TMP_1350(bytes)"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_1351(uint256) = ledgerProofLength + 32
TMP_1352(uint256) = 8 + 1
TMP_1353(uint256) = TMP_1352 + 32
TMP_1354(uint256) = TMP_1351 + TMP_1353
REF_855 -> LENGTH sig1
TMP_1355(uint256) = TMP_1354 + REF_855
TMP_1356(uint256) = TMP_1355 + 65
sig2offset(uint256) := TMP_1356(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_1357(uint256) = sig2offset - 64
TMP_1358(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1357,64,sessionPubkey,0)"];
19->20;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_1359(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_1359(bytes32)"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
oraclize_randomDS_args[queryId] == sha3()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_856(bytes32) -> oraclize_randomDS_args[queryId]
TMP_1360(bytes32) = SOLIDITY_CALL sha3()(commitmentSlice1,sessionPubkeyHash)
TMP_1361(bool) = REF_856 == TMP_1360
CONDITION TMP_1361"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_857(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_857 "];
22->24;
23[label="Node Type: RETURN 23

EXPRESSION:
false

IRs:
RETURN False"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: NEW VARIABLE 25

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_1363(uint256) = 32 + 8
TMP_1364(uint256) = TMP_1363 + 1
TMP_1365(uint256) = TMP_1364 + 32
TMP_1366 = new bytes(TMP_1365)
tosign1(bytes) := TMP_1366(bytes)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_1367(uint256) = 32 + 8
TMP_1368(uint256) = TMP_1367 + 1
TMP_1369(uint256) = TMP_1368 + 32
TMP_1370(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_1369,tosign1,0)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
checkok = verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_1371(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_1372(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1371,sig1,sessionPubkey)
checkok(bool) := TMP_1372(bool)"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
checkok == false

IRs:
TMP_1373(bool) = checkok == False
CONDITION TMP_1373"];
28->29[label="True"];
28->30[label="False"];
29[label="Node Type: RETURN 29

EXPRESSION:
false

IRs:
RETURN False"];
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: IF 31

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_858(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1374(bool) = REF_858 == False
CONDITION TMP_1374"];
31->32[label="True"];
31->33[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_859(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1375(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_859(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_1375(bool)"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_860(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_860"];
}
// Function: 35144.sol-BananaGame-oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_846(None) -> _proof[0]
TMP_1297(bool) = REF_846 != L
REF_847(None) -> _proof[1]
TMP_1298(bool) = REF_847 != P
TMP_1299(bool) = TMP_1297 || TMP_1298
REF_848(None) -> _proof[2]
TMP_1300(bool) = REF_848 != 1
TMP_1301(bool) = TMP_1299 || TMP_1300
CONDITION TMP_1301"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_1302 = CONVERT _result to bytes
TMP_1303(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_1304(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_1302,TMP_1303)
proofVerified(bool) := TMP_1304(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_1305(bool) = proofVerified == False
CONDITION TMP_1305"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
2

IRs:
RETURN 2"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 35144.sol-BananaGame-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_1263(uint256) = sig2offset + 1
REF_840(None) -> proof[TMP_1263]
TMP_1264 = CONVERT REF_840 to uint256
TMP_1265(uint256) = TMP_1264 + 2
TMP_1266 = new bytes(TMP_1265)
sig2(bytes) := TMP_1266(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_841 -> LENGTH sig2
TMP_1267(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_841,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_1269 = new bytes(64)
appkey1_pubkey(bytes) := TMP_1269(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_1270(uint256) = 3 + 1
TMP_1271(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1270,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_1273(uint256) = 1 + 65
TMP_1274(uint256) = TMP_1273 + 32
TMP_1275 = new bytes(TMP_1274)
tosign2(bytes) := TMP_1275(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = 1

IRs:
REF_842(uint256) -> tosign2[0]
REF_842(uint256) (->tosign2) := 1(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_1276(uint256) = sig2offset - 65
TMP_1277(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1276,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_1278(uint256) = 1 + 65
TMP_1279(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_1278)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_1280(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_1281(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1280,sig2,appkey1_pubkey)
sigok(bool) := TMP_1281(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_1282(bool) = sigok == False
CONDITION TMP_1282"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_1284(uint256) = 1 + 65
TMP_1285 = new bytes(TMP_1284)
tosign3(bytes) := TMP_1285(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_843(uint256) -> tosign3[0]
REF_843(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_1286(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_1288(uint256) = 3 + 65
TMP_1289(uint256) = TMP_1288 + 1
REF_844(None) -> proof[TMP_1289]
TMP_1290 = CONVERT REF_844 to uint256
TMP_1291(uint256) = TMP_1290 + 2
TMP_1292 = new bytes(TMP_1291)
sig3(bytes) := TMP_1292(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_1293(uint256) = 3 + 65
REF_845 -> LENGTH sig3
TMP_1294(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1293,REF_845,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_1295(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_1296(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1295,sig3,LEDGERKEY)
sigok(bool) := TMP_1296(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 35144.sol-BananaGame-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_randomDS_args[queryId] = commitment

IRs:
REF_837(bytes32) -> oraclize_randomDS_args[queryId]
REF_837(bytes32) (->oraclize_randomDS_args) := commitment(bytes32)"];
}
// Function: 35144.sol-BananaGame-oraclize_setConfig(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setConfig(config)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setConfig, arguments:['config']  
RETURN TMP_1030"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-BananaGame-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_1028"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-BananaGame-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_710(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_711(bool) = TMP_710 > 0
CONDITION TMP_711"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_712 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_712(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_714(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_715(bool) = TMP_714 > 0
CONDITION TMP_715"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_716 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_716(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_718(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_719(bool) = TMP_718 > 0
CONDITION TMP_719"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_720 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_720(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_722(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_723(bool) = TMP_722 > 0
CONDITION TMP_723"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_724 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_724(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_726(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_727(bool) = TMP_726 > 0
CONDITION TMP_727"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_728 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_728(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_729(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_730(bool) = TMP_729 > 0
CONDITION TMP_730"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_731 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_731(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_732(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_733(bool) = TMP_732 > 0
CONDITION TMP_733"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_734 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_734(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 35144.sol-BananaGame-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 35144.sol-BananaGame-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_1026"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-BananaGame-oraclize_useCoupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-BananaGame-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_1034 = CONVERT _a to bytes
tmp(bytes) := TMP_1034(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_1035(uint256) = 2 * 20
TMP_1036(uint256) = 2 + TMP_1035
TMP_1037(bool) = i < TMP_1036
CONDITION TMP_1037"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_731(None) -> tmp[i]
TMP_1038 = CONVERT REF_731 to uint160
b1(uint160) := TMP_1038(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_1039(uint256) = i + 1
REF_732(None) -> tmp[TMP_1039]
TMP_1040 = CONVERT REF_732 to uint160
b2(uint160) := TMP_1040(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_1041(bool) = b1 >= 97
TMP_1042(bool) = b1 <= 102
TMP_1043(bool) = TMP_1041 && TMP_1042
CONDITION TMP_1043"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_1044(bool) = b1 >= 65
TMP_1045(bool) = b1 <= 70
TMP_1046(bool) = TMP_1044 && TMP_1045
CONDITION TMP_1046"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_1047(bool) = b1 >= 48
TMP_1048(bool) = b1 <= 57
TMP_1049(bool) = TMP_1047 && TMP_1048
CONDITION TMP_1049"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_1050(bool) = b2 >= 97
TMP_1051(bool) = b2 <= 102
TMP_1052(bool) = TMP_1050 && TMP_1051
CONDITION TMP_1052"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_1053(bool) = b2 >= 65
TMP_1054(bool) = b2 <= 70
TMP_1055(bool) = TMP_1053 && TMP_1054
CONDITION TMP_1055"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_1056(bool) = b2 >= 48
TMP_1057(bool) = b2 <= 57
TMP_1058(bool) = TMP_1056 && TMP_1057
CONDITION TMP_1058"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_1059(uint160) = b1 * 16
TMP_1060(uint160) = TMP_1059 + b2
iaddr(uint160) = iaddr + TMP_1060"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_1061 = CONVERT iaddr to address
RETURN TMP_1061"];
}
// Function: 35144.sol-BananaGame-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_1130(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_1130"];
}
// Function: 35144.sol-BananaGame-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_1131 = CONVERT _a to bytes
bresult(bytes) := TMP_1131(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_777 -> LENGTH bresult
TMP_1132(bool) = i < REF_777
CONDITION TMP_1132"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_778(None) -> bresult[i]
TMP_1133(bool) = REF_778 >= 48
REF_779(None) -> bresult[i]
TMP_1134(bool) = REF_779 <= 57
TMP_1135(bool) = TMP_1133 && TMP_1134
CONDITION TMP_1135"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_1136(bool) = _b == 0
CONDITION TMP_1136"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_1137(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_780(None) -> bresult[i]
TMP_1138 = CONVERT REF_780 to uint256
TMP_1139(uint256) = TMP_1138 - 48
mint(uint256) = mint + TMP_1139"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_781(None) -> bresult[i]
TMP_1140(bool) = REF_781 == 46
CONDITION TMP_1140"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_1141(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_1142(bool) = _b > 0
CONDITION TMP_1142"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_1143(uint256) = 10 ** _b
mint(uint256) = mint * TMP_1143"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 35144.sol-BananaGame-profitDistribution()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: NEW VARIABLE 1
"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->19;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= investorsNum

IRs:
TMP_1516(bool) = i <= investorsNum
CONDITION TMP_1516"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
currentInvestor = investors[i].investorAddress

IRs:
REF_918(BananaGame.Investor) -> investors[i]
REF_919(address) -> REF_918.investorAddress
currentInvestor(address) := REF_919(address)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
profitOfInvestor = getProfitShare(currentInvestor)

IRs:
TMP_1517(uint256) = INTERNAL_CALL, BananaGame.getProfitShare(address)(currentInvestor)
profitOfInvestor(uint256) := TMP_1517(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
lossesOfInvestor = getLossesShare(currentInvestor)

IRs:
TMP_1518(uint256) = INTERNAL_CALL, BananaGame.getLossesShare(address)(currentInvestor)
lossesOfInvestor(uint256) := TMP_1518(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
(investors[i].amountInvested + profitOfInvestor >= investors[i].amountInvested) && (investors[i].amountInvested + profitOfInvestor >= lossesOfInvestor)

IRs:
REF_920(BananaGame.Investor) -> investors[i]
REF_921(uint256) -> REF_920.amountInvested
TMP_1519(uint256) = REF_921 + profitOfInvestor
REF_922(BananaGame.Investor) -> investors[i]
REF_923(uint256) -> REF_922.amountInvested
TMP_1520(bool) = TMP_1519 >= REF_923
REF_924(BananaGame.Investor) -> investors[i]
REF_925(uint256) -> REF_924.amountInvested
TMP_1521(uint256) = REF_925 + profitOfInvestor
TMP_1522(bool) = TMP_1521 >= lossesOfInvestor
TMP_1523(bool) = TMP_1520 && TMP_1522
CONDITION TMP_1523"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
investors[i].amountInvested += profitOfInvestor - lossesOfInvestor

IRs:
REF_926(BananaGame.Investor) -> investors[i]
REF_927(uint256) -> REF_926.amountInvested
TMP_1524(uint256) = profitOfInvestor - lossesOfInvestor
REF_927(-> investors) = REF_927 + TMP_1524"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
LOG_InvestorCapitalUpdate(currentInvestor,int256(profitOfInvestor - lossesOfInvestor))

IRs:
TMP_1525(uint256) = profitOfInvestor - lossesOfInvestor
TMP_1526 = CONVERT TMP_1525 to int256
Emit LOG_InvestorCapitalUpdate(currentInvestor,TMP_1526)"];
11->14;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isStopped = true

IRs:
isStopped(bool) := True(bool)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
LOG_EmergencyAutoStop()

IRs:
Emit LOG_EmergencyAutoStop()"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
copyInvested + investors[i].amountInvested >= copyInvested

IRs:
REF_928(BananaGame.Investor) -> investors[i]
REF_929(uint256) -> REF_928.amountInvested
TMP_1529(uint256) = copyInvested + REF_929
TMP_1530(bool) = TMP_1529 >= copyInvested
CONDITION TMP_1530"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyInvested += investors[i].amountInvested

IRs:
REF_930(BananaGame.Investor) -> investors[i]
REF_931(uint256) -> REF_930.amountInvested
copyInvested(uint256) = copyInvested + REF_931"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_1531(uint256) := i(uint256)
i(uint256) = i + 1"];
18->5;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
delete investorsProfit

IRs:
investorsProfit = delete investorsProfit "];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
delete investorsLosses

IRs:
investorsLosses = delete investorsLosses "];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
invest = copyInvested

IRs:
invest(uint256) := copyInvested(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
profitDistributed = true

IRs:
profitDistributed(bool) := True(bool)"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
onlyIfProfitNotDistributed()

IRs:
MODIFIER_CALL, BananaGame.onlyIfProfitNotDistributed()()"];
23->1;
}
// Function: 35144.sol-BananaGame-safeSend(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value == 0

IRs:
TMP_1451(bool) = value == 0
CONDITION TMP_1451"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LOG_ZeroSend()

IRs:
Emit LOG_ZeroSend()"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
this.balance < value

IRs:
REF_888(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_1453(bool) = REF_888 < value
CONDITION TMP_1453"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LOG_ValueIsTooBig()

IRs:
Emit LOG_ValueIsTooBig()"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! (addr.call.gas(safeGas).value(value)())

IRs:
TMP_1457(bool) = LOW_LEVEL_CALL, dest:addr, function:call, arguments:[] value:value gas:safeGas
TMP_1458 = UnaryType.BANG TMP_1457 
CONDITION TMP_1458"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
LOG_FailedSend(addr,value)

IRs:
Emit LOG_FailedSend(addr,value)"];
10->11;
11[label="Node Type: END_IF 11
"];
}
// Function: 35144.sol-BananaGame-safeSend(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value == 0

IRs:
TMP_1436(bool) = value == 0
CONDITION TMP_1436"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LOG_ZeroSend()

IRs:
Emit LOG_ZeroSend()"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
this.balance < value

IRs:
REF_884(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_1438(bool) = REF_884 < value
CONDITION TMP_1438"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LOG_ValueIsTooBig()

IRs:
Emit LOG_ValueIsTooBig()"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! (addr.call.gas(safeGas).value(value)())

IRs:
TMP_1442(bool) = LOW_LEVEL_CALL, dest:addr, function:call, arguments:[] value:value gas:safeGas
TMP_1443 = UnaryType.BANG TMP_1442 
CONDITION TMP_1443"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
LOG_FailedSend(addr,value)

IRs:
Emit LOG_FailedSend(addr,value)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
int256(value - amount) > 0

IRs:
TMP_1445(uint256) = value - amount
TMP_1446 = CONVERT TMP_1445 to int256
TMP_1447(bool) = TMP_1446 > 0
CONDITION TMP_1447"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
investorsLosses += value - amount

IRs:
TMP_1448(uint256) = value - amount
investorsLosses(uint256) = investorsLosses + TMP_1448"];
13->15;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
investorsProfit += amount - value

IRs:
TMP_1449(uint256) = amount - value
investorsProfit(uint256) = investorsProfit + TMP_1449"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
LOG_SuccessfulSend(addr,amount,value)

IRs:
Emit LOG_SuccessfulSend(addr,amount,value)"];
}
// Function: 35144.sol-BananaGame-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 35144.sol-BananaGame-searchSmallestInvestor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
investorID = investorsNum

IRs:
investorID(uint256) := investorsNum(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = investorsNum

IRs:
i(uint256) := investorsNum(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i >= 1

IRs:
TMP_1563(bool) = i >= 1
CONDITION TMP_1563"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
getBalance(investors[i].investorAddress) < getBalance(investors[investorID].investorAddress)

IRs:
REF_962(BananaGame.Investor) -> investors[i]
REF_963(address) -> REF_962.investorAddress
TMP_1564(uint256) = INTERNAL_CALL, BananaGame.getBalance(address)(REF_963)
REF_964(BananaGame.Investor) -> investors[investorID]
REF_965(address) -> REF_964.investorAddress
TMP_1565(uint256) = INTERNAL_CALL, BananaGame.getBalance(address)(REF_965)
TMP_1566(bool) = TMP_1564 < TMP_1565
CONDITION TMP_1566"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
investorID = i

IRs:
investorID(uint256) := i(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i --

IRs:
TMP_1567(uint256) := i(uint256)
i(uint256) = i - 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
investorID

IRs:
RETURN investorID"];
}
// Function: 35144.sol-BananaGame-setStarted()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isStopped = false

IRs:
isStopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
2->1;
}
// Function: 35144.sol-BananaGame-setStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isStopped = true

IRs:
isStopped(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LOG_ContractStopped()

IRs:
Emit LOG_ContractStopped()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BananaGame.onlyOwner()()"];
3->1;
}
// Function: 35144.sol-BananaGame-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_1615(uint256) = 60 * 60
TMP_1616(uint256) = TMP_1615 * 24
day(uint256) := TMP_1616(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_1617(uint256) = 60 * 60
TMP_1618(uint256) = TMP_1617 * 24
TMP_1619(uint256) = TMP_1618 * 7
week(uint256) := TMP_1619(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_1620(uint256) = 60 * 60
TMP_1621(uint256) = TMP_1620 * 24
TMP_1622(uint256) = TMP_1621 * 30
month(uint256) := TMP_1622(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
times = 16

IRs:
times(uint256) := 16(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
safeGas = 2300

IRs:
safeGas(uint256) := 2300(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
ORACLIZE_GAS_LIMIT = 130000

IRs:
ORACLIZE_GAS_LIMIT(uint256) := 130000(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
percent = 95

IRs:
percent(uint256) := 95(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
minBet = 2000000000000000

IRs:
minBet(uint256) := 2000000000000000(uint256)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
maxInvestors = 10

IRs:
maxInvestors(uint256) := 10(uint256)"];
19->20;
20[label="Node Type: OTHER_ENTRYPOINT 20

EXPRESSION:
divestFee = 50

IRs:
divestFee(uint256) := 50(uint256)"];
20->21;
21[label="Node Type: OTHER_ENTRYPOINT 21

EXPRESSION:
investorsNum = 0

IRs:
investorsNum(uint256) := 0(uint256)"];
21->22;
22[label="Node Type: OTHER_ENTRYPOINT 22

EXPRESSION:
investorsProfit = 0

IRs:
investorsProfit(uint256) := 0(uint256)"];
22->23;
23[label="Node Type: OTHER_ENTRYPOINT 23

EXPRESSION:
investorsLosses = 0

IRs:
investorsLosses(uint256) := 0(uint256)"];
}
// Function: 35144.sol-BananaGame-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_1062 = CONVERT _a to bytes
a(bytes) := TMP_1062(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_1063 = CONVERT _b to bytes
b(bytes) := TMP_1063(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_733 -> LENGTH a
minLength(uint256) := REF_733(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_734 -> LENGTH b
TMP_1064(bool) = REF_734 < minLength
CONDITION TMP_1064"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_735 -> LENGTH b
minLength(uint256) := REF_735(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_1065(bool) = i < minLength
CONDITION TMP_1065"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_736(None) -> a[i]
REF_737(None) -> b[i]
TMP_1066(bool) = REF_736 < REF_737
CONDITION TMP_1066"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_1067(uint256) = 0 - 1
RETURN TMP_1067"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_738(None) -> a[i]
REF_739(None) -> b[i]
TMP_1068(bool) = REF_738 > REF_739
CONDITION TMP_1068"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_1069(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_740 -> LENGTH a
REF_741 -> LENGTH b
TMP_1070(bool) = REF_740 < REF_741
CONDITION TMP_1070"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_1071(uint256) = 0 - 1
RETURN TMP_1071"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_742 -> LENGTH a
REF_743 -> LENGTH b
TMP_1072(bool) = REF_742 > REF_743
CONDITION TMP_1072"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 35144.sol-BananaGame-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_1129(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_1129"];
}
// Function: 35144.sol-BananaGame-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_1128(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_1128"];
}
// Function: 35144.sol-BananaGame-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_1127(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_1127"];
}
// Function: 35144.sol-BananaGame-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_1099 = CONVERT _a to bytes
_ba(bytes) := TMP_1099(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_1100 = CONVERT _b to bytes
_bb(bytes) := TMP_1100(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_1101 = CONVERT _c to bytes
_bc(bytes) := TMP_1101(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_1102 = CONVERT _d to bytes
_bd(bytes) := TMP_1102(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_1103 = CONVERT _e to bytes
_be(bytes) := TMP_1103(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_757 -> LENGTH _ba
REF_758 -> LENGTH _bb
TMP_1105(uint256) = REF_757 + REF_758
REF_759 -> LENGTH _bc
TMP_1106(uint256) = TMP_1105 + REF_759
REF_760 -> LENGTH _bd
TMP_1107(uint256) = TMP_1106 + REF_760
REF_761 -> LENGTH _be
TMP_1108(uint256) = TMP_1107 + REF_761
TMP_1109 = new string(TMP_1108)
abcde(string) := TMP_1109(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_1110 = CONVERT abcde to bytes
babcde(bytes) := TMP_1110(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_762 -> LENGTH _ba
TMP_1111(bool) = i < REF_762
CONDITION TMP_1111"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_1112(uint256) := k(uint256)
k(uint256) = k + 1
REF_763(None) -> babcde[TMP_1112]
REF_764(None) -> _ba[i]
REF_763(None) (->babcde) := REF_764(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_1113(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_765 -> LENGTH _bb
TMP_1114(bool) = i < REF_765
CONDITION TMP_1114"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_1115(uint256) := k(uint256)
k(uint256) = k + 1
REF_766(None) -> babcde[TMP_1115]
REF_767(None) -> _bb[i]
REF_766(None) (->babcde) := REF_767(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_1116(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_768 -> LENGTH _bc
TMP_1117(bool) = i < REF_768
CONDITION TMP_1117"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_1118(uint256) := k(uint256)
k(uint256) = k + 1
REF_769(None) -> babcde[TMP_1118]
REF_770(None) -> _bc[i]
REF_769(None) (->babcde) := REF_770(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_1119(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_771 -> LENGTH _bd
TMP_1120(bool) = i < REF_771
CONDITION TMP_1120"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_1121(uint256) := k(uint256)
k(uint256) = k + 1
REF_772(None) -> babcde[TMP_1121]
REF_773(None) -> _bd[i]
REF_772(None) (->babcde) := REF_773(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_1122(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_774 -> LENGTH _be
TMP_1123(bool) = i < REF_774
CONDITION TMP_1123"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_1124(uint256) := k(uint256)
k(uint256) = k + 1
REF_775(None) -> babcde[TMP_1124]
REF_776(None) -> _be[i]
REF_775(None) (->babcde) := REF_776(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_1125(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_1126 = CONVERT babcde to string
RETURN TMP_1126"];
}
// Function: 35144.sol-BananaGame-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_783 -> LENGTH arr
arrlen(uint256) := REF_783(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_1157(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_1157(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_1158(bool) = i < arrlen
CONDITION TMP_1158"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_784(bytes) -> elemArray[i]
REF_785(string) -> arr[i]
TMP_1159 = CONVERT REF_785 to bytes
REF_784(bytes) (->elemArray) := TMP_1159(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_786(bytes) -> elemArray[i]
REF_787 -> LENGTH REF_786
REF_788(bytes) -> elemArray[i]
REF_789 -> LENGTH REF_788
TMP_1160(uint256) = REF_789 - 1
TMP_1161(uint256) = TMP_1160 / 23
TMP_1162(uint256) = REF_787 + TMP_1161
TMP_1163(uint256) = TMP_1162 + 3
outputlen(uint256) = outputlen + TMP_1163"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1164(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_1165(uint256) = arrlen + 128
cborlen(uint256) := TMP_1165(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_1166 = CONVERT cborlen to bytes1
REF_790 -> LENGTH TMP_1166
outputlen(uint256) = outputlen + REF_790"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_1168 = new bytes(outputlen)
res(bytes) := TMP_1168(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_1169 = CONVERT cborlen to bytes1
REF_791 -> LENGTH TMP_1169
TMP_1170(bool) = REF_791 > ctr
CONDITION TMP_1170"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_792(None) -> res[ctr]
TMP_1171 = CONVERT cborlen to bytes1
REF_793(None) -> TMP_1171[ctr]
REF_792(None) (->res) := REF_793(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_1172(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_1173(bool) = i < arrlen
CONDITION TMP_1173"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_794(uint256) -> res[ctr]
REF_794(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_1174(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_795(bytes) -> elemArray[i]
REF_796 -> LENGTH REF_795
TMP_1175(bool) = x < REF_796
CONDITION TMP_1175"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_1176(uint256) = x % 23
TMP_1177(bool) = TMP_1176 == 0
CONDITION TMP_1177"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_1178 = CONVERT elemcborlen to bytes1
REF_797 -> LENGTH TMP_1178
TMP_1179(uint256) = ctr - lctr
TMP_1180(bool) = REF_797 > TMP_1179
CONDITION TMP_1180"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_798(None) -> res[ctr]
TMP_1181 = CONVERT elemcborlen to bytes1
TMP_1182(uint256) = ctr - lctr
REF_799(None) -> TMP_1181[TMP_1182]
REF_798(None) (->res) := REF_799(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_1183(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_800(None) -> res[ctr]
REF_801(bytes) -> elemArray[i]
REF_802(None) -> REF_801[x]
REF_800(None) (->res) := REF_802(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_1184(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_1185(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_803(uint256) -> res[ctr]
REF_803(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_1186(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_1187(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_804(bytes) -> elemArray[i]
REF_805 -> LENGTH REF_804
TMP_1188(uint256) = REF_805 - x
TMP_1189(bool) = TMP_1188 >= 24
CONDITION TMP_1189"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_806(bytes) -> elemArray[i]
REF_807 -> LENGTH REF_806
TMP_1190(uint256) = REF_807 - x
elemcborlen(uint256) := TMP_1190(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 35144.sol-BananaGame-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_1144(bool) = i == 0
CONDITION TMP_1144"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_1145(bool) = j != 0
CONDITION TMP_1145"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_1146(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_1148 = new bytes(len)
bstr(bytes) := TMP_1148(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_1149(uint256) = len - 1
k(uint256) := TMP_1149(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_1150(bool) = i != 0
CONDITION TMP_1150"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_1151(uint256) := k(uint256)
k(uint256) = k - 1
REF_782(bytes1) -> bstr[TMP_1151]
TMP_1152(uint256) = i % 10
TMP_1153(uint256) = 48 + TMP_1152
TMP_1154 = CONVERT TMP_1153 to bytes1
REF_782(bytes1) (->bstr) := TMP_1154(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_1155 = CONVERT bstr to string
RETURN TMP_1155"];
}
// Function: 35144.sol-BananaGame-validInvestNum(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
n > investorsNum

IRs:
TMP_1664(bool) = n > investorsNum
CONDITION TMP_1664"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 35144.sol-BananaGame-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_1243 = new bytes(32)
sigr_(bytes) := TMP_1243(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_838(None) -> dersig[3]
TMP_1244 = CONVERT REF_838 to uint256
TMP_1245(uint256) = TMP_1244 - 32
TMP_1246(uint256) = 4 + TMP_1245
offset(uint256) := TMP_1246(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_1247(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_1247(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_1249 = new bytes(32)
sigs_(bytes) := TMP_1249(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_1250(uint256) = 32 + 2
offset(uint256) = offset + TMP_1250"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_1251(uint256) = offset - 1
REF_839(None) -> dersig[TMP_1251]
TMP_1252 = CONVERT REF_839 to uint256
TMP_1253(uint256) = TMP_1252 - 32
TMP_1254(uint256) = offset + TMP_1253
TMP_1255(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_1254,32,sigs_,0)
sigs_(bytes) := TMP_1255(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_3(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_3 index: 0 
signer(address)= UNPACK TUPLE_3 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(sha3()(pubkey)) == signer

IRs:
TMP_1256(bytes32) = SOLIDITY_CALL sha3()(pubkey)
TMP_1257 = CONVERT TMP_1256 to address
TMP_1258(bool) = TMP_1257 == signer
CONDITION TMP_1258"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_4(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_4 index: 0 
signer(address)= UNPACK TUPLE_4 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(sha3()(pubkey)) == signer)

IRs:
TMP_1259(bytes32) = SOLIDITY_CALL sha3()(pubkey)
TMP_1260 = CONVERT TMP_1259 to address
TMP_1261(bool) = TMP_1260 == signer
RETURN TMP_1261"];
}
// Function: 35144.sol-BananaGame-watchPercent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
percent

IRs:
RETURN percent"];
}
// Function: 35144.sol-OraclizeAddrResolverI-getAddress()
digraph{
}
// Function: 35144.sol-OraclizeI-getPrice(string)
digraph{
}
// Function: 35144.sol-OraclizeI-getPrice(string,uint256)
digraph{
}
// Function: 35144.sol-OraclizeI-query(uint256,string,string)
digraph{
}
// Function: 35144.sol-OraclizeI-query2(uint256,string,string,string)
digraph{
}
// Function: 35144.sol-OraclizeI-query2_withGasLimit(uint256,string,string,string,uint256)
digraph{
}
// Function: 35144.sol-OraclizeI-queryN(uint256,string,bytes)
digraph{
}
// Function: 35144.sol-OraclizeI-queryN_withGasLimit(uint256,string,bytes,uint256)
digraph{
}
// Function: 35144.sol-OraclizeI-query_withGasLimit(uint256,string,string,uint256)
digraph{
}
// Function: 35144.sol-OraclizeI-randomDS_getSessionPubKeyHash()
digraph{
}
// Function: 35144.sol-OraclizeI-setConfig(bytes32)
digraph{
}
// Function: 35144.sol-OraclizeI-setCustomGasPrice(uint256)
digraph{
}
// Function: 35144.sol-OraclizeI-setProofType(bytes1)
digraph{
}
// Function: 35144.sol-OraclizeI-useCoupon(string)
digraph{
}
// Function: 35144.sol-usingOraclize-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_26 = new bytes(0)
INTERNAL_CALL, usingOraclize.__callback(bytes32,string,bytes)(myid,result,TMP_26)"];
}
// Function: 35144.sol-usingOraclize-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 35144.sol-usingOraclize-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_373 -> LENGTH arr
arrlen(uint256) := REF_373(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_482(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_482(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_483(bool) = i < arrlen
CONDITION TMP_483"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_374(bytes) -> elemArray[i]
REF_375(bytes) -> arr[i]
TMP_484 = CONVERT REF_375 to bytes
REF_374(bytes) (->elemArray) := TMP_484(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_376(bytes) -> elemArray[i]
REF_377 -> LENGTH REF_376
REF_378(bytes) -> elemArray[i]
REF_379 -> LENGTH REF_378
TMP_485(uint256) = REF_379 - 1
TMP_486(uint256) = TMP_485 / 23
TMP_487(uint256) = REF_377 + TMP_486
TMP_488(uint256) = TMP_487 + 3
outputlen(uint256) = outputlen + TMP_488"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_489(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_490(uint256) = arrlen + 128
cborlen(uint256) := TMP_490(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_491 = CONVERT cborlen to bytes1
REF_380 -> LENGTH TMP_491
outputlen(uint256) = outputlen + REF_380"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_493 = new bytes(outputlen)
res(bytes) := TMP_493(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_494 = CONVERT cborlen to bytes1
REF_381 -> LENGTH TMP_494
TMP_495(bool) = REF_381 > ctr
CONDITION TMP_495"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_382(None) -> res[ctr]
TMP_496 = CONVERT cborlen to bytes1
REF_383(None) -> TMP_496[ctr]
REF_382(None) (->res) := REF_383(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_497(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_498(bool) = i < arrlen
CONDITION TMP_498"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_384(uint256) -> res[ctr]
REF_384(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_499(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_385(bytes) -> elemArray[i]
REF_386 -> LENGTH REF_385
TMP_500(bool) = x < REF_386
CONDITION TMP_500"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_501(uint256) = x % 23
TMP_502(bool) = TMP_501 == 0
CONDITION TMP_502"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_503 = CONVERT elemcborlen to bytes1
REF_387 -> LENGTH TMP_503
TMP_504(uint256) = ctr - lctr
TMP_505(bool) = REF_387 > TMP_504
CONDITION TMP_505"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_388(None) -> res[ctr]
TMP_506 = CONVERT elemcborlen to bytes1
TMP_507(uint256) = ctr - lctr
REF_389(None) -> TMP_506[TMP_507]
REF_388(None) (->res) := REF_389(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_508(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_390(None) -> res[ctr]
REF_391(bytes) -> elemArray[i]
REF_392(None) -> REF_391[x]
REF_390(None) (->res) := REF_392(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_509(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_510(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_393(uint256) -> res[ctr]
REF_393(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_511(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_512(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_394(bytes) -> elemArray[i]
REF_395 -> LENGTH REF_394
TMP_513(uint256) = REF_395 - x
TMP_514(bool) = TMP_513 >= 24
CONDITION TMP_514"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_396(bytes) -> elemArray[i]
REF_397 -> LENGTH REF_396
TMP_515(uint256) = REF_397 - x
elemcborlen(uint256) := TMP_515(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 35144.sol-usingOraclize-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_666(uint256) = length + toOffset
minLength(uint256) := TMP_666(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
to.length < minLength

IRs:
REF_426 -> LENGTH to
TMP_667(bool) = REF_426 < minLength
CONDITION TMP_667"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_668(uint256) = 32 + fromOffset
i(uint256) := TMP_668(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_669(uint256) = 32 + toOffset
j(uint256) := TMP_669(uint256)"];
6->7;
7[label="Node Type: BEGIN_LOOP 7
"];
7->8;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_670(uint256) = 32 + fromOffset
TMP_671(uint256) = TMP_670 + length
TMP_672(bool) = i < TMP_671
CONDITION TMP_672"];
8->9[label="True"];
8->13[label="False"];
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
12->8;
13[label="Node Type: END_LOOP 13
"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 35144.sol-usingOraclize-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_698(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_699 = CONVERT TMP_698 to OraclizeI
oraclize(OraclizeI) := TMP_699(OraclizeI)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 35144.sol-usingOraclize-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_427 -> LENGTH sig
TMP_673(bool) = REF_427 != 65
CONDITION TMP_673"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_674(bool) = v < 27
CONDITION TMP_674"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_675(bool) = v != 27
TMP_676(bool) = v != 28
TMP_677(bool) = TMP_675 && TMP_676
CONDITION TMP_677"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_2(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_2"];
}
// Function: 35144.sol-usingOraclize-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 35144.sol-usingOraclize-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_363 = CONVERT _haystack to bytes
h(bytes) := TMP_363(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_364 = CONVERT _needle to bytes
n(bytes) := TMP_364(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_309 -> LENGTH h
TMP_365(bool) = REF_309 < 1
REF_310 -> LENGTH n
TMP_366(bool) = REF_310 < 1
TMP_367(bool) = TMP_365 || TMP_366
REF_311 -> LENGTH n
REF_312 -> LENGTH h
TMP_368(bool) = REF_311 > REF_312
TMP_369(bool) = TMP_367 || TMP_368
CONDITION TMP_369"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_370(uint256) = 0 - 1
RETURN TMP_370"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_313 -> LENGTH h
TMP_371(uint256) = 2 ** 128
TMP_372(uint256) = TMP_371 - 1
TMP_373(bool) = REF_313 > TMP_372
CONDITION TMP_373"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_374(uint256) = 0 - 1
RETURN TMP_374"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_314 -> LENGTH h
TMP_375(bool) = i < REF_314
CONDITION TMP_375"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_315(None) -> h[i]
REF_316(None) -> n[0]
TMP_376(bool) = REF_315 == REF_316
CONDITION TMP_376"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_317 -> LENGTH n
TMP_377(bool) = subindex < REF_317
TMP_378(uint256) = i + subindex
REF_318 -> LENGTH h
TMP_379(bool) = TMP_378 < REF_318
TMP_380(bool) = TMP_377 && TMP_379
TMP_381(uint256) = i + subindex
REF_319(None) -> h[TMP_381]
REF_320(None) -> n[subindex]
TMP_382(bool) = REF_319 == REF_320
TMP_383(bool) = TMP_380 && TMP_382
CONDITION TMP_383"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_384(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_321 -> LENGTH n
TMP_385(bool) = subindex == REF_321
CONDITION TMP_385"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_386 = CONVERT i to int256
RETURN TMP_386"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_387(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_388(uint256) = 0 - 1
RETURN TMP_388"];
}
// Function: 35144.sol-usingOraclize-matchBytes32Prefix(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < prefix.length

IRs:
REF_414 -> LENGTH prefix
TMP_596(bool) = i < REF_414
CONDITION TMP_596"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_415(None) -> content[i]
REF_416(None) -> prefix[i]
TMP_597(bool) = REF_415 != REF_416
CONDITION TMP_597"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_598(uint8) := i(uint8)
i(uint8) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 35144.sol-usingOraclize-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_686 = CONVERT OAR to address
TMP_687(bool) = TMP_686 == 0
TMP_688 = CONVERT OAR to address
TMP_689(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_688)
TMP_690(bool) = TMP_689 == 0
TMP_691(bool) = TMP_687 || TMP_690
CONDITION TMP_691"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_692(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_693 = CONVERT oraclize to address
TMP_694(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_695(bool) = TMP_693 != TMP_694
CONDITION TMP_695"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_696(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_697 = CONVERT TMP_696 to OraclizeI
oraclize(OraclizeI) := TMP_697(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 35144.sol-usingOraclize-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_314(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_314"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-usingOraclize-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 35144.sol-usingOraclize-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_30(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_30"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-usingOraclize-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_32(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_32"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-usingOraclize-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_nbytes == 0) || (_nbytes > 32)

IRs:
TMP_516(bool) = _nbytes == 0
TMP_517(bool) = _nbytes > 32
TMP_518(bool) = TMP_516 || TMP_517
CONDITION TMP_518"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_520 = new bytes(1)
nbytes(bytes) := TMP_520(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_398(bytes1) -> nbytes[0]
TMP_521 = CONVERT _nbytes to bytes1
REF_398(bytes1) (->nbytes) := TMP_521(bytes1)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
unonce = new bytes(32)

IRs:
TMP_523 = new bytes(32)
unonce(bytes) := TMP_523(bytes)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sessionKeyHash = new bytes(32)

IRs:
TMP_525 = new bytes(32)
sessionKeyHash(bytes) := TMP_525(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_526(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_526(bytes32)"];
8->9;
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash)

IRs:
args(bytes[3]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)']"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
queryId = oraclize_query(_delay,random,args,_customGasLimit)

IRs:
TMP_527(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[3],uint256)(_delay,random,args,_customGasLimit)
queryId(bytes32) := TMP_527(bytes32)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,sha3()(bytes8(_delay),args[1],sha256()(args[0]),args[2]))

IRs:
TMP_528 = CONVERT _delay to bytes8
REF_399(bytes) -> args[1]
REF_400(bytes) -> args[0]
TMP_529(bytes32) = SOLIDITY_CALL sha256()(REF_400)
REF_401(bytes) -> args[2]
TMP_530(bytes32) = SOLIDITY_CALL sha3()(TMP_528,REF_399,TMP_529,REF_401)
INTERNAL_CALL, usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_530)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_235(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_235(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_171(bytes) -> dynargs[0]
REF_172(bytes) -> args[0]
REF_171(bytes) (->dynargs) := REF_172(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_236(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_236"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_247(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_247(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_177(bytes) -> dynargs[0]
REF_178(bytes) -> args[0]
REF_177(bytes) (->dynargs) := REF_178(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_248(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_248"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_251(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_251(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_179(bytes) -> dynargs[0]
REF_180(bytes) -> args[0]
REF_179(bytes) (->dynargs) := REF_180(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_181(bytes) -> dynargs[1]
REF_182(bytes) -> args[1]
REF_181(bytes) (->dynargs) := REF_182(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_252(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_252"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_263(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_263(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_191(bytes) -> dynargs[0]
REF_192(bytes) -> args[0]
REF_191(bytes) (->dynargs) := REF_192(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_193(bytes) -> dynargs[1]
REF_194(bytes) -> args[1]
REF_193(bytes) (->dynargs) := REF_194(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_264(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_264"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_267(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_267(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_195(bytes) -> dynargs[0]
REF_196(bytes) -> args[0]
REF_195(bytes) (->dynargs) := REF_196(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_197(bytes) -> dynargs[1]
REF_198(bytes) -> args[1]
REF_197(bytes) (->dynargs) := REF_198(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_199(bytes) -> dynargs[2]
REF_200(bytes) -> args[2]
REF_199(bytes) (->dynargs) := REF_200(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_268(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_268"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_279(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_279(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_213(bytes) -> dynargs[0]
REF_214(bytes) -> args[0]
REF_213(bytes) (->dynargs) := REF_214(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_215(bytes) -> dynargs[1]
REF_216(bytes) -> args[1]
REF_215(bytes) (->dynargs) := REF_216(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_217(bytes) -> dynargs[2]
REF_218(bytes) -> args[2]
REF_217(bytes) (->dynargs) := REF_218(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_280(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_280"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_283(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_283(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_219(bytes) -> dynargs[0]
REF_220(bytes) -> args[0]
REF_219(bytes) (->dynargs) := REF_220(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_221(bytes) -> dynargs[1]
REF_222(bytes) -> args[1]
REF_221(bytes) (->dynargs) := REF_222(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_223(bytes) -> dynargs[2]
REF_224(bytes) -> args[2]
REF_223(bytes) (->dynargs) := REF_224(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_225(bytes) -> dynargs[3]
REF_226(bytes) -> args[3]
REF_225(bytes) (->dynargs) := REF_226(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_284(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_284"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_295(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_295(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_243(bytes) -> dynargs[0]
REF_244(bytes) -> args[0]
REF_243(bytes) (->dynargs) := REF_244(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_245(bytes) -> dynargs[1]
REF_246(bytes) -> args[1]
REF_245(bytes) (->dynargs) := REF_246(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_247(bytes) -> dynargs[2]
REF_248(bytes) -> args[2]
REF_247(bytes) (->dynargs) := REF_248(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_249(bytes) -> dynargs[3]
REF_250(bytes) -> args[3]
REF_249(bytes) (->dynargs) := REF_250(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_296(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_296"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_299(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_299(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_251(bytes) -> dynargs[0]
REF_252(bytes) -> args[0]
REF_251(bytes) (->dynargs) := REF_252(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_253(bytes) -> dynargs[1]
REF_254(bytes) -> args[1]
REF_253(bytes) (->dynargs) := REF_254(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_255(bytes) -> dynargs[2]
REF_256(bytes) -> args[2]
REF_255(bytes) (->dynargs) := REF_256(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_257(bytes) -> dynargs[3]
REF_258(bytes) -> args[3]
REF_257(bytes) (->dynargs) := REF_258(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_259(bytes) -> dynargs[4]
REF_260(bytes) -> args[4]
REF_259(bytes) (->dynargs) := REF_260(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_300(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_300"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_311(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_311(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_281(bytes) -> dynargs[0]
REF_282(bytes) -> args[0]
REF_281(bytes) (->dynargs) := REF_282(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_283(bytes) -> dynargs[1]
REF_284(bytes) -> args[1]
REF_283(bytes) (->dynargs) := REF_284(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_285(bytes) -> dynargs[2]
REF_286(bytes) -> args[2]
REF_285(bytes) (->dynargs) := REF_286(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_287(bytes) -> dynargs[3]
REF_288(bytes) -> args[3]
REF_287(bytes) (->dynargs) := REF_288(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_289(bytes) -> dynargs[4]
REF_290(bytes) -> args[4]
REF_289(bytes) (->dynargs) := REF_290(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_312(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_312"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_202(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_202(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_203(uint256) = tx.gasprice * 200000
TMP_204(uint256) = 1000000000000000000 + TMP_203
TMP_205(bool) = price > TMP_204
CONDITION TMP_205"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_206(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_206(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_208(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_208"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_226(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_226(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_227(uint256) = tx.gasprice * gaslimit
TMP_228(uint256) = 1000000000000000000 + TMP_227
TMP_229(bool) = price > TMP_228
CONDITION TMP_229"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_230(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_230(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_232(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_232"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_34(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_34(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_35(uint256) = tx.gasprice * 200000
TMP_36(uint256) = 1000000000000000000 + TMP_35
TMP_37(bool) = price > TMP_36
CONDITION TMP_37"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_39(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_39"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_62(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_62(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_63(uint256) = tx.gasprice * 200000
TMP_64(uint256) = 1000000000000000000 + TMP_63
TMP_65(bool) = price > TMP_64
CONDITION TMP_65"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_67(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_67"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_83(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_83(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_84(uint256) = tx.gasprice * gaslimit
TMP_85(uint256) = 1000000000000000000 + TMP_84
TMP_86(bool) = price > TMP_85
CONDITION TMP_86"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_88(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_88"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_55(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_55(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_56(uint256) = tx.gasprice * gaslimit
TMP_57(uint256) = 1000000000000000000 + TMP_56
TMP_58(bool) = price > TMP_57
CONDITION TMP_58"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_60(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_60"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_123(string[])  = new string[](1)
dynargs(string[]) = ['TMP_123(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_39(string) -> dynargs[0]
REF_40(string) -> args[0]
REF_39(string) (->dynargs) := REF_40(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_124(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_124"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_135(string[])  = new string[](1)
dynargs(string[]) = ['TMP_135(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_45(string) -> dynargs[0]
REF_46(string) -> args[0]
REF_45(string) (->dynargs) := REF_46(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_136(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_136"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_139(string[])  = new string[](2)
dynargs(string[]) = ['TMP_139(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_47(string) -> dynargs[0]
REF_48(string) -> args[0]
REF_47(string) (->dynargs) := REF_48(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_49(string) -> dynargs[1]
REF_50(string) -> args[1]
REF_49(string) (->dynargs) := REF_50(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_140(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_140"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_151(string[])  = new string[](2)
dynargs(string[]) = ['TMP_151(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_59(string) -> dynargs[0]
REF_60(string) -> args[0]
REF_59(string) (->dynargs) := REF_60(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_61(string) -> dynargs[1]
REF_62(string) -> args[1]
REF_61(string) (->dynargs) := REF_62(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_152(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_152"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_155(string[])  = new string[](3)
dynargs(string[]) = ['TMP_155(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_63(string) -> dynargs[0]
REF_64(string) -> args[0]
REF_63(string) (->dynargs) := REF_64(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_65(string) -> dynargs[1]
REF_66(string) -> args[1]
REF_65(string) (->dynargs) := REF_66(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_67(string) -> dynargs[2]
REF_68(string) -> args[2]
REF_67(string) (->dynargs) := REF_68(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_156(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_156"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_167(string[])  = new string[](3)
dynargs(string[]) = ['TMP_167(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_81(string) -> dynargs[0]
REF_82(string) -> args[0]
REF_81(string) (->dynargs) := REF_82(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_83(string) -> dynargs[1]
REF_84(string) -> args[1]
REF_83(string) (->dynargs) := REF_84(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_85(string) -> dynargs[2]
REF_86(string) -> args[2]
REF_85(string) (->dynargs) := REF_86(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_168(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_168"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_171(string[])  = new string[](4)
dynargs(string[]) = ['TMP_171(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_87(string) -> dynargs[0]
REF_88(string) -> args[0]
REF_87(string) (->dynargs) := REF_88(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_89(string) -> dynargs[1]
REF_90(string) -> args[1]
REF_89(string) (->dynargs) := REF_90(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_91(string) -> dynargs[2]
REF_92(string) -> args[2]
REF_91(string) (->dynargs) := REF_92(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_93(string) -> dynargs[3]
REF_94(string) -> args[3]
REF_93(string) (->dynargs) := REF_94(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_172(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_172"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_183(string[])  = new string[](4)
dynargs(string[]) = ['TMP_183(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_111(string) -> dynargs[0]
REF_112(string) -> args[0]
REF_111(string) (->dynargs) := REF_112(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_113(string) -> dynargs[1]
REF_114(string) -> args[1]
REF_113(string) (->dynargs) := REF_114(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_115(string) -> dynargs[2]
REF_116(string) -> args[2]
REF_115(string) (->dynargs) := REF_116(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_117(string) -> dynargs[3]
REF_118(string) -> args[3]
REF_117(string) (->dynargs) := REF_118(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_184(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_184"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_187(string[])  = new string[](5)
dynargs(string[]) = ['TMP_187(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_119(string) -> dynargs[0]
REF_120(string) -> args[0]
REF_119(string) (->dynargs) := REF_120(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_121(string) -> dynargs[1]
REF_122(string) -> args[1]
REF_121(string) (->dynargs) := REF_122(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_123(string) -> dynargs[2]
REF_124(string) -> args[2]
REF_123(string) (->dynargs) := REF_124(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_125(string) -> dynargs[3]
REF_126(string) -> args[3]
REF_125(string) (->dynargs) := REF_126(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_127(string) -> dynargs[4]
REF_128(string) -> args[4]
REF_127(string) (->dynargs) := REF_128(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_188(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_188"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_199(string[])  = new string[](5)
dynargs(string[]) = ['TMP_199(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_149(string) -> dynargs[0]
REF_150(string) -> args[0]
REF_149(string) (->dynargs) := REF_150(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_151(string) -> dynargs[1]
REF_152(string) -> args[1]
REF_151(string) (->dynargs) := REF_152(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_153(string) -> dynargs[2]
REF_154(string) -> args[2]
REF_153(string) (->dynargs) := REF_154(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_155(string) -> dynargs[3]
REF_156(string) -> args[3]
REF_155(string) (->dynargs) := REF_156(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_157(string) -> dynargs[4]
REF_158(string) -> args[4]
REF_157(string) (->dynargs) := REF_158(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_200(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_200"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_90(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_90(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_91(uint256) = tx.gasprice * 200000
TMP_92(uint256) = 1000000000000000000 + TMP_91
TMP_93(bool) = price > TMP_92
CONDITION TMP_93"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_94(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_94(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_96(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_96"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_114(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_114(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_115(uint256) = tx.gasprice * gaslimit
TMP_116(uint256) = 1000000000000000000 + TMP_115
TMP_117(bool) = price > TMP_116
CONDITION TMP_117"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_118(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_118(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_120(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_120"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_239(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_239(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_173(bytes) -> dynargs[0]
REF_174(bytes) -> args[0]
REF_173(bytes) (->dynargs) := REF_174(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_240(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_240"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_243(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_243(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_175(bytes) -> dynargs[0]
REF_176(bytes) -> args[0]
REF_175(bytes) (->dynargs) := REF_176(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_244(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_244"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_255(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_255(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_183(bytes) -> dynargs[0]
REF_184(bytes) -> args[0]
REF_183(bytes) (->dynargs) := REF_184(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_185(bytes) -> dynargs[1]
REF_186(bytes) -> args[1]
REF_185(bytes) (->dynargs) := REF_186(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_256(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_256"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_259(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_259(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_187(bytes) -> dynargs[0]
REF_188(bytes) -> args[0]
REF_187(bytes) (->dynargs) := REF_188(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_189(bytes) -> dynargs[1]
REF_190(bytes) -> args[1]
REF_189(bytes) (->dynargs) := REF_190(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_260(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_260"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_271(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_271(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_201(bytes) -> dynargs[0]
REF_202(bytes) -> args[0]
REF_201(bytes) (->dynargs) := REF_202(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_203(bytes) -> dynargs[1]
REF_204(bytes) -> args[1]
REF_203(bytes) (->dynargs) := REF_204(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_205(bytes) -> dynargs[2]
REF_206(bytes) -> args[2]
REF_205(bytes) (->dynargs) := REF_206(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_272(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_272"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_275(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_275(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_207(bytes) -> dynargs[0]
REF_208(bytes) -> args[0]
REF_207(bytes) (->dynargs) := REF_208(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_209(bytes) -> dynargs[1]
REF_210(bytes) -> args[1]
REF_209(bytes) (->dynargs) := REF_210(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_211(bytes) -> dynargs[2]
REF_212(bytes) -> args[2]
REF_211(bytes) (->dynargs) := REF_212(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_276(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_276"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_287(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_287(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_227(bytes) -> dynargs[0]
REF_228(bytes) -> args[0]
REF_227(bytes) (->dynargs) := REF_228(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_229(bytes) -> dynargs[1]
REF_230(bytes) -> args[1]
REF_229(bytes) (->dynargs) := REF_230(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_231(bytes) -> dynargs[2]
REF_232(bytes) -> args[2]
REF_231(bytes) (->dynargs) := REF_232(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_233(bytes) -> dynargs[3]
REF_234(bytes) -> args[3]
REF_233(bytes) (->dynargs) := REF_234(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_288(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_288"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_291(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_291(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_235(bytes) -> dynargs[0]
REF_236(bytes) -> args[0]
REF_235(bytes) (->dynargs) := REF_236(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_237(bytes) -> dynargs[1]
REF_238(bytes) -> args[1]
REF_237(bytes) (->dynargs) := REF_238(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_239(bytes) -> dynargs[2]
REF_240(bytes) -> args[2]
REF_239(bytes) (->dynargs) := REF_240(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_241(bytes) -> dynargs[3]
REF_242(bytes) -> args[3]
REF_241(bytes) (->dynargs) := REF_242(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_292(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_292"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_303(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_303(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_261(bytes) -> dynargs[0]
REF_262(bytes) -> args[0]
REF_261(bytes) (->dynargs) := REF_262(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_263(bytes) -> dynargs[1]
REF_264(bytes) -> args[1]
REF_263(bytes) (->dynargs) := REF_264(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_265(bytes) -> dynargs[2]
REF_266(bytes) -> args[2]
REF_265(bytes) (->dynargs) := REF_266(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_267(bytes) -> dynargs[3]
REF_268(bytes) -> args[3]
REF_267(bytes) (->dynargs) := REF_268(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_269(bytes) -> dynargs[4]
REF_270(bytes) -> args[4]
REF_269(bytes) (->dynargs) := REF_270(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_304(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_304"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_307(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_307(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_271(bytes) -> dynargs[0]
REF_272(bytes) -> args[0]
REF_271(bytes) (->dynargs) := REF_272(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_273(bytes) -> dynargs[1]
REF_274(bytes) -> args[1]
REF_273(bytes) (->dynargs) := REF_274(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_275(bytes) -> dynargs[2]
REF_276(bytes) -> args[2]
REF_275(bytes) (->dynargs) := REF_276(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_277(bytes) -> dynargs[3]
REF_278(bytes) -> args[3]
REF_277(bytes) (->dynargs) := REF_278(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_279(bytes) -> dynargs[4]
REF_280(bytes) -> args[4]
REF_279(bytes) (->dynargs) := REF_280(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_308(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_308"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_210(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_210(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_211(uint256) = tx.gasprice * 200000
TMP_212(uint256) = 1000000000000000000 + TMP_211
TMP_213(bool) = price > TMP_212
CONDITION TMP_213"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_214(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_214(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_216(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_216"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_218(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_218(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_219(uint256) = tx.gasprice * gaslimit
TMP_220(uint256) = 1000000000000000000 + TMP_219
TMP_221(bool) = price > TMP_220
CONDITION TMP_221"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_222(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_222(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_224(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_224"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_41(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_41(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_42(uint256) = tx.gasprice * 200000
TMP_43(uint256) = 1000000000000000000 + TMP_42
TMP_44(bool) = price > TMP_43
CONDITION TMP_44"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_46(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_46"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_69(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_69(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_70(uint256) = tx.gasprice * 200000
TMP_71(uint256) = 1000000000000000000 + TMP_70
TMP_72(bool) = price > TMP_71
CONDITION TMP_72"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_74(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_74"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_76(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_76(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_77(uint256) = tx.gasprice * gaslimit
TMP_78(uint256) = 1000000000000000000 + TMP_77
TMP_79(bool) = price > TMP_78
CONDITION TMP_79"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_81(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_81"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_48(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_48(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_49(uint256) = tx.gasprice * gaslimit
TMP_50(uint256) = 1000000000000000000 + TMP_49
TMP_51(bool) = price > TMP_50
CONDITION TMP_51"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_53(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_53"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_127(string[])  = new string[](1)
dynargs(string[]) = ['TMP_127(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_41(string) -> dynargs[0]
REF_42(string) -> args[0]
REF_41(string) (->dynargs) := REF_42(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_128(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_128"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_131(string[])  = new string[](1)
dynargs(string[]) = ['TMP_131(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_43(string) -> dynargs[0]
REF_44(string) -> args[0]
REF_43(string) (->dynargs) := REF_44(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_132(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_132"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_143(string[])  = new string[](2)
dynargs(string[]) = ['TMP_143(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_51(string) -> dynargs[0]
REF_52(string) -> args[0]
REF_51(string) (->dynargs) := REF_52(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_53(string) -> dynargs[1]
REF_54(string) -> args[1]
REF_53(string) (->dynargs) := REF_54(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_144(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_144"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_147(string[])  = new string[](2)
dynargs(string[]) = ['TMP_147(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_55(string) -> dynargs[0]
REF_56(string) -> args[0]
REF_55(string) (->dynargs) := REF_56(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_57(string) -> dynargs[1]
REF_58(string) -> args[1]
REF_57(string) (->dynargs) := REF_58(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_148(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_148"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_159(string[])  = new string[](3)
dynargs(string[]) = ['TMP_159(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_69(string) -> dynargs[0]
REF_70(string) -> args[0]
REF_69(string) (->dynargs) := REF_70(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_71(string) -> dynargs[1]
REF_72(string) -> args[1]
REF_71(string) (->dynargs) := REF_72(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_73(string) -> dynargs[2]
REF_74(string) -> args[2]
REF_73(string) (->dynargs) := REF_74(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_160(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_160"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_163(string[])  = new string[](3)
dynargs(string[]) = ['TMP_163(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_75(string) -> dynargs[0]
REF_76(string) -> args[0]
REF_75(string) (->dynargs) := REF_76(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_77(string) -> dynargs[1]
REF_78(string) -> args[1]
REF_77(string) (->dynargs) := REF_78(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_79(string) -> dynargs[2]
REF_80(string) -> args[2]
REF_79(string) (->dynargs) := REF_80(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_164(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_164"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_175(string[])  = new string[](4)
dynargs(string[]) = ['TMP_175(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_95(string) -> dynargs[0]
REF_96(string) -> args[0]
REF_95(string) (->dynargs) := REF_96(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_97(string) -> dynargs[1]
REF_98(string) -> args[1]
REF_97(string) (->dynargs) := REF_98(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_99(string) -> dynargs[2]
REF_100(string) -> args[2]
REF_99(string) (->dynargs) := REF_100(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_101(string) -> dynargs[3]
REF_102(string) -> args[3]
REF_101(string) (->dynargs) := REF_102(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_176(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_176"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_179(string[])  = new string[](4)
dynargs(string[]) = ['TMP_179(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_103(string) -> dynargs[0]
REF_104(string) -> args[0]
REF_103(string) (->dynargs) := REF_104(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_105(string) -> dynargs[1]
REF_106(string) -> args[1]
REF_105(string) (->dynargs) := REF_106(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_107(string) -> dynargs[2]
REF_108(string) -> args[2]
REF_107(string) (->dynargs) := REF_108(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_109(string) -> dynargs[3]
REF_110(string) -> args[3]
REF_109(string) (->dynargs) := REF_110(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_180(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_180"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_191(string[])  = new string[](5)
dynargs(string[]) = ['TMP_191(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_129(string) -> dynargs[0]
REF_130(string) -> args[0]
REF_129(string) (->dynargs) := REF_130(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_131(string) -> dynargs[1]
REF_132(string) -> args[1]
REF_131(string) (->dynargs) := REF_132(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_133(string) -> dynargs[2]
REF_134(string) -> args[2]
REF_133(string) (->dynargs) := REF_134(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_135(string) -> dynargs[3]
REF_136(string) -> args[3]
REF_135(string) (->dynargs) := REF_136(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_137(string) -> dynargs[4]
REF_138(string) -> args[4]
REF_137(string) (->dynargs) := REF_138(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_192(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_192"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_195(string[])  = new string[](5)
dynargs(string[]) = ['TMP_195(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_139(string) -> dynargs[0]
REF_140(string) -> args[0]
REF_139(string) (->dynargs) := REF_140(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_141(string) -> dynargs[1]
REF_142(string) -> args[1]
REF_141(string) (->dynargs) := REF_142(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_143(string) -> dynargs[2]
REF_144(string) -> args[2]
REF_143(string) (->dynargs) := REF_144(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_145(string) -> dynargs[3]
REF_146(string) -> args[3]
REF_145(string) (->dynargs) := REF_146(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_147(string) -> dynargs[4]
REF_148(string) -> args[4]
REF_147(string) (->dynargs) := REF_148(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_196(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_196"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_98(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_98(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_99(uint256) = tx.gasprice * 200000
TMP_100(uint256) = 1000000000000000000 + TMP_99
TMP_101(bool) = price > TMP_100
CONDITION TMP_101"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_102(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_102(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_104(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_104"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_106(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_107(uint256) = tx.gasprice * gaslimit
TMP_108(uint256) = 1000000000000000000 + TMP_107
TMP_109(bool) = price > TMP_108
CONDITION TMP_109"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_110(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_110(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_112(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_112"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 35144.sol-usingOraclize-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_322(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_322"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-usingOraclize-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_432(None) -> _proof[0]
TMP_701(bool) = REF_432 != L
REF_433(None) -> _proof[1]
TMP_702(bool) = REF_433 != P
TMP_703(bool) = TMP_701 || TMP_702
REF_434(None) -> _proof[2]
TMP_704(bool) = REF_434 != 1
TMP_705(bool) = TMP_703 || TMP_704
CONDITION TMP_705"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_706 = CONVERT _result to bytes
TMP_707(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_708(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_706,TMP_707)
proofVerified(bool) := TMP_708(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_709(bool) = proofVerified == False
CONDITION TMP_709"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: _ 8
"];
}
// Function: 35144.sol-usingOraclize-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_599(uint256) = 3 + 65
TMP_600(uint256) = 3 + 65
TMP_601(uint256) = TMP_600 + 1
REF_417(None) -> proof[TMP_601]
TMP_602 = CONVERT REF_417 to uint256
TMP_603(uint256) = TMP_602 + 2
TMP_604(uint256) = TMP_599 + TMP_603
TMP_605(uint256) = TMP_604 + 32
ledgerProofLength(uint256) := TMP_605(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_607 = new bytes(32)
keyhash(bytes) := TMP_607(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_608(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
checkok = (sha3()(keyhash) == sha3()(sha256()(context_name,queryId)))

IRs:
TMP_609(bytes32) = SOLIDITY_CALL sha3()(keyhash)
TMP_610(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_611(bytes32) = SOLIDITY_CALL sha3()(TMP_610)
TMP_612(bool) = TMP_609 == TMP_611
checkok(bool) := TMP_612(bool)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
checkok == false

IRs:
TMP_613(bool) = checkok == False
CONDITION TMP_613"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_615(uint256) = 32 + 8
TMP_616(uint256) = TMP_615 + 1
TMP_617(uint256) = TMP_616 + 32
TMP_618(uint256) = ledgerProofLength + TMP_617
TMP_619(uint256) = TMP_618 + 1
REF_418(None) -> proof[TMP_619]
TMP_620 = CONVERT REF_418 to uint256
TMP_621(uint256) = TMP_620 + 2
TMP_622 = new bytes(TMP_621)
sig1(bytes) := TMP_622(bytes)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_623(uint256) = 32 + 8
TMP_624(uint256) = TMP_623 + 1
TMP_625(uint256) = TMP_624 + 32
TMP_626(uint256) = ledgerProofLength + TMP_625
REF_419 -> LENGTH sig1
TMP_627(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_626,REF_419,sig1,0)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
checkok = matchBytes32Prefix(sha256()(sig1),result)

IRs:
TMP_628(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_629(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes)(TMP_628,result)
checkok(bool) := TMP_629(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
checkok == false

IRs:
TMP_630(bool) = checkok == False
CONDITION TMP_630"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_632(uint256) = 8 + 1
TMP_633(uint256) = TMP_632 + 32
TMP_634 = new bytes(TMP_633)
commitmentSlice1(bytes) := TMP_634(bytes)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_635(uint256) = ledgerProofLength + 32
TMP_636(uint256) = 8 + 1
TMP_637(uint256) = TMP_636 + 32
TMP_638(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_635,TMP_637,commitmentSlice1,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_640 = new bytes(64)
sessionPubkey(bytes) := TMP_640(bytes)"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_641(uint256) = ledgerProofLength + 32
TMP_642(uint256) = 8 + 1
TMP_643(uint256) = TMP_642 + 32
TMP_644(uint256) = TMP_641 + TMP_643
REF_420 -> LENGTH sig1
TMP_645(uint256) = TMP_644 + REF_420
TMP_646(uint256) = TMP_645 + 65
sig2offset(uint256) := TMP_646(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_647(uint256) = sig2offset - 64
TMP_648(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_647,64,sessionPubkey,0)"];
19->20;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_649(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_649(bytes32)"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
oraclize_randomDS_args[queryId] == sha3()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_421(bytes32) -> oraclize_randomDS_args[queryId]
TMP_650(bytes32) = SOLIDITY_CALL sha3()(commitmentSlice1,sessionPubkeyHash)
TMP_651(bool) = REF_421 == TMP_650
CONDITION TMP_651"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_422(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_422 "];
22->24;
23[label="Node Type: RETURN 23

EXPRESSION:
false

IRs:
RETURN False"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: NEW VARIABLE 25

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_653(uint256) = 32 + 8
TMP_654(uint256) = TMP_653 + 1
TMP_655(uint256) = TMP_654 + 32
TMP_656 = new bytes(TMP_655)
tosign1(bytes) := TMP_656(bytes)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_657(uint256) = 32 + 8
TMP_658(uint256) = TMP_657 + 1
TMP_659(uint256) = TMP_658 + 32
TMP_660(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_659,tosign1,0)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
checkok = verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_661(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_662(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_661,sig1,sessionPubkey)
checkok(bool) := TMP_662(bool)"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
checkok == false

IRs:
TMP_663(bool) = checkok == False
CONDITION TMP_663"];
28->29[label="True"];
28->30[label="False"];
29[label="Node Type: RETURN 29

EXPRESSION:
false

IRs:
RETURN False"];
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: IF 31

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_423(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_664(bool) = REF_423 == False
CONDITION TMP_664"];
31->32[label="True"];
31->33[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_424(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_665(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_424(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_665(bool)"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_425(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_425"];
}
// Function: 35144.sol-usingOraclize-oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_411(None) -> _proof[0]
TMP_587(bool) = REF_411 != L
REF_412(None) -> _proof[1]
TMP_588(bool) = REF_412 != P
TMP_589(bool) = TMP_587 || TMP_588
REF_413(None) -> _proof[2]
TMP_590(bool) = REF_413 != 1
TMP_591(bool) = TMP_589 || TMP_590
CONDITION TMP_591"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_592 = CONVERT _result to bytes
TMP_593(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_594(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_592,TMP_593)
proofVerified(bool) := TMP_594(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_595(bool) = proofVerified == False
CONDITION TMP_595"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
2

IRs:
RETURN 2"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 35144.sol-usingOraclize-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_553(uint256) = sig2offset + 1
REF_405(None) -> proof[TMP_553]
TMP_554 = CONVERT REF_405 to uint256
TMP_555(uint256) = TMP_554 + 2
TMP_556 = new bytes(TMP_555)
sig2(bytes) := TMP_556(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_406 -> LENGTH sig2
TMP_557(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_406,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_559 = new bytes(64)
appkey1_pubkey(bytes) := TMP_559(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_560(uint256) = 3 + 1
TMP_561(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_560,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_563(uint256) = 1 + 65
TMP_564(uint256) = TMP_563 + 32
TMP_565 = new bytes(TMP_564)
tosign2(bytes) := TMP_565(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = 1

IRs:
REF_407(uint256) -> tosign2[0]
REF_407(uint256) (->tosign2) := 1(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_566(uint256) = sig2offset - 65
TMP_567(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_566,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_568(uint256) = 1 + 65
TMP_569(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_568)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_570(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_571(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_570,sig2,appkey1_pubkey)
sigok(bool) := TMP_571(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_572(bool) = sigok == False
CONDITION TMP_572"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_574(uint256) = 1 + 65
TMP_575 = new bytes(TMP_574)
tosign3(bytes) := TMP_575(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_408(uint256) -> tosign3[0]
REF_408(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_576(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_578(uint256) = 3 + 65
TMP_579(uint256) = TMP_578 + 1
REF_409(None) -> proof[TMP_579]
TMP_580 = CONVERT REF_409 to uint256
TMP_581(uint256) = TMP_580 + 2
TMP_582 = new bytes(TMP_581)
sig3(bytes) := TMP_582(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_583(uint256) = 3 + 65
REF_410 -> LENGTH sig3
TMP_584(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_583,REF_410,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_585(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_586(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_585,sig3,LEDGERKEY)
sigok(bool) := TMP_586(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 35144.sol-usingOraclize-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_randomDS_args[queryId] = commitment

IRs:
REF_402(bytes32) -> oraclize_randomDS_args[queryId]
REF_402(bytes32) (->oraclize_randomDS_args) := commitment(bytes32)"];
}
// Function: 35144.sol-usingOraclize-oraclize_setConfig(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setConfig(config)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setConfig, arguments:['config']  
RETURN TMP_320"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-usingOraclize-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_318"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-usingOraclize-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_0(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_1(bool) = TMP_0 > 0
CONDITION TMP_1"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_2 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_2(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_4(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_5(bool) = TMP_4 > 0
CONDITION TMP_5"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_6 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_6(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_8(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_9(bool) = TMP_8 > 0
CONDITION TMP_9"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_10 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_10(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_12(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_13(bool) = TMP_12 > 0
CONDITION TMP_13"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_14 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_14(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_16(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_17(bool) = TMP_16 > 0
CONDITION TMP_17"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_18 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_18(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_19(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_20(bool) = TMP_19 > 0
CONDITION TMP_20"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_21 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_21(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_22(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_23(bool) = TMP_22 > 0
CONDITION TMP_23"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_24 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_24(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 35144.sol-usingOraclize-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 35144.sol-usingOraclize-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_316"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-usingOraclize-oraclize_useCoupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 35144.sol-usingOraclize-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_324 = CONVERT _a to bytes
tmp(bytes) := TMP_324(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_325(uint256) = 2 * 20
TMP_326(uint256) = 2 + TMP_325
TMP_327(bool) = i < TMP_326
CONDITION TMP_327"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_296(None) -> tmp[i]
TMP_328 = CONVERT REF_296 to uint160
b1(uint160) := TMP_328(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_329(uint256) = i + 1
REF_297(None) -> tmp[TMP_329]
TMP_330 = CONVERT REF_297 to uint160
b2(uint160) := TMP_330(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_331(bool) = b1 >= 97
TMP_332(bool) = b1 <= 102
TMP_333(bool) = TMP_331 && TMP_332
CONDITION TMP_333"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_334(bool) = b1 >= 65
TMP_335(bool) = b1 <= 70
TMP_336(bool) = TMP_334 && TMP_335
CONDITION TMP_336"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_337(bool) = b1 >= 48
TMP_338(bool) = b1 <= 57
TMP_339(bool) = TMP_337 && TMP_338
CONDITION TMP_339"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_340(bool) = b2 >= 97
TMP_341(bool) = b2 <= 102
TMP_342(bool) = TMP_340 && TMP_341
CONDITION TMP_342"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_343(bool) = b2 >= 65
TMP_344(bool) = b2 <= 70
TMP_345(bool) = TMP_343 && TMP_344
CONDITION TMP_345"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_346(bool) = b2 >= 48
TMP_347(bool) = b2 <= 57
TMP_348(bool) = TMP_346 && TMP_347
CONDITION TMP_348"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_349(uint160) = b1 * 16
TMP_350(uint160) = TMP_349 + b2
iaddr(uint160) = iaddr + TMP_350"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_351 = CONVERT iaddr to address
RETURN TMP_351"];
}
// Function: 35144.sol-usingOraclize-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_420(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_420"];
}
// Function: 35144.sol-usingOraclize-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_421 = CONVERT _a to bytes
bresult(bytes) := TMP_421(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_342 -> LENGTH bresult
TMP_422(bool) = i < REF_342
CONDITION TMP_422"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_343(None) -> bresult[i]
TMP_423(bool) = REF_343 >= 48
REF_344(None) -> bresult[i]
TMP_424(bool) = REF_344 <= 57
TMP_425(bool) = TMP_423 && TMP_424
CONDITION TMP_425"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_426(bool) = _b == 0
CONDITION TMP_426"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_427(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_345(None) -> bresult[i]
TMP_428 = CONVERT REF_345 to uint256
TMP_429(uint256) = TMP_428 - 48
mint(uint256) = mint + TMP_429"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_346(None) -> bresult[i]
TMP_430(bool) = REF_346 == 46
CONDITION TMP_430"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_431(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_432(bool) = _b > 0
CONDITION TMP_432"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_433(uint256) = 10 ** _b
mint(uint256) = mint * TMP_433"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 35144.sol-usingOraclize-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 35144.sol-usingOraclize-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_678(uint256) = 60 * 60
TMP_679(uint256) = TMP_678 * 24
day(uint256) := TMP_679(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_680(uint256) = 60 * 60
TMP_681(uint256) = TMP_680 * 24
TMP_682(uint256) = TMP_681 * 7
week(uint256) := TMP_682(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_683(uint256) = 60 * 60
TMP_684(uint256) = TMP_683 * 24
TMP_685(uint256) = TMP_684 * 30
month(uint256) := TMP_685(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
}
// Function: 35144.sol-usingOraclize-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_352 = CONVERT _a to bytes
a(bytes) := TMP_352(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_353 = CONVERT _b to bytes
b(bytes) := TMP_353(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_298 -> LENGTH a
minLength(uint256) := REF_298(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_299 -> LENGTH b
TMP_354(bool) = REF_299 < minLength
CONDITION TMP_354"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_300 -> LENGTH b
minLength(uint256) := REF_300(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_355(bool) = i < minLength
CONDITION TMP_355"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_301(None) -> a[i]
REF_302(None) -> b[i]
TMP_356(bool) = REF_301 < REF_302
CONDITION TMP_356"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_357(uint256) = 0 - 1
RETURN TMP_357"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_303(None) -> a[i]
REF_304(None) -> b[i]
TMP_358(bool) = REF_303 > REF_304
CONDITION TMP_358"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_359(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_305 -> LENGTH a
REF_306 -> LENGTH b
TMP_360(bool) = REF_305 < REF_306
CONDITION TMP_360"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_361(uint256) = 0 - 1
RETURN TMP_361"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_307 -> LENGTH a
REF_308 -> LENGTH b
TMP_362(bool) = REF_307 > REF_308
CONDITION TMP_362"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 35144.sol-usingOraclize-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_419(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_419"];
}
// Function: 35144.sol-usingOraclize-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_418(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_418"];
}
// Function: 35144.sol-usingOraclize-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_417(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_417"];
}
// Function: 35144.sol-usingOraclize-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_389 = CONVERT _a to bytes
_ba(bytes) := TMP_389(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_390 = CONVERT _b to bytes
_bb(bytes) := TMP_390(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_391 = CONVERT _c to bytes
_bc(bytes) := TMP_391(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_392 = CONVERT _d to bytes
_bd(bytes) := TMP_392(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_393 = CONVERT _e to bytes
_be(bytes) := TMP_393(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_322 -> LENGTH _ba
REF_323 -> LENGTH _bb
TMP_395(uint256) = REF_322 + REF_323
REF_324 -> LENGTH _bc
TMP_396(uint256) = TMP_395 + REF_324
REF_325 -> LENGTH _bd
TMP_397(uint256) = TMP_396 + REF_325
REF_326 -> LENGTH _be
TMP_398(uint256) = TMP_397 + REF_326
TMP_399 = new string(TMP_398)
abcde(string) := TMP_399(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_400 = CONVERT abcde to bytes
babcde(bytes) := TMP_400(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_327 -> LENGTH _ba
TMP_401(bool) = i < REF_327
CONDITION TMP_401"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_402(uint256) := k(uint256)
k(uint256) = k + 1
REF_328(None) -> babcde[TMP_402]
REF_329(None) -> _ba[i]
REF_328(None) (->babcde) := REF_329(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_403(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_330 -> LENGTH _bb
TMP_404(bool) = i < REF_330
CONDITION TMP_404"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_405(uint256) := k(uint256)
k(uint256) = k + 1
REF_331(None) -> babcde[TMP_405]
REF_332(None) -> _bb[i]
REF_331(None) (->babcde) := REF_332(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_406(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_333 -> LENGTH _bc
TMP_407(bool) = i < REF_333
CONDITION TMP_407"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_408(uint256) := k(uint256)
k(uint256) = k + 1
REF_334(None) -> babcde[TMP_408]
REF_335(None) -> _bc[i]
REF_334(None) (->babcde) := REF_335(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_409(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_336 -> LENGTH _bd
TMP_410(bool) = i < REF_336
CONDITION TMP_410"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_411(uint256) := k(uint256)
k(uint256) = k + 1
REF_337(None) -> babcde[TMP_411]
REF_338(None) -> _bd[i]
REF_337(None) (->babcde) := REF_338(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_412(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_339 -> LENGTH _be
TMP_413(bool) = i < REF_339
CONDITION TMP_413"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_414(uint256) := k(uint256)
k(uint256) = k + 1
REF_340(None) -> babcde[TMP_414]
REF_341(None) -> _be[i]
REF_340(None) (->babcde) := REF_341(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_415(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_416 = CONVERT babcde to string
RETURN TMP_416"];
}
// Function: 35144.sol-usingOraclize-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_348 -> LENGTH arr
arrlen(uint256) := REF_348(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_447(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_447(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_448(bool) = i < arrlen
CONDITION TMP_448"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_349(bytes) -> elemArray[i]
REF_350(string) -> arr[i]
TMP_449 = CONVERT REF_350 to bytes
REF_349(bytes) (->elemArray) := TMP_449(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_351(bytes) -> elemArray[i]
REF_352 -> LENGTH REF_351
REF_353(bytes) -> elemArray[i]
REF_354 -> LENGTH REF_353
TMP_450(uint256) = REF_354 - 1
TMP_451(uint256) = TMP_450 / 23
TMP_452(uint256) = REF_352 + TMP_451
TMP_453(uint256) = TMP_452 + 3
outputlen(uint256) = outputlen + TMP_453"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_454(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_455(uint256) = arrlen + 128
cborlen(uint256) := TMP_455(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_456 = CONVERT cborlen to bytes1
REF_355 -> LENGTH TMP_456
outputlen(uint256) = outputlen + REF_355"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_458 = new bytes(outputlen)
res(bytes) := TMP_458(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_459 = CONVERT cborlen to bytes1
REF_356 -> LENGTH TMP_459
TMP_460(bool) = REF_356 > ctr
CONDITION TMP_460"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_357(None) -> res[ctr]
TMP_461 = CONVERT cborlen to bytes1
REF_358(None) -> TMP_461[ctr]
REF_357(None) (->res) := REF_358(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_462(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_463(bool) = i < arrlen
CONDITION TMP_463"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_359(uint256) -> res[ctr]
REF_359(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_464(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_360(bytes) -> elemArray[i]
REF_361 -> LENGTH REF_360
TMP_465(bool) = x < REF_361
CONDITION TMP_465"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_466(uint256) = x % 23
TMP_467(bool) = TMP_466 == 0
CONDITION TMP_467"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_468 = CONVERT elemcborlen to bytes1
REF_362 -> LENGTH TMP_468
TMP_469(uint256) = ctr - lctr
TMP_470(bool) = REF_362 > TMP_469
CONDITION TMP_470"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_363(None) -> res[ctr]
TMP_471 = CONVERT elemcborlen to bytes1
TMP_472(uint256) = ctr - lctr
REF_364(None) -> TMP_471[TMP_472]
REF_363(None) (->res) := REF_364(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_473(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_365(None) -> res[ctr]
REF_366(bytes) -> elemArray[i]
REF_367(None) -> REF_366[x]
REF_365(None) (->res) := REF_367(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_474(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_475(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_368(uint256) -> res[ctr]
REF_368(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_476(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_477(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_369(bytes) -> elemArray[i]
REF_370 -> LENGTH REF_369
TMP_478(uint256) = REF_370 - x
TMP_479(bool) = TMP_478 >= 24
CONDITION TMP_479"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_371(bytes) -> elemArray[i]
REF_372 -> LENGTH REF_371
TMP_480(uint256) = REF_372 - x
elemcborlen(uint256) := TMP_480(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 35144.sol-usingOraclize-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_434(bool) = i == 0
CONDITION TMP_434"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_435(bool) = j != 0
CONDITION TMP_435"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_436(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_438 = new bytes(len)
bstr(bytes) := TMP_438(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_439(uint256) = len - 1
k(uint256) := TMP_439(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_440(bool) = i != 0
CONDITION TMP_440"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_441(uint256) := k(uint256)
k(uint256) = k - 1
REF_347(bytes1) -> bstr[TMP_441]
TMP_442(uint256) = i % 10
TMP_443(uint256) = 48 + TMP_442
TMP_444 = CONVERT TMP_443 to bytes1
REF_347(bytes1) (->bstr) := TMP_444(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_445 = CONVERT bstr to string
RETURN TMP_445"];
}
// Function: 35144.sol-usingOraclize-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_533 = new bytes(32)
sigr_(bytes) := TMP_533(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_403(None) -> dersig[3]
TMP_534 = CONVERT REF_403 to uint256
TMP_535(uint256) = TMP_534 - 32
TMP_536(uint256) = 4 + TMP_535
offset(uint256) := TMP_536(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_537(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_537(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_539 = new bytes(32)
sigs_(bytes) := TMP_539(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_540(uint256) = 32 + 2
offset(uint256) = offset + TMP_540"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_541(uint256) = offset - 1
REF_404(None) -> dersig[TMP_541]
TMP_542 = CONVERT REF_404 to uint256
TMP_543(uint256) = TMP_542 - 32
TMP_544(uint256) = offset + TMP_543
TMP_545(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_544,32,sigs_,0)
sigs_(bytes) := TMP_545(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_0(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_0 index: 0 
signer(address)= UNPACK TUPLE_0 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(sha3()(pubkey)) == signer

IRs:
TMP_546(bytes32) = SOLIDITY_CALL sha3()(pubkey)
TMP_547 = CONVERT TMP_546 to address
TMP_548(bool) = TMP_547 == signer
CONDITION TMP_548"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_1(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_1 index: 0 
signer(address)= UNPACK TUPLE_1 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(sha3()(pubkey)) == signer)

IRs:
TMP_549(bytes32) = SOLIDITY_CALL sha3()(pubkey)
TMP_550 = CONVERT TMP_549 to address
TMP_551(bool) = TMP_550 == signer
RETURN TMP_551"];
}
}
