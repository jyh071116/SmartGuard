digraph G {
// Function: 35518.sol-Crowdsale-Crowdsale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet = msg.sender

IRs:
wallet(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token = createTokenContract()

IRs:
TMP_69(MRAToken) = INTERNAL_CALL, Crowdsale.createTokenContract()()
token(MRAToken) := TMP_69(MRAToken)"];
}
// Function: 35518.sol-Crowdsale-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 35518.sol-Crowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(beneficiary != 0x0)

IRs:
TMP_73(bool) = beneficiary != 0
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_75(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokens = weiAmount.mul(getRate())

IRs:
TMP_77(uint256) = INTERNAL_CALL, Crowdsale.getRate()()
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'TMP_77'] 
tokens(uint256) := TMP_78(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_79(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token.transfer(beneficiary,tokens)

IRs:
TMP_80(bool) = HIGH_LEVEL_CALL, dest:token(MRAToken), function:transfer, arguments:['beneficiary', 'tokens']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale.forwardFunds()()"];
}
// Function: 35518.sol-Crowdsale-createTokenContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
new MRAToken()

IRs:
TMP_71(MRAToken) = new MRAToken() 
RETURN TMP_71"];
}
// Function: 35518.sol-Crowdsale-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balance = token.balanceOf(this)

IRs:
TMP_90(uint256) = HIGH_LEVEL_CALL, dest:token(MRAToken), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_90(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(balance > 0)

IRs:
TMP_91(bool) = balance > 0
TMP_92(None) = SOLIDITY_CALL assert(bool)(TMP_91)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token.transfer(owner,balance)

IRs:
TMP_93(bool) = HIGH_LEVEL_CALL, dest:token(MRAToken), function:transfer, arguments:['owner', 'balance']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_94(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 35518.sol-Crowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 35518.sol-Crowdsale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(msg.value)

IRs:
Transfer dest:wallet value:msg.value"];
}
// Function: 35518.sol-Crowdsale-getRate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
current_time = now

IRs:
current_time(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
current_time > startTime && current_time < phase_1_Time

IRs:
TMP_54(bool) = current_time > startTime
TMP_55(bool) = current_time < phase_1_Time
TMP_56(bool) = TMP_54 && TMP_55
CONDITION TMP_56"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
phase_1_rate

IRs:
RETURN phase_1_rate"];
4[label="Node Type: IF 4

EXPRESSION:
current_time > phase_1_Time && current_time < phase_2_Time

IRs:
TMP_57(bool) = current_time > phase_1_Time
TMP_58(bool) = current_time < phase_2_Time
TMP_59(bool) = TMP_57 && TMP_58
CONDITION TMP_59"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
phase_2_rate

IRs:
RETURN phase_2_rate"];
6[label="Node Type: IF 6

EXPRESSION:
current_time > phase_2_Time && current_time < phase_3_Time

IRs:
TMP_60(bool) = current_time > phase_2_Time
TMP_61(bool) = current_time < phase_3_Time
TMP_62(bool) = TMP_60 && TMP_61
CONDITION TMP_62"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
phase_3_rate

IRs:
RETURN phase_3_rate"];
8[label="Node Type: IF 8

EXPRESSION:
current_time > phase_3_Time && current_time < phase_4_Time

IRs:
TMP_63(bool) = current_time > phase_3_Time
TMP_64(bool) = current_time < phase_4_Time
TMP_65(bool) = TMP_63 && TMP_64
CONDITION TMP_65"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9

EXPRESSION:
phase_4_rate

IRs:
RETURN phase_4_rate"];
10[label="Node Type: IF 10

EXPRESSION:
current_time > phase_4_Time && current_time < phase_5_Time

IRs:
TMP_66(bool) = current_time > phase_4_Time
TMP_67(bool) = current_time < phase_5_Time
TMP_68(bool) = TMP_66 && TMP_67
CONDITION TMP_68"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
phase_5_rate

IRs:
RETURN phase_5_rate"];
12[label="Node Type: RETURN 12

EXPRESSION:
phase_6_rate

IRs:
RETURN phase_6_rate"];
}
// Function: 35518.sol-Crowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endTime

IRs:
TMP_89(bool) = now > endTime
RETURN TMP_89"];
}
// Function: 35518.sol-Crowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_96(bool) = msg.sender == owner
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35518.sol-Crowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
startTime = 1507782600

IRs:
startTime(uint256) := 1507782600(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
phase_1_Time = 1512104399

IRs:
phase_1_Time(uint256) := 1512104399(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
phase_2_Time = 1513400399

IRs:
phase_2_Time(uint256) := 1513400399(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
phase_3_Time = 1514782799

IRs:
phase_3_Time(uint256) := 1514782799(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
phase_4_Time = 1516078799

IRs:
phase_4_Time(uint256) := 1516078799(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
phase_5_Time = 1517461199

IRs:
phase_5_Time(uint256) := 1517461199(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
endTime = 1518757199

IRs:
endTime(uint256) := 1518757199(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
phase_1_rate = 28900

IRs:
phase_1_rate(uint256) := 28900(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
phase_2_rate = 1156

IRs:
phase_2_rate(uint256) := 1156(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
phase_3_rate = 760

IRs:
phase_3_rate(uint256) := 760(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
phase_4_rate = 545

IRs:
phase_4_rate(uint256) := 545(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
phase_5_rate = 328

IRs:
phase_5_rate(uint256) := 328(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
phase_6_rate = 231

IRs:
phase_6_rate(uint256) := 231(uint256)"];
}
// Function: 35518.sol-Crowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_49 = CONVERT 0 to address
TMP_50(bool) = newOwner != TMP_49
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 35518.sol-Crowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinPeriod = now >= startTime && now <= endTime

IRs:
TMP_84(bool) = now >= startTime
TMP_85(bool) = now <= endTime
TMP_86(bool) = TMP_84 && TMP_85
withinPeriod(bool) := TMP_86(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_87(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_87(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
withinPeriod && nonZeroPurchase

IRs:
TMP_88(bool) = withinPeriod && nonZeroPurchase
RETURN TMP_88"];
}
// Function: 35518.sol-MRAToken-MRAToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = 100000000 * (10 ** uint256(decimals))

IRs:
TMP_32 = CONVERT decimals to uint256
TMP_33(uint256) = 10 ** TMP_32
TMP_34(uint256) = 100000000 * TMP_33
totalSupply(uint256) := TMP_34(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_30(uint256) -> balances[msg.sender]
REF_30(uint256) (->balances) := totalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
name = MRAToken

IRs:
name(string) := MRAToken(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = MRAT

IRs:
symbol(string) := MRAT(string)"];
}
// Function: 35518.sol-MRAToken-allowance(address,address)
digraph{
}
// Function: 35518.sol-MRAToken-approve(address,uint256)
digraph{
}
// Function: 35518.sol-MRAToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
REF_32(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

IRs:
TMP_36(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_37 = CONVERT TMP_36 to bytes32
TMP_38 = CONVERT TMP_37 to bytes4
TMP_39(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_38', 'msg.sender', '_value', 'this', '_extraData']  
TMP_40 = UnaryType.BANG TMP_39 
CONDITION TMP_40"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_41(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35518.sol-MRAToken-balanceOf(address)
digraph{
}
// Function: 35518.sol-MRAToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_31(None) = SOLIDITY_CALL revert()()"];
}
// Function: 35518.sol-MRAToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = H1.0

IRs:
version(string) := H1.0(string)"];
}
// Function: 35518.sol-MRAToken-transfer(address,uint256)
digraph{
}
// Function: 35518.sol-MRAToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 35518.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 35518.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_47(bool) = msg.sender == owner
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35518.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_42 = CONVERT 0 to address
TMP_43(bool) = newOwner != TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 35518.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_6(uint256) = a + b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_7(bool) = c >= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 35518.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 35518.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_13(mapping(address => uint256)) -> allowed[_owner]
REF_14(uint256) -> REF_13[_spender]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 35518.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_11(mapping(address => uint256)) -> allowed[msg.sender]
REF_12(uint256) -> REF_11[_spender]
REF_12(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35518.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_10(uint256) -> balances[_owner]
RETURN REF_10"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 35518.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && _value > 0

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_9(bool) = REF_0 >= _value
TMP_10(bool) = _value > 0
TMP_11(bool) = TMP_9 && TMP_10
CONDITION TMP_11"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_1(-> balances) = REF_1 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_2(uint256) -> balances[_to]
REF_2(-> balances) = REF_2 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35518.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0

IRs:
REF_3(uint256) -> balances[_from]
TMP_13(bool) = REF_3 >= _value
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
TMP_14(bool) = REF_5 >= _value
TMP_15(bool) = TMP_13 && TMP_14
TMP_16(bool) = _value > 0
TMP_17(bool) = TMP_15 && TMP_16
CONDITION TMP_17"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_6(uint256) -> balances[_to]
REF_6(-> balances) = REF_6 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_7(uint256) -> balances[_from]
REF_7(-> balances) = REF_7 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
REF_9(-> allowed) = REF_9 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35518.sol-Token-allowance(address,address)
digraph{
}
// Function: 35518.sol-Token-approve(address,uint256)
digraph{
}
// Function: 35518.sol-Token-balanceOf(address)
digraph{
}
// Function: 35518.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 35518.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
