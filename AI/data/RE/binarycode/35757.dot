digraph G {
// Function: 35757.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 35757.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 35757.sol-ICOSyndicate-activate_kill_switch()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == developer)

IRs:
TMP_5(bool) = msg.sender == developer
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
kill_switch = true

IRs:
kill_switch(bool) := True(bool)"];
}
// Function: 35757.sol-ICOSyndicate-buy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
bought_tokens

IRs:
CONDITION bought_tokens"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
kill_switch

IRs:
CONDITION kill_switch"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(sale != 0x0)

IRs:
TMP_19(bool) = sale != 0
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
bought_tokens = true

IRs:
bought_tokens(bool) := True(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
contract_eth_value = this.balance

IRs:
REF_9(uint256) = SOLIDITY_CALL balance(address)(this)
contract_eth_value(uint256) := REF_9([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f45df69b040>])"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(sale.call.value(contract_eth_value)())

IRs:
TMP_22(bool) = LOW_LEVEL_CALL, dest:sale, function:call, arguments:[] value:contract_eth_value 
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
}
// Function: 35757.sol-ICOSyndicate-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! kill_switch)

IRs:
TMP_24 = UnaryType.BANG kill_switch 
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! bought_tokens)

IRs:
TMP_26 = UnaryType.BANG bought_tokens 
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(this.balance < eth_cap)

IRs:
REF_12(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_28(bool) = REF_12 < eth_cap
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_13(uint256) -> balances[msg.sender]
REF_13(-> balances) = REF_13 + msg.value"];
}
// Function: 35757.sol-ICOSyndicate-set_addresses(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == developer)

IRs:
TMP_0(bool) = msg.sender == developer
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(sale == 0x0)

IRs:
TMP_2(bool) = sale == 0
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
sale = _sale

IRs:
sale(address) := _sale(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_4 = CONVERT _token to ERC20
token(ERC20) := TMP_4(ERC20)"];
}
// Function: 35757.sol-ICOSyndicate-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
eth_cap = 30000000000000000000000

IRs:
eth_cap(uint256) := 30000000000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
developer = 0x91d97da49d3cD71B475F46d719241BD8bb6Af18f

IRs:
developer(address) := 832653868528592217329315622008327380811580633487(address)"];
}
// Function: 35757.sol-ICOSyndicate-withdraw(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bought_tokens)

IRs:
TMP_7(None) = SOLIDITY_CALL require(bool)(bought_tokens)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
balances[user] == 0

IRs:
REF_0(uint256) -> balances[user]
TMP_8(bool) = REF_0 == 0
CONDITION TMP_8"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! bought_tokens

IRs:
TMP_9 = UnaryType.BANG bought_tokens 
CONDITION TMP_9"];
5->6[label="True"];
5->9[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
eth_to_withdraw = balances[user]

IRs:
REF_1(uint256) -> balances[user]
eth_to_withdraw(uint256) := REF_1(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[user] = 0

IRs:
REF_2(uint256) -> balances[user]
REF_2(uint256) (->balances) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
user.transfer(eth_to_withdraw)

IRs:
Transfer dest:user value:eth_to_withdraw"];
8->15;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
contract_token_balance = token.balanceOf(address(this))

IRs:
TMP_11 = CONVERT this to address
TMP_12(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20), function:balanceOf, arguments:['TMP_11']  
contract_token_balance(uint256) := TMP_12(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(contract_token_balance != 0)

IRs:
TMP_13(bool) = contract_token_balance != 0
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
tokens_to_withdraw = (balances[user] * contract_token_balance) / contract_eth_value

IRs:
REF_5(uint256) -> balances[user]
TMP_15(uint256) = REF_5 * contract_token_balance
TMP_16(uint256) = TMP_15 / contract_eth_value
tokens_to_withdraw(uint256) := TMP_16(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
contract_eth_value -= balances[user]

IRs:
REF_6(uint256) -> balances[user]
contract_eth_value(uint256) = contract_eth_value - REF_6"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
balances[user] = 0

IRs:
REF_7(uint256) -> balances[user]
REF_7(uint256) (->balances) := 0(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
require(bool)(token.transfer(user,tokens_to_withdraw))

IRs:
TMP_17(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['user', 'tokens_to_withdraw']  
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
14->15;
15[label="Node Type: END_IF 15
"];
}
}
