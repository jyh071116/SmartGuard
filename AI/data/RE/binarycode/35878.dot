digraph G {
// Function: 35878.sol-Factory-Factory(address,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
RegBase(_creator,_regName,_owner)

IRs:
INTERNAL_CALL, RegBase.RegBase(address,bytes32,address)(_creator,_regName,_owner)"];
}
// Function: 35878.sol-Factory-RegBase(address,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_regName != 0x0)

IRs:
TMP_15(bool) = _regName != 0
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
regName = _regName

IRs:
regName(bytes32) := _regName(bytes32)"];
2->4;
4[label="Node Type: IF 4

EXPRESSION:
_owner != 0x0

IRs:
TMP_17(bool) = _owner != 0
CONDITION TMP_17"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
5->7;
7[label="Node Type: END_IF 7
"];
8[label="Node Type: IF 8

EXPRESSION:
_creator != 0x0

IRs:
TMP_18(bool) = _creator != 0
CONDITION TMP_18"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
owner = _creator

IRs:
owner(address) := _creator(address)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->7;
}
// Function: 35878.sol-Factory-acceptOwnership()
digraph{
}
// Function: 35878.sol-Factory-changeOwner(address)
digraph{
}
// Function: 35878.sol-Factory-changeResource(bytes32)
digraph{
}
// Function: 35878.sol-Factory-createNew(bytes32,address)
digraph{
}
// Function: 35878.sol-Factory-destroy()
digraph{
}
// Function: 35878.sol-Factory-feePaid()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == value || msg.sender == owner)

IRs:
TMP_33(bool) = msg.value == value
TMP_34(bool) = msg.sender == owner
TMP_35(bool) = TMP_33 || TMP_34
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35878.sol-Factory-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_31(bool) = msg.sender == owner
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35878.sol-Factory-set(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
value = _fee

IRs:
value(uint256) := _fee(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RegBase.onlyOwner()()"];
3->1;
}
// Function: 35878.sol-Factory-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
VERSION = RegBase v0.3.3

IRs:
VERSION(bytes32) := RegBase v0.3.3(string)"];
}
// Function: 35878.sol-Factory-withdrawAll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(this.balance)

IRs:
REF_1(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:owner value:REF_1"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 35878.sol-Forwarder-Forwarder(address,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
forwardTo = owner

IRs:
forwardTo(address) := owner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RegBase(_creator,_regName,_owner)

IRs:
INTERNAL_CALL, RegBase.RegBase(address,bytes32,address)(_creator,_regName,_owner)"];
2->1;
}
// Function: 35878.sol-Forwarder-RegBase(address,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_regName != 0x0)

IRs:
TMP_37(bool) = _regName != 0
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
regName = _regName

IRs:
regName(bytes32) := _regName(bytes32)"];
2->4;
4[label="Node Type: IF 4

EXPRESSION:
_owner != 0x0

IRs:
TMP_39(bool) = _owner != 0
CONDITION TMP_39"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
5->7;
7[label="Node Type: END_IF 7
"];
8[label="Node Type: IF 8

EXPRESSION:
_creator != 0x0

IRs:
TMP_40(bool) = _creator != 0
CONDITION TMP_40"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
owner = _creator

IRs:
owner(address) := _creator(address)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->7;
}
// Function: 35878.sol-Forwarder-acceptOwnership()
digraph{
}
// Function: 35878.sol-Forwarder-changeForwardTo(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == forwardTo)

IRs:
TMP_55(bool) = msg.sender == owner
TMP_56(bool) = msg.sender == forwardTo
TMP_57(bool) = TMP_55 || TMP_56
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
forwardTo = _forwardTo

IRs:
forwardTo(address) := _forwardTo(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 35878.sol-Forwarder-changeOwner(address)
digraph{
}
// Function: 35878.sol-Forwarder-changeResource(bytes32)
digraph{
}
// Function: 35878.sol-Forwarder-destroy()
digraph{
}
// Function: 35878.sol-Forwarder-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Forwarded(msg.sender,forwardTo,msg.value)

IRs:
Emit Forwarded(msg.sender,forwardTo,msg.value)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(forwardTo.call.value(msg.value)(msg.data))

IRs:
TMP_53(bool) = LOW_LEVEL_CALL, dest:forwardTo, function:call, arguments:['msg.data'] value:msg.value 
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
}
// Function: 35878.sol-Forwarder-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_59(bool) = msg.sender == owner
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35878.sol-Forwarder-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
VERSION = Forwarder v0.3.0

IRs:
VERSION(bytes32) := Forwarder v0.3.0(string)"];
}
// Function: 35878.sol-ForwarderFactory-Factory(address,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
RegBase(_creator,_regName,_owner)

IRs:
INTERNAL_CALL, RegBase.RegBase(address,bytes32,address)(_creator,_regName,_owner)"];
}
// Function: 35878.sol-ForwarderFactory-ForwarderFactory(address,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Factory(_creator,regName,_owner)

IRs:
INTERNAL_CALL, Factory.Factory(address,bytes32,address)(_creator,regName,_owner)"];
}
// Function: 35878.sol-ForwarderFactory-RegBase(address,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_regName != 0x0)

IRs:
TMP_64(bool) = _regName != 0
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
regName = _regName

IRs:
regName(bytes32) := _regName(bytes32)"];
2->4;
4[label="Node Type: IF 4

EXPRESSION:
_owner != 0x0

IRs:
TMP_66(bool) = _owner != 0
CONDITION TMP_66"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
5->7;
7[label="Node Type: END_IF 7
"];
8[label="Node Type: IF 8

EXPRESSION:
_creator != 0x0

IRs:
TMP_67(bool) = _creator != 0
CONDITION TMP_67"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
owner = _creator

IRs:
owner(address) := _creator(address)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->7;
}
// Function: 35878.sol-ForwarderFactory-acceptOwnership()
digraph{
}
// Function: 35878.sol-ForwarderFactory-changeOwner(address)
digraph{
}
// Function: 35878.sol-ForwarderFactory-changeResource(bytes32)
digraph{
}
// Function: 35878.sol-ForwarderFactory-createNew(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
kAddr_ = address(new Forwarder(msg.sender,_regName,_owner))

IRs:
TMP_79(Forwarder) = new Forwarder(msg.sender,_regName,_owner) 
TMP_80 = CONVERT TMP_79 to address
kAddr_(address) := TMP_80(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Created(msg.sender,_regName,kAddr_)

IRs:
Emit Created(msg.sender,_regName,kAddr_)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
feePaid()

IRs:
MODIFIER_CALL, Factory.feePaid()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
kAddr_

IRs:
RETURN kAddr_"];
}
// Function: 35878.sol-ForwarderFactory-destroy()
digraph{
}
// Function: 35878.sol-ForwarderFactory-feePaid()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == value || msg.sender == owner)

IRs:
TMP_83(bool) = msg.value == value
TMP_84(bool) = msg.sender == owner
TMP_85(bool) = TMP_83 || TMP_84
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35878.sol-ForwarderFactory-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_87(bool) = msg.sender == owner
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35878.sol-ForwarderFactory-set(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
value = _fee

IRs:
value(uint256) := _fee(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RegBase.onlyOwner()()"];
3->1;
}
// Function: 35878.sol-ForwarderFactory-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
regName = forwarder

IRs:
regName(bytes32) := forwarder(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
VERSION = ForwarderFactory v0.3.0

IRs:
VERSION(bytes32) := ForwarderFactory v0.3.0(string)"];
}
// Function: 35878.sol-ForwarderFactory-withdrawAll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(this.balance)

IRs:
REF_5(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:owner value:REF_5"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 35878.sol-RegBase-RegBase(address,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_regName != 0x0)

IRs:
TMP_0(bool) = _regName != 0
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
regName = _regName

IRs:
regName(bytes32) := _regName(bytes32)"];
2->4;
4[label="Node Type: IF 4

EXPRESSION:
_owner != 0x0

IRs:
TMP_2(bool) = _owner != 0
CONDITION TMP_2"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
5->7;
7[label="Node Type: END_IF 7
"];
8[label="Node Type: IF 8

EXPRESSION:
_creator != 0x0

IRs:
TMP_3(bool) = _creator != 0
CONDITION TMP_3"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
owner = _creator

IRs:
owner(address) := _creator(address)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->7;
}
// Function: 35878.sol-RegBase-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_8(bool) = msg.sender == newOwner
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ChangedOwner(owner,msg.sender)

IRs:
Emit ChangedOwner(owner,msg.sender)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete newOwner

IRs:
newOwner = delete newOwner "];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 35878.sol-RegBase-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ChangeOwnerTo(_owner)

IRs:
Emit ChangeOwnerTo(_owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _owner

IRs:
newOwner(address) := _owner(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RegBase.onlyOwner()()"];
4->1;
}
// Function: 35878.sol-RegBase-changeResource(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
resource = _resource

IRs:
resource(bytes32) := _resource(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ChangedResource(_resource)

IRs:
Emit ChangedResource(_resource)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RegBase.onlyOwner()()"];
4->1;
}
// Function: 35878.sol-RegBase-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(msg.sender)

IRs:
TMP_4(None) = SOLIDITY_CALL selfdestruct(address)(msg.sender)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RegBase.onlyOwner()()"];
2->1;
}
// Function: 35878.sol-RegBase-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_13(bool) = msg.sender == owner
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35878.sol-RegBase-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
VERSION = RegBase v0.3.3

IRs:
VERSION(bytes32) := RegBase v0.3.3(string)"];
}
// Function: 35878.sol-RegBaseAbstract-acceptOwnership()
digraph{
}
// Function: 35878.sol-RegBaseAbstract-changeOwner(address)
digraph{
}
// Function: 35878.sol-RegBaseAbstract-changeResource(bytes32)
digraph{
}
// Function: 35878.sol-RegBaseAbstract-destroy()
digraph{
}
}
