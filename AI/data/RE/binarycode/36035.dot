digraph G {
// Function: 36035.sol-GigaGivingICO-GigaGivingICO(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fundingGoal = 1000000000000000000000

IRs:
fundingGoal(uint256) := 1000000000000000000000(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
startTime = 1510765200

IRs:
startTime(uint256) := 1510765200(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
beneficiary = icoBeneficiary

IRs:
beneficiary(address) := icoBeneficiary(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenReward = GigaGivingToken(icoToken)

IRs:
TMP_37 = CONVERT icoToken to GigaGivingToken
tokenReward(GigaGivingToken) := TMP_37(GigaGivingToken)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenSupply = 12000000

IRs:
tokenSupply(uint256) := 12000000(uint256)"];
}
// Function: 36035.sol-GigaGivingICO-afterDeadline()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
now >= (startTime + DURATION)

IRs:
TMP_78(uint256) = startTime + DURATION
TMP_79(bool) = now >= TMP_78
CONDITION TMP_79"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 36035.sol-GigaGivingICO-checkGoalReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
amountRaised >= fundingGoal

IRs:
TMP_65(bool) = amountRaised >= fundingGoal
CONDITION TMP_65"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fundingGoalReached = true

IRs:
fundingGoalReached(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
GoalReached(beneficiary,amountRaised)

IRs:
Emit GoalReached(beneficiary,amountRaised)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
crowdsaleClosed = true

IRs:
crowdsaleClosed(bool) := True(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
afterDeadline()

IRs:
MODIFIER_CALL, GigaGivingICO.afterDeadline()()"];
6->1;
}
// Function: 36035.sol-GigaGivingICO-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= startTime)

IRs:
TMP_38(bool) = now >= startTime
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now <= startTime + DURATION)

IRs:
TMP_40(uint256) = startTime + DURATION
TMP_41(bool) = now <= TMP_40
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(! crowdsaleClosed)

IRs:
TMP_43 = UnaryType.BANG crowdsaleClosed 
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_45(bool) = msg.value > 0
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
amount = msg.value

IRs:
amount(uint256) := msg.value(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
coinTotal = 0

IRs:
coinTotal(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
now > startTime + 2419200

IRs:
TMP_47(uint256) = startTime + 2419200
TMP_48(bool) = now > TMP_47
CONDITION TMP_48"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
coinTotal = amount.div(PHASE_5_PRICE)

IRs:
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['amount', 'PHASE_5_PRICE'] 
coinTotal(uint256) := TMP_49(uint256)"];
8->19;
9[label="Node Type: IF 9

EXPRESSION:
now > startTime + 1814400

IRs:
TMP_50(uint256) = startTime + 1814400
TMP_51(bool) = now > TMP_50
CONDITION TMP_51"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
coinTotal = amount.div(PHASE_4_PRICE)

IRs:
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['amount', 'PHASE_4_PRICE'] 
coinTotal(uint256) := TMP_52(uint256)"];
10->18;
11[label="Node Type: IF 11

EXPRESSION:
now > startTime + 1209600

IRs:
TMP_53(uint256) = startTime + 1209600
TMP_54(bool) = now > TMP_53
CONDITION TMP_54"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
coinTotal = amount.div(PHASE_3_PRICE)

IRs:
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['amount', 'PHASE_3_PRICE'] 
coinTotal(uint256) := TMP_55(uint256)"];
12->17;
13[label="Node Type: IF 13

EXPRESSION:
now > startTime + 604800

IRs:
TMP_56(uint256) = startTime + 604800
TMP_57(bool) = now > TMP_56
CONDITION TMP_57"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
coinTotal = amount.div(PHASE_2_PRICE)

IRs:
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['amount', 'PHASE_2_PRICE'] 
coinTotal(uint256) := TMP_58(uint256)"];
14->16;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
coinTotal = amount.div(PHASE_1_PRICE)

IRs:
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['amount', 'PHASE_1_PRICE'] 
coinTotal(uint256) := TMP_59(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender].add(amount)

IRs:
REF_39(uint256) -> balanceOf[msg.sender]
REF_40(uint256) -> balanceOf[msg.sender]
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_40', 'amount'] 
REF_39(uint256) (->balanceOf) := TMP_60(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
amountRaised = amountRaised.add(amount)

IRs:
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['amountRaised', 'amount'] 
amountRaised(uint256) := TMP_61(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
tokenSupply = tokenSupply.sub(coinTotal)

IRs:
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokenSupply', 'coinTotal'] 
tokenSupply(uint256) := TMP_62(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
tokenReward.transfer(msg.sender,coinTotal)

IRs:
TMP_63(bool) = HIGH_LEVEL_CALL, dest:tokenReward(GigaGivingToken), function:transfer, arguments:['msg.sender', 'coinTotal']  "];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
FundTransfer(msg.sender,amount,true)

IRs:
Emit FundTransfer(msg.sender,amount,True)"];
}
// Function: 36035.sol-GigaGivingICO-safeWithdrawal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->18;
1[label="Node Type: IF 1

EXPRESSION:
! fundingGoalReached

IRs:
TMP_68 = UnaryType.BANG fundingGoalReached 
CONDITION TMP_68"];
1->2[label="True"];
1->10[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = balanceOf[msg.sender]

IRs:
REF_45(uint256) -> balanceOf[msg.sender]
amount(uint256) := REF_45(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] = 0

IRs:
REF_46(uint256) -> balanceOf[msg.sender]
REF_46(uint256) (->balanceOf) := 0(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
amount > 0

IRs:
TMP_69(bool) = amount > 0
CONDITION TMP_69"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
msg.sender.send(amount)

IRs:
TMP_70 = SEND dest:msg.sender value:amount
CONDITION TMP_70"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
FundTransfer(msg.sender,amount,false)

IRs:
Emit FundTransfer(msg.sender,amount,False)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[msg.sender] = amount

IRs:
REF_48(uint256) -> balanceOf[msg.sender]
REF_48(uint256) (->balanceOf) := amount(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
fundingGoalReached && beneficiary == msg.sender

IRs:
TMP_72(bool) = beneficiary == msg.sender
TMP_73(bool) = fundingGoalReached && TMP_72
CONDITION TMP_73"];
11->12[label="True"];
11->17[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
beneficiary.send(amountRaised)

IRs:
TMP_74 = SEND dest:beneficiary value:amountRaised
CONDITION TMP_74"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
tokenReward.transfer(msg.sender,tokenSupply)

IRs:
TMP_75(bool) = HIGH_LEVEL_CALL, dest:tokenReward(GigaGivingToken), function:transfer, arguments:['msg.sender', 'tokenSupply']  "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
FundTransfer(beneficiary,amountRaised,false)

IRs:
Emit FundTransfer(beneficiary,amountRaised,False)"];
14->16;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
fundingGoalReached = false

IRs:
fundingGoalReached(bool) := False(bool)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
afterDeadline()

IRs:
MODIFIER_CALL, GigaGivingICO.afterDeadline()()"];
18->1;
}
// Function: 36035.sol-GigaGivingICO-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PHASE_1_PRICE = 1600000000000000

IRs:
PHASE_1_PRICE(uint256) := 1600000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PHASE_2_PRICE = 2000000000000000

IRs:
PHASE_2_PRICE(uint256) := 2000000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
PHASE_3_PRICE = 2500000000000000

IRs:
PHASE_3_PRICE(uint256) := 2500000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
PHASE_4_PRICE = 4000000000000000

IRs:
PHASE_4_PRICE(uint256) := 4000000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
PHASE_5_PRICE = 5000000000000000

IRs:
PHASE_5_PRICE(uint256) := 5000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
DURATION = 3024000

IRs:
DURATION(uint256) := 3024000(uint256)"];
}
// Function: 36035.sol-GigaGivingICO-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
fundingGoalReached = false

IRs:
fundingGoalReached(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
crowdsaleClosed = false

IRs:
crowdsaleClosed(bool) := False(bool)"];
}
// Function: 36035.sol-GigaGivingToken-GigaGivingToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = TOTAL_TOKENS

IRs:
REF_30(uint256) -> balances[msg.sender]
REF_30(uint256) (->balances) := TOTAL_TOKENS(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = TOTAL_TOKENS

IRs:
totalSupply(uint256) := TOTAL_TOKENS(uint256)"];
}
// Function: 36035.sol-GigaGivingToken-allowance(address,address)
digraph{
}
// Function: 36035.sol-GigaGivingToken-approve(address,uint256)
digraph{
}
// Function: 36035.sol-GigaGivingToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
REF_32(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData))

IRs:
TMP_19(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_20 = CONVERT TMP_19 to bytes32
TMP_21 = CONVERT TMP_20 to bytes4
TMP_22(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_21', 'msg.sender', '_value', 'this', '_extraData']  
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36035.sol-GigaGivingToken-balanceOf(address)
digraph{
}
// Function: 36035.sol-GigaGivingToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
NAME = Giga Coin

IRs:
NAME(string) := Giga Coin(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
SYMBOL = GC

IRs:
SYMBOL(string) := GC(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
DECIMALS = 0

IRs:
DECIMALS(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TOTAL_TOKENS = 15000000

IRs:
TOTAL_TOKENS(uint256) := 15000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
CROWDSALE_TOKENS = 12000000

IRs:
CROWDSALE_TOKENS(uint256) := 12000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
VERSION = GC.2

IRs:
VERSION(string) := GC.2(string)"];
}
// Function: 36035.sol-GigaGivingToken-transfer(address,uint256)
digraph{
}
// Function: 36035.sol-GigaGivingToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 36035.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_34(uint256) = a + b
c(uint256) := TMP_34(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_35(bool) = c >= a
TMP_36(None) = SOLIDITY_CALL assert(bool)(TMP_35)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36035.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_30(uint256) = a / b
c(uint256) := TMP_30(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36035.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_24(uint256) = a * b
c(uint256) := TMP_24(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_25(bool) = a == 0
TMP_26(uint256) = c / a
TMP_27(bool) = TMP_26 == b
TMP_28(bool) = TMP_25 || TMP_27
TMP_29(None) = SOLIDITY_CALL assert(bool)(TMP_28)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36035.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_31(bool) = b <= a
TMP_32(None) = SOLIDITY_CALL assert(bool)(TMP_31)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_33(uint256) = a - b
RETURN TMP_33"];
}
// Function: 36035.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_13(mapping(address => uint256)) -> allowed[_owner]
REF_14(uint256) -> REF_13[_spender]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 36035.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_11(mapping(address => uint256)) -> allowed[msg.sender]
REF_12(uint256) -> REF_11[_spender]
REF_12(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36035.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_10(uint256) -> balances[_owner]
RETURN REF_10"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 36035.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sender = msg.sender

IRs:
sender(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[sender] >= _value)

IRs:
REF_0(uint256) -> balances[sender]
TMP_0(bool) = REF_0 >= _value
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[sender] -= _value

IRs:
REF_1(uint256) -> balances[sender]
REF_1(-> balances) = REF_1 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] += _value

IRs:
REF_2(uint256) -> balances[_to]
REF_2(-> balances) = REF_2 + _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(sender,_to,_value)

IRs:
Emit Transfer(sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36035.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[_from] >= _value && allowed[_from][msg.sender] >= _value)

IRs:
REF_3(uint256) -> balances[_from]
TMP_3(bool) = REF_3 >= _value
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
TMP_4(bool) = REF_5 >= _value
TMP_5(bool) = TMP_3 && TMP_4
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_6(uint256) -> balances[_to]
REF_6(-> balances) = REF_6 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_7(uint256) -> balances[_from]
REF_7(-> balances) = REF_7 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
REF_9(-> allowed) = REF_9 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36035.sol-Token-allowance(address,address)
digraph{
}
// Function: 36035.sol-Token-approve(address,uint256)
digraph{
}
// Function: 36035.sol-Token-balanceOf(address)
digraph{
}
// Function: 36035.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 36035.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
