digraph G {
// Function: 36182.sol-CNYTokenPlus-CNYTokenPlus(uint256,string,uint8,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
founder = msg.sender

IRs:
founder(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = _initialAmount

IRs:
REF_38(uint256) -> balances[msg.sender]
REF_38(uint256) (->balances) := _initialAmount(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = _initialAmount

IRs:
totalSupply(uint256) := _initialAmount(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = _decimalUnits

IRs:
decimals(uint8) := _decimalUnits(uint8)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)"];
}
// Function: 36182.sol-CNYTokenPlus-allowance(address,address)
digraph{
}
// Function: 36182.sol-CNYTokenPlus-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_56(mapping(address => uint256)) -> allowed[msg.sender]
REF_57(uint256) -> REF_56[_spender]
REF_57(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36182.sol-CNYTokenPlus-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_84(mapping(address => uint256)) -> allowed[msg.sender]
REF_85(uint256) -> REF_84[_spender]
REF_85(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

IRs:
TMP_63(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_64 = CONVERT TMP_63 to bytes32
TMP_65 = CONVERT TMP_64 to bytes4
TMP_66(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_65', 'msg.sender', '_value', 'this', '_extraData']  
TMP_67 = UnaryType.BANG TMP_66 
CONDITION TMP_67"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36182.sol-CNYTokenPlus-approveAndCallcode(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_87(mapping(address => uint256)) -> allowed[msg.sender]
REF_88(uint256) -> REF_87[_spender]
REF_88(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(_extraData)

IRs:
TMP_69(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['_extraData']  
TMP_70 = UnaryType.BANG TMP_69 
CONDITION TMP_70"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36182.sol-CNYTokenPlus-approveProxy(address,address,uint256,uint8,bytes32,bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] < _value

IRs:
REF_71(uint256) -> balances[_from]
TMP_54(bool) = REF_71 < _value
CONDITION TMP_54"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nonce = nonces[_from]

IRs:
REF_72(uint256) -> nonces[_from]
nonce(uint256) := REF_72(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
hash = sha3()(_from,_spender,_value,nonce)

IRs:
TMP_55(bytes32) = SOLIDITY_CALL sha3()(_from,_spender,_value,nonce)
hash(bytes32) := TMP_55(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
prefix = Ethereum Signed Message:
32

IRs:
prefix(bytes) := Ethereum Signed Message:
32(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
prefixedHash = sha3()(prefix,hash)

IRs:
TMP_56(bytes32) = SOLIDITY_CALL sha3()(prefix,hash)
prefixedHash(bytes32) := TMP_56(bytes32)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_from != ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,_v,_r,_s)

IRs:
TMP_57(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,_v,_r,_s)
TMP_58(bool) = _from != TMP_57
CONDITION TMP_58"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: THROW 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
allowed[_from][_spender] = _value

IRs:
REF_73(mapping(address => uint256)) -> allowed[_from]
REF_74(uint256) -> REF_73[_spender]
REF_74(uint256) (->allowed) := _value(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Approval(_from,_spender,_value)

IRs:
Emit Approval(_from,_spender,_value)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
lastComment[_from] = _comment

IRs:
REF_75(string) -> lastComment[_from]
REF_75(string) (->lastComment) := _comment(string)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
comments[_from][nonce] = _comment

IRs:
REF_76(mapping(uint256 => string)) -> comments[_from]
REF_77(string) -> REF_76[nonce]
REF_77(string) (->comments) := _comment(string)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
nonces[_from] = nonce + 1

IRs:
REF_78(uint256) -> nonces[_from]
TMP_60(uint256) = nonce + 1
REF_78(uint256) (->nonces) := TMP_60(uint256)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
true

IRs:
RETURN True"];
17[label="Node Type: RETURN 17

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36182.sol-CNYTokenPlus-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_55(uint256) -> balances[_owner]
RETURN REF_55"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 36182.sol-CNYTokenPlus-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] < _value

IRs:
REF_90(uint256) -> balances[msg.sender]
TMP_71(bool) = REF_90 < _value
CONDITION TMP_71"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_91(uint256) -> balances[msg.sender]
REF_91(-> balances) = REF_91 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36182.sol-CNYTokenPlus-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] < _value

IRs:
REF_92(uint256) -> balances[_from]
TMP_73(bool) = REF_92 < _value
CONDITION TMP_73"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_value > allowed[_from][msg.sender]

IRs:
REF_93(mapping(address => uint256)) -> allowed[_from]
REF_94(uint256) -> REF_93[msg.sender]
TMP_74(bool) = _value > REF_94
CONDITION TMP_74"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_from] -= _value

IRs:
REF_95(uint256) -> balances[_from]
REF_95(-> balances) = REF_95 - _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36182.sol-CNYTokenPlus-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: THROW 1
"];
}
// Function: 36182.sol-CNYTokenPlus-getLastComment(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
lastComment[_addr]

IRs:
REF_80(string) -> lastComment[_addr]
RETURN REF_80"];
}
// Function: 36182.sol-CNYTokenPlus-getNonce(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
nonces[_addr]

IRs:
REF_79(uint256) -> nonces[_addr]
RETURN REF_79"];
}
// Function: 36182.sol-CNYTokenPlus-getSpecifiedComment(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
nonces[_addr] < _nonce

IRs:
REF_81(uint256) -> nonces[_addr]
TMP_61(bool) = REF_81 < _nonce
CONDITION TMP_61"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
comments[_addr][_nonce]

IRs:
REF_82(mapping(uint256 => string)) -> comments[_addr]
REF_83(string) -> REF_82[_nonce]
RETURN REF_83"];
}
// Function: 36182.sol-CNYTokenPlus-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = CNYt+1.0

IRs:
version(string) := CNYt+1.0(string)"];
}
// Function: 36182.sol-CNYTokenPlus-transfer(address,uint256)
digraph{
}
// Function: 36182.sol-CNYTokenPlus-transferFrom(address,address,uint256)
digraph{
}
// Function: 36182.sol-CNYTokenPlus-transferFromWithComment(address,address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]

IRs:
REF_45(uint256) -> balances[_from]
TMP_31(bool) = REF_45 >= _value
REF_46(mapping(address => uint256)) -> allowed[_from]
REF_47(uint256) -> REF_46[msg.sender]
TMP_32(bool) = REF_47 >= _value
TMP_33(bool) = TMP_31 && TMP_32
REF_48(uint256) -> balances[_to]
TMP_34(uint256) = REF_48 + _value
REF_49(uint256) -> balances[_to]
TMP_35(bool) = TMP_34 > REF_49
TMP_36(bool) = TMP_33 && TMP_35
CONDITION TMP_36"];
1->2[label="True"];
1->8[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_50(uint256) -> balances[_to]
REF_50(-> balances) = REF_50 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_51(uint256) -> balances[_from]
REF_51(-> balances) = REF_51 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_52(mapping(address => uint256)) -> allowed[_from]
REF_53(uint256) -> REF_52[msg.sender]
REF_53(-> allowed) = REF_53 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lastComment[_from] = _comment

IRs:
REF_54(string) -> lastComment[_from]
REF_54(string) (->lastComment) := _comment(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36182.sol-CNYTokenPlus-transferProxy(address,address,uint256,uint256,uint8,bytes32,bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] < _fee + _value

IRs:
REF_58(uint256) -> balances[_from]
TMP_39(uint256) = _fee + _value
TMP_40(bool) = REF_58 < TMP_39
CONDITION TMP_40"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nonce = nonces[_from]

IRs:
REF_59(uint256) -> nonces[_from]
nonce(uint256) := REF_59(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
hash = sha3()(_from,_to,_value,_fee,nonce)

IRs:
TMP_41(bytes32) = SOLIDITY_CALL sha3()(_from,_to,_value,_fee,nonce)
hash(bytes32) := TMP_41(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
prefix = Ethereum Signed Message:
32

IRs:
prefix(bytes) := Ethereum Signed Message:
32(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
prefixedHash = sha3()(prefix,hash)

IRs:
TMP_42(bytes32) = SOLIDITY_CALL sha3()(prefix,hash)
prefixedHash(bytes32) := TMP_42(bytes32)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_from != ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,_v,_r,_s)

IRs:
TMP_43(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,_v,_r,_s)
TMP_44(bool) = _from != TMP_43
CONDITION TMP_44"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: THROW 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
balances[_to] + _value < balances[_to] || balances[msg.sender] + _fee < balances[msg.sender]

IRs:
REF_60(uint256) -> balances[_to]
TMP_45(uint256) = REF_60 + _value
REF_61(uint256) -> balances[_to]
TMP_46(bool) = TMP_45 < REF_61
REF_62(uint256) -> balances[msg.sender]
TMP_47(uint256) = REF_62 + _fee
REF_63(uint256) -> balances[msg.sender]
TMP_48(bool) = TMP_47 < REF_63
TMP_49(bool) = TMP_46 || TMP_48
CONDITION TMP_49"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: THROW 12
"];
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balances[_to] += _value

IRs:
REF_64(uint256) -> balances[_to]
REF_64(-> balances) = REF_64 + _value"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
balances[msg.sender] += _fee

IRs:
REF_65(uint256) -> balances[msg.sender]
REF_65(-> balances) = REF_65 + _fee"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Transfer(_from,msg.sender,_fee)

IRs:
Emit Transfer(_from,msg.sender,_fee)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
balances[_from] -= _value + _fee

IRs:
REF_66(uint256) -> balances[_from]
TMP_52(uint256) = _value + _fee
REF_66(-> balances) = REF_66 - TMP_52"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
lastComment[_from] = _comment

IRs:
REF_67(string) -> lastComment[_from]
REF_67(string) (->lastComment) := _comment(string)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
comments[_from][nonce] = _comment

IRs:
REF_68(mapping(uint256 => string)) -> comments[_from]
REF_69(string) -> REF_68[nonce]
REF_69(string) (->comments) := _comment(string)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
nonces[_from] = nonce + 1

IRs:
REF_70(uint256) -> nonces[_from]
TMP_53(uint256) = nonce + 1
REF_70(uint256) (->nonces) := TMP_53(uint256)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 36182.sol-CNYTokenPlus-transferWithComment(address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]

IRs:
REF_39(uint256) -> balances[msg.sender]
TMP_26(bool) = REF_39 >= _value
REF_40(uint256) -> balances[_to]
TMP_27(uint256) = REF_40 + _value
REF_41(uint256) -> balances[_to]
TMP_28(bool) = TMP_27 > REF_41
TMP_29(bool) = TMP_26 && TMP_28
CONDITION TMP_29"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_42(uint256) -> balances[msg.sender]
REF_42(-> balances) = REF_42 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_43(uint256) -> balances[_to]
REF_43(-> balances) = REF_43 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
lastComment[msg.sender] = _comment

IRs:
REF_44(string) -> lastComment[msg.sender]
REF_44(string) (->lastComment) := _comment(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36182.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_17(mapping(address => uint256)) -> allowed[_owner]
REF_18(uint256) -> REF_17[_spender]
RETURN REF_18"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 36182.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_15(mapping(address => uint256)) -> allowed[msg.sender]
REF_16(uint256) -> REF_15[_spender]
REF_16(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36182.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_14(uint256) -> balances[_owner]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 36182.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_0 >= _value
REF_1(uint256) -> balances[_to]
TMP_1(uint256) = REF_1 + _value
REF_2(uint256) -> balances[_to]
TMP_2(bool) = TMP_1 > REF_2
TMP_3(bool) = TMP_0 && TMP_2
CONDITION TMP_3"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_3(-> balances) = REF_3 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_4(uint256) -> balances[_to]
REF_4(-> balances) = REF_4 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36182.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]

IRs:
REF_5(uint256) -> balances[_from]
TMP_5(bool) = REF_5 >= _value
REF_6(mapping(address => uint256)) -> allowed[_from]
REF_7(uint256) -> REF_6[msg.sender]
TMP_6(bool) = REF_7 >= _value
TMP_7(bool) = TMP_5 && TMP_6
REF_8(uint256) -> balances[_to]
TMP_8(uint256) = REF_8 + _value
REF_9(uint256) -> balances[_to]
TMP_9(bool) = TMP_8 > REF_9
TMP_10(bool) = TMP_7 && TMP_9
CONDITION TMP_10"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_10(uint256) -> balances[_to]
REF_10(-> balances) = REF_10 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_11(uint256) -> balances[_from]
REF_11(-> balances) = REF_11 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_12(mapping(address => uint256)) -> allowed[_from]
REF_13(uint256) -> REF_12[msg.sender]
REF_13(-> allowed) = REF_13 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36182.sol-Token-allowance(address,address)
digraph{
}
// Function: 36182.sol-Token-approve(address,uint256)
digraph{
}
// Function: 36182.sol-Token-balanceOf(address)
digraph{
}
// Function: 36182.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 36182.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
