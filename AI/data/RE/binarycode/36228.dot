digraph G {
// Function: 36228.sol-CNYToken-CNYToken(uint256,string,uint8,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
founder = msg.sender

IRs:
founder(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = _initialAmount

IRs:
REF_38(uint256) -> balances[msg.sender]
REF_38(uint256) (->balances) := _initialAmount(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = _initialAmount

IRs:
totalSupply(uint256) := _initialAmount(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = _decimalUnits

IRs:
decimals(uint8) := _decimalUnits(uint8)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)"];
}
// Function: 36228.sol-CNYToken-allocateTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != founder

IRs:
TMP_73(bool) = msg.sender != founder
CONDITION TMP_73"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
totalSupply + _value <= totalSupply || balances[_to] + _value <= balances[_to]

IRs:
TMP_74(uint256) = totalSupply + _value
TMP_75(bool) = TMP_74 <= totalSupply
REF_95(uint256) -> balances[_to]
TMP_76(uint256) = REF_95 + _value
REF_96(uint256) -> balances[_to]
TMP_77(bool) = TMP_76 <= REF_96
TMP_78(bool) = TMP_75 || TMP_77
CONDITION TMP_78"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
totalSupply += _value

IRs:
totalSupply(uint256) = totalSupply + _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[_to] += _value

IRs:
REF_97(uint256) -> balances[_to]
REF_97(-> balances) = REF_97 + _value"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Increase(_to,_value)

IRs:
Emit Increase(_to,_value)"];
}
// Function: 36228.sol-CNYToken-allowance(address,address)
digraph{
}
// Function: 36228.sol-CNYToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_56(mapping(address => uint256)) -> allowed[msg.sender]
REF_57(uint256) -> REF_56[_spender]
REF_57(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36228.sol-CNYToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_83(mapping(address => uint256)) -> allowed[msg.sender]
REF_84(uint256) -> REF_83[_spender]
REF_84(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

IRs:
TMP_60(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_61 = CONVERT TMP_60 to bytes32
TMP_62 = CONVERT TMP_61 to bytes4
TMP_63(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_62', 'msg.sender', '_value', 'this', '_extraData']  
TMP_64 = UnaryType.BANG TMP_63 
CONDITION TMP_64"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36228.sol-CNYToken-approveAndCallcode(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_86(mapping(address => uint256)) -> allowed[msg.sender]
REF_87(uint256) -> REF_86[_spender]
REF_87(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(_extraData)

IRs:
TMP_66(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['_extraData']  
TMP_67 = UnaryType.BANG TMP_66 
CONDITION TMP_67"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36228.sol-CNYToken-approveProxy(address,address,uint256,uint8,bytes32,bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
nonce = nonces[_from]

IRs:
REF_71(uint256) -> nonces[_from]
nonce(uint256) := REF_71(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
hash = sha3()(_from,_spender,_value,nonce)

IRs:
TMP_53(bytes32) = SOLIDITY_CALL sha3()(_from,_spender,_value,nonce)
hash(bytes32) := TMP_53(bytes32)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_from != ecrecover(bytes32,uint8,bytes32,bytes32)(hash,_v,_r,_s)

IRs:
TMP_54(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(hash,_v,_r,_s)
TMP_55(bool) = _from != TMP_54
CONDITION TMP_55"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][_spender] = _value

IRs:
REF_72(mapping(address => uint256)) -> allowed[_from]
REF_73(uint256) -> REF_72[_spender]
REF_73(uint256) (->allowed) := _value(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Approval(_from,_spender,_value)

IRs:
Emit Approval(_from,_spender,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
lastComment[_from] = _comment

IRs:
REF_74(string) -> lastComment[_from]
REF_74(string) (->lastComment) := _comment(string)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
comments[_from][nonce] = _comment

IRs:
REF_75(mapping(uint256 => string)) -> comments[_from]
REF_76(string) -> REF_75[nonce]
REF_76(string) (->comments) := _comment(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
nonces[_from] = nonce + 1

IRs:
REF_77(uint256) -> nonces[_from]
TMP_57(uint256) = nonce + 1
REF_77(uint256) (->nonces) := TMP_57(uint256)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: RETURN 12

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36228.sol-CNYToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_55(uint256) -> balances[_owner]
RETURN REF_55"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 36228.sol-CNYToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] < _value

IRs:
REF_89(uint256) -> balances[msg.sender]
TMP_68(bool) = REF_89 < _value
CONDITION TMP_68"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_90(uint256) -> balances[msg.sender]
REF_90(-> balances) = REF_90 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36228.sol-CNYToken-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] < _value

IRs:
REF_91(uint256) -> balances[_from]
TMP_70(bool) = REF_91 < _value
CONDITION TMP_70"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_value > allowed[_from][msg.sender]

IRs:
REF_92(mapping(address => uint256)) -> allowed[_from]
REF_93(uint256) -> REF_92[msg.sender]
TMP_71(bool) = _value > REF_93
CONDITION TMP_71"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_from] -= _value

IRs:
REF_94(uint256) -> balances[_from]
REF_94(-> balances) = REF_94 - _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36228.sol-CNYToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: THROW 1
"];
}
// Function: 36228.sol-CNYToken-getLastComment(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
lastComment[_addr]

IRs:
REF_79(string) -> lastComment[_addr]
RETURN REF_79"];
}
// Function: 36228.sol-CNYToken-getNonce(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
nonces[_addr]

IRs:
REF_78(uint256) -> nonces[_addr]
RETURN REF_78"];
}
// Function: 36228.sol-CNYToken-getSpecifiedComment(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
nonces[_addr] < _nonce

IRs:
REF_80(uint256) -> nonces[_addr]
TMP_58(bool) = REF_80 < _nonce
CONDITION TMP_58"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
comments[_addr][_nonce]

IRs:
REF_81(mapping(uint256 => string)) -> comments[_addr]
REF_82(string) -> REF_81[_nonce]
RETURN REF_82"];
}
// Function: 36228.sol-CNYToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = CNY0.1

IRs:
version(string) := CNY0.1(string)"];
}
// Function: 36228.sol-CNYToken-transfer(address,uint256)
digraph{
}
// Function: 36228.sol-CNYToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 36228.sol-CNYToken-transferFromWithComment(address,address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]

IRs:
REF_45(uint256) -> balances[_from]
TMP_31(bool) = REF_45 >= _value
REF_46(mapping(address => uint256)) -> allowed[_from]
REF_47(uint256) -> REF_46[msg.sender]
TMP_32(bool) = REF_47 >= _value
TMP_33(bool) = TMP_31 && TMP_32
REF_48(uint256) -> balances[_to]
TMP_34(uint256) = REF_48 + _value
REF_49(uint256) -> balances[_to]
TMP_35(bool) = TMP_34 > REF_49
TMP_36(bool) = TMP_33 && TMP_35
CONDITION TMP_36"];
1->2[label="True"];
1->8[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_50(uint256) -> balances[_to]
REF_50(-> balances) = REF_50 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_51(uint256) -> balances[_from]
REF_51(-> balances) = REF_51 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_52(mapping(address => uint256)) -> allowed[_from]
REF_53(uint256) -> REF_52[msg.sender]
REF_53(-> allowed) = REF_53 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lastComment[_from] = _comment

IRs:
REF_54(string) -> lastComment[_from]
REF_54(string) (->lastComment) := _comment(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36228.sol-CNYToken-transferProxy(address,address,uint256,uint256,uint8,bytes32,bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] < _fee + _value

IRs:
REF_58(uint256) -> balances[_from]
TMP_39(uint256) = _fee + _value
TMP_40(bool) = REF_58 < TMP_39
CONDITION TMP_40"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nonce = nonces[_from]

IRs:
REF_59(uint256) -> nonces[_from]
nonce(uint256) := REF_59(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
h = sha3()(_from,_to,_value,_fee,nonce)

IRs:
TMP_41(bytes32) = SOLIDITY_CALL sha3()(_from,_to,_value,_fee,nonce)
h(bytes32) := TMP_41(bytes32)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_from != ecrecover(bytes32,uint8,bytes32,bytes32)(h,_v,_r,_s)

IRs:
TMP_42(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(h,_v,_r,_s)
TMP_43(bool) = _from != TMP_42
CONDITION TMP_43"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: THROW 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
balances[_to] + _value < balances[_to] || balances[msg.sender] + _fee < balances[msg.sender]

IRs:
REF_60(uint256) -> balances[_to]
TMP_44(uint256) = REF_60 + _value
REF_61(uint256) -> balances[_to]
TMP_45(bool) = TMP_44 < REF_61
REF_62(uint256) -> balances[msg.sender]
TMP_46(uint256) = REF_62 + _fee
REF_63(uint256) -> balances[msg.sender]
TMP_47(bool) = TMP_46 < REF_63
TMP_48(bool) = TMP_45 || TMP_47
CONDITION TMP_48"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: THROW 10
"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
balances[_to] += _value

IRs:
REF_64(uint256) -> balances[_to]
REF_64(-> balances) = REF_64 + _value"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balances[msg.sender] += _fee

IRs:
REF_65(uint256) -> balances[msg.sender]
REF_65(-> balances) = REF_65 + _fee"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Transfer(_from,msg.sender,_fee)

IRs:
Emit Transfer(_from,msg.sender,_fee)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
balances[_from] -= _value + _fee

IRs:
REF_66(uint256) -> balances[_from]
TMP_51(uint256) = _value + _fee
REF_66(-> balances) = REF_66 - TMP_51"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
lastComment[_from] = _comment

IRs:
REF_67(string) -> lastComment[_from]
REF_67(string) (->lastComment) := _comment(string)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
comments[_from][nonce] = _comment

IRs:
REF_68(mapping(uint256 => string)) -> comments[_from]
REF_69(string) -> REF_68[nonce]
REF_69(string) (->comments) := _comment(string)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
nonces[_from] = nonce + 1

IRs:
REF_70(uint256) -> nonces[_from]
TMP_52(uint256) = nonce + 1
REF_70(uint256) (->nonces) := TMP_52(uint256)"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 36228.sol-CNYToken-transferWithComment(address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]

IRs:
REF_39(uint256) -> balances[msg.sender]
TMP_26(bool) = REF_39 >= _value
REF_40(uint256) -> balances[_to]
TMP_27(uint256) = REF_40 + _value
REF_41(uint256) -> balances[_to]
TMP_28(bool) = TMP_27 > REF_41
TMP_29(bool) = TMP_26 && TMP_28
CONDITION TMP_29"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_42(uint256) -> balances[msg.sender]
REF_42(-> balances) = REF_42 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_43(uint256) -> balances[_to]
REF_43(-> balances) = REF_43 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
lastComment[msg.sender] = _comment

IRs:
REF_44(string) -> lastComment[msg.sender]
REF_44(string) (->lastComment) := _comment(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36228.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_17(mapping(address => uint256)) -> allowed[_owner]
REF_18(uint256) -> REF_17[_spender]
RETURN REF_18"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 36228.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_15(mapping(address => uint256)) -> allowed[msg.sender]
REF_16(uint256) -> REF_15[_spender]
REF_16(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36228.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_14(uint256) -> balances[_owner]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 36228.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_0 >= _value
REF_1(uint256) -> balances[_to]
TMP_1(uint256) = REF_1 + _value
REF_2(uint256) -> balances[_to]
TMP_2(bool) = TMP_1 > REF_2
TMP_3(bool) = TMP_0 && TMP_2
CONDITION TMP_3"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_3(-> balances) = REF_3 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_4(uint256) -> balances[_to]
REF_4(-> balances) = REF_4 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36228.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]

IRs:
REF_5(uint256) -> balances[_from]
TMP_5(bool) = REF_5 >= _value
REF_6(mapping(address => uint256)) -> allowed[_from]
REF_7(uint256) -> REF_6[msg.sender]
TMP_6(bool) = REF_7 >= _value
TMP_7(bool) = TMP_5 && TMP_6
REF_8(uint256) -> balances[_to]
TMP_8(uint256) = REF_8 + _value
REF_9(uint256) -> balances[_to]
TMP_9(bool) = TMP_8 > REF_9
TMP_10(bool) = TMP_7 && TMP_9
CONDITION TMP_10"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_10(uint256) -> balances[_to]
REF_10(-> balances) = REF_10 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_11(uint256) -> balances[_from]
REF_11(-> balances) = REF_11 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_12(mapping(address => uint256)) -> allowed[_from]
REF_13(uint256) -> REF_12[msg.sender]
REF_13(-> allowed) = REF_13 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36228.sol-Token-allowance(address,address)
digraph{
}
// Function: 36228.sol-Token-approve(address,uint256)
digraph{
}
// Function: 36228.sol-Token-balanceOf(address)
digraph{
}
// Function: 36228.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 36228.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
