digraph G {
// Function: 36329.sol-EROMaths-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_17(uint256) = a + b
c(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_18(bool) = c >= a
TMP_19(bool) = c >= b
TMP_20(bool) = TMP_18 && TMP_19
TMP_21(None) = SOLIDITY_CALL assert(bool)(TMP_20)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36329.sol-EROMaths-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_6(bool) = b > 0
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_8(uint256) = a / b
c(uint256) := TMP_8(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_9(uint256) = b * c
TMP_10(uint256) = a % b
TMP_11(uint256) = TMP_9 + TMP_10
TMP_12(bool) = a == TMP_11
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36329.sol-EROMaths-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36329.sol-EROMaths-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_14(bool) = b <= a
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_16(uint256) = a - b
RETURN TMP_16"];
}
// Function: 36329.sol-EROSCOIN-EROSCOIN()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_78(uint256) -> balances[msg.sender]
REF_78(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 36329.sol-EROSCOIN-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 36329.sol-EROSCOIN-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_133(bool) = msg.sender == newOwner
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
}
// Function: 36329.sol-EROSCOIN-allowance(address,address)
digraph{
}
// Function: 36329.sol-EROSCOIN-approve(address,uint256)
digraph{
}
// Function: 36329.sol-EROSCOIN-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_79(mapping(address => uint256)) -> allowed[msg.sender]
REF_80(uint256) -> REF_79[_spender]
REF_80(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData))

IRs:
TMP_137(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_138 = CONVERT TMP_137 to bytes32
TMP_139 = CONVERT TMP_138 to bytes4
TMP_140(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_139', 'msg.sender', '_value', 'this', '_extraData']  
TMP_141(None) = SOLIDITY_CALL require(bool)(TMP_140)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36329.sol-EROSCOIN-balanceOf(address)
digraph{
}
// Function: 36329.sol-EROSCOIN-freezeAccount(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozenAccount[target] = freeze

IRs:
REF_40(bool) -> frozenAccount[target]
REF_40(bool) (->frozenAccount) := freeze(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FrozenFunds(target,freeze)

IRs:
Emit FrozenFunds(target,freeze)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 36329.sol-EROSCOIN-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_146(bool) = msg.sender == owner
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 36329.sol-EROSCOIN-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 8

IRs:
decimals(uint256) := 8(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = EROSCOIN

IRs:
name(string) := EROSCOIN(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = ERO

IRs:
symbol(string) := ERO(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
version = v1.1.3

IRs:
version(string) := v1.1.3(string)"];
}
// Function: 36329.sol-EROSCOIN-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 240 * (10 ** 7) * 10 ** 8

IRs:
TMP_142(uint256) = 10 ** 7
TMP_143(uint256) = 240 * TMP_142
TMP_144(uint256) = 10 ** 8
TMP_145(uint256) = TMP_143 * TMP_144
totalSupply(uint256) := TMP_145(uint256)"];
}
// Function: 36329.sol-EROSCOIN-transfer(address,uint256)
digraph{
}
// Function: 36329.sol-EROSCOIN-transferFrom(address,address,uint256)
digraph{
}
// Function: 36329.sol-EROSCOIN-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
_newOwner != address(0)

IRs:
TMP_130 = CONVERT 0 to address
TMP_131(bool) = _newOwner != TMP_130
CONDITION TMP_131"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 36329.sol-EROSCOIN-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != 0x0)

IRs:
TMP_148(bool) = _address != 0
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 36329.sol-EROSToken-allowance(address,address)
digraph{
}
// Function: 36329.sol-EROSToken-approve(address,uint256)
digraph{
}
// Function: 36329.sol-EROSToken-balanceOf(address)
digraph{
}
// Function: 36329.sol-EROSToken-transfer(address,uint256)
digraph{
}
// Function: 36329.sol-EROSToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 36329.sol-EroStandardToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 36329.sol-EroStandardToken-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_35(bool) = msg.sender == newOwner
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
}
// Function: 36329.sol-EroStandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_37(mapping(address => uint256)) -> allowed[_owner]
REF_38(uint256) -> REF_37[_spender]
RETURN REF_38"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 36329.sol-EroStandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

IRs:
TMP_77(bool) = _value == 0
REF_33(mapping(address => uint256)) -> allowed[msg.sender]
REF_34(uint256) -> REF_33[_spender]
TMP_78(bool) = REF_34 == 0
TMP_79(bool) = TMP_77 || TMP_78
TMP_80(None) = SOLIDITY_CALL require(bool)(TMP_79)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_35(mapping(address => uint256)) -> allowed[msg.sender]
REF_36(uint256) -> REF_35[_spender]
REF_36(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36329.sol-EroStandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 36329.sol-EroStandardToken-freezeAccount(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozenAccount[target] = freeze

IRs:
REF_1(bool) -> frozenAccount[target]
REF_1(bool) (->frozenAccount) := freeze(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FrozenFunds(target,freeze)

IRs:
Emit FrozenFunds(target,freeze)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 36329.sol-EroStandardToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_82(bool) = msg.sender == owner
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 36329.sol-EroStandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
frozenAccount[msg.sender]

IRs:
REF_2(bool) -> frozenAccount[msg.sender]
CONDITION REF_2"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)((balances[msg.sender] >= _value) && (_value > 0) && (_to != address(0)) && (balances[_to].add(_value) >= balances[_to]) && (msg.data.length >= (2 * 32) + 4))

IRs:
REF_3(uint256) -> balances[msg.sender]
TMP_40(bool) = REF_3 >= _value
TMP_41(bool) = _value > 0
TMP_42(bool) = TMP_40 && TMP_41
TMP_43 = CONVERT 0 to address
TMP_44(bool) = _to != TMP_43
TMP_45(bool) = TMP_42 && TMP_44
REF_4(uint256) -> balances[_to]
TMP_46(uint256) = LIBRARY_CALL, dest:EROMaths, function:EROMaths.add(uint256,uint256), arguments:['REF_4', '_value'] 
REF_6(uint256) -> balances[_to]
TMP_47(bool) = TMP_46 >= REF_6
TMP_48(bool) = TMP_45 && TMP_47
REF_7 -> LENGTH msg.data
TMP_49(uint256) = 2 * 32
TMP_50(uint256) = TMP_49 + 4
TMP_51(bool) = REF_7 >= TMP_50
TMP_52(bool) = TMP_48 && TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_8(uint256) -> balances[msg.sender]
REF_9(uint256) -> balances[msg.sender]
TMP_54(uint256) = LIBRARY_CALL, dest:EROMaths, function:EROMaths.sub(uint256,uint256), arguments:['REF_9', '_value'] 
REF_8(uint256) (->balances) := TMP_54(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_11(uint256) -> balances[_to]
REF_12(uint256) -> balances[_to]
TMP_55(uint256) = LIBRARY_CALL, dest:EROMaths, function:EROMaths.add(uint256,uint256), arguments:['REF_12', '_value'] 
REF_11(uint256) (->balances) := TMP_55(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36329.sol-EroStandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
frozenAccount[msg.sender]

IRs:
REF_14(bool) -> frozenAccount[msg.sender]
CONDITION REF_14"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)((allowed[_from][msg.sender] >= _value) && (balances[_from] >= _value) && (_value > 0) && (_to != address(0)) && (balances[_to].add(_value) >= balances[_to]) && (msg.data.length >= (2 * 32) + 4))

IRs:
REF_15(mapping(address => uint256)) -> allowed[_from]
REF_16(uint256) -> REF_15[msg.sender]
TMP_57(bool) = REF_16 >= _value
REF_17(uint256) -> balances[_from]
TMP_58(bool) = REF_17 >= _value
TMP_59(bool) = TMP_57 && TMP_58
TMP_60(bool) = _value > 0
TMP_61(bool) = TMP_59 && TMP_60
TMP_62 = CONVERT 0 to address
TMP_63(bool) = _to != TMP_62
TMP_64(bool) = TMP_61 && TMP_63
REF_18(uint256) -> balances[_to]
TMP_65(uint256) = LIBRARY_CALL, dest:EROMaths, function:EROMaths.add(uint256,uint256), arguments:['REF_18', '_value'] 
REF_20(uint256) -> balances[_to]
TMP_66(bool) = TMP_65 >= REF_20
TMP_67(bool) = TMP_64 && TMP_66
REF_21 -> LENGTH msg.data
TMP_68(uint256) = 2 * 32
TMP_69(uint256) = TMP_68 + 4
TMP_70(bool) = REF_21 >= TMP_69
TMP_71(bool) = TMP_67 && TMP_70
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_22(uint256) -> balances[_from]
REF_23(uint256) -> balances[_from]
TMP_73(uint256) = LIBRARY_CALL, dest:EROMaths, function:EROMaths.sub(uint256,uint256), arguments:['REF_23', '_value'] 
REF_22(uint256) (->balances) := TMP_73(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_25(uint256) -> balances[_to]
REF_26(uint256) -> balances[_to]
TMP_74(uint256) = LIBRARY_CALL, dest:EROMaths, function:EROMaths.add(uint256,uint256), arguments:['REF_26', '_value'] 
REF_25(uint256) (->balances) := TMP_74(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_28(mapping(address => uint256)) -> allowed[_from]
REF_29(uint256) -> REF_28[msg.sender]
REF_30(mapping(address => uint256)) -> allowed[_from]
REF_31(uint256) -> REF_30[msg.sender]
TMP_75(uint256) = LIBRARY_CALL, dest:EROMaths, function:EROMaths.sub(uint256,uint256), arguments:['REF_31', '_value'] 
REF_29(uint256) (->allowed) := TMP_75(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36329.sol-EroStandardToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
_newOwner != address(0)

IRs:
TMP_32 = CONVERT 0 to address
TMP_33(bool) = _newOwner != TMP_32
CONDITION TMP_33"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 36329.sol-EroStandardToken-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != 0x0)

IRs:
TMP_84(bool) = _address != 0
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 36329.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 36329.sol-Ownable-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_25(bool) = msg.sender == newOwner
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
}
// Function: 36329.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_28(bool) = msg.sender == owner
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 36329.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
_newOwner != address(0)

IRs:
TMP_22 = CONVERT 0 to address
TMP_23(bool) = _newOwner != TMP_22
CONDITION TMP_23"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 36329.sol-Ownable-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != 0x0)

IRs:
TMP_30(bool) = _address != 0
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
