digraph G {
// Function: 36494.sol-CentraSale-CentraSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 36494.sol-CentraSale-contract_transfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! contract_address.call(bytes4(sha3()(transfer(address,uint256))),msg.sender,_amount)

IRs:
TMP_10(bytes32) = SOLIDITY_CALL sha3()(transfer(address,uint256))
TMP_11 = CONVERT TMP_10 to bytes4
TMP_12(bool) = LOW_LEVEL_CALL, dest:contract_address, function:call, arguments:['TMP_11', 'msg.sender', '_amount']  
TMP_13 = UnaryType.BANG TMP_12 
CONDITION TMP_13"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 36494.sol-CentraSale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! (msg.value >= min_value)

IRs:
TMP_0(bool) = msg.value >= min_value
TMP_1 = UnaryType.BANG TMP_0 
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokens_total = msg.value * 10 ** 18 / token_price

IRs:
TMP_2(uint256) = 10 ** 18
TMP_3(uint256) = msg.value * TMP_2
TMP_4(uint256) = TMP_3 / token_price
tokens_total(uint256) := TMP_4(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! (tokens_total > 0)

IRs:
TMP_5(bool) = tokens_total > 0
TMP_6 = UnaryType.BANG TMP_5 
CONDITION TMP_6"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! contract_transfer(tokens_total)

IRs:
TMP_7(bool) = INTERNAL_CALL, CentraSale.contract_transfer(uint256)(tokens_total)
TMP_8 = UnaryType.BANG TMP_7 
CONDITION TMP_8"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: THROW 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
owner.send(this.balance)

IRs:
REF_1(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_9 = SEND dest:owner value:REF_1"];
}
// Function: 36494.sol-CentraSale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_19(bool) = msg.sender != owner
CONDITION TMP_19"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 36494.sol-CentraSale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
min_value = 10 ** 18 * 1 / 10

IRs:
TMP_16(uint256) = 10 ** 18
TMP_17(uint256) = TMP_16 * 1
TMP_18(uint256) = TMP_17 / 10
min_value(uint256) := TMP_18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
token_price = 1481481481481481

IRs:
token_price(uint256) := 1481481481481481(uint256)"];
}
// Function: 36494.sol-CentraSale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
contract_address = 0x96a65609a7b84e8842732deb08f56c3e21ac6f8a

IRs:
contract_address(address) := 860058034268601496487720091517100350015881899914(uint256)"];
}
// Function: 36494.sol-CentraSale-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.send(this.balance)

IRs:
REF_4(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_14 = SEND dest:owner value:REF_4"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, CentraSale.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 36494.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_30(uint256) = a + b
c(uint256) := TMP_30(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(c >= a)

IRs:
TMP_31(bool) = c >= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_31)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36494.sol-SafeMath-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_37 = UnaryType.BANG assertion 
CONDITION TMP_37"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 36494.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_26(uint256) = a / b
c(uint256) := TMP_26(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36494.sol-SafeMath-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_35(bool) = a >= b
CONDITION TMP_35"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 36494.sol-SafeMath-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_33(bool) = a >= b
CONDITION TMP_33"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 36494.sol-SafeMath-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_36(bool) = a < b
CONDITION TMP_36"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 36494.sol-SafeMath-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_34(bool) = a < b
CONDITION TMP_34"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 36494.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_20(uint256) = a * b
c(uint256) := TMP_20(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(a == 0 || c / a == b)

IRs:
TMP_21(bool) = a == 0
TMP_22(uint256) = c / a
TMP_23(bool) = TMP_22 == b
TMP_24(bool) = TMP_21 || TMP_23
INTERNAL_CALL, SafeMath.assert(bool)(TMP_24)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36494.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b <= a)

IRs:
TMP_27(bool) = b <= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_27)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_29(uint256) = a - b
RETURN TMP_29"];
}
}
