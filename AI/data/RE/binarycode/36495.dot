digraph G {
// Function: 36495.sol-CentraSale-CentraSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operation = 0

IRs:
operation(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
cap = 0

IRs:
cap(uint256) := 0(uint256)"];
}
// Function: 36495.sol-CentraSale-cards_black_total()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
cards_black.length

IRs:
REF_10 -> LENGTH cards_black
RETURN REF_10"];
}
// Function: 36495.sol-CentraSale-cards_blue_total()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
cards_blue.length

IRs:
REF_13 -> LENGTH cards_blue
RETURN REF_13"];
}
// Function: 36495.sol-CentraSale-cards_gold_total()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
cards_gold.length

IRs:
REF_12 -> LENGTH cards_gold
RETURN REF_12"];
}
// Function: 36495.sol-CentraSale-cards_metal_total()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
cards_metal.length

IRs:
REF_11 -> LENGTH cards_metal
RETURN REF_11"];
}
// Function: 36495.sol-CentraSale-cards_start_total()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
cards_start.length

IRs:
REF_14 -> LENGTH cards_start
RETURN REF_14"];
}
// Function: 36495.sol-CentraSale-cards_titanium_total()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
cards_titanium.length

IRs:
REF_9 -> LENGTH cards_titanium
RETURN REF_9"];
}
// Function: 36495.sol-CentraSale-contract_transfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! contract_address.call(bytes4(sha3()(transfer(address,uint256))),msg.sender,_amount)

IRs:
TMP_15(bytes32) = SOLIDITY_CALL sha3()(transfer(address,uint256))
TMP_16 = CONVERT TMP_15 to bytes4
TMP_17(bool) = LOW_LEVEL_CALL, dest:contract_address, function:call, arguments:['TMP_16', 'msg.sender', '_amount']  
TMP_18 = UnaryType.BANG TMP_17 
CONDITION TMP_18"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 36495.sol-CentraSale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! (msg.value >= min_value)

IRs:
TMP_0(bool) = msg.value >= min_value
TMP_1 = UnaryType.BANG TMP_0 
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
now < contract_start

IRs:
TMP_2(bool) = now < contract_start
CONDITION TMP_2"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
now > contract_finish

IRs:
TMP_3(bool) = now > contract_finish
CONDITION TMP_3"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tokens_total = msg.value * 10 ** 18 / token_price

IRs:
TMP_4(uint256) = 10 ** 18
TMP_5(uint256) = msg.value * TMP_4
TMP_6(uint256) = TMP_5 / token_price
tokens_total(uint256) := TMP_6(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
! (tokens_total > 0)

IRs:
TMP_7(bool) = tokens_total > 0
TMP_8 = UnaryType.BANG TMP_7 
CONDITION TMP_8"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: THROW 12
"];
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! contract_transfer(tokens_total)

IRs:
TMP_9(bool) = INTERNAL_CALL, CentraSale.contract_transfer(uint256)(tokens_total)
TMP_10 = UnaryType.BANG TMP_9 
CONDITION TMP_10"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
cap = cap.add(msg.value)

IRs:
TMP_11(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['cap', 'msg.value'] 
cap(uint256) := TMP_11(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
operations()

IRs:
TMP_12(bool) = INTERNAL_CALL, CentraSale.operations()()"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
get_card()

IRs:
TMP_13(bool) = INTERNAL_CALL, CentraSale.get_card()()"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
owner.send(this.balance)

IRs:
REF_2(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_14 = SEND dest:owner value:REF_2"];
}
// Function: 36495.sol-CentraSale-get_card()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(msg.value >= card_titanium_minamount) && (cards_titanium.length < card_titanium_first) && (cards_titanium_check[msg.sender] != 1)

IRs:
TMP_22(bool) = msg.value >= card_titanium_minamount
REF_15 -> LENGTH cards_titanium
TMP_23(bool) = REF_15 < card_titanium_first
TMP_24(bool) = TMP_22 && TMP_23
REF_16(uint256) -> cards_titanium_check[msg.sender]
TMP_25(bool) = REF_16 != 1
TMP_26(bool) = TMP_24 && TMP_25
CONDITION TMP_26"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cards_titanium.push(msg.sender)

IRs:
REF_18 -> LENGTH cards_titanium
TMP_28(uint256) := REF_18(uint256)
TMP_29(uint256) = TMP_28 + 1
REF_18(uint256) (->cards_titanium) := TMP_29(uint256)
REF_19(address) -> cards_titanium[TMP_28]
REF_19(address) (->cards_titanium) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
cards_titanium_check[msg.sender] = 1

IRs:
REF_20(uint256) -> cards_titanium_check[msg.sender]
REF_20(uint256) (->cards_titanium_check) := 1(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
(msg.value >= card_black_minamount) && (msg.value < card_titanium_minamount) && (cards_black.length < card_black_first) && (cards_black_check[msg.sender] != 1)

IRs:
TMP_30(bool) = msg.value >= card_black_minamount
TMP_31(bool) = msg.value < card_titanium_minamount
TMP_32(bool) = TMP_30 && TMP_31
REF_21 -> LENGTH cards_black
TMP_33(bool) = REF_21 < card_black_first
TMP_34(bool) = TMP_32 && TMP_33
REF_22(uint256) -> cards_black_check[msg.sender]
TMP_35(bool) = REF_22 != 1
TMP_36(bool) = TMP_34 && TMP_35
CONDITION TMP_36"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
cards_black.push(msg.sender)

IRs:
REF_24 -> LENGTH cards_black
TMP_38(uint256) := REF_24(uint256)
TMP_39(uint256) = TMP_38 + 1
REF_24(uint256) (->cards_black) := TMP_39(uint256)
REF_25(address) -> cards_black[TMP_38]
REF_25(address) (->cards_black) := msg.sender(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
cards_black_check[msg.sender] = 1

IRs:
REF_26(uint256) -> cards_black_check[msg.sender]
REF_26(uint256) (->cards_black_check) := 1(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
(msg.value >= card_metal_minamount) && (msg.value < card_black_minamount) && (cards_metal.length < card_metal_first) && (cards_metal_check[msg.sender] != 1)

IRs:
TMP_40(bool) = msg.value >= card_metal_minamount
TMP_41(bool) = msg.value < card_black_minamount
TMP_42(bool) = TMP_40 && TMP_41
REF_27 -> LENGTH cards_metal
TMP_43(bool) = REF_27 < card_metal_first
TMP_44(bool) = TMP_42 && TMP_43
REF_28(uint256) -> cards_metal_check[msg.sender]
TMP_45(bool) = REF_28 != 1
TMP_46(bool) = TMP_44 && TMP_45
CONDITION TMP_46"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
cards_metal.push(msg.sender)

IRs:
REF_30 -> LENGTH cards_metal
TMP_48(uint256) := REF_30(uint256)
TMP_49(uint256) = TMP_48 + 1
REF_30(uint256) (->cards_metal) := TMP_49(uint256)
REF_31(address) -> cards_metal[TMP_48]
REF_31(address) (->cards_metal) := msg.sender(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
cards_metal_check[msg.sender] = 1

IRs:
REF_32(uint256) -> cards_metal_check[msg.sender]
REF_32(uint256) (->cards_metal_check) := 1(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
(msg.value >= card_gold_minamount) && (msg.value < card_metal_minamount) && (cards_gold.length < card_gold_first) && (cards_gold_check[msg.sender] != 1)

IRs:
TMP_50(bool) = msg.value >= card_gold_minamount
TMP_51(bool) = msg.value < card_metal_minamount
TMP_52(bool) = TMP_50 && TMP_51
REF_33 -> LENGTH cards_gold
TMP_53(bool) = REF_33 < card_gold_first
TMP_54(bool) = TMP_52 && TMP_53
REF_34(uint256) -> cards_gold_check[msg.sender]
TMP_55(bool) = REF_34 != 1
TMP_56(bool) = TMP_54 && TMP_55
CONDITION TMP_56"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
cards_gold.push(msg.sender)

IRs:
REF_36 -> LENGTH cards_gold
TMP_58(uint256) := REF_36(uint256)
TMP_59(uint256) = TMP_58 + 1
REF_36(uint256) (->cards_gold) := TMP_59(uint256)
REF_37(address) -> cards_gold[TMP_58]
REF_37(address) (->cards_gold) := msg.sender(address)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
cards_gold_check[msg.sender] = 1

IRs:
REF_38(uint256) -> cards_gold_check[msg.sender]
REF_38(uint256) (->cards_gold_check) := 1(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
(msg.value >= card_blue_minamount) && (msg.value < card_gold_minamount) && (cards_blue.length < card_blue_first) && (cards_blue_check[msg.sender] != 1)

IRs:
TMP_60(bool) = msg.value >= card_blue_minamount
TMP_61(bool) = msg.value < card_gold_minamount
TMP_62(bool) = TMP_60 && TMP_61
REF_39 -> LENGTH cards_blue
TMP_63(bool) = REF_39 < card_blue_first
TMP_64(bool) = TMP_62 && TMP_63
REF_40(uint256) -> cards_blue_check[msg.sender]
TMP_65(bool) = REF_40 != 1
TMP_66(bool) = TMP_64 && TMP_65
CONDITION TMP_66"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
cards_blue.push(msg.sender)

IRs:
REF_42 -> LENGTH cards_blue
TMP_68(uint256) := REF_42(uint256)
TMP_69(uint256) = TMP_68 + 1
REF_42(uint256) (->cards_blue) := TMP_69(uint256)
REF_43(address) -> cards_blue[TMP_68]
REF_43(address) (->cards_blue) := msg.sender(address)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
cards_blue_check[msg.sender] = 1

IRs:
REF_44(uint256) -> cards_blue_check[msg.sender]
REF_44(uint256) (->cards_blue_check) := 1(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(msg.value >= card_start_minamount) && (msg.value < card_blue_minamount) && (cards_start.length < card_start_first) && (cards_start_check[msg.sender] != 1)

IRs:
TMP_70(bool) = msg.value >= card_start_minamount
TMP_71(bool) = msg.value < card_blue_minamount
TMP_72(bool) = TMP_70 && TMP_71
REF_45 -> LENGTH cards_start
TMP_73(bool) = REF_45 < card_start_first
TMP_74(bool) = TMP_72 && TMP_73
REF_46(uint256) -> cards_start_check[msg.sender]
TMP_75(bool) = REF_46 != 1
TMP_76(bool) = TMP_74 && TMP_75
CONDITION TMP_76"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
cards_start.push(msg.sender)

IRs:
REF_48 -> LENGTH cards_start
TMP_78(uint256) := REF_48(uint256)
TMP_79(uint256) = TMP_78 + 1
REF_48(uint256) (->cards_start) := TMP_79(uint256)
REF_49(address) -> cards_start[TMP_78]
REF_49(address) (->cards_start) := msg.sender(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
cards_start_check[msg.sender] = 1

IRs:
REF_50(uint256) -> cards_start_check[msg.sender]
REF_50(uint256) (->cards_start_check) := 1(uint256)"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 36495.sol-CentraSale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_102(bool) = msg.sender != owner
CONDITION TMP_102"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 36495.sol-CentraSale-operations()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operation_address[operation] = msg.sender

IRs:
REF_4(address) -> operation_address[operation]
REF_4(address) (->operation_address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operation_amount[operation] = msg.value

IRs:
REF_5(uint256) -> operation_amount[operation]
REF_5(uint256) (->operation_amount) := msg.value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
operation = operation.add(1)

IRs:
TMP_19(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['operation', '1'] 
operation(uint256) := TMP_19(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 36495.sol-CentraSale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
cap_max = 170000 * 10 ** 18

IRs:
TMP_80(uint256) = 10 ** 18
TMP_81(uint256) = 170000 * TMP_80
cap_max(uint256) := TMP_81(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
min_value = 10 ** 18 * 1 / 10

IRs:
TMP_82(uint256) = 10 ** 18
TMP_83(uint256) = TMP_82 * 1
TMP_84(uint256) = TMP_83 / 10
min_value(uint256) := TMP_84(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
token_price = 10 ** 18 * 1 / 200

IRs:
TMP_85(uint256) = 10 ** 18
TMP_86(uint256) = TMP_85 * 1
TMP_87(uint256) = TMP_86 / 200
token_price(uint256) := TMP_87(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
contract_start = 1505844000

IRs:
contract_start(uint256) := 1505844000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
contract_finish = 1507269600

IRs:
contract_finish(uint256) := 1507269600(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
card_titanium_minamount = 500 * 10 ** 18

IRs:
TMP_88(uint256) = 10 ** 18
TMP_89(uint256) = 500 * TMP_88
card_titanium_minamount(uint256) := TMP_89(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
card_titanium_first = 200000

IRs:
card_titanium_first(uint256) := 200000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
card_black_minamount = 100 * 10 ** 18

IRs:
TMP_90(uint256) = 10 ** 18
TMP_91(uint256) = 100 * TMP_90
card_black_minamount(uint256) := TMP_91(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
card_black_first = 500000

IRs:
card_black_first(uint256) := 500000(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
card_metal_minamount = 40 * 10 ** 18

IRs:
TMP_92(uint256) = 10 ** 18
TMP_93(uint256) = 40 * TMP_92
card_metal_minamount(uint256) := TMP_93(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
card_metal_first = 750000

IRs:
card_metal_first(uint256) := 750000(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
card_gold_minamount = 30 * 10 ** 18

IRs:
TMP_94(uint256) = 10 ** 18
TMP_95(uint256) = 30 * TMP_94
card_gold_minamount(uint256) := TMP_95(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
card_gold_first = 1000000

IRs:
card_gold_first(uint256) := 1000000(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
card_blue_minamount = 5 / 10 * 10 ** 18

IRs:
TMP_96(uint256) = 5 / 10
TMP_97(uint256) = 10 ** 18
TMP_98(uint256) = TMP_96 * TMP_97
card_blue_minamount(uint256) := TMP_98(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
card_blue_first = 100000000

IRs:
card_blue_first(uint256) := 100000000(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
card_start_minamount = 1 / 10 * 10 ** 18

IRs:
TMP_99(uint256) = 1 / 10
TMP_100(uint256) = 10 ** 18
TMP_101(uint256) = TMP_99 * TMP_100
card_start_minamount(uint256) := TMP_101(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
card_start_first = 100000000

IRs:
card_start_first(uint256) := 100000000(uint256)"];
}
// Function: 36495.sol-CentraSale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
contract_address = 0x96a65609a7b84e8842732deb08f56c3e21ac6f8a

IRs:
contract_address(address) := 860058034268601496487720091517100350015881899914(uint256)"];
}
// Function: 36495.sol-CentraSale-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.send(this.balance)

IRs:
REF_8(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_20 = SEND dest:owner value:REF_8"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, CentraSale.onlyOwner()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 36495.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_113(uint256) = a + b
c(uint256) := TMP_113(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(c >= a)

IRs:
TMP_114(bool) = c >= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_114)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36495.sol-SafeMath-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_120 = UnaryType.BANG assertion 
CONDITION TMP_120"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 36495.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_109(uint256) = a / b
c(uint256) := TMP_109(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36495.sol-SafeMath-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_118(bool) = a >= b
CONDITION TMP_118"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 36495.sol-SafeMath-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_116(bool) = a >= b
CONDITION TMP_116"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 36495.sol-SafeMath-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_119(bool) = a < b
CONDITION TMP_119"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 36495.sol-SafeMath-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_117(bool) = a < b
CONDITION TMP_117"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 36495.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_103(uint256) = a * b
c(uint256) := TMP_103(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(a == 0 || c / a == b)

IRs:
TMP_104(bool) = a == 0
TMP_105(uint256) = c / a
TMP_106(bool) = TMP_105 == b
TMP_107(bool) = TMP_104 || TMP_106
INTERNAL_CALL, SafeMath.assert(bool)(TMP_107)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36495.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b <= a)

IRs:
TMP_110(bool) = b <= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_110)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_112(uint256) = a - b
RETURN TMP_112"];
}
}
