digraph G {
// Function: 36732.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 36732.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 36732.sol-EnjinBuyer-activate_kill_switch(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == developer || sha3()(password) == password_hash)

IRs:
TMP_4(bool) = msg.sender == developer
TMP_5(bytes32) = SOLIDITY_CALL sha3()(password)
TMP_6(bool) = TMP_5 == password_hash
TMP_7(bool) = TMP_4 || TMP_6
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
claimed_bounty = buy_bounty

IRs:
claimed_bounty(uint256) := buy_bounty(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buy_bounty = 0

IRs:
buy_bounty(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
kill_switch = true

IRs:
kill_switch(bool) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
msg.sender.transfer(claimed_bounty)

IRs:
Transfer dest:msg.sender value:claimed_bounty"];
}
// Function: 36732.sol-EnjinBuyer-add_to_buy_bounty()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == developer)

IRs:
TMP_30(bool) = msg.sender == developer
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buy_bounty += msg.value

IRs:
buy_bounty(uint256) = buy_bounty + msg.value"];
}
// Function: 36732.sol-EnjinBuyer-add_to_withdraw_bounty()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == developer)

IRs:
TMP_32(bool) = msg.sender == developer
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
withdraw_bounty += msg.value

IRs:
withdraw_bounty(uint256) = withdraw_bounty + msg.value"];
}
// Function: 36732.sol-EnjinBuyer-claim_bounty()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
this.balance < eth_minimum

IRs:
REF_11(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_34(bool) = REF_11 < eth_minimum
CONDITION TMP_34"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
bought_tokens

IRs:
CONDITION bought_tokens"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
now < earliest_buy_time

IRs:
TMP_35(bool) = now < earliest_buy_time
CONDITION TMP_35"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
kill_switch

IRs:
CONDITION kill_switch"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool)(sale != 0x0)

IRs:
TMP_36(bool) = sale != 0
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
bought_tokens = true

IRs:
bought_tokens(bool) := True(bool)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
claimed_bounty = buy_bounty

IRs:
claimed_bounty(uint256) := buy_bounty(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
buy_bounty = 0

IRs:
buy_bounty(uint256) := 0(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
contract_eth_value = this.balance - (claimed_bounty + withdraw_bounty)

IRs:
REF_12(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_38(uint256) = claimed_bounty + withdraw_bounty
TMP_39([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fd48df50760>]) = REF_12 - TMP_38
contract_eth_value(uint256) := TMP_39([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fd48df50760>])"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
require(bool)(sale.call.value(contract_eth_value)())

IRs:
TMP_41(bool) = LOW_LEVEL_CALL, dest:sale, function:call, arguments:[] value:contract_eth_value 
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
msg.sender.transfer(claimed_bounty)

IRs:
Transfer dest:msg.sender value:claimed_bounty"];
}
// Function: 36732.sol-EnjinBuyer-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! kill_switch)

IRs:
TMP_44 = UnaryType.BANG kill_switch 
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! bought_tokens)

IRs:
TMP_46 = UnaryType.BANG bought_tokens 
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(this.balance < eth_cap)

IRs:
REF_16(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_48(bool) = REF_16 < eth_cap
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_17(uint256) -> balances[msg.sender]
REF_17(-> balances) = REF_17 + msg.value"];
}
// Function: 36732.sol-EnjinBuyer-set_sale_address(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == developer)

IRs:
TMP_0(bool) = msg.sender == developer
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(sale == 0x0)

IRs:
TMP_2(bool) = sale == 0
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
sale = _sale

IRs:
sale(address) := _sale(address)"];
}
// Function: 36732.sol-EnjinBuyer-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
eth_minimum = 3270000000000000000000

IRs:
eth_minimum(uint256) := 3270000000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
password_hash = 0x48e4977ec30c7c773515e0fbbfdce3febcd33d11a34651c956d4502def3eac09

IRs:
password_hash(bytes32) := 32970411809957330423771709585405428272990129551916227597784994925873417071625(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
earliest_buy_time = 1504188000

IRs:
earliest_buy_time(uint256) := 1504188000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
eth_cap = 5000000000000000000000

IRs:
eth_cap(uint256) := 5000000000000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
developer = 0xA4f8506E30991434204BC43975079aD93C8C5651

IRs:
developer(address) := 941812077702877953631382595669836634993468397137(address)"];
}
// Function: 36732.sol-EnjinBuyer-withdraw(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == user)

IRs:
TMP_10(bool) = msg.sender == user
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(bought_tokens || now > earliest_buy_time + 3600)

IRs:
TMP_12(uint256) = earliest_buy_time + 3600
TMP_13(bool) = now > TMP_12
TMP_14(bool) = bought_tokens || TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
balances[user] == 0

IRs:
REF_1(uint256) -> balances[user]
TMP_16(bool) = REF_1 == 0
CONDITION TMP_16"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
! bought_tokens

IRs:
TMP_17 = UnaryType.BANG bought_tokens 
CONDITION TMP_17"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
eth_to_withdraw = balances[user]

IRs:
REF_2(uint256) -> balances[user]
eth_to_withdraw(uint256) := REF_2(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[user] = 0

IRs:
REF_3(uint256) -> balances[user]
REF_3(uint256) (->balances) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
user.transfer(eth_to_withdraw)

IRs:
Transfer dest:user value:eth_to_withdraw"];
9->17;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_19 = CONVERT _token to ERC20
token(ERC20) := TMP_19(ERC20)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
contract_token_balance = token.balanceOf(address(this))

IRs:
TMP_20 = CONVERT this to address
TMP_21(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20), function:balanceOf, arguments:['TMP_20']  
contract_token_balance(uint256) := TMP_21(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(contract_token_balance != 0)

IRs:
TMP_22(bool) = contract_token_balance != 0
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
tokens_to_withdraw = (balances[user] * contract_token_balance) / contract_eth_value

IRs:
REF_6(uint256) -> balances[user]
TMP_24(uint256) = REF_6 * contract_token_balance
TMP_25(uint256) = TMP_24 / contract_eth_value
tokens_to_withdraw(uint256) := TMP_25(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
contract_eth_value -= balances[user]

IRs:
REF_7(uint256) -> balances[user]
contract_eth_value(uint256) = contract_eth_value - REF_7"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
balances[user] = 0

IRs:
REF_8(uint256) -> balances[user]
REF_8(uint256) (->balances) := 0(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
require(bool)(token.transfer(user,tokens_to_withdraw))

IRs:
TMP_26(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['user', 'tokens_to_withdraw']  
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
claimed_bounty = withdraw_bounty / 100

IRs:
TMP_28(uint256) = withdraw_bounty / 100
claimed_bounty(uint256) := TMP_28(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
withdraw_bounty -= claimed_bounty

IRs:
withdraw_bounty(uint256) = withdraw_bounty - claimed_bounty"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
msg.sender.transfer(claimed_bounty)

IRs:
Transfer dest:msg.sender value:claimed_bounty"];
}
}
