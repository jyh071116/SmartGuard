digraph G {
// Function: 36745.sol-ERC223Basic-allowance(address,address)
digraph{
}
// Function: 36745.sol-ERC223Basic-approve(address,uint256)
digraph{
}
// Function: 36745.sol-ERC223Basic-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_19(uint256) -> balances[_owner]
RETURN REF_19"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 36745.sol-ERC223Basic-transfer(address,uint256)
digraph{
}
// Function: 36745.sol-ERC223Basic-transfer(address,uint256,bytes)
digraph{
}
// Function: 36745.sol-ERC223Basic-transferFrom(address,address,uint256)
digraph{
}
// Function: 36745.sol-ERC223BasicToken-allowance(address,address)
digraph{
}
// Function: 36745.sol-ERC223BasicToken-approve(address,uint256)
digraph{
}
// Function: 36745.sol-ERC223BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_50(uint256) -> balances[_owner]
RETURN REF_50"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 36745.sol-ERC223BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(value)

IRs:
REF_43(uint256) -> balances[msg.sender]
REF_44(uint256) -> balances[msg.sender]
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_44', 'value'] 
REF_43(uint256) (->balances) := TMP_42(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[to] = balances[to].add(value)

IRs:
REF_46(uint256) -> balances[to]
REF_47(uint256) -> balances[to]
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_47', 'value'] 
REF_46(uint256) (->balances) := TMP_43(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
codeLength > 0

IRs:
TMP_44(bool) = codeLength > 0
CONDITION TMP_44"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
receiver = ERC223ReceivingContract(to)

IRs:
TMP_45 = CONVERT to to ERC223ReceivingContract
receiver(ERC223ReceivingContract) := TMP_45(ERC223ReceivingContract)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
receiver.tokenFallback(msg.sender,value,empty)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ERC223ReceivingContract), function:tokenFallback, arguments:['msg.sender', 'value', 'empty']  "];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Transfer(msg.sender,to,value,empty)

IRs:
Emit Transfer(msg.sender,to,value,empty)"];
}
// Function: 36745.sol-ERC223BasicToken-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(value)

IRs:
REF_36(uint256) -> balances[msg.sender]
REF_37(uint256) -> balances[msg.sender]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_37', 'value'] 
REF_36(uint256) (->balances) := TMP_36(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[to] = balances[to].add(value)

IRs:
REF_39(uint256) -> balances[to]
REF_40(uint256) -> balances[to]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_40', 'value'] 
REF_39(uint256) (->balances) := TMP_37(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
codeLength > 0

IRs:
TMP_38(bool) = codeLength > 0
CONDITION TMP_38"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
receiver = ERC223ReceivingContract(to)

IRs:
TMP_39 = CONVERT to to ERC223ReceivingContract
receiver(ERC223ReceivingContract) := TMP_39(ERC223ReceivingContract)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
receiver.tokenFallback(msg.sender,value,data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ERC223ReceivingContract), function:tokenFallback, arguments:['msg.sender', 'value', 'data']  "];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(msg.sender,to,value,data)

IRs:
Emit Transfer(msg.sender,to,value,data)"];
}
// Function: 36745.sol-ERC223BasicToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 36745.sol-ERC223ReceivingContract-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 36745.sol-HedgeminerToken-HumanERC223Token(uint256,string,uint8,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = _initialAmount

IRs:
REF_82(uint256) -> balances[msg.sender]
REF_82(uint256) (->balances) := _initialAmount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = _initialAmount

IRs:
totalSupply(uint256) := _initialAmount(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = _decimalUnits

IRs:
decimals(uint8) := _decimalUnits(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)"];
}
// Function: 36745.sol-HedgeminerToken-allowance(address,address)
digraph{
}
// Function: 36745.sol-HedgeminerToken-approve(address,uint256)
digraph{
}
// Function: 36745.sol-HedgeminerToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_83(mapping(address => uint256)) -> allowed[msg.sender]
REF_84(uint256) -> REF_83[_spender]
REF_84(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData))

IRs:
TMP_73(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_74 = CONVERT TMP_73 to bytes32
TMP_75 = CONVERT TMP_74 to bytes4
TMP_76(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_75', 'msg.sender', '_value', 'this', '_extraData']  
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36745.sol-HedgeminerToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_108(uint256) -> balances[_owner]
RETURN REF_108"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 36745.sol-HedgeminerToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = H0.1

IRs:
version(string) := H0.1(string)"];
}
// Function: 36745.sol-HedgeminerToken-transfer(address,uint256)
digraph{
}
// Function: 36745.sol-HedgeminerToken-transfer(address,uint256,bytes)
digraph{
}
// Function: 36745.sol-HedgeminerToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 36745.sol-HumanERC223Token-HumanERC223Token(uint256,string,uint8,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = _initialAmount

IRs:
REF_78(uint256) -> balances[msg.sender]
REF_78(uint256) (->balances) := _initialAmount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = _initialAmount

IRs:
totalSupply(uint256) := _initialAmount(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = _decimalUnits

IRs:
decimals(uint8) := _decimalUnits(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)"];
}
// Function: 36745.sol-HumanERC223Token-allowance(address,address)
digraph{
}
// Function: 36745.sol-HumanERC223Token-approve(address,uint256)
digraph{
}
// Function: 36745.sol-HumanERC223Token-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_79(mapping(address => uint256)) -> allowed[msg.sender]
REF_80(uint256) -> REF_79[_spender]
REF_80(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData))

IRs:
TMP_67(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_68 = CONVERT TMP_67 to bytes32
TMP_69 = CONVERT TMP_68 to bytes4
TMP_70(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_69', 'msg.sender', '_value', 'this', '_extraData']  
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36745.sol-HumanERC223Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_73(uint256) -> balances[_owner]
RETURN REF_73"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 36745.sol-HumanERC223Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = H0.1

IRs:
version(string) := H0.1(string)"];
}
// Function: 36745.sol-HumanERC223Token-transfer(address,uint256)
digraph{
}
// Function: 36745.sol-HumanERC223Token-transfer(address,uint256,bytes)
digraph{
}
// Function: 36745.sol-HumanERC223Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 36745.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(c >= a)

IRs:
TMP_11(bool) = c >= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36745.sol-SafeMath-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(assertion)

IRs:
TMP_17(None) = SOLIDITY_CALL require(bool)(assertion)"];
}
// Function: 36745.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36745.sol-SafeMath-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_15(bool) = a >= b
CONDITION TMP_15"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 36745.sol-SafeMath-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_13(bool) = a >= b
CONDITION TMP_13"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 36745.sol-SafeMath-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_16(bool) = a < b
CONDITION TMP_16"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 36745.sol-SafeMath-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_14(bool) = a < b
CONDITION TMP_14"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 36745.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
INTERNAL_CALL, SafeMath.assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 36745.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b <= a)

IRs:
TMP_7(bool) = b <= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 36745.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_10(mapping(address => uint256)) -> allowed[_owner]
REF_11(uint256) -> REF_10[_spender]
RETURN REF_11"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 36745.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_8(mapping(address => uint256)) -> allowed[msg.sender]
REF_9(uint256) -> REF_8[_spender]
REF_9(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36745.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 36745.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[_from] >= _value && allowed[_from][msg.sender] >= _value)

IRs:
REF_0(uint256) -> balances[_from]
TMP_18(bool) = REF_0 >= _value
REF_1(mapping(address => uint256)) -> allowed[_from]
REF_2(uint256) -> REF_1[msg.sender]
TMP_19(bool) = REF_2 >= _value
TMP_20(bool) = TMP_18 && TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_3(uint256) -> balances[_to]
REF_3(-> balances) = REF_3 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_4(uint256) -> balances[_from]
REF_4(-> balances) = REF_4 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_5(mapping(address => uint256)) -> allowed[_from]
REF_6(uint256) -> REF_5[msg.sender]
REF_6(-> allowed) = REF_6 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 36745.sol-Token-allowance(address,address)
digraph{
}
// Function: 36745.sol-Token-approve(address,uint256)
digraph{
}
// Function: 36745.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
