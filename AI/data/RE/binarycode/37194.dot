digraph G {
// Function: 37194.sol-DSAuth-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 37194.sol-DSAuth-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_11(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37194.sol-DSAuth-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_5 = CONVERT this to address
TMP_6(bool) = src == TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_7(bool) = src == owner
CONDITION TMP_7"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_8 = CONVERT 0 to DSAuthority
TMP_9(bool) = authority == TMP_8
CONDITION TMP_9"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_10(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_10"];
}
// Function: 37194.sol-DSAuth-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37194.sol-DSAuth-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37194.sol-DSAuthority-canCall(address,address,bytes4)
digraph{
}
// Function: 37194.sol-DSMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_14(uint256) = x + y
z(uint256) := TMP_14(uint256)
TMP_15(bool) = z >= x
TMP_16(None) = SOLIDITY_CALL assert(bool)(TMP_15)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = uint128(x)) == x)

IRs:
TMP_85 = CONVERT x to uint128
z(uint128) := TMP_85(uint128)
TMP_86(bool) = z == x
TMP_87(None) = SOLIDITY_CALL assert(bool)(TMP_86)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_26(uint256) = x / y
z(uint256) := TMP_26(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_29(uint128) = x + y
z(uint128) := TMP_29(uint128)
TMP_30(bool) = z >= x
TMP_31(None) = SOLIDITY_CALL assert(bool)(TMP_30)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_41(uint128) = x / y
z(uint128) := TMP_41(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_43(bool) = x >= y
CONDITION TMP_43"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_42(bool) = x <= y
CONDITION TMP_42"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_35(uint128) = x * y
z(uint128) := TMP_35(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_36(bool) = x == 0
TMP_37(uint128) = z / x
TMP_38(bool) = TMP_37 == y
TMP_39(bool) = TMP_36 || TMP_38
TMP_40(None) = SOLIDITY_CALL assert(bool)(TMP_39)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_32(uint128) = x - y
z(uint128) := TMP_32(uint128)
TMP_33(bool) = z <= x
TMP_34(None) = SOLIDITY_CALL assert(bool)(TMP_33)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_45(bool) = x >= y
CONDITION TMP_45"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_44(bool) = x <= y
CONDITION TMP_44"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_28(bool) = x >= y
CONDITION TMP_28"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_27(bool) = x <= y
CONDITION TMP_27"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_20(uint256) = x * y
z(uint256) := TMP_20(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_21(bool) = x == 0
TMP_22(uint256) = z / x
TMP_23(bool) = TMP_22 == y
TMP_24(bool) = TMP_21 || TMP_23
TMP_25(None) = SOLIDITY_CALL assert(bool)(TMP_24)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_62(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_62"];
}
// Function: 37194.sol-DSMath-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_70 = CONVERT x to uint256
TMP_71(uint256) = TMP_70 * RAY
TMP_72(uint128) = y / 2
TMP_73(uint256) = TMP_71 + TMP_72
TMP_74(uint256) = TMP_73 / y
TMP_75(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_74)
z(uint128) := TMP_75(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_84(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_84"];
}
// Function: 37194.sol-DSMath-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_83(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_83"];
}
// Function: 37194.sol-DSMath-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_64 = CONVERT x to uint256
TMP_65(uint256) = TMP_64 * y
TMP_66(uint128) = RAY / 2
TMP_67(uint256) = TMP_65 + TMP_66
TMP_68(uint256) = TMP_67 / RAY
TMP_69(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_68)
z(uint128) := TMP_69(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_76(bool) = n != 0
CONDITION TMP_76"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_77(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_77(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_78(uint64) = n % 2
TMP_79(bool) = TMP_78 != 0
CONDITION TMP_79"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_80(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_80(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_81(uint64) = n % 2
TMP_82(bool) = TMP_81 != 0
CONDITION TMP_82"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_63(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_63"];
}
// Function: 37194.sol-DSMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_88(uint256) = 10 ** 18
WAD(uint128) := TMP_88(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_89(uint256) = 10 ** 27
RAY(uint128) := TMP_89(uint256)"];
}
// Function: 37194.sol-DSMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_17(uint256) = x - y
z(uint256) := TMP_17(uint256)
TMP_18(bool) = z <= x
TMP_19(None) = SOLIDITY_CALL assert(bool)(TMP_18)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_46(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_46"];
}
// Function: 37194.sol-DSMath-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_54 = CONVERT x to uint256
TMP_55(uint256) = TMP_54 * WAD
TMP_56(uint128) = y / 2
TMP_57(uint256) = TMP_55 + TMP_56
TMP_58(uint256) = TMP_57 / y
TMP_59(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_58)
z(uint128) := TMP_59(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_61(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_61"];
}
// Function: 37194.sol-DSMath-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_60(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_60"];
}
// Function: 37194.sol-DSMath-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_48 = CONVERT x to uint256
TMP_49(uint256) = TMP_48 * y
TMP_50(uint128) = WAD / 2
TMP_51(uint256) = TMP_49 + TMP_50
TMP_52(uint256) = TMP_51 / WAD
TMP_53(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_52)
z(uint128) := TMP_53(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSMath-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_47(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_47"];
}
// Function: 37194.sol-DSNote-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 37194.sol-DSPrice-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 37194.sol-DSPrice-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_180(uint256) = x + y
z(uint256) := TMP_180(uint256)
TMP_181(bool) = z >= x
TMP_182(None) = SOLIDITY_CALL assert(bool)(TMP_181)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_280(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
TMP_281(None) = SOLIDITY_CALL assert(bool)(TMP_280)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37194.sol-DSPrice-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = uint128(x)) == x)

IRs:
TMP_251 = CONVERT x to uint128
z(uint128) := TMP_251(uint128)
TMP_252(bool) = z == x
TMP_253(None) = SOLIDITY_CALL assert(bool)(TMP_252)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_192(uint256) = x / y
z(uint256) := TMP_192(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_195(uint128) = x + y
z(uint128) := TMP_195(uint128)
TMP_196(bool) = z >= x
TMP_197(None) = SOLIDITY_CALL assert(bool)(TMP_196)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_207(uint128) = x / y
z(uint128) := TMP_207(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_209(bool) = x >= y
CONDITION TMP_209"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_208(bool) = x <= y
CONDITION TMP_208"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_201(uint128) = x * y
z(uint128) := TMP_201(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_202(bool) = x == 0
TMP_203(uint128) = z / x
TMP_204(bool) = TMP_203 == y
TMP_205(bool) = TMP_202 || TMP_204
TMP_206(None) = SOLIDITY_CALL assert(bool)(TMP_205)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_198(uint128) = x - y
z(uint128) := TMP_198(uint128)
TMP_199(bool) = z <= x
TMP_200(None) = SOLIDITY_CALL assert(bool)(TMP_199)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_211(bool) = x >= y
CONDITION TMP_211"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_210(bool) = x <= y
CONDITION TMP_210"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_259 = CONVERT this to address
TMP_260(bool) = src == TMP_259
CONDITION TMP_260"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_261(bool) = src == owner
CONDITION TMP_261"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_262 = CONVERT 0 to DSAuthority
TMP_263(bool) = authority == TMP_262
CONDITION TMP_263"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_264(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_264"];
}
// Function: 37194.sol-DSPrice-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_194(bool) = x >= y
CONDITION TMP_194"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_193(bool) = x <= y
CONDITION TMP_193"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_186(uint256) = x * y
z(uint256) := TMP_186(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_187(bool) = x == 0
TMP_188(uint256) = z / x
TMP_189(bool) = TMP_188 == y
TMP_190(bool) = TMP_187 || TMP_189
TMP_191(None) = SOLIDITY_CALL assert(bool)(TMP_190)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 37194.sol-DSPrice-peek()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(bytes32(val),now < zzz)

IRs:
TMP_265 = CONVERT val to bytes32
TMP_266(bool) = now < zzz
RETURN TMP_265,TMP_266"];
}
// Function: 37194.sol-DSPrice-post(uint128,uint32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
val = val_

IRs:
val(uint128) := val_(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
zzz = zzz_

IRs:
zzz(uint32) := zzz_(uint32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
med_.call(bytes4(sha3()(poke())))

IRs:
TMP_270(bytes32) = SOLIDITY_CALL sha3()(poke())
TMP_271 = CONVERT TMP_270 to bytes4
TMP_272(bool) = LOW_LEVEL_CALL, dest:med_, function:call, arguments:['TMP_271']  "];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
5->1;
}
// Function: 37194.sol-DSPrice-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_228(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_228"];
}
// Function: 37194.sol-DSPrice-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_236 = CONVERT x to uint256
TMP_237(uint256) = TMP_236 * RAY
TMP_238(uint128) = y / 2
TMP_239(uint256) = TMP_237 + TMP_238
TMP_240(uint256) = TMP_239 / y
TMP_241(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_240)
z(uint128) := TMP_241(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-read()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(now < zzz)

IRs:
TMP_267(bool) = now < zzz
TMP_268(None) = SOLIDITY_CALL assert(bool)(TMP_267)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
bytes32(val)

IRs:
TMP_269 = CONVERT val to bytes32
RETURN TMP_269"];
}
// Function: 37194.sol-DSPrice-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_250(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_250"];
}
// Function: 37194.sol-DSPrice-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_249(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_249"];
}
// Function: 37194.sol-DSPrice-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_230 = CONVERT x to uint256
TMP_231(uint256) = TMP_230 * y
TMP_232(uint128) = RAY / 2
TMP_233(uint256) = TMP_231 + TMP_232
TMP_234(uint256) = TMP_233 / RAY
TMP_235(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_234)
z(uint128) := TMP_235(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_242(bool) = n != 0
CONDITION TMP_242"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_243(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_243(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_244(uint64) = n % 2
TMP_245(bool) = TMP_244 != 0
CONDITION TMP_245"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_246(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_246(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_247(uint64) = n % 2
TMP_248(bool) = TMP_247 != 0
CONDITION TMP_248"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_229(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_229"];
}
// Function: 37194.sol-DSPrice-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37194.sol-DSPrice-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37194.sol-DSPrice-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_277(uint256) = 10 ** 18
WAD(uint128) := TMP_277(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_278(uint256) = 10 ** 27
RAY(uint128) := TMP_278(uint256)"];
}
// Function: 37194.sol-DSPrice-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_183(uint256) = x - y
z(uint256) := TMP_183(uint256)
TMP_184(bool) = z <= x
TMP_185(None) = SOLIDITY_CALL assert(bool)(TMP_184)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-void()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
zzz = 0

IRs:
zzz(uint32) := 0(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37194.sol-DSPrice-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_212(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_212"];
}
// Function: 37194.sol-DSPrice-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_220 = CONVERT x to uint256
TMP_221(uint256) = TMP_220 * WAD
TMP_222(uint128) = y / 2
TMP_223(uint256) = TMP_221 + TMP_222
TMP_224(uint256) = TMP_223 / y
TMP_225(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_224)
z(uint128) := TMP_225(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_227(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_227"];
}
// Function: 37194.sol-DSPrice-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_226(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_226"];
}
// Function: 37194.sol-DSPrice-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_214 = CONVERT x to uint256
TMP_215(uint256) = TMP_214 * y
TMP_216(uint128) = WAD / 2
TMP_217(uint256) = TMP_215 + TMP_216
TMP_218(uint256) = TMP_217 / WAD
TMP_219(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_218)
z(uint128) := TMP_219(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSPrice-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_213(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_213"];
}
// Function: 37194.sol-DSThing-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 37194.sol-DSThing-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_90(uint256) = x + y
z(uint256) := TMP_90(uint256)
TMP_91(bool) = z >= x
TMP_92(None) = SOLIDITY_CALL assert(bool)(TMP_91)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_178(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
TMP_179(None) = SOLIDITY_CALL assert(bool)(TMP_178)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37194.sol-DSThing-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = uint128(x)) == x)

IRs:
TMP_161 = CONVERT x to uint128
z(uint128) := TMP_161(uint128)
TMP_162(bool) = z == x
TMP_163(None) = SOLIDITY_CALL assert(bool)(TMP_162)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_102(uint256) = x / y
z(uint256) := TMP_102(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_105(uint128) = x + y
z(uint128) := TMP_105(uint128)
TMP_106(bool) = z >= x
TMP_107(None) = SOLIDITY_CALL assert(bool)(TMP_106)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_117(uint128) = x / y
z(uint128) := TMP_117(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_119(bool) = x >= y
CONDITION TMP_119"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_118(bool) = x <= y
CONDITION TMP_118"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_111(uint128) = x * y
z(uint128) := TMP_111(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_112(bool) = x == 0
TMP_113(uint128) = z / x
TMP_114(bool) = TMP_113 == y
TMP_115(bool) = TMP_112 || TMP_114
TMP_116(None) = SOLIDITY_CALL assert(bool)(TMP_115)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_108(uint128) = x - y
z(uint128) := TMP_108(uint128)
TMP_109(bool) = z <= x
TMP_110(None) = SOLIDITY_CALL assert(bool)(TMP_109)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_121(bool) = x >= y
CONDITION TMP_121"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_120(bool) = x <= y
CONDITION TMP_120"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_169 = CONVERT this to address
TMP_170(bool) = src == TMP_169
CONDITION TMP_170"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_171(bool) = src == owner
CONDITION TMP_171"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_172 = CONVERT 0 to DSAuthority
TMP_173(bool) = authority == TMP_172
CONDITION TMP_173"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_174(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_174"];
}
// Function: 37194.sol-DSThing-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_104(bool) = x >= y
CONDITION TMP_104"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_103(bool) = x <= y
CONDITION TMP_103"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_96(uint256) = x * y
z(uint256) := TMP_96(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_97(bool) = x == 0
TMP_98(uint256) = z / x
TMP_99(bool) = TMP_98 == y
TMP_100(bool) = TMP_97 || TMP_99
TMP_101(None) = SOLIDITY_CALL assert(bool)(TMP_100)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 37194.sol-DSThing-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_138(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_138"];
}
// Function: 37194.sol-DSThing-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_146 = CONVERT x to uint256
TMP_147(uint256) = TMP_146 * RAY
TMP_148(uint128) = y / 2
TMP_149(uint256) = TMP_147 + TMP_148
TMP_150(uint256) = TMP_149 / y
TMP_151(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_150)
z(uint128) := TMP_151(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_160(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_160"];
}
// Function: 37194.sol-DSThing-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_159(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_159"];
}
// Function: 37194.sol-DSThing-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_140 = CONVERT x to uint256
TMP_141(uint256) = TMP_140 * y
TMP_142(uint128) = RAY / 2
TMP_143(uint256) = TMP_141 + TMP_142
TMP_144(uint256) = TMP_143 / RAY
TMP_145(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_144)
z(uint128) := TMP_145(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_152(bool) = n != 0
CONDITION TMP_152"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_153(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_153(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_154(uint64) = n % 2
TMP_155(bool) = TMP_154 != 0
CONDITION TMP_155"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_156(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_156(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_157(uint64) = n % 2
TMP_158(bool) = TMP_157 != 0
CONDITION TMP_158"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_139(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_139"];
}
// Function: 37194.sol-DSThing-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37194.sol-DSThing-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37194.sol-DSThing-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_175(uint256) = 10 ** 18
WAD(uint128) := TMP_175(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_176(uint256) = 10 ** 27
RAY(uint128) := TMP_176(uint256)"];
}
// Function: 37194.sol-DSThing-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_93(uint256) = x - y
z(uint256) := TMP_93(uint256)
TMP_94(bool) = z <= x
TMP_95(None) = SOLIDITY_CALL assert(bool)(TMP_94)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_122(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_122"];
}
// Function: 37194.sol-DSThing-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_130 = CONVERT x to uint256
TMP_131(uint256) = TMP_130 * WAD
TMP_132(uint128) = y / 2
TMP_133(uint256) = TMP_131 + TMP_132
TMP_134(uint256) = TMP_133 / y
TMP_135(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_134)
z(uint128) := TMP_135(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_137(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_137"];
}
// Function: 37194.sol-DSThing-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_136(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_136"];
}
// Function: 37194.sol-DSThing-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_124 = CONVERT x to uint256
TMP_125(uint256) = TMP_124 * y
TMP_126(uint128) = WAD / 2
TMP_127(uint256) = TMP_125 + TMP_126
TMP_128(uint256) = TMP_127 / WAD
TMP_129(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_128)
z(uint128) := TMP_129(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37194.sol-DSThing-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_123(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_123"];
}
}
