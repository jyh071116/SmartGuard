digraph G {
// Function: 37283.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 37283.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 37283.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 37283.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 37283.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 37283.sol-SafeMath-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_24(bool) = a >= b
CONDITION TMP_24"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 37283.sol-SafeMath-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_22(bool) = a >= b
CONDITION TMP_22"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 37283.sol-SafeMath-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_25(bool) = a < b
CONDITION TMP_25"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 37283.sol-SafeMath-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_23(bool) = a < b
CONDITION TMP_23"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 37283.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_17(uint256) = a + b
c(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_18(bool) = c >= a
TMP_19(bool) = c >= b
TMP_20(bool) = TMP_18 && TMP_19
TMP_21(None) = SOLIDITY_CALL assert(bool)(TMP_20)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 37283.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_6(bool) = b > 0
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_8(uint256) = a / b
c(uint256) := TMP_8(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_9(uint256) = b * c
TMP_10(uint256) = a % b
TMP_11(uint256) = TMP_9 + TMP_10
TMP_12(bool) = a == TMP_11
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 37283.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 37283.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_14(bool) = b <= a
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_16(uint256) = a - b
RETURN TMP_16"];
}
// Function: 37283.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_17(mapping(address => uint256)) -> allowed[_owner]
REF_18(uint256) -> REF_17[_spender]
RETURN REF_18"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 37283.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_value != 0) && (allowed[msg.sender][_spender] != 0)

IRs:
TMP_61(bool) = _value != 0
REF_13(mapping(address => uint256)) -> allowed[msg.sender]
REF_14(uint256) -> REF_13[_spender]
TMP_62(bool) = REF_14 != 0
TMP_63(bool) = TMP_61 && TMP_62
CONDITION TMP_63"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_64(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_15(mapping(address => uint256)) -> allowed[msg.sender]
REF_16(uint256) -> REF_15[_spender]
REF_16(uint256) (->allowed) := _value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 37283.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_12(uint256) -> balances[_owner]
RETURN REF_12"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 37283.sol-StandardToken-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_50(bool) = a >= b
CONDITION TMP_50"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 37283.sol-StandardToken-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_48(bool) = a >= b
CONDITION TMP_48"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 37283.sol-StandardToken-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_51(bool) = a < b
CONDITION TMP_51"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 37283.sol-StandardToken-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_49(bool) = a < b
CONDITION TMP_49"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 37283.sol-StandardToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.data.length != size + 4

IRs:
REF_19 -> LENGTH msg.data
TMP_66(uint256) = size + 4
TMP_67(bool) = REF_19 != TMP_66
CONDITION TMP_67"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_68(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 37283.sol-StandardToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_43(uint256) = a + b
c(uint256) := TMP_43(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_44(bool) = c >= a
TMP_45(bool) = c >= b
TMP_46(bool) = TMP_44 && TMP_45
TMP_47(None) = SOLIDITY_CALL assert(bool)(TMP_46)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 37283.sol-StandardToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_32(bool) = b > 0
TMP_33(None) = SOLIDITY_CALL assert(bool)(TMP_32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_34(uint256) = a / b
c(uint256) := TMP_34(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_35(uint256) = b * c
TMP_36(uint256) = a % b
TMP_37(uint256) = TMP_35 + TMP_36
TMP_38(bool) = a == TMP_37
TMP_39(None) = SOLIDITY_CALL assert(bool)(TMP_38)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 37283.sol-StandardToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_26(uint256) = a * b
c(uint256) := TMP_26(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_27(bool) = a == 0
TMP_28(uint256) = c / a
TMP_29(bool) = TMP_28 == b
TMP_30(bool) = TMP_27 || TMP_29
TMP_31(None) = SOLIDITY_CALL assert(bool)(TMP_30)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 37283.sol-StandardToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_40(bool) = b <= a
TMP_41(None) = SOLIDITY_CALL assert(bool)(TMP_40)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_42(uint256) = a - b
RETURN TMP_42"];
}
// Function: 37283.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_value)

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_1(uint256) -> balances[msg.sender]
TMP_52(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_1,_value)
REF_0(uint256) (->balances) := TMP_52(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_2(uint256) -> balances[_to]
REF_3(uint256) -> balances[_to]
TMP_53(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_3,_value)
REF_2(uint256) (->balances) := TMP_53(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_55(uint256) = 2 * 32
MODIFIER_CALL, StandardToken.onlyPayloadSize(uint256)(TMP_55)"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 37283.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
_allowance(uint256) := REF_5(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_6(uint256) -> balances[_to]
REF_7(uint256) -> balances[_to]
TMP_57(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_7,_value)
REF_6(uint256) (->balances) := TMP_57(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = safeSub(balances[_from],_value)

IRs:
REF_8(uint256) -> balances[_from]
REF_9(uint256) -> balances[_from]
TMP_58(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_9,_value)
REF_8(uint256) (->balances) := TMP_58(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] = safeSub(_allowance,_value)

IRs:
REF_10(mapping(address => uint256)) -> allowed[_from]
REF_11(uint256) -> REF_10[msg.sender]
TMP_59(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(_allowance,_value)
REF_11(uint256) (->allowed) := TMP_59(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 37283.sol-Test20-Test20()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_39(uint256) -> balances[msg.sender]
REF_39(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 37283.sol-Test20-allowance(address,address)
digraph{
}
// Function: 37283.sol-Test20-approve(address,uint256)
digraph{
}
// Function: 37283.sol-Test20-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_40(mapping(address => uint256)) -> allowed[msg.sender]
REF_41(uint256) -> REF_40[_spender]
REF_41(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

IRs:
TMP_110(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_111 = CONVERT TMP_110 to bytes32
TMP_112 = CONVERT TMP_111 to bytes4
TMP_113(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_112', 'msg.sender', '_value', 'this', '_extraData']  
TMP_114 = UnaryType.BANG TMP_113 
CONDITION TMP_114"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_115(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 37283.sol-Test20-balanceOf(address)
digraph{
}
// Function: 37283.sol-Test20-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_107(bool) = a >= b
CONDITION TMP_107"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 37283.sol-Test20-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_105(bool) = a >= b
CONDITION TMP_105"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 37283.sol-Test20-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_108(bool) = a < b
CONDITION TMP_108"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 37283.sol-Test20-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_106(bool) = a < b
CONDITION TMP_106"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 37283.sol-Test20-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.data.length != size + 4

IRs:
REF_43 -> LENGTH msg.data
TMP_116(uint256) = size + 4
TMP_117(bool) = REF_43 != TMP_116
CONDITION TMP_117"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_118(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 37283.sol-Test20-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_100(uint256) = a + b
c(uint256) := TMP_100(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_101(bool) = c >= a
TMP_102(bool) = c >= b
TMP_103(bool) = TMP_101 && TMP_102
TMP_104(None) = SOLIDITY_CALL assert(bool)(TMP_103)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 37283.sol-Test20-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_89(bool) = b > 0
TMP_90(None) = SOLIDITY_CALL assert(bool)(TMP_89)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_91(uint256) = a / b
c(uint256) := TMP_91(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_92(uint256) = b * c
TMP_93(uint256) = a % b
TMP_94(uint256) = TMP_92 + TMP_93
TMP_95(bool) = a == TMP_94
TMP_96(None) = SOLIDITY_CALL assert(bool)(TMP_95)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 37283.sol-Test20-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_83(uint256) = a * b
c(uint256) := TMP_83(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_84(bool) = a == 0
TMP_85(uint256) = c / a
TMP_86(bool) = TMP_85 == b
TMP_87(bool) = TMP_84 || TMP_86
TMP_88(None) = SOLIDITY_CALL assert(bool)(TMP_87)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 37283.sol-Test20-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_97(bool) = b <= a
TMP_98(None) = SOLIDITY_CALL assert(bool)(TMP_97)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_99(uint256) = a - b
RETURN TMP_99"];
}
// Function: 37283.sol-Test20-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Test20

IRs:
name(string) := Test20(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = TST

IRs:
symbol(string) := TST(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
}
// Function: 37283.sol-Test20-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 10000

IRs:
totalSupply(uint256) := 10000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
version = 1.0

IRs:
version(string) := 1.0(string)"];
}
// Function: 37283.sol-Test20-transfer(address,uint256)
digraph{
}
// Function: 37283.sol-Test20-transferFrom(address,address,uint256)
digraph{
}
}
