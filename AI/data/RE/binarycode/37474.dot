digraph G {
// Function: 37474.sol-Token-allowance(address,address)
digraph{
}
// Function: 37474.sol-Token-approve(address,uint256)
digraph{
}
// Function: 37474.sol-Token-balanceOf(address)
digraph{
}
// Function: 37474.sol-Token-totalSupply()
digraph{
}
// Function: 37474.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 37474.sol-Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 37474.sol-TradersWallet-EtherDeltaApproveToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_31(bool) = msg.sender == owner
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
token = Token(tokenAddress)

IRs:
TMP_33 = CONVERT tokenAddress to Token
token(Token) := TMP_33(Token)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token.approve(ethDeltaDepositAddress,amount)

IRs:
TMP_34(bool) = HIGH_LEVEL_CALL, dest:token(Token), function:approve, arguments:['ethDeltaDepositAddress', 'amount']  "];
}
// Function: 37474.sol-TradersWallet-EtherDeltaDeposit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_35(bool) = msg.sender == owner
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ethDelta.deposit.value(amount)()

IRs:
HIGH_LEVEL_CALL, dest:ethDelta(etherDelta), function:deposit, arguments:[] value:amount "];
}
// Function: 37474.sol-TradersWallet-EtherDeltaDepositToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_28(bool) = msg.sender == owner
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ethDelta.depositToken(tokenAddress,amount)

IRs:
HIGH_LEVEL_CALL, dest:ethDelta(etherDelta), function:depositToken, arguments:['tokenAddress', 'amount']  "];
}
// Function: 37474.sol-TradersWallet-EtherDeltaTokenBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ethDelta.balanceOf(tokenAddress,this)

IRs:
TMP_21(uint256) = HIGH_LEVEL_CALL, dest:ethDelta(etherDelta), function:balanceOf, arguments:['tokenAddress', 'this']  
RETURN TMP_21"];
}
// Function: 37474.sol-TradersWallet-EtherDeltaWithdraw(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_39(bool) = msg.sender == owner
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ethDelta.withdraw(amount)

IRs:
HIGH_LEVEL_CALL, dest:ethDelta(etherDelta), function:withdraw, arguments:['amount']  "];
}
// Function: 37474.sol-TradersWallet-EtherDeltaWithdrawToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_22(bool) = msg.sender == owner
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ethDelta.withdrawToken(tokenAddress,amount)

IRs:
HIGH_LEVEL_CALL, dest:ethDelta(etherDelta), function:withdrawToken, arguments:['tokenAddress', 'amount']  "];
}
// Function: 37474.sol-TradersWallet-TradersWallet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
version = ALPHA 0.1

IRs:
version(string) := ALPHA 0.1(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ethDeltaDepositAddress = 0x8d12A197cB00D4747a1fe03395095ce2A5CC6819

IRs:
ethDeltaDepositAddress(address) := 805383188830244934838275473784301907651370706969(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ethDelta = etherDelta(ethDeltaDepositAddress)

IRs:
TMP_0 = CONVERT ethDeltaDepositAddress to etherDelta
ethDelta(etherDelta) := TMP_0(etherDelta)"];
}
// Function: 37474.sol-TradersWallet-changeEtherDeltaDeposit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_25(bool) = msg.sender == owner
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ethDeltaDepositAddress = newEthDelta

IRs:
ethDeltaDepositAddress(address) := newEthDelta(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ethDelta = etherDelta(newEthDelta)

IRs:
TMP_27 = CONVERT newEthDelta to etherDelta
ethDelta(etherDelta) := TMP_27(etherDelta)"];
}
// Function: 37474.sol-TradersWallet-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_7(bool) = msg.sender == owner
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
}
// Function: 37474.sol-TradersWallet-execute(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_16(bool) = msg.sender == owner
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to.call.value(_value)(_data))

IRs:
TMP_19(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['_data'] value:_value 
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: RETURN 4

EXPRESSION:
_r

IRs:
RETURN _r"];
}
// Function: 37474.sol-TradersWallet-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 37474.sol-TradersWallet-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_42(bool) = msg.sender == owner
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
suicide(address)(msg.sender)

IRs:
TMP_44(None) = SOLIDITY_CALL suicide(address)(msg.sender)"];
}
// Function: 37474.sol-TradersWallet-sendEther(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
toAddress.transfer(amount)

IRs:
Transfer dest:toAddress value:amount"];
}
// Function: 37474.sol-TradersWallet-sendToken(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_12(bool) = msg.sender == owner
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
token = Token(tokenAddress)

IRs:
TMP_14 = CONVERT tokenAddress to Token
token(Token) := TMP_14(Token)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token.transfer(sendTo,amount)

IRs:
TMP_15(bool) = HIGH_LEVEL_CALL, dest:token(Token), function:transfer, arguments:['sendTo', 'amount']  "];
}
// Function: 37474.sol-TradersWallet-tokenBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
token = Token(tokenAddress)

IRs:
TMP_1 = CONVERT tokenAddress to Token
token(Token) := TMP_1(Token)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
token.balanceOf(this)

IRs:
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:token(Token), function:balanceOf, arguments:['this']  
RETURN TMP_2"];
}
// Function: 37474.sol-TradersWallet-transferFromToken(address,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_3(bool) = msg.sender == owner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
token = Token(tokenAddress)

IRs:
TMP_5 = CONVERT tokenAddress to Token
token(Token) := TMP_5(Token)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token.transferFrom(sendTo,sendFrom,amount)

IRs:
TMP_6(bool) = HIGH_LEVEL_CALL, dest:token(Token), function:transferFrom, arguments:['sendTo', 'sendFrom', 'amount']  "];
}
// Function: 37474.sol-etherDelta-amountFilled(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)
digraph{
}
// Function: 37474.sol-etherDelta-availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)
digraph{
}
// Function: 37474.sol-etherDelta-balanceOf(address,address)
digraph{
}
// Function: 37474.sol-etherDelta-cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)
digraph{
}
// Function: 37474.sol-etherDelta-deposit()
digraph{
}
// Function: 37474.sol-etherDelta-depositToken(address,uint256)
digraph{
}
// Function: 37474.sol-etherDelta-order(address,uint256,address,uint256,uint256,uint256)
digraph{
}
// Function: 37474.sol-etherDelta-trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)
digraph{
}
// Function: 37474.sol-etherDelta-tradeBalances(address,uint256,address,uint256,address,uint256)
digraph{
}
// Function: 37474.sol-etherDelta-withdraw(uint256)
digraph{
}
// Function: 37474.sol-etherDelta-withdrawToken(address,uint256)
digraph{
}
}
