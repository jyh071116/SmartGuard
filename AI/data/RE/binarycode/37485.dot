digraph G {
// Function: 37485.sol-DatCoin-DatCoin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[owner] = _totalSupply

IRs:
REF_0(uint256) -> balances[owner]
REF_0(uint256) (->balances) := _totalSupply(uint256)"];
}
// Function: 37485.sol-DatCoin-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_18(mapping(address => uint256)) -> allowed[_owner]
REF_19(uint256) -> REF_18[_spender]
RETURN REF_19"];
}
// Function: 37485.sol-DatCoin-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _amount

IRs:
REF_16(mapping(address => uint256)) -> allowed[msg.sender]
REF_17(uint256) -> REF_16[_spender]
REF_17(uint256) (->allowed) := _amount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_amount)

IRs:
Emit Approval(msg.sender,_spender,_amount)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 37485.sol-DatCoin-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_1(uint256) -> balances[_owner]
RETURN REF_1"];
}
// Function: 37485.sol-DatCoin-buy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
value = msg.value

IRs:
value(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
amount = value / _originalBuyPrice

IRs:
TMP_17(uint256) = value / _originalBuyPrice
amount(uint256) := TMP_17(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
balances[owner] <= _thresholdOne + amount

IRs:
REF_20(uint256) -> balances[owner]
TMP_18(uint256) = _thresholdOne + amount
TMP_19(bool) = REF_20 <= TMP_18
CONDITION TMP_19"];
3->4[label="True"];
3->15[label="False"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
temp = 0

IRs:
temp(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
balances[owner] > _thresholdOne

IRs:
REF_21(uint256) -> balances[owner]
TMP_20(bool) = REF_21 > _thresholdOne
CONDITION TMP_20"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
temp = balances[owner] - _thresholdOne

IRs:
REF_22(uint256) -> balances[owner]
TMP_21(uint256) = REF_22 - _thresholdOne
temp(uint256) := TMP_21(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
amount = temp + (amount - temp) * 10 / 13

IRs:
TMP_22(uint256) = amount - temp
TMP_23(uint256) = TMP_22 * 10
TMP_24(uint256) = TMP_23 / 13
TMP_25(uint256) = temp + TMP_24
amount(uint256) := TMP_25(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
balances[owner] < amount

IRs:
REF_23(uint256) -> balances[owner]
TMP_26(bool) = REF_23 < amount
CONDITION TMP_26"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
temp = (amount - balances[owner]) * (_originalBuyPrice * 13 / 10)

IRs:
REF_24(uint256) -> balances[owner]
TMP_27(uint256) = amount - REF_24
TMP_28(uint256) = _originalBuyPrice * 13
TMP_29(uint256) = TMP_28 / 10
TMP_30(uint256) = TMP_27 * TMP_29
temp(uint256) := TMP_30(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
msg.sender.transfer(temp)

IRs:
Transfer dest:msg.sender value:temp"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
amount = balances[owner]

IRs:
REF_26(uint256) -> balances[owner]
amount(uint256) := REF_26(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
value -= temp

IRs:
value(uint256) = value - temp"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
owner.transfer(value)

IRs:
Transfer dest:owner value:value"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
balances[msg.sender] += amount

IRs:
REF_28(uint256) -> balances[msg.sender]
REF_28(-> balances) = REF_28 + amount"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
balances[owner] -= amount

IRs:
REF_29(uint256) -> balances[owner]
REF_29(-> balances) = REF_29 - amount"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Transfer(owner,msg.sender,amount)

IRs:
Emit Transfer(owner,msg.sender,amount)"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
amount

IRs:
RETURN amount"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
thresholdTwo()

IRs:
MODIFIER_CALL, DatCoin.thresholdTwo()()"];
21->1;
22[label="Node Type: RETURN 22

EXPRESSION:
amount

IRs:
RETURN amount"];
}
// Function: 37485.sol-DatCoin-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_44(bool) = msg.sender != owner
CONDITION TMP_44"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_45(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 37485.sol-DatCoin-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 5

IRs:
decimals(uint8) := 5(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = DTC

IRs:
symbol(string) := DTC(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = DatCoin

IRs:
name(string) := DatCoin(string)"];
}
// Function: 37485.sol-DatCoin-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
_totalSupply = 10 ** 14

IRs:
TMP_37(uint256) = 10 ** 14
_totalSupply(uint256) := TMP_37(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
_originalBuyPrice = 10 ** 10

IRs:
TMP_38(uint256) = 10 ** 10
_originalBuyPrice(uint256) := TMP_38(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
_minimumBuyAmount = 10 ** 17

IRs:
TMP_39(uint256) = 10 ** 17
_minimumBuyAmount(uint256) := TMP_39(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
_thresholdOne = 9 * (10 ** 13)

IRs:
TMP_40(uint256) = 10 ** 13
TMP_41(uint256) = 9 * TMP_40
_thresholdOne(uint256) := TMP_41(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
_thresholdTwo = 85 * (10 ** 12)

IRs:
TMP_42(uint256) = 10 ** 12
TMP_43(uint256) = 85 * TMP_42
_thresholdTwo(uint256) := TMP_43(uint256)"];
}
// Function: 37485.sol-DatCoin-thresholdTwo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value < _minimumBuyAmount || balances[owner] <= _thresholdTwo

IRs:
TMP_46(bool) = msg.value < _minimumBuyAmount
REF_32(uint256) -> balances[owner]
TMP_47(bool) = REF_32 <= _thresholdTwo
TMP_48(bool) = TMP_46 || TMP_47
CONDITION TMP_48"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_49(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 37485.sol-DatCoin-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 37485.sol-DatCoin-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_2 >= _amount
TMP_1(bool) = _amount > 0
TMP_2(bool) = TMP_0 && TMP_1
REF_3(uint256) -> balances[_to]
TMP_3(uint256) = REF_3 + _amount
REF_4(uint256) -> balances[_to]
TMP_4(bool) = TMP_3 > REF_4
TMP_5(bool) = TMP_2 && TMP_4
CONDITION TMP_5"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _amount

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = REF_5 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _amount

IRs:
REF_6(uint256) -> balances[_to]
REF_6(-> balances) = REF_6 + _amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 37485.sol-DatCoin-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]

IRs:
REF_7(uint256) -> balances[_from]
TMP_7(bool) = REF_7 >= _amount
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
TMP_8(bool) = REF_9 >= _amount
TMP_9(bool) = TMP_7 && TMP_8
TMP_10(bool) = _amount > 0
TMP_11(bool) = TMP_9 && TMP_10
REF_10(uint256) -> balances[_to]
TMP_12(uint256) = REF_10 + _amount
REF_11(uint256) -> balances[_to]
TMP_13(bool) = TMP_12 > REF_11
TMP_14(bool) = TMP_11 && TMP_13
CONDITION TMP_14"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_from] -= _amount

IRs:
REF_12(uint256) -> balances[_from]
REF_12(-> balances) = REF_12 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[_from][msg.sender] -= _amount

IRs:
REF_13(mapping(address => uint256)) -> allowed[_from]
REF_14(uint256) -> REF_13[msg.sender]
REF_14(-> allowed) = REF_14 - _amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] += _amount

IRs:
REF_15(uint256) -> balances[_to]
REF_15(-> balances) = REF_15 + _amount"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_amount)

IRs:
Emit Transfer(_from,_to,_amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 37485.sol-DatCoin-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
owner.send(this.balance)

IRs:
REF_31(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_35 = SEND dest:owner value:REF_31
RETURN TMP_35"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DatCoin.onlyOwner()()"];
2->1;
}
// Function: 37485.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 37485.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 37485.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 37485.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 37485.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 37485.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 37485.sol-MultiSigWallet-MultiSigWallet(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _owners.length

IRs:
REF_69 -> LENGTH _owners
TMP_106(bool) = i < REF_69
CONDITION TMP_106"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isOwner[_owners[i]] = true

IRs:
REF_70(address) -> _owners[i]
REF_71(bool) -> isOwner[REF_70]
REF_71(bool) (->isOwner) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_107(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
owners = _owners

IRs:
owners(address[]) := _owners(address[])"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
required = _required

IRs:
required(uint256) := _required(uint256)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
validRequired(_owners.length,_required)

IRs:
REF_72 -> LENGTH _owners
MODIFIER_CALL, MultiSigWallet.validRequired(uint256,uint256)(REF_72,_required)"];
9->3;
}
// Function: 37485.sol-MultiSigWallet-addConfirmation(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
confirmations[transactionHash][owner] = true

IRs:
REF_53(mapping(address => bool)) -> confirmations[transactionHash]
REF_54(bool) -> REF_53[owner]
REF_54(bool) (->confirmations) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Confirmation(owner,transactionHash)

IRs:
Emit Confirmation(owner,transactionHash)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
notConfirmed(transactionHash,owner)

IRs:
MODIFIER_CALL, MultiSigWallet.notConfirmed(bytes32,address)(transactionHash,owner)"];
3->1;
}
// Function: 37485.sol-MultiSigWallet-addOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isOwner[owner] = true

IRs:
REF_33(bool) -> isOwner[owner]
REF_33(bool) (->isOwner) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owners.push(owner)

IRs:
REF_35 -> LENGTH owners
TMP_51(uint256) := REF_35(uint256)
TMP_52(uint256) = TMP_51 + 1
REF_35(uint256) (->owners) := TMP_52(uint256)
REF_36(address) -> owners[TMP_51]
REF_36(address) (->owners) := owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerAddition(owner)

IRs:
Emit OwnerAddition(owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownerDoesNotExist(owner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerDoesNotExist(address)(owner)"];
5->1;
}
// Function: 37485.sol-MultiSigWallet-addTransaction(address,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transactionHash = sha3()(destination,value,data,nonce)

IRs:
TMP_69(bytes32) = SOLIDITY_CALL sha3()(destination,value,data,nonce)
transactionHash(bytes32) := TMP_69(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
transactions[transactionHash].destination == 0

IRs:
REF_47(MultiSigWallet.Transaction) -> transactions[transactionHash]
REF_48(address) -> REF_47.destination
TMP_70(bool) = REF_48 == 0
CONDITION TMP_70"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transactions[transactionHash] = Transaction(destination,value,data,nonce,false)

IRs:
REF_49(MultiSigWallet.Transaction) -> transactions[transactionHash]
TMP_71(MultiSigWallet.Transaction) = new Transaction(destination,value,data,nonce,False)
REF_49(MultiSigWallet.Transaction) (->transactions) := TMP_71(MultiSigWallet.Transaction)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
transactionList.push(transactionHash)

IRs:
REF_51 -> LENGTH transactionList
TMP_73(uint256) := REF_51(uint256)
TMP_74(uint256) = TMP_73 + 1
REF_51(uint256) (->transactionList) := TMP_74(uint256)
REF_52(bytes32) -> transactionList[TMP_73]
REF_52(bytes32) (->transactionList) := transactionHash(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Submission(transactionHash)

IRs:
Emit Submission(transactionHash)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
notNull(destination)

IRs:
MODIFIER_CALL, MultiSigWallet.notNull(address)(destination)"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
transactionHash

IRs:
RETURN transactionHash"];
}
// Function: 37485.sol-MultiSigWallet-confirmTransaction(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addConfirmation(transactionHash,msg.sender)

IRs:
INTERNAL_CALL, MultiSigWallet.addConfirmation(bytes32,address)(transactionHash,msg.sender)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
executeTransaction(transactionHash)

IRs:
INTERNAL_CALL, MultiSigWallet.executeTransaction(bytes32)(transactionHash)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
3->1;
}
// Function: 37485.sol-MultiSigWallet-confirmTransactionWithSignatures(bytes32,uint8[],bytes32[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < v.length

IRs:
REF_55 -> LENGTH v
TMP_88(bool) = i < REF_55
CONDITION TMP_88"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addConfirmation(transactionHash,ecrecover(bytes32,uint8,bytes32,bytes32)(transactionHash,v[i],rs[i],rs[i + v.length]))

IRs:
REF_56(uint8) -> v[i]
REF_57(bytes32) -> rs[i]
REF_58 -> LENGTH v
TMP_89(uint256) = i + REF_58
REF_59(bytes32) -> rs[TMP_89]
TMP_90(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(transactionHash,REF_56,REF_57,REF_59)
INTERNAL_CALL, MultiSigWallet.addConfirmation(bytes32,address)(transactionHash,TMP_90)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_92(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
executeTransaction(transactionHash)

IRs:
INTERNAL_CALL, MultiSigWallet.executeTransaction(bytes32)(transactionHash)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
signaturesFromOwners(transactionHash,v,rs)

IRs:
MODIFIER_CALL, MultiSigWallet.signaturesFromOwners(bytes32,uint8[],bytes32[])(transactionHash,v,rs)"];
8->3;
}
// Function: 37485.sol-MultiSigWallet-confirmationCount(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < owners.length

IRs:
REF_77 -> LENGTH owners
TMP_114(bool) = i < REF_77
CONDITION TMP_114"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
confirmations[transactionHash][owners[i]]

IRs:
REF_78(mapping(address => bool)) -> confirmations[transactionHash]
REF_79(address) -> owners[i]
REF_80(bool) -> REF_78[REF_79]
CONDITION REF_80"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_115(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 37485.sol-MultiSigWallet-confirmed(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! confirmations[transactionHash][owner]

IRs:
REF_102(mapping(address => bool)) -> confirmations[transactionHash]
REF_103(bool) -> REF_102[owner]
TMP_148 = UnaryType.BANG REF_103 
CONDITION TMP_148"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_149(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 37485.sol-MultiSigWallet-createCoin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
CoinCreation(new DatCoin())

IRs:
TMP_133(DatCoin) = new DatCoin() 
Emit CoinCreation(TMP_133)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
2->1;
}
// Function: 37485.sol-MultiSigWallet-executeTransaction(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
isConfirmed(transactionHash)

IRs:
TMP_95(bool) = INTERNAL_CALL, MultiSigWallet.isConfirmed(bytes32)(transactionHash)
CONDITION TMP_95"];
1->2[label="True"];
1->8[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
txn = transactions[transactionHash]

IRs:
REF_60(MultiSigWallet.Transaction) -> transactions[transactionHash]
txn(MultiSigWallet.Transaction) := REF_60(MultiSigWallet.Transaction)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
txn.executed = true

IRs:
REF_61(bool) -> txn.executed
REF_61(bool) (->txn) := True(bool)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! txn.destination.call.value(txn.value)(txn.data)

IRs:
REF_62(address) -> txn.destination
REF_65(uint256) -> txn.value
REF_66(bytes) -> txn.data
TMP_97(bool) = LOW_LEVEL_CALL, dest:REF_62, function:call, arguments:['REF_66'] value:REF_65 
TMP_98 = UnaryType.BANG TMP_97 
CONDITION TMP_98"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_99(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Execution(transactionHash)

IRs:
Emit Execution(transactionHash)"];
7->8;
8[label="Node Type: END_IF 8
"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
notExecuted(transactionHash)

IRs:
MODIFIER_CALL, MultiSigWallet.notExecuted(bytes32)(transactionHash)"];
9->1;
}
// Function: 37485.sol-MultiSigWallet-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value > 0

IRs:
TMP_109(bool) = msg.value > 0
CONDITION TMP_109"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Deposit(msg.sender,msg.value)

IRs:
Emit Deposit(msg.sender,msg.value)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 37485.sol-MultiSigWallet-filterTransactions(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_transactionListTemp = new bytes32[](transactionList.length)

IRs:
REF_81 -> LENGTH transactionList
TMP_117(bytes32[])  = new bytes32[](REF_81)
_transactionListTemp(bytes32[]) = ['TMP_117(bytes32[])']"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->12;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < transactionList.length

IRs:
REF_82 -> LENGTH transactionList
TMP_118(bool) = i < REF_82
CONDITION TMP_118"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
isPending && ! transactions[transactionList[i]].executed || ! isPending && transactions[transactionList[i]].executed

IRs:
REF_83(bytes32) -> transactionList[i]
REF_84(MultiSigWallet.Transaction) -> transactions[REF_83]
REF_85(bool) -> REF_84.executed
TMP_119 = UnaryType.BANG REF_85 
TMP_120(bool) = isPending && TMP_119
TMP_121 = UnaryType.BANG isPending 
REF_86(bytes32) -> transactionList[i]
REF_87(MultiSigWallet.Transaction) -> transactions[REF_86]
REF_88(bool) -> REF_87.executed
TMP_122(bool) = TMP_121 && REF_88
TMP_123(bool) = TMP_120 || TMP_122
CONDITION TMP_123"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_transactionListTemp[count] = transactionList[i]

IRs:
REF_89(bytes32) -> _transactionListTemp[count]
REF_90(bytes32) -> transactionList[i]
REF_89(bytes32) (->_transactionListTemp) := REF_90(bytes32)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_124(uint256) := i(uint256)
i(uint256) = i + 1"];
11->6;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_transactionList = new bytes32[](count)

IRs:
TMP_126(bytes32[])  = new bytes32[](count)
_transactionList(bytes32[]) = ['TMP_126(bytes32[])']"];
12->15;
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->21;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i < count

IRs:
TMP_127(bool) = i < count
CONDITION TMP_127"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: IF 17

EXPRESSION:
_transactionListTemp[i] > 0

IRs:
REF_91(bytes32) -> _transactionListTemp[i]
TMP_128(bool) = REF_91 > 0
CONDITION TMP_128"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_transactionList[i] = _transactionListTemp[i]

IRs:
REF_92(bytes32) -> _transactionList[i]
REF_93(bytes32) -> _transactionListTemp[i]
REF_92(bytes32) (->_transactionList) := REF_93(bytes32)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_129(uint256) := i(uint256)
i(uint256) = i + 1"];
20->16;
21[label="Node Type: RETURN 21

EXPRESSION:
_transactionList

IRs:
RETURN _transactionList"];
}
// Function: 37485.sol-MultiSigWallet-getExecutedTransactions()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
filterTransactions(false)

IRs:
TMP_131(bytes32[]) = INTERNAL_CALL, MultiSigWallet.filterTransactions(bool)(False)
RETURN TMP_131"];
}
// Function: 37485.sol-MultiSigWallet-getPendingTransactions()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
filterTransactions(true)

IRs:
TMP_130(bytes32[]) = INTERNAL_CALL, MultiSigWallet.filterTransactions(bool)(True)
RETURN TMP_130"];
}
// Function: 37485.sol-MultiSigWallet-isConfirmed(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < owners.length

IRs:
REF_73 -> LENGTH owners
TMP_111(bool) = i < REF_73
CONDITION TMP_111"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
confirmations[transactionHash][owners[i]]

IRs:
REF_74(mapping(address => bool)) -> confirmations[transactionHash]
REF_75(address) -> owners[i]
REF_76(bool) -> REF_74[REF_75]
CONDITION REF_76"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_112(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: IF 10

EXPRESSION:
count == required

IRs:
TMP_113(bool) = count == required
CONDITION TMP_113"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: END_IF 12
"];
}
// Function: 37485.sol-MultiSigWallet-notConfirmed(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
confirmations[transactionHash][owner]

IRs:
REF_104(mapping(address => bool)) -> confirmations[transactionHash]
REF_105(bool) -> REF_104[owner]
CONDITION REF_105"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_150(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 37485.sol-MultiSigWallet-notExecuted(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
transactions[transactionHash].executed

IRs:
REF_106(MultiSigWallet.Transaction) -> transactions[transactionHash]
REF_107(bool) -> REF_106.executed
CONDITION REF_107"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_151(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 37485.sol-MultiSigWallet-notNull(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
destination == 0

IRs:
TMP_152(bool) = destination == 0
CONDITION TMP_152"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_153(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 37485.sol-MultiSigWallet-onlyWallet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != address(this)

IRs:
TMP_136 = CONVERT this to address
TMP_137(bool) = msg.sender != TMP_136
CONDITION TMP_137"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_138(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 37485.sol-MultiSigWallet-ownerDoesNotExist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isOwner[owner]

IRs:
REF_100(bool) -> isOwner[owner]
CONDITION REF_100"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_145(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 37485.sol-MultiSigWallet-ownerExists(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isOwner[owner]

IRs:
REF_101(bool) -> isOwner[owner]
TMP_146 = UnaryType.BANG REF_101 
CONDITION TMP_146"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_147(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 37485.sol-MultiSigWallet-removeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isOwner[owner] = false

IRs:
REF_37(bool) -> isOwner[owner]
REF_37(bool) (->isOwner) := False(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->11;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < owners.length - 1

IRs:
REF_38 -> LENGTH owners
TMP_56(uint256) = REF_38 - 1
TMP_57(bool) = i < TMP_56
CONDITION TMP_57"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
owners[i] == owner

IRs:
REF_39(address) -> owners[i]
TMP_58(bool) = REF_39 == owner
CONDITION TMP_58"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
owners[i] = owners[owners.length - 1]

IRs:
REF_40(address) -> owners[i]
REF_41 -> LENGTH owners
TMP_59(uint256) = REF_41 - 1
REF_42(address) -> owners[TMP_59]
REF_40(address) (->owners) := REF_42(address)"];
7->8;
8[label="Node Type: BREAK 8
"];
8->3;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_60(uint256) := i(uint256)
i(uint256) = i + 1"];
10->5;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
owners.length -= 1

IRs:
REF_43 -> LENGTH owners
REF_43(-> owners) = REF_43 - 1"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
required > owners.length

IRs:
REF_44 -> LENGTH owners
TMP_61(bool) = required > REF_44
CONDITION TMP_61"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateRequired(owners.length)

IRs:
REF_45 -> LENGTH owners
INTERNAL_CALL, MultiSigWallet.updateRequired(uint256)(REF_45)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
OwnerRemoval(owner)

IRs:
Emit OwnerRemoval(owner)"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
ownerExists(owner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(owner)"];
17->1;
}
// Function: 37485.sol-MultiSigWallet-revokeConfirmation(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
confirmations[transactionHash][msg.sender] = false

IRs:
REF_67(mapping(address => bool)) -> confirmations[transactionHash]
REF_68(bool) -> REF_67[msg.sender]
REF_68(bool) (->confirmations) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Revocation(msg.sender,transactionHash)

IRs:
Emit Revocation(msg.sender,transactionHash)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
confirmed(transactionHash,msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.confirmed(bytes32,address)(transactionHash,msg.sender)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
notExecuted(transactionHash)

IRs:
MODIFIER_CALL, MultiSigWallet.notExecuted(bytes32)(transactionHash)"];
5->1;
}
// Function: 37485.sol-MultiSigWallet-signaturesFromOwners(bytes32,uint8[],bytes32[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < v.length

IRs:
REF_94 -> LENGTH v
TMP_139(bool) = i < REF_94
CONDITION TMP_139"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
! isOwner[ecrecover(bytes32,uint8,bytes32,bytes32)(transactionHash,v[i],rs[i],rs[v.length + i])]

IRs:
REF_95(uint8) -> v[i]
REF_96(bytes32) -> rs[i]
REF_97 -> LENGTH v
TMP_140(uint256) = REF_97 + i
REF_98(bytes32) -> rs[TMP_140]
TMP_141(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(transactionHash,REF_95,REF_96,REF_98)
REF_99(bool) -> isOwner[TMP_141]
TMP_142 = UnaryType.BANG REF_99 
CONDITION TMP_142"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_143(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_144(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: _ 9
"];
}
// Function: 37485.sol-MultiSigWallet-submitTransaction(address,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transactionHash = addTransaction(destination,value,data,nonce)

IRs:
TMP_77(bytes32) = INTERNAL_CALL, MultiSigWallet.addTransaction(address,uint256,bytes,uint256)(destination,value,data,nonce)
transactionHash(bytes32) := TMP_77(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
confirmTransaction(transactionHash)

IRs:
INTERNAL_CALL, MultiSigWallet.confirmTransaction(bytes32)(transactionHash)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
transactionHash

IRs:
RETURN transactionHash"];
}
// Function: 37485.sol-MultiSigWallet-submitTransactionWithSignatures(address,uint256,bytes,uint256,uint8[],bytes32[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transactionHash = addTransaction(destination,value,data,nonce)

IRs:
TMP_80(bytes32) = INTERNAL_CALL, MultiSigWallet.addTransaction(address,uint256,bytes,uint256)(destination,value,data,nonce)
transactionHash(bytes32) := TMP_80(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
confirmTransactionWithSignatures(transactionHash,v,rs)

IRs:
INTERNAL_CALL, MultiSigWallet.confirmTransactionWithSignatures(bytes32,uint8[],bytes32[])(transactionHash,v,rs)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
transactionHash

IRs:
RETURN transactionHash"];
}
// Function: 37485.sol-MultiSigWallet-updateRequired(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
required = _required

IRs:
required(uint256) := _required(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RequiredUpdate(_required)

IRs:
Emit RequiredUpdate(_required)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validRequired(owners.length,_required)

IRs:
REF_46 -> LENGTH owners
MODIFIER_CALL, MultiSigWallet.validRequired(uint256,uint256)(REF_46,_required)"];
4->1;
}
// Function: 37485.sol-MultiSigWallet-validRequired(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_required > _ownerCount || _required == 0 || _ownerCount == 0

IRs:
TMP_154(bool) = _required > _ownerCount
TMP_155(bool) = _required == 0
TMP_156(bool) = TMP_154 || TMP_155
TMP_157(bool) = _ownerCount == 0
TMP_158(bool) = TMP_156 || TMP_157
CONDITION TMP_158"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_159(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
}
