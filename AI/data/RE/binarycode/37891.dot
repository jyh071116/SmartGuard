digraph G {
// Function: 37891.sol-Escrow-claim()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balance = balances[msg.sender]

IRs:
REF_1(uint256) -> balances[msg.sender]
balance(uint256) := REF_1(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balance > 0)

IRs:
TMP_2(bool) = balance > 0
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = 0

IRs:
REF_2(uint256) -> balances[msg.sender]
REF_2(uint256) (->balances) := 0(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
claimed = msg.sender.call.value(balance)()

IRs:
TMP_5(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:balance 
claimed(bool) := TMP_5(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(claimed)

IRs:
TMP_6(None) = SOLIDITY_CALL require(bool)(claimed)"];
}
// Function: 37891.sol-Escrow-deposit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_0(bool) = msg.value > 0
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_recipient] += msg.value

IRs:
REF_0(uint256) -> balances[_recipient]
REF_0(-> balances) = REF_0 + msg.value"];
}
}
