digraph G {
// Function: 38289.sol-Controlled-Controlled()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
controller = msg.sender

IRs:
controller(address) := msg.sender(address)"];
}
// Function: 38289.sol-Controlled-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newController

IRs:
TMP_28(bool) = msg.sender == newController
CONDITION TMP_28"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
controller = newController

IRs:
controller(address) := newController(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 38289.sol-Controlled-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newController = _newController

IRs:
newController(address) := _newController(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
2->1;
}
// Function: 38289.sol-Controlled-onlyController()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == controller)

IRs:
TMP_29(bool) = msg.sender == controller
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38289.sol-CrowdSalePreICO-Controlled()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
controller = msg.sender

IRs:
controller(address) := msg.sender(address)"];
}
// Function: 38289.sol-CrowdSalePreICO-CrowdSalePreICO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenFactory = SphereTokenFactory(0xf961eb0acf690bd8f92c5f9c486f3b30848d87aa)

IRs:
TMP_163 = CONVERT 1423722349285106771440656279025133933098292840362 to SphereTokenFactory
tokenFactory(SphereTokenFactory) := TMP_163(SphereTokenFactory)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
decimals = 4

IRs:
decimals(uint256) := 4(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setPricing()

IRs:
INTERNAL_CALL, PricingMechanism.setPricing()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
hardCapAmount = 5000000000000000000000

IRs:
hardCapAmount(uint256) := 5000000000000000000000(uint256)"];
}
// Function: 38289.sol-CrowdSalePreICO-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newController

IRs:
TMP_162(bool) = msg.sender == newController
CONDITION TMP_162"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
controller = newController

IRs:
controller(address) := newController(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 38289.sol-CrowdSalePreICO-afterFinalizeSet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! finalizeSet

IRs:
TMP_205 = UnaryType.BANG finalizeSet 
CONDITION TMP_205"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38289.sol-CrowdSalePreICO-allocateTokensInternally(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
numTiers == 0

IRs:
TMP_119(bool) = numTiers == 0
CONDITION TMP_119"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
numTokens = 0

IRs:
numTokens(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
tierIndex = 0

IRs:
tierIndex(uint8) := 0(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->21;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < numTiers

IRs:
TMP_120(bool) = i < numTiers
CONDITION TMP_120"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
priceList[i].ethersDepositedInTier < priceList[i].maxEthersInTier

IRs:
REF_28(PricingMechanism.PriceTier) -> priceList[i]
REF_29(uint256) -> REF_28.ethersDepositedInTier
REF_30(PricingMechanism.PriceTier) -> priceList[i]
REF_31(uint256) -> REF_30.maxEthersInTier
TMP_121(bool) = REF_29 < REF_31
CONDITION TMP_121"];
10->11[label="True"];
10->19[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ethersToDepositInTier = min256(priceList[i].maxEthersInTier - priceList[i].ethersDepositedInTier,value)

IRs:
REF_32(PricingMechanism.PriceTier) -> priceList[i]
REF_33(uint256) -> REF_32.maxEthersInTier
REF_34(PricingMechanism.PriceTier) -> priceList[i]
REF_35(uint256) -> REF_34.ethersDepositedInTier
TMP_122(uint256) = REF_33 - REF_35
TMP_123(uint256) = INTERNAL_CALL, SafeMath.min256(uint256,uint256)(TMP_122,value)
ethersToDepositInTier(uint256) := TMP_123(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
numTokens = safeAdd(numTokens,ethersToDepositInTier / priceList[i].costPerToken)

IRs:
REF_36(PricingMechanism.PriceTier) -> priceList[i]
REF_37(uint256) -> REF_36.costPerToken
TMP_124(uint256) = ethersToDepositInTier / REF_37
TMP_125(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(numTokens,TMP_124)
numTokens(uint256) := TMP_125(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
priceList[i].ethersDepositedInTier = safeAdd(ethersToDepositInTier,priceList[i].ethersDepositedInTier)

IRs:
REF_38(PricingMechanism.PriceTier) -> priceList[i]
REF_39(uint256) -> REF_38.ethersDepositedInTier
REF_40(PricingMechanism.PriceTier) -> priceList[i]
REF_41(uint256) -> REF_40.ethersDepositedInTier
TMP_126(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(ethersToDepositInTier,REF_41)
REF_39(uint256) (->priceList) := TMP_126(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
totalDepositedEthers = safeAdd(ethersToDepositInTier,totalDepositedEthers)

IRs:
TMP_127(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(ethersToDepositInTier,totalDepositedEthers)
totalDepositedEthers(uint256) := TMP_127(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
value = safeSub(value,ethersToDepositInTier)

IRs:
TMP_128(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(value,ethersToDepositInTier)
value(uint256) := TMP_128(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
priceList[i].ethersDepositedInTier > 0

IRs:
REF_42(PricingMechanism.PriceTier) -> priceList[i]
REF_43(uint256) -> REF_42.ethersDepositedInTier
TMP_129(bool) = REF_43 > 0
CONDITION TMP_129"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tierIndex = i

IRs:
tierIndex(uint8) := i(uint8)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_130(uint8) := i(uint8)
i(uint8) = i + 1"];
20->9;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
currentTierIndex = tierIndex

IRs:
currentTierIndex(uint256) := tierIndex(uint8)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
numTokens

IRs:
RETURN numTokens"];
23[label="Node Type: RETURN 23

EXPRESSION:
numTokens

IRs:
RETURN numTokens"];
}
// Function: 38289.sol-CrowdSalePreICO-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_157 = UnaryType.BANG assertion 
CONDITION TMP_157"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 38289.sol-CrowdSalePreICO-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newController = _newController

IRs:
newController(address) := _newController(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
2->1;
}
// Function: 38289.sol-CrowdSalePreICO-emergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isFinalized = true

IRs:
isFinalized(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isStarted = false

IRs:
isStarted(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
multiSig.call.gas(150000).value(this.balance)()

IRs:
REF_56(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_195(bool) = LOW_LEVEL_CALL, dest:multiSig, function:call, arguments:[] value:REF_56 gas:150000"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyStarted()

IRs:
MODIFIER_CALL, CrowdSalePreICO.onlyStarted()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyInEmergency()

IRs:
MODIFIER_CALL, Haltable.onlyInEmergency()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
afterFinalizeSet()

IRs:
MODIFIER_CALL, CrowdSalePreICO.afterFinalizeSet()()"];
7->1;
}
// Function: 38289.sol-CrowdSalePreICO-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: IF 1

EXPRESSION:
totalDepositedEthers >= hardCapAmount

IRs:
TMP_167(bool) = totalDepositedEthers >= hardCapAmount
CONDITION TMP_167"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
contribution = msg.value

IRs:
contribution(uint256) := msg.value(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
safeAdd(totalDepositedEthers,msg.value) > hardCapAmount

IRs:
TMP_168(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalDepositedEthers,msg.value)
TMP_169(bool) = TMP_168 > hardCapAmount
CONDITION TMP_169"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
contribution = safeSub(hardCapAmount,totalDepositedEthers)

IRs:
TMP_170(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(hardCapAmount,totalDepositedEthers)
contribution(uint256) := TMP_170(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
excess = safeSub(msg.value,contribution)

IRs:
TMP_171(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(msg.value,contribution)
excess(uint256) := TMP_171(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
numTokensToAllocate = allocateTokensInternally(contribution)

IRs:
TMP_172(uint256) = INTERNAL_CALL, PricingMechanism.allocateTokensInternally(uint256)(contribution)
numTokensToAllocate(uint256) := TMP_172(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tokenFactory.mint(msg.sender,numTokensToAllocate)

IRs:
HIGH_LEVEL_CALL, dest:tokenFactory(SphereTokenFactory), function:mint, arguments:['msg.sender', 'numTokensToAllocate']  "];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
excess > 0

IRs:
TMP_174(bool) = excess > 0
CONDITION TMP_174"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
msg.sender.send(excess)

IRs:
TMP_175 = SEND dest:msg.sender value:excess"];
12->13;
13[label="Node Type: END_IF 13
"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
stopInEmergency()

IRs:
MODIFIER_CALL, Haltable.stopInEmergency()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyStarted()

IRs:
MODIFIER_CALL, CrowdSalePreICO.onlyStarted()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
notFinalized()

IRs:
MODIFIER_CALL, CrowdSalePreICO.notFinalized()()"];
16->1;
}
// Function: 38289.sol-CrowdSalePreICO-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
hardCapAmount == totalDepositedEthers || (now - startTime) > duration

IRs:
TMP_179(bool) = hardCapAmount == totalDepositedEthers
TMP_180(uint256) = now - startTime
TMP_181(bool) = TMP_180 > duration
TMP_182(bool) = TMP_179 || TMP_181
CONDITION TMP_182"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dao.call.gas(150000).value(totalDepositedEthers * 2 / 10)()

IRs:
TMP_184(uint256) = totalDepositedEthers * 2
TMP_185(uint256) = TMP_184 / 10
TMP_187(bool) = LOW_LEVEL_CALL, dest:dao, function:call, arguments:[] value:TMP_185 gas:150000"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
multiSig.call.gas(150000).value(this.balance)()

IRs:
REF_52(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_190(bool) = LOW_LEVEL_CALL, dest:multiSig, function:call, arguments:[] value:REF_52 gas:150000"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isFinalized = true

IRs:
isFinalized(bool) := True(bool)"];
4->5;
5[label="Node Type: END_IF 5
"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
afterFinalizeSet()

IRs:
MODIFIER_CALL, CrowdSalePreICO.afterFinalizeSet()()"];
7->1;
}
// Function: 38289.sol-CrowdSalePreICO-halt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = true

IRs:
halted(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
2->1;
}
// Function: 38289.sol-CrowdSalePreICO-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_155(bool) = a >= b
CONDITION TMP_155"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 38289.sol-CrowdSalePreICO-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_153(bool) = a >= b
CONDITION TMP_153"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 38289.sol-CrowdSalePreICO-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_156(bool) = a < b
CONDITION TMP_156"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 38289.sol-CrowdSalePreICO-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_154(bool) = a < b
CONDITION TMP_154"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 38289.sol-CrowdSalePreICO-notFinalized()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isFinalized

IRs:
CONDITION isFinalized"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38289.sol-CrowdSalePreICO-onlyController()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == controller)

IRs:
TMP_202(bool) = msg.sender == controller
TMP_203(None) = SOLIDITY_CALL require(bool)(TMP_202)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38289.sol-CrowdSalePreICO-onlyDAO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != dao

IRs:
TMP_200(bool) = msg.sender != dao
CONDITION TMP_200"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38289.sol-CrowdSalePreICO-onlyInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! halted

IRs:
TMP_201 = UnaryType.BANG halted 
CONDITION TMP_201"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38289.sol-CrowdSalePreICO-onlyStarted()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isStarted

IRs:
TMP_204 = UnaryType.BANG isStarted 
CONDITION TMP_204"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38289.sol-CrowdSalePreICO-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_148(uint256) = a + b
c(uint256) := TMP_148(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(c >= a && c >= b)

IRs:
TMP_149(bool) = c >= a
TMP_150(bool) = c >= b
TMP_151(bool) = TMP_149 && TMP_150
INTERNAL_CALL, SafeMath.assert(bool)(TMP_151)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 38289.sol-CrowdSalePreICO-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b > 0)

IRs:
TMP_137(bool) = b > 0
INTERNAL_CALL, SafeMath.assert(bool)(TMP_137)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_139(uint256) = a / b
c(uint256) := TMP_139(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(a == b * c + a % b)

IRs:
TMP_140(uint256) = b * c
TMP_141(uint256) = a % b
TMP_142(uint256) = TMP_140 + TMP_141
TMP_143(bool) = a == TMP_142
INTERNAL_CALL, SafeMath.assert(bool)(TMP_143)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 38289.sol-CrowdSalePreICO-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_131(uint256) = a * b
c(uint256) := TMP_131(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(a == 0 || c / a == b)

IRs:
TMP_132(bool) = a == 0
TMP_133(uint256) = c / a
TMP_134(bool) = TMP_133 == b
TMP_135(bool) = TMP_132 || TMP_134
INTERNAL_CALL, SafeMath.assert(bool)(TMP_135)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 38289.sol-CrowdSalePreICO-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b <= a)

IRs:
TMP_145(bool) = b <= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_145)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_147(uint256) = a - b
RETURN TMP_147"];
}
// Function: 38289.sol-CrowdSalePreICO-setDAOAndMultiSig(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
dao = _dao

IRs:
dao(address) := _dao(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
multiSig = _multiSig

IRs:
multiSig(address) := _multiSig(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
finalizeSet = true

IRs:
finalizeSet(bool) := True(bool)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
4->1;
}
// Function: 38289.sol-CrowdSalePreICO-setPricing()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
factor = 10 ** decimals

IRs:
TMP_103(uint256) = 10 ** decimals
factor(uint256) := TMP_103(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
priceList.push(PriceTier(uint256(safeDiv(1000000000000000000,400 * factor)),0,5000000000000000000000))

IRs:
TMP_104(uint256) = 400 * factor
TMP_105(uint256) = INTERNAL_CALL, SafeMath.safeDiv(uint256,uint256)(1000000000000000000,TMP_104)
TMP_106 = CONVERT TMP_105 to uint256
TMP_107(PricingMechanism.PriceTier) = new PriceTier(TMP_106,0,5000000000000000000000)
REF_23 -> LENGTH priceList
TMP_109(uint256) := REF_23(uint256)
TMP_110(uint256) = TMP_109 + 1
REF_23(uint256) (->priceList) := TMP_110(uint256)
REF_24(PricingMechanism.PriceTier) -> priceList[TMP_109]
REF_24(PricingMechanism.PriceTier) (->priceList) := TMP_107(PricingMechanism.PriceTier)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
priceList.push(PriceTier(uint256(safeDiv(1000000000000000000,400 * factor)),0,1000000000000000000))

IRs:
TMP_111(uint256) = 400 * factor
TMP_112(uint256) = INTERNAL_CALL, SafeMath.safeDiv(uint256,uint256)(1000000000000000000,TMP_111)
TMP_113 = CONVERT TMP_112 to uint256
TMP_114(PricingMechanism.PriceTier) = new PriceTier(TMP_113,0,1000000000000000000)
REF_26 -> LENGTH priceList
TMP_116(uint256) := REF_26(uint256)
TMP_117(uint256) = TMP_116 + 1
REF_26(uint256) (->priceList) := TMP_117(uint256)
REF_27(PricingMechanism.PriceTier) -> priceList[TMP_116]
REF_27(PricingMechanism.PriceTier) (->priceList) := TMP_114(PricingMechanism.PriceTier)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
numTiers = 2

IRs:
numTiers(uint8) := 2(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
5->1;
}
// Function: 38289.sol-CrowdSalePreICO-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isStarted = false

IRs:
isStarted(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
isFinalized = false

IRs:
isFinalized(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
duration = 604800

IRs:
duration(uint256) := 604800(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
finalizeSet = false

IRs:
finalizeSet(bool) := False(bool)"];
}
// Function: 38289.sol-CrowdSalePreICO-startCrowdsale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
isStarted

IRs:
CONDITION isStarted"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isStarted = true

IRs:
isStarted(bool) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
startTime = now

IRs:
startTime(uint256) := now(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
6->1;
}
// Function: 38289.sol-CrowdSalePreICO-stopInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted

IRs:
CONDITION halted"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38289.sol-CrowdSalePreICO-unhalt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = false

IRs:
halted(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyInEmergency()

IRs:
MODIFIER_CALL, Haltable.onlyInEmergency()()"];
3->1;
}
// Function: 38289.sol-DAOController-onlyDAO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != dao

IRs:
TMP_102(bool) = msg.sender != dao
CONDITION TMP_102"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38289.sol-Haltable-Controlled()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
controller = msg.sender

IRs:
controller(address) := msg.sender(address)"];
}
// Function: 38289.sol-Haltable-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newController

IRs:
TMP_32(bool) = msg.sender == newController
CONDITION TMP_32"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
controller = newController

IRs:
controller(address) := newController(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 38289.sol-Haltable-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newController = _newController

IRs:
newController(address) := _newController(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
2->1;
}
// Function: 38289.sol-Haltable-halt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = true

IRs:
halted(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
2->1;
}
// Function: 38289.sol-Haltable-onlyController()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == controller)

IRs:
TMP_36(bool) = msg.sender == controller
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38289.sol-Haltable-onlyInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! halted

IRs:
TMP_38 = UnaryType.BANG halted 
CONDITION TMP_38"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38289.sol-Haltable-stopInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted

IRs:
CONDITION halted"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38289.sol-Haltable-unhalt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = false

IRs:
halted(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyInEmergency()

IRs:
MODIFIER_CALL, Haltable.onlyInEmergency()()"];
3->1;
}
// Function: 38289.sol-PricingMechanism-Controlled()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
controller = msg.sender

IRs:
controller(address) := msg.sender(address)"];
}
// Function: 38289.sol-PricingMechanism-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newController

IRs:
TMP_70(bool) = msg.sender == newController
CONDITION TMP_70"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
controller = newController

IRs:
controller(address) := newController(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 38289.sol-PricingMechanism-allocateTokensInternally(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
numTiers == 0

IRs:
TMP_87(bool) = numTiers == 0
CONDITION TMP_87"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
numTokens = 0

IRs:
numTokens(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
tierIndex = 0

IRs:
tierIndex(uint8) := 0(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->21;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < numTiers

IRs:
TMP_88(bool) = i < numTiers
CONDITION TMP_88"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
priceList[i].ethersDepositedInTier < priceList[i].maxEthersInTier

IRs:
REF_6(PricingMechanism.PriceTier) -> priceList[i]
REF_7(uint256) -> REF_6.ethersDepositedInTier
REF_8(PricingMechanism.PriceTier) -> priceList[i]
REF_9(uint256) -> REF_8.maxEthersInTier
TMP_89(bool) = REF_7 < REF_9
CONDITION TMP_89"];
10->11[label="True"];
10->19[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ethersToDepositInTier = min256(priceList[i].maxEthersInTier - priceList[i].ethersDepositedInTier,value)

IRs:
REF_10(PricingMechanism.PriceTier) -> priceList[i]
REF_11(uint256) -> REF_10.maxEthersInTier
REF_12(PricingMechanism.PriceTier) -> priceList[i]
REF_13(uint256) -> REF_12.ethersDepositedInTier
TMP_90(uint256) = REF_11 - REF_13
TMP_91(uint256) = INTERNAL_CALL, SafeMath.min256(uint256,uint256)(TMP_90,value)
ethersToDepositInTier(uint256) := TMP_91(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
numTokens = safeAdd(numTokens,ethersToDepositInTier / priceList[i].costPerToken)

IRs:
REF_14(PricingMechanism.PriceTier) -> priceList[i]
REF_15(uint256) -> REF_14.costPerToken
TMP_92(uint256) = ethersToDepositInTier / REF_15
TMP_93(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(numTokens,TMP_92)
numTokens(uint256) := TMP_93(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
priceList[i].ethersDepositedInTier = safeAdd(ethersToDepositInTier,priceList[i].ethersDepositedInTier)

IRs:
REF_16(PricingMechanism.PriceTier) -> priceList[i]
REF_17(uint256) -> REF_16.ethersDepositedInTier
REF_18(PricingMechanism.PriceTier) -> priceList[i]
REF_19(uint256) -> REF_18.ethersDepositedInTier
TMP_94(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(ethersToDepositInTier,REF_19)
REF_17(uint256) (->priceList) := TMP_94(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
totalDepositedEthers = safeAdd(ethersToDepositInTier,totalDepositedEthers)

IRs:
TMP_95(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(ethersToDepositInTier,totalDepositedEthers)
totalDepositedEthers(uint256) := TMP_95(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
value = safeSub(value,ethersToDepositInTier)

IRs:
TMP_96(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(value,ethersToDepositInTier)
value(uint256) := TMP_96(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
priceList[i].ethersDepositedInTier > 0

IRs:
REF_20(PricingMechanism.PriceTier) -> priceList[i]
REF_21(uint256) -> REF_20.ethersDepositedInTier
TMP_97(bool) = REF_21 > 0
CONDITION TMP_97"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tierIndex = i

IRs:
tierIndex(uint8) := i(uint8)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_98(uint8) := i(uint8)
i(uint8) = i + 1"];
20->9;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
currentTierIndex = tierIndex

IRs:
currentTierIndex(uint256) := tierIndex(uint8)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
numTokens

IRs:
RETURN numTokens"];
23[label="Node Type: RETURN 23

EXPRESSION:
numTokens

IRs:
RETURN numTokens"];
}
// Function: 38289.sol-PricingMechanism-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_65 = UnaryType.BANG assertion 
CONDITION TMP_65"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 38289.sol-PricingMechanism-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newController = _newController

IRs:
newController(address) := _newController(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
2->1;
}
// Function: 38289.sol-PricingMechanism-halt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = true

IRs:
halted(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
2->1;
}
// Function: 38289.sol-PricingMechanism-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_63(bool) = a >= b
CONDITION TMP_63"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 38289.sol-PricingMechanism-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_61(bool) = a >= b
CONDITION TMP_61"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 38289.sol-PricingMechanism-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_64(bool) = a < b
CONDITION TMP_64"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 38289.sol-PricingMechanism-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_62(bool) = a < b
CONDITION TMP_62"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 38289.sol-PricingMechanism-onlyController()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == controller)

IRs:
TMP_100(bool) = msg.sender == controller
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38289.sol-PricingMechanism-onlyInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! halted

IRs:
TMP_99 = UnaryType.BANG halted 
CONDITION TMP_99"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38289.sol-PricingMechanism-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_56(uint256) = a + b
c(uint256) := TMP_56(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(c >= a && c >= b)

IRs:
TMP_57(bool) = c >= a
TMP_58(bool) = c >= b
TMP_59(bool) = TMP_57 && TMP_58
INTERNAL_CALL, SafeMath.assert(bool)(TMP_59)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 38289.sol-PricingMechanism-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b > 0)

IRs:
TMP_45(bool) = b > 0
INTERNAL_CALL, SafeMath.assert(bool)(TMP_45)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_47(uint256) = a / b
c(uint256) := TMP_47(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(a == b * c + a % b)

IRs:
TMP_48(uint256) = b * c
TMP_49(uint256) = a % b
TMP_50(uint256) = TMP_48 + TMP_49
TMP_51(bool) = a == TMP_50
INTERNAL_CALL, SafeMath.assert(bool)(TMP_51)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 38289.sol-PricingMechanism-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_39(uint256) = a * b
c(uint256) := TMP_39(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(a == 0 || c / a == b)

IRs:
TMP_40(bool) = a == 0
TMP_41(uint256) = c / a
TMP_42(bool) = TMP_41 == b
TMP_43(bool) = TMP_40 || TMP_42
INTERNAL_CALL, SafeMath.assert(bool)(TMP_43)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 38289.sol-PricingMechanism-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b <= a)

IRs:
TMP_53(bool) = b <= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_53)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_55(uint256) = a - b
RETURN TMP_55"];
}
// Function: 38289.sol-PricingMechanism-setPricing()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
factor = 10 ** decimals

IRs:
TMP_71(uint256) = 10 ** decimals
factor(uint256) := TMP_71(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
priceList.push(PriceTier(uint256(safeDiv(1000000000000000000,400 * factor)),0,5000000000000000000000))

IRs:
TMP_72(uint256) = 400 * factor
TMP_73(uint256) = INTERNAL_CALL, SafeMath.safeDiv(uint256,uint256)(1000000000000000000,TMP_72)
TMP_74 = CONVERT TMP_73 to uint256
TMP_75(PricingMechanism.PriceTier) = new PriceTier(TMP_74,0,5000000000000000000000)
REF_1 -> LENGTH priceList
TMP_77(uint256) := REF_1(uint256)
TMP_78(uint256) = TMP_77 + 1
REF_1(uint256) (->priceList) := TMP_78(uint256)
REF_2(PricingMechanism.PriceTier) -> priceList[TMP_77]
REF_2(PricingMechanism.PriceTier) (->priceList) := TMP_75(PricingMechanism.PriceTier)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
priceList.push(PriceTier(uint256(safeDiv(1000000000000000000,400 * factor)),0,1000000000000000000))

IRs:
TMP_79(uint256) = 400 * factor
TMP_80(uint256) = INTERNAL_CALL, SafeMath.safeDiv(uint256,uint256)(1000000000000000000,TMP_79)
TMP_81 = CONVERT TMP_80 to uint256
TMP_82(PricingMechanism.PriceTier) = new PriceTier(TMP_81,0,1000000000000000000)
REF_4 -> LENGTH priceList
TMP_84(uint256) := REF_4(uint256)
TMP_85(uint256) = TMP_84 + 1
REF_4(uint256) (->priceList) := TMP_85(uint256)
REF_5(PricingMechanism.PriceTier) -> priceList[TMP_84]
REF_5(PricingMechanism.PriceTier) (->priceList) := TMP_82(PricingMechanism.PriceTier)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
numTiers = 2

IRs:
numTiers(uint8) := 2(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
5->1;
}
// Function: 38289.sol-PricingMechanism-stopInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted

IRs:
CONDITION halted"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38289.sol-PricingMechanism-unhalt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = false

IRs:
halted(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyController()

IRs:
MODIFIER_CALL, Controlled.onlyController()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyInEmergency()

IRs:
MODIFIER_CALL, Haltable.onlyInEmergency()()"];
3->1;
}
// Function: 38289.sol-SafeMath-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! assertion

IRs:
TMP_26 = UnaryType.BANG assertion 
CONDITION TMP_26"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 38289.sol-SafeMath-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_24(bool) = a >= b
CONDITION TMP_24"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 38289.sol-SafeMath-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_22(bool) = a >= b
CONDITION TMP_22"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 38289.sol-SafeMath-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_25(bool) = a < b
CONDITION TMP_25"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 38289.sol-SafeMath-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_23(bool) = a < b
CONDITION TMP_23"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 38289.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_17(uint256) = a + b
c(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(c >= a && c >= b)

IRs:
TMP_18(bool) = c >= a
TMP_19(bool) = c >= b
TMP_20(bool) = TMP_18 && TMP_19
INTERNAL_CALL, SafeMath.assert(bool)(TMP_20)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 38289.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b > 0)

IRs:
TMP_6(bool) = b > 0
INTERNAL_CALL, SafeMath.assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_8(uint256) = a / b
c(uint256) := TMP_8(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(a == b * c + a % b)

IRs:
TMP_9(uint256) = b * c
TMP_10(uint256) = a % b
TMP_11(uint256) = TMP_9 + TMP_10
TMP_12(bool) = a == TMP_11
INTERNAL_CALL, SafeMath.assert(bool)(TMP_12)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 38289.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
INTERNAL_CALL, SafeMath.assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 38289.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(b <= a)

IRs:
TMP_14(bool) = b <= a
INTERNAL_CALL, SafeMath.assert(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_16(uint256) = a - b
RETURN TMP_16"];
}
// Function: 38289.sol-SphereTokenFactory-mint(address,uint256)
digraph{
}
}
