digraph G {
// Function: 39079.sol-HumanStandardToken-HumanStandardToken(uint256,string,uint8,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = _initialAmount

IRs:
REF_30(uint256) -> balances[msg.sender]
REF_30(uint256) (->balances) := _initialAmount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = _initialAmount

IRs:
totalSupply(uint256) := _initialAmount(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = _decimalUnits

IRs:
decimals(uint8) := _decimalUnits(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)"];
}
// Function: 39079.sol-HumanStandardToken-allowance(address,address)
digraph{
}
// Function: 39079.sol-HumanStandardToken-approve(address,uint256)
digraph{
}
// Function: 39079.sol-HumanStandardToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
REF_32(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

IRs:
TMP_23(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_24 = CONVERT TMP_23 to bytes32
TMP_25 = CONVERT TMP_24 to bytes4
TMP_26(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_25', 'msg.sender', '_value', 'this', '_extraData']  
TMP_27 = UnaryType.BANG TMP_26 
CONDITION TMP_27"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39079.sol-HumanStandardToken-balanceOf(address)
digraph{
}
// Function: 39079.sol-HumanStandardToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: THROW 1
"];
}
// Function: 39079.sol-HumanStandardToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = H0.1

IRs:
version(string) := H0.1(string)"];
}
// Function: 39079.sol-HumanStandardToken-transfer(address,uint256)
digraph{
}
// Function: 39079.sol-HumanStandardToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 39079.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 39079.sol-Owned-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_32(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39079.sol-Owned-drain()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(this.balance)

IRs:
REF_35(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:owner value:REF_35"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39079.sol-Owned-freeze()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozen = true

IRs:
frozen(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39079.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_34(bool) = msg.sender == owner
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39079.sol-Owned-publicMethod()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozen)

IRs:
TMP_36 = UnaryType.BANG frozen 
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39079.sol-Owned-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
frozen = false

IRs:
frozen(bool) := False(bool)"];
}
// Function: 39079.sol-Owned-unfreeze()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozen = false

IRs:
frozen(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39079.sol-Pixel-HumanStandardToken(uint256,string,uint8,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = _initialAmount

IRs:
REF_36(uint256) -> balances[msg.sender]
REF_36(uint256) (->balances) := _initialAmount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = _initialAmount

IRs:
totalSupply(uint256) := _initialAmount(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = _decimalUnits

IRs:
decimals(uint8) := _decimalUnits(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)"];
}
// Function: 39079.sol-Pixel-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 39079.sol-Pixel-Pixel()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
HumanStandardToken(size2,Pixel,0,PXL)

IRs:
INTERNAL_CALL, HumanStandardToken.HumanStandardToken(uint256,string,uint8,string)(size2,Pixel,0,PXL)"];
}
// Function: 39079.sol-Pixel-allowance(address,address)
digraph{
}
// Function: 39079.sol-Pixel-approve(address,uint256)
digraph{
}
// Function: 39079.sol-Pixel-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_37(mapping(address => uint256)) -> allowed[msg.sender]
REF_38(uint256) -> REF_37[_spender]
REF_38(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

IRs:
TMP_39(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_40 = CONVERT TMP_39 to bytes32
TMP_41 = CONVERT TMP_40 to bytes4
TMP_42(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_41', 'msg.sender', '_value', 'this', '_extraData']  
TMP_43 = UnaryType.BANG TMP_42 
CONDITION TMP_43"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39079.sol-Pixel-balanceOf(address)
digraph{
}
// Function: 39079.sol-Pixel-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_59(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39079.sol-Pixel-drain()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(this.balance)

IRs:
REF_56(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:owner value:REF_56"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39079.sol-Pixel-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: THROW 1
"];
}
// Function: 39079.sol-Pixel-freeze()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozen = true

IRs:
frozen(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39079.sol-Pixel-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_86(bool) = msg.sender == owner
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39079.sol-Pixel-publicMethod()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozen)

IRs:
TMP_88 = UnaryType.BANG frozen 
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39079.sol-Pixel-row(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_start = _y * size

IRs:
TMP_80(uint32) = _y * size
_start(uint32) := TMP_80(uint32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < 1000

IRs:
TMP_81(bool) = i < 1000
CONDITION TMP_81"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
rgbs[i] = pixels[_start + i]

IRs:
REF_75(uint24) -> rgbs[i]
TMP_82(uint32) = _start + i
REF_76(uint24) -> pixels[TMP_82]
REF_75(uint24) (->rgbs) := REF_76(uint24)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
addrs[i] = owners[_start + i]

IRs:
REF_77(address) -> addrs[i]
TMP_83(uint32) = _start + i
REF_78(address) -> owners[TMP_83]
REF_77(address) (->addrs) := REF_78(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_84(uint32) := i(uint32)
i(uint32) = i + 1"];
10->7;
11[label="Node Type: RETURN 11

EXPRESSION:
(rgbs,addrs)

IRs:
RETURN rgbs,addrs"];
}
// Function: 39079.sol-Pixel-set(uint32[],uint24[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->19;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_from = msg.sender

IRs:
_from(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_xys.length == _rgbs.length)

IRs:
REF_57 -> LENGTH _xys
REF_58 -> LENGTH _rgbs
TMP_62(bool) = REF_57 == REF_58
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances[_from] >= _xys.length)

IRs:
REF_59(uint256) -> balances[_from]
REF_60 -> LENGTH _xys
TMP_64(bool) = REF_59 >= REF_60
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->17;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < _xys.length

IRs:
REF_61 -> LENGTH _xys
TMP_66(bool) = i < REF_61
CONDITION TMP_66"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_xy = _xys[i]

IRs:
REF_62(uint32) -> _xys[i]
_xy(uint32) := REF_62(uint32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_rgb = _rgbs[i]

IRs:
REF_63(uint24) -> _rgbs[i]
_rgb(uint24) := REF_63(uint24)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(_xy < size2)

IRs:
TMP_67(bool) = _xy < size2
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool)(owners[_xy] == 0)

IRs:
REF_64(address) -> owners[_xy]
TMP_69(bool) = REF_64 == 0
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
owners[_xy] = _from

IRs:
REF_65(address) -> owners[_xy]
REF_65(address) (->owners) := _from(address)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
pixels[_xy] = _rgb

IRs:
REF_66(uint24) -> pixels[_xy]
REF_66(uint24) (->pixels) := _rgb(uint24)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_71(uint256) := i(uint256)
i(uint256) = i + 1"];
16->9;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
balances[_from] -= _xys.length

IRs:
REF_67(uint256) -> balances[_from]
REF_68 -> LENGTH _xys
REF_67(-> balances) = REF_67 - REF_68"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
Set(_from,_xys,_rgbs)

IRs:
Emit Set(_from,_xys,_rgbs)"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
publicMethod()

IRs:
MODIFIER_CALL, Owned.publicMethod()()"];
19->1;
}
// Function: 39079.sol-Pixel-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
frozen = false

IRs:
frozen(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
version = H0.1

IRs:
version(string) := H0.1(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
size = 1000

IRs:
size(uint32) := 1000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
size2 = size * size

IRs:
TMP_85(uint32) = size * size
size2(uint32) := TMP_85(uint32)"];
}
// Function: 39079.sol-Pixel-transfer(address,uint256)
digraph{
}
// Function: 39079.sol-Pixel-transferFrom(address,address,uint256)
digraph{
}
// Function: 39079.sol-Pixel-unfreeze()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozen = false

IRs:
frozen(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39079.sol-Pixel-unset(uint32[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_from = msg.sender

IRs:
_from(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->13;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < _xys.length

IRs:
REF_69 -> LENGTH _xys
TMP_74(bool) = i < REF_69
CONDITION TMP_74"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_xy = _xys[i]

IRs:
REF_70(uint32) -> _xys[i]
_xy(uint32) := REF_70(uint32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(owners[_xy] == _from)

IRs:
REF_71(address) -> owners[_xy]
TMP_75(bool) = REF_71 == _from
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[_from] += 1

IRs:
REF_72(uint256) -> balances[_from]
REF_72(-> balances) = REF_72 + 1"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owners[_xy] = 0

IRs:
REF_73(address) -> owners[_xy]
REF_73(address) (->owners) := 0(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
pixels[_xy] = 0

IRs:
REF_74(uint24) -> pixels[_xy]
REF_74(uint24) (->pixels) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_77(uint256) := i(uint256)
i(uint256) = i + 1"];
12->6;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Unset(_from,_xys)

IRs:
Emit Unset(_from,_xys)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
publicMethod()

IRs:
MODIFIER_CALL, Owned.publicMethod()()"];
14->1;
}
// Function: 39079.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_13(mapping(address => uint256)) -> allowed[_owner]
REF_14(uint256) -> REF_13[_spender]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 39079.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_11(mapping(address => uint256)) -> allowed[msg.sender]
REF_12(uint256) -> REF_11[_spender]
REF_12(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39079.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_10(uint256) -> balances[_owner]
RETURN REF_10"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 39079.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && _value > 0

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_0 >= _value
TMP_1(bool) = _value > 0
TMP_2(bool) = TMP_0 && TMP_1
CONDITION TMP_2"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_1(-> balances) = REF_1 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_2(uint256) -> balances[_to]
REF_2(-> balances) = REF_2 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39079.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0

IRs:
REF_3(uint256) -> balances[_from]
TMP_4(bool) = REF_3 >= _value
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
TMP_5(bool) = REF_5 >= _value
TMP_6(bool) = TMP_4 && TMP_5
TMP_7(bool) = _value > 0
TMP_8(bool) = TMP_6 && TMP_7
CONDITION TMP_8"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_6(uint256) -> balances[_to]
REF_6(-> balances) = REF_6 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_7(uint256) -> balances[_from]
REF_7(-> balances) = REF_7 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
REF_9(-> allowed) = REF_9 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39079.sol-Token-allowance(address,address)
digraph{
}
// Function: 39079.sol-Token-approve(address,uint256)
digraph{
}
// Function: 39079.sol-Token-balanceOf(address)
digraph{
}
// Function: 39079.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 39079.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
