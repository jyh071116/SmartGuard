digraph G {
// Function: 39319.sol-Congress-Congress(uint256,uint256,int256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
changeVotingRules(minimumQuorumForProposals,minutesForDebate,marginOfVotesForMajority)

IRs:
INTERNAL_CALL, Congress.changeVotingRules(uint256,uint256,int256)(minimumQuorumForProposals,minutesForDebate,marginOfVotesForMajority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addMember(0,)

IRs:
INTERNAL_CALL, Congress.addMember(address,string)(0,)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
congressLeader != 0

IRs:
TMP_26(bool) = congressLeader != 0
CONDITION TMP_26"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
addMember(congressLeader,The Founder)

IRs:
INTERNAL_CALL, Congress.addMember(address,string)(congressLeader,The Founder)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 39319.sol-Congress-Object()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
hammer = msg.sender

IRs:
hammer(address) := msg.sender(address)"];
}
// Function: 39319.sol-Congress-addMember(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
memberId[targetMember] != 0

IRs:
REF_3(uint256) -> memberId[targetMember]
TMP_28(bool) = REF_3 != 0
CONDITION TMP_28"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
memberId[targetMember] = members.length

IRs:
REF_4(uint256) -> memberId[targetMember]
REF_5 -> LENGTH members
REF_4(uint256) (->memberId) := REF_5(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
members.push(Member(targetMember,now,memberName))

IRs:
TMP_29(Congress.Member) = new Member(targetMember,now,memberName)
REF_7 -> LENGTH members
TMP_31(uint256) := REF_7(uint256)
TMP_32(uint256) = TMP_31 + 1
REF_7(uint256) (->members) := TMP_32(uint256)
REF_8(Congress.Member) -> members[TMP_31]
REF_8(Congress.Member) (->members) := TMP_29(Congress.Member)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
MembershipChanged(targetMember,true)

IRs:
Emit MembershipChanged(targetMember,True)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
7->1;
}
// Function: 39319.sol-Congress-changeVotingRules(uint256,uint256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minimumQuorum = minimumQuorumForProposals

IRs:
minimumQuorum(uint256) := minimumQuorumForProposals(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
debatingPeriodInMinutes = minutesForDebate

IRs:
debatingPeriodInMinutes(uint256) := minutesForDebate(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
majorityMargin = marginOfVotesForMajority

IRs:
majorityMargin(int256) := marginOfVotesForMajority(int256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ChangeOfRules(minimumQuorum,debatingPeriodInMinutes,majorityMargin)

IRs:
Emit ChangeOfRules(minimumQuorum,debatingPeriodInMinutes,majorityMargin)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 39319.sol-Congress-checkProposalCode(uint256,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
proposals[id].proposalHash == sha3()(beneficiary,amount,transactionBytecode)

IRs:
REF_29(Congress.Proposal) -> proposals[id]
REF_30(bytes32) -> REF_29.proposalHash
TMP_47(bytes32) = SOLIDITY_CALL sha3()(beneficiary,amount,transactionBytecode)
TMP_48(bool) = REF_30 == TMP_47
RETURN TMP_48"];
2[label="Node Type: RETURN 2

EXPRESSION:
codeChecksOut

IRs:
RETURN codeChecksOut"];
}
// Function: 39319.sol-Congress-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
suicide(address)(msg.sender)

IRs:
TMP_21(None) = SOLIDITY_CALL suicide(address)(msg.sender)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyHammer()

IRs:
MODIFIER_CALL, Destroyable.onlyHammer()()"];
2->1;
}
// Function: 39319.sol-Congress-executeProposal(uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
p = proposals[id]

IRs:
REF_39(Congress.Proposal) -> proposals[id]
p(Congress.Proposal) := REF_39(Congress.Proposal)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now < p.votingDeadline || p.executed || p.proposalHash != sha3()(p.recipient,p.amount,transactionBytecode) || p.numberOfVotes < minimumQuorum

IRs:
REF_40(uint256) -> p.votingDeadline
TMP_55(bool) = now < REF_40
REF_41(bool) -> p.executed
TMP_56(bool) = TMP_55 || REF_41
REF_42(bytes32) -> p.proposalHash
REF_43(address) -> p.recipient
REF_44(uint256) -> p.amount
TMP_57(bytes32) = SOLIDITY_CALL sha3()(REF_43,REF_44,transactionBytecode)
TMP_58(bool) = REF_42 != TMP_57
TMP_59(bool) = TMP_56 || TMP_58
REF_45(uint256) -> p.numberOfVotes
TMP_60(bool) = REF_45 < minimumQuorum
TMP_61(bool) = TMP_59 || TMP_60
CONDITION TMP_61"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
p.currentResult > majorityMargin

IRs:
REF_46(int256) -> p.currentResult
TMP_62(bool) = REF_46 > majorityMargin
CONDITION TMP_62"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
p.executed = true

IRs:
REF_47(bool) -> p.executed
REF_47(bool) (->p) := True(bool)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
! p.recipient.call.value(p.amount)(transactionBytecode)

IRs:
REF_48(address) -> p.recipient
REF_51(uint256) -> p.amount
TMP_64(bool) = LOW_LEVEL_CALL, dest:REF_48, function:call, arguments:['transactionBytecode'] value:REF_51 
TMP_65 = UnaryType.BANG TMP_64 
CONDITION TMP_65"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
p.proposalPassed = true

IRs:
REF_52(bool) -> p.proposalPassed
REF_52(bool) (->p) := True(bool)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
p.proposalPassed = false

IRs:
REF_53(bool) -> p.proposalPassed
REF_53(bool) (->p) := False(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ProposalTallied(id,p.numberOfVotes,p.proposalPassed)

IRs:
REF_54(uint256) -> p.numberOfVotes
REF_55(bool) -> p.proposalPassed
Emit ProposalTallied(id,REF_54,REF_55)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyMembers()

IRs:
MODIFIER_CALL, Congress.onlyMembers()()"];
14->1;
}
// Function: 39319.sol-Congress-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ReceivedEther(msg.sender,msg.value)

IRs:
Emit ReceivedEther(msg.sender,msg.value)"];
}
// Function: 39319.sol-Congress-newProposal(address,uint256,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
id = proposals.length ++

IRs:
REF_19 -> LENGTH proposals
TMP_41(uint256) := REF_19(uint256)
REF_19(-> proposals) = REF_19 + 1
id(uint256) := TMP_41(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
p = proposals[id]

IRs:
REF_20(Congress.Proposal) -> proposals[id]
p(Congress.Proposal) := REF_20(Congress.Proposal)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
p.recipient = beneficiary

IRs:
REF_21(address) -> p.recipient
REF_21(address) (->p) := beneficiary(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
p.amount = amount

IRs:
REF_22(uint256) -> p.amount
REF_22(uint256) (->p) := amount(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
p.description = jobDescription

IRs:
REF_23(string) -> p.description
REF_23(string) (->p) := jobDescription(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
p.proposalHash = sha3()(beneficiary,amount,transactionBytecode)

IRs:
REF_24(bytes32) -> p.proposalHash
TMP_42(bytes32) = SOLIDITY_CALL sha3()(beneficiary,amount,transactionBytecode)
REF_24(bytes32) (->p) := TMP_42(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
p.votingDeadline = now + debatingPeriodInMinutes * 60

IRs:
REF_25(uint256) -> p.votingDeadline
TMP_43(uint256) = debatingPeriodInMinutes * 60
TMP_44(uint256) = now + TMP_43
REF_25(uint256) (->p) := TMP_44(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
p.executed = false

IRs:
REF_26(bool) -> p.executed
REF_26(bool) (->p) := False(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
p.proposalPassed = false

IRs:
REF_27(bool) -> p.proposalPassed
REF_27(bool) (->p) := False(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
p.numberOfVotes = 0

IRs:
REF_28(uint256) -> p.numberOfVotes
REF_28(uint256) (->p) := 0(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ProposalAdded(id,beneficiary,amount,jobDescription)

IRs:
Emit ProposalAdded(id,beneficiary,amount,jobDescription)"];
11->13;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyMembers()

IRs:
MODIFIER_CALL, Congress.onlyMembers()()"];
12->1;
13[label="Node Type: RETURN 13

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39319.sol-Congress-numProposals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
proposals.length

IRs:
REF_2 -> LENGTH proposals
RETURN REF_2"];
}
// Function: 39319.sol-Congress-onlyHammer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != hammer

IRs:
TMP_68(bool) = msg.sender != hammer
CONDITION TMP_68"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39319.sol-Congress-onlyMembers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
memberId[msg.sender] == 0

IRs:
REF_56(uint256) -> memberId[msg.sender]
TMP_70(bool) = REF_56 == 0
CONDITION TMP_70"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39319.sol-Congress-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_69(bool) = msg.sender != owner
CONDITION TMP_69"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39319.sol-Congress-receiveApproval(address,uint256,ERC20,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _token.transferFrom(_from,this,_value)

IRs:
TMP_16(bool) = HIGH_LEVEL_CALL, dest:_token(ERC20), function:transferFrom, arguments:['_from', 'this', '_value']  
TMP_17 = UnaryType.BANG TMP_16 
CONDITION TMP_17"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ReceivedTokens(_from,_value,_token,_extraData)

IRs:
Emit ReceivedTokens(_from,_value,_token,_extraData)"];
}
// Function: 39319.sol-Congress-removeMember(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: IF 1

EXPRESSION:
memberId[targetMember] == 0

IRs:
REF_9(uint256) -> memberId[targetMember]
TMP_35(bool) = REF_9 == 0
CONDITION TMP_35"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
targetId = memberId[targetMember]

IRs:
REF_10(uint256) -> memberId[targetMember]
targetId(uint256) := REF_10(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
lastId = members.length - 1

IRs:
REF_11 -> LENGTH members
TMP_36(uint256) = REF_11 - 1
lastId(uint256) := TMP_36(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
moved = members[lastId]

IRs:
REF_12(Congress.Member) -> members[lastId]
moved(Congress.Member) := REF_12(Congress.Member)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
members[targetId] = moved

IRs:
REF_13(Congress.Member) -> members[targetId]
REF_13(Congress.Member) (->members) := moved(Congress.Member)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
memberId[moved.member] = targetId

IRs:
REF_14(address) -> moved.member
REF_15(uint256) -> memberId[REF_14]
REF_15(uint256) (->memberId) := targetId(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
memberId[targetMember] = 0

IRs:
REF_16(uint256) -> memberId[targetMember]
REF_16(uint256) (->memberId) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
delete members[lastId]

IRs:
REF_17(Congress.Member) -> members[lastId]
members = delete REF_17 "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
-- members.length

IRs:
REF_18 -> LENGTH members
REF_18(-> members) = REF_18 - 1"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
MembershipChanged(targetMember,false)

IRs:
Emit MembershipChanged(targetMember,False)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
13->1;
}
// Function: 39319.sol-Congress-setHammer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
hammer = _hammer

IRs:
hammer(address) := _hammer(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyHammer()

IRs:
MODIFIER_CALL, Destroyable.onlyHammer()()"];
2->1;
}
// Function: 39319.sol-Congress-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39319.sol-Congress-vote(uint256,bool,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
p = proposals[id]

IRs:
REF_31(Congress.Proposal) -> proposals[id]
p(Congress.Proposal) := REF_31(Congress.Proposal)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
p.voted[msg.sender] == true

IRs:
REF_32(mapping(address => bool)) -> p.voted
REF_33(bool) -> REF_32[msg.sender]
TMP_49(bool) = REF_33 == True
CONDITION TMP_49"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
p.voted[msg.sender] = true

IRs:
REF_34(mapping(address => bool)) -> p.voted
REF_35(bool) -> REF_34[msg.sender]
REF_35(bool) (->p) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
p.numberOfVotes ++

IRs:
REF_36(uint256) -> p.numberOfVotes
TMP_50(uint256) := REF_36(uint256)
REF_36(-> p) = REF_36 + 1"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
supportsProposal

IRs:
CONDITION supportsProposal"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
p.currentResult ++

IRs:
REF_37(int256) -> p.currentResult
TMP_51(int256) := REF_37(int256)
REF_37(-> p) = REF_37 + 1"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
p.currentResult --

IRs:
REF_38(int256) -> p.currentResult
TMP_52(int256) := REF_38(int256)
REF_38(-> p) = REF_38 - 1"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Voted(id,supportsProposal,msg.sender,justificationText)

IRs:
Emit Voted(id,supportsProposal,msg.sender,justificationText)"];
11->13;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyMembers()

IRs:
MODIFIER_CALL, Congress.onlyMembers()()"];
12->1;
13[label="Node Type: RETURN 13

EXPRESSION:
vote

IRs:
RETURN vote"];
}
// Function: 39319.sol-Destroyable-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
suicide(address)(msg.sender)

IRs:
TMP_3(None) = SOLIDITY_CALL suicide(address)(msg.sender)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyHammer()

IRs:
MODIFIER_CALL, Destroyable.onlyHammer()()"];
2->1;
}
// Function: 39319.sol-Destroyable-onlyHammer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != hammer

IRs:
TMP_5(bool) = msg.sender != hammer
CONDITION TMP_5"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39319.sol-Destroyable-setHammer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
hammer = _hammer

IRs:
hammer(address) := _hammer(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyHammer()

IRs:
MODIFIER_CALL, Destroyable.onlyHammer()()"];
2->1;
}
// Function: 39319.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 39319.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 39319.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 39319.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 39319.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 39319.sol-Object-Object()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
hammer = msg.sender

IRs:
hammer(address) := msg.sender(address)"];
}
// Function: 39319.sol-Object-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
suicide(address)(msg.sender)

IRs:
TMP_7(None) = SOLIDITY_CALL suicide(address)(msg.sender)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyHammer()

IRs:
MODIFIER_CALL, Destroyable.onlyHammer()()"];
2->1;
}
// Function: 39319.sol-Object-onlyHammer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != hammer

IRs:
TMP_10(bool) = msg.sender != hammer
CONDITION TMP_10"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39319.sol-Object-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_11(bool) = msg.sender != owner
CONDITION TMP_11"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39319.sol-Object-setHammer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
hammer = _hammer

IRs:
hammer(address) := _hammer(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyHammer()

IRs:
MODIFIER_CALL, Destroyable.onlyHammer()()"];
2->1;
}
// Function: 39319.sol-Object-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39319.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_1(bool) = msg.sender != owner
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39319.sol-Owned-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39319.sol-Recipient-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ReceivedEther(msg.sender,msg.value)

IRs:
Emit ReceivedEther(msg.sender,msg.value)"];
}
// Function: 39319.sol-Recipient-receiveApproval(address,uint256,ERC20,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _token.transferFrom(_from,this,_value)

IRs:
TMP_12(bool) = HIGH_LEVEL_CALL, dest:_token(ERC20), function:transferFrom, arguments:['_from', 'this', '_value']  
TMP_13 = UnaryType.BANG TMP_12 
CONDITION TMP_13"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ReceivedTokens(_from,_value,_token,_extraData)

IRs:
Emit ReceivedTokens(_from,_value,_token,_extraData)"];
}
}
