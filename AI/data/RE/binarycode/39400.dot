digraph G {
// Function: 39400.sol-DSSafeAddSub-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! safeToAdd(a,b)

IRs:
TMP_442(bool) = INTERNAL_CALL, DSSafeAddSub.safeToAdd(uint256,uint256)(a,b)
TMP_443 = UnaryType.BANG TMP_442 
CONDITION TMP_443"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
a + b

IRs:
TMP_444(uint256) = a + b
RETURN TMP_444"];
}
// Function: 39400.sol-DSSafeAddSub-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! safeToSubtract(a,b)

IRs:
TMP_446(bool) = INTERNAL_CALL, DSSafeAddSub.safeToSubtract(uint256,uint256)(a,b)
TMP_447 = UnaryType.BANG TMP_446 
CONDITION TMP_447"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
a - b

IRs:
TMP_448(uint256) = a - b
RETURN TMP_448"];
}
// Function: 39400.sol-DSSafeAddSub-safeToAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(a + b >= a)

IRs:
TMP_440(uint256) = a + b
TMP_441(bool) = TMP_440 >= a
RETURN TMP_441"];
}
// Function: 39400.sol-DSSafeAddSub-safeToSubtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(b <= a)

IRs:
TMP_445(bool) = b <= a
RETURN TMP_445"];
}
// Function: 39400.sol-Etheroll-Etheroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
treasury = msg.sender

IRs:
treasury(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_816(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS)

IRs:
TMP_817(bytes1) = proofType_TLSNotary | proofStorage_IPFS
INTERNAL_CALL, usingOraclize.oraclize_setProof(bytes1)(TMP_817)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownerSetHouseEdge(990)

IRs:
INTERNAL_CALL, Etheroll.ownerSetHouseEdge(uint256)(990)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownerSetMaxProfitAsPercentOfHouse(10000)

IRs:
INTERNAL_CALL, Etheroll.ownerSetMaxProfitAsPercentOfHouse(uint256)(10000)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownerSetMinBet(100000000000000000)

IRs:
INTERNAL_CALL, Etheroll.ownerSetMinBet(uint256)(100000000000000000)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
gasForOraclize = 250000

IRs:
gasForOraclize(uint32) := 250000(uint256)"];
}
// Function: 39400.sol-Etheroll-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_477 = new bytes(0)
INTERNAL_CALL, Etheroll.__callback(bytes32,string,bytes)(myid,result,TMP_477)"];
}
// Function: 39400.sol-Etheroll-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->45;
1[label="Node Type: IF 1

EXPRESSION:
playerAddress[myid] == 0x0

IRs:
REF_512(address) -> playerAddress[myid]
TMP_839(bool) = REF_512 == 0
CONDITION TMP_839"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
sl_result = result.toSlice()

IRs:
TMP_840(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.toSlice(string), arguments:['result'] 
sl_result(strings.slice) := TMP_840(strings.slice)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
sl_result.beyond([.toSlice()).until(].toSlice())

IRs:
TMP_841(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.toSlice(string), arguments:['['] 
TMP_842(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.beyond(strings.slice,strings.slice), arguments:['sl_result', 'TMP_841'] 
TMP_843(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.toSlice(string), arguments:[']'] 
TMP_844(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.until(strings.slice,strings.slice), arguments:['TMP_842', 'TMP_843'] "];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
serialNumberOfResult = parseInt(sl_result.split(, .toSlice()).toString())

IRs:
TMP_845(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.toSlice(string), arguments:[', '] 
TMP_846(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.split(strings.slice,strings.slice), arguments:['sl_result', 'TMP_845'] 
TMP_847(string) = LIBRARY_CALL, dest:strings, function:strings.toString(strings.slice), arguments:['TMP_846'] 
TMP_848(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string)(TMP_847)
serialNumberOfResult(uint256) := TMP_848(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
playerRandomResult[myid] = parseInt(sl_result.beyond([.toSlice()).until(].toSlice()).toString())

IRs:
REF_521(uint256) -> playerRandomResult[myid]
TMP_849(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.toSlice(string), arguments:['['] 
TMP_850(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.beyond(strings.slice,strings.slice), arguments:['sl_result', 'TMP_849'] 
TMP_851(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.toSlice(string), arguments:[']'] 
TMP_852(strings.slice) = LIBRARY_CALL, dest:strings, function:strings.until(strings.slice,strings.slice), arguments:['TMP_850', 'TMP_851'] 
TMP_853(string) = LIBRARY_CALL, dest:strings, function:strings.toString(strings.slice), arguments:['TMP_852'] 
TMP_854(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string)(TMP_853)
REF_521(uint256) (->playerRandomResult) := TMP_854(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
playerDieResult[myid] = uint256(sha3()(playerRandomResult[myid],proof)) % 100 + 1

IRs:
REF_527(uint256) -> playerDieResult[myid]
REF_528(uint256) -> playerRandomResult[myid]
TMP_855(bytes32) = SOLIDITY_CALL sha3()(REF_528,proof)
TMP_856 = CONVERT TMP_855 to uint256
TMP_857(uint256) = TMP_856 % 100
TMP_858(uint256) = TMP_857 + 1
REF_527(uint256) (->playerDieResult) := TMP_858(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
playerTempAddress[myid] = playerAddress[myid]

IRs:
REF_529(address) -> playerTempAddress[myid]
REF_530(address) -> playerAddress[myid]
REF_529(address) (->playerTempAddress) := REF_530(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
delete playerAddress[myid]

IRs:
REF_531(address) -> playerAddress[myid]
playerAddress = delete REF_531 "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
playerTempReward[myid] = playerProfit[myid]

IRs:
REF_532(uint256) -> playerTempReward[myid]
REF_533(uint256) -> playerProfit[myid]
REF_532(uint256) (->playerTempReward) := REF_533(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
playerProfit[myid] = 0

IRs:
REF_534(uint256) -> playerProfit[myid]
REF_534(uint256) (->playerProfit) := 0(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
maxPendingPayouts = safeSub(maxPendingPayouts,playerTempReward[myid])

IRs:
REF_535(uint256) -> playerTempReward[myid]
TMP_859(uint256) = INTERNAL_CALL, DSSafeAddSub.safeSub(uint256,uint256)(maxPendingPayouts,REF_535)
maxPendingPayouts(uint256) := TMP_859(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
playerTempBetValue[myid] = playerBetValue[myid]

IRs:
REF_536(uint256) -> playerTempBetValue[myid]
REF_537(uint256) -> playerBetValue[myid]
REF_536(uint256) (->playerTempBetValue) := REF_537(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
playerBetValue[myid] = 0

IRs:
REF_538(uint256) -> playerBetValue[myid]
REF_538(uint256) (->playerBetValue) := 0(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
playerDieResult[myid] == 0

IRs:
REF_539(uint256) -> playerDieResult[myid]
TMP_860(bool) = REF_539 == 0
CONDITION TMP_860"];
16->17[label="True"];
16->23[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
LogResult(serialNumberOfResult,playerBetId[myid],playerTempAddress[myid],playerNumber[myid],playerDieResult[myid],playerTempBetValue[myid],3,proof)

IRs:
REF_540(bytes32) -> playerBetId[myid]
REF_541(address) -> playerTempAddress[myid]
REF_542(uint256) -> playerNumber[myid]
REF_543(uint256) -> playerDieResult[myid]
REF_544(uint256) -> playerTempBetValue[myid]
Emit LogResult(serialNumberOfResult,REF_540,REF_541,REF_542,REF_543,REF_544,3,proof)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
! playerTempAddress[myid].send(playerTempBetValue[myid])

IRs:
REF_545(address) -> playerTempAddress[myid]
REF_547(uint256) -> playerTempBetValue[myid]
TMP_862 = SEND dest:REF_545 value:REF_547
TMP_863 = UnaryType.BANG TMP_862 
CONDITION TMP_863"];
18->19[label="True"];
18->21[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
LogResult(serialNumberOfResult,playerBetId[myid],playerTempAddress[myid],playerNumber[myid],playerDieResult[myid],playerTempBetValue[myid],4,proof)

IRs:
REF_548(bytes32) -> playerBetId[myid]
REF_549(address) -> playerTempAddress[myid]
REF_550(uint256) -> playerNumber[myid]
REF_551(uint256) -> playerDieResult[myid]
REF_552(uint256) -> playerTempBetValue[myid]
Emit LogResult(serialNumberOfResult,REF_548,REF_549,REF_550,REF_551,REF_552,4,proof)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
playerPendingWithdrawals[playerTempAddress[myid]] = safeAdd(playerPendingWithdrawals[playerTempAddress[myid]],playerTempBetValue[myid])

IRs:
REF_553(address) -> playerTempAddress[myid]
REF_554(uint256) -> playerPendingWithdrawals[REF_553]
REF_555(address) -> playerTempAddress[myid]
REF_556(uint256) -> playerPendingWithdrawals[REF_555]
REF_557(uint256) -> playerTempBetValue[myid]
TMP_865(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(REF_556,REF_557)
REF_554(uint256) (->playerPendingWithdrawals) := TMP_865(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: RETURN 22
"];
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
playerDieResult[myid] < playerNumber[myid]

IRs:
REF_558(uint256) -> playerDieResult[myid]
REF_559(uint256) -> playerNumber[myid]
TMP_866(bool) = REF_558 < REF_559
CONDITION TMP_866"];
24->25[label="True"];
24->35[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
contractBalance = safeSub(contractBalance,playerTempReward[myid])

IRs:
REF_560(uint256) -> playerTempReward[myid]
TMP_867(uint256) = INTERNAL_CALL, DSSafeAddSub.safeSub(uint256,uint256)(contractBalance,REF_560)
contractBalance(uint256) := TMP_867(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
totalWeiWon = safeAdd(totalWeiWon,playerTempReward[myid])

IRs:
REF_561(uint256) -> playerTempReward[myid]
TMP_868(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(totalWeiWon,REF_561)
totalWeiWon(uint256) := TMP_868(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
playerTempReward[myid] = safeAdd(playerTempReward[myid],playerTempBetValue[myid])

IRs:
REF_562(uint256) -> playerTempReward[myid]
REF_563(uint256) -> playerTempReward[myid]
REF_564(uint256) -> playerTempBetValue[myid]
TMP_869(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(REF_563,REF_564)
REF_562(uint256) (->playerTempReward) := TMP_869(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
LogResult(serialNumberOfResult,playerBetId[myid],playerTempAddress[myid],playerNumber[myid],playerDieResult[myid],playerTempReward[myid],1,proof)

IRs:
REF_565(bytes32) -> playerBetId[myid]
REF_566(address) -> playerTempAddress[myid]
REF_567(uint256) -> playerNumber[myid]
REF_568(uint256) -> playerDieResult[myid]
REF_569(uint256) -> playerTempReward[myid]
Emit LogResult(serialNumberOfResult,REF_565,REF_566,REF_567,REF_568,REF_569,1,proof)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, Etheroll.setMaxProfit()()"];
29->30;
30[label="Node Type: IF 30

EXPRESSION:
! playerTempAddress[myid].send(playerTempReward[myid])

IRs:
REF_570(address) -> playerTempAddress[myid]
REF_572(uint256) -> playerTempReward[myid]
TMP_872 = SEND dest:REF_570 value:REF_572
TMP_873 = UnaryType.BANG TMP_872 
CONDITION TMP_873"];
30->31[label="True"];
30->33[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
LogResult(serialNumberOfResult,playerBetId[myid],playerTempAddress[myid],playerNumber[myid],playerDieResult[myid],playerTempReward[myid],2,proof)

IRs:
REF_573(bytes32) -> playerBetId[myid]
REF_574(address) -> playerTempAddress[myid]
REF_575(uint256) -> playerNumber[myid]
REF_576(uint256) -> playerDieResult[myid]
REF_577(uint256) -> playerTempReward[myid]
Emit LogResult(serialNumberOfResult,REF_573,REF_574,REF_575,REF_576,REF_577,2,proof)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
playerPendingWithdrawals[playerTempAddress[myid]] = safeAdd(playerPendingWithdrawals[playerTempAddress[myid]],playerTempReward[myid])

IRs:
REF_578(address) -> playerTempAddress[myid]
REF_579(uint256) -> playerPendingWithdrawals[REF_578]
REF_580(address) -> playerTempAddress[myid]
REF_581(uint256) -> playerPendingWithdrawals[REF_580]
REF_582(uint256) -> playerTempReward[myid]
TMP_875(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(REF_581,REF_582)
REF_579(uint256) (->playerPendingWithdrawals) := TMP_875(uint256)"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: RETURN 34
"];
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: IF 36

EXPRESSION:
playerDieResult[myid] >= playerNumber[myid]

IRs:
REF_583(uint256) -> playerDieResult[myid]
REF_584(uint256) -> playerNumber[myid]
TMP_876(bool) = REF_583 >= REF_584
CONDITION TMP_876"];
36->37[label="True"];
36->44[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
LogResult(serialNumberOfResult,playerBetId[myid],playerTempAddress[myid],playerNumber[myid],playerDieResult[myid],playerTempBetValue[myid],0,proof)

IRs:
REF_585(bytes32) -> playerBetId[myid]
REF_586(address) -> playerTempAddress[myid]
REF_587(uint256) -> playerNumber[myid]
REF_588(uint256) -> playerDieResult[myid]
REF_589(uint256) -> playerTempBetValue[myid]
Emit LogResult(serialNumberOfResult,REF_585,REF_586,REF_587,REF_588,REF_589,0,proof)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
contractBalance = safeAdd(contractBalance,(playerTempBetValue[myid] - 1))

IRs:
REF_590(uint256) -> playerTempBetValue[myid]
TMP_878(uint256) = REF_590 - 1
TMP_879(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(contractBalance,TMP_878)
contractBalance(uint256) := TMP_879(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, Etheroll.setMaxProfit()()"];
39->40;
40[label="Node Type: IF 40

EXPRESSION:
! playerTempAddress[myid].send(1)

IRs:
REF_591(address) -> playerTempAddress[myid]
TMP_881 = SEND dest:REF_591 value:1
TMP_882 = UnaryType.BANG TMP_881 
CONDITION TMP_882"];
40->41[label="True"];
40->42[label="False"];
41[label="Node Type: EXPRESSION 41

EXPRESSION:
playerPendingWithdrawals[playerTempAddress[myid]] = safeAdd(playerPendingWithdrawals[playerTempAddress[myid]],1)

IRs:
REF_593(address) -> playerTempAddress[myid]
REF_594(uint256) -> playerPendingWithdrawals[REF_593]
REF_595(address) -> playerTempAddress[myid]
REF_596(uint256) -> playerPendingWithdrawals[REF_595]
TMP_883(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(REF_596,1)
REF_594(uint256) (->playerPendingWithdrawals) := TMP_883(uint256)"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: RETURN 43
"];
44[label="Node Type: END_IF 44
"];
45[label="Node Type: EXPRESSION 45

EXPRESSION:
onlyOraclize()

IRs:
MODIFIER_CALL, Etheroll.onlyOraclize()()"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
payoutsAreActive()

IRs:
MODIFIER_CALL, Etheroll.payoutsAreActive()()"];
46->1;
}
// Function: 39400.sol-Etheroll-betIsValid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
((((_betSize * (100 - (safeSub(_playerNumber,1)))) / (safeSub(_playerNumber,1)) + _betSize)) * houseEdge / houseEdgeDivisor) - _betSize > maxProfit || _betSize < minBet || _playerNumber < minNumber || _playerNumber > maxNumber

IRs:
TMP_938(uint256) = INTERNAL_CALL, DSSafeAddSub.safeSub(uint256,uint256)(_playerNumber,1)
TMP_939(uint256) = 100 - TMP_938
TMP_940(uint256) = _betSize * TMP_939
TMP_941(uint256) = INTERNAL_CALL, DSSafeAddSub.safeSub(uint256,uint256)(_playerNumber,1)
TMP_942(uint256) = TMP_940 / TMP_941
TMP_943(uint256) = TMP_942 + _betSize
TMP_944(uint256) = TMP_943 * houseEdge
TMP_945(uint256) = TMP_944 / houseEdgeDivisor
TMP_946(uint256) = TMP_945 - _betSize
TMP_947(bool) = TMP_946 > maxProfit
TMP_948(bool) = _betSize < minBet
TMP_949(bool) = TMP_947 || TMP_948
TMP_950(bool) = _playerNumber < minNumber
TMP_951(bool) = TMP_949 || TMP_950
TMP_952(bool) = _playerNumber > maxNumber
TMP_953(bool) = TMP_951 || TMP_952
CONDITION TMP_953"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39400.sol-Etheroll-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_935(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_936 = CONVERT TMP_935 to OraclizeI
oraclize(OraclizeI) := TMP_936(OraclizeI)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 39400.sol-Etheroll-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractBalance = safeAdd(contractBalance,msg.value)

IRs:
TMP_891(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(contractBalance,msg.value)
contractBalance(uint256) := TMP_891(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, Etheroll.setMaxProfit()()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyTreasury()

IRs:
MODIFIER_CALL, Etheroll.onlyTreasury()()"];
3->1;
}
// Function: 39400.sol-Etheroll-gameIsActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
gamePaused == true

IRs:
TMP_954(bool) = gamePaused == True
CONDITION TMP_954"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39400.sol-Etheroll-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 39400.sol-Etheroll-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_698 = CONVERT _haystack to bytes
h(bytes) := TMP_698(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_699 = CONVERT _needle to bytes
n(bytes) := TMP_699(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_435 -> LENGTH h
TMP_700(bool) = REF_435 < 1
REF_436 -> LENGTH n
TMP_701(bool) = REF_436 < 1
TMP_702(bool) = TMP_700 || TMP_701
REF_437 -> LENGTH n
REF_438 -> LENGTH h
TMP_703(bool) = REF_437 > REF_438
TMP_704(bool) = TMP_702 || TMP_703
CONDITION TMP_704"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_705(uint256) = 0 - 1
RETURN TMP_705"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_439 -> LENGTH h
TMP_706(uint256) = 2 ** 128
TMP_707(uint256) = TMP_706 - 1
TMP_708(bool) = REF_439 > TMP_707
CONDITION TMP_708"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_709(uint256) = 0 - 1
RETURN TMP_709"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_440 -> LENGTH h
TMP_710(bool) = i < REF_440
CONDITION TMP_710"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_441(None) -> h[i]
REF_442(None) -> n[0]
TMP_711(bool) = REF_441 == REF_442
CONDITION TMP_711"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_443 -> LENGTH n
TMP_712(bool) = subindex < REF_443
TMP_713(uint256) = i + subindex
REF_444 -> LENGTH h
TMP_714(bool) = TMP_713 < REF_444
TMP_715(bool) = TMP_712 && TMP_714
TMP_716(uint256) = i + subindex
REF_445(None) -> h[TMP_716]
REF_446(None) -> n[subindex]
TMP_717(bool) = REF_445 == REF_446
TMP_718(bool) = TMP_715 && TMP_717
CONDITION TMP_718"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_719(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_447 -> LENGTH n
TMP_720(bool) = subindex == REF_447
CONDITION TMP_720"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_721 = CONVERT i to int256
RETURN TMP_721"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_722(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_723(uint256) = 0 - 1
RETURN TMP_723"];
}
// Function: 39400.sol-Etheroll-onlyOraclize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != oraclize_cbAddress()

IRs:
TMP_956(address) = INTERNAL_CALL, usingOraclize.oraclize_cbAddress()()
TMP_957(bool) = msg.sender != TMP_956
CONDITION TMP_957"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39400.sol-Etheroll-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_958(bool) = msg.sender != owner
CONDITION TMP_958"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39400.sol-Etheroll-onlyTreasury()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != treasury

IRs:
TMP_959(bool) = msg.sender != treasury
CONDITION TMP_959"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39400.sol-Etheroll-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_926 = CONVERT OAR to address
TMP_927(bool) = TMP_926 == 0
TMP_928 = CONVERT OAR to address
TMP_929(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_928)
TMP_930(bool) = TMP_929 == 0
TMP_931(bool) = TMP_927 || TMP_930
CONDITION TMP_931"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_932(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_933(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_934 = CONVERT TMP_933 to OraclizeI
oraclize(OraclizeI) := TMP_934(OraclizeI)"];
4->5;
5[label="Node Type: _ 5
"];
}
// Function: 39400.sol-Etheroll-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_651(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_651"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39400.sol-Etheroll-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_479(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_479"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39400.sol-Etheroll-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_481(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_481"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_483(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_483(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_484(uint256) = tx.gasprice * 200000
TMP_485(uint256) = 1000000000000000000 + TMP_484
TMP_486(bool) = price > TMP_485
CONDITION TMP_486"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_488(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_488"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_511(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_511(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_512(uint256) = tx.gasprice * 200000
TMP_513(uint256) = 1000000000000000000 + TMP_512
TMP_514(bool) = price > TMP_513
CONDITION TMP_514"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_516(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_516"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_532(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_532(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_533(uint256) = tx.gasprice * gaslimit
TMP_534(uint256) = 1000000000000000000 + TMP_533
TMP_535(bool) = price > TMP_534
CONDITION TMP_535"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_537(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_537"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_504(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_504(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_505(uint256) = tx.gasprice * gaslimit
TMP_506(uint256) = 1000000000000000000 + TMP_505
TMP_507(bool) = price > TMP_506
CONDITION TMP_507"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_509(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_509"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_572(string[])  = new string[](1)
dynargs(string[]) = ['TMP_572(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_298(string) -> dynargs[0]
REF_299(string) -> args[0]
REF_298(string) (->dynargs) := REF_299(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_573(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_573"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_584(string[])  = new string[](1)
dynargs(string[]) = ['TMP_584(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_304(string) -> dynargs[0]
REF_305(string) -> args[0]
REF_304(string) (->dynargs) := REF_305(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_585(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_585"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_588(string[])  = new string[](2)
dynargs(string[]) = ['TMP_588(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_306(string) -> dynargs[0]
REF_307(string) -> args[0]
REF_306(string) (->dynargs) := REF_307(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_308(string) -> dynargs[1]
REF_309(string) -> args[1]
REF_308(string) (->dynargs) := REF_309(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_589(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_589"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_600(string[])  = new string[](2)
dynargs(string[]) = ['TMP_600(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_318(string) -> dynargs[0]
REF_319(string) -> args[0]
REF_318(string) (->dynargs) := REF_319(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_320(string) -> dynargs[1]
REF_321(string) -> args[1]
REF_320(string) (->dynargs) := REF_321(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_601(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_601"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_604(string[])  = new string[](3)
dynargs(string[]) = ['TMP_604(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_322(string) -> dynargs[0]
REF_323(string) -> args[0]
REF_322(string) (->dynargs) := REF_323(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_324(string) -> dynargs[1]
REF_325(string) -> args[1]
REF_324(string) (->dynargs) := REF_325(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_326(string) -> dynargs[2]
REF_327(string) -> args[2]
REF_326(string) (->dynargs) := REF_327(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_605(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_605"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_616(string[])  = new string[](3)
dynargs(string[]) = ['TMP_616(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_340(string) -> dynargs[0]
REF_341(string) -> args[0]
REF_340(string) (->dynargs) := REF_341(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_342(string) -> dynargs[1]
REF_343(string) -> args[1]
REF_342(string) (->dynargs) := REF_343(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_344(string) -> dynargs[2]
REF_345(string) -> args[2]
REF_344(string) (->dynargs) := REF_345(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_617(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_617"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_620(string[])  = new string[](4)
dynargs(string[]) = ['TMP_620(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_346(string) -> dynargs[0]
REF_347(string) -> args[0]
REF_346(string) (->dynargs) := REF_347(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_348(string) -> dynargs[1]
REF_349(string) -> args[1]
REF_348(string) (->dynargs) := REF_349(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_350(string) -> dynargs[2]
REF_351(string) -> args[2]
REF_350(string) (->dynargs) := REF_351(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_352(string) -> dynargs[3]
REF_353(string) -> args[3]
REF_352(string) (->dynargs) := REF_353(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_621(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_621"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_632(string[])  = new string[](4)
dynargs(string[]) = ['TMP_632(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_370(string) -> dynargs[0]
REF_371(string) -> args[0]
REF_370(string) (->dynargs) := REF_371(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_372(string) -> dynargs[1]
REF_373(string) -> args[1]
REF_372(string) (->dynargs) := REF_373(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_374(string) -> dynargs[2]
REF_375(string) -> args[2]
REF_374(string) (->dynargs) := REF_375(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_376(string) -> dynargs[3]
REF_377(string) -> args[3]
REF_376(string) (->dynargs) := REF_377(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_633(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_633"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_636(string[])  = new string[](5)
dynargs(string[]) = ['TMP_636(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_378(string) -> dynargs[0]
REF_379(string) -> args[0]
REF_378(string) (->dynargs) := REF_379(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_380(string) -> dynargs[1]
REF_381(string) -> args[1]
REF_380(string) (->dynargs) := REF_381(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_382(string) -> dynargs[2]
REF_383(string) -> args[2]
REF_382(string) (->dynargs) := REF_383(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_384(string) -> dynargs[3]
REF_385(string) -> args[3]
REF_384(string) (->dynargs) := REF_385(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_386(string) -> dynargs[4]
REF_387(string) -> args[4]
REF_386(string) (->dynargs) := REF_387(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_637(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_637"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_648(string[])  = new string[](5)
dynargs(string[]) = ['TMP_648(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_408(string) -> dynargs[0]
REF_409(string) -> args[0]
REF_408(string) (->dynargs) := REF_409(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_410(string) -> dynargs[1]
REF_411(string) -> args[1]
REF_410(string) (->dynargs) := REF_411(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_412(string) -> dynargs[2]
REF_413(string) -> args[2]
REF_412(string) (->dynargs) := REF_413(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_414(string) -> dynargs[3]
REF_415(string) -> args[3]
REF_414(string) (->dynargs) := REF_415(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_416(string) -> dynargs[4]
REF_417(string) -> args[4]
REF_416(string) (->dynargs) := REF_417(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_649(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_649"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_539(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_539(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_540(uint256) = tx.gasprice * 200000
TMP_541(uint256) = 1000000000000000000 + TMP_540
TMP_542(bool) = price > TMP_541
CONDITION TMP_542"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_543(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_543(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_545(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_545"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_563(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_563(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_564(uint256) = tx.gasprice * gaslimit
TMP_565(uint256) = 1000000000000000000 + TMP_564
TMP_566(bool) = price > TMP_565
CONDITION TMP_566"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_567(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_567(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_569(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_569"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_490(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_490(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_491(uint256) = tx.gasprice * 200000
TMP_492(uint256) = 1000000000000000000 + TMP_491
TMP_493(bool) = price > TMP_492
CONDITION TMP_493"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_495(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_495"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_518(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_518(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_519(uint256) = tx.gasprice * 200000
TMP_520(uint256) = 1000000000000000000 + TMP_519
TMP_521(bool) = price > TMP_520
CONDITION TMP_521"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_523(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_523"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_525(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_525(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_526(uint256) = tx.gasprice * gaslimit
TMP_527(uint256) = 1000000000000000000 + TMP_526
TMP_528(bool) = price > TMP_527
CONDITION TMP_528"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_530(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_530"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_497(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_497(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_498(uint256) = tx.gasprice * gaslimit
TMP_499(uint256) = 1000000000000000000 + TMP_498
TMP_500(bool) = price > TMP_499
CONDITION TMP_500"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_502(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_502"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_576(string[])  = new string[](1)
dynargs(string[]) = ['TMP_576(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_300(string) -> dynargs[0]
REF_301(string) -> args[0]
REF_300(string) (->dynargs) := REF_301(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_577(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_577"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_580(string[])  = new string[](1)
dynargs(string[]) = ['TMP_580(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_302(string) -> dynargs[0]
REF_303(string) -> args[0]
REF_302(string) (->dynargs) := REF_303(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_581(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_581"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_592(string[])  = new string[](2)
dynargs(string[]) = ['TMP_592(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_310(string) -> dynargs[0]
REF_311(string) -> args[0]
REF_310(string) (->dynargs) := REF_311(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_312(string) -> dynargs[1]
REF_313(string) -> args[1]
REF_312(string) (->dynargs) := REF_313(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_593(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_593"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_596(string[])  = new string[](2)
dynargs(string[]) = ['TMP_596(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_314(string) -> dynargs[0]
REF_315(string) -> args[0]
REF_314(string) (->dynargs) := REF_315(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_316(string) -> dynargs[1]
REF_317(string) -> args[1]
REF_316(string) (->dynargs) := REF_317(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_597(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_597"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_608(string[])  = new string[](3)
dynargs(string[]) = ['TMP_608(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_328(string) -> dynargs[0]
REF_329(string) -> args[0]
REF_328(string) (->dynargs) := REF_329(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_330(string) -> dynargs[1]
REF_331(string) -> args[1]
REF_330(string) (->dynargs) := REF_331(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_332(string) -> dynargs[2]
REF_333(string) -> args[2]
REF_332(string) (->dynargs) := REF_333(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_609(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_609"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_612(string[])  = new string[](3)
dynargs(string[]) = ['TMP_612(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_334(string) -> dynargs[0]
REF_335(string) -> args[0]
REF_334(string) (->dynargs) := REF_335(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_336(string) -> dynargs[1]
REF_337(string) -> args[1]
REF_336(string) (->dynargs) := REF_337(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_338(string) -> dynargs[2]
REF_339(string) -> args[2]
REF_338(string) (->dynargs) := REF_339(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_613(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_613"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_624(string[])  = new string[](4)
dynargs(string[]) = ['TMP_624(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_354(string) -> dynargs[0]
REF_355(string) -> args[0]
REF_354(string) (->dynargs) := REF_355(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_356(string) -> dynargs[1]
REF_357(string) -> args[1]
REF_356(string) (->dynargs) := REF_357(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_358(string) -> dynargs[2]
REF_359(string) -> args[2]
REF_358(string) (->dynargs) := REF_359(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_360(string) -> dynargs[3]
REF_361(string) -> args[3]
REF_360(string) (->dynargs) := REF_361(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_625(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_625"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_628(string[])  = new string[](4)
dynargs(string[]) = ['TMP_628(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_362(string) -> dynargs[0]
REF_363(string) -> args[0]
REF_362(string) (->dynargs) := REF_363(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_364(string) -> dynargs[1]
REF_365(string) -> args[1]
REF_364(string) (->dynargs) := REF_365(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_366(string) -> dynargs[2]
REF_367(string) -> args[2]
REF_366(string) (->dynargs) := REF_367(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_368(string) -> dynargs[3]
REF_369(string) -> args[3]
REF_368(string) (->dynargs) := REF_369(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_629(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_629"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_640(string[])  = new string[](5)
dynargs(string[]) = ['TMP_640(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_388(string) -> dynargs[0]
REF_389(string) -> args[0]
REF_388(string) (->dynargs) := REF_389(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_390(string) -> dynargs[1]
REF_391(string) -> args[1]
REF_390(string) (->dynargs) := REF_391(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_392(string) -> dynargs[2]
REF_393(string) -> args[2]
REF_392(string) (->dynargs) := REF_393(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_394(string) -> dynargs[3]
REF_395(string) -> args[3]
REF_394(string) (->dynargs) := REF_395(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_396(string) -> dynargs[4]
REF_397(string) -> args[4]
REF_396(string) (->dynargs) := REF_397(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_641(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_641"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_644(string[])  = new string[](5)
dynargs(string[]) = ['TMP_644(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_398(string) -> dynargs[0]
REF_399(string) -> args[0]
REF_398(string) (->dynargs) := REF_399(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_400(string) -> dynargs[1]
REF_401(string) -> args[1]
REF_400(string) (->dynargs) := REF_401(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_402(string) -> dynargs[2]
REF_403(string) -> args[2]
REF_402(string) (->dynargs) := REF_403(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_404(string) -> dynargs[3]
REF_405(string) -> args[3]
REF_404(string) (->dynargs) := REF_405(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_406(string) -> dynargs[4]
REF_407(string) -> args[4]
REF_406(string) (->dynargs) := REF_407(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_645(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_645"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_547(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_547(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_548(uint256) = tx.gasprice * 200000
TMP_549(uint256) = 1000000000000000000 + TMP_548
TMP_550(bool) = price > TMP_549
CONDITION TMP_550"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_551(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_551(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_553(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_553"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_555(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_555(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_556(uint256) = tx.gasprice * gaslimit
TMP_557(uint256) = 1000000000000000000 + TMP_556
TMP_558(bool) = price > TMP_557
CONDITION TMP_558"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_559(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_559(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_561(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_561"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-Etheroll-oraclize_setConfig(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setConfig(config)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setConfig, arguments:['config']  
RETURN TMP_657"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39400.sol-Etheroll-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_655"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39400.sol-Etheroll-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_458(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_459(bool) = TMP_458 > 0
CONDITION TMP_459"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_460 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_460(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_461(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_462(bool) = TMP_461 > 0
CONDITION TMP_462"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_463 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_463(OraclizeAddrResolverI)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_464(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_465(bool) = TMP_464 > 0
CONDITION TMP_465"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_466 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_466(OraclizeAddrResolverI)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_467(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_468(bool) = TMP_467 > 0
CONDITION TMP_468"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_469 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_469(OraclizeAddrResolverI)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_470(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_471(bool) = TMP_470 > 0
CONDITION TMP_471"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_472 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_472(OraclizeAddrResolverI)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_473(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_474(bool) = TMP_473 > 0
CONDITION TMP_474"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_475 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_475(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 39400.sol-Etheroll-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_653"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39400.sol-Etheroll-ownerChangeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Etheroll.onlyOwner()()"];
2->1;
}
// Function: 39400.sol-Etheroll-ownerPauseGame(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gamePaused = newStatus

IRs:
gamePaused(bool) := newStatus(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Etheroll.onlyOwner()()"];
2->1;
}
// Function: 39400.sol-Etheroll-ownerPausePayouts(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
payoutsPaused = newPayoutStatus

IRs:
payoutsPaused(bool) := newPayoutStatus(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Etheroll.onlyOwner()()"];
2->1;
}
// Function: 39400.sol-Etheroll-ownerRefundPlayer(bytes32,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
maxPendingPayouts = safeSub(maxPendingPayouts,originalPlayerProfit)

IRs:
TMP_907(uint256) = INTERNAL_CALL, DSSafeAddSub.safeSub(uint256,uint256)(maxPendingPayouts,originalPlayerProfit)
maxPendingPayouts(uint256) := TMP_907(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! sendTo.send(originalPlayerBetValue)

IRs:
TMP_908 = SEND dest:sendTo value:originalPlayerBetValue
TMP_909 = UnaryType.BANG TMP_908 
CONDITION TMP_909"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogRefund(originalPlayerBetId,sendTo,originalPlayerBetValue)

IRs:
Emit LogRefund(originalPlayerBetId,sendTo,originalPlayerBetValue)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Etheroll.onlyOwner()()"];
6->1;
}
// Function: 39400.sol-Etheroll-ownerSetHouseEdge(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
houseEdge = newHouseEdge

IRs:
houseEdge(uint256) := newHouseEdge(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Etheroll.onlyOwner()()"];
2->1;
}
// Function: 39400.sol-Etheroll-ownerSetMaxProfitAsPercentOfHouse(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
newMaxProfitAsPercent > 10000

IRs:
TMP_897(bool) = newMaxProfitAsPercent > 10000
CONDITION TMP_897"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
maxProfitAsPercentOfHouse = newMaxProfitAsPercent

IRs:
maxProfitAsPercentOfHouse(uint256) := newMaxProfitAsPercent(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, Etheroll.setMaxProfit()()"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Etheroll.onlyOwner()()"];
6->1;
}
// Function: 39400.sol-Etheroll-ownerSetMinBet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minBet = newMinimumBet

IRs:
minBet(uint256) := newMinimumBet(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Etheroll.onlyOwner()()"];
2->1;
}
// Function: 39400.sol-Etheroll-ownerSetOraclizeSafeGas(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gasForOraclize = newSafeGasToOraclize

IRs:
gasForOraclize(uint32) := newSafeGasToOraclize(uint32)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Etheroll.onlyOwner()()"];
2->1;
}
// Function: 39400.sol-Etheroll-ownerSetTreasury(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
treasury = newTreasury

IRs:
treasury(address) := newTreasury(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Etheroll.onlyOwner()()"];
2->1;
}
// Function: 39400.sol-Etheroll-ownerTransferEther(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractBalance = safeSub(contractBalance,amount)

IRs:
TMP_901(uint256) = INTERNAL_CALL, DSSafeAddSub.safeSub(uint256,uint256)(contractBalance,amount)
contractBalance(uint256) := TMP_901(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, Etheroll.setMaxProfit()()"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! sendTo.send(amount)

IRs:
TMP_903 = SEND dest:sendTo value:amount
TMP_904 = UnaryType.BANG TMP_903 
CONDITION TMP_904"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LogOwnerTransfer(sendTo,amount)

IRs:
Emit LogOwnerTransfer(sendTo,amount)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Etheroll.onlyOwner()()"];
7->1;
}
// Function: 39400.sol-Etheroll-ownerUpdateCostToCallOraclize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
costToCallOraclizeInWei = newCostToCallOraclizeInWei

IRs:
costToCallOraclizeInWei(uint256) := newCostToCallOraclizeInWei(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Etheroll.onlyOwner()()"];
2->1;
}
// Function: 39400.sol-Etheroll-ownerkill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
suicide(address)(owner)

IRs:
TMP_916(None) = SOLIDITY_CALL suicide(address)(owner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Etheroll.onlyOwner()()"];
2->1;
}
// Function: 39400.sol-Etheroll-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_659 = CONVERT _a to bytes
tmp(bytes) := TMP_659(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_660(uint256) = 2 * 20
TMP_661(uint256) = 2 + TMP_660
TMP_662(bool) = i < TMP_661
CONDITION TMP_662"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_422(None) -> tmp[i]
TMP_663 = CONVERT REF_422 to uint160
b1(uint160) := TMP_663(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_664(uint256) = i + 1
REF_423(None) -> tmp[TMP_664]
TMP_665 = CONVERT REF_423 to uint160
b2(uint160) := TMP_665(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_666(bool) = b1 >= 97
TMP_667(bool) = b1 <= 102
TMP_668(bool) = TMP_666 && TMP_667
CONDITION TMP_668"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_669(bool) = b1 >= 65
TMP_670(bool) = b1 <= 70
TMP_671(bool) = TMP_669 && TMP_670
CONDITION TMP_671"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_672(bool) = b1 >= 48
TMP_673(bool) = b1 <= 57
TMP_674(bool) = TMP_672 && TMP_673
CONDITION TMP_674"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_675(bool) = b2 >= 97
TMP_676(bool) = b2 <= 102
TMP_677(bool) = TMP_675 && TMP_676
CONDITION TMP_677"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_678(bool) = b2 >= 65
TMP_679(bool) = b2 <= 70
TMP_680(bool) = TMP_678 && TMP_679
CONDITION TMP_680"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_681(bool) = b2 >= 48
TMP_682(bool) = b2 <= 57
TMP_683(bool) = TMP_681 && TMP_682
CONDITION TMP_683"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_684(uint160) = b1 * 16
TMP_685(uint160) = TMP_684 + b2
iaddr(uint160) = iaddr + TMP_685"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_686 = CONVERT iaddr to address
RETURN TMP_686"];
}
// Function: 39400.sol-Etheroll-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_755(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_755"];
}
// Function: 39400.sol-Etheroll-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_756 = CONVERT _a to bytes
bresult(bytes) := TMP_756(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_468 -> LENGTH bresult
TMP_757(bool) = i < REF_468
CONDITION TMP_757"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_469(None) -> bresult[i]
TMP_758(bool) = REF_469 >= 48
REF_470(None) -> bresult[i]
TMP_759(bool) = REF_470 <= 57
TMP_760(bool) = TMP_758 && TMP_759
CONDITION TMP_760"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_761(bool) = _b == 0
CONDITION TMP_761"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_762(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_471(None) -> bresult[i]
TMP_763 = CONVERT REF_471 to uint256
TMP_764(uint256) = TMP_763 - 48
mint(uint256) = mint + TMP_764"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_472(None) -> bresult[i]
TMP_765(bool) = REF_472 == 46
CONDITION TMP_765"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_766(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_767(bool) = _b > 0
CONDITION TMP_767"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_768(uint256) = 10 ** _b
mint(uint256) = mint * TMP_768"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 39400.sol-Etheroll-payoutsAreActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
payoutsPaused == true

IRs:
TMP_955(bool) = payoutsPaused == True
CONDITION TMP_955"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39400.sol-Etheroll-playerGetPendingTxByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
playerPendingWithdrawals[addressToCheck]

IRs:
REF_602(uint256) -> playerPendingWithdrawals[addressToCheck]
RETURN REF_602"];
}
// Function: 39400.sol-Etheroll-playerRollDice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
rngId = oraclize_query(nested,[URL] ['json(https://api.random.org/json-rpc/1/invoke).result.random["serialNumber","data"]', '\n{"jsonrpc":"2.0","method":"generateSignedIntegers","params":{"apiKey":${[decrypt] BLLu9EM8Nsqij5eBCCYk/wfTorQzbINJSVfRgvAM5zsKueNxmk+GqDHP/m3OpXonPGTWgsmOzfdyxK3gybq1wlg2rQh6J8HHWn8KSmurThX57QRqbEtwNBPTbn96UmN/8ll1TqWtT9Dmsss26KOcyNUzsM7UeN4=},"n":1,"min":1,"max":100,"replacement":true,"base":10${[identity] "}"},"id":1${[identity] "}"}'],gasForOraclize)

IRs:
TMP_822(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string,uint256)(nested,[URL] ['json(https://api.random.org/json-rpc/1/invoke).result.random["serialNumber","data"]', '\n{"jsonrpc":"2.0","method":"generateSignedIntegers","params":{"apiKey":${[decrypt] BLLu9EM8Nsqij5eBCCYk/wfTorQzbINJSVfRgvAM5zsKueNxmk+GqDHP/m3OpXonPGTWgsmOzfdyxK3gybq1wlg2rQh6J8HHWn8KSmurThX57QRqbEtwNBPTbn96UmN/8ll1TqWtT9Dmsss26KOcyNUzsM7UeN4=},"n":1,"min":1,"max":100,"replacement":true,"base":10${[identity] "}"},"id":1${[identity] "}"}'],gasForOraclize)
rngId(bytes32) := TMP_822(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
contractBalance = contractBalance - costToCallOraclizeInWei

IRs:
TMP_823(uint256) = contractBalance - costToCallOraclizeInWei
contractBalance(uint256) := TMP_823(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalBets += 1

IRs:
totalBets(int256) = totalBets + 1"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
playerBetId[rngId] = rngId

IRs:
REF_499(bytes32) -> playerBetId[rngId]
REF_499(bytes32) (->playerBetId) := rngId(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
playerNumber[rngId] = rollUnder

IRs:
REF_500(uint256) -> playerNumber[rngId]
REF_500(uint256) (->playerNumber) := rollUnder(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
playerBetValue[rngId] = msg.value

IRs:
REF_501(uint256) -> playerBetValue[rngId]
REF_501(uint256) (->playerBetValue) := msg.value(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
playerAddress[rngId] = msg.sender

IRs:
REF_502(address) -> playerAddress[rngId]
REF_502(address) (->playerAddress) := msg.sender(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
playerProfit[rngId] = ((((msg.value * (100 - (safeSub(rollUnder,1)))) / (safeSub(rollUnder,1)) + msg.value)) * houseEdge / houseEdgeDivisor) - msg.value

IRs:
REF_503(uint256) -> playerProfit[rngId]
TMP_824(uint256) = INTERNAL_CALL, DSSafeAddSub.safeSub(uint256,uint256)(rollUnder,1)
TMP_825(uint256) = 100 - TMP_824
TMP_826(uint256) = msg.value * TMP_825
TMP_827(uint256) = INTERNAL_CALL, DSSafeAddSub.safeSub(uint256,uint256)(rollUnder,1)
TMP_828(uint256) = TMP_826 / TMP_827
TMP_829(uint256) = TMP_828 + msg.value
TMP_830(uint256) = TMP_829 * houseEdge
TMP_831(uint256) = TMP_830 / houseEdgeDivisor
TMP_832(uint256) = TMP_831 - msg.value
REF_503(uint256) (->playerProfit) := TMP_832(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
maxPendingPayouts = safeAdd(maxPendingPayouts,playerProfit[rngId])

IRs:
REF_504(uint256) -> playerProfit[rngId]
TMP_833(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(maxPendingPayouts,REF_504)
maxPendingPayouts(uint256) := TMP_833(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
maxPendingPayouts >= contractBalance

IRs:
TMP_834(bool) = maxPendingPayouts >= contractBalance
CONDITION TMP_834"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: THROW 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
LogBet(playerBetId[rngId],playerAddress[rngId],safeAdd(playerBetValue[rngId],playerProfit[rngId]),playerProfit[rngId],playerBetValue[rngId],playerNumber[rngId])

IRs:
REF_505(bytes32) -> playerBetId[rngId]
REF_506(address) -> playerAddress[rngId]
REF_507(uint256) -> playerBetValue[rngId]
REF_508(uint256) -> playerProfit[rngId]
TMP_835(uint256) = INTERNAL_CALL, DSSafeAddSub.safeAdd(uint256,uint256)(REF_507,REF_508)
REF_509(uint256) -> playerProfit[rngId]
REF_510(uint256) -> playerBetValue[rngId]
REF_511(uint256) -> playerNumber[rngId]
Emit LogBet(REF_505,REF_506,TMP_835,REF_509,REF_510,REF_511)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
gameIsActive()

IRs:
MODIFIER_CALL, Etheroll.gameIsActive()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
betIsValid(msg.value,rollUnder)

IRs:
MODIFIER_CALL, Etheroll.betIsValid(uint256,uint256)(msg.value,rollUnder)"];
15->1;
}
// Function: 39400.sol-Etheroll-playerWithdrawPendingTransactions()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withdrawAmount = playerPendingWithdrawals[msg.sender]

IRs:
REF_597(uint256) -> playerPendingWithdrawals[msg.sender]
withdrawAmount(uint256) := REF_597(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
playerPendingWithdrawals[msg.sender] = 0

IRs:
REF_598(uint256) -> playerPendingWithdrawals[msg.sender]
REF_598(uint256) (->playerPendingWithdrawals) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
msg.sender.call.value(withdrawAmount)()

IRs:
TMP_887(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:withdrawAmount 
CONDITION TMP_887"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
playerPendingWithdrawals[msg.sender] = withdrawAmount

IRs:
REF_601(uint256) -> playerPendingWithdrawals[msg.sender]
REF_601(uint256) (->playerPendingWithdrawals) := withdrawAmount(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
payoutsAreActive()

IRs:
MODIFIER_CALL, Etheroll.payoutsAreActive()()"];
8->1;
}
// Function: 39400.sol-Etheroll-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! safeToAdd(a,b)

IRs:
TMP_451(bool) = INTERNAL_CALL, DSSafeAddSub.safeToAdd(uint256,uint256)(a,b)
TMP_452 = UnaryType.BANG TMP_451 
CONDITION TMP_452"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
a + b

IRs:
TMP_453(uint256) = a + b
RETURN TMP_453"];
}
// Function: 39400.sol-Etheroll-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! safeToSubtract(a,b)

IRs:
TMP_455(bool) = INTERNAL_CALL, DSSafeAddSub.safeToSubtract(uint256,uint256)(a,b)
TMP_456 = UnaryType.BANG TMP_455 
CONDITION TMP_456"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
a - b

IRs:
TMP_457(uint256) = a - b
RETURN TMP_457"];
}
// Function: 39400.sol-Etheroll-safeToAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(a + b >= a)

IRs:
TMP_449(uint256) = a + b
TMP_450(bool) = TMP_449 >= a
RETURN TMP_450"];
}
// Function: 39400.sol-Etheroll-safeToSubtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(b <= a)

IRs:
TMP_454(bool) = b <= a
RETURN TMP_454"];
}
// Function: 39400.sol-Etheroll-setMaxProfit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
maxProfit = (contractBalance * maxProfitAsPercentOfHouse) / maxProfitDivisor

IRs:
TMP_889(uint256) = contractBalance * maxProfitAsPercentOfHouse
TMP_890(uint256) = TMP_889 / maxProfitDivisor
maxProfit(uint256) := TMP_890(uint256)"];
}
// Function: 39400.sol-Etheroll-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_918(uint256) = 60 * 60
TMP_919(uint256) = TMP_918 * 24
day(uint256) := TMP_919(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_920(uint256) = 60 * 60
TMP_921(uint256) = TMP_920 * 24
TMP_922(uint256) = TMP_921 * 7
week(uint256) := TMP_922(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_923(uint256) = 60 * 60
TMP_924(uint256) = TMP_923 * 24
TMP_925(uint256) = TMP_924 * 30
month(uint256) := TMP_925(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
maxProfitDivisor = 1000000

IRs:
maxProfitDivisor(uint256) := 1000000(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
houseEdgeDivisor = 1000

IRs:
houseEdgeDivisor(uint256) := 1000(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
maxNumber = 99

IRs:
maxNumber(uint256) := 99(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
minNumber = 2

IRs:
minNumber(uint256) := 2(uint256)"];
}
// Function: 39400.sol-Etheroll-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_687 = CONVERT _a to bytes
a(bytes) := TMP_687(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_688 = CONVERT _b to bytes
b(bytes) := TMP_688(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_424 -> LENGTH a
minLength(uint256) := REF_424(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_425 -> LENGTH b
TMP_689(bool) = REF_425 < minLength
CONDITION TMP_689"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_426 -> LENGTH b
minLength(uint256) := REF_426(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_690(bool) = i < minLength
CONDITION TMP_690"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_427(None) -> a[i]
REF_428(None) -> b[i]
TMP_691(bool) = REF_427 < REF_428
CONDITION TMP_691"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_692(uint256) = 0 - 1
RETURN TMP_692"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_429(None) -> a[i]
REF_430(None) -> b[i]
TMP_693(bool) = REF_429 > REF_430
CONDITION TMP_693"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_694(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_431 -> LENGTH a
REF_432 -> LENGTH b
TMP_695(bool) = REF_431 < REF_432
CONDITION TMP_695"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_696(uint256) = 0 - 1
RETURN TMP_696"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_433 -> LENGTH a
REF_434 -> LENGTH b
TMP_697(bool) = REF_433 > REF_434
CONDITION TMP_697"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 39400.sol-Etheroll-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_754(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_754"];
}
// Function: 39400.sol-Etheroll-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_753(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_753"];
}
// Function: 39400.sol-Etheroll-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_752(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_752"];
}
// Function: 39400.sol-Etheroll-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_724 = CONVERT _a to bytes
_ba(bytes) := TMP_724(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_725 = CONVERT _b to bytes
_bb(bytes) := TMP_725(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_726 = CONVERT _c to bytes
_bc(bytes) := TMP_726(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_727 = CONVERT _d to bytes
_bd(bytes) := TMP_727(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_728 = CONVERT _e to bytes
_be(bytes) := TMP_728(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_448 -> LENGTH _ba
REF_449 -> LENGTH _bb
TMP_730(uint256) = REF_448 + REF_449
REF_450 -> LENGTH _bc
TMP_731(uint256) = TMP_730 + REF_450
REF_451 -> LENGTH _bd
TMP_732(uint256) = TMP_731 + REF_451
REF_452 -> LENGTH _be
TMP_733(uint256) = TMP_732 + REF_452
TMP_734 = new string(TMP_733)
abcde(string) := TMP_734(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_735 = CONVERT abcde to bytes
babcde(bytes) := TMP_735(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_453 -> LENGTH _ba
TMP_736(bool) = i < REF_453
CONDITION TMP_736"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_737(uint256) := k(uint256)
k(uint256) = k + 1
REF_454(None) -> babcde[TMP_737]
REF_455(None) -> _ba[i]
REF_454(None) (->babcde) := REF_455(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_738(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_456 -> LENGTH _bb
TMP_739(bool) = i < REF_456
CONDITION TMP_739"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_740(uint256) := k(uint256)
k(uint256) = k + 1
REF_457(None) -> babcde[TMP_740]
REF_458(None) -> _bb[i]
REF_457(None) (->babcde) := REF_458(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_741(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_459 -> LENGTH _bc
TMP_742(bool) = i < REF_459
CONDITION TMP_742"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_743(uint256) := k(uint256)
k(uint256) = k + 1
REF_460(None) -> babcde[TMP_743]
REF_461(None) -> _bc[i]
REF_460(None) (->babcde) := REF_461(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_744(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_462 -> LENGTH _bd
TMP_745(bool) = i < REF_462
CONDITION TMP_745"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_746(uint256) := k(uint256)
k(uint256) = k + 1
REF_463(None) -> babcde[TMP_746]
REF_464(None) -> _bd[i]
REF_463(None) (->babcde) := REF_464(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_747(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_465 -> LENGTH _be
TMP_748(bool) = i < REF_465
CONDITION TMP_748"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_749(uint256) := k(uint256)
k(uint256) = k + 1
REF_466(None) -> babcde[TMP_749]
REF_467(None) -> _be[i]
REF_466(None) (->babcde) := REF_467(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_750(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_751 = CONVERT babcde to string
RETURN TMP_751"];
}
// Function: 39400.sol-Etheroll-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_474 -> LENGTH arr
arrlen(uint256) := REF_474(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_782(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_782(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_783(bool) = i < arrlen
CONDITION TMP_783"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_475(bytes) -> elemArray[i]
REF_476(string) -> arr[i]
TMP_784 = CONVERT REF_476 to bytes
REF_475(bytes) (->elemArray) := TMP_784(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_477(bytes) -> elemArray[i]
REF_478 -> LENGTH REF_477
REF_479(bytes) -> elemArray[i]
REF_480 -> LENGTH REF_479
TMP_785(uint256) = REF_480 - 1
TMP_786(uint256) = TMP_785 / 23
TMP_787(uint256) = REF_478 + TMP_786
TMP_788(uint256) = TMP_787 + 3
outputlen(uint256) = outputlen + TMP_788"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_789(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_790(uint256) = arrlen + 128
cborlen(uint256) := TMP_790(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_791 = CONVERT cborlen to bytes1
REF_481 -> LENGTH TMP_791
outputlen(uint256) = outputlen + REF_481"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_793 = new bytes(outputlen)
res(bytes) := TMP_793(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_794 = CONVERT cborlen to bytes1
REF_482 -> LENGTH TMP_794
TMP_795(bool) = REF_482 > ctr
CONDITION TMP_795"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_483(None) -> res[ctr]
TMP_796 = CONVERT cborlen to bytes1
REF_484(None) -> TMP_796[ctr]
REF_483(None) (->res) := REF_484(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_797(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_798(bool) = i < arrlen
CONDITION TMP_798"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_485(uint256) -> res[ctr]
REF_485(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_799(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_486(bytes) -> elemArray[i]
REF_487 -> LENGTH REF_486
TMP_800(bool) = x < REF_487
CONDITION TMP_800"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_801(uint256) = x % 23
TMP_802(bool) = TMP_801 == 0
CONDITION TMP_802"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_803 = CONVERT elemcborlen to bytes1
REF_488 -> LENGTH TMP_803
TMP_804(uint256) = ctr - lctr
TMP_805(bool) = REF_488 > TMP_804
CONDITION TMP_805"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_489(None) -> res[ctr]
TMP_806 = CONVERT elemcborlen to bytes1
TMP_807(uint256) = ctr - lctr
REF_490(None) -> TMP_806[TMP_807]
REF_489(None) (->res) := REF_490(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_808(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_491(None) -> res[ctr]
REF_492(bytes) -> elemArray[i]
REF_493(None) -> REF_492[x]
REF_491(None) (->res) := REF_493(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_809(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_810(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_494(uint256) -> res[ctr]
REF_494(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_811(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_812(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_495(bytes) -> elemArray[i]
REF_496 -> LENGTH REF_495
TMP_813(uint256) = REF_496 - x
TMP_814(bool) = TMP_813 >= 24
CONDITION TMP_814"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_497(bytes) -> elemArray[i]
REF_498 -> LENGTH REF_497
TMP_815(uint256) = REF_498 - x
elemcborlen(uint256) := TMP_815(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 39400.sol-Etheroll-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_769(bool) = i == 0
CONDITION TMP_769"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_770(bool) = j != 0
CONDITION TMP_770"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_771(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_773 = new bytes(len)
bstr(bytes) := TMP_773(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_774(uint256) = len - 1
k(uint256) := TMP_774(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_775(bool) = i != 0
CONDITION TMP_775"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_776(uint256) := k(uint256)
k(uint256) = k - 1
REF_473(bytes1) -> bstr[TMP_776]
TMP_777(uint256) = i % 10
TMP_778(uint256) = 48 + TMP_777
TMP_779 = CONVERT TMP_778 to bytes1
REF_473(bytes1) (->bstr) := TMP_779(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_780 = CONVERT bstr to string
RETURN TMP_780"];
}
// Function: 39400.sol-OraclizeAddrResolverI-getAddress()
digraph{
}
// Function: 39400.sol-OraclizeI-getPrice(string)
digraph{
}
// Function: 39400.sol-OraclizeI-getPrice(string,uint256)
digraph{
}
// Function: 39400.sol-OraclizeI-query(uint256,string,string)
digraph{
}
// Function: 39400.sol-OraclizeI-query2(uint256,string,string,string)
digraph{
}
// Function: 39400.sol-OraclizeI-query2_withGasLimit(uint256,string,string,string,uint256)
digraph{
}
// Function: 39400.sol-OraclizeI-queryN(uint256,string,bytes)
digraph{
}
// Function: 39400.sol-OraclizeI-queryN_withGasLimit(uint256,string,bytes,uint256)
digraph{
}
// Function: 39400.sol-OraclizeI-query_withGasLimit(uint256,string,string,uint256)
digraph{
}
// Function: 39400.sol-OraclizeI-setConfig(bytes32)
digraph{
}
// Function: 39400.sol-OraclizeI-setCustomGasPrice(uint256)
digraph{
}
// Function: 39400.sol-OraclizeI-setProofType(bytes1)
digraph{
}
// Function: 39400.sol-OraclizeI-useCoupon(string)
digraph{
}
// Function: 39400.sol-strings-beyond(strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-strings-compare(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
shortest = self._len

IRs:
REF_252(uint256) -> self._len
shortest(uint256) := REF_252(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
other._len < self._len

IRs:
REF_253(uint256) -> other._len
REF_254(uint256) -> self._len
TMP_423(bool) = REF_253 < REF_254
CONDITION TMP_423"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
shortest = other._len

IRs:
REF_255(uint256) -> other._len
shortest(uint256) := REF_255(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
selfptr = self._ptr

IRs:
REF_256(uint256) -> self._ptr
selfptr(uint256) := REF_256(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
otherptr = other._ptr

IRs:
REF_257(uint256) -> other._ptr
otherptr(uint256) := REF_257(uint256)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->25;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
idx = 0

IRs:
idx(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
idx < shortest

IRs:
TMP_424(bool) = idx < shortest
CONDITION TMP_424"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: NEW VARIABLE 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12
"];
12->13;
13[label="Node Type: INLINE ASM 13
"];
13->14;
14[label="Node Type: END INLINE ASM 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
a != b

IRs:
TMP_425(bool) = a != b
CONDITION TMP_425"];
15->16[label="True"];
15->21[label="False"];
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
mask = ~ (2 ** (8 * (32 - shortest + idx)) - 1)

IRs:
TMP_426(uint256) = 32 - shortest
TMP_427(uint256) = TMP_426 + idx
TMP_428(uint256) = 8 * TMP_427
TMP_429(uint256) = 2 ** TMP_428
TMP_430(uint256) = TMP_429 - 1
TMP_431 = UnaryType.TILD TMP_430 
mask(uint256) := TMP_431(uint256)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
diff = (a & mask) - (b & mask)

IRs:
TMP_432(uint256) = a & mask
TMP_433(uint256) = b & mask
TMP_434(uint256) = TMP_432 - TMP_433
diff(uint256) := TMP_434(uint256)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
diff != 0

IRs:
TMP_435(bool) = diff != 0
CONDITION TMP_435"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(diff)

IRs:
TMP_436 = CONVERT diff to int256
RETURN TMP_436"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
selfptr += 32

IRs:
selfptr(uint256) = selfptr + 32"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
otherptr += 32

IRs:
otherptr(uint256) = otherptr + 32"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
idx += 32

IRs:
idx(uint256) = idx + 32"];
24->10;
25[label="Node Type: RETURN 25

EXPRESSION:
int256(self._len) - int256(other._len)

IRs:
REF_258(uint256) -> self._len
TMP_437 = CONVERT REF_258 to int256
REF_259(uint256) -> other._len
TMP_438 = CONVERT REF_259 to int256
TMP_439(int256) = TMP_437 - TMP_438
RETURN TMP_439"];
}
// Function: 39400.sol-strings-concat(strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-strings-contains(strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-strings-copy(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
slice(self._len,self._ptr)

IRs:
REF_244(uint256) -> self._len
REF_245(uint256) -> self._ptr
TMP_409(strings.slice) = new slice(REF_244,REF_245)
RETURN TMP_409"];
}
// Function: 39400.sol-strings-count(strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-strings-empty(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
self._len == 0

IRs:
REF_251(uint256) -> self._len
TMP_422(bool) = REF_251 == 0
RETURN TMP_422"];
}
// Function: 39400.sol-strings-endsWith(strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-strings-equals(strings.slice,strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1
"];
}
// Function: 39400.sol-strings-find(strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-strings-findPtr(uint256,uint256,uint256,uint256)
digraph{
}
// Function: 39400.sol-strings-join(strings.slice,strings.slice[])
digraph{
}
// Function: 39400.sol-strings-keccak(strings.slice)
digraph{
}
// Function: 39400.sol-strings-len(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
self == 0

IRs:
TMP_384(bool) = self == 0
CONDITION TMP_384"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
self & 0xffffffffffffffffffffffffffffffff == 0

IRs:
TMP_385(bytes32) = self & 340282366920938463463374607431768211455
TMP_386(bool) = TMP_385 == 0
CONDITION TMP_386"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ret += 16

IRs:
ret(uint256) = ret + 16"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
self = bytes32(uint256(self) / 0x100000000000000000000000000000000)

IRs:
TMP_387 = CONVERT self to uint256
TMP_388(uint256) = TMP_387 / 340282366920938463463374607431768211456
TMP_389 = CONVERT TMP_388 to bytes32
self(bytes32) := TMP_389(bytes32)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
self & 0xffffffffffffffff == 0

IRs:
TMP_390(bytes32) = self & 18446744073709551615
TMP_391(bool) = TMP_390 == 0
CONDITION TMP_391"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ret += 8

IRs:
ret(uint256) = ret + 8"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
self = bytes32(uint256(self) / 0x10000000000000000)

IRs:
TMP_392 = CONVERT self to uint256
TMP_393(uint256) = TMP_392 / 18446744073709551616
TMP_394 = CONVERT TMP_393 to bytes32
self(bytes32) := TMP_394(bytes32)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
self & 0xffffffff == 0

IRs:
TMP_395(bytes32) = self & 4294967295
TMP_396(bool) = TMP_395 == 0
CONDITION TMP_396"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
ret += 4

IRs:
ret(uint256) = ret + 4"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
self = bytes32(uint256(self) / 0x100000000)

IRs:
TMP_397 = CONVERT self to uint256
TMP_398(uint256) = TMP_397 / 4294967296
TMP_399 = CONVERT TMP_398 to bytes32
self(bytes32) := TMP_399(bytes32)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
self & 0xffff == 0

IRs:
TMP_400(bytes32) = self & 65535
TMP_401(bool) = TMP_400 == 0
CONDITION TMP_401"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ret += 2

IRs:
ret(uint256) = ret + 2"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
self = bytes32(uint256(self) / 0x10000)

IRs:
TMP_402 = CONVERT self to uint256
TMP_403(uint256) = TMP_402 / 65536
TMP_404 = CONVERT TMP_403 to bytes32
self(bytes32) := TMP_404(bytes32)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
self & 0xff == 0

IRs:
TMP_405(bytes32) = self & 255
TMP_406(bool) = TMP_405 == 0
CONDITION TMP_406"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
ret += 1

IRs:
ret(uint256) = ret + 1"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: RETURN 24

EXPRESSION:
32 - ret

IRs:
TMP_407(uint256) = 32 - ret
RETURN TMP_407"];
}
// Function: 39400.sol-strings-len(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ptr = self._ptr - 31

IRs:
REF_249(uint256) -> self._ptr
TMP_413(uint256) = REF_249 - 31
ptr(uint256) := TMP_413(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
end = ptr + self._len

IRs:
REF_250(uint256) -> self._len
TMP_414(uint256) = ptr + REF_250
end(uint256) := TMP_414(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->27;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
len = 0

IRs:
len(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
ptr < end

IRs:
TMP_415(bool) = ptr < end
CONDITION TMP_415"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
b < 0x80

IRs:
TMP_416(bool) = b < 128
CONDITION TMP_416"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ptr += 1

IRs:
ptr(uint256) = ptr + 1"];
11->25;
12[label="Node Type: IF 12

EXPRESSION:
b < 0xE0

IRs:
TMP_417(bool) = b < 224
CONDITION TMP_417"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ptr += 2

IRs:
ptr(uint256) = ptr + 2"];
13->24;
14[label="Node Type: IF 14

EXPRESSION:
b < 0xF0

IRs:
TMP_418(bool) = b < 240
CONDITION TMP_418"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
ptr += 3

IRs:
ptr(uint256) = ptr + 3"];
15->23;
16[label="Node Type: IF 16

EXPRESSION:
b < 0xF8

IRs:
TMP_419(bool) = b < 248
CONDITION TMP_419"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
ptr += 4

IRs:
ptr(uint256) = ptr + 4"];
17->22;
18[label="Node Type: IF 18

EXPRESSION:
b < 0xFC

IRs:
TMP_420(bool) = b < 252
CONDITION TMP_420"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
ptr += 5

IRs:
ptr(uint256) = ptr + 5"];
19->21;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
ptr += 6

IRs:
ptr(uint256) = ptr + 6"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
len ++

IRs:
TMP_421(uint256) := len(uint256)
len(uint256) = len + 1"];
26->6;
27[label="Node Type: RETURN 27

EXPRESSION:
len

IRs:
RETURN len"];
}
// Function: 39400.sol-strings-memcpy(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: BEGIN_LOOP 1
"];
1->3;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
len >= 32

IRs:
TMP_378(bool) = len >= 32
CONDITION TMP_378"];
3->4[label="True"];
3->2[label="False"];
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dest += 32

IRs:
dest(uint256) = dest + 32"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
src += 32

IRs:
src(uint256) = src + 32"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len -= 32

IRs:
len(uint256) = len - 32"];
8->3;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
mask = 256 ** (32 - len) - 1

IRs:
TMP_379(uint256) = 32 - len
TMP_380(uint256) = 256 ** TMP_379
TMP_381(uint256) = TMP_380 - 1
mask(uint256) := TMP_381(uint256)"];
9->10;
10[label="Node Type: INLINE ASM 10
"];
10->11;
11[label="Node Type: END INLINE ASM 11
"];
}
// Function: 39400.sol-strings-nextRune(strings.slice)
digraph{
}
// Function: 39400.sol-strings-nextRune(strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-strings-ord(strings.slice)
digraph{
}
// Function: 39400.sol-strings-rfind(strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-strings-rfindPtr(uint256,uint256,uint256,uint256)
digraph{
}
// Function: 39400.sol-strings-rsplit(strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-strings-rsplit(strings.slice,strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-strings-split(strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-strings-split(strings.slice,strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-strings-startsWith(strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-strings-toSlice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
slice(bytes(self).length,ptr)

IRs:
TMP_382 = CONVERT self to bytes
REF_242 -> LENGTH TMP_382
TMP_383(strings.slice) = new slice(REF_242,ptr)
RETURN TMP_383"];
}
// Function: 39400.sol-strings-toSliceB32(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ret._len = len(self)

IRs:
REF_243(uint256) -> ret._len
TMP_408(uint256) = INTERNAL_CALL, strings.len(bytes32)(self)
REF_243(uint256) (->ret) := TMP_408(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 39400.sol-strings-toString(strings.slice)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ret = new string(self._len)

IRs:
REF_246(uint256) -> self._len
TMP_411 = new string(REF_246)
ret(string) := TMP_411(string)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
memcpy(retptr,self._ptr,self._len)

IRs:
REF_247(uint256) -> self._ptr
REF_248(uint256) -> self._len
INTERNAL_CALL, strings.memcpy(uint256,uint256,uint256)(retptr,REF_247,REF_248)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 39400.sol-strings-until(strings.slice,strings.slice)
digraph{
}
// Function: 39400.sol-usingOraclize-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_19 = new bytes(0)
INTERNAL_CALL, usingOraclize.__callback(bytes32,string,bytes)(myid,result,TMP_19)"];
}
// Function: 39400.sol-usingOraclize-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 39400.sol-usingOraclize-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_375(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_376 = CONVERT TMP_375 to OraclizeI
oraclize(OraclizeI) := TMP_376(OraclizeI)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 39400.sol-usingOraclize-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 39400.sol-usingOraclize-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_240 = CONVERT _haystack to bytes
h(bytes) := TMP_240(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_241 = CONVERT _needle to bytes
n(bytes) := TMP_241(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_175 -> LENGTH h
TMP_242(bool) = REF_175 < 1
REF_176 -> LENGTH n
TMP_243(bool) = REF_176 < 1
TMP_244(bool) = TMP_242 || TMP_243
REF_177 -> LENGTH n
REF_178 -> LENGTH h
TMP_245(bool) = REF_177 > REF_178
TMP_246(bool) = TMP_244 || TMP_245
CONDITION TMP_246"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_247(uint256) = 0 - 1
RETURN TMP_247"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_179 -> LENGTH h
TMP_248(uint256) = 2 ** 128
TMP_249(uint256) = TMP_248 - 1
TMP_250(bool) = REF_179 > TMP_249
CONDITION TMP_250"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_251(uint256) = 0 - 1
RETURN TMP_251"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_180 -> LENGTH h
TMP_252(bool) = i < REF_180
CONDITION TMP_252"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_181(None) -> h[i]
REF_182(None) -> n[0]
TMP_253(bool) = REF_181 == REF_182
CONDITION TMP_253"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_183 -> LENGTH n
TMP_254(bool) = subindex < REF_183
TMP_255(uint256) = i + subindex
REF_184 -> LENGTH h
TMP_256(bool) = TMP_255 < REF_184
TMP_257(bool) = TMP_254 && TMP_256
TMP_258(uint256) = i + subindex
REF_185(None) -> h[TMP_258]
REF_186(None) -> n[subindex]
TMP_259(bool) = REF_185 == REF_186
TMP_260(bool) = TMP_257 && TMP_259
CONDITION TMP_260"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_261(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_187 -> LENGTH n
TMP_262(bool) = subindex == REF_187
CONDITION TMP_262"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_263 = CONVERT i to int256
RETURN TMP_263"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_264(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_265(uint256) = 0 - 1
RETURN TMP_265"];
}
// Function: 39400.sol-usingOraclize-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_366 = CONVERT OAR to address
TMP_367(bool) = TMP_366 == 0
TMP_368 = CONVERT OAR to address
TMP_369(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_368)
TMP_370(bool) = TMP_369 == 0
TMP_371(bool) = TMP_367 || TMP_370
CONDITION TMP_371"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_372(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_373(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_374 = CONVERT TMP_373 to OraclizeI
oraclize(OraclizeI) := TMP_374(OraclizeI)"];
4->5;
5[label="Node Type: _ 5
"];
}
// Function: 39400.sol-usingOraclize-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_193(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_193"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39400.sol-usingOraclize-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_21(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_21"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39400.sol-usingOraclize-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_23(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_23"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_25(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_25(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_26(uint256) = tx.gasprice * 200000
TMP_27(uint256) = 1000000000000000000 + TMP_26
TMP_28(bool) = price > TMP_27
CONDITION TMP_28"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_30(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_30"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_53(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_53(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_54(uint256) = tx.gasprice * 200000
TMP_55(uint256) = 1000000000000000000 + TMP_54
TMP_56(bool) = price > TMP_55
CONDITION TMP_56"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_58(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_58"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_74(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_74(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_75(uint256) = tx.gasprice * gaslimit
TMP_76(uint256) = 1000000000000000000 + TMP_75
TMP_77(bool) = price > TMP_76
CONDITION TMP_77"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_79(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_79"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_46(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_46(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_47(uint256) = tx.gasprice * gaslimit
TMP_48(uint256) = 1000000000000000000 + TMP_47
TMP_49(bool) = price > TMP_48
CONDITION TMP_49"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_51(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_51"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_114(string[])  = new string[](1)
dynargs(string[]) = ['TMP_114(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_38(string) -> dynargs[0]
REF_39(string) -> args[0]
REF_38(string) (->dynargs) := REF_39(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_115(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_115"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_126(string[])  = new string[](1)
dynargs(string[]) = ['TMP_126(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_44(string) -> dynargs[0]
REF_45(string) -> args[0]
REF_44(string) (->dynargs) := REF_45(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_127(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_127"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_130(string[])  = new string[](2)
dynargs(string[]) = ['TMP_130(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_46(string) -> dynargs[0]
REF_47(string) -> args[0]
REF_46(string) (->dynargs) := REF_47(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_48(string) -> dynargs[1]
REF_49(string) -> args[1]
REF_48(string) (->dynargs) := REF_49(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_131(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_131"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_142(string[])  = new string[](2)
dynargs(string[]) = ['TMP_142(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_58(string) -> dynargs[0]
REF_59(string) -> args[0]
REF_58(string) (->dynargs) := REF_59(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_60(string) -> dynargs[1]
REF_61(string) -> args[1]
REF_60(string) (->dynargs) := REF_61(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_143(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_143"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_146(string[])  = new string[](3)
dynargs(string[]) = ['TMP_146(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_62(string) -> dynargs[0]
REF_63(string) -> args[0]
REF_62(string) (->dynargs) := REF_63(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_64(string) -> dynargs[1]
REF_65(string) -> args[1]
REF_64(string) (->dynargs) := REF_65(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_66(string) -> dynargs[2]
REF_67(string) -> args[2]
REF_66(string) (->dynargs) := REF_67(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_147(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_147"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_158(string[])  = new string[](3)
dynargs(string[]) = ['TMP_158(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_80(string) -> dynargs[0]
REF_81(string) -> args[0]
REF_80(string) (->dynargs) := REF_81(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_82(string) -> dynargs[1]
REF_83(string) -> args[1]
REF_82(string) (->dynargs) := REF_83(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_84(string) -> dynargs[2]
REF_85(string) -> args[2]
REF_84(string) (->dynargs) := REF_85(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_159(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_159"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_162(string[])  = new string[](4)
dynargs(string[]) = ['TMP_162(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_86(string) -> dynargs[0]
REF_87(string) -> args[0]
REF_86(string) (->dynargs) := REF_87(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_88(string) -> dynargs[1]
REF_89(string) -> args[1]
REF_88(string) (->dynargs) := REF_89(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_90(string) -> dynargs[2]
REF_91(string) -> args[2]
REF_90(string) (->dynargs) := REF_91(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_92(string) -> dynargs[3]
REF_93(string) -> args[3]
REF_92(string) (->dynargs) := REF_93(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_163(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_163"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_174(string[])  = new string[](4)
dynargs(string[]) = ['TMP_174(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_110(string) -> dynargs[0]
REF_111(string) -> args[0]
REF_110(string) (->dynargs) := REF_111(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_112(string) -> dynargs[1]
REF_113(string) -> args[1]
REF_112(string) (->dynargs) := REF_113(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_114(string) -> dynargs[2]
REF_115(string) -> args[2]
REF_114(string) (->dynargs) := REF_115(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_116(string) -> dynargs[3]
REF_117(string) -> args[3]
REF_116(string) (->dynargs) := REF_117(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_175(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_175"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_178(string[])  = new string[](5)
dynargs(string[]) = ['TMP_178(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_118(string) -> dynargs[0]
REF_119(string) -> args[0]
REF_118(string) (->dynargs) := REF_119(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_120(string) -> dynargs[1]
REF_121(string) -> args[1]
REF_120(string) (->dynargs) := REF_121(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_122(string) -> dynargs[2]
REF_123(string) -> args[2]
REF_122(string) (->dynargs) := REF_123(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_124(string) -> dynargs[3]
REF_125(string) -> args[3]
REF_124(string) (->dynargs) := REF_125(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_126(string) -> dynargs[4]
REF_127(string) -> args[4]
REF_126(string) (->dynargs) := REF_127(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_179(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_179"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_190(string[])  = new string[](5)
dynargs(string[]) = ['TMP_190(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_148(string) -> dynargs[0]
REF_149(string) -> args[0]
REF_148(string) (->dynargs) := REF_149(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_150(string) -> dynargs[1]
REF_151(string) -> args[1]
REF_150(string) (->dynargs) := REF_151(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_152(string) -> dynargs[2]
REF_153(string) -> args[2]
REF_152(string) (->dynargs) := REF_153(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_154(string) -> dynargs[3]
REF_155(string) -> args[3]
REF_154(string) (->dynargs) := REF_155(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_156(string) -> dynargs[4]
REF_157(string) -> args[4]
REF_156(string) (->dynargs) := REF_157(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_191(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_191"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_81(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_81(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_82(uint256) = tx.gasprice * 200000
TMP_83(uint256) = 1000000000000000000 + TMP_82
TMP_84(bool) = price > TMP_83
CONDITION TMP_84"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_85(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_85(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_87(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_87"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_105(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_106(uint256) = tx.gasprice * gaslimit
TMP_107(uint256) = 1000000000000000000 + TMP_106
TMP_108(bool) = price > TMP_107
CONDITION TMP_108"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_109(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_109(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_111(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_111"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_32(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_32(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_33(uint256) = tx.gasprice * 200000
TMP_34(uint256) = 1000000000000000000 + TMP_33
TMP_35(bool) = price > TMP_34
CONDITION TMP_35"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_37(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_37"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_60(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_60(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_61(uint256) = tx.gasprice * 200000
TMP_62(uint256) = 1000000000000000000 + TMP_61
TMP_63(bool) = price > TMP_62
CONDITION TMP_63"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_65(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_65"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_67(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_67(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_68(uint256) = tx.gasprice * gaslimit
TMP_69(uint256) = 1000000000000000000 + TMP_68
TMP_70(bool) = price > TMP_69
CONDITION TMP_70"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_72(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_72"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_39(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_39(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_40(uint256) = tx.gasprice * gaslimit
TMP_41(uint256) = 1000000000000000000 + TMP_40
TMP_42(bool) = price > TMP_41
CONDITION TMP_42"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_44(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_44"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_118(string[])  = new string[](1)
dynargs(string[]) = ['TMP_118(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_40(string) -> dynargs[0]
REF_41(string) -> args[0]
REF_40(string) (->dynargs) := REF_41(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_119(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_119"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_122(string[])  = new string[](1)
dynargs(string[]) = ['TMP_122(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_42(string) -> dynargs[0]
REF_43(string) -> args[0]
REF_42(string) (->dynargs) := REF_43(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_123(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_123"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_134(string[])  = new string[](2)
dynargs(string[]) = ['TMP_134(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_50(string) -> dynargs[0]
REF_51(string) -> args[0]
REF_50(string) (->dynargs) := REF_51(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_52(string) -> dynargs[1]
REF_53(string) -> args[1]
REF_52(string) (->dynargs) := REF_53(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_135(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_135"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_138(string[])  = new string[](2)
dynargs(string[]) = ['TMP_138(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_54(string) -> dynargs[0]
REF_55(string) -> args[0]
REF_54(string) (->dynargs) := REF_55(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_56(string) -> dynargs[1]
REF_57(string) -> args[1]
REF_56(string) (->dynargs) := REF_57(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_139(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_139"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_150(string[])  = new string[](3)
dynargs(string[]) = ['TMP_150(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_68(string) -> dynargs[0]
REF_69(string) -> args[0]
REF_68(string) (->dynargs) := REF_69(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_70(string) -> dynargs[1]
REF_71(string) -> args[1]
REF_70(string) (->dynargs) := REF_71(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_72(string) -> dynargs[2]
REF_73(string) -> args[2]
REF_72(string) (->dynargs) := REF_73(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_151(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_151"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_154(string[])  = new string[](3)
dynargs(string[]) = ['TMP_154(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_74(string) -> dynargs[0]
REF_75(string) -> args[0]
REF_74(string) (->dynargs) := REF_75(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_76(string) -> dynargs[1]
REF_77(string) -> args[1]
REF_76(string) (->dynargs) := REF_77(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_78(string) -> dynargs[2]
REF_79(string) -> args[2]
REF_78(string) (->dynargs) := REF_79(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_155(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_155"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_166(string[])  = new string[](4)
dynargs(string[]) = ['TMP_166(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_94(string) -> dynargs[0]
REF_95(string) -> args[0]
REF_94(string) (->dynargs) := REF_95(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_96(string) -> dynargs[1]
REF_97(string) -> args[1]
REF_96(string) (->dynargs) := REF_97(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_98(string) -> dynargs[2]
REF_99(string) -> args[2]
REF_98(string) (->dynargs) := REF_99(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_100(string) -> dynargs[3]
REF_101(string) -> args[3]
REF_100(string) (->dynargs) := REF_101(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_167(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_167"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_170(string[])  = new string[](4)
dynargs(string[]) = ['TMP_170(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_102(string) -> dynargs[0]
REF_103(string) -> args[0]
REF_102(string) (->dynargs) := REF_103(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_104(string) -> dynargs[1]
REF_105(string) -> args[1]
REF_104(string) (->dynargs) := REF_105(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_106(string) -> dynargs[2]
REF_107(string) -> args[2]
REF_106(string) (->dynargs) := REF_107(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_108(string) -> dynargs[3]
REF_109(string) -> args[3]
REF_108(string) (->dynargs) := REF_109(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_171(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_171"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_182(string[])  = new string[](5)
dynargs(string[]) = ['TMP_182(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_128(string) -> dynargs[0]
REF_129(string) -> args[0]
REF_128(string) (->dynargs) := REF_129(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_130(string) -> dynargs[1]
REF_131(string) -> args[1]
REF_130(string) (->dynargs) := REF_131(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_132(string) -> dynargs[2]
REF_133(string) -> args[2]
REF_132(string) (->dynargs) := REF_133(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_134(string) -> dynargs[3]
REF_135(string) -> args[3]
REF_134(string) (->dynargs) := REF_135(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_136(string) -> dynargs[4]
REF_137(string) -> args[4]
REF_136(string) (->dynargs) := REF_137(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_183(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_183"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_186(string[])  = new string[](5)
dynargs(string[]) = ['TMP_186(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_138(string) -> dynargs[0]
REF_139(string) -> args[0]
REF_138(string) (->dynargs) := REF_139(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_140(string) -> dynargs[1]
REF_141(string) -> args[1]
REF_140(string) (->dynargs) := REF_141(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_142(string) -> dynargs[2]
REF_143(string) -> args[2]
REF_142(string) (->dynargs) := REF_143(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_144(string) -> dynargs[3]
REF_145(string) -> args[3]
REF_144(string) (->dynargs) := REF_145(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_146(string) -> dynargs[4]
REF_147(string) -> args[4]
REF_146(string) (->dynargs) := REF_147(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_187(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_187"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_89(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_89(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_90(uint256) = tx.gasprice * 200000
TMP_91(uint256) = 1000000000000000000 + TMP_90
TMP_92(bool) = price > TMP_91
CONDITION TMP_92"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_93(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_93(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_95(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_95"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_97(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_97(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_98(uint256) = tx.gasprice * gaslimit
TMP_99(uint256) = 1000000000000000000 + TMP_98
TMP_100(bool) = price > TMP_99
CONDITION TMP_100"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_101(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_101(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_103(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_103"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39400.sol-usingOraclize-oraclize_setConfig(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setConfig(config)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setConfig, arguments:['config']  
RETURN TMP_199"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39400.sol-usingOraclize-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_197"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39400.sol-usingOraclize-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_0(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_1(bool) = TMP_0 > 0
CONDITION TMP_1"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_2 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_2(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_3(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_4(bool) = TMP_3 > 0
CONDITION TMP_4"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_5 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_5(OraclizeAddrResolverI)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_6(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_7(bool) = TMP_6 > 0
CONDITION TMP_7"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_8 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_8(OraclizeAddrResolverI)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_9(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_10(bool) = TMP_9 > 0
CONDITION TMP_10"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_11 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_11(OraclizeAddrResolverI)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_12(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_13(bool) = TMP_12 > 0
CONDITION TMP_13"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_14 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_14(OraclizeAddrResolverI)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_15(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_16(bool) = TMP_15 > 0
CONDITION TMP_16"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_17 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_17(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 39400.sol-usingOraclize-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_195"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39400.sol-usingOraclize-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_201 = CONVERT _a to bytes
tmp(bytes) := TMP_201(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_202(uint256) = 2 * 20
TMP_203(uint256) = 2 + TMP_202
TMP_204(bool) = i < TMP_203
CONDITION TMP_204"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_162(None) -> tmp[i]
TMP_205 = CONVERT REF_162 to uint160
b1(uint160) := TMP_205(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_206(uint256) = i + 1
REF_163(None) -> tmp[TMP_206]
TMP_207 = CONVERT REF_163 to uint160
b2(uint160) := TMP_207(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_208(bool) = b1 >= 97
TMP_209(bool) = b1 <= 102
TMP_210(bool) = TMP_208 && TMP_209
CONDITION TMP_210"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_211(bool) = b1 >= 65
TMP_212(bool) = b1 <= 70
TMP_213(bool) = TMP_211 && TMP_212
CONDITION TMP_213"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_214(bool) = b1 >= 48
TMP_215(bool) = b1 <= 57
TMP_216(bool) = TMP_214 && TMP_215
CONDITION TMP_216"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_217(bool) = b2 >= 97
TMP_218(bool) = b2 <= 102
TMP_219(bool) = TMP_217 && TMP_218
CONDITION TMP_219"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_220(bool) = b2 >= 65
TMP_221(bool) = b2 <= 70
TMP_222(bool) = TMP_220 && TMP_221
CONDITION TMP_222"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_223(bool) = b2 >= 48
TMP_224(bool) = b2 <= 57
TMP_225(bool) = TMP_223 && TMP_224
CONDITION TMP_225"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_226(uint160) = b1 * 16
TMP_227(uint160) = TMP_226 + b2
iaddr(uint160) = iaddr + TMP_227"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_228 = CONVERT iaddr to address
RETURN TMP_228"];
}
// Function: 39400.sol-usingOraclize-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_297(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_297"];
}
// Function: 39400.sol-usingOraclize-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_298 = CONVERT _a to bytes
bresult(bytes) := TMP_298(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_208 -> LENGTH bresult
TMP_299(bool) = i < REF_208
CONDITION TMP_299"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_209(None) -> bresult[i]
TMP_300(bool) = REF_209 >= 48
REF_210(None) -> bresult[i]
TMP_301(bool) = REF_210 <= 57
TMP_302(bool) = TMP_300 && TMP_301
CONDITION TMP_302"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_303(bool) = _b == 0
CONDITION TMP_303"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_304(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_211(None) -> bresult[i]
TMP_305 = CONVERT REF_211 to uint256
TMP_306(uint256) = TMP_305 - 48
mint(uint256) = mint + TMP_306"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_212(None) -> bresult[i]
TMP_307(bool) = REF_212 == 46
CONDITION TMP_307"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_308(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_309(bool) = _b > 0
CONDITION TMP_309"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_310(uint256) = 10 ** _b
mint(uint256) = mint * TMP_310"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 39400.sol-usingOraclize-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_358(uint256) = 60 * 60
TMP_359(uint256) = TMP_358 * 24
day(uint256) := TMP_359(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_360(uint256) = 60 * 60
TMP_361(uint256) = TMP_360 * 24
TMP_362(uint256) = TMP_361 * 7
week(uint256) := TMP_362(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_363(uint256) = 60 * 60
TMP_364(uint256) = TMP_363 * 24
TMP_365(uint256) = TMP_364 * 30
month(uint256) := TMP_365(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
}
// Function: 39400.sol-usingOraclize-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_229 = CONVERT _a to bytes
a(bytes) := TMP_229(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_230 = CONVERT _b to bytes
b(bytes) := TMP_230(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_164 -> LENGTH a
minLength(uint256) := REF_164(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_165 -> LENGTH b
TMP_231(bool) = REF_165 < minLength
CONDITION TMP_231"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_166 -> LENGTH b
minLength(uint256) := REF_166(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_232(bool) = i < minLength
CONDITION TMP_232"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_167(None) -> a[i]
REF_168(None) -> b[i]
TMP_233(bool) = REF_167 < REF_168
CONDITION TMP_233"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_234(uint256) = 0 - 1
RETURN TMP_234"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_169(None) -> a[i]
REF_170(None) -> b[i]
TMP_235(bool) = REF_169 > REF_170
CONDITION TMP_235"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_236(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_171 -> LENGTH a
REF_172 -> LENGTH b
TMP_237(bool) = REF_171 < REF_172
CONDITION TMP_237"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_238(uint256) = 0 - 1
RETURN TMP_238"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_173 -> LENGTH a
REF_174 -> LENGTH b
TMP_239(bool) = REF_173 > REF_174
CONDITION TMP_239"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 39400.sol-usingOraclize-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_296(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_296"];
}
// Function: 39400.sol-usingOraclize-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_295(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_295"];
}
// Function: 39400.sol-usingOraclize-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_294(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_294"];
}
// Function: 39400.sol-usingOraclize-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_266 = CONVERT _a to bytes
_ba(bytes) := TMP_266(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_267 = CONVERT _b to bytes
_bb(bytes) := TMP_267(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_268 = CONVERT _c to bytes
_bc(bytes) := TMP_268(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_269 = CONVERT _d to bytes
_bd(bytes) := TMP_269(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_270 = CONVERT _e to bytes
_be(bytes) := TMP_270(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_188 -> LENGTH _ba
REF_189 -> LENGTH _bb
TMP_272(uint256) = REF_188 + REF_189
REF_190 -> LENGTH _bc
TMP_273(uint256) = TMP_272 + REF_190
REF_191 -> LENGTH _bd
TMP_274(uint256) = TMP_273 + REF_191
REF_192 -> LENGTH _be
TMP_275(uint256) = TMP_274 + REF_192
TMP_276 = new string(TMP_275)
abcde(string) := TMP_276(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_277 = CONVERT abcde to bytes
babcde(bytes) := TMP_277(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_193 -> LENGTH _ba
TMP_278(bool) = i < REF_193
CONDITION TMP_278"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_279(uint256) := k(uint256)
k(uint256) = k + 1
REF_194(None) -> babcde[TMP_279]
REF_195(None) -> _ba[i]
REF_194(None) (->babcde) := REF_195(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_280(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_196 -> LENGTH _bb
TMP_281(bool) = i < REF_196
CONDITION TMP_281"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_282(uint256) := k(uint256)
k(uint256) = k + 1
REF_197(None) -> babcde[TMP_282]
REF_198(None) -> _bb[i]
REF_197(None) (->babcde) := REF_198(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_283(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_199 -> LENGTH _bc
TMP_284(bool) = i < REF_199
CONDITION TMP_284"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_285(uint256) := k(uint256)
k(uint256) = k + 1
REF_200(None) -> babcde[TMP_285]
REF_201(None) -> _bc[i]
REF_200(None) (->babcde) := REF_201(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_286(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_202 -> LENGTH _bd
TMP_287(bool) = i < REF_202
CONDITION TMP_287"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_288(uint256) := k(uint256)
k(uint256) = k + 1
REF_203(None) -> babcde[TMP_288]
REF_204(None) -> _bd[i]
REF_203(None) (->babcde) := REF_204(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_289(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_205 -> LENGTH _be
TMP_290(bool) = i < REF_205
CONDITION TMP_290"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_291(uint256) := k(uint256)
k(uint256) = k + 1
REF_206(None) -> babcde[TMP_291]
REF_207(None) -> _be[i]
REF_206(None) (->babcde) := REF_207(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_292(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_293 = CONVERT babcde to string
RETURN TMP_293"];
}
// Function: 39400.sol-usingOraclize-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_214 -> LENGTH arr
arrlen(uint256) := REF_214(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_324(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_324(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_325(bool) = i < arrlen
CONDITION TMP_325"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_215(bytes) -> elemArray[i]
REF_216(string) -> arr[i]
TMP_326 = CONVERT REF_216 to bytes
REF_215(bytes) (->elemArray) := TMP_326(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_217(bytes) -> elemArray[i]
REF_218 -> LENGTH REF_217
REF_219(bytes) -> elemArray[i]
REF_220 -> LENGTH REF_219
TMP_327(uint256) = REF_220 - 1
TMP_328(uint256) = TMP_327 / 23
TMP_329(uint256) = REF_218 + TMP_328
TMP_330(uint256) = TMP_329 + 3
outputlen(uint256) = outputlen + TMP_330"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_331(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_332(uint256) = arrlen + 128
cborlen(uint256) := TMP_332(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_333 = CONVERT cborlen to bytes1
REF_221 -> LENGTH TMP_333
outputlen(uint256) = outputlen + REF_221"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_335 = new bytes(outputlen)
res(bytes) := TMP_335(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_336 = CONVERT cborlen to bytes1
REF_222 -> LENGTH TMP_336
TMP_337(bool) = REF_222 > ctr
CONDITION TMP_337"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_223(None) -> res[ctr]
TMP_338 = CONVERT cborlen to bytes1
REF_224(None) -> TMP_338[ctr]
REF_223(None) (->res) := REF_224(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_339(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_340(bool) = i < arrlen
CONDITION TMP_340"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_225(uint256) -> res[ctr]
REF_225(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_341(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_226(bytes) -> elemArray[i]
REF_227 -> LENGTH REF_226
TMP_342(bool) = x < REF_227
CONDITION TMP_342"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_343(uint256) = x % 23
TMP_344(bool) = TMP_343 == 0
CONDITION TMP_344"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_345 = CONVERT elemcborlen to bytes1
REF_228 -> LENGTH TMP_345
TMP_346(uint256) = ctr - lctr
TMP_347(bool) = REF_228 > TMP_346
CONDITION TMP_347"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_229(None) -> res[ctr]
TMP_348 = CONVERT elemcborlen to bytes1
TMP_349(uint256) = ctr - lctr
REF_230(None) -> TMP_348[TMP_349]
REF_229(None) (->res) := REF_230(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_350(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_231(None) -> res[ctr]
REF_232(bytes) -> elemArray[i]
REF_233(None) -> REF_232[x]
REF_231(None) (->res) := REF_233(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_351(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_352(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_234(uint256) -> res[ctr]
REF_234(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_353(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_354(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_235(bytes) -> elemArray[i]
REF_236 -> LENGTH REF_235
TMP_355(uint256) = REF_236 - x
TMP_356(bool) = TMP_355 >= 24
CONDITION TMP_356"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_237(bytes) -> elemArray[i]
REF_238 -> LENGTH REF_237
TMP_357(uint256) = REF_238 - x
elemcborlen(uint256) := TMP_357(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 39400.sol-usingOraclize-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_311(bool) = i == 0
CONDITION TMP_311"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_312(bool) = j != 0
CONDITION TMP_312"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_313(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_315 = new bytes(len)
bstr(bytes) := TMP_315(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_316(uint256) = len - 1
k(uint256) := TMP_316(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_317(bool) = i != 0
CONDITION TMP_317"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_318(uint256) := k(uint256)
k(uint256) = k - 1
REF_213(bytes1) -> bstr[TMP_318]
TMP_319(uint256) = i % 10
TMP_320(uint256) = 48 + TMP_319
TMP_321 = CONVERT TMP_320 to bytes1
REF_213(bytes1) (->bstr) := TMP_321(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_322 = CONVERT bstr to string
RETURN TMP_322"];
}
}
