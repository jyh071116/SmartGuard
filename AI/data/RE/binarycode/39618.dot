digraph G {
// Function: 39618.sol-RSPLT_E-RSPLT_E()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 39618.sol-RSPLT_E-addAccount(address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_21(bool) = msg.sender != owner
CONDITION TMP_21"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
StatEvent(err: not owner)

IRs:
Emit StatEvent(err: not owner)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
settingsState == SettingStateValue.locked

IRs:
REF_4(RSPLT_E.SettingStateValue) -> SettingStateValue.locked
TMP_23(bool) = settingsState == REF_4
CONDITION TMP_23"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
StatEvent(err: locked)

IRs:
Emit StatEvent(err: locked)"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
partnerAccounts[numAccounts].addr = _addr

IRs:
REF_5(RSPLT_E.partnerAccount) -> partnerAccounts[numAccounts]
REF_6(address) -> REF_5.addr
REF_6(address) (->partnerAccounts) := _addr(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
partnerAccounts[numAccounts].pctx10 = _pctx10

IRs:
REF_7(RSPLT_E.partnerAccount) -> partnerAccounts[numAccounts]
REF_8(uint256) -> REF_7.pctx10
REF_8(uint256) (->partnerAccounts) := _pctx10(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
partnerAccounts[numAccounts].evenStart = _evenStart

IRs:
REF_9(RSPLT_E.partnerAccount) -> partnerAccounts[numAccounts]
REF_10(bool) -> REF_9.evenStart
REF_10(bool) (->partnerAccounts) := _evenStart(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
partnerAccounts[numAccounts].credited = 0

IRs:
REF_11(RSPLT_E.partnerAccount) -> partnerAccounts[numAccounts]
REF_12(uint256) -> REF_11.credited
REF_12(uint256) (->partnerAccounts) := 0(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
partnerAccounts[numAccounts].balance = 0

IRs:
REF_13(RSPLT_E.partnerAccount) -> partnerAccounts[numAccounts]
REF_14(uint256) -> REF_13.balance
REF_14(uint256) (->partnerAccounts) := 0(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
++ numAccounts

IRs:
numAccounts(uint256) = numAccounts + 1"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
StatEvent(ok: acct added)

IRs:
Emit StatEvent(ok: acct added)"];
}
// Function: 39618.sol-RSPLT_E-distribute()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
holdoverBalance < TENHUNDWEI

IRs:
TMP_34(bool) = holdoverBalance < TENHUNDWEI
CONDITION TMP_34"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
numEvenSplits = 0

IRs:
numEvenSplits(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->30;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < numAccounts

IRs:
TMP_35(bool) = i < numAccounts
CONDITION TMP_35"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: IF 13

EXPRESSION:
partnerAccounts[i].evenStart

IRs:
REF_27(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_28(bool) -> REF_27.evenStart
CONDITION REF_28"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
++ numEvenSplits

IRs:
numEvenSplits(uint256) = numEvenSplits + 1"];
14->28;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
pctx10 = partnerAccounts[i].pctx10

IRs:
REF_29(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_30(uint256) -> REF_29.pctx10
pctx10(uint256) := REF_30(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
acctDist = holdoverBalance * pctx10 / TENHUNDWEI

IRs:
TMP_36(uint256) = holdoverBalance * pctx10
TMP_37(uint256) = TMP_36 / TENHUNDWEI
acctDist(uint256) := TMP_37(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
maxAcctDist = totalFundsReceived * pctx10 / TENHUNDWEI

IRs:
TMP_38(uint256) = totalFundsReceived * pctx10
TMP_39(uint256) = TMP_38 / TENHUNDWEI
maxAcctDist(uint256) := TMP_39(uint256)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
partnerAccounts[i].credited >= maxAcctDist

IRs:
REF_31(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_32(uint256) -> REF_31.credited
TMP_40(bool) = REF_32 >= maxAcctDist
CONDITION TMP_40"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
acctDist = 0

IRs:
acctDist(uint256) := 0(uint256)"];
19->23;
20[label="Node Type: IF 20

EXPRESSION:
partnerAccounts[i].credited + acctDist > maxAcctDist

IRs:
REF_33(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_34(uint256) -> REF_33.credited
TMP_41(uint256) = REF_34 + acctDist
TMP_42(bool) = TMP_41 > maxAcctDist
CONDITION TMP_42"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
acctDist = maxAcctDist - partnerAccounts[i].credited

IRs:
REF_35(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_36(uint256) -> REF_35.credited
TMP_43(uint256) = maxAcctDist - REF_36
acctDist(uint256) := TMP_43(uint256)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
partnerAccounts[i].credited += acctDist

IRs:
REF_37(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_38(uint256) -> REF_37.credited
REF_38(-> partnerAccounts) = REF_38 + acctDist"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
partnerAccounts[i].balance += acctDist

IRs:
REF_39(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_40(uint256) -> REF_39.balance
REF_40(-> partnerAccounts) = REF_40 + acctDist"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
totalFundsDistributed += acctDist

IRs:
totalFundsDistributed(uint256) = totalFundsDistributed + acctDist"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
holdoverBalance -= acctDist

IRs:
holdoverBalance(uint256) = holdoverBalance - acctDist"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i ++

IRs:
TMP_44(uint256) := i(uint256)
i(uint256) = i + 1"];
29->12;
30[label="Node Type: NEW VARIABLE 30

EXPRESSION:
distAmount = holdoverBalance

IRs:
distAmount(uint256) := holdoverBalance(uint256)"];
30->31;
31[label="Node Type: IF 31

EXPRESSION:
totalFundsDistributed < evenDistThresh

IRs:
TMP_45(bool) = totalFundsDistributed < evenDistThresh
CONDITION TMP_45"];
31->34[label="True"];
31->55[label="False"];
32[label="Node Type: BEGIN_LOOP 32
"];
32->35;
33[label="Node Type: END_LOOP 33
"];
33->55;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
34->32;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
i < numAccounts

IRs:
TMP_46(bool) = i < numAccounts
CONDITION TMP_46"];
35->36[label="True"];
35->33[label="False"];
36[label="Node Type: IF 36

EXPRESSION:
partnerAccounts[i].evenStart

IRs:
REF_41(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_42(bool) -> REF_41.evenStart
CONDITION REF_42"];
36->37[label="True"];
36->53[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
acctDist = distAmount / numEvenSplits

IRs:
TMP_47(uint256) = distAmount / numEvenSplits
acctDist(uint256) := TMP_47(uint256)"];
37->38;
38[label="Node Type: NEW VARIABLE 38

EXPRESSION:
fundLimit = totalFundsReceived

IRs:
fundLimit(uint256) := totalFundsReceived(uint256)"];
38->39;
39[label="Node Type: IF 39

EXPRESSION:
fundLimit > evenDistThresh

IRs:
TMP_48(bool) = fundLimit > evenDistThresh
CONDITION TMP_48"];
39->40[label="True"];
39->41[label="False"];
40[label="Node Type: EXPRESSION 40

EXPRESSION:
fundLimit = evenDistThresh

IRs:
fundLimit(uint256) := evenDistThresh(uint256)"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
maxAcctDist = fundLimit / numEvenSplits

IRs:
TMP_49(uint256) = fundLimit / numEvenSplits
maxAcctDist(uint256) := TMP_49(uint256)"];
42->43;
43[label="Node Type: IF 43

EXPRESSION:
partnerAccounts[i].credited >= maxAcctDist

IRs:
REF_43(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_44(uint256) -> REF_43.credited
TMP_50(bool) = REF_44 >= maxAcctDist
CONDITION TMP_50"];
43->44[label="True"];
43->45[label="False"];
44[label="Node Type: EXPRESSION 44

EXPRESSION:
acctDist = 0

IRs:
acctDist(uint256) := 0(uint256)"];
44->48;
45[label="Node Type: IF 45

EXPRESSION:
partnerAccounts[i].credited + acctDist > maxAcctDist

IRs:
REF_45(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_46(uint256) -> REF_45.credited
TMP_51(uint256) = REF_46 + acctDist
TMP_52(bool) = TMP_51 > maxAcctDist
CONDITION TMP_52"];
45->46[label="True"];
45->47[label="False"];
46[label="Node Type: EXPRESSION 46

EXPRESSION:
acctDist = maxAcctDist - partnerAccounts[i].credited

IRs:
REF_47(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_48(uint256) -> REF_47.credited
TMP_53(uint256) = maxAcctDist - REF_48
acctDist(uint256) := TMP_53(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
partnerAccounts[i].credited += acctDist

IRs:
REF_49(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_50(uint256) -> REF_49.credited
REF_50(-> partnerAccounts) = REF_50 + acctDist"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
partnerAccounts[i].balance += acctDist

IRs:
REF_51(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_52(uint256) -> REF_51.balance
REF_52(-> partnerAccounts) = REF_52 + acctDist"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
totalFundsDistributed += acctDist

IRs:
totalFundsDistributed(uint256) = totalFundsDistributed + acctDist"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
holdoverBalance -= acctDist

IRs:
holdoverBalance(uint256) = holdoverBalance - acctDist"];
52->53;
53[label="Node Type: END_IF 53
"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
i ++

IRs:
TMP_54(uint256) := i(uint256)
i(uint256) = i + 1"];
54->35;
55[label="Node Type: END_IF 55
"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
distAmount = holdoverBalance

IRs:
distAmount(uint256) := holdoverBalance(uint256)"];
56->57;
57[label="Node Type: IF 57

EXPRESSION:
distAmount > 0

IRs:
TMP_55(bool) = distAmount > 0
CONDITION TMP_55"];
57->60[label="True"];
57->78[label="False"];
58[label="Node Type: BEGIN_LOOP 58
"];
58->61;
59[label="Node Type: END_LOOP 59
"];
59->78;
60[label="Node Type: EXPRESSION 60

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
60->58;
61[label="Node Type: IF_LOOP 61

EXPRESSION:
i < numAccounts

IRs:
TMP_56(bool) = i < numAccounts
CONDITION TMP_56"];
61->62[label="True"];
61->59[label="False"];
62[label="Node Type: IF 62

EXPRESSION:
partnerAccounts[i].evenStart

IRs:
REF_53(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_54(bool) -> REF_53.evenStart
CONDITION REF_54"];
62->63[label="True"];
62->76[label="False"];
63[label="Node Type: EXPRESSION 63

EXPRESSION:
pctx10 = partnerAccounts[i].pctx10

IRs:
REF_55(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_56(uint256) -> REF_55.pctx10
pctx10(uint256) := REF_56(uint256)"];
63->64;
64[label="Node Type: EXPRESSION 64

EXPRESSION:
acctDist = distAmount * pctx10 / TENHUNDWEI

IRs:
TMP_57(uint256) = distAmount * pctx10
TMP_58(uint256) = TMP_57 / TENHUNDWEI
acctDist(uint256) := TMP_58(uint256)"];
64->65;
65[label="Node Type: EXPRESSION 65

EXPRESSION:
maxAcctDist = totalFundsReceived * pctx10 / TENHUNDWEI

IRs:
TMP_59(uint256) = totalFundsReceived * pctx10
TMP_60(uint256) = TMP_59 / TENHUNDWEI
maxAcctDist(uint256) := TMP_60(uint256)"];
65->66;
66[label="Node Type: IF 66

EXPRESSION:
partnerAccounts[i].credited >= maxAcctDist

IRs:
REF_57(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_58(uint256) -> REF_57.credited
TMP_61(bool) = REF_58 >= maxAcctDist
CONDITION TMP_61"];
66->67[label="True"];
66->68[label="False"];
67[label="Node Type: EXPRESSION 67

EXPRESSION:
acctDist = 0

IRs:
acctDist(uint256) := 0(uint256)"];
67->71;
68[label="Node Type: IF 68

EXPRESSION:
partnerAccounts[i].credited + acctDist > maxAcctDist

IRs:
REF_59(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_60(uint256) -> REF_59.credited
TMP_62(uint256) = REF_60 + acctDist
TMP_63(bool) = TMP_62 > maxAcctDist
CONDITION TMP_63"];
68->69[label="True"];
68->70[label="False"];
69[label="Node Type: EXPRESSION 69

EXPRESSION:
acctDist = maxAcctDist - partnerAccounts[i].credited

IRs:
REF_61(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_62(uint256) -> REF_61.credited
TMP_64(uint256) = maxAcctDist - REF_62
acctDist(uint256) := TMP_64(uint256)"];
69->70;
70[label="Node Type: END_IF 70
"];
70->71;
71[label="Node Type: END_IF 71
"];
71->72;
72[label="Node Type: EXPRESSION 72

EXPRESSION:
partnerAccounts[i].credited += acctDist

IRs:
REF_63(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_64(uint256) -> REF_63.credited
REF_64(-> partnerAccounts) = REF_64 + acctDist"];
72->73;
73[label="Node Type: EXPRESSION 73

EXPRESSION:
partnerAccounts[i].balance += acctDist

IRs:
REF_65(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_66(uint256) -> REF_65.balance
REF_66(-> partnerAccounts) = REF_66 + acctDist"];
73->74;
74[label="Node Type: EXPRESSION 74

EXPRESSION:
totalFundsDistributed += acctDist

IRs:
totalFundsDistributed(uint256) = totalFundsDistributed + acctDist"];
74->75;
75[label="Node Type: EXPRESSION 75

EXPRESSION:
holdoverBalance -= acctDist

IRs:
holdoverBalance(uint256) = holdoverBalance - acctDist"];
75->76;
76[label="Node Type: END_IF 76
"];
76->77;
77[label="Node Type: EXPRESSION 77

EXPRESSION:
i ++

IRs:
TMP_65(uint256) := i(uint256)
i(uint256) = i + 1"];
77->61;
78[label="Node Type: END_IF 78
"];
78->79;
79[label="Node Type: EXPRESSION 79

EXPRESSION:
StatEvent(ok: distributed funds)

IRs:
Emit StatEvent(ok: distributed funds)"];
}
// Function: 39618.sol-RSPLT_E-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalFundsReceived += msg.value

IRs:
totalFundsReceived(uint256) = totalFundsReceived + msg.value"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
holdoverBalance += msg.value

IRs:
holdoverBalance(uint256) = holdoverBalance + msg.value"];
}
// Function: 39618.sol-RSPLT_E-getAccountInfo(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->16;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < numAccounts

IRs:
TMP_26(bool) = i < numAccounts
CONDITION TMP_26"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
addr = partnerAccounts[i].addr

IRs:
REF_15(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_16(address) -> REF_15.addr
addr(address) := REF_16(address)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
addr == _addr

IRs:
TMP_27(bool) = addr == _addr
CONDITION TMP_27"];
6->7[label="True"];
6->14[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_idx = i

IRs:
_idx(uint256) := i(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_pctx10 = partnerAccounts[i].pctx10

IRs:
REF_17(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_18(uint256) -> REF_17.pctx10
_pctx10(uint256) := REF_18(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_evenStart = partnerAccounts[i].evenStart

IRs:
REF_19(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_20(bool) -> REF_19.evenStart
_evenStart(bool) := REF_20(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_credited = partnerAccounts[i].credited

IRs:
REF_21(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_22(uint256) -> REF_21.credited
_credited(uint256) := REF_22(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_balance = partnerAccounts[i].balance

IRs:
REF_23(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_24(uint256) -> REF_23.balance
_balance(uint256) := REF_24(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
StatEvent(ok: found acct)

IRs:
Emit StatEvent(ok: found acct)"];
12->13;
13[label="Node Type: RETURN 13
"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_29(uint256) := i(uint256)
i(uint256) = i + 1"];
15->4;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
StatEvent(err: acct not found)

IRs:
Emit StatEvent(err: acct not found)"];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(_idx,_pctx10,_evenStart,_credited,_balance)

IRs:
RETURN _idx,_pctx10,_evenStart,_credited,_balance"];
}
// Function: 39618.sol-RSPLT_E-getTotalPctx10()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_totalPctx10 = 0

IRs:
_totalPctx10(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < numAccounts

IRs:
TMP_31(bool) = i < numAccounts
CONDITION TMP_31"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_totalPctx10 += partnerAccounts[i].pctx10

IRs:
REF_25(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_26(uint256) -> REF_25.pctx10
_totalPctx10(uint256) = _totalPctx10 + REF_26"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_32(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
StatEventI(ok: total pctx10,_totalPctx10)

IRs:
Emit StatEventI(ok: total pctx10,_totalPctx10)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
_totalPctx10

IRs:
RETURN _totalPctx10"];
}
// Function: 39618.sol-RSPLT_E-hariKari()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_77(bool) = msg.sender != owner
CONDITION TMP_77"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
StatEvent(err: not owner)

IRs:
Emit StatEvent(err: not owner)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
settingsState == SettingStateValue.locked

IRs:
REF_76(RSPLT_E.SettingStateValue) -> SettingStateValue.locked
TMP_79(bool) = settingsState == REF_76
CONDITION TMP_79"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
StatEvent(err: locked)

IRs:
Emit StatEvent(err: locked)"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
suicide(address)(owner)

IRs:
TMP_81(None) = SOLIDITY_CALL suicide(address)(owner)"];
}
// Function: 39618.sol-RSPLT_E-lock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_0(bool) = msg.sender != owner
CONDITION TMP_0"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
StatEvent(err: not owner)

IRs:
Emit StatEvent(err: not owner)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
settingsState == SettingStateValue.locked

IRs:
REF_0(RSPLT_E.SettingStateValue) -> SettingStateValue.locked
TMP_2(bool) = settingsState == REF_0
CONDITION TMP_2"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
StatEvent(err: locked)

IRs:
Emit StatEvent(err: locked)"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
settingsState == SettingStateValue.locked

IRs:
REF_1(RSPLT_E.SettingStateValue) -> SettingStateValue.locked
TMP_4(bool) = settingsState == REF_1"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
StatEvent(ok: contract locked)

IRs:
Emit StatEvent(ok: contract locked)"];
}
// Function: 39618.sol-RSPLT_E-reset()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_6(bool) = msg.sender != owner
CONDITION TMP_6"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
StatEvent(err: not owner)

IRs:
Emit StatEvent(err: not owner)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
settingsState == SettingStateValue.locked

IRs:
REF_2(RSPLT_E.SettingStateValue) -> SettingStateValue.locked
TMP_8(bool) = settingsState == REF_2
CONDITION TMP_8"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
StatEvent(err: locked)

IRs:
Emit StatEvent(err: locked)"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
numAccounts = 0

IRs:
numAccounts(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
holdoverBalance = 0

IRs:
holdoverBalance(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalFundsReceived = 0

IRs:
totalFundsReceived(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
totalFundsDistributed = 0

IRs:
totalFundsDistributed(uint256) := 0(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
StatEvent(ok: all accts reset)

IRs:
Emit StatEvent(ok: all accts reset)"];
}
// Function: 39618.sol-RSPLT_E-setEvenDistThresh(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_11(bool) = msg.sender != owner
CONDITION TMP_11"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
StatEvent(err: not owner)

IRs:
Emit StatEvent(err: not owner)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
settingsState == SettingStateValue.locked

IRs:
REF_3(RSPLT_E.SettingStateValue) -> SettingStateValue.locked
TMP_13(bool) = settingsState == REF_3
CONDITION TMP_13"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
StatEvent(err: locked)

IRs:
Emit StatEvent(err: locked)"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
evenDistThresh = (_thresh / TENHUNDWEI) * TENHUNDWEI

IRs:
TMP_15(uint256) = _thresh / TENHUNDWEI
TMP_16(uint256) = TMP_15 * TENHUNDWEI
evenDistThresh(uint256) := TMP_16(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
StatEventI(ok: threshold set,evenDistThresh)

IRs:
Emit StatEventI(ok: threshold set,evenDistThresh)"];
}
// Function: 39618.sol-RSPLT_E-setWitdrawGas(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_18(bool) = msg.sender != owner
CONDITION TMP_18"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
StatEvent(err: not owner)

IRs:
Emit StatEvent(err: not owner)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
withdrawGas = _withdrawGas

IRs:
withdrawGas(uint256) := _withdrawGas(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
StatEventI(ok: withdraw gas set,withdrawGas)

IRs:
Emit StatEventI(ok: withdraw gas set,withdrawGas)"];
}
// Function: 39618.sol-RSPLT_E-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
withdrawGas = 35000

IRs:
withdrawGas(uint256) := 35000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
TENHUNDWEI = 1000

IRs:
TENHUNDWEI(uint256) := 1000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
settingsState = SettingStateValue.debug

IRs:
REF_77(RSPLT_E.SettingStateValue) -> SettingStateValue.debug
settingsState(RSPLT_E.SettingStateValue) := REF_77(RSPLT_E.SettingStateValue)"];
}
// Function: 39618.sol-RSPLT_E-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < numAccounts

IRs:
TMP_67(bool) = i < numAccounts
CONDITION TMP_67"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
addr = partnerAccounts[i].addr

IRs:
REF_67(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_68(address) -> REF_67.addr
addr(address) := REF_68(address)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
addr == msg.sender

IRs:
TMP_68(bool) = addr == msg.sender
CONDITION TMP_68"];
6->7[label="True"];
6->16[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
amount = partnerAccounts[i].balance

IRs:
REF_69(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_70(uint256) -> REF_69.balance
amount(uint256) := REF_70(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
amount == 0

IRs:
TMP_69(bool) = amount == 0
CONDITION TMP_69"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
StatEvent(err: balance is zero)

IRs:
Emit StatEvent(err: balance is zero)"];
9->15;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
partnerAccounts[i].balance = 0

IRs:
REF_71(RSPLT_E.partnerAccount) -> partnerAccounts[i]
REF_72(uint256) -> REF_71.balance
REF_72(uint256) (->partnerAccounts) := 0(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
! msg.sender.call.gas(withdrawGas).value(amount)()

IRs:
TMP_73(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount gas:withdrawGas
TMP_74 = UnaryType.BANG TMP_73 
CONDITION TMP_74"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: THROW 12
"];
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
StatEventI(ok: rewards paid,amount)

IRs:
Emit StatEventI(ok: rewards paid,amount)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_76(uint256) := i(uint256)
i(uint256) = i + 1"];
17->4;
}
}
