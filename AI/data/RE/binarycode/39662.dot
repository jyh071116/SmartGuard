digraph G {
// Function: 39662.sol-ElectricQueue-ElectricQueue(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Owner = msg.sender

IRs:
Owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
syncDate = now

IRs:
syncDate(uint256) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Proxy = proxy

IRs:
Proxy(address) := proxy(address)"];
}
// Function: 39662.sol-ElectricQueue-calculateCountOfInvestmetnsInQueue(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
queueInvestments = 0

IRs:
queueInvestments(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
investmantBalance = 0

IRs:
investmantBalance(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
length = InvestmentsCount

IRs:
length(uint256) := InvestmentsCount(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_ids = new uint256[](length)

IRs:
TMP_61(uint256[])  = new uint256[](length)
_ids(uint256[]) = ['TMP_61(uint256[])']"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_addresses = new address[](length)

IRs:
TMP_63(address[])  = new address[](length)
_addresses(address[]) = ['TMP_63(address[])']"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_balances = new uint256[](length)

IRs:
TMP_65(uint256[])  = new uint256[](length)
_balances(uint256[]) = ['TMP_65(uint256[])']"];
7->8;
8[label="Node Type: BEGIN_LOOP 8
"];
8->9;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < InvestmentsCount && difference > 0

IRs:
TMP_66(bool) = i < InvestmentsCount
TMP_67(bool) = difference > 0
TMP_68(bool) = TMP_66 && TMP_67
CONDITION TMP_68"];
9->10[label="True"];
9->24[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
Investments[i].ChargerId == 0 && Investments[i].Balance >= 1000000000000000000

IRs:
REF_70(ElectricQueue.Investment) -> Investments[i]
REF_71(uint256) -> REF_70.ChargerId
TMP_69(bool) = REF_71 == 0
REF_72(ElectricQueue.Investment) -> Investments[i]
REF_73(uint256) -> REF_72.Balance
TMP_70(bool) = REF_73 >= 1000000000000000000
TMP_71(bool) = TMP_69 && TMP_70
CONDITION TMP_71"];
10->11[label="True"];
10->22[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
difference > Investments[i].Balance

IRs:
REF_74(ElectricQueue.Investment) -> Investments[i]
REF_75(uint256) -> REF_74.Balance
TMP_72(bool) = difference > REF_75
CONDITION TMP_72"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
investmantBalance = Investments[i].Balance

IRs:
REF_76(ElectricQueue.Investment) -> Investments[i]
REF_77(uint256) -> REF_76.Balance
investmantBalance(uint256) := REF_77(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Investments[i].Balance = 0

IRs:
REF_78(ElectricQueue.Investment) -> Investments[i]
REF_79(uint256) -> REF_78.Balance
REF_79(uint256) (->Investments) := 0(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Investments[i].IsTransfered = true

IRs:
REF_80(ElectricQueue.Investment) -> Investments[i]
REF_81(bool) -> REF_80.IsTransfered
REF_81(bool) (->Investments) := True(bool)"];
14->17;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
investmantBalance = difference

IRs:
investmantBalance(uint256) := difference(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Investments[i].Balance -= difference

IRs:
REF_82(ElectricQueue.Investment) -> Investments[i]
REF_83(uint256) -> REF_82.Balance
REF_83(-> Investments) = REF_83 - difference"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_ids[queueInvestments] = Investments[i].InvestmentId

IRs:
REF_84(uint256) -> _ids[queueInvestments]
REF_85(ElectricQueue.Investment) -> Investments[i]
REF_86(uint256) -> REF_85.InvestmentId
REF_84(uint256) (->_ids) := REF_86(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_addresses[queueInvestments] = Investments[i].Address

IRs:
REF_87(address) -> _addresses[queueInvestments]
REF_88(ElectricQueue.Investment) -> Investments[i]
REF_89(address) -> REF_88.Address
REF_87(address) (->_addresses) := REF_89(address)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_balances[queueInvestments] = investmantBalance

IRs:
REF_90(uint256) -> _balances[queueInvestments]
REF_90(uint256) (->_balances) := investmantBalance(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
queueInvestments ++

IRs:
TMP_73(uint256) := queueInvestments(uint256)
queueInvestments(uint256) = queueInvestments + 1"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i ++

IRs:
TMP_74(uint256) := i(uint256)
i(uint256) = i + 1"];
23->9;
24[label="Node Type: END_LOOP 24
"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
Chargers[id].Address.setInvestors(_ids,_addresses,_balances,queueInvestments)

IRs:
REF_91(ElectricQueue.Charger) -> Chargers[id]
REF_92(IElectricCharger) -> REF_91.Address
HIGH_LEVEL_CALL, dest:REF_92(IElectricCharger), function:setInvestors, arguments:['_ids', '_addresses', '_balances', 'queueInvestments']  "];
}
// Function: 39662.sol-ElectricQueue-checkCharger(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! Chargers[_chargerId].IsActive

IRs:
REF_26(ElectricQueue.Charger) -> Chargers[_chargerId]
REF_27(bool) -> REF_26.IsActive
TMP_18 = UnaryType.BANG REF_27 
CONDITION TMP_18"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Chargers[_chargerId].IsActive = true

IRs:
REF_28(ElectricQueue.Charger) -> Chargers[_chargerId]
REF_29(bool) -> REF_28.IsActive
REF_29(bool) (->Chargers) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ChargersIds.push(_chargerId)

IRs:
REF_31 -> LENGTH ChargersIds
TMP_20(uint256) := REF_31(uint256)
TMP_21(uint256) = TMP_20 + 1
REF_31(uint256) (->ChargersIds) := TMP_21(uint256)
REF_32(uint256) -> ChargersIds[TMP_20]
REF_32(uint256) (->ChargersIds) := _chargerId(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ChargersCount ++

IRs:
TMP_22(uint256) := ChargersCount(uint256)
ChargersCount(uint256) = ChargersCount + 1"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 39662.sol-ElectricQueue-createInvestment(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
checkCharger(_chargerId)

IRs:
INTERNAL_CALL, ElectricQueue.checkCharger(uint256)(_chargerId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
InvestmentsCount ++

IRs:
TMP_8(uint256) := InvestmentsCount(uint256)
InvestmentsCount(uint256) = InvestmentsCount + 1"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newInvestment.Address = _address

IRs:
REF_10(address) -> _newInvestment.Address
REF_10(address) (->_newInvestment) := _address(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newInvestment.ChargerId = _chargerId

IRs:
REF_11(uint256) -> _newInvestment.ChargerId
REF_11(uint256) (->_newInvestment) := _chargerId(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_newInvestment.InvestmentId = InvestmentsCount

IRs:
REF_12(uint256) -> _newInvestment.InvestmentId
REF_12(uint256) (->_newInvestment) := InvestmentsCount(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Investments.push(_newInvestment)

IRs:
REF_14 -> LENGTH Investments
TMP_10(uint256) := REF_14(uint256)
TMP_11(uint256) = TMP_10 + 1
REF_14(uint256) (->Investments) := TMP_11(uint256)
REF_15(ElectricQueue.Investment) -> Investments[TMP_10]
REF_15(ElectricQueue.Investment) (->Investments) := _newInvestment(ElectricQueue.Investment)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
_newInvestment

IRs:
RETURN _newInvestment"];
9[label="Node Type: RETURN 9

EXPRESSION:
investor

IRs:
RETURN investor"];
}
// Function: 39662.sol-ElectricQueue-getAllInvestments()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
length = InvestmentsCount

IRs:
length(uint256) := InvestmentsCount(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_ids = new uint256[](length)

IRs:
TMP_30(uint256[])  = new uint256[](length)
_ids(uint256[]) = ['TMP_30(uint256[])']"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addresses = new address[](length)

IRs:
TMP_32(address[])  = new address[](length)
_addresses(address[]) = ['TMP_32(address[])']"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_chargerIds = new uint256[](length)

IRs:
TMP_34(uint256[])  = new uint256[](length)
_chargerIds(uint256[]) = ['TMP_34(uint256[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_balances = new uint256[](length)

IRs:
TMP_36(uint256[])  = new uint256[](length)
_balances(uint256[]) = ['TMP_36(uint256[])']"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_states = new bool[](length)

IRs:
TMP_38(bool[])  = new bool[](length)
_states(bool[]) = ['TMP_38(bool[])']"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_lastUpdateDates = new uint256[](length)

IRs:
TMP_40(uint256[])  = new uint256[](length)
_lastUpdateDates(uint256[]) = ['TMP_40(uint256[])']"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_totalSums = new uint256[](length)

IRs:
TMP_42(uint256[])  = new uint256[](length)
_totalSums(uint256[]) = ['TMP_42(uint256[])']"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->21;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < InvestmentsCount

IRs:
TMP_43(bool) = i < InvestmentsCount
CONDITION TMP_43"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_ids[i] = Investments[i].InvestmentId

IRs:
REF_40(uint256) -> _ids[i]
REF_41(ElectricQueue.Investment) -> Investments[i]
REF_42(uint256) -> REF_41.InvestmentId
REF_40(uint256) (->_ids) := REF_42(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_addresses[i] = Investments[i].Address

IRs:
REF_43(address) -> _addresses[i]
REF_44(ElectricQueue.Investment) -> Investments[i]
REF_45(address) -> REF_44.Address
REF_43(address) (->_addresses) := REF_45(address)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_chargerIds[i] = Investments[i].ChargerId

IRs:
REF_46(uint256) -> _chargerIds[i]
REF_47(ElectricQueue.Investment) -> Investments[i]
REF_48(uint256) -> REF_47.ChargerId
REF_46(uint256) (->_chargerIds) := REF_48(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_balances[i] = Investments[i].Balance

IRs:
REF_49(uint256) -> _balances[i]
REF_50(ElectricQueue.Investment) -> Investments[i]
REF_51(uint256) -> REF_50.Balance
REF_49(uint256) (->_balances) := REF_51(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_states[i] = Investments[i].IsTransfered

IRs:
REF_52(bool) -> _states[i]
REF_53(ElectricQueue.Investment) -> Investments[i]
REF_54(bool) -> REF_53.IsTransfered
REF_52(bool) (->_states) := REF_54(bool)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_totalSums[i] = Investments[i].TotalSum

IRs:
REF_55(uint256) -> _totalSums[i]
REF_56(ElectricQueue.Investment) -> Investments[i]
REF_57(uint256) -> REF_56.TotalSum
REF_55(uint256) (->_totalSums) := REF_57(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_lastUpdateDates[i] = Investments[i].LastUpdateDate

IRs:
REF_58(uint256) -> _lastUpdateDates[i]
REF_59(ElectricQueue.Investment) -> Investments[i]
REF_60(uint256) -> REF_59.LastUpdateDate
REF_58(uint256) (->_lastUpdateDates) := REF_60(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_44(uint256) := i(uint256)
i(uint256) = i + 1"];
20->12;
21[label="Node Type: RETURN 21

EXPRESSION:
(_ids,_addresses,_chargerIds,_balances,_states,_lastUpdateDates,_totalSums)

IRs:
RETURN _ids,_addresses,_chargerIds,_balances,_states,_lastUpdateDates,_totalSums"];
22[label="Node Type: RETURN 22

EXPRESSION:
(ids,addresses,chargerIds,balances,states,lastUpdateDates,totalSum)

IRs:
RETURN ids,addresses,chargerIds,balances,states,lastUpdateDates,totalSum"];
}
// Function: 39662.sol-ElectricQueue-getAmountForCharger(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sumBalance = 0

IRs:
sumBalance(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
chargerInvestments = 0

IRs:
chargerInvestments(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
length = InvestmentsCount

IRs:
length(uint256) := InvestmentsCount(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_ids = new uint256[](length)

IRs:
TMP_77(uint256[])  = new uint256[](length)
_ids(uint256[]) = ['TMP_77(uint256[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_addresses = new address[](length)

IRs:
TMP_79(address[])  = new address[](length)
_addresses(address[]) = ['TMP_79(address[])']"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_balances = new uint256[](length)

IRs:
TMP_81(uint256[])  = new uint256[](length)
_balances(uint256[]) = ['TMP_81(uint256[])']"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->21;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < InvestmentsCount

IRs:
TMP_82(bool) = i < InvestmentsCount
CONDITION TMP_82"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
Investments[i].ChargerId == id && Investments[i].Balance >= 1000000000000000000

IRs:
REF_94(ElectricQueue.Investment) -> Investments[i]
REF_95(uint256) -> REF_94.ChargerId
TMP_83(bool) = REF_95 == id
REF_96(ElectricQueue.Investment) -> Investments[i]
REF_97(uint256) -> REF_96.Balance
TMP_84(bool) = REF_97 >= 1000000000000000000
TMP_85(bool) = TMP_83 && TMP_84
CONDITION TMP_85"];
11->12[label="True"];
11->19[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_ids[chargerInvestments] = Investments[i].InvestmentId

IRs:
REF_98(uint256) -> _ids[chargerInvestments]
REF_99(ElectricQueue.Investment) -> Investments[i]
REF_100(uint256) -> REF_99.InvestmentId
REF_98(uint256) (->_ids) := REF_100(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_addresses[chargerInvestments] = Investments[i].Address

IRs:
REF_101(address) -> _addresses[chargerInvestments]
REF_102(ElectricQueue.Investment) -> Investments[i]
REF_103(address) -> REF_102.Address
REF_101(address) (->_addresses) := REF_103(address)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_balances[chargerInvestments] = Investments[i].Balance

IRs:
REF_104(uint256) -> _balances[chargerInvestments]
REF_105(ElectricQueue.Investment) -> Investments[i]
REF_106(uint256) -> REF_105.Balance
REF_104(uint256) (->_balances) := REF_106(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
sumBalance += Investments[i].Balance

IRs:
REF_107(ElectricQueue.Investment) -> Investments[i]
REF_108(uint256) -> REF_107.Balance
sumBalance(uint256) = sumBalance + REF_108"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Investments[i].Balance = 0

IRs:
REF_109(ElectricQueue.Investment) -> Investments[i]
REF_110(uint256) -> REF_109.Balance
REF_110(uint256) (->Investments) := 0(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Investments[i].IsTransfered = true

IRs:
REF_111(ElectricQueue.Investment) -> Investments[i]
REF_112(bool) -> REF_111.IsTransfered
REF_112(bool) (->Investments) := True(bool)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
chargerInvestments ++

IRs:
TMP_86(uint256) := chargerInvestments(uint256)
chargerInvestments(uint256) = chargerInvestments + 1"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_87(uint256) := i(uint256)
i(uint256) = i + 1"];
20->10;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
Chargers[id].Address.setInvestors(_ids,_addresses,_balances,chargerInvestments)

IRs:
REF_113(ElectricQueue.Charger) -> Chargers[id]
REF_114(IElectricCharger) -> REF_113.Address
HIGH_LEVEL_CALL, dest:REF_114(IElectricCharger), function:setInvestors, arguments:['_ids', '_addresses', '_balances', 'chargerInvestments']  "];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sumBalance

IRs:
RETURN sumBalance"];
}
// Function: 39662.sol-ElectricQueue-getChargers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
length = ChargersIds.length

IRs:
REF_0 -> LENGTH ChargersIds
length(uint256) := REF_0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addresses = new address[](length)

IRs:
TMP_2(address[])  = new address[](length)
_addresses(address[]) = ['TMP_2(address[])']"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_states = new bool[](length)

IRs:
TMP_4(bool[])  = new bool[](length)
_states(bool[]) = ['TMP_4(bool[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < ChargersIds.length

IRs:
REF_1 -> LENGTH ChargersIds
TMP_5(bool) = i < REF_1
CONDITION TMP_5"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_addresses[i] = Chargers[ChargersIds[i]].Address

IRs:
REF_2(address) -> _addresses[i]
REF_3(uint256) -> ChargersIds[i]
REF_4(ElectricQueue.Charger) -> Chargers[REF_3]
REF_5(IElectricCharger) -> REF_4.Address
REF_2(address) (->_addresses) := REF_5(IElectricCharger)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_states[i] = Chargers[ChargersIds[i]].IsActive

IRs:
REF_6(bool) -> _states[i]
REF_7(uint256) -> ChargersIds[i]
REF_8(ElectricQueue.Charger) -> Chargers[REF_7]
REF_9(bool) -> REF_8.IsActive
REF_6(bool) (->_states) := REF_9(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_6(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: RETURN 11

EXPRESSION:
(ChargersIds,_addresses,_states)

IRs:
RETURN ChargersIds,_addresses,_states"];
12[label="Node Type: RETURN 12

EXPRESSION:
(chargers,addresses,states)

IRs:
RETURN chargers,addresses,states"];
}
// Function: 39662.sol-ElectricQueue-getInvestment(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < InvestmentsCount

IRs:
TMP_23(bool) = i < InvestmentsCount
CONDITION TMP_23"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
Investments[i].Address == _address && Investments[i].ChargerId == _charger

IRs:
REF_33(ElectricQueue.Investment) -> Investments[i]
REF_34(address) -> REF_33.Address
TMP_24(bool) = REF_34 == _address
REF_35(ElectricQueue.Investment) -> Investments[i]
REF_36(uint256) -> REF_35.ChargerId
TMP_25(bool) = REF_36 == _charger
TMP_26(bool) = TMP_24 && TMP_25
CONDITION TMP_26"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
Investments[i].InvestmentId

IRs:
REF_37(ElectricQueue.Investment) -> Investments[i]
REF_38(uint256) -> REF_37.InvestmentId
RETURN REF_38"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_27(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_investment = createInvestment(_address,_charger)

IRs:
TMP_28(ElectricQueue.Investment) = INTERNAL_CALL, ElectricQueue.createInvestment(address,uint256)(_address,_charger)
_investment(ElectricQueue.Investment) := TMP_28(ElectricQueue.Investment)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
_investment.InvestmentId

IRs:
REF_39(uint256) -> _investment.InvestmentId
RETURN REF_39"];
11[label="Node Type: RETURN 11

EXPRESSION:
investmentId

IRs:
RETURN investmentId"];
}
// Function: 39662.sol-ElectricQueue-investInQueue(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
investmentId = getInvestment(_from,_charger)

IRs:
TMP_12(uint256) = INTERNAL_CALL, ElectricQueue.getInvestment(address,uint256)(_from,_charger)
investmentId(uint256) := TMP_12(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Investments[investmentId - 1].Balance += msg.value

IRs:
TMP_13(uint256) = investmentId - 1
REF_16(ElectricQueue.Investment) -> Investments[TMP_13]
REF_17(uint256) -> REF_16.Balance
REF_17(-> Investments) = REF_17 + msg.value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Investments[investmentId - 1].TotalSum += msg.value

IRs:
TMP_14(uint256) = investmentId - 1
REF_18(ElectricQueue.Investment) -> Investments[TMP_14]
REF_19(uint256) -> REF_18.TotalSum
REF_19(-> Investments) = REF_19 + msg.value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Investments[investmentId - 1].IsTransfered = false

IRs:
TMP_15(uint256) = investmentId - 1
REF_20(ElectricQueue.Investment) -> Investments[TMP_15]
REF_21(bool) -> REF_20.IsTransfered
REF_21(bool) (->Investments) := False(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Investments[investmentId - 1].IsReturned = false

IRs:
TMP_16(uint256) = investmentId - 1
REF_22(ElectricQueue.Investment) -> Investments[TMP_16]
REF_23(bool) -> REF_22.IsReturned
REF_23(bool) (->Investments) := False(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Investments[investmentId - 1].LastUpdateDate = now

IRs:
TMP_17(uint256) = investmentId - 1
REF_24(ElectricQueue.Investment) -> Investments[TMP_17]
REF_25(uint256) -> REF_24.LastUpdateDate
REF_25(uint256) (->Investments) := now(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
syncDate = now

IRs:
syncDate(uint256) := now(uint256)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39662.sol-ElectricQueue-returnMoney(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != Proxy

IRs:
TMP_89(bool) = msg.sender != Proxy
CONDITION TMP_89"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->16;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < InvestmentsCount

IRs:
TMP_90(bool) = i < InvestmentsCount
CONDITION TMP_90"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
Investments[i].Address == _to

IRs:
REF_116(ElectricQueue.Investment) -> Investments[i]
REF_117(address) -> REF_116.Address
TMP_91(bool) = REF_117 == _to
CONDITION TMP_91"];
8->9[label="True"];
8->14[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
! _to.send(Investments[i].Balance)

IRs:
REF_119(ElectricQueue.Investment) -> Investments[i]
REF_120(uint256) -> REF_119.Balance
TMP_92 = SEND dest:_to value:REF_120
TMP_93 = UnaryType.BANG TMP_92 
CONDITION TMP_93"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Investments[i].Balance = 0

IRs:
REF_121(ElectricQueue.Investment) -> Investments[i]
REF_122(uint256) -> REF_121.Balance
REF_122(uint256) (->Investments) := 0(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Investments[i].IsReturned = true

IRs:
REF_123(ElectricQueue.Investment) -> Investments[i]
REF_124(bool) -> REF_123.IsReturned
REF_124(bool) (->Investments) := True(bool)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_94(uint256) := i(uint256)
i(uint256) = i + 1"];
15->7;
16[label="Node Type: RETURN 16

EXPRESSION:
true

IRs:
RETURN True"];
17[label="Node Type: RETURN 17

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39662.sol-ElectricQueue-sendToCharger(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != Owner && msg.sender != Manager

IRs:
TMP_49(bool) = msg.sender != Owner
TMP_50(bool) = msg.sender != Manager
TMP_51(bool) = TMP_49 && TMP_50
CONDITION TMP_51"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_amountForCharger = getAmountForCharger(id)

IRs:
TMP_52(uint256) = INTERNAL_CALL, ElectricQueue.getAmountForCharger(uint256)(id)
_amountForCharger(uint256) := TMP_52(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_priceOfCharger = Chargers[id].Address.getPrice()

IRs:
REF_63(ElectricQueue.Charger) -> Chargers[id]
REF_64(IElectricCharger) -> REF_63.Address
TMP_53(uint256) = HIGH_LEVEL_CALL, dest:REF_64(IElectricCharger), function:getPrice, arguments:[]  
_priceOfCharger(uint256) := TMP_53(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_priceOfCharger > _amountForCharger

IRs:
TMP_54(bool) = _priceOfCharger > _amountForCharger
CONDITION TMP_54"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
difference = _priceOfCharger - _amountForCharger

IRs:
TMP_55(uint256) = _priceOfCharger - _amountForCharger
difference(uint256) := TMP_55(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
calculateCountOfInvestmetnsInQueue(difference,id)

IRs:
INTERNAL_CALL, ElectricQueue.calculateCountOfInvestmetnsInQueue(uint256,uint256)(difference,id)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
! Chargers[id].Address.call.value(_priceOfCharger)()

IRs:
REF_66(ElectricQueue.Charger) -> Chargers[id]
REF_67(IElectricCharger) -> REF_66.Address
TMP_58(bool) = LOW_LEVEL_CALL, dest:REF_67, function:call, arguments:[] value:_priceOfCharger 
TMP_59 = UnaryType.BANG TMP_58 
CONDITION TMP_59"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: THROW 11
"];
12[label="Node Type: END_IF 12
"];
}
// Function: 39662.sol-ElectricQueue-setChargerAddress(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != Owner && msg.sender != Manager

IRs:
TMP_45(bool) = msg.sender != Owner
TMP_46(bool) = msg.sender != Manager
TMP_47(bool) = TMP_45 && TMP_46
CONDITION TMP_47"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Chargers[id].Address = IElectricCharger(chargerAddress)

IRs:
REF_61(ElectricQueue.Charger) -> Chargers[id]
REF_62(IElectricCharger) -> REF_61.Address
TMP_48 = CONVERT chargerAddress to IElectricCharger
REF_62(IElectricCharger) (->Chargers) := TMP_48(IElectricCharger)"];
}
// Function: 39662.sol-ElectricQueue-setManager(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != Owner

IRs:
TMP_0(bool) = msg.sender != Owner
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Manager = manager

IRs:
Manager(address) := manager(address)"];
}
// Function: 39662.sol-IElectricCharger-getPrice()
digraph{
}
// Function: 39662.sol-IElectricCharger-setInvestors(uint256[],address[],uint256[],uint256)
digraph{
}
}
