digraph G {
// Function: 39858.sol-MilestoneTracker-MilestoneTracker(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
arbitrator = _arbitrator

IRs:
arbitrator(address) := _arbitrator(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
donor = _donor

IRs:
donor(address) := _donor(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
recipient = _recipient

IRs:
recipient(address) := _recipient(address)"];
}
// Function: 39858.sol-MilestoneTracker-acceptProposedMilestones(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->44;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! changingMilestones

IRs:
TMP_127 = UnaryType.BANG changingMilestones 
CONDITION TMP_127"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
sha3()(proposedMilestones) != _hashProposals

IRs:
TMP_128(bytes32) = SOLIDITY_CALL sha3()(proposedMilestones)
TMP_129(bool) = TMP_128 != _hashProposals
CONDITION TMP_129"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->16;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < milestones.length

IRs:
REF_32 -> LENGTH milestones
TMP_130(bool) = i < REF_32
CONDITION TMP_130"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
milestones[i].status != MilestoneStatus.AuthorizedForPayment

IRs:
REF_33(MilestoneTracker.Milestone) -> milestones[i]
REF_34(MilestoneTracker.MilestoneStatus) -> REF_33.status
REF_35(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.AuthorizedForPayment
TMP_131(bool) = REF_34 != REF_35
CONDITION TMP_131"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
milestones[i].status = MilestoneStatus.Canceled

IRs:
REF_36(MilestoneTracker.Milestone) -> milestones[i]
REF_37(MilestoneTracker.MilestoneStatus) -> REF_36.status
REF_38(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.Canceled
REF_37(MilestoneTracker.MilestoneStatus) (->milestones) := REF_38(MilestoneTracker.MilestoneStatus)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_132(uint256) := i(uint256)
i(uint256) = i + 1"];
15->11;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
mProposedMilestones = proposedMilestones

IRs:
mProposedMilestones(bytes) := proposedMilestones(bytes)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
itmProposals = mProposedMilestones.toRLPItem(true)

IRs:
TMP_133(RLP.RLPItem) = LIBRARY_CALL, dest:RLP, function:RLP.toRLPItem(bytes,bool), arguments:['mProposedMilestones', 'True'] 
itmProposals(RLP.RLPItem) := TMP_133(RLP.RLPItem)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
! itmProposals.isList()

IRs:
TMP_134(bool) = LIBRARY_CALL, dest:RLP, function:RLP.isList(RLP.RLPItem), arguments:['itmProposals'] 
TMP_135 = UnaryType.BANG TMP_134 
CONDITION TMP_135"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: THROW 19
"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
itrProposals = itmProposals.iterator()

IRs:
TMP_136(RLP.Iterator) = LIBRARY_CALL, dest:RLP, function:RLP.iterator(RLP.RLPItem), arguments:['itmProposals'] 
itrProposals(RLP.Iterator) := TMP_136(RLP.Iterator)"];
21->22;
22[label="Node Type: BEGIN_LOOP 22
"];
22->23;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
itrProposals.hasNext()

IRs:
TMP_137(bool) = LIBRARY_CALL, dest:RLP, function:RLP.hasNext(RLP.Iterator), arguments:['itrProposals'] 
CONDITION TMP_137"];
23->24[label="True"];
23->40[label="False"];
24[label="Node Type: NEW VARIABLE 24

EXPRESSION:
itmProposal = itrProposals.next()

IRs:
TMP_138(RLP.RLPItem) = LIBRARY_CALL, dest:RLP, function:RLP.next(RLP.Iterator), arguments:['itrProposals'] 
itmProposal(RLP.RLPItem) := TMP_138(RLP.RLPItem)"];
24->25;
25[label="Node Type: NEW VARIABLE 25

EXPRESSION:
milestone = milestones[milestones.length ++]

IRs:
REF_44 -> LENGTH milestones
TMP_139(uint256) := REF_44(uint256)
REF_44(-> milestones) = REF_44 + 1
REF_45(MilestoneTracker.Milestone) -> milestones[TMP_139]
milestone(MilestoneTracker.Milestone) := REF_45(MilestoneTracker.Milestone)"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
! itmProposal.isList()

IRs:
TMP_140(bool) = LIBRARY_CALL, dest:RLP, function:RLP.isList(RLP.RLPItem), arguments:['itmProposal'] 
TMP_141 = UnaryType.BANG TMP_140 
CONDITION TMP_141"];
26->27[label="True"];
26->28[label="False"];
27[label="Node Type: THROW 27
"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: NEW VARIABLE 29

EXPRESSION:
itrProposal = itmProposal.iterator()

IRs:
TMP_142(RLP.Iterator) = LIBRARY_CALL, dest:RLP, function:RLP.iterator(RLP.RLPItem), arguments:['itmProposal'] 
itrProposal(RLP.Iterator) := TMP_142(RLP.Iterator)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
milestone.description = itrProposal.next().toAscii()

IRs:
REF_48(string) -> milestone.description
TMP_143(RLP.RLPItem) = LIBRARY_CALL, dest:RLP, function:RLP.next(RLP.Iterator), arguments:['itrProposal'] 
TMP_144(string) = LIBRARY_CALL, dest:RLP, function:RLP.toAscii(RLP.RLPItem), arguments:['TMP_143'] 
REF_48(string) (->milestone) := TMP_144(string)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
milestone.url = itrProposal.next().toAscii()

IRs:
REF_51(string) -> milestone.url
TMP_145(RLP.RLPItem) = LIBRARY_CALL, dest:RLP, function:RLP.next(RLP.Iterator), arguments:['itrProposal'] 
TMP_146(string) = LIBRARY_CALL, dest:RLP, function:RLP.toAscii(RLP.RLPItem), arguments:['TMP_145'] 
REF_51(string) (->milestone) := TMP_146(string)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
milestone.minCompletionDate = itrProposal.next().toUint()

IRs:
REF_54(uint256) -> milestone.minCompletionDate
TMP_147(RLP.RLPItem) = LIBRARY_CALL, dest:RLP, function:RLP.next(RLP.Iterator), arguments:['itrProposal'] 
TMP_148(uint256) = LIBRARY_CALL, dest:RLP, function:RLP.toUint(RLP.RLPItem), arguments:['TMP_147'] 
REF_54(uint256) (->milestone) := TMP_148(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
milestone.maxCompletionDate = itrProposal.next().toUint()

IRs:
REF_57(uint256) -> milestone.maxCompletionDate
TMP_149(RLP.RLPItem) = LIBRARY_CALL, dest:RLP, function:RLP.next(RLP.Iterator), arguments:['itrProposal'] 
TMP_150(uint256) = LIBRARY_CALL, dest:RLP, function:RLP.toUint(RLP.RLPItem), arguments:['TMP_149'] 
REF_57(uint256) (->milestone) := TMP_150(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
milestone.milestoneLeadLink = itrProposal.next().toAddress()

IRs:
REF_60(address) -> milestone.milestoneLeadLink
TMP_151(RLP.RLPItem) = LIBRARY_CALL, dest:RLP, function:RLP.next(RLP.Iterator), arguments:['itrProposal'] 
TMP_152(address) = LIBRARY_CALL, dest:RLP, function:RLP.toAddress(RLP.RLPItem), arguments:['TMP_151'] 
REF_60(address) (->milestone) := TMP_152(address)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
milestone.reviewer = itrProposal.next().toAddress()

IRs:
REF_63(address) -> milestone.reviewer
TMP_153(RLP.RLPItem) = LIBRARY_CALL, dest:RLP, function:RLP.next(RLP.Iterator), arguments:['itrProposal'] 
TMP_154(address) = LIBRARY_CALL, dest:RLP, function:RLP.toAddress(RLP.RLPItem), arguments:['TMP_153'] 
REF_63(address) (->milestone) := TMP_154(address)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
milestone.reviewTime = itrProposal.next().toUint()

IRs:
REF_66(uint256) -> milestone.reviewTime
TMP_155(RLP.RLPItem) = LIBRARY_CALL, dest:RLP, function:RLP.next(RLP.Iterator), arguments:['itrProposal'] 
TMP_156(uint256) = LIBRARY_CALL, dest:RLP, function:RLP.toUint(RLP.RLPItem), arguments:['TMP_155'] 
REF_66(uint256) (->milestone) := TMP_156(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
milestone.paymentSource = itrProposal.next().toAddress()

IRs:
REF_69(address) -> milestone.paymentSource
TMP_157(RLP.RLPItem) = LIBRARY_CALL, dest:RLP, function:RLP.next(RLP.Iterator), arguments:['itrProposal'] 
TMP_158(address) = LIBRARY_CALL, dest:RLP, function:RLP.toAddress(RLP.RLPItem), arguments:['TMP_157'] 
REF_69(address) (->milestone) := TMP_158(address)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
milestone.payData = itrProposal.next().toData()

IRs:
REF_72(bytes) -> milestone.payData
TMP_159(RLP.RLPItem) = LIBRARY_CALL, dest:RLP, function:RLP.next(RLP.Iterator), arguments:['itrProposal'] 
TMP_160(bytes) = LIBRARY_CALL, dest:RLP, function:RLP.toData(RLP.RLPItem), arguments:['TMP_159'] 
REF_72(bytes) (->milestone) := TMP_160(bytes)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
milestone.status = MilestoneStatus.AcceptedAndInProgress

IRs:
REF_75(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_76(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.AcceptedAndInProgress
REF_75(MilestoneTracker.MilestoneStatus) (->milestone) := REF_76(MilestoneTracker.MilestoneStatus)"];
39->23;
40[label="Node Type: END_LOOP 40
"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
delete proposedMilestones

IRs:
proposedMilestones = delete proposedMilestones "];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
changingMilestones = false

IRs:
changingMilestones(bool) := False(bool)"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
NewMilestoneListAccepted()

IRs:
Emit NewMilestoneListAccepted()"];
44[label="Node Type: EXPRESSION 44

EXPRESSION:
onlyDonor()

IRs:
MODIFIER_CALL, MilestoneTracker.onlyDonor()()"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
campaignNotCanceled()

IRs:
MODIFIER_CALL, MilestoneTracker.campaignNotCanceled()()"];
45->1;
}
// Function: 39858.sol-MilestoneTracker-approveCompletedMilestone(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
_idMilestone >= milestones.length

IRs:
REF_88 -> LENGTH milestones
TMP_174(bool) = _idMilestone >= REF_88
CONDITION TMP_174"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
milestone = milestones[_idMilestone]

IRs:
REF_89(MilestoneTracker.Milestone) -> milestones[_idMilestone]
milestone(MilestoneTracker.Milestone) := REF_89(MilestoneTracker.Milestone)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
(msg.sender != milestone.reviewer) || (milestone.status != MilestoneStatus.Completed)

IRs:
REF_90(address) -> milestone.reviewer
TMP_175(bool) = msg.sender != REF_90
REF_91(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_92(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.Completed
TMP_176(bool) = REF_91 != REF_92
TMP_177(bool) = TMP_175 || TMP_176
CONDITION TMP_177"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
authorizePayment(_idMilestone)

IRs:
INTERNAL_CALL, MilestoneTracker.authorizePayment(uint256)(_idMilestone)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
campaignNotCanceled()

IRs:
MODIFIER_CALL, MilestoneTracker.campaignNotCanceled()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
notChanging()

IRs:
MODIFIER_CALL, MilestoneTracker.notChanging()()"];
10->1;
}
// Function: 39858.sol-MilestoneTracker-arbitrateApproveMilestone(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
_idMilestone >= milestones.length

IRs:
REF_117 -> LENGTH milestones
TMP_207(bool) = _idMilestone >= REF_117
CONDITION TMP_207"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
milestone = milestones[_idMilestone]

IRs:
REF_118(MilestoneTracker.Milestone) -> milestones[_idMilestone]
milestone(MilestoneTracker.Milestone) := REF_118(MilestoneTracker.Milestone)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
(milestone.status != MilestoneStatus.AcceptedAndInProgress) && (milestone.status != MilestoneStatus.Completed)

IRs:
REF_119(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_120(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.AcceptedAndInProgress
TMP_208(bool) = REF_119 != REF_120
REF_121(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_122(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.Completed
TMP_209(bool) = REF_121 != REF_122
TMP_210(bool) = TMP_208 && TMP_209
CONDITION TMP_210"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
authorizePayment(_idMilestone)

IRs:
INTERNAL_CALL, MilestoneTracker.authorizePayment(uint256)(_idMilestone)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyArbitrator()

IRs:
MODIFIER_CALL, MilestoneTracker.onlyArbitrator()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
campaignNotCanceled()

IRs:
MODIFIER_CALL, MilestoneTracker.campaignNotCanceled()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
notChanging()

IRs:
MODIFIER_CALL, MilestoneTracker.notChanging()()"];
11->1;
}
// Function: 39858.sol-MilestoneTracker-arbitrateCancelCampaign()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
campaignCanceled = true

IRs:
campaignCanceled(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
CampaignCanceled()

IRs:
Emit CampaignCanceled()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyArbitrator()

IRs:
MODIFIER_CALL, MilestoneTracker.onlyArbitrator()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
campaignNotCanceled()

IRs:
MODIFIER_CALL, MilestoneTracker.campaignNotCanceled()()"];
4->1;
}
// Function: 39858.sol-MilestoneTracker-authorizePayment(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_idMilestone >= milestones.length

IRs:
REF_123 -> LENGTH milestones
TMP_218(bool) = _idMilestone >= REF_123
CONDITION TMP_218"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
milestone = milestones[_idMilestone]

IRs:
REF_124(MilestoneTracker.Milestone) -> milestones[_idMilestone]
milestone(MilestoneTracker.Milestone) := REF_124(MilestoneTracker.Milestone)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
milestone.status == MilestoneStatus.AuthorizedForPayment

IRs:
REF_125(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_126(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.AuthorizedForPayment
TMP_219(bool) = REF_125 == REF_126
CONDITION TMP_219"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
milestone.status = MilestoneStatus.AuthorizedForPayment

IRs:
REF_127(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_128(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.AuthorizedForPayment
REF_127(MilestoneTracker.MilestoneStatus) (->milestone) := REF_128(MilestoneTracker.MilestoneStatus)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! milestone.paymentSource.call.value(0)(milestone.payData)

IRs:
REF_129(address) -> milestone.paymentSource
REF_132(bytes) -> milestone.payData
TMP_221(bool) = LOW_LEVEL_CALL, dest:REF_129, function:call, arguments:['REF_132'] value:0 
TMP_222 = UnaryType.BANG TMP_221 
CONDITION TMP_222"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: THROW 10
"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
ProposalStatusChanged(_idMilestone,milestone.status)

IRs:
REF_133(MilestoneTracker.MilestoneStatus) -> milestone.status
Emit ProposalStatusChanged(_idMilestone,REF_133)"];
}
// Function: 39858.sol-MilestoneTracker-campaignNotCanceled()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
campaignCanceled

IRs:
CONDITION campaignCanceled"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39858.sol-MilestoneTracker-cancelMilestone(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
_idMilestone >= milestones.length

IRs:
REF_108 -> LENGTH milestones
TMP_199(bool) = _idMilestone >= REF_108
CONDITION TMP_199"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
milestone = milestones[_idMilestone]

IRs:
REF_109(MilestoneTracker.Milestone) -> milestones[_idMilestone]
milestone(MilestoneTracker.Milestone) := REF_109(MilestoneTracker.Milestone)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
(milestone.status != MilestoneStatus.AcceptedAndInProgress) && (milestone.status != MilestoneStatus.Completed)

IRs:
REF_110(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_111(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.AcceptedAndInProgress
TMP_200(bool) = REF_110 != REF_111
REF_112(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_113(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.Completed
TMP_201(bool) = REF_112 != REF_113
TMP_202(bool) = TMP_200 && TMP_201
CONDITION TMP_202"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
milestone.status = MilestoneStatus.Canceled

IRs:
REF_114(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_115(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.Canceled
REF_114(MilestoneTracker.MilestoneStatus) (->milestone) := REF_115(MilestoneTracker.MilestoneStatus)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ProposalStatusChanged(_idMilestone,milestone.status)

IRs:
REF_116(MilestoneTracker.MilestoneStatus) -> milestone.status
Emit ProposalStatusChanged(_idMilestone,REF_116)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyRecipient()

IRs:
MODIFIER_CALL, MilestoneTracker.onlyRecipient()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
campaignNotCanceled()

IRs:
MODIFIER_CALL, MilestoneTracker.campaignNotCanceled()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
notChanging()

IRs:
MODIFIER_CALL, MilestoneTracker.notChanging()()"];
12->1;
}
// Function: 39858.sol-MilestoneTracker-changeArbitrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
arbitrator = _newArbitrator

IRs:
arbitrator(address) := _newArbitrator(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyArbitrator()

IRs:
MODIFIER_CALL, MilestoneTracker.onlyArbitrator()()"];
2->1;
}
// Function: 39858.sol-MilestoneTracker-changeDonor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
donor = _newDonor

IRs:
donor(address) := _newDonor(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDonor()

IRs:
MODIFIER_CALL, MilestoneTracker.onlyDonor()()"];
2->1;
}
// Function: 39858.sol-MilestoneTracker-changeRecipient(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
recipient = _newRecipient

IRs:
recipient(address) := _newRecipient(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyRecipient()

IRs:
MODIFIER_CALL, MilestoneTracker.onlyRecipient()()"];
2->1;
}
// Function: 39858.sol-MilestoneTracker-markMilestoneComplete(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: IF 1

EXPRESSION:
_idMilestone >= milestones.length

IRs:
REF_77 -> LENGTH milestones
TMP_164(bool) = _idMilestone >= REF_77
CONDITION TMP_164"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
milestone = milestones[_idMilestone]

IRs:
REF_78(MilestoneTracker.Milestone) -> milestones[_idMilestone]
milestone(MilestoneTracker.Milestone) := REF_78(MilestoneTracker.Milestone)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
(msg.sender != milestone.milestoneLeadLink) && (msg.sender != recipient)

IRs:
REF_79(address) -> milestone.milestoneLeadLink
TMP_165(bool) = msg.sender != REF_79
TMP_166(bool) = msg.sender != recipient
TMP_167(bool) = TMP_165 && TMP_166
CONDITION TMP_167"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
milestone.status != MilestoneStatus.AcceptedAndInProgress

IRs:
REF_80(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_81(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.AcceptedAndInProgress
TMP_168(bool) = REF_80 != REF_81
CONDITION TMP_168"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: THROW 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
now < milestone.minCompletionDate

IRs:
REF_82(uint256) -> milestone.minCompletionDate
TMP_169(bool) = now < REF_82
CONDITION TMP_169"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: THROW 12
"];
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
now > milestone.maxCompletionDate

IRs:
REF_83(uint256) -> milestone.maxCompletionDate
TMP_170(bool) = now > REF_83
CONDITION TMP_170"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
milestone.status = MilestoneStatus.Completed

IRs:
REF_84(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_85(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.Completed
REF_84(MilestoneTracker.MilestoneStatus) (->milestone) := REF_85(MilestoneTracker.MilestoneStatus)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
milestone.doneTime = now

IRs:
REF_86(uint256) -> milestone.doneTime
REF_86(uint256) (->milestone) := now(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
ProposalStatusChanged(_idMilestone,milestone.status)

IRs:
REF_87(MilestoneTracker.MilestoneStatus) -> milestone.status
Emit ProposalStatusChanged(_idMilestone,REF_87)"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
campaignNotCanceled()

IRs:
MODIFIER_CALL, MilestoneTracker.campaignNotCanceled()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
notChanging()

IRs:
MODIFIER_CALL, MilestoneTracker.notChanging()()"];
21->1;
}
// Function: 39858.sol-MilestoneTracker-notChanging()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
changingMilestones

IRs:
CONDITION changingMilestones"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39858.sol-MilestoneTracker-numberOfMilestones()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
milestones.length

IRs:
REF_31 -> LENGTH milestones
RETURN REF_31"];
}
// Function: 39858.sol-MilestoneTracker-onlyArbitrator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != arbitrator

IRs:
TMP_225(bool) = msg.sender != arbitrator
CONDITION TMP_225"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39858.sol-MilestoneTracker-onlyDonor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != donor

IRs:
TMP_226(bool) = msg.sender != donor
CONDITION TMP_226"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39858.sol-MilestoneTracker-onlyRecipient()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != recipient

IRs:
TMP_224(bool) = msg.sender != recipient
CONDITION TMP_224"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39858.sol-MilestoneTracker-proposeMilestones(bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proposedMilestones = _newMilestones

IRs:
proposedMilestones(bytes) := _newMilestones(bytes)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
changingMilestones = true

IRs:
changingMilestones(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
NewMilestoneListProposed()

IRs:
Emit NewMilestoneListProposed()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyRecipient()

IRs:
MODIFIER_CALL, MilestoneTracker.onlyRecipient()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
campaignNotCanceled()

IRs:
MODIFIER_CALL, MilestoneTracker.campaignNotCanceled()()"];
5->1;
}
// Function: 39858.sol-MilestoneTracker-rejectMilestone(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
_idMilestone >= milestones.length

IRs:
REF_93 -> LENGTH milestones
TMP_181(bool) = _idMilestone >= REF_93
CONDITION TMP_181"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
milestone = milestones[_idMilestone]

IRs:
REF_94(MilestoneTracker.Milestone) -> milestones[_idMilestone]
milestone(MilestoneTracker.Milestone) := REF_94(MilestoneTracker.Milestone)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
(msg.sender != milestone.reviewer) || (milestone.status != MilestoneStatus.Completed)

IRs:
REF_95(address) -> milestone.reviewer
TMP_182(bool) = msg.sender != REF_95
REF_96(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_97(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.Completed
TMP_183(bool) = REF_96 != REF_97
TMP_184(bool) = TMP_182 || TMP_183
CONDITION TMP_184"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
milestone.status = MilestoneStatus.AcceptedAndInProgress

IRs:
REF_98(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_99(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.AcceptedAndInProgress
REF_98(MilestoneTracker.MilestoneStatus) (->milestone) := REF_99(MilestoneTracker.MilestoneStatus)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ProposalStatusChanged(_idMilestone,milestone.status)

IRs:
REF_100(MilestoneTracker.MilestoneStatus) -> milestone.status
Emit ProposalStatusChanged(_idMilestone,REF_100)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
campaignNotCanceled()

IRs:
MODIFIER_CALL, MilestoneTracker.campaignNotCanceled()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
notChanging()

IRs:
MODIFIER_CALL, MilestoneTracker.notChanging()()"];
11->1;
}
// Function: 39858.sol-MilestoneTracker-requestMilestonePayment(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: IF 1

EXPRESSION:
_idMilestone >= milestones.length

IRs:
REF_101 -> LENGTH milestones
TMP_188(bool) = _idMilestone >= REF_101
CONDITION TMP_188"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
milestone = milestones[_idMilestone]

IRs:
REF_102(MilestoneTracker.Milestone) -> milestones[_idMilestone]
milestone(MilestoneTracker.Milestone) := REF_102(MilestoneTracker.Milestone)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
(msg.sender != milestone.milestoneLeadLink) && (msg.sender != recipient)

IRs:
REF_103(address) -> milestone.milestoneLeadLink
TMP_189(bool) = msg.sender != REF_103
TMP_190(bool) = msg.sender != recipient
TMP_191(bool) = TMP_189 && TMP_190
CONDITION TMP_191"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
(milestone.status != MilestoneStatus.Completed) || (now < milestone.doneTime + milestone.reviewTime)

IRs:
REF_104(MilestoneTracker.MilestoneStatus) -> milestone.status
REF_105(MilestoneTracker.MilestoneStatus) -> MilestoneStatus.Completed
TMP_192(bool) = REF_104 != REF_105
REF_106(uint256) -> milestone.doneTime
REF_107(uint256) -> milestone.reviewTime
TMP_193(uint256) = REF_106 + REF_107
TMP_194(bool) = now < TMP_193
TMP_195(bool) = TMP_192 || TMP_194
CONDITION TMP_195"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: THROW 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
authorizePayment(_idMilestone)

IRs:
INTERNAL_CALL, MilestoneTracker.authorizePayment(uint256)(_idMilestone)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
campaignNotCanceled()

IRs:
MODIFIER_CALL, MilestoneTracker.campaignNotCanceled()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
notChanging()

IRs:
MODIFIER_CALL, MilestoneTracker.notChanging()()"];
13->1;
}
// Function: 39858.sol-MilestoneTracker-unproposeMilestones()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete proposedMilestones

IRs:
proposedMilestones = delete proposedMilestones "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
changingMilestones = false

IRs:
changingMilestones(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
NewMilestoneListUnproposed()

IRs:
Emit NewMilestoneListUnproposed()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyRecipient()

IRs:
MODIFIER_CALL, MilestoneTracker.onlyRecipient()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
campaignNotCanceled()

IRs:
MODIFIER_CALL, MilestoneTracker.campaignNotCanceled()()"];
5->1;
}
// Function: 39858.sol-RLP-_copyToBytes(uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
}
// Function: 39858.sol-RLP-_decode(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isData(self)

IRs:
TMP_104(bool) = INTERNAL_CALL, RLP.isData(RLP.RLPItem)(self)
TMP_105 = UnaryType.BANG TMP_104 
CONDITION TMP_105"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
start = self._unsafe_memPtr

IRs:
REF_27(uint256) -> self._unsafe_memPtr
start(uint256) := REF_27(uint256)"];
5->6;
6[label="Node Type: INLINE ASM 6
"];
6->7;
7[label="Node Type: END INLINE ASM 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
b0 < DATA_SHORT_START

IRs:
TMP_106(bool) = b0 < DATA_SHORT_START
CONDITION TMP_106"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
memPtr = start

IRs:
memPtr(uint256) := start(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
len = 1

IRs:
len(uint256) := 1(uint256)"];
10->11;
11[label="Node Type: RETURN 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
b0 < DATA_LONG_START

IRs:
TMP_107(bool) = b0 < DATA_LONG_START
CONDITION TMP_107"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
len = self._unsafe_length - 1

IRs:
REF_28(uint256) -> self._unsafe_length
TMP_108(uint256) = REF_28 - 1
len(uint256) := TMP_108(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
memPtr = start + 1

IRs:
TMP_109(uint256) = start + 1
memPtr(uint256) := TMP_109(uint256)"];
15->21;
16[label="Node Type: NEW VARIABLE 16
"];
16->17;
17[label="Node Type: INLINE ASM 17
"];
17->18;
18[label="Node Type: END INLINE ASM 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
len = self._unsafe_length - 1 - bLen

IRs:
REF_29(uint256) -> self._unsafe_length
TMP_110(uint256) = REF_29 - 1
TMP_111(uint256) = TMP_110 - bLen
len(uint256) := TMP_111(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
memPtr = start + bLen + 1

IRs:
TMP_112(uint256) = start + bLen
TMP_113(uint256) = TMP_112 + 1
memPtr(uint256) := TMP_113(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: RETURN 22
"];
23[label="Node Type: RETURN 23

EXPRESSION:
(memPtr,len)

IRs:
RETURN memPtr,len"];
}
// Function: 39858.sol-RLP-_itemLength(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b0 < DATA_SHORT_START

IRs:
TMP_96(bool) = b0 < DATA_SHORT_START
CONDITION TMP_96"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
len = 1

IRs:
len(uint256) := 1(uint256)"];
5->18;
6[label="Node Type: IF 6

EXPRESSION:
b0 < DATA_LONG_START

IRs:
TMP_97(bool) = b0 < DATA_LONG_START
CONDITION TMP_97"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
len = b0 - DATA_SHORT_START + 1

IRs:
TMP_98(uint256) = b0 - DATA_SHORT_START
TMP_99(uint256) = TMP_98 + 1
len(uint256) := TMP_99(uint256)"];
7->17;
8[label="Node Type: IF 8

EXPRESSION:
b0 < LIST_SHORT_START

IRs:
TMP_100(bool) = b0 < LIST_SHORT_START
CONDITION TMP_100"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->16;
11[label="Node Type: IF 11

EXPRESSION:
b0 < LIST_LONG_START

IRs:
TMP_101(bool) = b0 < LIST_LONG_START
CONDITION TMP_101"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
len = b0 - LIST_SHORT_START + 1

IRs:
TMP_102(uint256) = b0 - LIST_SHORT_START
TMP_103(uint256) = TMP_102 + 1
len(uint256) := TMP_103(uint256)"];
12->15;
13[label="Node Type: INLINE ASM 13
"];
13->14;
14[label="Node Type: END INLINE ASM 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
len

IRs:
RETURN len"];
}
// Function: 39858.sol-RLP-_payloadOffset(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
self._unsafe_length == 0

IRs:
REF_25(uint256) -> self._unsafe_length
TMP_84(bool) = REF_25 == 0
CONDITION TMP_84"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
memPtr = self._unsafe_memPtr

IRs:
REF_26(uint256) -> self._unsafe_memPtr
memPtr(uint256) := REF_26(uint256)"];
5->6;
6[label="Node Type: INLINE ASM 6
"];
6->7;
7[label="Node Type: END INLINE ASM 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
b0 < DATA_SHORT_START

IRs:
TMP_85(bool) = b0 < DATA_SHORT_START
CONDITION TMP_85"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9

EXPRESSION:
0

IRs:
RETURN 0"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
b0 < DATA_LONG_START || (b0 >= LIST_SHORT_START && b0 < LIST_LONG_START)

IRs:
TMP_86(bool) = b0 < DATA_LONG_START
TMP_87(bool) = b0 >= LIST_SHORT_START
TMP_88(bool) = b0 < LIST_LONG_START
TMP_89(bool) = TMP_87 && TMP_88
TMP_90(bool) = TMP_86 || TMP_89
CONDITION TMP_90"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
1

IRs:
RETURN 1"];
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
b0 < LIST_SHORT_START

IRs:
TMP_91(bool) = b0 < LIST_SHORT_START
CONDITION TMP_91"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
b0 - DATA_LONG_OFFSET + 1

IRs:
TMP_92(uint256) = b0 - DATA_LONG_OFFSET
TMP_93(uint256) = TMP_92 + 1
RETURN TMP_93"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
b0 - LIST_LONG_OFFSET + 1

IRs:
TMP_94(uint256) = b0 - LIST_LONG_OFFSET
TMP_95(uint256) = TMP_94 + 1
RETURN TMP_95"];
}
// Function: 39858.sol-RLP-_validate(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
memPtr = self._unsafe_memPtr

IRs:
REF_30(uint256) -> self._unsafe_memPtr
memPtr(uint256) := REF_30(uint256)"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
b0 == DATA_SHORT_START + 1 && b1 < DATA_SHORT_START

IRs:
TMP_114(uint256) = DATA_SHORT_START + 1
TMP_115(bool) = b0 == TMP_114
TMP_116(bool) = b1 < DATA_SHORT_START
TMP_117(bool) = TMP_115 && TMP_116
CONDITION TMP_117"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 39858.sol-RLP-hasNext(RLP.Iterator)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
item = self._unsafe_item

IRs:
REF_4(RLP.RLPItem) -> self._unsafe_item
item(RLP.RLPItem) := REF_4(RLP.RLPItem)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
self._unsafe_nextPtr < item._unsafe_memPtr + item._unsafe_length

IRs:
REF_5(uint256) -> self._unsafe_nextPtr
REF_6(uint256) -> item._unsafe_memPtr
REF_7(uint256) -> item._unsafe_length
TMP_7(uint256) = REF_6 + REF_7
TMP_8(bool) = REF_5 < TMP_7
RETURN TMP_8"];
}
// Function: 39858.sol-RLP-isData(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
self._unsafe_length == 0

IRs:
REF_14(uint256) -> self._unsafe_length
TMP_21(bool) = REF_14 == 0
CONDITION TMP_21"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
memPtr = self._unsafe_memPtr

IRs:
REF_15(uint256) -> self._unsafe_memPtr
memPtr(uint256) := REF_15(uint256)"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 39858.sol-RLP-isEmpty(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isNull(self)

IRs:
TMP_22(bool) = INTERNAL_CALL, RLP.isNull(RLP.RLPItem)(self)
CONDITION TMP_22"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
memPtr = self._unsafe_memPtr

IRs:
REF_16(uint256) -> self._unsafe_memPtr
memPtr(uint256) := REF_16(uint256)"];
5->6;
6[label="Node Type: INLINE ASM 6
"];
6->7;
7[label="Node Type: END INLINE ASM 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(b0 == DATA_SHORT_START || b0 == LIST_SHORT_START)

IRs:
TMP_23(bool) = b0 == DATA_SHORT_START
TMP_24(bool) = b0 == LIST_SHORT_START
TMP_25(bool) = TMP_23 || TMP_24
RETURN TMP_25"];
9[label="Node Type: RETURN 9

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 39858.sol-RLP-isList(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
self._unsafe_length == 0

IRs:
REF_12(uint256) -> self._unsafe_length
TMP_20(bool) = REF_12 == 0
CONDITION TMP_20"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
memPtr = self._unsafe_memPtr

IRs:
REF_13(uint256) -> self._unsafe_memPtr
memPtr(uint256) := REF_13(uint256)"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 39858.sol-RLP-isNull(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
self._unsafe_length == 0

IRs:
REF_11(uint256) -> self._unsafe_length
TMP_19(bool) = REF_11 == 0
RETURN TMP_19"];
2[label="Node Type: RETURN 2

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 39858.sol-RLP-items(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isList(self)

IRs:
TMP_26(bool) = INTERNAL_CALL, RLP.isList(RLP.RLPItem)(self)
TMP_27 = UnaryType.BANG TMP_26 
CONDITION TMP_27"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
memPtr = self._unsafe_memPtr

IRs:
REF_17(uint256) -> self._unsafe_memPtr
memPtr(uint256) := REF_17(uint256)"];
5->6;
6[label="Node Type: INLINE ASM 6
"];
6->7;
7[label="Node Type: END INLINE ASM 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
pos = memPtr + _payloadOffset(self)

IRs:
TMP_28(uint256) = INTERNAL_CALL, RLP._payloadOffset(RLP.RLPItem)(self)
TMP_29(uint256) = memPtr + TMP_28
pos(uint256) := TMP_29(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
last = memPtr + self._unsafe_length - 1

IRs:
REF_18(uint256) -> self._unsafe_length
TMP_30(uint256) = memPtr + REF_18
TMP_31(uint256) = TMP_30 - 1
last(uint256) := TMP_31(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: BEGIN_LOOP 11
"];
11->12;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
pos <= last

IRs:
TMP_32(bool) = pos <= last
CONDITION TMP_32"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
pos += _itemLength(pos)

IRs:
TMP_33(uint256) = INTERNAL_CALL, RLP._itemLength(uint256)(pos)
pos(uint256) = pos + TMP_33"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
itms ++

IRs:
TMP_34(uint256) := itms(uint256)
itms(uint256) = itms + 1"];
14->12;
15[label="Node Type: END_LOOP 15
"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
itms

IRs:
RETURN itms"];
}
// Function: 39858.sol-RLP-iterator(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isList(self)

IRs:
TMP_35(bool) = INTERNAL_CALL, RLP.isList(RLP.RLPItem)(self)
TMP_36 = UnaryType.BANG TMP_35 
CONDITION TMP_36"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
ptr = self._unsafe_memPtr + _payloadOffset(self)

IRs:
REF_19(uint256) -> self._unsafe_memPtr
TMP_37(uint256) = INTERNAL_CALL, RLP._payloadOffset(RLP.RLPItem)(self)
TMP_38(uint256) = REF_19 + TMP_37
ptr(uint256) := TMP_38(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
it._unsafe_item = self

IRs:
REF_20(RLP.RLPItem) -> it._unsafe_item
REF_20(RLP.RLPItem) (->it) := self(RLP.RLPItem)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
it._unsafe_nextPtr = ptr

IRs:
REF_21(uint256) -> it._unsafe_nextPtr
REF_21(uint256) (->it) := ptr(uint256)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
it

IRs:
RETURN it"];
}
// Function: 39858.sol-RLP-next(RLP.Iterator)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
hasNext(self)

IRs:
TMP_0(bool) = INTERNAL_CALL, RLP.hasNext(RLP.Iterator)(self)
CONDITION TMP_0"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
ptr = self._unsafe_nextPtr

IRs:
REF_0(uint256) -> self._unsafe_nextPtr
ptr(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
itemLength = _itemLength(ptr)

IRs:
TMP_1(uint256) = INTERNAL_CALL, RLP._itemLength(uint256)(ptr)
itemLength(uint256) := TMP_1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
subItem._unsafe_memPtr = ptr

IRs:
REF_1(uint256) -> subItem._unsafe_memPtr
REF_1(uint256) (->subItem) := ptr(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
subItem._unsafe_length = itemLength

IRs:
REF_2(uint256) -> subItem._unsafe_length
REF_2(uint256) (->subItem) := itemLength(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
self._unsafe_nextPtr = ptr + itemLength

IRs:
REF_3(uint256) -> self._unsafe_nextPtr
TMP_2(uint256) = ptr + itemLength
REF_3(uint256) (->self) := TMP_2(uint256)"];
6->8;
7[label="Node Type: THROW 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
subItem

IRs:
RETURN subItem"];
}
// Function: 39858.sol-RLP-next(RLP.Iterator,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
subItem = next(self)

IRs:
TMP_3(RLP.RLPItem) = INTERNAL_CALL, RLP.next(RLP.Iterator)(self)
subItem(RLP.RLPItem) := TMP_3(RLP.RLPItem)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
strict && ! _validate(subItem)

IRs:
TMP_4(bool) = INTERNAL_CALL, RLP._validate(RLP.RLPItem)(subItem)
TMP_5 = UnaryType.BANG TMP_4 
TMP_6(bool) = strict && TMP_5
CONDITION TMP_6"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5
"];
6[label="Node Type: RETURN 6

EXPRESSION:
subItem

IRs:
RETURN subItem"];
}
// Function: 39858.sol-RLP-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
DATA_SHORT_START = 0x80

IRs:
DATA_SHORT_START(uint256) := 128(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
DATA_LONG_START = 0xB8

IRs:
DATA_LONG_START(uint256) := 184(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
LIST_SHORT_START = 0xC0

IRs:
LIST_SHORT_START(uint256) := 192(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
LIST_LONG_START = 0xF8

IRs:
LIST_LONG_START(uint256) := 248(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
DATA_LONG_OFFSET = 0xB7

IRs:
DATA_LONG_OFFSET(uint256) := 183(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
LIST_LONG_OFFSET = 0xF7

IRs:
LIST_LONG_OFFSET(uint256) := 247(uint256)"];
}
// Function: 39858.sol-RLP-toAddress(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isData(self)

IRs:
TMP_81(bool) = INTERNAL_CALL, RLP.isData(RLP.RLPItem)(self)
TMP_82 = UnaryType.BANG TMP_81 
CONDITION TMP_82"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(rStartPos,len) = _decode(self)

IRs:
TUPLE_5(uint256,uint256) = INTERNAL_CALL, RLP._decode(RLP.RLPItem)(self)
rStartPos(uint256)= UNPACK TUPLE_5 index: 0 
len(uint256)= UNPACK TUPLE_5 index: 1 "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
len != 20

IRs:
TMP_83(bool) = len != 20
CONDITION TMP_83"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: INLINE ASM 10
"];
10->11;
11[label="Node Type: END INLINE ASM 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
data

IRs:
RETURN data"];
}
// Function: 39858.sol-RLP-toAscii(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isData(self)

IRs:
TMP_57(bool) = INTERNAL_CALL, RLP.isData(RLP.RLPItem)(self)
TMP_58 = UnaryType.BANG TMP_57 
CONDITION TMP_58"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(rStartPos,len) = _decode(self)

IRs:
TUPLE_1(uint256,uint256) = INTERNAL_CALL, RLP._decode(RLP.RLPItem)(self)
rStartPos(uint256)= UNPACK TUPLE_1 index: 0 
len(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
bts = new bytes(len)

IRs:
TMP_60 = new bytes(len)
bts(bytes) := TMP_60(bytes)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_copyToBytes(rStartPos,bts,len)

IRs:
INTERNAL_CALL, RLP._copyToBytes(uint256,bytes,uint256)(rStartPos,bts,len)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
str = string(bts)

IRs:
TMP_62 = CONVERT bts to string
str(string) := TMP_62(string)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
str

IRs:
RETURN str"];
}
// Function: 39858.sol-RLP-toBool(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isData(self)

IRs:
TMP_68(bool) = INTERNAL_CALL, RLP.isData(RLP.RLPItem)(self)
TMP_69 = UnaryType.BANG TMP_68 
CONDITION TMP_69"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(rStartPos,len) = _decode(self)

IRs:
TUPLE_3(uint256,uint256) = INTERNAL_CALL, RLP._decode(RLP.RLPItem)(self)
rStartPos(uint256)= UNPACK TUPLE_3 index: 0 
len(uint256)= UNPACK TUPLE_3 index: 1 "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
len != 1

IRs:
TMP_70(bool) = len != 1
CONDITION TMP_70"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
temp > 1

IRs:
TMP_71(bool) = temp > 1
CONDITION TMP_71"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: THROW 14
"];
15[label="Node Type: END_IF 15
"];
15->17;
17[label="Node Type: IF 17

EXPRESSION:
temp == 1

IRs:
TMP_72(bool) = temp == 1
CONDITION TMP_72"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: RETURN 18

EXPRESSION:
true

IRs:
RETURN True"];
19[label="Node Type: RETURN 19

EXPRESSION:
false

IRs:
RETURN False"];
21[label="Node Type: RETURN 21

EXPRESSION:
data

IRs:
RETURN data"];
}
// Function: 39858.sol-RLP-toByte(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isData(self)

IRs:
TMP_73(bool) = INTERNAL_CALL, RLP.isData(RLP.RLPItem)(self)
TMP_74 = UnaryType.BANG TMP_73 
CONDITION TMP_74"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(rStartPos,len) = _decode(self)

IRs:
TUPLE_4(uint256,uint256) = INTERNAL_CALL, RLP._decode(RLP.RLPItem)(self)
rStartPos(uint256)= UNPACK TUPLE_4 index: 0 
len(uint256)= UNPACK TUPLE_4 index: 1 "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
len != 1

IRs:
TMP_75(bool) = len != 1
CONDITION TMP_75"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
bytes1(temp)

IRs:
TMP_76 = CONVERT temp to bytes1
RETURN TMP_76"];
14[label="Node Type: RETURN 14

EXPRESSION:
data

IRs:
RETURN data"];
}
// Function: 39858.sol-RLP-toBytes(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
len = self._unsafe_length

IRs:
REF_22(uint256) -> self._unsafe_length
len(uint256) := REF_22(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
len == 0

IRs:
TMP_39(bool) = len == 0
CONDITION TMP_39"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
bts = new bytes(len)

IRs:
TMP_41 = new bytes(len)
bts(bytes) := TMP_41(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_copyToBytes(self._unsafe_memPtr,bts,len)

IRs:
REF_23(uint256) -> self._unsafe_memPtr
INTERNAL_CALL, RLP._copyToBytes(uint256,bytes,uint256)(REF_23,bts,len)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
bts

IRs:
RETURN bts"];
}
// Function: 39858.sol-RLP-toBytes32(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
bytes32(toUint(self))

IRs:
TMP_79(uint256) = INTERNAL_CALL, RLP.toUint(RLP.RLPItem)(self)
TMP_80 = CONVERT TMP_79 to bytes32
RETURN TMP_80"];
2[label="Node Type: RETURN 2

EXPRESSION:
data

IRs:
RETURN data"];
}
// Function: 39858.sol-RLP-toData(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isData(self)

IRs:
TMP_43(bool) = INTERNAL_CALL, RLP.isData(RLP.RLPItem)(self)
TMP_44 = UnaryType.BANG TMP_43 
CONDITION TMP_44"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(rStartPos,len) = _decode(self)

IRs:
TUPLE_0(uint256,uint256) = INTERNAL_CALL, RLP._decode(RLP.RLPItem)(self)
rStartPos(uint256)= UNPACK TUPLE_0 index: 0 
len(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
bts = new bytes(len)

IRs:
TMP_46 = new bytes(len)
bts(bytes) := TMP_46(bytes)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_copyToBytes(rStartPos,bts,len)

IRs:
INTERNAL_CALL, RLP._copyToBytes(uint256,bytes,uint256)(rStartPos,bts,len)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
bts

IRs:
RETURN bts"];
}
// Function: 39858.sol-RLP-toInt(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
int256(toUint(self))

IRs:
TMP_77(uint256) = INTERNAL_CALL, RLP.toUint(RLP.RLPItem)(self)
TMP_78 = CONVERT TMP_77 to int256
RETURN TMP_78"];
2[label="Node Type: RETURN 2

EXPRESSION:
data

IRs:
RETURN data"];
}
// Function: 39858.sol-RLP-toList(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isList(self)

IRs:
TMP_48(bool) = INTERNAL_CALL, RLP.isList(RLP.RLPItem)(self)
TMP_49 = UnaryType.BANG TMP_48 
CONDITION TMP_49"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
numItems = items(self)

IRs:
TMP_50(uint256) = INTERNAL_CALL, RLP.items(RLP.RLPItem)(self)
numItems(uint256) := TMP_50(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
list = new RLP.RLPItem[](numItems)

IRs:
TMP_52(RLP.RLPItem[])  = new RLP.RLPItem[](numItems)
list(RLP.RLPItem[]) = ['TMP_52(RLP.RLPItem[])']"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
it = iterator(self)

IRs:
TMP_53(RLP.Iterator) = INTERNAL_CALL, RLP.iterator(RLP.RLPItem)(self)
it(RLP.Iterator) := TMP_53(RLP.Iterator)"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: BEGIN_LOOP 8
"];
8->9;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
hasNext(it)

IRs:
TMP_54(bool) = INTERNAL_CALL, RLP.hasNext(RLP.Iterator)(it)
CONDITION TMP_54"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
list[idx] = next(it)

IRs:
REF_24(RLP.RLPItem) -> list[idx]
TMP_55(RLP.RLPItem) = INTERNAL_CALL, RLP.next(RLP.Iterator)(it)
REF_24(RLP.RLPItem) (->list) := TMP_55(RLP.RLPItem)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
idx ++

IRs:
TMP_56(uint256) := idx(uint256)
idx(uint256) = idx + 1"];
11->9;
12[label="Node Type: END_LOOP 12
"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
list

IRs:
RETURN list"];
}
// Function: 39858.sol-RLP-toRLPItem(bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
len = self.length

IRs:
REF_8 -> LENGTH self
len(uint256) := REF_8(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
len == 0

IRs:
TMP_9(bool) = len == 0
CONDITION TMP_9"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
RLPItem(0,0)

IRs:
TMP_10(RLP.RLPItem) = new RLPItem(0,0)
RETURN TMP_10"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: INLINE ASM 6
"];
6->7;
7[label="Node Type: END INLINE ASM 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
RLPItem(memPtr,len)

IRs:
TMP_11(RLP.RLPItem) = new RLPItem(memPtr,len)
RETURN TMP_11"];
}
// Function: 39858.sol-RLP-toRLPItem(bytes,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
item = toRLPItem(self)

IRs:
TMP_12(RLP.RLPItem) = INTERNAL_CALL, RLP.toRLPItem(bytes)(self)
item(RLP.RLPItem) := TMP_12(RLP.RLPItem)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
strict

IRs:
CONDITION strict"];
2->3[label="True"];
2->13[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
len = self.length

IRs:
REF_9 -> LENGTH self
len(uint256) := REF_9(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_payloadOffset(item) > len

IRs:
TMP_13(uint256) = INTERNAL_CALL, RLP._payloadOffset(RLP.RLPItem)(item)
TMP_14(bool) = TMP_13 > len
CONDITION TMP_14"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_itemLength(item._unsafe_memPtr) != len

IRs:
REF_10(uint256) -> item._unsafe_memPtr
TMP_15(uint256) = INTERNAL_CALL, RLP._itemLength(uint256)(REF_10)
TMP_16(bool) = TMP_15 != len
CONDITION TMP_16"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
! _validate(item)

IRs:
TMP_17(bool) = INTERNAL_CALL, RLP._validate(RLP.RLPItem)(item)
TMP_18 = UnaryType.BANG TMP_17 
CONDITION TMP_18"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: THROW 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
item

IRs:
RETURN item"];
}
// Function: 39858.sol-RLP-toUint(RLP.RLPItem)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isData(self)

IRs:
TMP_63(bool) = INTERNAL_CALL, RLP.isData(RLP.RLPItem)(self)
TMP_64 = UnaryType.BANG TMP_63 
CONDITION TMP_64"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(rStartPos,len) = _decode(self)

IRs:
TUPLE_2(uint256,uint256) = INTERNAL_CALL, RLP._decode(RLP.RLPItem)(self)
rStartPos(uint256)= UNPACK TUPLE_2 index: 0 
len(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
len > 32 || len == 0

IRs:
TMP_65(bool) = len > 32
TMP_66(bool) = len == 0
TMP_67(bool) = TMP_65 || TMP_66
CONDITION TMP_67"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: INLINE ASM 10
"];
10->11;
11[label="Node Type: END INLINE ASM 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
data

IRs:
RETURN data"];
}
}
