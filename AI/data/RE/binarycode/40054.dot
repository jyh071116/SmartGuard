digraph G {
// Function: 40054.sol-ArithLib-hash_pubkey_to_pubkey(uint256,uint256)
digraph{
}
// Function: 40054.sol-ArithLib-isbit(uint256,uint256)
digraph{
}
// Function: 40054.sol-ArithLib-jadd(uint256,uint256,uint256,uint256,uint256,uint256)
digraph{
}
// Function: 40054.sol-ArithLib-jdecompose(uint256,uint256,uint256)
digraph{
}
// Function: 40054.sol-ArithLib-jdouble(uint256,uint256,uint256)
digraph{
}
// Function: 40054.sol-ArithLib-jexp(uint256,uint256,uint256)
digraph{
}
// Function: 40054.sol-ArithLib-jmul(uint256,uint256,uint256,uint256)
digraph{
}
// Function: 40054.sol-ArithLib-jrecover_y(uint256,uint256)
digraph{
}
// Function: 40054.sol-ArithLib-jsub(uint256,uint256,uint256,uint256,uint256,uint256)
digraph{
}
// Function: 40054.sol-Laundromat-Laundromat(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
arithContract = ArithLib(arithAddress)

IRs:
TMP_0 = CONVERT arithAddress to ArithLib
arithContract(ArithLib) := TMP_0(ArithLib)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
participants = _participants

IRs:
participants(uint256) := _participants(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
payment = _payment

IRs:
payment(uint256) := _payment(uint256)"];
}
// Function: 40054.sol-Laundromat-deposit(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
gotParticipants >= participants

IRs:
TMP_5(bool) = gotParticipants >= participants
CONDITION TMP_5"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pubkeys1.push(_pubkey1)

IRs:
REF_4 -> LENGTH pubkeys1
TMP_7(uint256) := REF_4(uint256)
TMP_8(uint256) = TMP_7 + 1
REF_4(uint256) (->pubkeys1) := TMP_8(uint256)
REF_5(uint256) -> pubkeys1[TMP_7]
REF_5(uint256) (->pubkeys1) := _pubkey1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pubkeys2.push(_pubkey2)

IRs:
REF_7 -> LENGTH pubkeys2
TMP_10(uint256) := REF_7(uint256)
TMP_11(uint256) = TMP_10 + 1
REF_7(uint256) (->pubkeys2) := TMP_11(uint256)
REF_8(uint256) -> pubkeys2[TMP_10]
REF_8(uint256) (->pubkeys2) := _pubkey2(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
gotParticipants ++

IRs:
TMP_12(uint256) := gotParticipants(uint256)
gotParticipants(uint256) = gotParticipants + 1"];
}
// Function: 40054.sol-Laundromat-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: THROW 1
"];
}
// Function: 40054.sol-Laundromat-safeSend(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
atomicLock

IRs:
CONDITION atomicLock"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
atomicLock = true

IRs:
atomicLock(bool) := True(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! (addr.call.gas(safeGas).value(value)())

IRs:
TMP_3(bool) = LOW_LEVEL_CALL, dest:addr, function:call, arguments:[] value:value gas:safeGas
TMP_4 = UnaryType.BANG TMP_3 
CONDITION TMP_4"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
atomicLock = false

IRs:
atomicLock(bool) := False(bool)"];
6->7;
7[label="Node Type: THROW 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
atomicLock = false

IRs:
atomicLock(bool) := False(bool)"];
}
// Function: 40054.sol-Laundromat-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
safeGas = 25000

IRs:
safeGas(uint256) := 25000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
P = 115792089237316195423570985008687907853269984665640564039457584007908834671663

IRs:
P(uint256) := 115792089237316195423570985008687907853269984665640564039457584007908834671663(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
Gx = 55066263022277343669578718895168534326250603453777594175500187360389116729240

IRs:
Gx(uint256) := 55066263022277343669578718895168534326250603453777594175500187360389116729240(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
Gy = 32670510020758816978083085130507043184471273380659243275938904335757337482424

IRs:
Gy(uint256) := 32670510020758816978083085130507043184471273380659243275938904335757337482424(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
arithAddress = 0x600ad7b57f3e6aeee53acb8704a5ed50b60cacd6

IRs:
arithAddress(address) := 548304912352793688433265367181926355155643313366(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
participants = 0

IRs:
participants(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
payment = 0

IRs:
payment(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
gotParticipants = 0

IRs:
gotParticipants(uint256) := 0(uint256)"];
}
// Function: 40054.sol-Laundromat-withdrawFinal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withdraw = withdraws[uint256(msg.sender)]

IRs:
TMP_54 = CONVERT msg.sender to uint256
REF_78(Laundromat.WithdrawInfo) -> withdraws[TMP_54]
withdraw(Laundromat.WithdrawInfo) := REF_78(Laundromat.WithdrawInfo)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
withdraw.step != (participants + 1)

IRs:
REF_79(uint256) -> withdraw.step
TMP_55(uint256) = participants + 1
TMP_56(bool) = REF_79 != TMP_55
CONDITION TMP_56"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
consumed[uint256(sha3()((withdraw.Ix,withdraw.Iy)))]

IRs:
REF_80(uint256) -> withdraw.Ix
REF_81(uint256) -> withdraw.Iy
TMP_57(bytes32) = SOLIDITY_CALL sha3()([<slither.slithir.variables.reference.ReferenceVariable object at 0x7f9981258130>, <slither.slithir.variables.reference.ReferenceVariable object at 0x7f9981258220>])
TMP_58 = CONVERT TMP_57 to uint256
REF_82(bool) -> consumed[TMP_58]
CONDITION REF_82"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
withdraw.ring1[participants] != withdraw.ring1[0]

IRs:
REF_83(uint256[]) -> withdraw.ring1
REF_84(uint256) -> REF_83[participants]
REF_85(uint256[]) -> withdraw.ring1
REF_86(uint256) -> REF_85[0]
TMP_59(bool) = REF_84 != REF_86
CONDITION TMP_59"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
LogDebug(Wrong signature)

IRs:
Emit LogDebug(Wrong signature)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
withdraw.ring2[participants] != withdraw.ring2[0]

IRs:
REF_87(uint256[]) -> withdraw.ring2
REF_88(uint256) -> REF_87[participants]
REF_89(uint256[]) -> withdraw.ring2
REF_90(uint256) -> REF_89[0]
TMP_61(bool) = REF_88 != REF_90
CONDITION TMP_61"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
LogDebug(Wrong signature)

IRs:
Emit LogDebug(Wrong signature)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
false

IRs:
RETURN False"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
withdraw.step ++

IRs:
REF_91(uint256) -> withdraw.step
TMP_63(uint256) := REF_91(uint256)
REF_91(-> withdraw) = REF_91 + 1"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
consumed[uint256(sha3()((withdraw.Ix,withdraw.Iy)))] = true

IRs:
REF_92(uint256) -> withdraw.Ix
REF_93(uint256) -> withdraw.Iy
TMP_64(bytes32) = SOLIDITY_CALL sha3()([<slither.slithir.variables.reference.ReferenceVariable object at 0x7f99812591b0>, <slither.slithir.variables.reference.ReferenceVariable object at 0x7f99812592a0>])
TMP_65 = CONVERT TMP_64 to uint256
REF_94(bool) -> consumed[TMP_65]
REF_94(bool) (->consumed) := True(bool)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
safeSend(withdraw.sender,payment)

IRs:
REF_95(address) -> withdraw.sender
INTERNAL_CALL, Laundromat.safeSend(address,uint256)(REF_95,payment)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 40054.sol-Laundromat-withdrawStart(uint256[],uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
gotParticipants < participants

IRs:
TMP_13(bool) = gotParticipants < participants
CONDITION TMP_13"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
consumed[uint256(sha3()((_Ix,_Iy)))]

IRs:
TMP_14(bytes32) = SOLIDITY_CALL sha3()([<slither.core.variables.local_variable.LocalVariable object at 0x7f99812c6500>, <slither.core.variables.local_variable.LocalVariable object at 0x7f99812c6650>])
TMP_15 = CONVERT TMP_14 to uint256
REF_9(bool) -> consumed[TMP_15]
CONDITION REF_9"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
withdraw = withdraws[uint256(msg.sender)]

IRs:
TMP_16 = CONVERT msg.sender to uint256
REF_10(Laundromat.WithdrawInfo) -> withdraws[TMP_16]
withdraw(Laundromat.WithdrawInfo) := REF_10(Laundromat.WithdrawInfo)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
withdraw.sender = msg.sender

IRs:
REF_11(address) -> withdraw.sender
REF_11(address) (->withdraw) := msg.sender(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
withdraw.Ix = _Ix

IRs:
REF_12(uint256) -> withdraw.Ix
REF_12(uint256) (->withdraw) := _Ix(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
withdraw.Iy = _Iy

IRs:
REF_13(uint256) -> withdraw.Iy
REF_13(uint256) (->withdraw) := _Iy(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
withdraw.signature = _signature

IRs:
REF_14(uint256[]) -> withdraw.signature
REF_14(uint256[]) (->withdraw) := _signature(uint256[])"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
withdraw.ring1.length = 0

IRs:
REF_15(uint256[]) -> withdraw.ring1
REF_16 -> LENGTH REF_15
REF_16(uint256) (->withdraw) := 0(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
withdraw.ring2.length = 0

IRs:
REF_17(uint256[]) -> withdraw.ring2
REF_18 -> LENGTH REF_17
REF_18(uint256) (->withdraw) := 0(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
withdraw.ring1.push(_x0)

IRs:
REF_19(uint256[]) -> withdraw.ring1
REF_21 -> LENGTH REF_19
TMP_18(uint256) := REF_21(uint256)
TMP_19(uint256) = TMP_18 + 1
REF_21(uint256) (->withdraw) := TMP_19(uint256)
REF_22(uint256) -> REF_19[TMP_18]
REF_22(uint256) (->withdraw) := _x0(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
withdraw.ring2.push(uint256(sha3()(_x0)))

IRs:
REF_23(uint256[]) -> withdraw.ring2
TMP_20(bytes32) = SOLIDITY_CALL sha3()(_x0)
TMP_21 = CONVERT TMP_20 to uint256
REF_25 -> LENGTH REF_23
TMP_23(uint256) := REF_25(uint256)
TMP_24(uint256) = TMP_23 + 1
REF_25(uint256) (->withdraw) := TMP_24(uint256)
REF_26(uint256) -> REF_23[TMP_23]
REF_26(uint256) (->withdraw) := TMP_21(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
withdraw.step = 1

IRs:
REF_27(uint256) -> withdraw.step
REF_27(uint256) (->withdraw) := 1(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
withdraw.prevStep = 0

IRs:
REF_28(uint256) -> withdraw.prevStep
REF_28(uint256) (->withdraw) := 0(uint256)"];
}
// Function: 40054.sol-Laundromat-withdrawStep()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withdraw = withdraws[uint256(msg.sender)]

IRs:
TMP_25 = CONVERT msg.sender to uint256
REF_29(Laundromat.WithdrawInfo) -> withdraws[TMP_25]
withdraw(Laundromat.WithdrawInfo) := REF_29(Laundromat.WithdrawInfo)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
withdraw.step < 1

IRs:
REF_30(uint256) -> withdraw.step
TMP_26(bool) = REF_30 < 1
CONDITION TMP_26"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
withdraw.step > participants

IRs:
REF_31(uint256) -> withdraw.step
TMP_27(bool) = REF_31 > participants
CONDITION TMP_27"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
consumed[uint256(sha3()((withdraw.Ix,withdraw.Iy)))]

IRs:
REF_32(uint256) -> withdraw.Ix
REF_33(uint256) -> withdraw.Iy
TMP_28(bytes32) = SOLIDITY_CALL sha3()([<slither.slithir.variables.reference.ReferenceVariable object at 0x7f998122c250>, <slither.slithir.variables.reference.ReferenceVariable object at 0x7f998122c340>])
TMP_29 = CONVERT TMP_28 to uint256
REF_34(bool) -> consumed[TMP_29]
CONDITION REF_34"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: THROW 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13
"];
13->14;
14[label="Node Type: NEW VARIABLE 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15
"];
15->16;
16[label="Node Type: NEW VARIABLE 16
"];
16->17;
17[label="Node Type: NEW VARIABLE 17
"];
17->18;
18[label="Node Type: NEW VARIABLE 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
(k1x,k1y,k1z) = arithContract.jmul(Gx,Gy,1,withdraw.signature[withdraw.prevStep % participants])

IRs:
REF_36(uint256[]) -> withdraw.signature
REF_37(uint256) -> withdraw.prevStep
TMP_30(uint256) = REF_37 % participants
REF_38(uint256) -> REF_36[TMP_30]
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:arithContract(ArithLib), function:jmul, arguments:['Gx', 'Gy', '1', 'REF_38']  
k1x(uint256)= UNPACK TUPLE_0 index: 0 
k1y(uint256)= UNPACK TUPLE_0 index: 1 
k1z(uint256)= UNPACK TUPLE_0 index: 2 "];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
(k2x,k2y,k2z) = arithContract.jmul(pubkeys1[withdraw.step % participants],pubkeys2[withdraw.step % participants],1,withdraw.ring2[withdraw.prevStep % participants])

IRs:
REF_40(uint256) -> withdraw.step
TMP_31(uint256) = REF_40 % participants
REF_41(uint256) -> pubkeys1[TMP_31]
REF_42(uint256) -> withdraw.step
TMP_32(uint256) = REF_42 % participants
REF_43(uint256) -> pubkeys2[TMP_32]
REF_44(uint256[]) -> withdraw.ring2
REF_45(uint256) -> withdraw.prevStep
TMP_33(uint256) = REF_45 % participants
REF_46(uint256) -> REF_44[TMP_33]
TUPLE_1(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:arithContract(ArithLib), function:jmul, arguments:['REF_41', 'REF_43', '1', 'REF_46']  
k2x(uint256)= UNPACK TUPLE_1 index: 0 
k2y(uint256)= UNPACK TUPLE_1 index: 1 
k2z(uint256)= UNPACK TUPLE_1 index: 2 "];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
(k1x,k1y,k1z) = arithContract.jsub(k1x,k1y,k1z,k2x,k2y,k2z)

IRs:
TUPLE_2(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:arithContract(ArithLib), function:jsub, arguments:['k1x', 'k1y', 'k1z', 'k2x', 'k2y', 'k2z']  
k1x(uint256)= UNPACK TUPLE_2 index: 0 
k1y(uint256)= UNPACK TUPLE_2 index: 1 
k1z(uint256)= UNPACK TUPLE_2 index: 2 "];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
(pub1x,pub1y) = arithContract.jdecompose(k1x,k1y,k1z)

IRs:
TUPLE_3(uint256,uint256) = HIGH_LEVEL_CALL, dest:arithContract(ArithLib), function:jdecompose, arguments:['k1x', 'k1y', 'k1z']  
pub1x(uint256)= UNPACK TUPLE_3 index: 0 
pub1y(uint256)= UNPACK TUPLE_3 index: 1 "];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
(k1x,k1y) = arithContract.hash_pubkey_to_pubkey(pubkeys1[withdraw.step % participants],pubkeys2[withdraw.step % participants])

IRs:
REF_50(uint256) -> withdraw.step
TMP_34(uint256) = REF_50 % participants
REF_51(uint256) -> pubkeys1[TMP_34]
REF_52(uint256) -> withdraw.step
TMP_35(uint256) = REF_52 % participants
REF_53(uint256) -> pubkeys2[TMP_35]
TUPLE_4(uint256,uint256) = HIGH_LEVEL_CALL, dest:arithContract(ArithLib), function:hash_pubkey_to_pubkey, arguments:['REF_51', 'REF_53']  
k1x(uint256)= UNPACK TUPLE_4 index: 0 
k1y(uint256)= UNPACK TUPLE_4 index: 1 "];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
(k1x,k1y,k1z) = arithContract.jmul(k1x,k1y,1,withdraw.signature[withdraw.prevStep % participants])

IRs:
REF_55(uint256[]) -> withdraw.signature
REF_56(uint256) -> withdraw.prevStep
TMP_36(uint256) = REF_56 % participants
REF_57(uint256) -> REF_55[TMP_36]
TUPLE_5(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:arithContract(ArithLib), function:jmul, arguments:['k1x', 'k1y', '1', 'REF_57']  
k1x(uint256)= UNPACK TUPLE_5 index: 0 
k1y(uint256)= UNPACK TUPLE_5 index: 1 
k1z(uint256)= UNPACK TUPLE_5 index: 2 "];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
(k2x,k2y,k2z) = arithContract.jmul(withdraw.Ix,withdraw.Iy,1,withdraw.ring2[withdraw.prevStep % participants])

IRs:
REF_59(uint256) -> withdraw.Ix
REF_60(uint256) -> withdraw.Iy
REF_61(uint256[]) -> withdraw.ring2
REF_62(uint256) -> withdraw.prevStep
TMP_37(uint256) = REF_62 % participants
REF_63(uint256) -> REF_61[TMP_37]
TUPLE_6(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:arithContract(ArithLib), function:jmul, arguments:['REF_59', 'REF_60', '1', 'REF_63']  
k2x(uint256)= UNPACK TUPLE_6 index: 0 
k2y(uint256)= UNPACK TUPLE_6 index: 1 
k2z(uint256)= UNPACK TUPLE_6 index: 2 "];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
(k1x,k1y,k1z) = arithContract.jsub(k1x,k1y,k1z,k2x,k2y,k2z)

IRs:
TUPLE_7(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:arithContract(ArithLib), function:jsub, arguments:['k1x', 'k1y', 'k1z', 'k2x', 'k2y', 'k2z']  
k1x(uint256)= UNPACK TUPLE_7 index: 0 
k1y(uint256)= UNPACK TUPLE_7 index: 1 
k1z(uint256)= UNPACK TUPLE_7 index: 2 "];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
(k1x,k1y) = arithContract.jdecompose(k1x,k1y,k1z)

IRs:
TUPLE_8(uint256,uint256) = HIGH_LEVEL_CALL, dest:arithContract(ArithLib), function:jdecompose, arguments:['k1x', 'k1y', 'k1z']  
k1x(uint256)= UNPACK TUPLE_8 index: 0 
k1y(uint256)= UNPACK TUPLE_8 index: 1 "];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
withdraw.ring1.push(uint256(sha3()((uint256(withdraw.sender),pub1x,pub1y,k1x,k1y))))

IRs:
REF_66(uint256[]) -> withdraw.ring1
REF_68(address) -> withdraw.sender
TMP_38 = CONVERT REF_68 to uint256
TMP_39(bytes32) = SOLIDITY_CALL sha3()([<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f998122ebf0>, <slither.core.variables.local_variable.LocalVariable object at 0x7f998133e5c0>, <slither.core.variables.local_variable.LocalVariable object at 0x7f998133e7d0>, <slither.core.variables.local_variable.LocalVariable object at 0x7f998133d960>, <slither.core.variables.local_variable.LocalVariable object at 0x7f998133db70>])
TMP_40 = CONVERT TMP_39 to uint256
REF_69 -> LENGTH REF_66
TMP_42(uint256) := REF_69(uint256)
TMP_43(uint256) = TMP_42 + 1
REF_69(uint256) (->withdraw) := TMP_43(uint256)
REF_70(uint256) -> REF_66[TMP_42]
REF_70(uint256) (->withdraw) := TMP_40(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
withdraw.ring2.push(uint256(sha3()(uint256(sha3()((uint256(withdraw.sender),pub1x,pub1y,k1x,k1y))))))

IRs:
REF_71(uint256[]) -> withdraw.ring2
REF_73(address) -> withdraw.sender
TMP_44 = CONVERT REF_73 to uint256
TMP_45(bytes32) = SOLIDITY_CALL sha3()([<slither.slithir.variables.temporary.TemporaryVariable object at 0x7f998122f3d0>, <slither.core.variables.local_variable.LocalVariable object at 0x7f998133e5c0>, <slither.core.variables.local_variable.LocalVariable object at 0x7f998133e7d0>, <slither.core.variables.local_variable.LocalVariable object at 0x7f998133d960>, <slither.core.variables.local_variable.LocalVariable object at 0x7f998133db70>])
TMP_46 = CONVERT TMP_45 to uint256
TMP_47(bytes32) = SOLIDITY_CALL sha3()(TMP_46)
TMP_48 = CONVERT TMP_47 to uint256
REF_74 -> LENGTH REF_71
TMP_50(uint256) := REF_74(uint256)
TMP_51(uint256) = TMP_50 + 1
REF_74(uint256) (->withdraw) := TMP_51(uint256)
REF_75(uint256) -> REF_71[TMP_50]
REF_75(uint256) (->withdraw) := TMP_48(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
withdraw.step ++

IRs:
REF_76(uint256) -> withdraw.step
TMP_52(uint256) := REF_76(uint256)
REF_76(-> withdraw) = REF_76 + 1"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
withdraw.prevStep ++

IRs:
REF_77(uint256) -> withdraw.prevStep
TMP_53(uint256) := REF_77(uint256)
REF_77(-> withdraw) = REF_77 + 1"];
}
}
