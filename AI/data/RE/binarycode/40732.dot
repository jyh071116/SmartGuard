digraph G {
// Function: 40732.sol-Attacker-attack()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
attackCount = 0

IRs:
attackCount(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
bank = Bank(bankAddr)

IRs:
TMP_3 = CONVERT bankAddr to Bank
bank(Bank) := TMP_3(Bank)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
bank.recharge.value(msg.value)()

IRs:
HIGH_LEVEL_CALL, dest:bank(Bank), function:recharge, arguments:[] value:msg.value "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bank.withdraw()

IRs:
HIGH_LEVEL_CALL, dest:bank(Bank), function:withdraw, arguments:[]  "];
}
// Function: 40732.sol-Attacker-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bankAddr = _bank

IRs:
bankAddr(address) := _bank(address)"];
}
// Function: 40732.sol-Attacker-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == bankAddr && attackCount < 5

IRs:
TMP_7(bool) = msg.sender == bankAddr
TMP_8(bool) = attackCount < 5
TMP_9(bool) = TMP_7 && TMP_8
CONDITION TMP_9"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
attackCount += 1

IRs:
attackCount(uint256) = attackCount + 1"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
bank = Bank(bankAddr)

IRs:
TMP_10 = CONVERT bankAddr to Bank
bank(Bank) := TMP_10(Bank)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bank.withdraw()

IRs:
HIGH_LEVEL_CALL, dest:bank(Bank), function:withdraw, arguments:[]  "];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 40732.sol-Attacker-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
attackCount = 0

IRs:
attackCount(uint256) := 0(uint256)"];
}
// Function: 40732.sol-Attacker-wallet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
this.balance

IRs:
REF_10(uint256) = SOLIDITY_CALL balance(address)(this)
RETURN REF_10"];
2[label="Node Type: RETURN 2

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 40732.sol-Bank-recharge()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_1(-> balances) = REF_1 + msg.value"];
}
// Function: 40732.sol-Bank-wallet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
this.balance

IRs:
REF_0(uint256) = SOLIDITY_CALL balance(address)(this)
RETURN REF_0"];
2[label="Node Type: RETURN 2

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 40732.sol-Bank-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender.call.value(balances[msg.sender])())

IRs:
REF_4(uint256) -> balances[msg.sender]
TMP_1(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:REF_4 
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = 0

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5(uint256) (->balances) := 0(uint256)"];
}
}
