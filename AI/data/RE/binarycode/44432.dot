digraph G {
// Function: 44432.sol-BuyToken-buyToken(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_price >= price)

IRs:
TMP_7(bool) = _price >= price
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_price * _amount * 1000000000000000000 <= msg.value)

IRs:
TMP_9(uint256) = _price * _amount
TMP_10(uint256) = TMP_9 * 1000000000000000000
TMP_11(bool) = TMP_10 <= msg.value
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] += _amount

IRs:
REF_9(uint256) -> balances[msg.sender]
REF_9(-> balances) = REF_9 + _amount"];
}
// Function: 44432.sol-BuyToken-setPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_13(bool) = msg.sender == owner
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
price = _price

IRs:
price(uint256) := _price(uint256)"];
}
// Function: 44432.sol-BuyToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
price = 1

IRs:
price(uint256) := 1(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 44432.sol-Coffers-createCoffer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
coffer = coffers[coffers.length ++]

IRs:
REF_43 -> LENGTH coffers
TMP_70(uint256) := REF_43(uint256)
REF_43(-> coffers) = REF_43 + 1
REF_44(Coffers.Coffer) -> coffers[TMP_70]
coffer(Coffers.Coffer) := REF_44(Coffers.Coffer)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
coffer.owner = msg.sender

IRs:
REF_45(address) -> coffer.owner
REF_45(address) (->coffer) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
coffer.slots.length = _slots

IRs:
REF_46(uint256[]) -> coffer.slots
REF_47 -> LENGTH REF_46
REF_47(uint256) (->coffer) := _slots(uint256)"];
}
// Function: 44432.sol-Coffers-deposit(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
coffer = coffers[_coffer]

IRs:
REF_48(Coffers.Coffer) -> coffers[_coffer]
coffer(Coffers.Coffer) := REF_48(Coffers.Coffer)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
coffer.slots[_slot] += msg.value

IRs:
REF_49(uint256[]) -> coffer.slots
REF_50(uint256) -> REF_49[_slot]
REF_50(-> coffer) = REF_50 + msg.value"];
}
// Function: 44432.sol-Coffers-withdraw(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
coffer = coffers[_coffer]

IRs:
REF_51(Coffers.Coffer) -> coffers[_coffer]
coffer(Coffers.Coffer) := REF_51(Coffers.Coffer)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(coffer.owner == msg.sender)

IRs:
REF_52(address) -> coffer.owner
TMP_71(bool) = REF_52 == msg.sender
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.transfer(coffer.slots[_slot])

IRs:
REF_54(uint256[]) -> coffer.slots
REF_55(uint256) -> REF_54[_slot]
Transfer dest:msg.sender value:REF_55"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
coffer.slots[_slot] = 0

IRs:
REF_56(uint256[]) -> coffer.slots
REF_57(uint256) -> REF_56[_slot]
REF_57(uint256) (->coffer) := 0(uint256)"];
}
// Function: 44432.sol-CountContribution-CountContribution()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
recordContribution(owner,1000000000000000000)

IRs:
INTERNAL_CALL, CountContribution.recordContribution(address,uint256)(owner,1000000000000000000)"];
}
// Function: 44432.sol-CountContribution-contribute()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
recordContribution(msg.sender,msg.value)

IRs:
INTERNAL_CALL, CountContribution.recordContribution(address,uint256)(msg.sender,msg.value)"];
}
// Function: 44432.sol-CountContribution-recordContribution(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contribution[_user] += _amount

IRs:
REF_20(uint256) -> contribution[_user]
REF_20(-> contribution) = REF_20 + _amount"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalContributions += _amount

IRs:
totalContributions(uint256) = totalContributions + _amount"];
}
// Function: 44432.sol-CountContribution-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 44432.sol-DiscountedBuy-buy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value * (1 + objectBought[msg.sender]) == basePrice)

IRs:
REF_28(uint256) -> objectBought[msg.sender]
TMP_29(uint256) = 1 + REF_28
TMP_30(uint256) = msg.value * TMP_29
TMP_31(bool) = TMP_30 == basePrice
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
objectBought[msg.sender] += 1

IRs:
REF_29(uint256) -> objectBought[msg.sender]
REF_29(-> objectBought) = REF_29 + 1"];
}
// Function: 44432.sol-DiscountedBuy-price()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
basePrice / (1 + objectBought[msg.sender])

IRs:
REF_30(uint256) -> objectBought[msg.sender]
TMP_33(uint256) = 1 + REF_30
TMP_34(uint256) = basePrice / TMP_33
RETURN TMP_34"];
2[label="Node Type: RETURN 2

EXPRESSION:
price

IRs:
RETURN price"];
}
// Function: 44432.sol-DiscountedBuy-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
basePrice = 1000000000000000000

IRs:
basePrice(uint256) := 1000000000000000000(uint256)"];
}
// Function: 44432.sol-HeadOrTail-choose(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! chosen)

IRs:
TMP_35 = UnaryType.BANG chosen 
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value == 1000000000000000000)

IRs:
TMP_37(bool) = msg.value == 1000000000000000000
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
chosen = true

IRs:
chosen(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
lastChoiceHead = _chooseHead

IRs:
lastChoiceHead(bool) := _chooseHead(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lastParty = msg.sender

IRs:
lastParty(address) := msg.sender(address)"];
}
// Function: 44432.sol-HeadOrTail-guess(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(chosen)

IRs:
TMP_39(None) = SOLIDITY_CALL require(bool)(chosen)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value == 1000000000000000000)

IRs:
TMP_40(bool) = msg.value == 1000000000000000000
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_guessHead == lastChoiceHead

IRs:
TMP_42(bool) = _guessHead == lastChoiceHead
CONDITION TMP_42"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
msg.sender.transfer(2000000000000000000)

IRs:
Transfer dest:msg.sender value:2000000000000000000"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lastParty.transfer(2000000000000000000)

IRs:
Transfer dest:lastParty value:2000000000000000000"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
chosen = false

IRs:
chosen(bool) := False(bool)"];
}
// Function: 44432.sol-HeadTail-HeadTail(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == 1000000000000000000)

IRs:
TMP_47(bool) = msg.value == 1000000000000000000
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
commitmentA = _commitmentA

IRs:
commitmentA(bytes32) := _commitmentA(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
partyA = msg.sender

IRs:
partyA(address) := msg.sender(address)"];
}
// Function: 44432.sol-HeadTail-guess(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == 1000000000000000000)

IRs:
TMP_49(bool) = msg.value == 1000000000000000000
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(partyB == address(0))

IRs:
TMP_51 = CONVERT 0 to address
TMP_52(bool) = partyB == TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
chooseHeadB = _chooseHead

IRs:
chooseHeadB(bool) := _chooseHead(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
timeB = now

IRs:
timeB(uint256) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
partyB = msg.sender

IRs:
partyB(address) := msg.sender(address)"];
}
// Function: 44432.sol-HeadTail-resolve(bool,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == partyA)

IRs:
TMP_54(bool) = msg.sender == partyA
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(keccak256()(_chooseHead,_randomNumber) == commitmentA)

IRs:
TMP_56(bytes32) = SOLIDITY_CALL keccak256()(_chooseHead,_randomNumber)
TMP_57(bool) = TMP_56 == commitmentA
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(this.balance >= 2000000000000000000)

IRs:
REF_38(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_59(bool) = REF_38 >= 2000000000000000000
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_chooseHead == chooseHeadB

IRs:
TMP_61(bool) = _chooseHead == chooseHeadB
CONDITION TMP_61"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
partyB.transfer(2000000000000000000)

IRs:
Transfer dest:partyB value:2000000000000000000"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
partyA.transfer(2000000000000000000)

IRs:
Transfer dest:partyA value:2000000000000000000"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 44432.sol-HeadTail-timeOut()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > timeB + 86400)

IRs:
TMP_64(uint256) = timeB + 86400
TMP_65(bool) = now > TMP_64
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(this.balance >= 2000000000000000000)

IRs:
REF_41(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_67(bool) = REF_41 >= 2000000000000000000
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
partyB.transfer(2000000000000000000)

IRs:
Transfer dest:partyB value:2000000000000000000"];
}
// Function: 44432.sol-SimpleToken-buyToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] += msg.value / 1000000000000000000

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_0(uint256) = msg.value / 1000000000000000000
REF_0(-> balances) = REF_0 + TMP_0"];
}
// Function: 44432.sol-SimpleToken-sendToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] != 0)

IRs:
REF_1(uint256) -> balances[msg.sender]
TMP_1(bool) = REF_1 != 0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _amount

IRs:
REF_2(uint256) -> balances[msg.sender]
REF_2(-> balances) = REF_2 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_recipient] += _amount

IRs:
REF_3(uint256) -> balances[_recipient]
REF_3(-> balances) = REF_3 + _amount"];
}
// Function: 44432.sol-Store-store()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
safes.push(Safe(msg.sender,msg.value))

IRs:
TMP_15(Store.Safe) = new Safe(msg.sender,msg.value)
REF_11 -> LENGTH safes
TMP_17(uint256) := REF_11(uint256)
TMP_18(uint256) = TMP_17 + 1
REF_11(uint256) (->safes) := TMP_18(uint256)
REF_12(Store.Safe) -> safes[TMP_17]
REF_12(Store.Safe) (->safes) := TMP_15(Store.Safe)"];
}
// Function: 44432.sol-Store-take()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3
"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < safes.length

IRs:
REF_13 -> LENGTH safes
TMP_19(bool) = i < REF_13
CONDITION TMP_19"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
safe = safes[i]

IRs:
REF_14(Store.Safe) -> safes[i]
safe(Store.Safe) := REF_14(Store.Safe)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
safe.owner == msg.sender && safe.amount != 0

IRs:
REF_15(address) -> safe.owner
TMP_20(bool) = REF_15 == msg.sender
REF_16(uint256) -> safe.amount
TMP_21(bool) = REF_16 != 0
TMP_22(bool) = TMP_20 && TMP_21
CONDITION TMP_22"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
msg.sender.transfer(safe.amount)

IRs:
REF_18(uint256) -> safe.amount
Transfer dest:msg.sender value:REF_18"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
safe.amount = 0

IRs:
REF_19(uint256) -> safe.amount
REF_19(uint256) (->safe) := 0(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
10->4;
}
// Function: 44432.sol-Token-buyToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] += msg.value / 1000000000000000000

IRs:
REF_21(uint256) -> balances[msg.sender]
TMP_26(uint256) = msg.value / 1000000000000000000
REF_21(-> balances) = REF_21 + TMP_26"];
}
// Function: 44432.sol-Token-sendAllTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_recipient] = + balances[msg.sender]

IRs:
REF_25(uint256) -> balances[_recipient]
REF_26(uint256) -> balances[msg.sender]
REF_25(uint256) (->balances) := REF_26(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = 0

IRs:
REF_27(uint256) -> balances[msg.sender]
REF_27(uint256) (->balances) := 0(uint256)"];
}
// Function: 44432.sol-Token-sendToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _amount)

IRs:
REF_22(uint256) -> balances[msg.sender]
TMP_27(bool) = REF_22 >= _amount
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _amount

IRs:
REF_23(uint256) -> balances[msg.sender]
REF_23(-> balances) = REF_23 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_recipient] += _amount

IRs:
REF_24(uint256) -> balances[_recipient]
REF_24(-> balances) = REF_24 + _amount"];
}
// Function: 44432.sol-Vault-redeem()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
msg.sender.call.value(balances[msg.sender])()

IRs:
REF_36(uint256) -> balances[msg.sender]
TMP_46(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:REF_36 "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = 0

IRs:
REF_37(uint256) -> balances[msg.sender]
REF_37(uint256) (->balances) := 0(uint256)"];
}
// Function: 44432.sol-Vault-store()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_33(uint256) -> balances[msg.sender]
REF_33(-> balances) = REF_33 + msg.value"];
}
// Function: 44432.sol-VoteTwoChoices-buyVotingRights()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
votingRights[msg.sender] += msg.value / (1000000000000000000)

IRs:
REF_4(uint256) -> votingRights[msg.sender]
TMP_3(uint256) = msg.value / 1000000000000000000
REF_4(-> votingRights) = REF_4 + TMP_3"];
}
// Function: 44432.sol-VoteTwoChoices-vote(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_nbVotes + votesCast[msg.sender] <= votingRights[msg.sender])

IRs:
REF_5(uint256) -> votesCast[msg.sender]
TMP_4(uint256) = _nbVotes + REF_5
REF_6(uint256) -> votingRights[msg.sender]
TMP_5(bool) = TMP_4 <= REF_6
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
votesCast[msg.sender] += _nbVotes

IRs:
REF_7(uint256) -> votesCast[msg.sender]
REF_7(-> votesCast) = REF_7 + _nbVotes"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
votesReceived[_proposition] += _nbVotes

IRs:
REF_8(uint256) -> votesReceived[_proposition]
REF_8(-> votesReceived) = REF_8 + _nbVotes"];
}
}
