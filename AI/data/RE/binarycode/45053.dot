digraph G {
// Function: 45053.sol-LegacyBaseWallet-authoriseModule(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: IF 1

EXPRESSION:
authorised[_module] != _value

IRs:
REF_10(bool) -> authorised[_module]
TMP_14(bool) = REF_10 != _value
CONDITION TMP_14"];
1->2[label="True"];
1->11[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
_value == true

IRs:
TMP_15(bool) = _value == True
CONDITION TMP_15"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
modules += 1

IRs:
modules(uint256) = modules + 1"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
authorised[_module] = true

IRs:
REF_11(bool) -> authorised[_module]
REF_11(bool) (->authorised) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LegacyModule(_module).init(this)

IRs:
TMP_16 = CONVERT _module to LegacyModule
HIGH_LEVEL_CALL, dest:TMP_16(LegacyModule), function:init, arguments:['this']  "];
5->9;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
modules -= 1

IRs:
modules(uint256) = modules - 1"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(modules > 0,BW: wallet must have at least one module)

IRs:
TMP_18(bool) = modules > 0
TMP_19(None) = SOLIDITY_CALL require(bool,string)(TMP_18,BW: wallet must have at least one module)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete authorised[_module]

IRs:
REF_13(bool) -> authorised[_module]
authorised = delete REF_13 "];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
AuthorisedModule(_module,_value)

IRs:
Emit AuthorisedModule(_module,_value)"];
10->11;
11[label="Node Type: END_IF 11
"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
moduleOnly()

IRs:
MODIFIER_CALL, LegacyBaseWallet.moduleOnly()()"];
12->1;
}
// Function: 45053.sol-LegacyBaseWallet-enableStaticCall(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(authorised[_module],BW: must be an authorised module for static call)

IRs:
REF_14(bool) -> authorised[_module]
TMP_22(None) = SOLIDITY_CALL require(bool,string)(REF_14,BW: must be an authorised module for static call)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
enabled[_method] = _module

IRs:
REF_15(address) -> enabled[_method]
REF_15(address) (->enabled) := _module(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
EnabledStaticCall(_module,_method)

IRs:
Emit EnabledStaticCall(_module,_method)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
moduleOnly()

IRs:
MODIFIER_CALL, LegacyBaseWallet.moduleOnly()()"];
4->1;
}
// Function: 45053.sol-LegacyBaseWallet-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.data.length > 0

IRs:
REF_18 -> LENGTH msg.data
TMP_34(bool) = REF_18 > 0
CONDITION TMP_34"];
1->2[label="True"];
1->9[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
module = enabled[msg.sig]

IRs:
REF_19(address) -> enabled[msg.sig]
module(address) := REF_19(address)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
module == address(0)

IRs:
TMP_35 = CONVERT 0 to address
TMP_36(bool) = module == TMP_35
CONDITION TMP_36"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Received(msg.value,msg.sender,msg.data)

IRs:
Emit Received(msg.value,msg.sender,msg.data)"];
4->8;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(authorised[module],BW: must be an authorised module for static call)

IRs:
REF_20(bool) -> authorised[module]
TMP_38(None) = SOLIDITY_CALL require(bool,string)(REF_20,BW: must be an authorised module for static call)"];
5->6;
6[label="Node Type: INLINE ASM 6
"];
6->7;
7[label="Node Type: END INLINE ASM 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
}
// Function: 45053.sol-LegacyBaseWallet-init(address,address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(owner == address(0) && modules == 0,BW: wallet already initialised)

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = owner == TMP_0
TMP_2(bool) = modules == 0
TMP_3(bool) = TMP_1 && TMP_2
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,BW: wallet already initialised)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_modules.length > 0,BW: construction requires at least 1 module)

IRs:
REF_0 -> LENGTH _modules
TMP_5(bool) = REF_0 > 0
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,BW: construction requires at least 1 module)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
modules = _modules.length

IRs:
REF_1 -> LENGTH _modules
modules(uint256) := REF_1(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < _modules.length

IRs:
REF_2 -> LENGTH _modules
TMP_7(bool) = i < REF_2
CONDITION TMP_7"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool,string)(authorised[_modules[i]] == false,BW: module is already added)

IRs:
REF_3(address) -> _modules[i]
REF_4(bool) -> authorised[REF_3]
TMP_8(bool) = REF_4 == False
TMP_9(None) = SOLIDITY_CALL require(bool,string)(TMP_8,BW: module is already added)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
authorised[_modules[i]] = true

IRs:
REF_5(address) -> _modules[i]
REF_6(bool) -> authorised[REF_5]
REF_6(bool) (->authorised) := True(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
LegacyModule(_modules[i]).init(this)

IRs:
REF_7(address) -> _modules[i]
TMP_10 = CONVERT REF_7 to LegacyModule
HIGH_LEVEL_CALL, dest:TMP_10(LegacyModule), function:init, arguments:['this']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
AuthorisedModule(_modules[i],true)

IRs:
REF_9(address) -> _modules[i]
Emit AuthorisedModule(REF_9,True)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_13(uint256) := i(uint256)
i(uint256) = i + 1"];
13->8;
}
// Function: 45053.sol-LegacyBaseWallet-invoke(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(success,None) = _target.call.value(_value)(_data)

IRs:
TUPLE_0(bool,bytes) = LOW_LEVEL_CALL, dest:_target, function:call, arguments:['_data'] value:_value 
success(bool)= UNPACK TUPLE_0 index: 0 "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(success,BW: call to target failed)

IRs:
TMP_31(None) = SOLIDITY_CALL require(bool,string)(success,BW: call to target failed)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Invoked(msg.sender,_target,_value,_data)

IRs:
Emit Invoked(msg.sender,_target,_value,_data)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
moduleOnly()

IRs:
MODIFIER_CALL, LegacyBaseWallet.moduleOnly()()"];
5->1;
}
// Function: 45053.sol-LegacyBaseWallet-moduleOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(authorised[msg.sender],BW: msg.sender not an authorized module)

IRs:
REF_21(bool) -> authorised[msg.sender]
TMP_39(None) = SOLIDITY_CALL require(bool,string)(REF_21,BW: msg.sender not an authorized module)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 45053.sol-LegacyBaseWallet-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_newOwner != address(0),BW: address cannot be null)

IRs:
TMP_25 = CONVERT 0 to address
TMP_26(bool) = _newOwner != TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,BW: address cannot be null)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerChanged(_newOwner)

IRs:
Emit OwnerChanged(_newOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
moduleOnly()

IRs:
MODIFIER_CALL, LegacyBaseWallet.moduleOnly()()"];
4->1;
}
// Function: 45053.sol-LegacyModule-addModule(LegacyBaseWallet,LegacyModule)
digraph{
}
// Function: 45053.sol-LegacyModule-init(LegacyBaseWallet)
digraph{
}
// Function: 45053.sol-LegacyModule-recoverToken(address)
digraph{
}
}
