digraph G {
// Function: 721.sol-CanReclaimToken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_34 = CONVERT 0 to address
TMP_35(bool) = _newOwner != TMP_34
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 721.sol-CanReclaimToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 721.sol-CanReclaimToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_41(bool) = msg.sender == owner
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 721.sol-CanReclaimToken-reclaimToken(ERC20Basic)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balance = token.balanceOf(this)

IRs:
TMP_38(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_38(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.safeTransfer(owner,balance)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['token', 'owner', 'balance'] "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 721.sol-CanReclaimToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_30 = CONVERT 0 to address
owner(address) := TMP_30(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 721.sol-CanReclaimToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 721.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 721.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 721.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 721.sol-ERC20-totalSupply()
digraph{
}
// Function: 721.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 721.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 721.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 721.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 721.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 721.sol-IBasicMultiToken-allBalances()
digraph{
}
// Function: 721.sol-IBasicMultiToken-allDecimals()
digraph{
}
// Function: 721.sol-IBasicMultiToken-allTokens()
digraph{
}
// Function: 721.sol-IBasicMultiToken-allTokensDecimalsBalances()
digraph{
}
// Function: 721.sol-IBasicMultiToken-allowance(address,address)
digraph{
}
// Function: 721.sol-IBasicMultiToken-approve(address,uint256)
digraph{
}
// Function: 721.sol-IBasicMultiToken-balanceOf(address)
digraph{
}
// Function: 721.sol-IBasicMultiToken-bundle(address,uint256)
digraph{
}
// Function: 721.sol-IBasicMultiToken-bundleFirstTokens(address,uint256,uint256[])
digraph{
}
// Function: 721.sol-IBasicMultiToken-tokens(uint256)
digraph{
}
// Function: 721.sol-IBasicMultiToken-tokensCount()
digraph{
}
// Function: 721.sol-IBasicMultiToken-totalSupply()
digraph{
}
// Function: 721.sol-IBasicMultiToken-transfer(address,uint256)
digraph{
}
// Function: 721.sol-IBasicMultiToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 721.sol-IBasicMultiToken-unbundle(address,uint256)
digraph{
}
// Function: 721.sol-IBasicMultiToken-unbundleSome(address,uint256,ERC20[])
digraph{
}
// Function: 721.sol-IMultiToken-allBalances()
digraph{
}
// Function: 721.sol-IMultiToken-allDecimals()
digraph{
}
// Function: 721.sol-IMultiToken-allTokens()
digraph{
}
// Function: 721.sol-IMultiToken-allTokensDecimalsBalances()
digraph{
}
// Function: 721.sol-IMultiToken-allTokensDecimalsBalancesWeights()
digraph{
}
// Function: 721.sol-IMultiToken-allWeights()
digraph{
}
// Function: 721.sol-IMultiToken-allowance(address,address)
digraph{
}
// Function: 721.sol-IMultiToken-approve(address,uint256)
digraph{
}
// Function: 721.sol-IMultiToken-balanceOf(address)
digraph{
}
// Function: 721.sol-IMultiToken-bundle(address,uint256)
digraph{
}
// Function: 721.sol-IMultiToken-bundleFirstTokens(address,uint256,uint256[])
digraph{
}
// Function: 721.sol-IMultiToken-change(address,address,uint256,uint256)
digraph{
}
// Function: 721.sol-IMultiToken-getReturn(address,address,uint256)
digraph{
}
// Function: 721.sol-IMultiToken-tokens(uint256)
digraph{
}
// Function: 721.sol-IMultiToken-tokensCount()
digraph{
}
// Function: 721.sol-IMultiToken-totalSupply()
digraph{
}
// Function: 721.sol-IMultiToken-transfer(address,uint256)
digraph{
}
// Function: 721.sol-IMultiToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 721.sol-IMultiToken-unbundle(address,uint256)
digraph{
}
// Function: 721.sol-IMultiToken-unbundleSome(address,uint256,ERC20[])
digraph{
}
// Function: 721.sol-MultiBuyer-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_51 = CONVERT 0 to address
TMP_52(bool) = _newOwner != TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 721.sol-MultiBuyer-buy(IMultiToken,uint256,ERC20,address[],bytes,uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_datasIndexes.length == _exchanges.length + 1,buy: _datasIndexes should start with 0 and end with LENGTH)

IRs:
REF_7 -> LENGTH _datasIndexes
REF_8 -> LENGTH _exchanges
TMP_55(uint256) = REF_8 + 1
TMP_56(bool) = REF_7 == TMP_55
TMP_57(None) = SOLIDITY_CALL require(bool,string)(TMP_56,buy: _datasIndexes should start with 0 and end with LENGTH)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_values.length == _exchanges.length,buy: _values should have the same length as _exchanges)

IRs:
REF_9 -> LENGTH _values
REF_10 -> LENGTH _exchanges
TMP_58(bool) = REF_9 == REF_10
TMP_59(None) = SOLIDITY_CALL require(bool,string)(TMP_58,buy: _values should have the same length as _exchanges)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->22;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < _exchanges.length

IRs:
REF_11 -> LENGTH _exchanges
TMP_60(bool) = i < REF_11
CONDITION TMP_60"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
data = new bytes(_datasIndexes[i + 1] - _datasIndexes[i])

IRs:
TMP_62(uint256) = i + 1
REF_12(uint256) -> _datasIndexes[TMP_62]
REF_13(uint256) -> _datasIndexes[i]
TMP_63(uint256) = REF_12 - REF_13
TMP_64 = new bytes(TMP_63)
data(bytes) := TMP_64(bytes)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->14;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
j = _datasIndexes[i]

IRs:
REF_14(uint256) -> _datasIndexes[i]
j(uint256) := REF_14(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
j < _datasIndexes[i + 1]

IRs:
TMP_65(uint256) = i + 1
REF_15(uint256) -> _datasIndexes[TMP_65]
TMP_66(bool) = j < REF_15
CONDITION TMP_66"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
data[j - _datasIndexes[i]] = _datas[j]

IRs:
REF_16(uint256) -> _datasIndexes[i]
TMP_67(uint256) = j - REF_16
REF_17(None) -> data[TMP_67]
REF_18(None) -> _datas[j]
REF_17(None) (->data) := REF_18(None)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
j ++

IRs:
TMP_68(uint256) := j(uint256)
j(uint256) = j + 1"];
13->11;
14[label="Node Type: IF 14

EXPRESSION:
_throughToken != address(0) && i > 0

IRs:
TMP_69 = CONVERT 0 to address
TMP_70(bool) = _throughToken != TMP_69
TMP_71(bool) = i > 0
TMP_72(bool) = TMP_70 && TMP_71
CONDITION TMP_72"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_throughToken.approve(_exchanges[i],_throughToken.balanceOf(this))

IRs:
REF_20(address) -> _exchanges[i]
TMP_73(uint256) = HIGH_LEVEL_CALL, dest:_throughToken(ERC20), function:balanceOf, arguments:['this']  
TMP_74(bool) = HIGH_LEVEL_CALL, dest:_throughToken(ERC20), function:approve, arguments:['REF_20', 'TMP_73']  "];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
require(bool,string)(_exchanges[i].call.value(_values[i])(data),buy: exchange arbitrary call failed)

IRs:
REF_22(address) -> _exchanges[i]
REF_25(uint256) -> _values[i]
TMP_76(bool) = LOW_LEVEL_CALL, dest:REF_22, function:call, arguments:['data'] value:REF_25 
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,buy: exchange arbitrary call failed)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
_throughToken != address(0)

IRs:
TMP_78 = CONVERT 0 to address
TMP_79(bool) = _throughToken != TMP_78
CONDITION TMP_79"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_throughToken.approve(_exchanges[i],0)

IRs:
REF_27(address) -> _exchanges[i]
TMP_80(bool) = HIGH_LEVEL_CALL, dest:_throughToken(ERC20), function:approve, arguments:['REF_27', '0']  "];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_81(uint256) := i(uint256)
i(uint256) = i + 1"];
21->6;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
j = _mtkn.totalSupply()

IRs:
TMP_82(uint256) = HIGH_LEVEL_CALL, dest:_mtkn(IMultiToken), function:totalSupply, arguments:[]  
j(uint256) := TMP_82(uint256)"];
22->23;
23[label="Node Type: NEW VARIABLE 23

EXPRESSION:
bestAmount = uint256(- 1)

IRs:
TMP_83(uint256) = 0 - 1
TMP_84 = CONVERT TMP_83 to uint256
bestAmount(uint256) := TMP_84(uint256)"];
23->26;
24[label="Node Type: BEGIN_LOOP 24
"];
24->27;
25[label="Node Type: END_LOOP 25
"];
25->35;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i = _mtkn.tokensCount()

IRs:
TMP_85(uint256) = HIGH_LEVEL_CALL, dest:_mtkn(IMultiToken), function:tokensCount, arguments:[]  
i(uint256) := TMP_85(uint256)"];
26->24;
27[label="Node Type: IF_LOOP 27

EXPRESSION:
i > 0

IRs:
TMP_86(bool) = i > 0
CONDITION TMP_86"];
27->28[label="True"];
27->25[label="False"];
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
token = _mtkn.tokens(i - 1)

IRs:
TMP_87(uint256) = i - 1
TMP_88(ERC20) = HIGH_LEVEL_CALL, dest:_mtkn(IMultiToken), function:tokens, arguments:['TMP_87']  
token(ERC20) := TMP_88(ERC20)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
token.approve(_mtkn,token.balanceOf(this))

IRs:
TMP_89(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20), function:balanceOf, arguments:['this']  
TMP_90(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:approve, arguments:['_mtkn', 'TMP_89']  "];
29->30;
30[label="Node Type: NEW VARIABLE 30

EXPRESSION:
amount = j.mul(token.balanceOf(this)).div(token.balanceOf(_mtkn))

IRs:
TMP_91(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20), function:balanceOf, arguments:['this']  
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['j', 'TMP_91'] 
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20), function:balanceOf, arguments:['_mtkn']  
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_92', 'TMP_93'] 
amount(uint256) := TMP_94(uint256)"];
30->31;
31[label="Node Type: IF 31

EXPRESSION:
amount < bestAmount

IRs:
TMP_95(bool) = amount < bestAmount
CONDITION TMP_95"];
31->32[label="True"];
31->33[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
bestAmount = amount

IRs:
bestAmount(uint256) := amount(uint256)"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
i --

IRs:
TMP_96(uint256) := i(uint256)
i(uint256) = i - 1"];
34->27;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
require(bool,string)(bestAmount >= _minimumReturn,buy: return value is too low)

IRs:
TMP_97(bool) = bestAmount >= _minimumReturn
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,buy: return value is too low)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
_mtkn.bundle(msg.sender,bestAmount)

IRs:
HIGH_LEVEL_CALL, dest:_mtkn(IMultiToken), function:bundle, arguments:['msg.sender', 'bestAmount']  "];
36->37;
37[label="Node Type: IF 37

EXPRESSION:
address(this).balance > 0

IRs:
TMP_100 = CONVERT this to address
TMP_101(uint256) = SOLIDITY_CALL balance(address)(TMP_100)
TMP_102(bool) = TMP_101 > 0
CONDITION TMP_102"];
37->38[label="True"];
37->39[label="False"];
38[label="Node Type: EXPRESSION 38

EXPRESSION:
msg.sender.transfer(address(this).balance)

IRs:
TMP_103 = CONVERT this to address
TMP_104(uint256) = SOLIDITY_CALL balance(address)(TMP_103)
Transfer dest:msg.sender value:TMP_104"];
38->39;
39[label="Node Type: END_IF 39
"];
}
// Function: 721.sol-MultiBuyer-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 721.sol-MultiBuyer-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_106(bool) = msg.sender == owner
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 721.sol-MultiBuyer-reclaimToken(ERC20Basic)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balance = token.balanceOf(this)

IRs:
TMP_43(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_43(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.safeTransfer(owner,balance)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['token', 'owner', 'balance'] "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 721.sol-MultiBuyer-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_47 = CONVERT 0 to address
owner(address) := TMP_47(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 721.sol-MultiBuyer-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 721.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_23 = CONVERT 0 to address
TMP_24(bool) = _newOwner != TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 721.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 721.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_27(bool) = msg.sender == owner
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 721.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_19 = CONVERT 0 to address
owner(address) := TMP_19(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 721.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 721.sol-SafeERC20-safeApprove(ERC20,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.approve(spender,value))

IRs:
TMP_16(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:approve, arguments:['spender', 'value']  
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
}
// Function: 721.sol-SafeERC20-safeTransfer(ERC20Basic,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.transfer(to,value))

IRs:
TMP_12(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['to', 'value']  
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
}
// Function: 721.sol-SafeERC20-safeTransferFrom(ERC20,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.transferFrom(from,to,value))

IRs:
TMP_14(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transferFrom, arguments:['from', 'to', 'value']  
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
}
// Function: 721.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 721.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 721.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 721.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
