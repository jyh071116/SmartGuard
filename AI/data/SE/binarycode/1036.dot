digraph G {
// Function: 1036.sol-Administration-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == adminAddress)

IRs:
TMP_28(bool) = msg.sender == adminAddress
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1036.sol-Administration-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
5->1;
}
// Function: 1036.sol-Administration-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newAdmin != address(0))

IRs:
TMP_15 = CONVERT 0 to address
TMP_16(bool) = _newAdmin != TMP_15
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AdminTransferred(adminAddress,_newAdmin)

IRs:
Emit AdminTransferred(adminAddress,_newAdmin)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
adminAddress = _newAdmin

IRs:
adminAddress(address) := _newAdmin(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
4->1;
}
// Function: 1036.sol-Administration-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
adminAddress = 0xbd74Dec00Af1E745A21d5130928CD610BE963027

IRs:
adminAddress(address) := 1081605546404974836213712594752196472130749476903(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
oneEth = 1000000000000000000

IRs:
oneEth(uint256) := 1000000000000000000(uint256)"];
}
// Function: 1036.sol-Administration-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Administration.whenPaused()()"];
5->1;
}
// Function: 1036.sol-Administration-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_30 = UnaryType.BANG paused 
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1036.sol-Administration-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_32(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1036.sol-Administration-withdrawBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
adminAddress.transfer(this.balance)

IRs:
REF_1(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:adminAddress value:REF_1"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
2->1;
}
// Function: 1036.sol-Anno-AnnoMedal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
medalSymbol = CPLD

IRs:
medalSymbol(string) := CPLD(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
medalName = Anno Medal

IRs:
medalName(string) := Anno Medal(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalDecimals = 0

IRs:
medalDecimals(uint8) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_medalTotalSupply = 1000000

IRs:
_medalTotalSupply(uint256) := 1000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
medalBalances[adminAddress] = _medalTotalSupply

IRs:
REF_300(uint256) -> medalBalances[adminAddress]
REF_300(uint256) (->medalBalances) := _medalTotalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
MedalTransfer(address(0),adminAddress,_medalTotalSupply)

IRs:
TMP_415 = CONVERT 0 to address
Emit MedalTransfer(TMP_415,adminAddress,_medalTotalSupply)"];
}
// Function: 1036.sol-Anno-AnnoToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = anno

IRs:
symbol(string) := anno(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = Anno Token

IRs:
name(string) := Anno Token(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = 1000000000000000000000000000

IRs:
_totalSupply(uint256) := 1000000000000000000000000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minePool = 60000000000000000000000000000

IRs:
minePool(uint256) := 60000000000000000000000000000(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[adminAddress] = _totalSupply - minePool

IRs:
REF_201(uint256) -> balances[adminAddress]
TMP_308(uint256) = _totalSupply - minePool
REF_201(uint256) (->balances) := TMP_308(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(address(0),adminAddress,_totalSupply)

IRs:
TMP_309 = CONVERT 0 to address
Emit Transfer(TMP_309,adminAddress,_totalSupply)"];
}
// Function: 1036.sol-Anno-WhoIsTheContractMaster()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Alexander The Exlosion

IRs:
RETURN Alexander The Exlosion"];
}
// Function: 1036.sol-Anno-_medalFreeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(medalFreezed[msg.sender] == false)

IRs:
REF_324(bool) -> medalFreezed[msg.sender]
TMP_442(bool) = REF_324 == False
TMP_443(None) = SOLIDITY_CALL require(bool)(TMP_442)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(medalBalances[msg.sender] >= amount)

IRs:
REF_325(uint256) -> medalBalances[msg.sender]
TMP_444(bool) = REF_325 >= amount
TMP_445(None) = SOLIDITY_CALL require(bool)(TMP_444)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalFreezed[msg.sender] = true

IRs:
REF_326(bool) -> medalFreezed[msg.sender]
REF_326(bool) (->medalFreezed) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medalUnlockTime[msg.sender] = uint256(- 1)

IRs:
REF_327(uint256) -> medalUnlockTime[msg.sender]
TMP_446(uint256) = 0 - 1
TMP_447 = CONVERT TMP_446 to uint256
REF_327(uint256) (->medalUnlockTime) := TMP_447(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
medalFreezeAmount[msg.sender] = amount

IRs:
REF_328(uint256) -> medalFreezeAmount[msg.sender]
REF_328(uint256) (->medalFreezeAmount) := amount(uint256)"];
}
// Function: 1036.sol-Anno-_medalUnFreeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(medalFreezed[msg.sender] == true)

IRs:
REF_333(bool) -> medalFreezed[msg.sender]
TMP_454(bool) = REF_333 == True
TMP_455(None) = SOLIDITY_CALL require(bool)(TMP_454)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
medalUnlockTime[msg.sender] = 0

IRs:
REF_334(uint256) -> medalUnlockTime[msg.sender]
REF_334(uint256) (->medalUnlockTime) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalFreezed[msg.sender] = false

IRs:
REF_335(bool) -> medalFreezed[msg.sender]
REF_335(bool) (->medalFreezed) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medalFreezeAmount[msg.sender] = safeSub(medalFreezeAmount[msg.sender],_amount)

IRs:
REF_336(uint256) -> medalFreezeAmount[msg.sender]
REF_337(uint256) -> medalFreezeAmount[msg.sender]
TMP_456(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_337,_amount)
REF_336(uint256) (->medalFreezeAmount) := TMP_456(uint256)"];
}
// Function: 1036.sol-Anno-_mint(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(minePool >= amount)

IRs:
TMP_338(bool) = minePool >= amount
TMP_339(None) = SOLIDITY_CALL require(bool)(TMP_338)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
minePool = safeSub(minePool,amount)

IRs:
TMP_340(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(minePool,amount)
minePool(uint256) := TMP_340(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[receiver] = safeAdd(balances[receiver],amount)

IRs:
REF_235(uint256) -> balances[receiver]
REF_236(uint256) -> balances[receiver]
TMP_341(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_236,amount)
REF_235(uint256) (->balances) := TMP_341(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),receiver,amount)

IRs:
TMP_342 = CONVERT 0 to address
Emit Transfer(TMP_342,receiver,amount)"];
}
// Function: 1036.sol-Anno-allowance(address,address)
digraph{
}
// Function: 1036.sol-Anno-approve(address,uint256)
digraph{
}
// Function: 1036.sol-Anno-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(freezed[msg.sender] != true)

IRs:
REF_231(bool) -> freezed[msg.sender]
TMP_333(bool) = REF_231 != True
TMP_334(None) = SOLIDITY_CALL require(bool)(TMP_333)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_232(mapping(address => uint256)) -> allowed[msg.sender]
REF_233(uint256) -> REF_232[spender]
REF_233(uint256) (->allowed) := tokens(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ApproveAndCallFallBack(spender).receiveApproval(msg.sender,tokens,this,data)

IRs:
TMP_336 = CONVERT spender to ApproveAndCallFallBack
HIGH_LEVEL_CALL, dest:TMP_336(ApproveAndCallFallBack), function:receiveApproval, arguments:['msg.sender', 'tokens', 'this', 'data']  "];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1036.sol-Anno-balanceOf(address)
digraph{
}
// Function: 1036.sol-Anno-boardMemberApply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_level > 0 && _level <= 4)

IRs:
TMP_487(bool) = _level > 0
TMP_488(bool) = _level <= 4
TMP_489(bool) = TMP_487 && TMP_488
TMP_490(None) = SOLIDITY_CALL require(bool)(TMP_489)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(medalBalances[msg.sender] >= boardMember[_level])

IRs:
REF_343(uint256) -> medalBalances[msg.sender]
REF_344(uint256) -> boardMember[_level]
TMP_491(bool) = REF_343 >= REF_344
TMP_492(None) = SOLIDITY_CALL require(bool)(TMP_491)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_medalFreeze(boardMember[_level])

IRs:
REF_345(uint256) -> boardMember[_level]
INTERNAL_CALL, AnnoMedal._medalFreeze(uint256)(REF_345)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
MemberToLevel[msg.sender] = _level

IRs:
REF_346(uint256) -> MemberToLevel[msg.sender]
REF_346(uint256) (->MemberToLevel) := _level(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
MemberToTime[msg.sender] == 0

IRs:
REF_347(uint256) -> MemberToTime[msg.sender]
TMP_494(bool) = REF_347 == 0
CONDITION TMP_494"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
MemberToTime[msg.sender] = uint256(now)

IRs:
REF_348(uint256) -> MemberToTime[msg.sender]
TMP_495 = CONVERT now to uint256
REF_348(uint256) (->MemberToTime) := TMP_495(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
MembershipUpdate(msg.sender,_level)

IRs:
Emit MembershipUpdate(msg.sender,_level)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
9->1;
}
// Function: 1036.sol-Anno-boardMemberCancel()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(MemberToLevel[msg.sender] > 0)

IRs:
REF_352(uint256) -> MemberToLevel[msg.sender]
TMP_502(bool) = REF_352 > 0
TMP_503(None) = SOLIDITY_CALL require(bool)(TMP_502)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_medalUnFreeze(boardMember[MemberToLevel[msg.sender]])

IRs:
REF_353(uint256) -> MemberToLevel[msg.sender]
REF_354(uint256) -> boardMember[REF_353]
INTERNAL_CALL, AnnoMedal._medalUnFreeze(uint256)(REF_354)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
MemberToLevel[msg.sender] = 0

IRs:
REF_355(uint256) -> MemberToLevel[msg.sender]
REF_355(uint256) (->MemberToLevel) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
MembershipCancel(msg.sender)

IRs:
Emit MembershipCancel(msg.sender)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
5->1;
}
// Function: 1036.sol-Anno-burnMedal(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
medalBalances[msg.sender] = safeSub(medalBalances[msg.sender],amount)

IRs:
REF_318(uint256) -> medalBalances[msg.sender]
REF_319(uint256) -> medalBalances[msg.sender]
TMP_434(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_319,amount)
REF_318(uint256) (->medalBalances) := TMP_434(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_medalTotalSupply = safeSub(_medalTotalSupply,amount)

IRs:
TMP_435(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(_medalTotalSupply,amount)
_medalTotalSupply(uint256) := TMP_435(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
3->1;
}
// Function: 1036.sol-Anno-cancelTrade(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
anno = annoTrades[_tradeId]

IRs:
REF_370(Anno.AnnoTrade) -> annoTrades[_tradeId]
anno(Anno.AnnoTrade) := REF_370(Anno.AnnoTrade)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(anno.seller == msg.sender)

IRs:
REF_371(address) -> anno.seller
TMP_526(bool) = REF_371 == msg.sender
TMP_527(None) = SOLIDITY_CALL require(bool)(TMP_526)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
anno.ifMedal

IRs:
REF_372(bool) -> anno.ifMedal
CONDITION REF_372"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medalBalances[msg.sender] = safeAdd(medalBalances[msg.sender],anno.medal)

IRs:
REF_373(uint256) -> medalBalances[msg.sender]
REF_374(uint256) -> medalBalances[msg.sender]
REF_375(uint256) -> anno.medal
TMP_528(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_374,REF_375)
REF_373(uint256) (->medalBalances) := TMP_528(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
MemberToMedal[msg.sender] = 0

IRs:
REF_376(uint256) -> MemberToMedal[msg.sender]
REF_376(uint256) (->MemberToMedal) := 0(uint256)"];
5->8;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[msg.sender] = safeAdd(balances[msg.sender],anno.token)

IRs:
REF_377(uint256) -> balances[msg.sender]
REF_378(uint256) -> balances[msg.sender]
REF_379(uint256) -> anno.token
TMP_529(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_378,REF_379)
REF_377(uint256) (->balances) := TMP_529(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
MemberToToken[msg.sender] = 0

IRs:
REF_380(uint256) -> MemberToToken[msg.sender]
REF_380(uint256) (->MemberToToken) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
delete annoTrades[_tradeId]

IRs:
REF_381(Anno.AnnoTrade) -> annoTrades[_tradeId]
annoTrades = delete REF_381 "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
TradeCancel(_tradeId)

IRs:
Emit TradeCancel(_tradeId)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
11->1;
}
// Function: 1036.sol-Anno-createAnnoTrade(bool,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: IF 1

EXPRESSION:
_ifMedal

IRs:
CONDITION _ifMedal"];
1->2[label="True"];
1->9[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(medalBalances[msg.sender] >= _medal)

IRs:
REF_356(uint256) -> medalBalances[msg.sender]
TMP_507(bool) = REF_356 >= _medal
TMP_508(None) = SOLIDITY_CALL require(bool)(TMP_507)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalBalances[msg.sender] = safeSub(medalBalances[msg.sender],_medal)

IRs:
REF_357(uint256) -> medalBalances[msg.sender]
REF_358(uint256) -> medalBalances[msg.sender]
TMP_509(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_358,_medal)
REF_357(uint256) (->medalBalances) := TMP_509(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
MemberToMedal[msg.sender] = _medal

IRs:
REF_359(uint256) -> MemberToMedal[msg.sender]
REF_359(uint256) (->MemberToMedal) := _medal(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
anno = AnnoTrade({seller:msg.sender,ifMedal:_ifMedal,medal:_medal,token:_token})

IRs:
TMP_510(Anno.AnnoTrade) = new AnnoTrade(msg.sender,_ifMedal,_medal,_token)
anno(Anno.AnnoTrade) := TMP_510(Anno.AnnoTrade)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
newMedalTradeId = annoTrades.push(anno) - 1

IRs:
REF_361 -> LENGTH annoTrades
TMP_513(uint256) := REF_361(uint256)
TMP_514(uint256) = TMP_513 + 1
REF_361(uint256) (->annoTrades) := TMP_514(uint256)
REF_362(Anno.AnnoTrade) -> annoTrades[TMP_513]
REF_362(Anno.AnnoTrade) (->annoTrades) := anno(Anno.AnnoTrade)
TMP_512(None) = TMP_511 - 1
newMedalTradeId(uint256) := TMP_512(None)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
AnnoTradeCreated(newMedalTradeId,_ifMedal,_medal,_token)

IRs:
Emit AnnoTradeCreated(newMedalTradeId,_ifMedal,_medal,_token)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
newMedalTradeId

IRs:
RETURN newMedalTradeId"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(balances[msg.sender] >= _token)

IRs:
REF_363(uint256) -> balances[msg.sender]
TMP_516(bool) = REF_363 >= _token
TMP_517(None) = SOLIDITY_CALL require(bool)(TMP_516)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_token)

IRs:
REF_364(uint256) -> balances[msg.sender]
REF_365(uint256) -> balances[msg.sender]
TMP_518(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_365,_token)
REF_364(uint256) (->balances) := TMP_518(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
MemberToToken[msg.sender] = _token

IRs:
REF_366(uint256) -> MemberToToken[msg.sender]
REF_366(uint256) (->MemberToToken) := _token(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
_anno = AnnoTrade({seller:msg.sender,ifMedal:_ifMedal,medal:_medal,token:_token})

IRs:
TMP_519(Anno.AnnoTrade) = new AnnoTrade(msg.sender,_ifMedal,_medal,_token)
_anno(Anno.AnnoTrade) := TMP_519(Anno.AnnoTrade)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
newTokenTradeId = annoTrades.push(_anno) - 1

IRs:
REF_368 -> LENGTH annoTrades
TMP_522(uint256) := REF_368(uint256)
TMP_523(uint256) = TMP_522 + 1
REF_368(uint256) (->annoTrades) := TMP_523(uint256)
REF_369(Anno.AnnoTrade) -> annoTrades[TMP_522]
REF_369(Anno.AnnoTrade) (->annoTrades) := _anno(Anno.AnnoTrade)
TMP_521(None) = TMP_520 - 1
newTokenTradeId(uint256) := TMP_521(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
AnnoTradeCreated(newTokenTradeId,_ifMedal,_medal,_token)

IRs:
Emit AnnoTradeCreated(newTokenTradeId,_ifMedal,_medal,_token)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
newTokenTradeId

IRs:
RETURN newTokenTradeId"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
17->1;
}
// Function: 1036.sol-Anno-createPartner(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_Partner = Partner({admin:_partner,tokenPool:_amount,singleTrans:_singleTrans,timestamp:uint256(now),durance:_durance})

IRs:
TMP_362 = CONVERT now to uint256
TMP_363(AnnoToken.Partner) = new Partner(_partner,_amount,_singleTrans,TMP_362,_durance)
_Partner(AnnoToken.Partner) := TMP_363(AnnoToken.Partner)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newPartnerId = partners.push(_Partner) - 1

IRs:
REF_251 -> LENGTH partners
TMP_366(uint256) := REF_251(uint256)
TMP_367(uint256) = TMP_366 + 1
REF_251(uint256) (->partners) := TMP_367(uint256)
REF_252(AnnoToken.Partner) -> partners[TMP_366]
REF_252(AnnoToken.Partner) (->partners) := _Partner(AnnoToken.Partner)
TMP_365(None) = TMP_364 - 1
newPartnerId(uint256) := TMP_365(None)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
PartnerCreated(newPartnerId,_partner,_amount,_singleTrans,_durance)

IRs:
Emit PartnerCreated(newPartnerId,_partner,_amount,_singleTrans,_durance)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
newPartnerId

IRs:
RETURN newPartnerId"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
5->1;
}
// Function: 1036.sol-Anno-createVip(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_Vip = Vip({vip:_vip,durance:uint256(now) + _durance,frequence:_frequence,salary:_salary,timestamp:now + _frequence})

IRs:
TMP_392 = CONVERT now to uint256
TMP_393(uint256) = TMP_392 + _durance
TMP_394(uint256) = now + _frequence
TMP_395(AnnoToken.Vip) = new Vip(_vip,TMP_393,_frequence,_salary,TMP_394)
_Vip(AnnoToken.Vip) := TMP_395(AnnoToken.Vip)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newVipId = vips.push(_Vip) - 1

IRs:
REF_280 -> LENGTH vips
TMP_398(uint256) := REF_280(uint256)
TMP_399(uint256) = TMP_398 + 1
REF_280(uint256) (->vips) := TMP_399(uint256)
REF_281(AnnoToken.Vip) -> vips[TMP_398]
REF_281(AnnoToken.Vip) (->vips) := _Vip(AnnoToken.Vip)
TMP_397(None) = TMP_396 - 1
newVipId(uint256) := TMP_397(None)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
VipAgreementSign(newVipId,_vip,_durance,_frequence,_salary)

IRs:
Emit VipAgreementSign(newVipId,_vip,_durance,_frequence,_salary)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
newVipId

IRs:
RETURN newVipId"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
5->1;
}
// Function: 1036.sol-Anno-deleteVip(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete vips[_vipId]

IRs:
REF_291(AnnoToken.Vip) -> vips[_vipId]
vips = delete REF_291 "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
2->1;
}
// Function: 1036.sol-Anno-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1036.sol-Anno-freeze(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[user] >= amount)

IRs:
REF_239(uint256) -> balances[user]
TMP_350(bool) = REF_239 >= amount
TMP_351(None) = SOLIDITY_CALL require(bool)(TMP_350)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
freezed[user] = true

IRs:
REF_240(bool) -> freezed[user]
REF_240(bool) (->freezed) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
unlockTime[user] = uint256(now) + period

IRs:
REF_241(uint256) -> unlockTime[user]
TMP_352 = CONVERT now to uint256
TMP_353(uint256) = TMP_352 + period
REF_241(uint256) (->unlockTime) := TMP_353(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
freezeAmount[user] = amount

IRs:
REF_242(uint256) -> freezeAmount[user]
REF_242(uint256) (->freezeAmount) := amount(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
5->1;
}
// Function: 1036.sol-Anno-getBoardMember(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
level = MemberToLevel[_member]

IRs:
REF_349(uint256) -> MemberToLevel[_member]
level(uint256) := REF_349(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
MemberToTime[_member] > uint256(now)

IRs:
REF_350(uint256) -> MemberToTime[_member]
TMP_498 = CONVERT now to uint256
TMP_499(bool) = REF_350 > TMP_498
CONDITION TMP_499"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
timeLeft = safeSub(MemberToTime[_member],uint256(now))

IRs:
REF_351(uint256) -> MemberToTime[_member]
TMP_500 = CONVERT now to uint256
TMP_501(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_351,TMP_500)
timeLeft(uint256) := TMP_501(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
timeLeft = 0

IRs:
timeLeft(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(level,timeLeft)

IRs:
RETURN level,timeLeft"];
}
// Function: 1036.sol-Anno-getPartnerInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_Partner = partners[_partnerId]

IRs:
REF_267(AnnoToken.Partner) -> partners[_partnerId]
_Partner(AnnoToken.Partner) := REF_267(AnnoToken.Partner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = _Partner.admin

IRs:
REF_268(address) -> _Partner.admin
admin(address) := REF_268(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenPool = _Partner.tokenPool

IRs:
REF_269(uint256) -> _Partner.tokenPool
tokenPool(uint256) := REF_269(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_Partner.timestamp + _Partner.durance > uint256(now)

IRs:
REF_270(uint256) -> _Partner.timestamp
REF_271(uint256) -> _Partner.durance
TMP_386(uint256) = REF_270 + REF_271
TMP_387 = CONVERT now to uint256
TMP_388(bool) = TMP_386 > TMP_387
CONDITION TMP_388"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
timeLeft = _Partner.timestamp + _Partner.durance - uint256(now)

IRs:
REF_272(uint256) -> _Partner.timestamp
REF_273(uint256) -> _Partner.durance
TMP_389(uint256) = REF_272 + REF_273
TMP_390 = CONVERT now to uint256
TMP_391(uint256) = TMP_389 - TMP_390
timeLeft(uint256) := TMP_391(uint256)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
timeLeft = 0

IRs:
timeLeft(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(admin,tokenPool,timeLeft)

IRs:
RETURN admin,tokenPool,timeLeft"];
}
// Function: 1036.sol-Anno-getPosterInfo(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_Poster = PartnerIdToPosterList[_partnerId][_posterId]

IRs:
REF_274(AnnoToken.Poster[]) -> PartnerIdToPosterList[_partnerId]
REF_275(AnnoToken.Poster) -> REF_274[_posterId]
_Poster(AnnoToken.Poster) := REF_275(AnnoToken.Poster)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
poster = _Poster.poster

IRs:
REF_276(address) -> _Poster.poster
poster(address) := REF_276(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
hashData = _Poster.hashData

IRs:
REF_277(bytes32) -> _Poster.hashData
hashData(bytes32) := REF_277(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reward = _Poster.reward

IRs:
REF_278(uint256) -> _Poster.reward
reward(uint256) := REF_278(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(poster,hashData,reward)

IRs:
RETURN poster,hashData,reward"];
}
// Function: 1036.sol-Anno-getTrade(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_anno = annoTrades[_tradeId]

IRs:
REF_420(Anno.AnnoTrade) -> annoTrades[_tradeId]
_anno(Anno.AnnoTrade) := REF_420(Anno.AnnoTrade)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
seller = _anno.seller

IRs:
REF_421(address) -> _anno.seller
seller(address) := REF_421(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ifMedal = _anno.ifMedal

IRs:
REF_422(bool) -> _anno.ifMedal
ifMedal(bool) := REF_422(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medal = _anno.medal

IRs:
REF_423(uint256) -> _anno.medal
medal(uint256) := REF_423(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
token = _anno.token

IRs:
REF_424(uint256) -> _anno.token
token(uint256) := REF_424(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(seller,ifMedal,medal,token)

IRs:
RETURN seller,ifMedal,medal,token"];
}
// Function: 1036.sol-Anno-getVipInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_Vip = vips[_vipId]

IRs:
REF_292(AnnoToken.Vip) -> vips[_vipId]
_Vip(AnnoToken.Vip) := REF_292(AnnoToken.Vip)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vip = _Vip.vip

IRs:
REF_293(address) -> _Vip.vip
vip(address) := REF_293(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
durance = _Vip.durance

IRs:
REF_294(uint256) -> _Vip.durance
durance(uint256) := REF_294(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
frequence = _Vip.frequence

IRs:
REF_295(uint256) -> _Vip.frequence
frequence(uint256) := REF_295(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
salary = _Vip.salary

IRs:
REF_296(uint256) -> _Vip.salary
salary(uint256) := REF_296(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_Vip.timestamp >= uint256(now)

IRs:
REF_297(uint256) -> _Vip.timestamp
TMP_408 = CONVERT now to uint256
TMP_409(bool) = REF_297 >= TMP_408
CONDITION TMP_409"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
nextSalary = safeSub(_Vip.timestamp,uint256(now))

IRs:
REF_298(uint256) -> _Vip.timestamp
TMP_410 = CONVERT now to uint256
TMP_411(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_298,TMP_410)
nextSalary(uint256) := TMP_411(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
log = Please Wait

IRs:
log(string) := Please Wait(string)"];
8->11;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
nextSalary = 0

IRs:
nextSalary(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
log = Pick Up Your Salary Now

IRs:
log(string) := Pick Up Your Salary Now(string)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(vip,durance,frequence,salary,nextSalary,log)

IRs:
RETURN vip,durance,frequence,salary,nextSalary,log"];
}
// Function: 1036.sol-Anno-ifFreeze(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
check = freezed[user]

IRs:
REF_247(bool) -> freezed[user]
check(bool) := REF_247(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
amount = freezeAmount[user]

IRs:
REF_248(uint256) -> freezeAmount[user]
amount(uint256) := REF_248(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
timeLeft = unlockTime[user] - uint256(now)

IRs:
REF_249(uint256) -> unlockTime[user]
TMP_360 = CONVERT now to uint256
TMP_361(uint256) = REF_249 - TMP_360
timeLeft(uint256) := TMP_361(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(check,amount,timeLeft)

IRs:
RETURN check,amount,timeLeft"];
}
// Function: 1036.sol-Anno-medalBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
medalBalances[tokenOwner]

IRs:
REF_302(uint256) -> medalBalances[tokenOwner]
RETURN REF_302"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1036.sol-Anno-medalFreeze(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(medalBalances[user] >= amount)

IRs:
REF_320(uint256) -> medalBalances[user]
TMP_437(bool) = REF_320 >= amount
TMP_438(None) = SOLIDITY_CALL require(bool)(TMP_437)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
medalFreezed[user] = true

IRs:
REF_321(bool) -> medalFreezed[user]
REF_321(bool) (->medalFreezed) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalUnlockTime[user] = uint256(now) + period

IRs:
REF_322(uint256) -> medalUnlockTime[user]
TMP_439 = CONVERT now to uint256
TMP_440(uint256) = TMP_439 + period
REF_322(uint256) (->medalUnlockTime) := TMP_440(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medalFreezeAmount[user] = amount

IRs:
REF_323(uint256) -> medalFreezeAmount[user]
REF_323(uint256) (->medalFreezeAmount) := amount(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
5->1;
}
// Function: 1036.sol-Anno-medalIfFreeze(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
check = medalFreezed[user]

IRs:
REF_338(bool) -> medalFreezed[user]
check(bool) := REF_338(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
amount = medalFreezeAmount[user]

IRs:
REF_339(uint256) -> medalFreezeAmount[user]
amount(uint256) := REF_339(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
timeLeft = medalUnlockTime[user] - uint256(now)

IRs:
REF_340(uint256) -> medalUnlockTime[user]
TMP_457 = CONVERT now to uint256
TMP_458(uint256) = REF_340 - TMP_457
timeLeft(uint256) := TMP_458(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(check,amount,timeLeft)

IRs:
RETURN check,amount,timeLeft"];
}
// Function: 1036.sol-Anno-medalTotalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_medalTotalSupply - medalBalances[address(0)]

IRs:
TMP_417 = CONVERT 0 to address
REF_301(uint256) -> medalBalances[TMP_417]
TMP_418(uint256) = _medalTotalSupply - REF_301
RETURN TMP_418"];
}
// Function: 1036.sol-Anno-medalTransfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: IF 1

EXPRESSION:
medalFreezed[msg.sender] == false

IRs:
REF_303(bool) -> medalFreezed[msg.sender]
TMP_419(bool) = REF_303 == False
CONDITION TMP_419"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
medalBalances[msg.sender] = safeSub(medalBalances[msg.sender],tokens)

IRs:
REF_304(uint256) -> medalBalances[msg.sender]
REF_305(uint256) -> medalBalances[msg.sender]
TMP_420(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_305,tokens)
REF_304(uint256) (->medalBalances) := TMP_420(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalBalances[to] = safeAdd(medalBalances[to],tokens)

IRs:
REF_306(uint256) -> medalBalances[to]
REF_307(uint256) -> medalBalances[to]
TMP_421(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_307,tokens)
REF_306(uint256) (->medalBalances) := TMP_421(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
MedalTransfer(msg.sender,to,tokens)

IRs:
Emit MedalTransfer(msg.sender,to,tokens)"];
4->11;
5[label="Node Type: IF 5

EXPRESSION:
medalBalances[msg.sender] > medalFreezeAmount[msg.sender]

IRs:
REF_308(uint256) -> medalBalances[msg.sender]
REF_309(uint256) -> medalFreezeAmount[msg.sender]
TMP_423(bool) = REF_308 > REF_309
CONDITION TMP_423"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(tokens <= safeSub(medalBalances[msg.sender],medalFreezeAmount[msg.sender]))

IRs:
REF_310(uint256) -> medalBalances[msg.sender]
REF_311(uint256) -> medalFreezeAmount[msg.sender]
TMP_424(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_310,REF_311)
TMP_425(bool) = tokens <= TMP_424
TMP_426(None) = SOLIDITY_CALL require(bool)(TMP_425)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
medalBalances[msg.sender] = safeSub(medalBalances[msg.sender],tokens)

IRs:
REF_312(uint256) -> medalBalances[msg.sender]
REF_313(uint256) -> medalBalances[msg.sender]
TMP_427(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_313,tokens)
REF_312(uint256) (->medalBalances) := TMP_427(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
medalBalances[to] = safeAdd(medalBalances[to],tokens)

IRs:
REF_314(uint256) -> medalBalances[to]
REF_315(uint256) -> medalBalances[to]
TMP_428(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_315,tokens)
REF_314(uint256) (->medalBalances) := TMP_428(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
MedalTransfer(msg.sender,to,tokens)

IRs:
Emit MedalTransfer(msg.sender,to,tokens)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
true

IRs:
RETURN True"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
13->1;
14[label="Node Type: RETURN 14

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1036.sol-Anno-medalUnFreeze()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(medalFreezed[msg.sender] == true)

IRs:
REF_329(bool) -> medalFreezed[msg.sender]
TMP_448(bool) = REF_329 == True
TMP_449(None) = SOLIDITY_CALL require(bool)(TMP_448)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(medalUnlockTime[msg.sender] < uint256(now))

IRs:
REF_330(uint256) -> medalUnlockTime[msg.sender]
TMP_450 = CONVERT now to uint256
TMP_451(bool) = REF_330 < TMP_450
TMP_452(None) = SOLIDITY_CALL require(bool)(TMP_451)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalFreezed[msg.sender] = false

IRs:
REF_331(bool) -> medalFreezed[msg.sender]
REF_331(bool) (->medalFreezed) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medalFreezeAmount[msg.sender] = 0

IRs:
REF_332(uint256) -> medalFreezeAmount[msg.sender]
REF_332(uint256) (->medalFreezeAmount) := 0(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
5->1;
}
// Function: 1036.sol-Anno-mine()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
level = MemberToLevel[msg.sender]

IRs:
REF_406(uint256) -> MemberToLevel[msg.sender]
level(uint256) := REF_406(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(MemberToTime[msg.sender] < uint256(now))

IRs:
REF_407(uint256) -> MemberToTime[msg.sender]
TMP_539 = CONVERT now to uint256
TMP_540(bool) = REF_407 < TMP_539
TMP_541(None) = SOLIDITY_CALL require(bool)(TMP_540)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(level > 0)

IRs:
TMP_542(bool) = level > 0
TMP_543(None) = SOLIDITY_CALL require(bool)(TMP_542)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_mint(salary[level],msg.sender)

IRs:
REF_408(uint256) -> salary[level]
INTERNAL_CALL, AnnoToken._mint(uint256,address)(REF_408,msg.sender)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
MemberToTime[msg.sender] = safeAdd(MemberToTime[msg.sender],period)

IRs:
REF_409(uint256) -> MemberToTime[msg.sender]
REF_410(uint256) -> MemberToTime[msg.sender]
TMP_545(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_410,period)
REF_409(uint256) (->MemberToTime) := TMP_545(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Mine(msg.sender,salary[level])

IRs:
REF_411(uint256) -> salary[level]
Emit Mine(msg.sender,REF_411)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
7->1;
}
// Function: 1036.sol-Anno-mineSalary(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_Vip = vips[_vipId]

IRs:
REF_282(AnnoToken.Vip) -> vips[_vipId]
_Vip(AnnoToken.Vip) := REF_282(AnnoToken.Vip)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_mint(_Vip.salary,_Vip.vip)

IRs:
REF_283(uint256) -> _Vip.salary
REF_284(address) -> _Vip.vip
INTERNAL_CALL, AnnoToken._mint(uint256,address)(REF_283,REF_284)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_Vip.timestamp = safeAdd(_Vip.timestamp,_Vip.frequence)

IRs:
REF_285(uint256) -> _Vip.timestamp
REF_286(uint256) -> _Vip.timestamp
REF_287(uint256) -> _Vip.frequence
TMP_403(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_286,REF_287)
REF_285(uint256) (->_Vip) := TMP_403(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
SalaryReceived(_vipId,_Vip.vip,_Vip.salary,_Vip.timestamp)

IRs:
REF_288(address) -> _Vip.vip
REF_289(uint256) -> _Vip.salary
REF_290(uint256) -> _Vip.timestamp
Emit SalaryReceived(_vipId,REF_288,REF_289,REF_290)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyVip(_vipId)

IRs:
MODIFIER_CALL, AnnoToken.onlyVip(uint256)(_vipId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
7->1;
}
// Function: 1036.sol-Anno-mint(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(minePool >= amount)

IRs:
TMP_344(bool) = minePool >= amount
TMP_345(None) = SOLIDITY_CALL require(bool)(TMP_344)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
minePool = safeSub(minePool,amount)

IRs:
TMP_346(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(minePool,amount)
minePool(uint256) := TMP_346(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = safeAdd(balances[msg.sender],amount)

IRs:
REF_237(uint256) -> balances[msg.sender]
REF_238(uint256) -> balances[msg.sender]
TMP_347(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_238,amount)
REF_237(uint256) (->balances) := TMP_347(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = safeAdd(_totalSupply,amount)

IRs:
TMP_348(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(_totalSupply,amount)
_totalSupply(uint256) := TMP_348(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
5->1;
}
// Function: 1036.sol-Anno-mintMedal(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
medalBalances[msg.sender] = safeAdd(medalBalances[msg.sender],amount)

IRs:
REF_316(uint256) -> medalBalances[msg.sender]
REF_317(uint256) -> medalBalances[msg.sender]
TMP_431(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_317,amount)
REF_316(uint256) (->medalBalances) := TMP_431(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_medalTotalSupply = safeAdd(_medalTotalSupply,amount)

IRs:
TMP_432(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(_medalTotalSupply,amount)
_medalTotalSupply(uint256) := TMP_432(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
3->1;
}
// Function: 1036.sol-Anno-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == adminAddress)

IRs:
TMP_565(bool) = msg.sender == adminAddress
TMP_566(None) = SOLIDITY_CALL require(bool)(TMP_565)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1036.sol-Anno-onlyPartner(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(partners[_partnerId].admin == msg.sender)

IRs:
REF_425(AnnoToken.Partner) -> partners[_partnerId]
REF_426(address) -> REF_425.admin
TMP_551(bool) = REF_426 == msg.sender
TMP_552(None) = SOLIDITY_CALL require(bool)(TMP_551)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(partners[_partnerId].tokenPool > uint256(0))

IRs:
REF_427(AnnoToken.Partner) -> partners[_partnerId]
REF_428(uint256) -> REF_427.tokenPool
TMP_553 = CONVERT 0 to uint256
TMP_554(bool) = REF_428 > TMP_553
TMP_555(None) = SOLIDITY_CALL require(bool)(TMP_554)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
deadline = safeAdd(partners[_partnerId].timestamp,partners[_partnerId].durance)

IRs:
REF_429(AnnoToken.Partner) -> partners[_partnerId]
REF_430(uint256) -> REF_429.timestamp
REF_431(AnnoToken.Partner) -> partners[_partnerId]
REF_432(uint256) -> REF_431.durance
TMP_556(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_430,REF_432)
deadline(uint256) := TMP_556(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(deadline > now)

IRs:
TMP_557(bool) = deadline > now
TMP_558(None) = SOLIDITY_CALL require(bool)(TMP_557)"];
4->5;
5[label="Node Type: _ 5
"];
}
// Function: 1036.sol-Anno-onlyVip(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(vips[_vipId].vip == msg.sender)

IRs:
REF_433(AnnoToken.Vip) -> vips[_vipId]
REF_434(address) -> REF_433.vip
TMP_559(bool) = REF_434 == msg.sender
TMP_560(None) = SOLIDITY_CALL require(bool)(TMP_559)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(vips[_vipId].durance > now)

IRs:
REF_435(AnnoToken.Vip) -> vips[_vipId]
REF_436(uint256) -> REF_435.durance
TMP_561(bool) = REF_436 > now
TMP_562(None) = SOLIDITY_CALL require(bool)(TMP_561)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(vips[_vipId].timestamp < now)

IRs:
REF_437(AnnoToken.Vip) -> vips[_vipId]
REF_438(uint256) -> REF_437.timestamp
TMP_563(bool) = REF_438 < now
TMP_564(None) = SOLIDITY_CALL require(bool)(TMP_563)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1036.sol-Anno-partnerTransfer(uint256,bytes32,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount <= partners[_partnerId].singleTrans)

IRs:
REF_253(AnnoToken.Partner) -> partners[_partnerId]
REF_254(uint256) -> REF_253.singleTrans
TMP_370(bool) = _amount <= REF_254
TMP_371(None) = SOLIDITY_CALL require(bool)(TMP_370)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
partners[_partnerId].tokenPool = safeSub(partners[_partnerId].tokenPool,_amount)

IRs:
REF_255(AnnoToken.Partner) -> partners[_partnerId]
REF_256(uint256) -> REF_255.tokenPool
REF_257(AnnoToken.Partner) -> partners[_partnerId]
REF_258(uint256) -> REF_257.tokenPool
TMP_372(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_258,_amount)
REF_256(uint256) (->partners) := TMP_372(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_Poster = Poster({poster:_to,hashData:_data,reward:_amount})

IRs:
TMP_373(AnnoToken.Poster) = new Poster(_to,_data,_amount)
_Poster(AnnoToken.Poster) := TMP_373(AnnoToken.Poster)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
newPostId = PartnerIdToPosterList[_partnerId].push(_Poster) - 1

IRs:
REF_259(AnnoToken.Poster[]) -> PartnerIdToPosterList[_partnerId]
REF_261 -> LENGTH REF_259
TMP_376(uint256) := REF_261(uint256)
TMP_377(uint256) = TMP_376 + 1
REF_261(uint256) (->PartnerIdToPosterList) := TMP_377(uint256)
REF_262(AnnoToken.Poster) -> REF_259[TMP_376]
REF_262(AnnoToken.Poster) (->PartnerIdToPosterList) := _Poster(AnnoToken.Poster)
TMP_375(None) = TMP_374 - 1
newPostId(uint256) := TMP_375(None)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_mint(_amount,_to)

IRs:
INTERNAL_CALL, AnnoToken._mint(uint256,address)(_amount,_to)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
RewardDistribute(newPostId,_partnerId,_to,_amount)

IRs:
Emit RewardDistribute(newPostId,_partnerId,_to,_amount)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyPartner(_partnerId)

IRs:
MODIFIER_CALL, AnnoToken.onlyPartner(uint256)(_partnerId)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
9->1;
}
// Function: 1036.sol-Anno-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
5->1;
}
// Function: 1036.sol-Anno-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_459(uint256) = a + b
c(uint256) := TMP_459(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_460(bool) = c >= a
TMP_461(None) = SOLIDITY_CALL require(bool)(TMP_460)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-Anno-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_471(bool) = b > 0
TMP_472(None) = SOLIDITY_CALL require(bool)(TMP_471)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_473(uint256) = a / b
c(uint256) := TMP_473(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-Anno-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_465(uint256) = a * b
c(uint256) := TMP_465(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_466(bool) = a == 0
TMP_467(uint256) = c / a
TMP_468(bool) = TMP_467 == b
TMP_469(bool) = TMP_466 || TMP_468
TMP_470(None) = SOLIDITY_CALL require(bool)(TMP_469)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-Anno-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_462(bool) = b <= a
TMP_463(None) = SOLIDITY_CALL require(bool)(TMP_462)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_464(uint256) = a - b
c(uint256) := TMP_464(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-Anno-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newAdmin != address(0))

IRs:
TMP_474 = CONVERT 0 to address
TMP_475(bool) = _newAdmin != TMP_474
TMP_476(None) = SOLIDITY_CALL require(bool)(TMP_475)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AdminTransferred(adminAddress,_newAdmin)

IRs:
Emit AdminTransferred(adminAddress,_newAdmin)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
adminAddress = _newAdmin

IRs:
adminAddress(address) := _newAdmin(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
4->1;
}
// Function: 1036.sol-Anno-setBoardMember(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
boardMember[1] = one

IRs:
REF_412(uint256) -> boardMember[1]
REF_412(uint256) (->boardMember) := one(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
boardMember[2] = two

IRs:
REF_413(uint256) -> boardMember[2]
REF_413(uint256) (->boardMember) := two(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
boardMember[3] = three

IRs:
REF_414(uint256) -> boardMember[3]
REF_414(uint256) (->boardMember) := three(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
boardMember[4] = four

IRs:
REF_415(uint256) -> boardMember[4]
REF_415(uint256) (->boardMember) := four(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
5->1;
}
// Function: 1036.sol-Anno-setPartnerDurance(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
partners[_partnerId].durance = uint256(now) + _durance

IRs:
REF_265(AnnoToken.Partner) -> partners[_partnerId]
REF_266(uint256) -> REF_265.durance
TMP_383 = CONVERT now to uint256
TMP_384(uint256) = TMP_383 + _durance
REF_266(uint256) (->partners) := TMP_384(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
2->1;
}
// Function: 1036.sol-Anno-setPartnerPool(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
partners[_partnerId].tokenPool = _amount

IRs:
REF_263(AnnoToken.Partner) -> partners[_partnerId]
REF_264(uint256) -> REF_263.tokenPool
REF_264(uint256) (->partners) := _amount(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
2->1;
}
// Function: 1036.sol-Anno-setPeriod(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
period = time

IRs:
period(uint256) := time(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
2->1;
}
// Function: 1036.sol-Anno-setSalary(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
salary[1] = one

IRs:
REF_416(uint256) -> salary[1]
REF_416(uint256) (->salary) := one(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
salary[2] = two

IRs:
REF_417(uint256) -> salary[2]
REF_417(uint256) (->salary) := two(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
salary[3] = three

IRs:
REF_418(uint256) -> salary[3]
REF_418(uint256) (->salary) := three(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
salary[4] = four

IRs:
REF_419(uint256) -> salary[4]
REF_419(uint256) (->salary) := four(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
5->1;
}
// Function: 1036.sol-Anno-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
adminAddress = 0xbd74Dec00Af1E745A21d5130928CD610BE963027

IRs:
adminAddress(address) := 1081605546404974836213712594752196472130749476903(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
oneEth = 1000000000000000000

IRs:
oneEth(uint256) := 1000000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
period = 1209600

IRs:
period(uint256) := 1209600(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
boardMember = (0,500,2500,25000,50000)

IRs:
boardMember(uint256[5]) = ['0(uint256)', '500(uint256)', '2500(uint256)', '25000(uint256)', '50000(uint256)']"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
salary = (0,1151000000000000000000,5753000000000000000000,57534000000000000000000,115068000000000000000000)

IRs:
salary(uint256[5]) = ['0(uint256)', '1151000000000000000000(uint256)', '5753000000000000000000(uint256)', '57534000000000000000000(uint256)', '115068000000000000000000(uint256)']"];
}
// Function: 1036.sol-Anno-totalSupply()
digraph{
}
// Function: 1036.sol-Anno-trade(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
anno = annoTrades[_tradeId]

IRs:
REF_382(Anno.AnnoTrade) -> annoTrades[_tradeId]
anno(Anno.AnnoTrade) := REF_382(Anno.AnnoTrade)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
anno.ifMedal

IRs:
REF_383(bool) -> anno.ifMedal
CONDITION REF_383"];
2->3[label="True"];
2->8[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalBalances[msg.sender] = safeAdd(medalBalances[msg.sender],anno.medal)

IRs:
REF_384(uint256) -> medalBalances[msg.sender]
REF_385(uint256) -> medalBalances[msg.sender]
REF_386(uint256) -> anno.medal
TMP_532(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_385,REF_386)
REF_384(uint256) (->medalBalances) := TMP_532(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
MemberToMedal[anno.seller] = 0

IRs:
REF_387(address) -> anno.seller
REF_388(uint256) -> MemberToMedal[REF_387]
REF_388(uint256) (->MemberToMedal) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
transfer(anno.seller,anno.token)

IRs:
REF_389(address) -> anno.seller
REF_390(uint256) -> anno.token
TMP_533(bool) = INTERNAL_CALL, AnnoToken.transfer(address,uint256)(REF_389,REF_390)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
delete annoTrades[_tradeId]

IRs:
REF_391(Anno.AnnoTrade) -> annoTrades[_tradeId]
annoTrades = delete REF_391 "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
TradeComplete(_tradeId,msg.sender,anno.seller,anno.medal,anno.token)

IRs:
REF_392(address) -> anno.seller
REF_393(uint256) -> anno.medal
REF_394(uint256) -> anno.token
Emit TradeComplete(_tradeId,msg.sender,REF_392,REF_393,REF_394)"];
7->13;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] = safeAdd(balances[msg.sender],anno.token)

IRs:
REF_395(uint256) -> balances[msg.sender]
REF_396(uint256) -> balances[msg.sender]
REF_397(uint256) -> anno.token
TMP_535(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_396,REF_397)
REF_395(uint256) (->balances) := TMP_535(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
MemberToToken[anno.seller] = 0

IRs:
REF_398(address) -> anno.seller
REF_399(uint256) -> MemberToToken[REF_398]
REF_399(uint256) (->MemberToToken) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
medalTransfer(anno.seller,anno.medal)

IRs:
REF_400(address) -> anno.seller
REF_401(uint256) -> anno.medal
TMP_536(bool) = INTERNAL_CALL, AnnoMedal.medalTransfer(address,uint256)(REF_400,REF_401)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete annoTrades[_tradeId]

IRs:
REF_402(Anno.AnnoTrade) -> annoTrades[_tradeId]
annoTrades = delete REF_402 "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
TradeComplete(_tradeId,msg.sender,anno.seller,anno.medal,anno.token)

IRs:
REF_403(address) -> anno.seller
REF_404(uint256) -> anno.medal
REF_405(uint256) -> anno.token
Emit TradeComplete(_tradeId,msg.sender,REF_403,REF_404,REF_405)"];
12->13;
13[label="Node Type: END_IF 13
"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
14->1;
}
// Function: 1036.sol-Anno-transfer(address,uint256)
digraph{
}
// Function: 1036.sol-Anno-transferAnyERC20Token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20Interface(tokenAddress).transfer(adminAddress,tokens)

IRs:
TMP_412 = CONVERT tokenAddress to ERC20Interface
TMP_413(bool) = HIGH_LEVEL_CALL, dest:TMP_412(ERC20Interface), function:transfer, arguments:['adminAddress', 'tokens']  
RETURN TMP_413"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1036.sol-Anno-transferFrom(address,address,uint256)
digraph{
}
// Function: 1036.sol-Anno-unFreeze()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(freezed[msg.sender] == true)

IRs:
REF_243(bool) -> freezed[msg.sender]
TMP_355(bool) = REF_243 == True
TMP_356(None) = SOLIDITY_CALL require(bool)(TMP_355)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unlockTime[msg.sender] < uint256(now))

IRs:
REF_244(uint256) -> unlockTime[msg.sender]
TMP_357 = CONVERT now to uint256
TMP_358(bool) = REF_244 < TMP_357
TMP_359(None) = SOLIDITY_CALL require(bool)(TMP_358)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
freezed[msg.sender] = false

IRs:
REF_245(bool) -> freezed[msg.sender]
REF_245(bool) (->freezed) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
freezeAmount[msg.sender] = 0

IRs:
REF_246(uint256) -> freezeAmount[msg.sender]
REF_246(uint256) (->freezeAmount) := 0(uint256)"];
}
// Function: 1036.sol-Anno-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Administration.whenPaused()()"];
5->1;
}
// Function: 1036.sol-Anno-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_567 = UnaryType.BANG paused 
TMP_568(None) = SOLIDITY_CALL require(bool)(TMP_567)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1036.sol-Anno-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_569(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1036.sol-Anno-withdrawBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
adminAddress.transfer(this.balance)

IRs:
REF_342(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:adminAddress value:REF_342"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
2->1;
}
// Function: 1036.sol-AnnoMedal-AnnoMedal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
medalSymbol = CPLD

IRs:
medalSymbol(string) := CPLD(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
medalName = Anno Medal

IRs:
medalName(string) := Anno Medal(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalDecimals = 0

IRs:
medalDecimals(uint8) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_medalTotalSupply = 1000000

IRs:
_medalTotalSupply(uint256) := 1000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
medalBalances[adminAddress] = _medalTotalSupply

IRs:
REF_4(uint256) -> medalBalances[adminAddress]
REF_4(uint256) (->medalBalances) := _medalTotalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
MedalTransfer(address(0),adminAddress,_medalTotalSupply)

IRs:
TMP_61 = CONVERT 0 to address
Emit MedalTransfer(TMP_61,adminAddress,_medalTotalSupply)"];
}
// Function: 1036.sol-AnnoMedal-_medalFreeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(medalFreezed[msg.sender] == false)

IRs:
REF_28(bool) -> medalFreezed[msg.sender]
TMP_88(bool) = REF_28 == False
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(medalBalances[msg.sender] >= amount)

IRs:
REF_29(uint256) -> medalBalances[msg.sender]
TMP_90(bool) = REF_29 >= amount
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalFreezed[msg.sender] = true

IRs:
REF_30(bool) -> medalFreezed[msg.sender]
REF_30(bool) (->medalFreezed) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medalUnlockTime[msg.sender] = uint256(- 1)

IRs:
REF_31(uint256) -> medalUnlockTime[msg.sender]
TMP_92(uint256) = 0 - 1
TMP_93 = CONVERT TMP_92 to uint256
REF_31(uint256) (->medalUnlockTime) := TMP_93(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
medalFreezeAmount[msg.sender] = amount

IRs:
REF_32(uint256) -> medalFreezeAmount[msg.sender]
REF_32(uint256) (->medalFreezeAmount) := amount(uint256)"];
}
// Function: 1036.sol-AnnoMedal-_medalUnFreeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(medalFreezed[msg.sender] == true)

IRs:
REF_37(bool) -> medalFreezed[msg.sender]
TMP_100(bool) = REF_37 == True
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
medalUnlockTime[msg.sender] = 0

IRs:
REF_38(uint256) -> medalUnlockTime[msg.sender]
REF_38(uint256) (->medalUnlockTime) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalFreezed[msg.sender] = false

IRs:
REF_39(bool) -> medalFreezed[msg.sender]
REF_39(bool) (->medalFreezed) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medalFreezeAmount[msg.sender] = safeSub(medalFreezeAmount[msg.sender],_amount)

IRs:
REF_40(uint256) -> medalFreezeAmount[msg.sender]
REF_41(uint256) -> medalFreezeAmount[msg.sender]
TMP_102(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_41,_amount)
REF_40(uint256) (->medalFreezeAmount) := TMP_102(uint256)"];
}
// Function: 1036.sol-AnnoMedal-allowance(address,address)
digraph{
}
// Function: 1036.sol-AnnoMedal-approve(address,uint256)
digraph{
}
// Function: 1036.sol-AnnoMedal-balanceOf(address)
digraph{
}
// Function: 1036.sol-AnnoMedal-burnMedal(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
medalBalances[msg.sender] = safeSub(medalBalances[msg.sender],amount)

IRs:
REF_22(uint256) -> medalBalances[msg.sender]
REF_23(uint256) -> medalBalances[msg.sender]
TMP_80(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_23,amount)
REF_22(uint256) (->medalBalances) := TMP_80(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_medalTotalSupply = safeSub(_medalTotalSupply,amount)

IRs:
TMP_81(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(_medalTotalSupply,amount)
_medalTotalSupply(uint256) := TMP_81(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
3->1;
}
// Function: 1036.sol-AnnoMedal-medalBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
medalBalances[tokenOwner]

IRs:
REF_6(uint256) -> medalBalances[tokenOwner]
RETURN REF_6"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1036.sol-AnnoMedal-medalFreeze(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(medalBalances[user] >= amount)

IRs:
REF_24(uint256) -> medalBalances[user]
TMP_83(bool) = REF_24 >= amount
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
medalFreezed[user] = true

IRs:
REF_25(bool) -> medalFreezed[user]
REF_25(bool) (->medalFreezed) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalUnlockTime[user] = uint256(now) + period

IRs:
REF_26(uint256) -> medalUnlockTime[user]
TMP_85 = CONVERT now to uint256
TMP_86(uint256) = TMP_85 + period
REF_26(uint256) (->medalUnlockTime) := TMP_86(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medalFreezeAmount[user] = amount

IRs:
REF_27(uint256) -> medalFreezeAmount[user]
REF_27(uint256) (->medalFreezeAmount) := amount(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
5->1;
}
// Function: 1036.sol-AnnoMedal-medalIfFreeze(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
check = medalFreezed[user]

IRs:
REF_42(bool) -> medalFreezed[user]
check(bool) := REF_42(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
amount = medalFreezeAmount[user]

IRs:
REF_43(uint256) -> medalFreezeAmount[user]
amount(uint256) := REF_43(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
timeLeft = medalUnlockTime[user] - uint256(now)

IRs:
REF_44(uint256) -> medalUnlockTime[user]
TMP_103 = CONVERT now to uint256
TMP_104(uint256) = REF_44 - TMP_103
timeLeft(uint256) := TMP_104(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(check,amount,timeLeft)

IRs:
RETURN check,amount,timeLeft"];
}
// Function: 1036.sol-AnnoMedal-medalTotalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_medalTotalSupply - medalBalances[address(0)]

IRs:
TMP_63 = CONVERT 0 to address
REF_5(uint256) -> medalBalances[TMP_63]
TMP_64(uint256) = _medalTotalSupply - REF_5
RETURN TMP_64"];
}
// Function: 1036.sol-AnnoMedal-medalTransfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: IF 1

EXPRESSION:
medalFreezed[msg.sender] == false

IRs:
REF_7(bool) -> medalFreezed[msg.sender]
TMP_65(bool) = REF_7 == False
CONDITION TMP_65"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
medalBalances[msg.sender] = safeSub(medalBalances[msg.sender],tokens)

IRs:
REF_8(uint256) -> medalBalances[msg.sender]
REF_9(uint256) -> medalBalances[msg.sender]
TMP_66(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_9,tokens)
REF_8(uint256) (->medalBalances) := TMP_66(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalBalances[to] = safeAdd(medalBalances[to],tokens)

IRs:
REF_10(uint256) -> medalBalances[to]
REF_11(uint256) -> medalBalances[to]
TMP_67(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_11,tokens)
REF_10(uint256) (->medalBalances) := TMP_67(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
MedalTransfer(msg.sender,to,tokens)

IRs:
Emit MedalTransfer(msg.sender,to,tokens)"];
4->11;
5[label="Node Type: IF 5

EXPRESSION:
medalBalances[msg.sender] > medalFreezeAmount[msg.sender]

IRs:
REF_12(uint256) -> medalBalances[msg.sender]
REF_13(uint256) -> medalFreezeAmount[msg.sender]
TMP_69(bool) = REF_12 > REF_13
CONDITION TMP_69"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(tokens <= safeSub(medalBalances[msg.sender],medalFreezeAmount[msg.sender]))

IRs:
REF_14(uint256) -> medalBalances[msg.sender]
REF_15(uint256) -> medalFreezeAmount[msg.sender]
TMP_70(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_14,REF_15)
TMP_71(bool) = tokens <= TMP_70
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
medalBalances[msg.sender] = safeSub(medalBalances[msg.sender],tokens)

IRs:
REF_16(uint256) -> medalBalances[msg.sender]
REF_17(uint256) -> medalBalances[msg.sender]
TMP_73(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_17,tokens)
REF_16(uint256) (->medalBalances) := TMP_73(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
medalBalances[to] = safeAdd(medalBalances[to],tokens)

IRs:
REF_18(uint256) -> medalBalances[to]
REF_19(uint256) -> medalBalances[to]
TMP_74(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_19,tokens)
REF_18(uint256) (->medalBalances) := TMP_74(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
MedalTransfer(msg.sender,to,tokens)

IRs:
Emit MedalTransfer(msg.sender,to,tokens)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
true

IRs:
RETURN True"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
13->1;
14[label="Node Type: RETURN 14

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1036.sol-AnnoMedal-medalUnFreeze()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(medalFreezed[msg.sender] == true)

IRs:
REF_33(bool) -> medalFreezed[msg.sender]
TMP_94(bool) = REF_33 == True
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(medalUnlockTime[msg.sender] < uint256(now))

IRs:
REF_34(uint256) -> medalUnlockTime[msg.sender]
TMP_96 = CONVERT now to uint256
TMP_97(bool) = REF_34 < TMP_96
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalFreezed[msg.sender] = false

IRs:
REF_35(bool) -> medalFreezed[msg.sender]
REF_35(bool) (->medalFreezed) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medalFreezeAmount[msg.sender] = 0

IRs:
REF_36(uint256) -> medalFreezeAmount[msg.sender]
REF_36(uint256) (->medalFreezeAmount) := 0(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
5->1;
}
// Function: 1036.sol-AnnoMedal-mintMedal(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
medalBalances[msg.sender] = safeAdd(medalBalances[msg.sender],amount)

IRs:
REF_20(uint256) -> medalBalances[msg.sender]
REF_21(uint256) -> medalBalances[msg.sender]
TMP_77(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_21,amount)
REF_20(uint256) (->medalBalances) := TMP_77(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_medalTotalSupply = safeAdd(_medalTotalSupply,amount)

IRs:
TMP_78(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(_medalTotalSupply,amount)
_medalTotalSupply(uint256) := TMP_78(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
3->1;
}
// Function: 1036.sol-AnnoMedal-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == adminAddress)

IRs:
TMP_105(bool) = msg.sender == adminAddress
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1036.sol-AnnoMedal-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
5->1;
}
// Function: 1036.sol-AnnoMedal-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_33(uint256) = a + b
c(uint256) := TMP_33(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_34(bool) = c >= a
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-AnnoMedal-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_45(bool) = b > 0
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_47(uint256) = a / b
c(uint256) := TMP_47(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-AnnoMedal-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_39(uint256) = a * b
c(uint256) := TMP_39(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_40(bool) = a == 0
TMP_41(uint256) = c / a
TMP_42(bool) = TMP_41 == b
TMP_43(bool) = TMP_40 || TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-AnnoMedal-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_36(bool) = b <= a
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_38(uint256) = a - b
c(uint256) := TMP_38(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-AnnoMedal-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newAdmin != address(0))

IRs:
TMP_48 = CONVERT 0 to address
TMP_49(bool) = _newAdmin != TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AdminTransferred(adminAddress,_newAdmin)

IRs:
Emit AdminTransferred(adminAddress,_newAdmin)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
adminAddress = _newAdmin

IRs:
adminAddress(address) := _newAdmin(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
4->1;
}
// Function: 1036.sol-AnnoMedal-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
adminAddress = 0xbd74Dec00Af1E745A21d5130928CD610BE963027

IRs:
adminAddress(address) := 1081605546404974836213712594752196472130749476903(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
oneEth = 1000000000000000000

IRs:
oneEth(uint256) := 1000000000000000000(uint256)"];
}
// Function: 1036.sol-AnnoMedal-totalSupply()
digraph{
}
// Function: 1036.sol-AnnoMedal-transfer(address,uint256)
digraph{
}
// Function: 1036.sol-AnnoMedal-transferFrom(address,address,uint256)
digraph{
}
// Function: 1036.sol-AnnoMedal-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Administration.whenPaused()()"];
5->1;
}
// Function: 1036.sol-AnnoMedal-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_107 = UnaryType.BANG paused 
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1036.sol-AnnoMedal-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_109(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1036.sol-AnnoMedal-withdrawBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
adminAddress.transfer(this.balance)

IRs:
REF_3(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:adminAddress value:REF_3"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
2->1;
}
// Function: 1036.sol-AnnoToken-AnnoMedal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
medalSymbol = CPLD

IRs:
medalSymbol(string) := CPLD(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
medalName = Anno Medal

IRs:
medalName(string) := Anno Medal(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalDecimals = 0

IRs:
medalDecimals(uint8) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_medalTotalSupply = 1000000

IRs:
_medalTotalSupply(uint256) := 1000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
medalBalances[adminAddress] = _medalTotalSupply

IRs:
REF_45(uint256) -> medalBalances[adminAddress]
REF_45(uint256) (->medalBalances) := _medalTotalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
MedalTransfer(address(0),adminAddress,_medalTotalSupply)

IRs:
TMP_110 = CONVERT 0 to address
Emit MedalTransfer(TMP_110,adminAddress,_medalTotalSupply)"];
}
// Function: 1036.sol-AnnoToken-AnnoToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = anno

IRs:
symbol(string) := anno(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = Anno Token

IRs:
name(string) := Anno Token(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = 1000000000000000000000000000

IRs:
_totalSupply(uint256) := 1000000000000000000000000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minePool = 60000000000000000000000000000

IRs:
minePool(uint256) := 60000000000000000000000000000(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[adminAddress] = _totalSupply - minePool

IRs:
REF_88(uint256) -> balances[adminAddress]
TMP_182(uint256) = _totalSupply - minePool
REF_88(uint256) (->balances) := TMP_182(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(address(0),adminAddress,_totalSupply)

IRs:
TMP_183 = CONVERT 0 to address
Emit Transfer(TMP_183,adminAddress,_totalSupply)"];
}
// Function: 1036.sol-AnnoToken-_medalFreeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(medalFreezed[msg.sender] == false)

IRs:
REF_69(bool) -> medalFreezed[msg.sender]
TMP_137(bool) = REF_69 == False
TMP_138(None) = SOLIDITY_CALL require(bool)(TMP_137)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(medalBalances[msg.sender] >= amount)

IRs:
REF_70(uint256) -> medalBalances[msg.sender]
TMP_139(bool) = REF_70 >= amount
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalFreezed[msg.sender] = true

IRs:
REF_71(bool) -> medalFreezed[msg.sender]
REF_71(bool) (->medalFreezed) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medalUnlockTime[msg.sender] = uint256(- 1)

IRs:
REF_72(uint256) -> medalUnlockTime[msg.sender]
TMP_141(uint256) = 0 - 1
TMP_142 = CONVERT TMP_141 to uint256
REF_72(uint256) (->medalUnlockTime) := TMP_142(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
medalFreezeAmount[msg.sender] = amount

IRs:
REF_73(uint256) -> medalFreezeAmount[msg.sender]
REF_73(uint256) (->medalFreezeAmount) := amount(uint256)"];
}
// Function: 1036.sol-AnnoToken-_medalUnFreeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(medalFreezed[msg.sender] == true)

IRs:
REF_78(bool) -> medalFreezed[msg.sender]
TMP_149(bool) = REF_78 == True
TMP_150(None) = SOLIDITY_CALL require(bool)(TMP_149)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
medalUnlockTime[msg.sender] = 0

IRs:
REF_79(uint256) -> medalUnlockTime[msg.sender]
REF_79(uint256) (->medalUnlockTime) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalFreezed[msg.sender] = false

IRs:
REF_80(bool) -> medalFreezed[msg.sender]
REF_80(bool) (->medalFreezed) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medalFreezeAmount[msg.sender] = safeSub(medalFreezeAmount[msg.sender],_amount)

IRs:
REF_81(uint256) -> medalFreezeAmount[msg.sender]
REF_82(uint256) -> medalFreezeAmount[msg.sender]
TMP_151(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_82,_amount)
REF_81(uint256) (->medalFreezeAmount) := TMP_151(uint256)"];
}
// Function: 1036.sol-AnnoToken-_mint(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(minePool >= amount)

IRs:
TMP_212(bool) = minePool >= amount
TMP_213(None) = SOLIDITY_CALL require(bool)(TMP_212)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
minePool = safeSub(minePool,amount)

IRs:
TMP_214(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(minePool,amount)
minePool(uint256) := TMP_214(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[receiver] = safeAdd(balances[receiver],amount)

IRs:
REF_122(uint256) -> balances[receiver]
REF_123(uint256) -> balances[receiver]
TMP_215(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_123,amount)
REF_122(uint256) (->balances) := TMP_215(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),receiver,amount)

IRs:
TMP_216 = CONVERT 0 to address
Emit Transfer(TMP_216,receiver,amount)"];
}
// Function: 1036.sol-AnnoToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(freezed[msg.sender] != true)

IRs:
REF_115(bool) -> freezed[msg.sender]
TMP_205(bool) = REF_115 != True
TMP_206(None) = SOLIDITY_CALL require(bool)(TMP_205)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
allowed[tokenOwner][spender]

IRs:
REF_116(mapping(address => uint256)) -> allowed[tokenOwner]
REF_117(uint256) -> REF_116[spender]
RETURN REF_117"];
3[label="Node Type: RETURN 3

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1036.sol-AnnoToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(freezed[msg.sender] != true)

IRs:
REF_104(bool) -> freezed[msg.sender]
TMP_198(bool) = REF_104 != True
TMP_199(None) = SOLIDITY_CALL require(bool)(TMP_198)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_105(mapping(address => uint256)) -> allowed[msg.sender]
REF_106(uint256) -> REF_105[spender]
REF_106(uint256) (->allowed) := tokens(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1036.sol-AnnoToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(freezed[msg.sender] != true)

IRs:
REF_118(bool) -> freezed[msg.sender]
TMP_207(bool) = REF_118 != True
TMP_208(None) = SOLIDITY_CALL require(bool)(TMP_207)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_119(mapping(address => uint256)) -> allowed[msg.sender]
REF_120(uint256) -> REF_119[spender]
REF_120(uint256) (->allowed) := tokens(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ApproveAndCallFallBack(spender).receiveApproval(msg.sender,tokens,this,data)

IRs:
TMP_210 = CONVERT spender to ApproveAndCallFallBack
HIGH_LEVEL_CALL, dest:TMP_210(ApproveAndCallFallBack), function:receiveApproval, arguments:['msg.sender', 'tokens', 'this', 'data']  "];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1036.sol-AnnoToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[tokenOwner]

IRs:
REF_90(uint256) -> balances[tokenOwner]
RETURN REF_90"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1036.sol-AnnoToken-burnMedal(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
medalBalances[msg.sender] = safeSub(medalBalances[msg.sender],amount)

IRs:
REF_63(uint256) -> medalBalances[msg.sender]
REF_64(uint256) -> medalBalances[msg.sender]
TMP_129(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_64,amount)
REF_63(uint256) (->medalBalances) := TMP_129(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_medalTotalSupply = safeSub(_medalTotalSupply,amount)

IRs:
TMP_130(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(_medalTotalSupply,amount)
_medalTotalSupply(uint256) := TMP_130(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
3->1;
}
// Function: 1036.sol-AnnoToken-createPartner(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_Partner = Partner({admin:_partner,tokenPool:_amount,singleTrans:_singleTrans,timestamp:uint256(now),durance:_durance})

IRs:
TMP_236 = CONVERT now to uint256
TMP_237(AnnoToken.Partner) = new Partner(_partner,_amount,_singleTrans,TMP_236,_durance)
_Partner(AnnoToken.Partner) := TMP_237(AnnoToken.Partner)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newPartnerId = partners.push(_Partner) - 1

IRs:
REF_138 -> LENGTH partners
TMP_240(uint256) := REF_138(uint256)
TMP_241(uint256) = TMP_240 + 1
REF_138(uint256) (->partners) := TMP_241(uint256)
REF_139(AnnoToken.Partner) -> partners[TMP_240]
REF_139(AnnoToken.Partner) (->partners) := _Partner(AnnoToken.Partner)
TMP_239(None) = TMP_238 - 1
newPartnerId(uint256) := TMP_239(None)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
PartnerCreated(newPartnerId,_partner,_amount,_singleTrans,_durance)

IRs:
Emit PartnerCreated(newPartnerId,_partner,_amount,_singleTrans,_durance)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
newPartnerId

IRs:
RETURN newPartnerId"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
5->1;
}
// Function: 1036.sol-AnnoToken-createVip(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_Vip = Vip({vip:_vip,durance:uint256(now) + _durance,frequence:_frequence,salary:_salary,timestamp:now + _frequence})

IRs:
TMP_266 = CONVERT now to uint256
TMP_267(uint256) = TMP_266 + _durance
TMP_268(uint256) = now + _frequence
TMP_269(AnnoToken.Vip) = new Vip(_vip,TMP_267,_frequence,_salary,TMP_268)
_Vip(AnnoToken.Vip) := TMP_269(AnnoToken.Vip)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newVipId = vips.push(_Vip) - 1

IRs:
REF_167 -> LENGTH vips
TMP_272(uint256) := REF_167(uint256)
TMP_273(uint256) = TMP_272 + 1
REF_167(uint256) (->vips) := TMP_273(uint256)
REF_168(AnnoToken.Vip) -> vips[TMP_272]
REF_168(AnnoToken.Vip) (->vips) := _Vip(AnnoToken.Vip)
TMP_271(None) = TMP_270 - 1
newVipId(uint256) := TMP_271(None)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
VipAgreementSign(newVipId,_vip,_durance,_frequence,_salary)

IRs:
Emit VipAgreementSign(newVipId,_vip,_durance,_frequence,_salary)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
newVipId

IRs:
RETURN newVipId"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
5->1;
}
// Function: 1036.sol-AnnoToken-deleteVip(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete vips[_vipId]

IRs:
REF_178(AnnoToken.Vip) -> vips[_vipId]
vips = delete REF_178 "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
2->1;
}
// Function: 1036.sol-AnnoToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1036.sol-AnnoToken-freeze(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[user] >= amount)

IRs:
REF_126(uint256) -> balances[user]
TMP_224(bool) = REF_126 >= amount
TMP_225(None) = SOLIDITY_CALL require(bool)(TMP_224)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
freezed[user] = true

IRs:
REF_127(bool) -> freezed[user]
REF_127(bool) (->freezed) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
unlockTime[user] = uint256(now) + period

IRs:
REF_128(uint256) -> unlockTime[user]
TMP_226 = CONVERT now to uint256
TMP_227(uint256) = TMP_226 + period
REF_128(uint256) (->unlockTime) := TMP_227(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
freezeAmount[user] = amount

IRs:
REF_129(uint256) -> freezeAmount[user]
REF_129(uint256) (->freezeAmount) := amount(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
5->1;
}
// Function: 1036.sol-AnnoToken-getPartnerInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_Partner = partners[_partnerId]

IRs:
REF_154(AnnoToken.Partner) -> partners[_partnerId]
_Partner(AnnoToken.Partner) := REF_154(AnnoToken.Partner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = _Partner.admin

IRs:
REF_155(address) -> _Partner.admin
admin(address) := REF_155(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenPool = _Partner.tokenPool

IRs:
REF_156(uint256) -> _Partner.tokenPool
tokenPool(uint256) := REF_156(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_Partner.timestamp + _Partner.durance > uint256(now)

IRs:
REF_157(uint256) -> _Partner.timestamp
REF_158(uint256) -> _Partner.durance
TMP_260(uint256) = REF_157 + REF_158
TMP_261 = CONVERT now to uint256
TMP_262(bool) = TMP_260 > TMP_261
CONDITION TMP_262"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
timeLeft = _Partner.timestamp + _Partner.durance - uint256(now)

IRs:
REF_159(uint256) -> _Partner.timestamp
REF_160(uint256) -> _Partner.durance
TMP_263(uint256) = REF_159 + REF_160
TMP_264 = CONVERT now to uint256
TMP_265(uint256) = TMP_263 - TMP_264
timeLeft(uint256) := TMP_265(uint256)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
timeLeft = 0

IRs:
timeLeft(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(admin,tokenPool,timeLeft)

IRs:
RETURN admin,tokenPool,timeLeft"];
}
// Function: 1036.sol-AnnoToken-getPosterInfo(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_Poster = PartnerIdToPosterList[_partnerId][_posterId]

IRs:
REF_161(AnnoToken.Poster[]) -> PartnerIdToPosterList[_partnerId]
REF_162(AnnoToken.Poster) -> REF_161[_posterId]
_Poster(AnnoToken.Poster) := REF_162(AnnoToken.Poster)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
poster = _Poster.poster

IRs:
REF_163(address) -> _Poster.poster
poster(address) := REF_163(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
hashData = _Poster.hashData

IRs:
REF_164(bytes32) -> _Poster.hashData
hashData(bytes32) := REF_164(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reward = _Poster.reward

IRs:
REF_165(uint256) -> _Poster.reward
reward(uint256) := REF_165(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(poster,hashData,reward)

IRs:
RETURN poster,hashData,reward"];
}
// Function: 1036.sol-AnnoToken-getVipInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_Vip = vips[_vipId]

IRs:
REF_179(AnnoToken.Vip) -> vips[_vipId]
_Vip(AnnoToken.Vip) := REF_179(AnnoToken.Vip)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vip = _Vip.vip

IRs:
REF_180(address) -> _Vip.vip
vip(address) := REF_180(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
durance = _Vip.durance

IRs:
REF_181(uint256) -> _Vip.durance
durance(uint256) := REF_181(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
frequence = _Vip.frequence

IRs:
REF_182(uint256) -> _Vip.frequence
frequence(uint256) := REF_182(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
salary = _Vip.salary

IRs:
REF_183(uint256) -> _Vip.salary
salary(uint256) := REF_183(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_Vip.timestamp >= uint256(now)

IRs:
REF_184(uint256) -> _Vip.timestamp
TMP_282 = CONVERT now to uint256
TMP_283(bool) = REF_184 >= TMP_282
CONDITION TMP_283"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
nextSalary = safeSub(_Vip.timestamp,uint256(now))

IRs:
REF_185(uint256) -> _Vip.timestamp
TMP_284 = CONVERT now to uint256
TMP_285(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_185,TMP_284)
nextSalary(uint256) := TMP_285(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
log = Please Wait

IRs:
log(string) := Please Wait(string)"];
8->11;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
nextSalary = 0

IRs:
nextSalary(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
log = Pick Up Your Salary Now

IRs:
log(string) := Pick Up Your Salary Now(string)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(vip,durance,frequence,salary,nextSalary,log)

IRs:
RETURN vip,durance,frequence,salary,nextSalary,log"];
}
// Function: 1036.sol-AnnoToken-ifFreeze(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
check = freezed[user]

IRs:
REF_134(bool) -> freezed[user]
check(bool) := REF_134(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
amount = freezeAmount[user]

IRs:
REF_135(uint256) -> freezeAmount[user]
amount(uint256) := REF_135(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
timeLeft = unlockTime[user] - uint256(now)

IRs:
REF_136(uint256) -> unlockTime[user]
TMP_234 = CONVERT now to uint256
TMP_235(uint256) = REF_136 - TMP_234
timeLeft(uint256) := TMP_235(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(check,amount,timeLeft)

IRs:
RETURN check,amount,timeLeft"];
}
// Function: 1036.sol-AnnoToken-medalBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
medalBalances[tokenOwner]

IRs:
REF_47(uint256) -> medalBalances[tokenOwner]
RETURN REF_47"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1036.sol-AnnoToken-medalFreeze(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(medalBalances[user] >= amount)

IRs:
REF_65(uint256) -> medalBalances[user]
TMP_132(bool) = REF_65 >= amount
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
medalFreezed[user] = true

IRs:
REF_66(bool) -> medalFreezed[user]
REF_66(bool) (->medalFreezed) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalUnlockTime[user] = uint256(now) + period

IRs:
REF_67(uint256) -> medalUnlockTime[user]
TMP_134 = CONVERT now to uint256
TMP_135(uint256) = TMP_134 + period
REF_67(uint256) (->medalUnlockTime) := TMP_135(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medalFreezeAmount[user] = amount

IRs:
REF_68(uint256) -> medalFreezeAmount[user]
REF_68(uint256) (->medalFreezeAmount) := amount(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
5->1;
}
// Function: 1036.sol-AnnoToken-medalIfFreeze(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
check = medalFreezed[user]

IRs:
REF_83(bool) -> medalFreezed[user]
check(bool) := REF_83(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
amount = medalFreezeAmount[user]

IRs:
REF_84(uint256) -> medalFreezeAmount[user]
amount(uint256) := REF_84(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
timeLeft = medalUnlockTime[user] - uint256(now)

IRs:
REF_85(uint256) -> medalUnlockTime[user]
TMP_152 = CONVERT now to uint256
TMP_153(uint256) = REF_85 - TMP_152
timeLeft(uint256) := TMP_153(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(check,amount,timeLeft)

IRs:
RETURN check,amount,timeLeft"];
}
// Function: 1036.sol-AnnoToken-medalTotalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_medalTotalSupply - medalBalances[address(0)]

IRs:
TMP_112 = CONVERT 0 to address
REF_46(uint256) -> medalBalances[TMP_112]
TMP_113(uint256) = _medalTotalSupply - REF_46
RETURN TMP_113"];
}
// Function: 1036.sol-AnnoToken-medalTransfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: IF 1

EXPRESSION:
medalFreezed[msg.sender] == false

IRs:
REF_48(bool) -> medalFreezed[msg.sender]
TMP_114(bool) = REF_48 == False
CONDITION TMP_114"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
medalBalances[msg.sender] = safeSub(medalBalances[msg.sender],tokens)

IRs:
REF_49(uint256) -> medalBalances[msg.sender]
REF_50(uint256) -> medalBalances[msg.sender]
TMP_115(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_50,tokens)
REF_49(uint256) (->medalBalances) := TMP_115(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalBalances[to] = safeAdd(medalBalances[to],tokens)

IRs:
REF_51(uint256) -> medalBalances[to]
REF_52(uint256) -> medalBalances[to]
TMP_116(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_52,tokens)
REF_51(uint256) (->medalBalances) := TMP_116(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
MedalTransfer(msg.sender,to,tokens)

IRs:
Emit MedalTransfer(msg.sender,to,tokens)"];
4->11;
5[label="Node Type: IF 5

EXPRESSION:
medalBalances[msg.sender] > medalFreezeAmount[msg.sender]

IRs:
REF_53(uint256) -> medalBalances[msg.sender]
REF_54(uint256) -> medalFreezeAmount[msg.sender]
TMP_118(bool) = REF_53 > REF_54
CONDITION TMP_118"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(tokens <= safeSub(medalBalances[msg.sender],medalFreezeAmount[msg.sender]))

IRs:
REF_55(uint256) -> medalBalances[msg.sender]
REF_56(uint256) -> medalFreezeAmount[msg.sender]
TMP_119(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_55,REF_56)
TMP_120(bool) = tokens <= TMP_119
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
medalBalances[msg.sender] = safeSub(medalBalances[msg.sender],tokens)

IRs:
REF_57(uint256) -> medalBalances[msg.sender]
REF_58(uint256) -> medalBalances[msg.sender]
TMP_122(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_58,tokens)
REF_57(uint256) (->medalBalances) := TMP_122(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
medalBalances[to] = safeAdd(medalBalances[to],tokens)

IRs:
REF_59(uint256) -> medalBalances[to]
REF_60(uint256) -> medalBalances[to]
TMP_123(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_60,tokens)
REF_59(uint256) (->medalBalances) := TMP_123(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
MedalTransfer(msg.sender,to,tokens)

IRs:
Emit MedalTransfer(msg.sender,to,tokens)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
true

IRs:
RETURN True"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
13->1;
14[label="Node Type: RETURN 14

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1036.sol-AnnoToken-medalUnFreeze()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(medalFreezed[msg.sender] == true)

IRs:
REF_74(bool) -> medalFreezed[msg.sender]
TMP_143(bool) = REF_74 == True
TMP_144(None) = SOLIDITY_CALL require(bool)(TMP_143)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(medalUnlockTime[msg.sender] < uint256(now))

IRs:
REF_75(uint256) -> medalUnlockTime[msg.sender]
TMP_145 = CONVERT now to uint256
TMP_146(bool) = REF_75 < TMP_145
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
medalFreezed[msg.sender] = false

IRs:
REF_76(bool) -> medalFreezed[msg.sender]
REF_76(bool) (->medalFreezed) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
medalFreezeAmount[msg.sender] = 0

IRs:
REF_77(uint256) -> medalFreezeAmount[msg.sender]
REF_77(uint256) (->medalFreezeAmount) := 0(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
5->1;
}
// Function: 1036.sol-AnnoToken-mineSalary(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_Vip = vips[_vipId]

IRs:
REF_169(AnnoToken.Vip) -> vips[_vipId]
_Vip(AnnoToken.Vip) := REF_169(AnnoToken.Vip)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_mint(_Vip.salary,_Vip.vip)

IRs:
REF_170(uint256) -> _Vip.salary
REF_171(address) -> _Vip.vip
INTERNAL_CALL, AnnoToken._mint(uint256,address)(REF_170,REF_171)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_Vip.timestamp = safeAdd(_Vip.timestamp,_Vip.frequence)

IRs:
REF_172(uint256) -> _Vip.timestamp
REF_173(uint256) -> _Vip.timestamp
REF_174(uint256) -> _Vip.frequence
TMP_277(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_173,REF_174)
REF_172(uint256) (->_Vip) := TMP_277(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
SalaryReceived(_vipId,_Vip.vip,_Vip.salary,_Vip.timestamp)

IRs:
REF_175(address) -> _Vip.vip
REF_176(uint256) -> _Vip.salary
REF_177(uint256) -> _Vip.timestamp
Emit SalaryReceived(_vipId,REF_175,REF_176,REF_177)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyVip(_vipId)

IRs:
MODIFIER_CALL, AnnoToken.onlyVip(uint256)(_vipId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
7->1;
}
// Function: 1036.sol-AnnoToken-mint(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(minePool >= amount)

IRs:
TMP_218(bool) = minePool >= amount
TMP_219(None) = SOLIDITY_CALL require(bool)(TMP_218)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
minePool = safeSub(minePool,amount)

IRs:
TMP_220(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(minePool,amount)
minePool(uint256) := TMP_220(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = safeAdd(balances[msg.sender],amount)

IRs:
REF_124(uint256) -> balances[msg.sender]
REF_125(uint256) -> balances[msg.sender]
TMP_221(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_125,amount)
REF_124(uint256) (->balances) := TMP_221(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = safeAdd(_totalSupply,amount)

IRs:
TMP_222(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(_totalSupply,amount)
_totalSupply(uint256) := TMP_222(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
5->1;
}
// Function: 1036.sol-AnnoToken-mintMedal(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
medalBalances[msg.sender] = safeAdd(medalBalances[msg.sender],amount)

IRs:
REF_61(uint256) -> medalBalances[msg.sender]
REF_62(uint256) -> medalBalances[msg.sender]
TMP_126(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_62,amount)
REF_61(uint256) (->medalBalances) := TMP_126(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_medalTotalSupply = safeAdd(_medalTotalSupply,amount)

IRs:
TMP_127(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(_medalTotalSupply,amount)
_medalTotalSupply(uint256) := TMP_127(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
3->1;
}
// Function: 1036.sol-AnnoToken-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == adminAddress)

IRs:
TMP_289(bool) = msg.sender == adminAddress
TMP_290(None) = SOLIDITY_CALL require(bool)(TMP_289)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1036.sol-AnnoToken-onlyPartner(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(partners[_partnerId].admin == msg.sender)

IRs:
REF_187(AnnoToken.Partner) -> partners[_partnerId]
REF_188(address) -> REF_187.admin
TMP_294(bool) = REF_188 == msg.sender
TMP_295(None) = SOLIDITY_CALL require(bool)(TMP_294)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(partners[_partnerId].tokenPool > uint256(0))

IRs:
REF_189(AnnoToken.Partner) -> partners[_partnerId]
REF_190(uint256) -> REF_189.tokenPool
TMP_296 = CONVERT 0 to uint256
TMP_297(bool) = REF_190 > TMP_296
TMP_298(None) = SOLIDITY_CALL require(bool)(TMP_297)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
deadline = safeAdd(partners[_partnerId].timestamp,partners[_partnerId].durance)

IRs:
REF_191(AnnoToken.Partner) -> partners[_partnerId]
REF_192(uint256) -> REF_191.timestamp
REF_193(AnnoToken.Partner) -> partners[_partnerId]
REF_194(uint256) -> REF_193.durance
TMP_299(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_192,REF_194)
deadline(uint256) := TMP_299(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(deadline > now)

IRs:
TMP_300(bool) = deadline > now
TMP_301(None) = SOLIDITY_CALL require(bool)(TMP_300)"];
4->5;
5[label="Node Type: _ 5
"];
}
// Function: 1036.sol-AnnoToken-onlyVip(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(vips[_vipId].vip == msg.sender)

IRs:
REF_195(AnnoToken.Vip) -> vips[_vipId]
REF_196(address) -> REF_195.vip
TMP_302(bool) = REF_196 == msg.sender
TMP_303(None) = SOLIDITY_CALL require(bool)(TMP_302)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(vips[_vipId].durance > now)

IRs:
REF_197(AnnoToken.Vip) -> vips[_vipId]
REF_198(uint256) -> REF_197.durance
TMP_304(bool) = REF_198 > now
TMP_305(None) = SOLIDITY_CALL require(bool)(TMP_304)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(vips[_vipId].timestamp < now)

IRs:
REF_199(AnnoToken.Vip) -> vips[_vipId]
REF_200(uint256) -> REF_199.timestamp
TMP_306(bool) = REF_200 < now
TMP_307(None) = SOLIDITY_CALL require(bool)(TMP_306)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1036.sol-AnnoToken-partnerTransfer(uint256,bytes32,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount <= partners[_partnerId].singleTrans)

IRs:
REF_140(AnnoToken.Partner) -> partners[_partnerId]
REF_141(uint256) -> REF_140.singleTrans
TMP_244(bool) = _amount <= REF_141
TMP_245(None) = SOLIDITY_CALL require(bool)(TMP_244)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
partners[_partnerId].tokenPool = safeSub(partners[_partnerId].tokenPool,_amount)

IRs:
REF_142(AnnoToken.Partner) -> partners[_partnerId]
REF_143(uint256) -> REF_142.tokenPool
REF_144(AnnoToken.Partner) -> partners[_partnerId]
REF_145(uint256) -> REF_144.tokenPool
TMP_246(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_145,_amount)
REF_143(uint256) (->partners) := TMP_246(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_Poster = Poster({poster:_to,hashData:_data,reward:_amount})

IRs:
TMP_247(AnnoToken.Poster) = new Poster(_to,_data,_amount)
_Poster(AnnoToken.Poster) := TMP_247(AnnoToken.Poster)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
newPostId = PartnerIdToPosterList[_partnerId].push(_Poster) - 1

IRs:
REF_146(AnnoToken.Poster[]) -> PartnerIdToPosterList[_partnerId]
REF_148 -> LENGTH REF_146
TMP_250(uint256) := REF_148(uint256)
TMP_251(uint256) = TMP_250 + 1
REF_148(uint256) (->PartnerIdToPosterList) := TMP_251(uint256)
REF_149(AnnoToken.Poster) -> REF_146[TMP_250]
REF_149(AnnoToken.Poster) (->PartnerIdToPosterList) := _Poster(AnnoToken.Poster)
TMP_249(None) = TMP_248 - 1
newPostId(uint256) := TMP_249(None)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_mint(_amount,_to)

IRs:
INTERNAL_CALL, AnnoToken._mint(uint256,address)(_amount,_to)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
RewardDistribute(newPostId,_partnerId,_to,_amount)

IRs:
Emit RewardDistribute(newPostId,_partnerId,_to,_amount)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyPartner(_partnerId)

IRs:
MODIFIER_CALL, AnnoToken.onlyPartner(uint256)(_partnerId)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
9->1;
}
// Function: 1036.sol-AnnoToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Administration.whenNotPaused()()"];
5->1;
}
// Function: 1036.sol-AnnoToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_154(uint256) = a + b
c(uint256) := TMP_154(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_155(bool) = c >= a
TMP_156(None) = SOLIDITY_CALL require(bool)(TMP_155)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-AnnoToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_166(bool) = b > 0
TMP_167(None) = SOLIDITY_CALL require(bool)(TMP_166)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_168(uint256) = a / b
c(uint256) := TMP_168(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-AnnoToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_160(uint256) = a * b
c(uint256) := TMP_160(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_161(bool) = a == 0
TMP_162(uint256) = c / a
TMP_163(bool) = TMP_162 == b
TMP_164(bool) = TMP_161 || TMP_163
TMP_165(None) = SOLIDITY_CALL require(bool)(TMP_164)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-AnnoToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_157(bool) = b <= a
TMP_158(None) = SOLIDITY_CALL require(bool)(TMP_157)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_159(uint256) = a - b
c(uint256) := TMP_159(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-AnnoToken-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newAdmin != address(0))

IRs:
TMP_169 = CONVERT 0 to address
TMP_170(bool) = _newAdmin != TMP_169
TMP_171(None) = SOLIDITY_CALL require(bool)(TMP_170)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AdminTransferred(adminAddress,_newAdmin)

IRs:
Emit AdminTransferred(adminAddress,_newAdmin)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
adminAddress = _newAdmin

IRs:
adminAddress(address) := _newAdmin(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
4->1;
}
// Function: 1036.sol-AnnoToken-setPartnerDurance(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
partners[_partnerId].durance = uint256(now) + _durance

IRs:
REF_152(AnnoToken.Partner) -> partners[_partnerId]
REF_153(uint256) -> REF_152.durance
TMP_257 = CONVERT now to uint256
TMP_258(uint256) = TMP_257 + _durance
REF_153(uint256) (->partners) := TMP_258(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
2->1;
}
// Function: 1036.sol-AnnoToken-setPartnerPool(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
partners[_partnerId].tokenPool = _amount

IRs:
REF_150(AnnoToken.Partner) -> partners[_partnerId]
REF_151(uint256) -> REF_150.tokenPool
REF_151(uint256) (->partners) := _amount(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
2->1;
}
// Function: 1036.sol-AnnoToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
adminAddress = 0xbd74Dec00Af1E745A21d5130928CD610BE963027

IRs:
adminAddress(address) := 1081605546404974836213712594752196472130749476903(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
oneEth = 1000000000000000000

IRs:
oneEth(uint256) := 1000000000000000000(uint256)"];
}
// Function: 1036.sol-AnnoToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply - balances[address(0)]

IRs:
TMP_185 = CONVERT 0 to address
REF_89(uint256) -> balances[TMP_185]
TMP_186(uint256) = _totalSupply - REF_89
RETURN TMP_186"];
}
// Function: 1036.sol-AnnoToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
freezed[msg.sender] == false

IRs:
REF_91(bool) -> freezed[msg.sender]
TMP_187(bool) = REF_91 == False
CONDITION TMP_187"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],tokens)

IRs:
REF_92(uint256) -> balances[msg.sender]
REF_93(uint256) -> balances[msg.sender]
TMP_188(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_93,tokens)
REF_92(uint256) (->balances) := TMP_188(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_94(uint256) -> balances[to]
REF_95(uint256) -> balances[to]
TMP_189(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_95,tokens)
REF_94(uint256) (->balances) := TMP_189(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
4->11;
5[label="Node Type: IF 5

EXPRESSION:
balances[msg.sender] > freezeAmount[msg.sender]

IRs:
REF_96(uint256) -> balances[msg.sender]
REF_97(uint256) -> freezeAmount[msg.sender]
TMP_191(bool) = REF_96 > REF_97
CONDITION TMP_191"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(tokens <= safeSub(balances[msg.sender],freezeAmount[msg.sender]))

IRs:
REF_98(uint256) -> balances[msg.sender]
REF_99(uint256) -> freezeAmount[msg.sender]
TMP_192(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_98,REF_99)
TMP_193(bool) = tokens <= TMP_192
TMP_194(None) = SOLIDITY_CALL require(bool)(TMP_193)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],tokens)

IRs:
REF_100(uint256) -> balances[msg.sender]
REF_101(uint256) -> balances[msg.sender]
TMP_195(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_101,tokens)
REF_100(uint256) (->balances) := TMP_195(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_102(uint256) -> balances[to]
REF_103(uint256) -> balances[to]
TMP_196(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_103,tokens)
REF_102(uint256) (->balances) := TMP_196(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
true

IRs:
RETURN True"];
13[label="Node Type: RETURN 13

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1036.sol-AnnoToken-transferAnyERC20Token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20Interface(tokenAddress).transfer(adminAddress,tokens)

IRs:
TMP_286 = CONVERT tokenAddress to ERC20Interface
TMP_287(bool) = HIGH_LEVEL_CALL, dest:TMP_286(ERC20Interface), function:transfer, arguments:['adminAddress', 'tokens']  
RETURN TMP_287"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1036.sol-AnnoToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = safeSub(balances[from],tokens)

IRs:
REF_107(uint256) -> balances[from]
REF_108(uint256) -> balances[from]
TMP_201(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_108,tokens)
REF_107(uint256) (->balances) := TMP_201(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[from][msg.sender] = safeSub(allowed[from][msg.sender],tokens)

IRs:
REF_109(mapping(address => uint256)) -> allowed[from]
REF_110(uint256) -> REF_109[msg.sender]
REF_111(mapping(address => uint256)) -> allowed[from]
REF_112(uint256) -> REF_111[msg.sender]
TMP_202(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_112,tokens)
REF_110(uint256) (->allowed) := TMP_202(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_113(uint256) -> balances[to]
REF_114(uint256) -> balances[to]
TMP_203(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_114,tokens)
REF_113(uint256) (->balances) := TMP_203(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from,to,tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1036.sol-AnnoToken-unFreeze()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(freezed[msg.sender] == true)

IRs:
REF_130(bool) -> freezed[msg.sender]
TMP_229(bool) = REF_130 == True
TMP_230(None) = SOLIDITY_CALL require(bool)(TMP_229)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unlockTime[msg.sender] < uint256(now))

IRs:
REF_131(uint256) -> unlockTime[msg.sender]
TMP_231 = CONVERT now to uint256
TMP_232(bool) = REF_131 < TMP_231
TMP_233(None) = SOLIDITY_CALL require(bool)(TMP_232)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
freezed[msg.sender] = false

IRs:
REF_132(bool) -> freezed[msg.sender]
REF_132(bool) (->freezed) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
freezeAmount[msg.sender] = 0

IRs:
REF_133(uint256) -> freezeAmount[msg.sender]
REF_133(uint256) (->freezeAmount) := 0(uint256)"];
}
// Function: 1036.sol-AnnoToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Administration.whenPaused()()"];
5->1;
}
// Function: 1036.sol-AnnoToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_291 = UnaryType.BANG paused 
TMP_292(None) = SOLIDITY_CALL require(bool)(TMP_291)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1036.sol-AnnoToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_293(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1036.sol-AnnoToken-withdrawBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
adminAddress.transfer(this.balance)

IRs:
REF_87(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:adminAddress value:REF_87"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Administration.onlyAdmin()()"];
2->1;
}
// Function: 1036.sol-ApproveAndCallFallBack-receiveApproval(address,uint256,address,bytes)
digraph{
}
// Function: 1036.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 1036.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 1036.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 1036.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 1036.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 1036.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 1036.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_0(uint256) = a + b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_1(bool) = c >= a
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_12(bool) = b > 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_14(uint256) = a / b
c(uint256) := TMP_14(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_6(uint256) = a * b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_7(bool) = a == 0
TMP_8(uint256) = c / a
TMP_9(bool) = TMP_8 == b
TMP_10(bool) = TMP_7 || TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1036.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_3(bool) = b <= a
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_5(uint256) = a - b
c(uint256) := TMP_5(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
}
