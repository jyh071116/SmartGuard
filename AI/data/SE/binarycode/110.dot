digraph G {
// Function: 110.sol-Advertisement-Advertisement(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rules = ValidationRules(false,true,true,2,1)

IRs:
TMP_102(Advertisement.ValidationRules) = new ValidationRules(False,True,True,2,1)
rules(Advertisement.ValidationRules) := TMP_102(Advertisement.ValidationRules)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
appc = AppCoins(_addrAppc)

IRs:
TMP_103 = CONVERT _addrAppc to AppCoins
appc(AppCoins) := TMP_103(AppCoins)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
advertisementStorage = AdvertisementStorage(_addrAdverStorage)

IRs:
TMP_104 = CONVERT _addrAdverStorage to AdvertisementStorage
advertisementStorage(AdvertisementStorage) := TMP_104(AdvertisementStorage)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
advertisementFinance = AdvertisementFinance(_addrAdverFinance)

IRs:
TMP_105 = CONVERT _addrAdverFinance to AdvertisementFinance
advertisementFinance(AdvertisementFinance) := TMP_105(AdvertisementFinance)"];
}
// Function: 110.sol-Advertisement-addCampaign(CampaignLibrary.Campaign)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bidIdList.push(campaign.bidId)

IRs:
REF_161(bytes32) -> campaign.bidId
REF_162 -> LENGTH bidIdList
TMP_151(uint256) := REF_162(uint256)
TMP_152(uint256) = TMP_151 + 1
REF_162(uint256) (->bidIdList) := TMP_152(uint256)
REF_163(bytes32) -> bidIdList[TMP_151]
REF_163(bytes32) (->bidIdList) := REF_161(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
advertisementStorage.setCampaign(campaign.bidId,campaign.price,campaign.budget,campaign.startDate,campaign.endDate,campaign.valid,campaign.owner)

IRs:
REF_165(bytes32) -> campaign.bidId
REF_166(uint256) -> campaign.price
REF_167(uint256) -> campaign.budget
REF_168(uint256) -> campaign.startDate
REF_169(uint256) -> campaign.endDate
REF_170(bool) -> campaign.valid
REF_171(address) -> campaign.owner
HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:setCampaign, arguments:['REF_165', 'REF_166', 'REF_167', 'REF_168', 'REF_169', 'REF_170', 'REF_171']  "];
}
// Function: 110.sol-Advertisement-areNoncesValid(bytes,uint64[],uint64[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->43;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < nonces.length

IRs:
REF_202 -> LENGTH nonces
TMP_215(bool) = i < REF_202
CONDITION TMP_215"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
timestamp = bytes8(timestampList[i])

IRs:
REF_203(uint64) -> timestampList[i]
TMP_216 = CONVERT REF_203 to bytes8
timestamp(bytes8) := TMP_216(bytes8)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
nonce = bytes8(nonces[i])

IRs:
REF_204(uint64) -> nonces[i]
TMP_217 = CONVERT REF_204 to bytes8
nonce(bytes8) := TMP_217(bytes8)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
byteList = new bytes(packageName.length + timestamp.length)

IRs:
REF_205 -> LENGTH packageName
REF_206 -> LENGTH timestamp
TMP_219(uint256) = REF_205 + REF_206
TMP_220 = new bytes(TMP_219)
byteList(bytes) := TMP_220(bytes)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->16;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
j < packageName.length

IRs:
REF_207 -> LENGTH packageName
TMP_221(bool) = j < REF_207
CONDITION TMP_221"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
byteList[j] = packageName[j]

IRs:
REF_208(None) -> byteList[j]
REF_209(None) -> packageName[j]
REF_208(None) (->byteList) := REF_209(None)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
j ++

IRs:
TMP_222(uint256) := j(uint256)
j(uint256) = j + 1"];
13->11;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
j < timestamp.length

IRs:
REF_210 -> LENGTH timestamp
TMP_223(bool) = j < REF_210
CONDITION TMP_223"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
byteList[j + packageName.length] = timestamp[j]

IRs:
REF_211 -> LENGTH packageName
TMP_224(uint256) = j + REF_211
REF_212(None) -> byteList[TMP_224]
REF_213(None) -> timestamp[j]
REF_212(None) (->byteList) := REF_213(None)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
j ++

IRs:
TMP_225(uint256) := j(uint256)
j(uint256) = j + 1"];
19->17;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
result = sha256()(byteList)

IRs:
TMP_226(bytes32) = SOLIDITY_CALL sha256()(byteList)
result(bytes32) := TMP_226(bytes32)"];
20->21;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
noncePlusHash = new bytes(result.length + nonce.length)

IRs:
REF_214 -> LENGTH result
REF_215 -> LENGTH nonce
TMP_228(uint256) = REF_214 + REF_215
TMP_229 = new bytes(TMP_228)
noncePlusHash(bytes) := TMP_229(bytes)"];
21->24;
22[label="Node Type: BEGIN_LOOP 22
"];
22->25;
23[label="Node Type: END_LOOP 23
"];
23->30;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
24->22;
25[label="Node Type: IF_LOOP 25

EXPRESSION:
j < nonce.length

IRs:
REF_216 -> LENGTH nonce
TMP_230(bool) = j < REF_216
CONDITION TMP_230"];
25->26[label="True"];
25->23[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
noncePlusHash[j] = nonce[j]

IRs:
REF_217(None) -> noncePlusHash[j]
REF_218(None) -> nonce[j]
REF_217(None) (->noncePlusHash) := REF_218(None)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
j ++

IRs:
TMP_231(uint256) := j(uint256)
j(uint256) = j + 1"];
27->25;
28[label="Node Type: BEGIN_LOOP 28
"];
28->31;
29[label="Node Type: END_LOOP 29
"];
29->34;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
30->28;
31[label="Node Type: IF_LOOP 31

EXPRESSION:
j < result.length

IRs:
REF_219 -> LENGTH result
TMP_232(bool) = j < REF_219
CONDITION TMP_232"];
31->32[label="True"];
31->29[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
noncePlusHash[j + nonce.length] = result[j]

IRs:
REF_220 -> LENGTH nonce
TMP_233(uint256) = j + REF_220
REF_221(None) -> noncePlusHash[TMP_233]
REF_222(None) -> result[j]
REF_221(None) (->noncePlusHash) := REF_222(None)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
j ++

IRs:
TMP_234(uint256) := j(uint256)
j(uint256) = j + 1"];
33->31;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
result = sha256()(noncePlusHash)

IRs:
TMP_235(bytes32) = SOLIDITY_CALL sha256()(noncePlusHash)
result(bytes32) := TMP_235(bytes32)"];
34->35;
35[label="Node Type: NEW VARIABLE 35

EXPRESSION:
leadingBytes = (bytes2(0))

IRs:
TMP_236 = CONVERT 0 to bytes2
leadingBytes(bytes2[1]) = ['TMP_236(bytes2)']"];
35->36;
36[label="Node Type: NEW VARIABLE 36

EXPRESSION:
comp = 0x0000

IRs:
comp(bytes2) := 0(uint256)"];
36->37;
37[label="Node Type: INLINE ASM 37
"];
37->38;
38[label="Node Type: END INLINE ASM 38
"];
38->39;
39[label="Node Type: IF 39

EXPRESSION:
comp != leadingBytes[0]

IRs:
REF_223(bytes2) -> leadingBytes[0]
TMP_237(bool) = comp != REF_223
CONDITION TMP_237"];
39->40[label="True"];
39->41[label="False"];
40[label="Node Type: RETURN 40

EXPRESSION:
false

IRs:
RETURN False"];
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
i ++

IRs:
TMP_238(uint256) := i(uint256)
i(uint256) = i + 1"];
42->4;
43[label="Node Type: RETURN 43

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 110.sol-Advertisement-cancelCampaign(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
campaignOwner = getOwnerOfCampaign(bidId)

IRs:
TMP_172(address) = INTERNAL_CALL, Advertisement.getOwnerOfCampaign(bytes32)(bidId)
campaignOwner(address) := TMP_172(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner == msg.sender || campaignOwner == msg.sender)

IRs:
TMP_173(bool) = owner == msg.sender
TMP_174(bool) = campaignOwner == msg.sender
TMP_175(bool) = TMP_173 || TMP_174
TMP_176(None) = SOLIDITY_CALL require(bool)(TMP_175)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
budget = getBudgetOfCampaign(bidId)

IRs:
TMP_177(uint256) = INTERNAL_CALL, Advertisement.getBudgetOfCampaign(bytes32)(bidId)
budget(uint256) := TMP_177(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
advertisementFinance.withdraw(campaignOwner,budget)

IRs:
HIGH_LEVEL_CALL, dest:advertisementFinance(AdvertisementFinance), function:withdraw, arguments:['campaignOwner', 'budget']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
advertisementStorage.setCampaignBudgetById(bidId,0)

IRs:
HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:setCampaignBudgetById, arguments:['bidId', '0']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
advertisementStorage.setCampaignValidById(bidId,false)

IRs:
HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:setCampaignValidById, arguments:['bidId', 'False']  "];
}
// Function: 110.sol-Advertisement-createCampaign(string,uint256[3],uint256[],uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(budget >= price)

IRs:
TMP_136(bool) = budget >= price
TMP_137(None) = SOLIDITY_CALL require(bool)(TMP_136)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(endDate >= startDate)

IRs:
TMP_138(bool) = endDate >= startDate
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newCampaign.price = price

IRs:
REF_147(uint256) -> newCampaign.price
REF_147(uint256) (->newCampaign) := price(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
newCampaign.startDate = startDate

IRs:
REF_148(uint256) -> newCampaign.startDate
REF_148(uint256) (->newCampaign) := startDate(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
newCampaign.endDate = endDate

IRs:
REF_149(uint256) -> newCampaign.endDate
REF_149(uint256) (->newCampaign) := endDate(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
appc.allowance(msg.sender,address(this)) < budget

IRs:
TMP_140 = CONVERT this to address
TMP_141(uint256) = HIGH_LEVEL_CALL, dest:appc(AppCoins), function:allowance, arguments:['msg.sender', 'TMP_140']  
TMP_142(bool) = TMP_141 < budget
CONDITION TMP_142"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Error(createCampaign,Not enough allowance)

IRs:
Emit Error(createCampaign,Not enough allowance)"];
8->9;
9[label="Node Type: RETURN 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
appc.transferFrom(msg.sender,address(advertisementFinance),budget)

IRs:
TMP_144 = CONVERT advertisementFinance to address
TMP_145(uint256) = HIGH_LEVEL_CALL, dest:appc(AppCoins), function:transferFrom, arguments:['msg.sender', 'TMP_144', 'budget']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
advertisementFinance.increaseBalance(msg.sender,budget)

IRs:
HIGH_LEVEL_CALL, dest:advertisementFinance(AdvertisementFinance), function:increaseBalance, arguments:['msg.sender', 'budget']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
newCampaign.budget = budget

IRs:
REF_153(uint256) -> newCampaign.budget
REF_153(uint256) (->newCampaign) := budget(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
newCampaign.owner = msg.sender

IRs:
REF_154(address) -> newCampaign.owner
REF_154(address) (->newCampaign) := msg.sender(address)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
newCampaign.valid = true

IRs:
REF_155(bool) -> newCampaign.valid
REF_155(bool) (->newCampaign) := True(bool)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
newCampaign.bidId = uintToBytes(bidIdList.length)

IRs:
REF_156(bytes32) -> newCampaign.bidId
REF_157 -> LENGTH bidIdList
TMP_147(bytes32) = INTERNAL_CALL, Advertisement.uintToBytes(uint256)(REF_157)
REF_156(bytes32) (->newCampaign) := TMP_147(bytes32)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
addCampaign(newCampaign)

IRs:
INTERNAL_CALL, Advertisement.addCampaign(CampaignLibrary.Campaign)(newCampaign)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
CampaignInformation(newCampaign.bidId,newCampaign.owner,,packageName,countries,vercodes)

IRs:
REF_158(bytes32) -> newCampaign.bidId
REF_159(address) -> newCampaign.owner
Emit CampaignInformation(REF_158,REF_159,,packageName,countries,vercodes)"];
}
// Function: 110.sol-Advertisement-division(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_quotient = numerator / denominator

IRs:
TMP_239(uint256) = numerator / denominator
_quotient(uint256) := TMP_239(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_quotient

IRs:
RETURN _quotient"];
}
// Function: 110.sol-Advertisement-getAdvertisementStorageAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(advertisementFinance))

IRs:
TMP_132 = CONVERT advertisementFinance to address
TMP_133(bool) = msg.sender == TMP_132
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
address(advertisementStorage)

IRs:
TMP_135 = CONVERT advertisementStorage to address
RETURN TMP_135"];
3[label="Node Type: RETURN 3

EXPRESSION:
_contract

IRs:
RETURN _contract"];
}
// Function: 110.sol-Advertisement-getBidIdList()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
bidIdList

IRs:
RETURN bidIdList"];
}
// Function: 110.sol-Advertisement-getBudgetOfCampaign(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
advertisementStorage.getCampaignBudgetById(bidId)

IRs:
TMP_185(uint256) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignBudgetById, arguments:['bidId']  
RETURN TMP_185"];
}
// Function: 110.sol-Advertisement-getCampaignValidity(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
advertisementStorage.getCampaignValidById(bidId)

IRs:
TMP_181(bool) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignValidById, arguments:['bidId']  
RETURN TMP_181"];
}
// Function: 110.sol-Advertisement-getEndDateOfCampaign(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
advertisementStorage.getCampaignEndDateById(bidId)

IRs:
TMP_184(uint256) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignEndDateById, arguments:['bidId']  
RETURN TMP_184"];
}
// Function: 110.sol-Advertisement-getOwnerOfCampaign(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
advertisementStorage.getCampaignOwnerById(bidId)

IRs:
TMP_186(address) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignOwnerById, arguments:['bidId']  
RETURN TMP_186"];
}
// Function: 110.sol-Advertisement-getPriceOfCampaign(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
advertisementStorage.getCampaignPriceById(bidId)

IRs:
TMP_182(uint256) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignPriceById, arguments:['bidId']  
RETURN TMP_182"];
}
// Function: 110.sol-Advertisement-getStartDateOfCampaign(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
advertisementStorage.getCampaignStartDateById(bidId)

IRs:
TMP_183(uint256) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignStartDateById, arguments:['bidId']  
RETURN TMP_183"];
}
// Function: 110.sol-Advertisement-isCampaignValid(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
startDate = advertisementStorage.getCampaignStartDateById(bidId)

IRs:
TMP_187(uint256) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignStartDateById, arguments:['bidId']  
startDate(uint256) := TMP_187(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
endDate = advertisementStorage.getCampaignEndDateById(bidId)

IRs:
TMP_188(uint256) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignEndDateById, arguments:['bidId']  
endDate(uint256) := TMP_188(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
valid = advertisementStorage.getCampaignValidById(bidId)

IRs:
TMP_189(bool) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignValidById, arguments:['bidId']  
valid(bool) := TMP_189(bool)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nowInMilliseconds = now * 1000

IRs:
TMP_190(uint256) = now * 1000
nowInMilliseconds(uint256) := TMP_190(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
valid && startDate < nowInMilliseconds && endDate > nowInMilliseconds

IRs:
TMP_191(bool) = startDate < nowInMilliseconds
TMP_192(bool) = valid && TMP_191
TMP_193(bool) = endDate > nowInMilliseconds
TMP_194(bool) = TMP_192 && TMP_193
RETURN TMP_194"];
}
// Function: 110.sol-Advertisement-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_241(bool) = msg.sender == owner
TMP_242(None) = SOLIDITY_CALL require(bool)(TMP_241)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 110.sol-Advertisement-payFromCampaign(bytes32,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
devShare = 85

IRs:
devShare(uint256) := 85(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
appstoreShare = 10

IRs:
appstoreShare(uint256) := 10(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
oemShare = 5

IRs:
oemShare(uint256) := 5(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
price = advertisementStorage.getCampaignPriceById(bidId)

IRs:
TMP_195(uint256) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignPriceById, arguments:['bidId']  
price(uint256) := TMP_195(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
budget = advertisementStorage.getCampaignBudgetById(bidId)

IRs:
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignBudgetById, arguments:['bidId']  
budget(uint256) := TMP_196(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
campaignOwner = advertisementStorage.getCampaignOwnerById(bidId)

IRs:
TMP_197(address) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignOwnerById, arguments:['bidId']  
campaignOwner(address) := TMP_197(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(budget > 0)

IRs:
TMP_198(bool) = budget > 0
TMP_199(None) = SOLIDITY_CALL require(bool)(TMP_198)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(budget >= price)

IRs:
TMP_200(bool) = budget >= price
TMP_201(None) = SOLIDITY_CALL require(bool)(TMP_200)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
advertisementFinance.pay(campaignOwner,msg.sender,division(price * devShare,100))

IRs:
TMP_202(uint256) = price * devShare
TMP_203(uint256) = INTERNAL_CALL, Advertisement.division(uint256,uint256)(TMP_202,100)
HIGH_LEVEL_CALL, dest:advertisementFinance(AdvertisementFinance), function:pay, arguments:['campaignOwner', 'msg.sender', 'TMP_203']  "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
advertisementFinance.pay(campaignOwner,appstore,division(price * appstoreShare,100))

IRs:
TMP_205(uint256) = price * appstoreShare
TMP_206(uint256) = INTERNAL_CALL, Advertisement.division(uint256,uint256)(TMP_205,100)
HIGH_LEVEL_CALL, dest:advertisementFinance(AdvertisementFinance), function:pay, arguments:['campaignOwner', 'appstore', 'TMP_206']  "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
advertisementFinance.pay(campaignOwner,oem,division(price * oemShare,100))

IRs:
TMP_208(uint256) = price * oemShare
TMP_209(uint256) = INTERNAL_CALL, Advertisement.division(uint256,uint256)(TMP_208,100)
HIGH_LEVEL_CALL, dest:advertisementFinance(AdvertisementFinance), function:pay, arguments:['campaignOwner', 'oem', 'TMP_209']  "];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
newBudget = budget - price

IRs:
TMP_211(uint256) = budget - price
newBudget(uint256) := TMP_211(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
advertisementStorage.setCampaignBudgetById(bidId,newBudget)

IRs:
HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:setCampaignBudgetById, arguments:['bidId', 'newBudget']  "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
newBudget < price

IRs:
TMP_213(bool) = newBudget < price
CONDITION TMP_213"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
advertisementStorage.setCampaignValidById(bidId,false)

IRs:
HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:setCampaignValidById, arguments:['bidId', 'False']  "];
15->16;
16[label="Node Type: END_IF 16
"];
}
// Function: 110.sol-Advertisement-registerPoA(string,bytes32,uint64[],uint64[],address,address,string,bytes2)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isCampaignValid(bidId)

IRs:
TMP_154(bool) = INTERNAL_CALL, Advertisement.isCampaignValid(bytes32)(bidId)
TMP_155 = UnaryType.BANG TMP_154 
CONDITION TMP_155"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Error(registerPoA,Registering a Proof of attention to a invalid campaign)

IRs:
Emit Error(registerPoA,Registering a Proof of attention to a invalid campaign)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
timestampList.length != expectedPoALength

IRs:
REF_172 -> LENGTH timestampList
TMP_157(bool) = REF_172 != expectedPoALength
CONDITION TMP_157"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Error(registerPoA,Proof-of-attention should have exactly 12 proofs)

IRs:
Emit Error(registerPoA,Proof-of-attention should have exactly 12 proofs)"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
timestampList.length != nonces.length

IRs:
REF_173 -> LENGTH timestampList
REF_174 -> LENGTH nonces
TMP_159(bool) = REF_173 != REF_174
CONDITION TMP_159"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Error(registerPoA,Nounce list and timestamp list must have same length)

IRs:
Emit Error(registerPoA,Nounce list and timestamp list must have same length)"];
10->11;
11[label="Node Type: RETURN 11
"];
12[label="Node Type: END_IF 12
"];
12->15;
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->23;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i < timestampList.length - 1

IRs:
REF_175 -> LENGTH timestampList
TMP_161(uint256) = REF_175 - 1
TMP_162(bool) = i < TMP_161
CONDITION TMP_162"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
timestampDiff = (timestampList[i + 1] - timestampList[i])

IRs:
TMP_163(uint256) = i + 1
REF_176(uint64) -> timestampList[TMP_163]
REF_177(uint64) -> timestampList[i]
TMP_164(uint64) = REF_176 - REF_177
timestampDiff(uint256) := TMP_164(uint64)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
(timestampDiff / 1000) != 10

IRs:
TMP_165(uint256) = timestampDiff / 1000
TMP_166(bool) = TMP_165 != 10
CONDITION TMP_166"];
18->19[label="True"];
18->21[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Error(registerPoA,Timestamps should be spaced exactly 10 secounds)

IRs:
Emit Error(registerPoA,Timestamps should be spaced exactly 10 secounds)"];
19->20;
20[label="Node Type: RETURN 20
"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_168(uint256) := i(uint256)
i(uint256) = i + 1"];
22->16;
23[label="Node Type: IF 23

EXPRESSION:
userAttributions[msg.sender][bidId]

IRs:
REF_178(mapping(bytes32 => bool)) -> userAttributions[msg.sender]
REF_179(bool) -> REF_178[bidId]
CONDITION REF_179"];
23->24[label="True"];
23->26[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
Error(registerPoA,User already registered a proof of attention for this campaign)

IRs:
Emit Error(registerPoA,User already registered a proof of attention for this campaign)"];
24->25;
25[label="Node Type: RETURN 25
"];
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
userAttributions[msg.sender][bidId] = true

IRs:
REF_180(mapping(bytes32 => bool)) -> userAttributions[msg.sender]
REF_181(bool) -> REF_180[bidId]
REF_181(bool) (->userAttributions) := True(bool)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
payFromCampaign(bidId,appstore,oem)

IRs:
INTERNAL_CALL, Advertisement.payFromCampaign(bytes32,address,address)(bidId,appstore,oem)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
PoARegistered(bidId,packageName,timestampList,nonces,walletName,countryCode)

IRs:
Emit PoARegistered(bidId,packageName,timestampList,nonces,walletName,countryCode)"];
}
// Function: 110.sol-Advertisement-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
expectedPoALength = 12

IRs:
expectedPoALength(uint256) := 12(uint256)"];
}
// Function: 110.sol-Advertisement-uintToBytes(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
b = bytes32(i)

IRs:
TMP_240 = CONVERT i to bytes32
b(bytes32) := TMP_240(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 110.sol-Advertisement-upgradeFinance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
newAdvFinance = AdvertisementFinance(addrAdverFinance)

IRs:
TMP_106 = CONVERT addrAdverFinance to AdvertisementFinance
newAdvFinance(AdvertisementFinance) := TMP_106(AdvertisementFinance)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->15;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < bidIdList.length

IRs:
REF_113 -> LENGTH bidIdList
TMP_107(bool) = i < REF_113
CONDITION TMP_107"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
dev = advertisementStorage.getCampaignOwnerById(bidIdList[i])

IRs:
REF_115(bytes32) -> bidIdList[i]
TMP_108(address) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignOwnerById, arguments:['REF_115']  
dev(address) := TMP_108(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
devBalance.balance[dev] == 0

IRs:
REF_116(mapping(address => uint256)) -> devBalance.balance
REF_117(uint256) -> REF_116[dev]
TMP_109(bool) = REF_117 == 0
CONDITION TMP_109"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
devBalance.devs.push(dev)

IRs:
REF_118(address[]) -> devBalance.devs
REF_120 -> LENGTH REF_118
TMP_111(uint256) := REF_120(uint256)
TMP_112(uint256) = TMP_111 + 1
REF_120(uint256) (->devBalance) := TMP_112(uint256)
REF_121(address) -> REF_118[TMP_111]
REF_121(address) (->devBalance) := dev(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
devBalance.balance[dev] += advertisementStorage.getCampaignBudgetById(bidIdList[i])

IRs:
REF_122(mapping(address => uint256)) -> devBalance.balance
REF_123(uint256) -> REF_122[dev]
REF_125(bytes32) -> bidIdList[i]
TMP_113(uint256) = HIGH_LEVEL_CALL, dest:advertisementStorage(AdvertisementStorage), function:getCampaignBudgetById, arguments:['REF_125']  
REF_123(-> devBalance) = REF_123 + TMP_113"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_114(uint256) := i(uint256)
i(uint256) = i + 1"];
12->6;
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->20;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i < devBalance.devs.length

IRs:
REF_126(address[]) -> devBalance.devs
REF_127 -> LENGTH REF_126
TMP_115(bool) = i < REF_127
CONDITION TMP_115"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
advertisementFinance.pay(devBalance.devs[i],address(newAdvFinance),devBalance.balance[devBalance.devs[i]])

IRs:
REF_129(address[]) -> devBalance.devs
REF_130(address) -> REF_129[i]
TMP_116 = CONVERT newAdvFinance to address
REF_131(mapping(address => uint256)) -> devBalance.balance
REF_132(address[]) -> devBalance.devs
REF_133(address) -> REF_132[i]
REF_134(uint256) -> REF_131[REF_133]
HIGH_LEVEL_CALL, dest:advertisementFinance(AdvertisementFinance), function:pay, arguments:['REF_130', 'TMP_116', 'REF_134']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
newAdvFinance.increaseBalance(devBalance.devs[i],devBalance.balance[devBalance.devs[i]])

IRs:
REF_136(address[]) -> devBalance.devs
REF_137(address) -> REF_136[i]
REF_138(mapping(address => uint256)) -> devBalance.balance
REF_139(address[]) -> devBalance.devs
REF_140(address) -> REF_139[i]
REF_141(uint256) -> REF_138[REF_140]
HIGH_LEVEL_CALL, dest:newAdvFinance(AdvertisementFinance), function:increaseBalance, arguments:['REF_137', 'REF_141']  "];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i ++

IRs:
TMP_119(uint256) := i(uint256)
i(uint256) = i + 1"];
19->16;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
oldBalance = appc.balances(address(advertisementFinance))

IRs:
TMP_120 = CONVERT advertisementFinance to address
TMP_121(uint256) = HIGH_LEVEL_CALL, dest:appc(AppCoins), function:balances, arguments:['TMP_120']  
oldBalance(uint256) := TMP_121(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool)(oldBalance == 0)

IRs:
TMP_122(bool) = oldBalance == 0
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
advertisementFinance = newAdvFinance

IRs:
advertisementFinance(AdvertisementFinance) := newAdvFinance(AdvertisementFinance)"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Advertisement.onlyOwner()()"];
23->1;
}
// Function: 110.sol-Advertisement-upgradeStorage(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < bidIdList.length

IRs:
REF_143 -> LENGTH bidIdList
TMP_125(bool) = i < REF_143
CONDITION TMP_125"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
cancelCampaign(bidIdList[i])

IRs:
REF_144(bytes32) -> bidIdList[i]
INTERNAL_CALL, Advertisement.cancelCampaign(bytes32)(REF_144)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_127(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
delete bidIdList

IRs:
bidIdList = delete bidIdList "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
advertisementFinance.reset()

IRs:
HIGH_LEVEL_CALL, dest:advertisementFinance(AdvertisementFinance), function:reset, arguments:[]  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
advertisementFinance.setAdsStorageAddress(addrAdverStorage)

IRs:
HIGH_LEVEL_CALL, dest:advertisementFinance(AdvertisementFinance), function:setAdsStorageAddress, arguments:['addrAdverStorage']  "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
advertisementStorage = AdvertisementStorage(addrAdverStorage)

IRs:
TMP_130 = CONVERT addrAdverStorage to AdvertisementStorage
advertisementStorage(AdvertisementStorage) := TMP_130(AdvertisementStorage)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Advertisement.onlyOwner()()"];
11->3;
}
// Function: 110.sol-AdvertisementFinance-AdvertisementFinance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
appc = AppCoins(_addrAppc)

IRs:
TMP_37 = CONVERT _addrAppc to AppCoins
appc(AppCoins) := TMP_37(AppCoins)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
advStorageContract = 0x0

IRs:
advStorageContract(address) := 0(uint256)"];
}
// Function: 110.sol-AdvertisementFinance-increaseBalance(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
developerExists[_developer] == false

IRs:
REF_66(bool) -> developerExists[_developer]
TMP_46(bool) = REF_66 == False
CONDITION TMP_46"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
developers.push(_developer)

IRs:
REF_68 -> LENGTH developers
TMP_48(uint256) := REF_68(uint256)
TMP_49(uint256) = TMP_48 + 1
REF_68(uint256) (->developers) := TMP_49(uint256)
REF_69(address) -> developers[TMP_48]
REF_69(address) (->developers) := _developer(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
developerExists[_developer] = true

IRs:
REF_70(bool) -> developerExists[_developer]
REF_70(bool) (->developerExists) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceDevelopers[_developer] += _value

IRs:
REF_71(uint256) -> balanceDevelopers[_developer]
REF_71(-> balanceDevelopers) = REF_71 + _value"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAds()

IRs:
MODIFIER_CALL, AdvertisementFinance.onlyAds()()"];
6->1;
}
// Function: 110.sol-AdvertisementFinance-onlyAds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(advertisementContract == msg.sender)

IRs:
TMP_63(bool) = advertisementContract == msg.sender
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 110.sol-AdvertisementFinance-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == msg.sender)

IRs:
TMP_61(bool) = owner == msg.sender
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 110.sol-AdvertisementFinance-onlyOwnerOrAds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == advertisementContract)

IRs:
TMP_65(bool) = msg.sender == owner
TMP_66(bool) = msg.sender == advertisementContract
TMP_67(bool) = TMP_65 || TMP_66
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 110.sol-AdvertisementFinance-pay(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
appc.transfer(_destination,_value)

IRs:
TMP_51(bool) = HIGH_LEVEL_CALL, dest:appc(AppCoins), function:transfer, arguments:['_destination', '_value']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceDevelopers[_developer] -= _value

IRs:
REF_73(uint256) -> balanceDevelopers[_developer]
REF_73(-> balanceDevelopers) = REF_73 - _value"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAds()

IRs:
MODIFIER_CALL, AdvertisementFinance.onlyAds()()"];
3->1;
}
// Function: 110.sol-AdvertisementFinance-reset()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < developers.length

IRs:
REF_77 -> LENGTH developers
TMP_57(bool) = i < REF_77
CONDITION TMP_57"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
withdraw(developers[i],balanceDevelopers[developers[i]])

IRs:
REF_78(address) -> developers[i]
REF_79(address) -> developers[i]
REF_80(uint256) -> balanceDevelopers[REF_79]
INTERNAL_CALL, AdvertisementFinance.withdraw(address,uint256)(REF_78,REF_80)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_59(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwnerOrAds()

IRs:
MODIFIER_CALL, AdvertisementFinance.onlyOwnerOrAds()()"];
7->3;
}
// Function: 110.sol-AdvertisementFinance-setAdsContractAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
advertisementContract != 0x0

IRs:
TMP_40(bool) = advertisementContract != 0
CONDITION TMP_40"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
adsContract = Advertisement(advertisementContract)

IRs:
TMP_41 = CONVERT advertisementContract to Advertisement
adsContract(Advertisement) := TMP_41(Advertisement)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
adsStorage = adsContract.getAdvertisementStorageAddress()

IRs:
TMP_42(address) = HIGH_LEVEL_CALL, dest:adsContract(Advertisement), function:getAdvertisementStorageAddress, arguments:[]  
adsStorage(address) := TMP_42(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(adsStorage == advStorageContract)

IRs:
TMP_43(bool) = adsStorage == advStorageContract
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
advertisementContract = _addrAdvert

IRs:
advertisementContract(address) := _addrAdvert(address)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, AdvertisementFinance.onlyOwner()()"];
7->1;
}
// Function: 110.sol-AdvertisementFinance-setAdsStorageAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
reset()

IRs:
INTERNAL_CALL, AdvertisementFinance.reset()()"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
advStorageContract = _addrStorage

IRs:
advStorageContract(address) := _addrStorage(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwnerOrAds()

IRs:
MODIFIER_CALL, AdvertisementFinance.onlyOwnerOrAds()()"];
3->1;
}
// Function: 110.sol-AdvertisementFinance-withdraw(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceDevelopers[_developer] >= _value)

IRs:
REF_74(uint256) -> balanceDevelopers[_developer]
TMP_53(bool) = REF_74 >= _value
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
appc.transfer(_developer,_value)

IRs:
TMP_55(bool) = HIGH_LEVEL_CALL, dest:appc(AppCoins), function:transfer, arguments:['_developer', '_value']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceDevelopers[_developer] -= _value

IRs:
REF_76(uint256) -> balanceDevelopers[_developer]
REF_76(-> balanceDevelopers) = REF_76 - _value"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwnerOrAds()

IRs:
MODIFIER_CALL, AdvertisementFinance.onlyOwnerOrAds()()"];
4->1;
}
// Function: 110.sol-AdvertisementStorage-AdvertisementStorage()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowedAddresses[msg.sender] = true

IRs:
REF_2(bool) -> allowedAddresses[msg.sender]
REF_2(bool) (->allowedAddresses) := True(bool)"];
}
// Function: 110.sol-AdvertisementStorage-emitEvent(CampaignLibrary.Campaign)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
campaigns[campaign.bidId].bidId == 0x0

IRs:
REF_47(bytes32) -> campaign.bidId
REF_48(CampaignLibrary.Campaign) -> campaigns[REF_47]
REF_49(bytes32) -> REF_48.bidId
TMP_31(bool) = REF_49 == 0
CONDITION TMP_31"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
CampaignCreated(campaign.bidId,campaign.price,campaign.budget,campaign.startDate,campaign.endDate,campaign.valid,campaign.owner)

IRs:
REF_50(bytes32) -> campaign.bidId
REF_51(uint256) -> campaign.price
REF_52(uint256) -> campaign.budget
REF_53(uint256) -> campaign.startDate
REF_54(uint256) -> campaign.endDate
REF_55(bool) -> campaign.valid
REF_56(address) -> campaign.owner
Emit CampaignCreated(REF_50,REF_51,REF_52,REF_53,REF_54,REF_55,REF_56)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
CampaignUpdated(campaign.bidId,campaign.price,campaign.budget,campaign.startDate,campaign.endDate,campaign.valid,campaign.owner)

IRs:
REF_57(bytes32) -> campaign.bidId
REF_58(uint256) -> campaign.price
REF_59(uint256) -> campaign.budget
REF_60(uint256) -> campaign.startDate
REF_61(uint256) -> campaign.endDate
REF_62(bool) -> campaign.valid
REF_63(address) -> campaign.owner
Emit CampaignUpdated(REF_57,REF_58,REF_59,REF_60,REF_61,REF_62,REF_63)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 110.sol-AdvertisementStorage-getCampaign(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
campaign = campaigns[campaignId]

IRs:
REF_4(CampaignLibrary.Campaign) -> campaigns[campaignId]
campaign(CampaignLibrary.Campaign) := REF_4(CampaignLibrary.Campaign)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(campaign.bidId,campaign.price,campaign.budget,campaign.startDate,campaign.endDate,campaign.valid,campaign.owner)

IRs:
REF_5(bytes32) -> campaign.bidId
REF_6(uint256) -> campaign.price
REF_7(uint256) -> campaign.budget
REF_8(uint256) -> campaign.startDate
REF_9(uint256) -> campaign.endDate
REF_10(bool) -> campaign.valid
REF_11(address) -> campaign.owner
RETURN REF_5,REF_6,REF_7,REF_8,REF_9,REF_10,REF_11"];
}
// Function: 110.sol-AdvertisementStorage-getCampaignBudgetById(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
campaigns[bidId].budget

IRs:
REF_22(CampaignLibrary.Campaign) -> campaigns[bidId]
REF_23(uint256) -> REF_22.budget
RETURN REF_23"];
}
// Function: 110.sol-AdvertisementStorage-getCampaignEndDateById(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
campaigns[bidId].endDate

IRs:
REF_32(CampaignLibrary.Campaign) -> campaigns[bidId]
REF_33(uint256) -> REF_32.endDate
RETURN REF_33"];
}
// Function: 110.sol-AdvertisementStorage-getCampaignOwnerById(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
campaigns[bidId].owner

IRs:
REF_42(CampaignLibrary.Campaign) -> campaigns[bidId]
REF_43(address) -> REF_42.owner
RETURN REF_43"];
}
// Function: 110.sol-AdvertisementStorage-getCampaignPriceById(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
campaigns[bidId].price

IRs:
REF_17(CampaignLibrary.Campaign) -> campaigns[bidId]
REF_18(uint256) -> REF_17.price
RETURN REF_18"];
}
// Function: 110.sol-AdvertisementStorage-getCampaignStartDateById(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
campaigns[bidId].startDate

IRs:
REF_27(CampaignLibrary.Campaign) -> campaigns[bidId]
REF_28(uint256) -> REF_27.startDate
RETURN REF_28"];
}
// Function: 110.sol-AdvertisementStorage-getCampaignValidById(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
campaigns[bidId].valid

IRs:
REF_37(CampaignLibrary.Campaign) -> campaigns[bidId]
REF_38(bool) -> REF_37.valid
RETURN REF_38"];
}
// Function: 110.sol-AdvertisementStorage-onlyAllowedAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowedAddresses[msg.sender])

IRs:
REF_64(bool) -> allowedAddresses[msg.sender]
TMP_36(None) = SOLIDITY_CALL require(bool)(REF_64)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 110.sol-AdvertisementStorage-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_34(bool) = msg.sender == owner
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 110.sol-AdvertisementStorage-setAllowedAddresses(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowedAddresses[newAddress] = isAllowed

IRs:
REF_3(bool) -> allowedAddresses[newAddress]
REF_3(bool) (->allowedAddresses) := isAllowed(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, AdvertisementStorage.onlyOwner()()"];
2->1;
}
// Function: 110.sol-AdvertisementStorage-setCampaign(bytes32,uint256,uint256,uint256,uint256,bool,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
campaign = campaigns[campaign.bidId]

IRs:
REF_12(bytes32) -> campaign.bidId
REF_13(CampaignLibrary.Campaign) -> campaigns[REF_12]
campaign(CampaignLibrary.Campaign) := REF_13(CampaignLibrary.Campaign)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
campaign = CampaignLibrary.Campaign({bidId:bidId,price:price,budget:budget,startDate:startDate,endDate:endDate,valid:valid,owner:owner})

IRs:
TMP_16(CampaignLibrary.Campaign) = new Campaign(bidId,price,budget,startDate,endDate,valid,owner)
campaign(CampaignLibrary.Campaign) := TMP_16(CampaignLibrary.Campaign)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
emitEvent(campaign)

IRs:
INTERNAL_CALL, AdvertisementStorage.emitEvent(CampaignLibrary.Campaign)(campaign)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
campaigns[campaign.bidId] = campaign

IRs:
REF_15(bytes32) -> campaign.bidId
REF_16(CampaignLibrary.Campaign) -> campaigns[REF_15]
REF_16(CampaignLibrary.Campaign) (->campaigns) := campaign(CampaignLibrary.Campaign)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAllowedAddress()

IRs:
MODIFIER_CALL, AdvertisementStorage.onlyAllowedAddress()()"];
5->1;
}
// Function: 110.sol-AdvertisementStorage-setCampaignBudgetById(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
campaigns[bidId].budget = newBudget

IRs:
REF_24(CampaignLibrary.Campaign) -> campaigns[bidId]
REF_25(uint256) -> REF_24.budget
REF_25(uint256) (->campaigns) := newBudget(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitEvent(campaigns[bidId])

IRs:
REF_26(CampaignLibrary.Campaign) -> campaigns[bidId]
INTERNAL_CALL, AdvertisementStorage.emitEvent(CampaignLibrary.Campaign)(REF_26)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAllowedAddress()

IRs:
MODIFIER_CALL, AdvertisementStorage.onlyAllowedAddress()()"];
3->1;
}
// Function: 110.sol-AdvertisementStorage-setCampaignEndDateById(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
campaigns[bidId].endDate = newEndDate

IRs:
REF_34(CampaignLibrary.Campaign) -> campaigns[bidId]
REF_35(uint256) -> REF_34.endDate
REF_35(uint256) (->campaigns) := newEndDate(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitEvent(campaigns[bidId])

IRs:
REF_36(CampaignLibrary.Campaign) -> campaigns[bidId]
INTERNAL_CALL, AdvertisementStorage.emitEvent(CampaignLibrary.Campaign)(REF_36)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAllowedAddress()

IRs:
MODIFIER_CALL, AdvertisementStorage.onlyAllowedAddress()()"];
3->1;
}
// Function: 110.sol-AdvertisementStorage-setCampaignOwnerById(bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
campaigns[bidId].owner = newOwner

IRs:
REF_44(CampaignLibrary.Campaign) -> campaigns[bidId]
REF_45(address) -> REF_44.owner
REF_45(address) (->campaigns) := newOwner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitEvent(campaigns[bidId])

IRs:
REF_46(CampaignLibrary.Campaign) -> campaigns[bidId]
INTERNAL_CALL, AdvertisementStorage.emitEvent(CampaignLibrary.Campaign)(REF_46)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAllowedAddress()

IRs:
MODIFIER_CALL, AdvertisementStorage.onlyAllowedAddress()()"];
3->1;
}
// Function: 110.sol-AdvertisementStorage-setCampaignPriceById(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
campaigns[bidId].price = price

IRs:
REF_19(CampaignLibrary.Campaign) -> campaigns[bidId]
REF_20(uint256) -> REF_19.price
REF_20(uint256) (->campaigns) := price(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitEvent(campaigns[bidId])

IRs:
REF_21(CampaignLibrary.Campaign) -> campaigns[bidId]
INTERNAL_CALL, AdvertisementStorage.emitEvent(CampaignLibrary.Campaign)(REF_21)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAllowedAddress()

IRs:
MODIFIER_CALL, AdvertisementStorage.onlyAllowedAddress()()"];
3->1;
}
// Function: 110.sol-AdvertisementStorage-setCampaignStartDateById(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
campaigns[bidId].startDate = newStartDate

IRs:
REF_29(CampaignLibrary.Campaign) -> campaigns[bidId]
REF_30(uint256) -> REF_29.startDate
REF_30(uint256) (->campaigns) := newStartDate(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitEvent(campaigns[bidId])

IRs:
REF_31(CampaignLibrary.Campaign) -> campaigns[bidId]
INTERNAL_CALL, AdvertisementStorage.emitEvent(CampaignLibrary.Campaign)(REF_31)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAllowedAddress()

IRs:
MODIFIER_CALL, AdvertisementStorage.onlyAllowedAddress()()"];
3->1;
}
// Function: 110.sol-AdvertisementStorage-setCampaignValidById(bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
campaigns[bidId].valid = isValid

IRs:
REF_39(CampaignLibrary.Campaign) -> campaigns[bidId]
REF_40(bool) -> REF_39.valid
REF_40(bool) (->campaigns) := isValid(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
emitEvent(campaigns[bidId])

IRs:
REF_41(CampaignLibrary.Campaign) -> campaigns[bidId]
INTERNAL_CALL, AdvertisementStorage.emitEvent(CampaignLibrary.Campaign)(REF_41)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAllowedAddress()

IRs:
MODIFIER_CALL, AdvertisementStorage.onlyAllowedAddress()()"];
3->1;
}
// Function: 110.sol-AppCoins-AppCoins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token_name = AppCoins

IRs:
token_name(bytes32) := AppCoins(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token_symbol = APPC

IRs:
token_symbol(bytes32) := APPC(string)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_totalSupply = 1000000

IRs:
_totalSupply(uint256) := 1000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = _totalSupply * 10 ** uint256(decimals)

IRs:
TMP_69 = CONVERT decimals to uint256
TMP_70(uint256) = 10 ** TMP_69
TMP_71(uint256) = _totalSupply * TMP_70
totalSupply(uint256) := TMP_71(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[owner] = totalSupply

IRs:
REF_81(uint256) -> balances[owner]
REF_81(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 110.sol-AppCoins-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_72(bool) = _to != 0
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_from] >= _value)

IRs:
REF_83(uint256) -> balances[_from]
TMP_74(bool) = REF_83 >= _value
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances[_to] + _value > balances[_to])

IRs:
REF_84(uint256) -> balances[_to]
TMP_76(uint256) = REF_84 + _value
REF_85(uint256) -> balances[_to]
TMP_77(bool) = TMP_76 > REF_85
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balances[_from] + balances[_to]

IRs:
REF_86(uint256) -> balances[_from]
REF_87(uint256) -> balances[_to]
TMP_79(uint256) = REF_86 + REF_87
previousBalances(uint256) := TMP_79(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] -= _value

IRs:
REF_88(uint256) -> balances[_from]
REF_88(-> balances) = REF_88 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] += _value

IRs:
REF_89(uint256) -> balances[_to]
REF_89(-> balances) = REF_89 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(balances[_from] + balances[_to] == previousBalances)

IRs:
REF_90(uint256) -> balances[_from]
REF_91(uint256) -> balances[_to]
TMP_81(uint256) = REF_90 + REF_91
TMP_82(bool) = TMP_81 == previousBalances
TMP_83(None) = SOLIDITY_CALL assert(bool)(TMP_82)"];
}
// Function: 110.sol-AppCoins-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_103(mapping(address => uint256)) -> allowance[msg.sender]
REF_104(uint256) -> REF_103[_spender]
REF_104(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 110.sol-AppCoins-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_82(uint256) -> balances[_owner]
RETURN REF_82"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 110.sol-AppCoins-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_105(uint256) -> balances[msg.sender]
TMP_94(bool) = REF_105 >= _value
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_106(uint256) -> balances[msg.sender]
REF_106(-> balances) = REF_106 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 110.sol-AppCoins-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[_from] >= _value)

IRs:
REF_107(uint256) -> balances[_from]
TMP_97(bool) = REF_107 >= _value
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_108(mapping(address => uint256)) -> allowance[_from]
REF_109(uint256) -> REF_108[msg.sender]
TMP_99(bool) = _value <= REF_109
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_110(uint256) -> balances[_from]
REF_110(-> balances) = REF_110 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_111(mapping(address => uint256)) -> allowance[_from]
REF_112(uint256) -> REF_111[msg.sender]
REF_112(-> allowance) = REF_112 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 110.sol-AppCoins-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
token_name

IRs:
RETURN token_name"];
}
// Function: 110.sol-AppCoins-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 110.sol-AppCoins-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
token_symbol

IRs:
RETURN token_symbol"];
}
// Function: 110.sol-AppCoins-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]

IRs:
REF_92(uint256) -> balances[msg.sender]
TMP_84(bool) = REF_92 >= _amount
TMP_85(bool) = _amount > 0
TMP_86(bool) = TMP_84 && TMP_85
REF_93(uint256) -> balances[_to]
TMP_87(uint256) = REF_93 + _amount
REF_94(uint256) -> balances[_to]
TMP_88(bool) = TMP_87 > REF_94
TMP_89(bool) = TMP_86 && TMP_88
CONDITION TMP_89"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _amount

IRs:
REF_95(uint256) -> balances[msg.sender]
REF_95(-> balances) = REF_95 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _amount

IRs:
REF_96(uint256) -> balances[_to]
REF_96(-> balances) = REF_96 + _amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 110.sol-AppCoins-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_97(mapping(address => uint256)) -> allowance[_from]
REF_98(uint256) -> REF_97[msg.sender]
TMP_91(bool) = _value <= REF_98
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_99(mapping(address => uint256)) -> allowance[_from]
REF_100(uint256) -> REF_99[msg.sender]
REF_100(-> allowance) = REF_100 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
TMP_93(bool) = INTERNAL_CALL, AppCoins._transfer(address,address,uint256)(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
allowance[_from][msg.sender]

IRs:
REF_101(mapping(address => uint256)) -> allowance[_from]
REF_102(uint256) -> REF_101[msg.sender]
RETURN REF_102"];
}
// Function: 110.sol-CampaignLibrary-convertCountryIndexToBytes(uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
countries1 = 0

IRs:
countries1(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
countries2 = 0

IRs:
countries2(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
countries3 = 0

IRs:
countries3(uint256) := 0(uint256)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->17;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < countries.length

IRs:
REF_0 -> LENGTH countries
TMP_0(bool) = i < REF_0
CONDITION TMP_0"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
index = countries[i]

IRs:
REF_1(uint256) -> countries[i]
index(uint256) := REF_1(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
index < 256

IRs:
TMP_1(bool) = index < 256
CONDITION TMP_1"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
countries1 = countries1 | uint256(1) << index

IRs:
TMP_2 = CONVERT 1 to uint256
TMP_3(uint256) = TMP_2 << index
TMP_4(uint256) = countries1 | TMP_3
countries1(uint256) := TMP_4(uint256)"];
10->15;
11[label="Node Type: IF 11

EXPRESSION:
index < 512

IRs:
TMP_5(bool) = index < 512
CONDITION TMP_5"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
countries2 = countries2 | uint256(1) << (index - 256)

IRs:
TMP_6 = CONVERT 1 to uint256
TMP_7(uint256) = index - 256
TMP_8(uint256) = TMP_6 << TMP_7
TMP_9(uint256) = countries2 | TMP_8
countries2(uint256) := TMP_9(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
countries3 = countries3 | uint256(1) << (index - 512)

IRs:
TMP_10 = CONVERT 1 to uint256
TMP_11(uint256) = index - 512
TMP_12(uint256) = TMP_10 << TMP_11
TMP_13(uint256) = countries3 | TMP_12
countries3(uint256) := TMP_13(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_14(uint256) := i(uint256)
i(uint256) = i + 1"];
16->7;
17[label="Node Type: RETURN 17

EXPRESSION:
(countries1,countries2,countries3)

IRs:
RETURN countries1,countries2,countries3"];
}
// Function: 110.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 110.sol-ERC20Interface-name()
digraph{
}
// Function: 110.sol-ERC20Interface-symbol()
digraph{
}
// Function: 110.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 110.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
}
