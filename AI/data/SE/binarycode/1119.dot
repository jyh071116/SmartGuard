digraph G {
// Function: 1119.sol-AcceptsElyxr-AcceptsElyxr(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenContract = Elyxr(_tokenContract)

IRs:
TMP_0 = CONVERT _tokenContract to Elyxr
tokenContract(Elyxr) := TMP_0(Elyxr)"];
}
// Function: 1119.sol-AcceptsElyxr-onlyTokenContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(tokenContract))

IRs:
TMP_1 = CONVERT tokenContract to address
TMP_2(bool) = msg.sender == TMP_1
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1119.sol-AcceptsElyxr-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 1119.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 1119.sol-Elyxr-buy(address)
digraph{
}
// Function: 1119.sol-Elyxr-myDividends(bool)
digraph{
}
// Function: 1119.sol-Elyxr-myTokens()
digraph{
}
// Function: 1119.sol-Elyxr-reinvest()
digraph{
}
// Function: 1119.sol-Elyxr-transfer(address,uint256)
digraph{
}
// Function: 1119.sol-ElyxrShrimpFarmer-AcceptsElyxr(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenContract = Elyxr(_tokenContract)

IRs:
TMP_4 = CONVERT _tokenContract to Elyxr
tokenContract(Elyxr) := TMP_4(Elyxr)"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-ElyxrShrimpFarmer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ceoAddress = msg.sender

IRs:
ceoAddress(address) := msg.sender(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AcceptsElyxr(_baseContract)

IRs:
INTERNAL_CALL, AcceptsElyxr.AcceptsElyxr(address)(_baseContract)"];
2->1;
}
// Function: 1119.sol-ElyxrShrimpFarmer-_isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
size > 0

IRs:
TMP_70(bool) = size > 0
RETURN TMP_70"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-calculateEggBuy(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
calculateTrade(eth,contractBalance,marketEggs)

IRs:
TMP_58(uint256) = INTERNAL_CALL, ElyxrShrimpFarmer.calculateTrade(uint256,uint256,uint256)(eth,contractBalance,marketEggs)
RETURN TMP_58"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-calculateEggBuySimple(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
calculateEggBuy(eth,tokenContract.myTokens())

IRs:
TMP_59(uint256) = HIGH_LEVEL_CALL, dest:tokenContract(Elyxr), function:myTokens, arguments:[]  
TMP_60(uint256) = INTERNAL_CALL, ElyxrShrimpFarmer.calculateEggBuy(uint256,uint256)(eth,TMP_59)
RETURN TMP_60"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-calculateEggSell(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
calculateTrade(eggs,marketEggs,tokenContract.myTokens())

IRs:
TMP_56(uint256) = HIGH_LEVEL_CALL, dest:tokenContract(Elyxr), function:myTokens, arguments:[]  
TMP_57(uint256) = INTERNAL_CALL, ElyxrShrimpFarmer.calculateTrade(uint256,uint256,uint256)(eggs,marketEggs,TMP_56)
RETURN TMP_57"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-calculateTrade(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)))

IRs:
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['PSN', 'bs'] 
TMP_50(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['PSN', 'rs'] 
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['PSNH', 'rt'] 
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_50', 'TMP_51'] 
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_52', 'rt'] 
TMP_54(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['PSNH', 'TMP_53'] 
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_49', 'TMP_54'] 
RETURN TMP_55"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-devFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
SafeMath.div(SafeMath.mul(amount,4),100)

IRs:
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amount', '4'] 
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_61', '100'] 
RETURN TMP_62"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-getBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenContract.myTokens()

IRs:
TMP_69(uint256) = HIGH_LEVEL_CALL, dest:tokenContract(Elyxr), function:myTokens, arguments:[]  
RETURN TMP_69"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-getContractDividends()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenContract.myDividends(true)

IRs:
TMP_68(uint256) = HIGH_LEVEL_CALL, dest:tokenContract(Elyxr), function:myDividends, arguments:['True']  
RETURN TMP_68"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-getEggsSinceLastHatch(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
secondsPassed = min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]))

IRs:
REF_47(uint256) -> lastHatch[adr]
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['now', 'REF_47'] 
TMP_66(uint256) = INTERNAL_CALL, ElyxrShrimpFarmer.min(uint256,uint256)(EGGS_TO_HATCH_1SHRIMP,TMP_65)
secondsPassed(uint256) := TMP_66(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
SafeMath.mul(secondsPassed,hatcheryShrimp[adr])

IRs:
REF_49(uint256) -> hatcheryShrimp[adr]
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['secondsPassed', 'REF_49'] 
RETURN TMP_67"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-getMyEggs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender))

IRs:
REF_45(uint256) -> claimedEggs[msg.sender]
TMP_63(uint256) = INTERNAL_CALL, ElyxrShrimpFarmer.getEggsSinceLastHatch(address)(msg.sender)
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_45', 'TMP_63'] 
RETURN TMP_64"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-getMyShrimp()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hatcheryShrimp[msg.sender]

IRs:
REF_43(uint256) -> hatcheryShrimp[msg.sender]
RETURN REF_43"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-hatchEggs(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(initialized)

IRs:
TMP_22(None) = SOLIDITY_CALL require(bool)(initialized)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender

IRs:
REF_7(address) -> referrals[msg.sender]
TMP_23(bool) = REF_7 == 0
REF_8(address) -> referrals[msg.sender]
TMP_24(bool) = REF_8 != msg.sender
TMP_25(bool) = TMP_23 && TMP_24
CONDITION TMP_25"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
referrals[msg.sender] = ref

IRs:
REF_9(address) -> referrals[msg.sender]
REF_9(address) (->referrals) := ref(address)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
eggsUsed = getMyEggs()

IRs:
TMP_26(uint256) = INTERNAL_CALL, ElyxrShrimpFarmer.getMyEggs()()
eggsUsed(uint256) := TMP_26(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
newShrimp = SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP)

IRs:
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['eggsUsed', 'EGGS_TO_HATCH_1SHRIMP'] 
newShrimp(uint256) := TMP_27(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
hatcheryShrimp[msg.sender] = SafeMath.add(hatcheryShrimp[msg.sender],newShrimp)

IRs:
REF_11(uint256) -> hatcheryShrimp[msg.sender]
REF_13(uint256) -> hatcheryShrimp[msg.sender]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_13', 'newShrimp'] 
REF_11(uint256) (->hatcheryShrimp) := TMP_28(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
claimedEggs[msg.sender] = 0

IRs:
REF_14(uint256) -> claimedEggs[msg.sender]
REF_14(uint256) (->claimedEggs) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
lastHatch[msg.sender] = now

IRs:
REF_15(uint256) -> lastHatch[msg.sender]
REF_15(uint256) (->lastHatch) := now(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
claimedEggs[referrals[msg.sender]] = SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5))

IRs:
REF_16(address) -> referrals[msg.sender]
REF_17(uint256) -> claimedEggs[REF_16]
REF_19(address) -> referrals[msg.sender]
REF_20(uint256) -> claimedEggs[REF_19]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['eggsUsed', '5'] 
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_20', 'TMP_29'] 
REF_17(uint256) (->claimedEggs) := TMP_30(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
marketEggs = SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10))

IRs:
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['eggsUsed', '10'] 
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['marketEggs', 'TMP_31'] 
marketEggs(uint256) := TMP_32(uint256)"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_71(bool) = a < b
CONDITION TMP_71"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-onlyTokenContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(tokenContract))

IRs:
TMP_72 = CONVERT tokenContract to address
TMP_73(bool) = msg.sender == TMP_72
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-reinvest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
tokenContract.myDividends(true) > 1

IRs:
TMP_46(uint256) = HIGH_LEVEL_CALL, dest:tokenContract(Elyxr), function:myDividends, arguments:['True']  
TMP_47(bool) = TMP_46 > 1
CONDITION TMP_47"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenContract.reinvest()

IRs:
HIGH_LEVEL_CALL, dest:tokenContract(Elyxr), function:reinvest, arguments:[]  "];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-seedMarket(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(marketEggs == 0)

IRs:
TMP_42(bool) = marketEggs == 0
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.sender == ceoAddress)

IRs:
TMP_44(bool) = msg.sender == ceoAddress
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
initialized = true

IRs:
initialized(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
marketEggs = eggs

IRs:
marketEggs(uint256) := eggs(uint256)"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-sellEggs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(initialized)

IRs:
TMP_33(None) = SOLIDITY_CALL require(bool)(initialized)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
hasEggs = getMyEggs()

IRs:
TMP_34(uint256) = INTERNAL_CALL, ElyxrShrimpFarmer.getMyEggs()()
hasEggs(uint256) := TMP_34(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
eggValue = calculateEggSell(hasEggs)

IRs:
TMP_35(uint256) = INTERNAL_CALL, ElyxrShrimpFarmer.calculateEggSell(uint256)(hasEggs)
eggValue(uint256) := TMP_35(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
fee = devFee(eggValue)

IRs:
TMP_36(uint256) = INTERNAL_CALL, ElyxrShrimpFarmer.devFee(uint256)(eggValue)
fee(uint256) := TMP_36(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
claimedEggs[msg.sender] = 0

IRs:
REF_24(uint256) -> claimedEggs[msg.sender]
REF_24(uint256) (->claimedEggs) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
lastHatch[msg.sender] = now

IRs:
REF_25(uint256) -> lastHatch[msg.sender]
REF_25(uint256) (->lastHatch) := now(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
marketEggs = SafeMath.add(marketEggs,hasEggs)

IRs:
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['marketEggs', 'hasEggs'] 
marketEggs(uint256) := TMP_37(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
reinvest()

IRs:
INTERNAL_CALL, ElyxrShrimpFarmer.reinvest()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
tokenContract.transfer(ceoAddress,fee)

IRs:
TMP_39(bool) = HIGH_LEVEL_CALL, dest:tokenContract(Elyxr), function:transfer, arguments:['ceoAddress', 'fee']  "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tokenContract.transfer(msg.sender,SafeMath.sub(eggValue,fee))

IRs:
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['eggValue', 'fee'] 
TMP_41(bool) = HIGH_LEVEL_CALL, dest:tokenContract(Elyxr), function:transfer, arguments:['msg.sender', 'TMP_40']  "];
}
// Function: 1119.sol-ElyxrShrimpFarmer-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
EGGS_TO_HATCH_1SHRIMP = 86400

IRs:
EGGS_TO_HATCH_1SHRIMP(uint256) := 86400(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
STARTING_SHRIMP = 300

IRs:
STARTING_SHRIMP(uint256) := 300(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
PSN = 10000

IRs:
PSN(uint256) := 10000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
PSNH = 5000

IRs:
PSNH(uint256) := 5000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
initialized = false

IRs:
initialized(bool) := False(bool)"];
}
// Function: 1119.sol-ElyxrShrimpFarmer-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(initialized)

IRs:
TMP_6(None) = SOLIDITY_CALL require(bool)(initialized)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! _isContract(_from))

IRs:
TMP_7(bool) = INTERNAL_CALL, ElyxrShrimpFarmer._isContract(address)(_from)
TMP_8 = UnaryType.BANG TMP_7 
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value >= 1000000000000000)

IRs:
TMP_10(bool) = _value >= 1000000000000000
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
ElyxrBalance = tokenContract.myTokens()

IRs:
TMP_12(uint256) = HIGH_LEVEL_CALL, dest:tokenContract(Elyxr), function:myTokens, arguments:[]  
ElyxrBalance(uint256) := TMP_12(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
eggsBought = calculateEggBuy(_value,SafeMath.sub(ElyxrBalance,_value))

IRs:
TMP_13(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['ElyxrBalance', '_value'] 
TMP_14(uint256) = INTERNAL_CALL, ElyxrShrimpFarmer.calculateEggBuy(uint256,uint256)(_value,TMP_13)
eggsBought(uint256) := TMP_14(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
eggsBought = SafeMath.sub(eggsBought,devFee(eggsBought))

IRs:
TMP_15(uint256) = INTERNAL_CALL, ElyxrShrimpFarmer.devFee(uint256)(eggsBought)
TMP_16(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['eggsBought', 'TMP_15'] 
eggsBought(uint256) := TMP_16(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
reinvest()

IRs:
INTERNAL_CALL, ElyxrShrimpFarmer.reinvest()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tokenContract.transfer(ceoAddress,devFee(_value))

IRs:
TMP_18(uint256) = INTERNAL_CALL, ElyxrShrimpFarmer.devFee(uint256)(_value)
TMP_19(bool) = HIGH_LEVEL_CALL, dest:tokenContract(Elyxr), function:transfer, arguments:['ceoAddress', 'TMP_18']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
claimedEggs[_from] = SafeMath.add(claimedEggs[_from],eggsBought)

IRs:
REF_4(uint256) -> claimedEggs[_from]
REF_6(uint256) -> claimedEggs[_from]
TMP_20(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_6', 'eggsBought'] 
REF_4(uint256) (->claimedEggs) := TMP_20(uint256)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyTokenContract()

IRs:
MODIFIER_CALL, AcceptsElyxr.onlyTokenContract()()"];
11->1;
}
// Function: 1119.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_84(uint256) = a + b
c(uint256) := TMP_84(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_85(bool) = c >= a
TMP_86(None) = SOLIDITY_CALL assert(bool)(TMP_85)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1119.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_80(uint256) = a / b
c(uint256) := TMP_80(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1119.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_75(bool) = a == 0
CONDITION TMP_75"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_76(uint256) = a * b
c(uint256) := TMP_76(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_77(uint256) = c / a
TMP_78(bool) = TMP_77 == b
TMP_79(None) = SOLIDITY_CALL assert(bool)(TMP_78)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1119.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_81(bool) = b <= a
TMP_82(None) = SOLIDITY_CALL assert(bool)(TMP_81)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_83(uint256) = a - b
RETURN TMP_83"];
}
}
