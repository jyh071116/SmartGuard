digraph G {
// Function: 1132.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_23 = CONVERT _input to bytes
_temp(bytes) := TMP_23(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_0 -> LENGTH _temp
_length(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_24(bool) = _length <= 32
TMP_25(bool) = _length > 0
TMP_26(bool) = TMP_24 && TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_1(None) -> _temp[0]
TMP_28(bool) = REF_1 != 32
TMP_29(uint256) = _length - 1
REF_2(None) -> _temp[TMP_29]
TMP_30(bool) = REF_2 != 32
TMP_31(bool) = TMP_28 && TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_3(None) -> _temp[0]
TMP_33(bool) = REF_3 == 48
CONDITION TMP_33"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_4(None) -> _temp[1]
TMP_34(bool) = REF_4 != 120
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_5(None) -> _temp[1]
TMP_36(bool) = REF_5 != 88
TMP_37(None) = SOLIDITY_CALL require(bool,string)(TMP_36,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_38(bool) = i < _length
CONDITION TMP_38"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_6(None) -> _temp[i]
TMP_39(bool) = REF_6 > 64
REF_7(None) -> _temp[i]
TMP_40(bool) = REF_7 < 91
TMP_41(bool) = TMP_39 && TMP_40
CONDITION TMP_41"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_8(bytes1) -> _temp[i]
REF_9(None) -> _temp[i]
TMP_42 = CONVERT REF_9 to uint256
TMP_43(uint256) = TMP_42 + 32
TMP_44 = CONVERT TMP_43 to bytes1
REF_8(bytes1) (->_temp) := TMP_44(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_45(bool) = _hasNonNumber == False
CONDITION TMP_45"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_10(None) -> _temp[i]
TMP_46(bool) = REF_10 == 32
REF_11(None) -> _temp[i]
TMP_47(bool) = REF_11 > 96
REF_12(None) -> _temp[i]
TMP_48(bool) = REF_12 < 123
TMP_49(bool) = TMP_47 && TMP_48
TMP_50(bool) = TMP_46 || TMP_49
REF_13(None) -> _temp[i]
TMP_51(bool) = REF_13 > 47
REF_14(None) -> _temp[i]
TMP_52(bool) = REF_14 < 58
TMP_53(bool) = TMP_51 && TMP_52
TMP_54(bool) = TMP_50 || TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_15(None) -> _temp[i]
TMP_56(bool) = REF_15 == 32
CONDITION TMP_56"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_57(uint256) = i + 1
REF_16(None) -> _temp[TMP_57]
TMP_58(bool) = REF_16 != 32
TMP_59(None) = SOLIDITY_CALL require(bool,string)(TMP_58,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_60(bool) = _hasNonNumber == False
REF_17(None) -> _temp[i]
TMP_61(bool) = REF_17 < 48
REF_18(None) -> _temp[i]
TMP_62(bool) = REF_18 > 57
TMP_63(bool) = TMP_61 || TMP_62
TMP_64(bool) = TMP_60 && TMP_63
CONDITION TMP_64"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_65(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_66(bool) = _hasNonNumber == True
TMP_67(None) = SOLIDITY_CALL require(bool,string)(TMP_66,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 1132.sol-PlayerBook-addGame(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(gameIDs_[_gameAddress] == 0,derp, that games already been registered)

IRs:
REF_172(uint256) -> gameIDs_[_gameAddress]
TMP_174(bool) = REF_172 == 0
TMP_175(None) = SOLIDITY_CALL require(bool,string)(TMP_174,derp, that games already been registered)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gID_ ++

IRs:
TMP_176(uint256) := gID_(uint256)
gID_(uint256) = gID_ + 1"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_name = _gameNameStr.nameFilter()

IRs:
TMP_177(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_gameNameStr'] 
_name(bytes32) := TMP_177(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameIDs_[_gameAddress] = gID_

IRs:
REF_174(uint256) -> gameIDs_[_gameAddress]
REF_174(uint256) (->gameIDs_) := gID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gameNames_[_gameAddress] = _name

IRs:
REF_175(bytes32) -> gameNames_[_gameAddress]
REF_175(bytes32) (->gameNames_) := _name(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[gID_] = PlayerBookReceiverInterface(_gameAddress)

IRs:
REF_176(PlayerBookReceiverInterface) -> games_[gID_]
TMP_178 = CONVERT _gameAddress to PlayerBookReceiverInterface
REF_176(PlayerBookReceiverInterface) (->games_) := TMP_178(PlayerBookReceiverInterface)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
games_[gID_].receivePlayerInfo(1,plyr_[1].addr,plyr_[1].name,0)

IRs:
REF_177(PlayerBookReceiverInterface) -> games_[gID_]
REF_179(PlayerBook.Player) -> plyr_[1]
REF_180(address) -> REF_179.addr
REF_181(PlayerBook.Player) -> plyr_[1]
REF_182(bytes32) -> REF_181.name
HIGH_LEVEL_CALL, dest:REF_177(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['1', 'REF_180', 'REF_182', '0']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
games_[gID_].receivePlayerInfo(2,plyr_[2].addr,plyr_[2].name,0)

IRs:
REF_183(PlayerBookReceiverInterface) -> games_[gID_]
REF_185(PlayerBook.Player) -> plyr_[2]
REF_186(address) -> REF_185.addr
REF_187(PlayerBook.Player) -> plyr_[2]
REF_188(bytes32) -> REF_187.name
HIGH_LEVEL_CALL, dest:REF_183(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['2', 'REF_186', 'REF_188', '0']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
games_[gID_].receivePlayerInfo(3,plyr_[3].addr,plyr_[3].name,0)

IRs:
REF_189(PlayerBookReceiverInterface) -> games_[gID_]
REF_191(PlayerBook.Player) -> plyr_[3]
REF_192(address) -> REF_191.addr
REF_193(PlayerBook.Player) -> plyr_[3]
REF_194(bytes32) -> REF_193.name
HIGH_LEVEL_CALL, dest:REF_189(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['3', 'REF_192', 'REF_194', '0']  "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
games_[gID_].receivePlayerInfo(4,plyr_[4].addr,plyr_[4].name,0)

IRs:
REF_195(PlayerBookReceiverInterface) -> games_[gID_]
REF_197(PlayerBook.Player) -> plyr_[4]
REF_198(address) -> REF_197.addr
REF_199(PlayerBook.Player) -> plyr_[4]
REF_200(bytes32) -> REF_199.name
HIGH_LEVEL_CALL, dest:REF_195(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['4', 'REF_198', 'REF_200', '0']  "];
}
// Function: 1132.sol-PlayerBook-addMeToAllGames()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_102(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_102(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_113(bool) = _pID != 0
TMP_114(None) = SOLIDITY_CALL require(bool,string)(TMP_113,hey there buddy, you dont even have an account)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_laff = plyr_[_pID].laff

IRs:
REF_103(PlayerBook.Player) -> plyr_[_pID]
REF_104(uint256) -> REF_103.laff
_laff(uint256) := REF_104(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_105(PlayerBook.Player) -> plyr_[_pID]
REF_106(uint256) -> REF_105.names
_totalNames(uint256) := REF_106(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_name = plyr_[_pID].name

IRs:
REF_107(PlayerBook.Player) -> plyr_[_pID]
REF_108(bytes32) -> REF_107.name
_name(bytes32) := REF_108(bytes32)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i <= gID_

IRs:
TMP_115(bool) = i <= gID_
CONDITION TMP_115"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_laff)

IRs:
REF_109(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_109(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_laff']  "];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_totalNames > 1

IRs:
TMP_117(bool) = _totalNames > 1
CONDITION TMP_117"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
ii <= _totalNames

IRs:
TMP_118(bool) = ii <= _totalNames
CONDITION TMP_118"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_111(PlayerBookReceiverInterface) -> games_[i]
REF_113(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_114(bytes32) -> REF_113[ii]
HIGH_LEVEL_CALL, dest:REF_111(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_114']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ii ++

IRs:
TMP_120(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_121(uint256) := i(uint256)
i(uint256) = i + 1"];
20->10;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
21->1;
}
// Function: 1132.sol-PlayerBook-addMeToGame(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_gameID <= gID_,silly player, that game doesn't exist yet)

IRs:
TMP_103(bool) = _gameID <= gID_
TMP_104(None) = SOLIDITY_CALL require(bool,string)(TMP_103,silly player, that game doesn't exist yet)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_89(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_89(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_105(bool) = _pID != 0
TMP_106(None) = SOLIDITY_CALL require(bool,string)(TMP_105,hey there buddy, you dont even have an account)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_90(PlayerBook.Player) -> plyr_[_pID]
REF_91(uint256) -> REF_90.names
_totalNames(uint256) := REF_91(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[_gameID].receivePlayerInfo(_pID,_addr,plyr_[_pID].name,plyr_[_pID].laff)

IRs:
REF_92(PlayerBookReceiverInterface) -> games_[_gameID]
REF_94(PlayerBook.Player) -> plyr_[_pID]
REF_95(bytes32) -> REF_94.name
REF_96(PlayerBook.Player) -> plyr_[_pID]
REF_97(uint256) -> REF_96.laff
HIGH_LEVEL_CALL, dest:REF_92(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', 'REF_95', 'REF_97']  "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_totalNames > 1

IRs:
TMP_108(bool) = _totalNames > 1
CONDITION TMP_108"];
7->10[label="True"];
7->14[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->14;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
ii <= _totalNames

IRs:
TMP_109(bool) = ii <= _totalNames
CONDITION TMP_109"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
games_[_gameID].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_98(PlayerBookReceiverInterface) -> games_[_gameID]
REF_100(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_101(bytes32) -> REF_100[ii]
HIGH_LEVEL_CALL, dest:REF_98(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_101']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ii ++

IRs:
TMP_111(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
13->11;
14[label="Node Type: END_IF 14
"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
15->1;
}
// Function: 1132.sol-PlayerBook-checkIfNameValid(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameStr.nameFilter()

IRs:
TMP_68(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameStr'] 
_name(bytes32) := TMP_68(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxName_[_name] == 0

IRs:
REF_68(uint256) -> pIDxName_[_name]
TMP_69(bool) = REF_68 == 0
CONDITION TMP_69"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1132.sol-PlayerBook-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
plyr_[1].addr = 0x119F627123936B0a456cf3Ec5AA172186c915A36

IRs:
REF_19(PlayerBook.Player) -> plyr_[1]
REF_20(address) -> REF_19.addr
REF_20(address) (->plyr_) := 100607237093788834083957438277013369901718526518(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
plyr_[1].name = justo

IRs:
REF_21(PlayerBook.Player) -> plyr_[1]
REF_22(bytes32) -> REF_21.name
REF_22(bytes32) (->plyr_) := justo(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[1].names = 1

IRs:
REF_23(PlayerBook.Player) -> plyr_[1]
REF_24(uint256) -> REF_23.names
REF_24(uint256) (->plyr_) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pIDxAddr_[0x119F627123936B0a456cf3Ec5AA172186c915A36] = 1

IRs:
REF_25(uint256) -> pIDxAddr_[100607237093788834083957438277013369901718526518]
REF_25(uint256) (->pIDxAddr_) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[justo] = 1

IRs:
REF_26(uint256) -> pIDxName_[justo]
REF_26(uint256) (->pIDxName_) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyrNames_[1][justo] = true

IRs:
REF_27(mapping(bytes32 => bool)) -> plyrNames_[1]
REF_28(bool) -> REF_27[justo]
REF_28(bool) (->plyrNames_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNameList_[1][1] = justo

IRs:
REF_29(mapping(uint256 => bytes32)) -> plyrNameList_[1]
REF_30(bytes32) -> REF_29[1]
REF_30(bytes32) (->plyrNameList_) := justo(string)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[2].addr = 0x119F627123936B0a456cf3Ec5AA172186c915A36

IRs:
REF_31(PlayerBook.Player) -> plyr_[2]
REF_32(address) -> REF_31.addr
REF_32(address) (->plyr_) := 100607237093788834083957438277013369901718526518(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[2].name = mantso

IRs:
REF_33(PlayerBook.Player) -> plyr_[2]
REF_34(bytes32) -> REF_33.name
REF_34(bytes32) (->plyr_) := mantso(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[2].names = 1

IRs:
REF_35(PlayerBook.Player) -> plyr_[2]
REF_36(uint256) -> REF_35.names
REF_36(uint256) (->plyr_) := 1(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
pIDxAddr_[0x119F627123936B0a456cf3Ec5AA172186c915A36] = 2

IRs:
REF_37(uint256) -> pIDxAddr_[100607237093788834083957438277013369901718526518]
REF_37(uint256) (->pIDxAddr_) := 2(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
pIDxName_[mantso] = 2

IRs:
REF_38(uint256) -> pIDxName_[mantso]
REF_38(uint256) (->pIDxName_) := 2(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
plyrNames_[2][mantso] = true

IRs:
REF_39(mapping(bytes32 => bool)) -> plyrNames_[2]
REF_40(bool) -> REF_39[mantso]
REF_40(bool) (->plyrNames_) := True(bool)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyrNameList_[2][1] = mantso

IRs:
REF_41(mapping(uint256 => bytes32)) -> plyrNameList_[2]
REF_42(bytes32) -> REF_41[1]
REF_42(bytes32) (->plyrNameList_) := mantso(string)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[3].addr = 0x119F627123936B0a456cf3Ec5AA172186c915A36

IRs:
REF_43(PlayerBook.Player) -> plyr_[3]
REF_44(address) -> REF_43.addr
REF_44(address) (->plyr_) := 100607237093788834083957438277013369901718526518(address)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[3].name = sumpunk

IRs:
REF_45(PlayerBook.Player) -> plyr_[3]
REF_46(bytes32) -> REF_45.name
REF_46(bytes32) (->plyr_) := sumpunk(string)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
plyr_[3].names = 1

IRs:
REF_47(PlayerBook.Player) -> plyr_[3]
REF_48(uint256) -> REF_47.names
REF_48(uint256) (->plyr_) := 1(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
pIDxAddr_[0x119F627123936B0a456cf3Ec5AA172186c915A36] = 3

IRs:
REF_49(uint256) -> pIDxAddr_[100607237093788834083957438277013369901718526518]
REF_49(uint256) (->pIDxAddr_) := 3(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
pIDxName_[sumpunk] = 3

IRs:
REF_50(uint256) -> pIDxName_[sumpunk]
REF_50(uint256) (->pIDxName_) := 3(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
plyrNames_[3][sumpunk] = true

IRs:
REF_51(mapping(bytes32 => bool)) -> plyrNames_[3]
REF_52(bool) -> REF_51[sumpunk]
REF_52(bool) (->plyrNames_) := True(bool)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
plyrNameList_[3][1] = sumpunk

IRs:
REF_53(mapping(uint256 => bytes32)) -> plyrNameList_[3]
REF_54(bytes32) -> REF_53[1]
REF_54(bytes32) (->plyrNameList_) := sumpunk(string)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
plyr_[4].addr = 0x119F627123936B0a456cf3Ec5AA172186c915A36

IRs:
REF_55(PlayerBook.Player) -> plyr_[4]
REF_56(address) -> REF_55.addr
REF_56(address) (->plyr_) := 100607237093788834083957438277013369901718526518(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
plyr_[4].name = inventor

IRs:
REF_57(PlayerBook.Player) -> plyr_[4]
REF_58(bytes32) -> REF_57.name
REF_58(bytes32) (->plyr_) := inventor(string)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
plyr_[4].names = 1

IRs:
REF_59(PlayerBook.Player) -> plyr_[4]
REF_60(uint256) -> REF_59.names
REF_60(uint256) (->plyr_) := 1(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
pIDxAddr_[0x119F627123936B0a456cf3Ec5AA172186c915A36] = 4

IRs:
REF_61(uint256) -> pIDxAddr_[100607237093788834083957438277013369901718526518]
REF_61(uint256) (->pIDxAddr_) := 4(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
pIDxName_[inventor] = 4

IRs:
REF_62(uint256) -> pIDxName_[inventor]
REF_62(uint256) (->pIDxName_) := 4(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
plyrNames_[4][inventor] = true

IRs:
REF_63(mapping(bytes32 => bool)) -> plyrNames_[4]
REF_64(bool) -> REF_63[inventor]
REF_64(bool) (->plyrNames_) := True(bool)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyrNameList_[4][1] = inventor

IRs:
REF_65(mapping(uint256 => bytes32)) -> plyrNameList_[4]
REF_66(bytes32) -> REF_65[1]
REF_66(bytes32) (->plyrNameList_) := inventor(string)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
pID_ = 4

IRs:
pID_(uint256) := 4(uint256)"];
}
// Function: 1132.sol-PlayerBook-determinePID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxAddr_[_addr] == 0

IRs:
REF_144(uint256) -> pIDxAddr_[_addr]
TMP_140(bool) = REF_144 == 0
CONDITION TMP_140"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pID_ ++

IRs:
TMP_141(uint256) := pID_(uint256)
pID_(uint256) = pID_ + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = pID_

IRs:
REF_145(uint256) -> pIDxAddr_[_addr]
REF_145(uint256) (->pIDxAddr_) := pID_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[pID_].addr = _addr

IRs:
REF_146(PlayerBook.Player) -> plyr_[pID_]
REF_147(address) -> REF_146.addr
REF_147(address) (->plyr_) := _addr(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true)

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1132.sol-PlayerBook-getNameFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(registrationFee_)

IRs:
RETURN registrationFee_"];
}
// Function: 1132.sol-PlayerBook-getPlayerAddr(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].addr)

IRs:
REF_153(PlayerBook.Player) -> plyr_[_pID]
REF_154(address) -> REF_153.addr
RETURN REF_154"];
}
// Function: 1132.sol-PlayerBook-getPlayerID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
determinePID(_addr)

IRs:
TMP_142(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(pIDxAddr_[_addr])

IRs:
REF_148(uint256) -> pIDxAddr_[_addr]
RETURN REF_148"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
3->1;
}
// Function: 1132.sol-PlayerBook-getPlayerLAff(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].laff)

IRs:
REF_151(PlayerBook.Player) -> plyr_[_pID]
REF_152(uint256) -> REF_151.laff
RETURN REF_152"];
}
// Function: 1132.sol-PlayerBook-getPlayerName(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].name)

IRs:
REF_149(PlayerBook.Player) -> plyr_[_pID]
REF_150(bytes32) -> REF_149.name
RETURN REF_150"];
}
// Function: 1132.sol-PlayerBook-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_183(bool) = _codeLength == 0
TMP_184(None) = SOLIDITY_CALL require(bool,string)(TMP_183,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1132.sol-PlayerBook-isRegisteredGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameIDs_[msg.sender] != 0)

IRs:
REF_201(uint256) -> gameIDs_[msg.sender]
TMP_185(bool) = REF_201 != 0
TMP_186(None) = SOLIDITY_CALL require(bool)(TMP_185)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1132.sol-PlayerBook-registerNameCore(uint256,address,uint256,bytes32,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxName_[_name] != 0

IRs:
REF_121(uint256) -> pIDxName_[_name]
TMP_127(bool) = REF_121 != 0
CONDITION TMP_127"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,sorry that names already taken)

IRs:
REF_122(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_123(bool) -> REF_122[_name]
TMP_128(bool) = REF_123 == True
TMP_129(None) = SOLIDITY_CALL require(bool,string)(TMP_128,sorry that names already taken)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_124(PlayerBook.Player) -> plyr_[_pID]
REF_125(bytes32) -> REF_124.name
REF_125(bytes32) (->plyr_) := _name(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_126(uint256) -> pIDxName_[_name]
REF_126(uint256) (->pIDxName_) := _pID(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_127(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_128(bool) -> REF_127[_name]
TMP_130(bool) = REF_128 == False
CONDITION TMP_130"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_129(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_130(bool) -> REF_129[_name]
REF_130(bool) (->plyrNames_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].names ++

IRs:
REF_131(PlayerBook.Player) -> plyr_[_pID]
REF_132(uint256) -> REF_131.names
TMP_131(uint256) := REF_132(uint256)
REF_132(-> plyr_) = REF_132 + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyrNameList_[_pID][plyr_[_pID].names] = _name

IRs:
REF_133(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_134(PlayerBook.Player) -> plyr_[_pID]
REF_135(uint256) -> REF_134.names
REF_136(bytes32) -> REF_133[REF_135]
REF_136(bytes32) (->plyrNameList_) := _name(bytes32)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
admin.transfer(address(this).balance)

IRs:
TMP_132 = CONVERT this to address
TMP_133(uint256) = SOLIDITY_CALL balance(address)(TMP_132)
Transfer dest:admin value:TMP_133"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_all == true

IRs:
TMP_135(bool) = _all == True
CONDITION TMP_135"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i <= gID_

IRs:
TMP_136(bool) = i <= gID_
CONDITION TMP_136"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_affID)

IRs:
REF_138(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_138(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_affID']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_138(uint256) := i(uint256)
i(uint256) = i + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,msg.value,now)

IRs:
REF_140(PlayerBook.Player) -> plyr_[_affID]
REF_141(address) -> REF_140.addr
REF_142(PlayerBook.Player) -> plyr_[_affID]
REF_143(bytes32) -> REF_142.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_141,REF_143,msg.value,now)"];
}
// Function: 1132.sol-PlayerBook-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_70(bool) = msg.value >= registrationFee_
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_72(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_72(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_73(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_73(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_70(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_70(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID

IRs:
TMP_74(bool) = _affCode != 0
REF_71(PlayerBook.Player) -> plyr_[_pID]
REF_72(uint256) -> REF_71.laff
TMP_75(bool) = _affCode != REF_72
TMP_76(bool) = TMP_74 && TMP_75
TMP_77(bool) = _affCode != _pID
TMP_78(bool) = TMP_76 && TMP_77
CONDITION TMP_78"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_73(PlayerBook.Player) -> plyr_[_pID]
REF_74(uint256) -> REF_73.laff
REF_74(uint256) (->plyr_) := _affCode(uint256)"];
7->11;
8[label="Node Type: IF 8

EXPRESSION:
_affCode == _pID

IRs:
TMP_79(bool) = _affCode == _pID
CONDITION TMP_79"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_affCode = 0

IRs:
_affCode(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
registerNameCore(_pID,_addr,_affCode,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affCode,_name,_isNewPlayer,_all)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
13->1;
}
// Function: 1132.sol-PlayerBook-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_144(bool) = msg.value >= registrationFee_
TMP_145(None) = SOLIDITY_CALL require(bool,string)(TMP_144,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_146(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_146(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_155(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_155(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_affID = _affCode

IRs:
_affID(uint256) := _affCode(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID

IRs:
TMP_147(bool) = _affID != 0
REF_156(PlayerBook.Player) -> plyr_[_pID]
REF_157(uint256) -> REF_156.laff
TMP_148(bool) = _affID != REF_157
TMP_149(bool) = TMP_147 && TMP_148
TMP_150(bool) = _affID != _pID
TMP_151(bool) = TMP_149 && TMP_150
CONDITION TMP_151"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_158(PlayerBook.Player) -> plyr_[_pID]
REF_159(uint256) -> REF_158.laff
REF_159(uint256) (->plyr_) := _affID(uint256)"];
6->10;
7[label="Node Type: IF 7

EXPRESSION:
_affID == _pID

IRs:
TMP_152(bool) = _affID == _pID
CONDITION TMP_152"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 1132.sol-PlayerBook-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_82(bool) = msg.value >= registrationFee_
TMP_83(None) = SOLIDITY_CALL require(bool,string)(TMP_82,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_84(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_84(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_85(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_85(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_76(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_76(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_86 = CONVERT 0 to address
TMP_87(bool) = _affCode != TMP_86
TMP_88(bool) = _affCode != _addr
TMP_89(bool) = TMP_87 && TMP_88
CONDITION TMP_89"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_77(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_77(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_78(PlayerBook.Player) -> plyr_[_pID]
REF_79(uint256) -> REF_78.laff
TMP_90(bool) = _affID != REF_79
CONDITION TMP_90"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_80(PlayerBook.Player) -> plyr_[_pID]
REF_81(uint256) -> REF_80.laff
REF_81(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 1132.sol-PlayerBook-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_155(bool) = msg.value >= registrationFee_
TMP_156(None) = SOLIDITY_CALL require(bool,string)(TMP_155,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_157(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_157(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_160(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_160(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_158 = CONVERT 0 to address
TMP_159(bool) = _affCode != TMP_158
TMP_160(bool) = _affCode != _addr
TMP_161(bool) = TMP_159 && TMP_160
CONDITION TMP_161"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_161(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_161(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_162(PlayerBook.Player) -> plyr_[_pID]
REF_163(uint256) -> REF_162.laff
TMP_162(bool) = _affID != REF_163
CONDITION TMP_162"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_164(PlayerBook.Player) -> plyr_[_pID]
REF_165(uint256) -> REF_164.laff
REF_165(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 1132.sol-PlayerBook-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_93(bool) = msg.value >= registrationFee_
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_95(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_95(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_96(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_96(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_83(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_83(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_97(bool) = _affCode != 
TMP_98(bool) = _affCode != _name
TMP_99(bool) = TMP_97 && TMP_98
CONDITION TMP_99"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_84(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_84(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_85(PlayerBook.Player) -> plyr_[_pID]
REF_86(uint256) -> REF_85.laff
TMP_100(bool) = _affID != REF_86
CONDITION TMP_100"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_87(PlayerBook.Player) -> plyr_[_pID]
REF_88(uint256) -> REF_87.laff
REF_88(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 1132.sol-PlayerBook-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_165(bool) = msg.value >= registrationFee_
TMP_166(None) = SOLIDITY_CALL require(bool,string)(TMP_165,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_167(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_167(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_166(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_166(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_168(bool) = _affCode != 
TMP_169(bool) = _affCode != _name
TMP_170(bool) = TMP_168 && TMP_169
CONDITION TMP_170"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_167(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_167(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_168(PlayerBook.Player) -> plyr_[_pID]
REF_169(uint256) -> REF_168.laff
TMP_171(bool) = _affID != REF_169
CONDITION TMP_171"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_170(PlayerBook.Player) -> plyr_[_pID]
REF_171(uint256) -> REF_170.laff
REF_171(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 1132.sol-PlayerBook-setRegistrationFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
registrationFee_ = _fee

IRs:
registrationFee_(uint256) := _fee(uint256)"];
}
// Function: 1132.sol-PlayerBook-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
registrationFee_ = 10000000000000000

IRs:
registrationFee_(uint256) := 10000000000000000(uint256)"];
}
// Function: 1132.sol-PlayerBook-useMyOldName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_123(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_123(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_116(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_116(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,umm... thats not a name you own)

IRs:
REF_117(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_118(bool) -> REF_117[_name]
TMP_124(bool) = REF_118 == True
TMP_125(None) = SOLIDITY_CALL require(bool,string)(TMP_124,umm... thats not a name you own)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_119(PlayerBook.Player) -> plyr_[_pID]
REF_120(bytes32) -> REF_119.name
REF_120(bytes32) (->plyr_) := _name(bytes32)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
5->1;
}
// Function: 1132.sol-PlayerBookReceiverInterface-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
}
// Function: 1132.sol-PlayerBookReceiverInterface-receivePlayerNameList(uint256,bytes32)
digraph{
}
// Function: 1132.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_8(uint256) = a + b
c(uint256) := TMP_8(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_9(bool) = c >= a
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1132.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1132.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_18(bool) = x == 0
CONDITION TMP_18"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_19(bool) = y == 0
CONDITION TMP_19"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_20(bool) = i < y
CONDITION TMP_20"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_21(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_21(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_22(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1132.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_17(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_17"];
}
// Function: 1132.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_11(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_12(uint256) = TMP_11 / 2
z(uint256) := TMP_12(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_13(bool) = z < y
CONDITION TMP_13"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_14(uint256) = x / z
TMP_15(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_14,z)
TMP_16(uint256) = TMP_15 / 2
z(uint256) := TMP_16(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1132.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_5(bool) = b <= a
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_7(uint256) = a - b
RETURN TMP_7"];
}
}
