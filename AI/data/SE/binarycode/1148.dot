digraph G {
// Function: 1148.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1148.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1148.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1148.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1148.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1148.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1148.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1148.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1148.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1148.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1148.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 1148.sol-Token-balanceOf(address)
digraph{
}
// Function: 1148.sol-Token-distr(address,uint256)
digraph{
}
// Function: 1148.sol-Token-totalSupply()
digraph{
}
// Function: 1148.sol-VotePumpCoin0x-VPC0x()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[owner] = totalDistributed

IRs:
REF_0(uint256) -> balances[owner]
REF_0(uint256) (->balances) := totalDistributed(uint256)"];
}
// Function: 1148.sol-VotePumpCoin0x-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_35(mapping(address => uint256)) -> allowed[_owner]
REF_36(uint256) -> REF_35[_spender]
RETURN REF_36"];
}
// Function: 1148.sol-VotePumpCoin0x-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_value != 0 && allowed[msg.sender][_spender] != 0

IRs:
TMP_61(bool) = _value != 0
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
TMP_62(bool) = REF_32 != 0
TMP_63(bool) = TMP_61 && TMP_62
CONDITION TMP_63"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_33(mapping(address => uint256)) -> allowed[msg.sender]
REF_34(uint256) -> REF_33[_spender]
REF_34(uint256) (->allowed) := _value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1148.sol-VotePumpCoin0x-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_9(uint256) -> balances[_owner]
RETURN REF_9"];
}
// Function: 1148.sol-VotePumpCoin0x-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_39(uint256) -> balances[msg.sender]
TMP_71(bool) = _value <= REF_39
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_40(uint256) -> balances[burner]
REF_41(uint256) -> balances[burner]
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_41', '_value'] 
REF_40(uint256) (->balances) := TMP_73(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_74(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalDistributed = totalDistributed.sub(_value)

IRs:
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalDistributed', '_value'] 
totalDistributed(uint256) := TMP_75(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, VotePumpCoin0x.onlyOwner()()"];
7->1;
}
// Function: 1148.sol-VotePumpCoin0x-canDistr()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! distributionFinished)

IRs:
TMP_84 = UnaryType.BANG distributionFinished 
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1148.sol-VotePumpCoin0x-distr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalDistributed = totalDistributed.add(_amount)

IRs:
TMP_19(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalDistributed', '_amount'] 
totalDistributed(uint256) := TMP_19(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalRemaining = totalRemaining.sub(_amount)

IRs:
TMP_20(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalRemaining', '_amount'] 
totalRemaining(uint256) := TMP_20(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_3(uint256) -> balances[_to]
REF_4(uint256) -> balances[_to]
TMP_21(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_4', '_amount'] 
REF_3(uint256) (->balances) := TMP_21(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Distr(_to,_amount)

IRs:
Emit Distr(_to,_amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_23 = CONVERT 0 to address
Emit Transfer(TMP_23,_to,_amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: IF 7

EXPRESSION:
totalDistributed >= totalSupply

IRs:
TMP_25(bool) = totalDistributed >= totalSupply
CONDITION TMP_25"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
distributionFinished = true

IRs:
distributionFinished(bool) := True(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
canDistr()

IRs:
MODIFIER_CALL, VotePumpCoin0x.canDistr()()"];
10->1;
}
// Function: 1148.sol-VotePumpCoin0x-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
getTokens()

IRs:
INTERNAL_CALL, VotePumpCoin0x.getTokens()()"];
}
// Function: 1148.sol-VotePumpCoin0x-finishDistribution()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
distributionFinished = true

IRs:
distributionFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
DistrFinished()

IRs:
Emit DistrFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, VotePumpCoin0x.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canDistr()

IRs:
MODIFIER_CALL, VotePumpCoin0x.canDistr()()"];
5->1;
}
// Function: 1148.sol-VotePumpCoin0x-getTokenBalance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
t = VotePumpCoin0xToken(tokenAddress)

IRs:
TMP_65 = CONVERT tokenAddress to VotePumpCoin0xToken
t(VotePumpCoin0xToken) := TMP_65(VotePumpCoin0xToken)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
bal = t.balanceOf(who)

IRs:
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:t(VotePumpCoin0xToken), function:balanceOf, arguments:['who']  
bal(uint256) := TMP_66(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
bal

IRs:
RETURN bal"];
}
// Function: 1148.sol-VotePumpCoin0x-getTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: IF 1

EXPRESSION:
value > totalRemaining

IRs:
TMP_28(bool) = value > totalRemaining
CONDITION TMP_28"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
value = totalRemaining

IRs:
value(uint256) := totalRemaining(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(value <= totalRemaining)

IRs:
TMP_29(bool) = value <= totalRemaining
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
investor = msg.sender

IRs:
investor(address) := msg.sender(address)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
toGive = value

IRs:
toGive(uint256) := value(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
distr(investor,toGive)

IRs:
TMP_31(bool) = INTERNAL_CALL, VotePumpCoin0x.distr(address,uint256)(investor,toGive)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
toGive > 0

IRs:
TMP_32(bool) = toGive > 0
CONDITION TMP_32"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
blacklist[investor] = true

IRs:
REF_6(bool) -> blacklist[investor]
REF_6(bool) (->blacklist) := True(bool)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
totalDistributed >= totalSupply

IRs:
TMP_33(bool) = totalDistributed >= totalSupply
CONDITION TMP_33"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
distributionFinished = true

IRs:
distributionFinished(bool) := True(bool)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
value = value.div(100000).mul(99999)

IRs:
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['value', '100000'] 
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_34', '99999'] 
value(uint256) := TMP_35(uint256)"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
canDistr()

IRs:
MODIFIER_CALL, VotePumpCoin0x.canDistr()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyWhitelist()

IRs:
MODIFIER_CALL, VotePumpCoin0x.onlyWhitelist()()"];
16->1;
}
// Function: 1148.sol-VotePumpCoin0x-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_86(bool) = msg.sender == owner
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1148.sol-VotePumpCoin0x-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length >= size + 4)

IRs:
REF_49 -> LENGTH msg.data
TMP_90(uint256) = size + 4
TMP_91(bool) = REF_49 >= TMP_90
TMP_92(None) = SOLIDITY_CALL assert(bool)(TMP_91)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1148.sol-VotePumpCoin0x-onlyWhitelist()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(blacklist[msg.sender] == false)

IRs:
REF_48(bool) -> blacklist[msg.sender]
TMP_88(bool) = REF_48 == False
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1148.sol-VotePumpCoin0x-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = VotePumpCoin0x

IRs:
name(string) := VotePumpCoin0x(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = VPC0x

IRs:
symbol(string) := VPC0x(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
}
// Function: 1148.sol-VotePumpCoin0x-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 75000000e18

IRs:
totalSupply(uint256) := 75000000000000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
totalDistributed = 45000000e18

IRs:
totalDistributed(uint256) := 45000000000000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalRemaining = totalSupply.sub(totalDistributed)

IRs:
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', 'totalDistributed'] 
totalRemaining(uint256) := TMP_83(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
value = 200e18

IRs:
value(uint256) := 200000000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
distributionFinished = false

IRs:
distributionFinished(bool) := False(bool)"];
}
// Function: 1148.sol-VotePumpCoin0x-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_38 = CONVERT 0 to address
TMP_39(bool) = _to != TMP_38
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[msg.sender])

IRs:
REF_10(uint256) -> balances[msg.sender]
TMP_41(bool) = _amount <= REF_10
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_amount)

IRs:
REF_11(uint256) -> balances[msg.sender]
REF_12(uint256) -> balances[msg.sender]
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_12', '_amount'] 
REF_11(uint256) (->balances) := TMP_43(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_14(uint256) -> balances[_to]
REF_15(uint256) -> balances[_to]
TMP_44(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_15', '_amount'] 
REF_14(uint256) (->balances) := TMP_44(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_46(uint256) = 2 * 32
MODIFIER_CALL, VotePumpCoin0x.onlyPayloadSize(uint256)(TMP_46)"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1148.sol-VotePumpCoin0x-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_48 = CONVERT 0 to address
TMP_49(bool) = _to != TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[_from])

IRs:
REF_17(uint256) -> balances[_from]
TMP_51(bool) = _amount <= REF_17
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_amount <= allowed[_from][msg.sender])

IRs:
REF_18(mapping(address => uint256)) -> allowed[_from]
REF_19(uint256) -> REF_18[msg.sender]
TMP_53(bool) = _amount <= REF_19
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_amount)

IRs:
REF_20(uint256) -> balances[_from]
REF_21(uint256) -> balances[_from]
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_21', '_amount'] 
REF_20(uint256) (->balances) := TMP_55(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount)

IRs:
REF_23(mapping(address => uint256)) -> allowed[_from]
REF_24(uint256) -> REF_23[msg.sender]
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_26', '_amount'] 
REF_24(uint256) (->allowed) := TMP_56(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_28(uint256) -> balances[_to]
REF_29(uint256) -> balances[_to]
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_29', '_amount'] 
REF_28(uint256) (->balances) := TMP_57(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_amount)

IRs:
Emit Transfer(_from,_to,_amount)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_59(uint256) = 3 * 32
MODIFIER_CALL, VotePumpCoin0x.onlyPayloadSize(uint256)(TMP_59)"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1148.sol-VotePumpCoin0x-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = newOwner != TMP_13
CONDITION TMP_14"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, VotePumpCoin0x.onlyOwner()()"];
4->1;
}
// Function: 1148.sol-VotePumpCoin0x-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
etherBalance = address(this).balance

IRs:
TMP_67 = CONVERT this to address
TMP_68(uint256) = SOLIDITY_CALL balance(address)(TMP_67)
etherBalance(uint256) := TMP_68(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(etherBalance)

IRs:
Transfer dest:owner value:etherBalance"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, VotePumpCoin0x.onlyOwner()()"];
3->1;
}
// Function: 1148.sol-VotePumpCoin0x-withdrawVPC0xTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
token = VotePumpCoin0xToken(_tokenContract)

IRs:
TMP_78 = CONVERT _tokenContract to VotePumpCoin0xToken
token(VotePumpCoin0xToken) := TMP_78(VotePumpCoin0xToken)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = token.balanceOf(address(this))

IRs:
TMP_79 = CONVERT this to address
TMP_80(uint256) = HIGH_LEVEL_CALL, dest:token(VotePumpCoin0xToken), function:balanceOf, arguments:['TMP_79']  
amount(uint256) := TMP_80(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
token.transfer(owner,amount)

IRs:
TMP_81(bool) = HIGH_LEVEL_CALL, dest:token(VotePumpCoin0xToken), function:transfer, arguments:['owner', 'amount']  
RETURN TMP_81"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, VotePumpCoin0x.onlyOwner()()"];
4->1;
}
// Function: 1148.sol-VotePumpCoin0xToken-balanceOf(address)
digraph{
}
// Function: 1148.sol-VotePumpCoin0xToken-transfer(address,uint256)
digraph{
}
}
