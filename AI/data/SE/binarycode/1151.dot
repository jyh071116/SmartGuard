digraph G {
// Function: 1151.sol-ZethrInterface-balanceOf(address)
digraph{
}
// Function: 1151.sol-ZethrInterface-buyAndTransfer(address,address,bytes,uint8)
digraph{
}
// Function: 1151.sol-ZethrProxy-buyTokensWithProperEvent(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balanceBefore = zethr.balanceOf(msg.sender)

IRs:
TMP_0(uint256) = HIGH_LEVEL_CALL, dest:zethr(ZethrInterface), function:balanceOf, arguments:['msg.sender']  
balanceBefore(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
zethr.buyAndTransfer.value(msg.value)(_referredBy,msg.sender,,divChoice)

IRs:
HIGH_LEVEL_CALL, dest:zethr(ZethrInterface), function:buyAndTransfer, arguments:['_referredBy', 'msg.sender', '', 'divChoice'] value:msg.value "];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
balanceAfter = zethr.balanceOf(msg.sender)

IRs:
TMP_3(uint256) = HIGH_LEVEL_CALL, dest:zethr(ZethrInterface), function:balanceOf, arguments:['msg.sender']  
balanceAfter(uint256) := TMP_3(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onTokenPurchase(msg.sender,msg.value,balanceAfter - balanceBefore,_referredBy)

IRs:
TMP_4(uint256) = balanceAfter - balanceBefore
Emit onTokenPurchase(msg.sender,msg.value,TMP_4,_referredBy)"];
}
// Function: 1151.sol-ZethrProxy-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1151.sol-ZethrProxy-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
zethr = ZethrInterface(address(0x573e869cA9355299cDdb3a912D444F137ded397c))

IRs:
TMP_11 = CONVERT 498076569619263431146868630637941588567197038972 to address
TMP_12 = CONVERT TMP_11 to ZethrInterface
zethr(ZethrInterface) := TMP_12(ZethrInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1151.sol-ZethrProxy-withdrawMicroDivs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_6(bool) = msg.sender == owner
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_8 = CONVERT this to address
TMP_9(uint256) = SOLIDITY_CALL balance(address)(TMP_8)
Transfer dest:owner value:TMP_9"];
}
}
