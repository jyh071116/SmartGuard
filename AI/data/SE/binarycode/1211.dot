digraph G {
// Function: 1211.sol-FoMo3Dlong-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1211.sol-FoMo3Dlong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1211.sol-FoMo3Dlong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1211.sol-FoMo3Dlong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1211.sol-FoMo3Dlong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(1646092234676)

IRs:
RETURN 1646092234676"];
}
// Function: 1211.sol-FoMo3Dlong-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
round_[1] = F3Ddatasets.Round(1954,2,1533795558,false,1533794558,34619432129976331518578579,91737891789564224505545,21737891789564224505545,31000,0,0,0)

IRs:
REF_0(F3Ddatasets.Round) -> round_[1]
TMP_0(F3Ddatasets.Round) = new Round(1954,2,1533795558,False,1533794558,34619432129976331518578579,91737891789564224505545,21737891789564224505545,31000,0,0,0)
REF_0(F3Ddatasets.Round) (->round_) := TMP_0(F3Ddatasets.Round)"];
}
// Function: 1211.sol-FoMo3Dlong-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1211.sol-FoMo3Dlong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(10025483152147531)

IRs:
RETURN 10025483152147531"];
}
// Function: 1211.sol-FoMo3Dlong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
round_[_rID].end = _now + 125 - (_now % 120)

IRs:
REF_7(F3Ddatasets.Round) -> round_[_rID]
REF_8(uint256) -> REF_7.end
TMP_9(uint256) = _now + 125
TMP_10(uint256) = _now % 120
TMP_11(uint256) = TMP_9 - TMP_10
REF_8(uint256) (->round_) := TMP_11(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(0,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),0xd8723f6f396E28ab6662B91981B3eabF9De05E3C,0x6d6f6c6963616e63657200000000000000000000000000000000000000000000,3053823263697073356017,4675447079848478547678,85163999483914905978445,3336394330928816056073,519463956231409304003)

IRs:
REF_9(F3Ddatasets.Round) -> round_[_rID]
REF_10(uint256) -> REF_9.keys
REF_11(F3Ddatasets.Round) -> round_[_rID]
REF_12(uint256) -> REF_11.end
REF_13(F3Ddatasets.Round) -> round_[_rID]
REF_14(uint256) -> REF_13.strt
REF_15(F3Ddatasets.Round) -> round_[_rID]
REF_16(uint256) -> REF_15.pot
REF_17(F3Ddatasets.Round) -> round_[_rID]
REF_18(uint256) -> REF_17.team
REF_19(F3Ddatasets.Round) -> round_[_rID]
REF_20(uint256) -> REF_19.plyr
TMP_12(uint256) = REF_20 * 10
TMP_13(uint256) = REF_18 + TMP_12
RETURN 0,_rID,REF_10,REF_12,REF_14,REF_16,TMP_13,1235689817372276230682468122868783274105205972540,49498968749632288172789873723578366108873637815844667899804513170416539271168,3053823263697073356017,4675447079848478547678,85163999483914905978445,3336394330928816056073,519463956231409304003"];
}
// Function: 1211.sol-FoMo3Dlong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(18163,0x6d6f6c6963616e63657200000000000000000000000000000000000000000000,122081953021293259355,0,0,0,0)

IRs:
RETURN 18163,49498968749632288172789873723578366108873637815844667899804513170416539271168,122081953021293259355,0,0,0,0"];
}
// Function: 1211.sol-FoMo3Dlong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(0,0,0)

IRs:
RETURN 0,0,0"];
}
// Function: 1211.sol-FoMo3Dlong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
round_[_rID].end = _now + 125 - (_now % 120)

IRs:
REF_5(F3Ddatasets.Round) -> round_[_rID]
REF_6(uint256) -> REF_5.end
TMP_4(uint256) = _now + 125
TMP_5(uint256) = _now % 120
TMP_6(uint256) = TMP_4 - TMP_5
REF_6(uint256) (->round_) := TMP_6(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(125 - (_now % 120))

IRs:
TMP_7(uint256) = _now % 120
TMP_8(uint256) = 125 - TMP_7
RETURN TMP_8"];
}
// Function: 1211.sol-FoMo3Dlong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(_keys.mul(100254831521475310) / 1000000000000000000)

IRs:
TMP_14(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '100254831521475310'] 
TMP_15(uint256) = TMP_14 / 1000000000000000000
RETURN TMP_15"];
}
// Function: 1211.sol-FoMo3Dlong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1211.sol-FoMo3Dlong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1211.sol-FoMo3Dlong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1211.sol-FoMo3Dlong-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1211.sol-FoMo3Dlong-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1211.sol-FoMo3Dlong-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1211.sol-FoMo3Dlong-setOtherFomo(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1211.sol-FoMo3Dlong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = FoMo3D Long Official

IRs:
name(string) := FoMo3D Long Official(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = F3D

IRs:
symbol(string) := F3D(string)"];
}
// Function: 1211.sol-FoMo3Dlong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
}
// Function: 1211.sol-FoMo3Dlong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
aff = 0x6b5d2ba1691e30376a394c13e38f48e25634724f

IRs:
aff(address) := 612939782535096003416064443282724046289845383759(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
aff2 = 0x7ce07aa2fc356fa52f622c1f4df1e8eaad7febf0

IRs:
aff2(address) := 712920905666496987636814255501069080873662409712(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_one = this.balance / 2

IRs:
REF_2(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fba74211e70>]) = REF_2 / 2
_one(uint256) := TMP_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fba74211e70>])"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
aff.transfer(_one)

IRs:
Transfer dest:aff value:_one"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
aff2.transfer(_one)

IRs:
Transfer dest:aff2 value:_one"];
}
// Function: 1211.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_24(uint256) = a + b
c(uint256) := TMP_24(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_25(bool) = c >= a
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1211.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_16(bool) = a == 0
CONDITION TMP_16"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_17(uint256) = a * b
c(uint256) := TMP_17(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_18(uint256) = c / a
TMP_19(bool) = TMP_18 == b
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1211.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_34(bool) = x == 0
CONDITION TMP_34"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_35(bool) = y == 0
CONDITION TMP_35"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_36(bool) = i < y
CONDITION TMP_36"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_37(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_37(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_38(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1211.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_33(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_33"];
}
// Function: 1211.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_27(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_28(uint256) = TMP_27 / 2
z(uint256) := TMP_28(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_29(bool) = z < y
CONDITION TMP_29"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_30(uint256) = x / z
TMP_31(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_30,z)
TMP_32(uint256) = TMP_31 / 2
z(uint256) := TMP_32(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1211.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_21(bool) = b <= a
TMP_22(None) = SOLIDITY_CALL require(bool,string)(TMP_21,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_23(uint256) = a - b
RETURN TMP_23"];
}
}
