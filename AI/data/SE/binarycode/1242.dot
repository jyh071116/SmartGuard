digraph G {
// Function: 1242.sol-ERC20Token-approve(address,uint256)
digraph{
}
// Function: 1242.sol-ERC20Token-transfer(address,uint256)
digraph{
}
// Function: 1242.sol-ERC20Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 1242.sol-POHToken-approve(address,uint256)
digraph{
}
// Function: 1242.sol-POHToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_120(bool) = _value > 0
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balanceOf[msg.sender])

IRs:
REF_94(uint256) -> balanceOf[msg.sender]
TMP_122(bool) = _value <= REF_94
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] -= _value

IRs:
REF_95(uint256) -> balanceOf[msg.sender]
REF_95(-> balanceOf) = REF_95 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
transable()

IRs:
MODIFIER_CALL, StandardToken.transable()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1242.sol-POHToken-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_129 = CONVERT 0 to address
TMP_130(bool) = newOwner != TMP_129
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ChangeOwner(owner,newOwner)

IRs:
Emit ChangeOwner(owner,newOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, POHToken.onlyOwner()()"];
4->1;
}
// Function: 1242.sol-POHToken-claim()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(this.balance)

IRs:
REF_97(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:owner value:REF_97"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, POHToken.onlyOwner()()"];
2->1;
}
// Function: 1242.sol-POHToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] = INITIAL_SUPPLY

IRs:
REF_52(uint256) -> balanceOf[msg.sender]
REF_52(uint256) (->balanceOf) := INITIAL_SUPPLY(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = INITIAL_SUPPLY

IRs:
totalSupply(uint256) := INITIAL_SUPPLY(uint256)"];
}
// Function: 1242.sol-POHToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowance[msg.sender][_spender]

IRs:
REF_44(mapping(address => uint256)) -> allowance[msg.sender]
REF_45(uint256) -> REF_44[_spender]
oldValue(uint256) := REF_45(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_43(bool) = _subtractedValue > oldValue
CONDITION TMP_43"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowance[msg.sender][_spender] = 0

IRs:
REF_46(mapping(address => uint256)) -> allowance[msg.sender]
REF_47(uint256) -> REF_46[_spender]
REF_47(uint256) (->allowance) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowance[msg.sender][_spender] -= _subtractedValue

IRs:
REF_48(mapping(address => uint256)) -> allowance[msg.sender]
REF_49(uint256) -> REF_48[_spender]
REF_49(-> allowance) = REF_49 - _subtractedValue"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowance[msg.sender][_spender])

IRs:
REF_50(mapping(address => uint256)) -> allowance[msg.sender]
REF_51(uint256) -> REF_50[_spender]
Emit Approval(msg.sender,_spender,REF_51)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1242.sol-POHToken-enableTransfers(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transfersEnabled = _transfersEnabled

IRs:
transfersEnabled(bool) := _transfersEnabled(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, POHToken.onlyOwner()()"];
2->1;
}
// Function: 1242.sol-POHToken-freeze(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[_user] >= _value)

IRs:
REF_79(uint256) -> balanceOf[_user]
TMP_90(bool) = REF_79 >= _value
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[_user] -= _value

IRs:
REF_80(uint256) -> balanceOf[_user]
REF_80(-> balanceOf) = REF_80 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
freezeOfUser[_user] += _value

IRs:
REF_81(uint256) -> freezeOfUser[_user]
REF_81(-> freezeOfUser) = REF_81 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
freezeOf[_step].push(uint256(_user) << 92 | _value)

IRs:
REF_82(uint256[]) -> freezeOf[_step]
TMP_92 = CONVERT _user to uint256
TMP_93(uint256) = TMP_92 << 92
TMP_94(uint256) = TMP_93 | _value
REF_84 -> LENGTH REF_82
TMP_96(uint256) := REF_84(uint256)
TMP_97(uint256) = TMP_96 + 1
REF_84(uint256) (->freezeOf) := TMP_97(uint256)
REF_85(uint256) -> REF_82[TMP_96]
REF_85(uint256) (->freezeOf) := TMP_94(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Freeze(_user,_value)

IRs:
Emit Freeze(_user,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1242.sol-POHToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] += _addedValue

IRs:
REF_40(mapping(address => uint256)) -> allowance[msg.sender]
REF_41(uint256) -> REF_40[_spender]
REF_41(-> allowance) = REF_41 + _addedValue"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowance[msg.sender][_spender])

IRs:
REF_42(mapping(address => uint256)) -> allowance[msg.sender]
REF_43(uint256) -> REF_42[_spender]
Emit Approval(msg.sender,_spender,REF_43)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1242.sol-POHToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_139(bool) = msg.sender == owner
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1242.sol-POHToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
INITIAL_SUPPLY = 10 * (10 ** 8) * (10 ** 18)

IRs:
TMP_134(uint256) = 10 ** 8
TMP_135(uint256) = 10 * TMP_134
TMP_136(uint256) = 10 ** 18
TMP_137(uint256) = TMP_135 * TMP_136
INITIAL_SUPPLY(uint256) := TMP_137(uint256)"];
}
// Function: 1242.sol-POHToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = 1.0

IRs:
version(string) := 1.0(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Preserve One’s Health

IRs:
name(string) := Preserve One’s Health(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = POH

IRs:
symbol(string) := POH(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
transfersEnabled = true

IRs:
transfersEnabled(bool) := True(bool)"];
}
// Function: 1242.sol-POHToken-transable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(transfersEnabled)

IRs:
TMP_138(None) = SOLIDITY_CALL require(bool)(transfersEnabled)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1242.sol-POHToken-transfer(address,uint256)
digraph{
}
// Function: 1242.sol-POHToken-transferAndLock(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_45(bool) = _to != 0
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balanceOf[msg.sender])

IRs:
REF_53(uint256) -> balanceOf[msg.sender]
TMP_47(bool) = _value <= REF_53
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_49(bool) = _value > 0
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[msg.sender] -= _value

IRs:
REF_54(uint256) -> balanceOf[msg.sender]
REF_54(-> balanceOf) = REF_54 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_55(uint256) -> balanceOf[_to]
REF_55(-> balanceOf) = REF_55 + _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
freeze(_to,_lockValue,_step)

IRs:
TMP_52(bool) = INTERNAL_CALL, POHToken.freeze(address,uint256,uint256)(_to,_lockValue,_step)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
transable()

IRs:
MODIFIER_CALL, StandardToken.transable()()"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1242.sol-POHToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1242.sol-POHToken-transferFromAndLock(address,address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_allowance = allowance[_from][msg.sender]

IRs:
REF_56(mapping(address => uint256)) -> allowance[_from]
REF_57(uint256) -> REF_56[msg.sender]
_allowance(uint256) := REF_57(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= _allowance)

IRs:
TMP_54(bool) = _value <= _allowance
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_56(bool) = _to != 0
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value <= balanceOf[_from])

IRs:
REF_58(uint256) -> balanceOf[_from]
TMP_58(bool) = _value <= REF_58
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_60(bool) = _value > 0
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_59(mapping(address => uint256)) -> allowance[_from]
REF_60(uint256) -> REF_59[msg.sender]
REF_60(-> allowance) = REF_60 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_61(uint256) -> balanceOf[_from]
REF_61(-> balanceOf) = REF_61 - _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_62(uint256) -> balanceOf[_to]
REF_62(-> balanceOf) = REF_62 + _value"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
freeze(_to,_lockValue,_step)

IRs:
TMP_63(bool) = INTERNAL_CALL, POHToken.freeze(address,uint256,uint256)(_to,_lockValue,_step)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
transable()

IRs:
MODIFIER_CALL, StandardToken.transable()()"];
12->1;
13[label="Node Type: RETURN 13

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1242.sol-POHToken-transferMulti(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->24;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to.length == _value.length && _to.length <= 1024)

IRs:
REF_63 -> LENGTH _to
REF_64 -> LENGTH _value
TMP_65(bool) = REF_63 == REF_64
REF_65 -> LENGTH _to
TMP_66(bool) = REF_65 <= 1024
TMP_67(bool) = TMP_65 && TMP_66
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
balanceOfSender = balanceOf[msg.sender]

IRs:
REF_66(uint256) -> balanceOf[msg.sender]
balanceOfSender(uint256) := REF_66(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
len = _to.length

IRs:
REF_67 -> LENGTH _to
len(uint256) := REF_67(uint256)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->12;
6[label="Node Type: NEW VARIABLE 6
"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j < len

IRs:
TMP_69(bool) = j < len
CONDITION TMP_69"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(_value[j] <= balanceOfSender)

IRs:
REF_68(uint256) -> _value[j]
TMP_70(bool) = REF_68 <= balanceOfSender
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(amount <= balanceOfSender)

IRs:
TMP_72(bool) = amount <= balanceOfSender
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
amount += _value[j]

IRs:
REF_69(uint256) -> _value[j]
amount(uint256) = amount + REF_69"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
j ++

IRs:
TMP_74(uint256) := j(uint256)
j(uint256) = j + 1"];
11->7;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(balanceOfSender >= amount)

IRs:
TMP_75(bool) = balanceOfSender >= amount
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
balanceOf[msg.sender] -= amount

IRs:
REF_70(uint256) -> balanceOf[msg.sender]
REF_70(-> balanceOf) = REF_70 - amount"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->23;
16[label="Node Type: NEW VARIABLE 16
"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
i < len

IRs:
TMP_77(bool) = i < len
CONDITION TMP_77"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
_toI = _to[i]

IRs:
REF_71(address) -> _to[i]
_toI(address) := REF_71(address)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
_valueI = _value[i]

IRs:
REF_72(uint256) -> _value[i]
_valueI(uint256) := REF_72(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
balanceOf[_toI] += _valueI

IRs:
REF_73(uint256) -> balanceOf[_toI]
REF_73(-> balanceOf) = REF_73 + _valueI"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
Transfer(msg.sender,_toI,_valueI)

IRs:
Emit Transfer(msg.sender,_toI,_valueI)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_79(uint256) := i(uint256)
i(uint256) = i + 1"];
22->17;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
TransferMulti(len,amount)

IRs:
Emit TransferMulti(len,amount)"];
23->25;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
transable()

IRs:
MODIFIER_CALL, StandardToken.transable()()"];
24->1;
25[label="Node Type: RETURN 25

EXPRESSION:
amount

IRs:
RETURN amount"];
}
// Function: 1242.sol-POHToken-transferMultiSameVaule(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
len = _to.length

IRs:
REF_74 -> LENGTH _to
len(uint256) := REF_74(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = _value * len

IRs:
TMP_82(uint256) = _value * len
amount(uint256) := TMP_82(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(amount <= balanceOf[msg.sender])

IRs:
REF_75(uint256) -> balanceOf[msg.sender]
TMP_83(bool) = amount <= REF_75
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[msg.sender] -= amount

IRs:
REF_76(uint256) -> balanceOf[msg.sender]
REF_76(-> balanceOf) = REF_76 - amount"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->13;
7[label="Node Type: NEW VARIABLE 7
"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < len

IRs:
TMP_85(bool) = i < len
CONDITION TMP_85"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_toI = _to[i]

IRs:
REF_77(address) -> _to[i]
_toI(address) := REF_77(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balanceOf[_toI] += _value

IRs:
REF_78(uint256) -> balanceOf[_toI]
REF_78(-> balanceOf) = REF_78 + _value"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Transfer(msg.sender,_toI,_value)

IRs:
Emit Transfer(msg.sender,_toI,_value)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_87(uint256) := i(uint256)
i(uint256) = i + 1"];
12->8;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
TransferMulti(len,amount)

IRs:
Emit TransferMulti(len,amount)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
transable()

IRs:
MODIFIER_CALL, StandardToken.transable()()"];
15->1;
16[label="Node Type: RETURN 16

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1242.sol-POHToken-unFreeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->27;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(currUnlockStep == _step || currUnlockSeq == uint256(0))

IRs:
TMP_99(bool) = currUnlockStep == _step
TMP_100 = CONVERT 0 to uint256
TMP_101(bool) = currUnlockSeq == TMP_100
TMP_102(bool) = TMP_99 || TMP_101
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(stepUnlockInfo[_step] == false)

IRs:
REF_86(bool) -> stepUnlockInfo[_step]
TMP_104(bool) = REF_86 == False
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
currArr = freezeOf[_step]

IRs:
REF_87(uint256[]) -> freezeOf[_step]
currArr(uint256[]) = ['REF_87(uint256[])']"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
currUnlockStep = _step

IRs:
currUnlockStep(uint256) := _step(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
currUnlockSeq == uint256(0)

IRs:
TMP_106 = CONVERT 0 to uint256
TMP_107(bool) = currUnlockSeq == TMP_106
CONDITION TMP_107"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
currUnlockSeq = currArr.length

IRs:
REF_88 -> LENGTH currArr
currUnlockSeq(uint256) := REF_88(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->13;
11[label="Node Type: BEGIN_LOOP 11
"];
11->14;
12[label="Node Type: END_LOOP 12
"];
12->23;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
13->11;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i < 99 && currUnlockSeq > 0

IRs:
TMP_108(bool) = i < 99
TMP_109(bool) = currUnlockSeq > 0
TMP_110(bool) = TMP_108 && TMP_109
CONDITION TMP_110"];
14->15[label="True"];
14->12[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
userLockInfo = freezeOf[_step][currUnlockSeq - 1]

IRs:
REF_89(uint256[]) -> freezeOf[_step]
TMP_111(uint256) = currUnlockSeq - 1
REF_90(uint256) -> REF_89[TMP_111]
userLockInfo(uint256) := REF_90(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_amount = userLockInfo & 0xFFFFFFFFFFFFFFFFFFFFFFF

IRs:
TMP_112(uint256) = userLockInfo & 4951760157141521099596496895
_amount(uint256) := TMP_112(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
userAddress = address(userLockInfo >> 92)

IRs:
TMP_113(uint256) = userLockInfo >> 92
TMP_114 = CONVERT TMP_113 to address
userAddress(address) := TMP_114(address)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
balanceOf[userAddress] += _amount

IRs:
REF_91(uint256) -> balanceOf[userAddress]
REF_91(-> balanceOf) = REF_91 + _amount"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
freezeOfUser[userAddress] -= _amount

IRs:
REF_92(uint256) -> freezeOfUser[userAddress]
REF_92(-> freezeOfUser) = REF_92 - _amount"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
Unfreeze(userAddress,_amount)

IRs:
Emit Unfreeze(userAddress,_amount)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
currUnlockSeq --

IRs:
TMP_116(uint256) := currUnlockSeq(uint256)
currUnlockSeq(uint256) = currUnlockSeq - 1"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_117(uint256) := i(uint256)
i(uint256) = i + 1"];
22->14;
23[label="Node Type: IF 23

EXPRESSION:
currUnlockSeq == 0

IRs:
TMP_118(bool) = currUnlockSeq == 0
CONDITION TMP_118"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
stepUnlockInfo[_step] = true

IRs:
REF_93(bool) -> stepUnlockInfo[_step]
REF_93(bool) (->stepUnlockInfo) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: RETURN 26

EXPRESSION:
true

IRs:
RETURN True"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, POHToken.onlyOwner()()"];
27->1;
28[label="Node Type: RETURN 28

EXPRESSION:
unlockOver

IRs:
RETURN unlockOver"];
}
// Function: 1242.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowance[msg.sender][_spender] == 0)

IRs:
REF_10(mapping(address => uint256)) -> allowance[msg.sender]
REF_11(uint256) -> REF_10[_spender]
TMP_16(bool) = REF_11 == 0
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_12(mapping(address => uint256)) -> allowance[msg.sender]
REF_13(uint256) -> REF_12[_spender]
REF_13(uint256) (->allowance) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1242.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowance[msg.sender][_spender]

IRs:
REF_18(mapping(address => uint256)) -> allowance[msg.sender]
REF_19(uint256) -> REF_18[_spender]
oldValue(uint256) := REF_19(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_20(bool) = _subtractedValue > oldValue
CONDITION TMP_20"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowance[msg.sender][_spender] = 0

IRs:
REF_20(mapping(address => uint256)) -> allowance[msg.sender]
REF_21(uint256) -> REF_20[_spender]
REF_21(uint256) (->allowance) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowance[msg.sender][_spender] -= _subtractedValue

IRs:
REF_22(mapping(address => uint256)) -> allowance[msg.sender]
REF_23(uint256) -> REF_22[_spender]
REF_23(-> allowance) = REF_23 - _subtractedValue"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowance[msg.sender][_spender])

IRs:
REF_24(mapping(address => uint256)) -> allowance[msg.sender]
REF_25(uint256) -> REF_24[_spender]
Emit Approval(msg.sender,_spender,REF_25)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1242.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] += _addedValue

IRs:
REF_14(mapping(address => uint256)) -> allowance[msg.sender]
REF_15(uint256) -> REF_14[_spender]
REF_15(-> allowance) = REF_15 + _addedValue"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowance[msg.sender][_spender])

IRs:
REF_16(mapping(address => uint256)) -> allowance[msg.sender]
REF_17(uint256) -> REF_16[_spender]
Emit Approval(msg.sender,_spender,REF_17)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1242.sol-StandardToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = 1.0

IRs:
version(string) := 1.0(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Preserve One’s Health

IRs:
name(string) := Preserve One’s Health(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = POH

IRs:
symbol(string) := POH(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
transfersEnabled = true

IRs:
transfersEnabled(bool) := True(bool)"];
}
// Function: 1242.sol-StandardToken-transable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(transfersEnabled)

IRs:
TMP_22(None) = SOLIDITY_CALL require(bool)(transfersEnabled)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1242.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _to != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[msg.sender] > _value)

IRs:
REF_0(uint256) -> balanceOf[msg.sender]
TMP_3(bool) = REF_0 > _value
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] -= _value

IRs:
REF_1(uint256) -> balanceOf[msg.sender]
REF_1(-> balanceOf) = REF_1 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_2(uint256) -> balanceOf[_to]
REF_2(-> balanceOf) = REF_2 + _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
transable()

IRs:
MODIFIER_CALL, StandardToken.transable()()"];
7->1;
}
// Function: 1242.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_7 = CONVERT 0 to address
TMP_8(bool) = _to != TMP_7
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_allowance = allowance[_from][msg.sender]

IRs:
REF_3(mapping(address => uint256)) -> allowance[_from]
REF_4(uint256) -> REF_3[msg.sender]
_allowance(uint256) := REF_4(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= _allowance)

IRs:
TMP_10(bool) = _value <= _allowance
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(balanceOf[_from] > _value)

IRs:
REF_5(uint256) -> balanceOf[_from]
TMP_12(bool) = REF_5 > _value
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_6(uint256) -> balanceOf[_from]
REF_6(-> balanceOf) = REF_6 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_7(uint256) -> balanceOf[_to]
REF_7(-> balanceOf) = REF_7 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_8(mapping(address => uint256)) -> allowance[_from]
REF_9(uint256) -> REF_8[msg.sender]
REF_9(-> allowance) = REF_9 - _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
transable()

IRs:
MODIFIER_CALL, StandardToken.transable()()"];
10->1;
}
}
