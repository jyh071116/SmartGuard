digraph G {
// Function: 1243.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1243.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1243.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1243.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1243.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1243.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1243.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1243.sol-Math-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_2(bool) = a >= b
CONDITION TMP_2"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1243.sol-Math-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_0(bool) = a >= b
CONDITION TMP_0"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1243.sol-Math-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_3(bool) = a < b
CONDITION TMP_3"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1243.sol-Math-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_1(bool) = a < b
CONDITION TMP_1"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1243.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1243.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_22(bool) = msg.sender == owner
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1243.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_17 = CONVERT 0 to address
TMP_18(bool) = newOwner != TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1243.sol-ReturnVestingRegistry-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1243.sol-ReturnVestingRegistry-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_38(bool) = msg.sender == owner
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1243.sol-ReturnVestingRegistry-record(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(from != 0)

IRs:
TMP_35(bool) = from != 0
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
returnAddress[from] = to

IRs:
REF_3(address) -> returnAddress[from]
REF_3(address) (->returnAddress) := to(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1243.sol-ReturnVestingRegistry-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_30 = CONVERT 0 to address
TMP_31(bool) = newOwner != TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1243.sol-SafeERC20-safeApprove(ERC20,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.approve(spender,value))

IRs:
TMP_28(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:approve, arguments:['spender', 'value']  
TMP_29(None) = SOLIDITY_CALL assert(bool)(TMP_28)"];
}
// Function: 1243.sol-SafeERC20-safeTransfer(ERC20Basic,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.transfer(to,value))

IRs:
TMP_24(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['to', 'value']  
TMP_25(None) = SOLIDITY_CALL assert(bool)(TMP_24)"];
}
// Function: 1243.sol-SafeERC20-safeTransferFrom(ERC20,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.transferFrom(from,to,value))

IRs:
TMP_26(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transferFrom, arguments:['from', 'to', 'value']  
TMP_27(None) = SOLIDITY_CALL assert(bool)(TMP_26)"];
}
// Function: 1243.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_14(uint256) = a + b
c(uint256) := TMP_14(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_15(bool) = c >= a
TMP_16(None) = SOLIDITY_CALL assert(bool)(TMP_15)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1243.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_10(uint256) = a / b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1243.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_4(uint256) = a * b
c(uint256) := TMP_4(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_5(bool) = a == 0
TMP_6(uint256) = c / a
TMP_7(bool) = TMP_6 == b
TMP_8(bool) = TMP_5 || TMP_7
TMP_9(None) = SOLIDITY_CALL assert(bool)(TMP_8)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1243.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_11(bool) = b <= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_13(uint256) = a - b
RETURN TMP_13"];
}
// Function: 1243.sol-TerraformReserve-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1243.sol-TerraformReserve-TerraformReserve(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token != 0)

IRs:
TMP_45(bool) = _token != 0
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
manaToken = ERC20(_token)

IRs:
TMP_47 = CONVERT _token to ERC20
manaToken(ERC20) := TMP_47(ERC20)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
acceptingDeposits = true

IRs:
acceptingDeposits(bool) := True(bool)"];
}
// Function: 1243.sol-TerraformReserve-changeContractState(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
acceptingDeposits = _acceptingDeposits

IRs:
acceptingDeposits(bool) := _acceptingDeposits(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AcceptingDepositsChanged(acceptingDeposits)

IRs:
Emit AcceptingDepositsChanged(acceptingDeposits)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1243.sol-TerraformReserve-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_60(None) = SOLIDITY_CALL revert()()"];
}
// Function: 1243.sol-TerraformReserve-lockMana(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(acceptingDeposits)

IRs:
TMP_48(None) = SOLIDITY_CALL require(bool)(acceptingDeposits)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(mana >= 1000 * 1e18)

IRs:
TMP_49(uint256) = 1000 * 1000000000000000000
TMP_50(bool) = mana >= TMP_49
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(manaToken.transferFrom(_from,this,mana))

IRs:
TMP_52(bool) = HIGH_LEVEL_CALL, dest:manaToken(ERC20), function:transferFrom, arguments:['_from', 'this', 'mana']  
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
lockedBalance[_from] += mana

IRs:
REF_5(uint256) -> lockedBalance[_from]
REF_5(-> lockedBalance) = REF_5 + mana"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalLocked += mana

IRs:
totalLocked(uint256) = totalLocked + mana"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LockedBalance(_from,mana)

IRs:
Emit LockedBalance(_from,mana)"];
}
// Function: 1243.sol-TerraformReserve-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_61(bool) = msg.sender == owner
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1243.sol-TerraformReserve-setTargetContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
landClaim = target

IRs:
landClaim(address) := target(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
manaToken.approve(landClaim,totalLocked)

IRs:
TMP_57(bool) = HIGH_LEVEL_CALL, dest:manaToken(ERC20), function:approve, arguments:['landClaim', 'totalLocked']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LandClaimContractSet(target)

IRs:
Emit LandClaimContractSet(target)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1243.sol-TerraformReserve-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_40 = CONVERT 0 to address
TMP_41(bool) = newOwner != TMP_40
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1243.sol-TokenVesting-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1243.sol-TokenVesting-TokenVesting(address,uint256,uint256,uint256,bool,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != 0x0)

IRs:
TMP_68(bool) = _beneficiary != 0
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_cliff <= _duration)

IRs:
TMP_70(bool) = _cliff <= _duration
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
beneficiary = _beneficiary

IRs:
beneficiary(address) := _beneficiary(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
start = _start

IRs:
start(uint256) := _start(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
cliff = _start.add(_cliff)

IRs:
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_start', '_cliff'] 
cliff(uint256) := TMP_72(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
duration = _duration

IRs:
duration(uint256) := _duration(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
revocable = _revocable

IRs:
revocable(bool) := _revocable(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_73 = CONVERT _token to ERC20
token(ERC20) := TMP_73(ERC20)"];
}
// Function: 1243.sol-TokenVesting-_releaseTo(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
unreleased = releasableAmount()

IRs:
TMP_85(uint256) = INTERNAL_CALL, TokenVesting.releasableAmount()()
unreleased(uint256) := TMP_85(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
released = released.add(unreleased)

IRs:
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['released', 'unreleased'] 
released(uint256) := TMP_86(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token.safeTransfer(target,unreleased)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['token', 'target', 'unreleased'] "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Released(released)

IRs:
Emit Released(released)"];
}
// Function: 1243.sol-TokenVesting-changeBeneficiary(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(target != 0)

IRs:
TMP_74(bool) = target != 0
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
beneficiary = target

IRs:
beneficiary(address) := target(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBeneficiary()

IRs:
MODIFIER_CALL, TokenVesting.onlyBeneficiary()()"];
3->1;
}
// Function: 1243.sol-TokenVesting-onlyBeneficiary()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == beneficiary)

IRs:
TMP_114(bool) = msg.sender == beneficiary
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1243.sol-TokenVesting-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_112(bool) = msg.sender == owner
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1243.sol-TokenVesting-releasableAmount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
vestedAmount().sub(released)

IRs:
TMP_97(uint256) = INTERNAL_CALL, TokenVesting.vestedAmount()()
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_97', 'released'] 
RETURN TMP_98"];
}
// Function: 1243.sol-TokenVesting-release()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= cliff)

IRs:
TMP_77(bool) = now >= cliff
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_releaseTo(beneficiary)

IRs:
INTERNAL_CALL, TokenVesting._releaseTo(address)(beneficiary)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBeneficiary()

IRs:
MODIFIER_CALL, TokenVesting.onlyBeneficiary()()"];
3->1;
}
// Function: 1243.sol-TokenVesting-releaseForeignToken(ERC20,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token != token)

IRs:
TMP_108(bool) = _token != token
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_token.transfer(owner,amount)

IRs:
TMP_110(bool) = HIGH_LEVEL_CALL, dest:_token(ERC20), function:transfer, arguments:['owner', 'amount']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1243.sol-TokenVesting-releaseTo(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= cliff)

IRs:
TMP_81(bool) = now >= cliff
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_releaseTo(target)

IRs:
INTERNAL_CALL, TokenVesting._releaseTo(address)(target)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBeneficiary()

IRs:
MODIFIER_CALL, TokenVesting.onlyBeneficiary()()"];
3->1;
}
// Function: 1243.sol-TokenVesting-revoke()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(revocable)

IRs:
TMP_89(None) = SOLIDITY_CALL require(bool)(revocable)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! revoked)

IRs:
TMP_90 = UnaryType.BANG revoked 
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_releaseTo(beneficiary)

IRs:
INTERNAL_CALL, TokenVesting._releaseTo(address)(beneficiary)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.safeTransfer(owner,token.balanceOf(this))

IRs:
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20), function:balanceOf, arguments:['this']  
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['token', 'owner', 'TMP_93'] "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revoked = true

IRs:
revoked(bool) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Revoked()

IRs:
Emit Revoked()"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 1243.sol-TokenVesting-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_63 = CONVERT 0 to address
TMP_64(bool) = newOwner != TMP_63
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1243.sol-TokenVesting-vestedAmount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
currentBalance = token.balanceOf(this)

IRs:
TMP_99(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20), function:balanceOf, arguments:['this']  
currentBalance(uint256) := TMP_99(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalBalance = currentBalance.add(released)

IRs:
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['currentBalance', 'released'] 
totalBalance(uint256) := TMP_100(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
now < cliff

IRs:
TMP_101(bool) = now < cliff
CONDITION TMP_101"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: IF 5

EXPRESSION:
now >= start.add(duration) || revoked

IRs:
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['start', 'duration'] 
TMP_103(bool) = now >= TMP_102
TMP_104(bool) = TMP_103 || revoked
CONDITION TMP_104"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
totalBalance

IRs:
RETURN totalBalance"];
7[label="Node Type: RETURN 7

EXPRESSION:
totalBalance.mul(now.sub(start)).div(duration)

IRs:
TMP_105(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['now', 'start'] 
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['totalBalance', 'TMP_105'] 
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_106', 'duration'] 
RETURN TMP_107"];
}
}
