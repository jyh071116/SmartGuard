digraph G {
// Function: 1263.sol-IERC20Token-allowance(address,address)
digraph{
}
// Function: 1263.sol-IERC20Token-approve(address,uint256)
digraph{
}
// Function: 1263.sol-IERC20Token-balanceOf(address)
digraph{
}
// Function: 1263.sol-IERC20Token-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
decimals
"];
}
// Function: 1263.sol-IERC20Token-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name
"];
}
// Function: 1263.sol-IERC20Token-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol
"];
}
// Function: 1263.sol-IERC20Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply
"];
}
// Function: 1263.sol-IERC20Token-transfer(address,uint256)
digraph{
}
// Function: 1263.sol-IERC20Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 1263.sol-IOwned-acceptOwnership()
digraph{
}
// Function: 1263.sol-IOwned-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner
"];
}
// Function: 1263.sol-IOwned-transferOwnership(address)
digraph{
}
// Function: 1263.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1263.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_20(bool) = msg.sender == newOwner
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerUpdate(owner,newOwner)

IRs:
Emit OwnerUpdate(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = 0x0

IRs:
newOwner(address) := 0(uint256)"];
}
// Function: 1263.sol-Owned-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner
"];
}
// Function: 1263.sol-Owned-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner)

IRs:
TMP_23(bool) = msg.sender == owner
TMP_24(None) = SOLIDITY_CALL assert(bool)(TMP_23)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1263.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != owner)

IRs:
TMP_17(bool) = _newOwner != owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
3->1;
}
// Function: 1263.sol-Utils-Utils()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1263.sol-Utils-notThis(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(this))

IRs:
TMP_14 = CONVERT this to address
TMP_15(bool) = _address != TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1263.sol-Utils-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_0(uint256) = _x + _y
z(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_1(bool) = z >= _x
TMP_2(None) = SOLIDITY_CALL assert(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1263.sol-Utils-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x * _y

IRs:
TMP_6(uint256) = _x * _y
z(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_x == 0 || z / _x == _y)

IRs:
TMP_7(bool) = _x == 0
TMP_8(uint256) = z / _x
TMP_9(bool) = TMP_8 == _y
TMP_10(bool) = TMP_7 || TMP_9
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1263.sol-Utils-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_x >= _y)

IRs:
TMP_3(bool) = _x >= _y
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_5(uint256) = _x - _y
RETURN TMP_5"];
}
// Function: 1263.sol-Utils-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != 0x0)

IRs:
TMP_12(bool) = _address != 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1263.sol-YooStop-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1263.sol-YooStop-acceptOwnership()
digraph{
}
// Function: 1263.sol-YooStop-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner
"];
}
// Function: 1263.sol-YooStop-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner)

IRs:
TMP_33(bool) = msg.sender == owner
TMP_34(None) = SOLIDITY_CALL assert(bool)(TMP_33)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1263.sol-YooStop-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
}
// Function: 1263.sol-YooStop-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
2->1;
}
// Function: 1263.sol-YooStop-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
2->1;
}
// Function: 1263.sol-YooStop-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! stopped)

IRs:
TMP_35 = UnaryType.BANG stopped 
TMP_36(None) = SOLIDITY_CALL assert(bool)(TMP_35)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1263.sol-YooStop-transferOwnership(address)
digraph{
}
// Function: 1263.sol-YoobaICO-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1263.sol-YoobaICO-Utils()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1263.sol-YoobaICO-YoobaICO(IERC20Token)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
yoobaTokenAddress = _yoobaTokenAddress

IRs:
yoobaTokenAddress(IERC20Token) := _yoobaTokenAddress(IERC20Token)"];
}
// Function: 1263.sol-YoobaICO-acceptOwnership()
digraph{
}
// Function: 1263.sol-YoobaICO-buyToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! stopped && now >= startICOTime && now <= endICOTime)

IRs:
TMP_112 = UnaryType.BANG stopped 
TMP_113(bool) = now >= startICOTime
TMP_114(bool) = TMP_112 && TMP_113
TMP_115(bool) = now <= endICOTime
TMP_116(bool) = TMP_114 && TMP_115
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value >= 100000000000000000 && msg.value <= 100000000000000000000)

IRs:
TMP_118(bool) = msg.value >= 100000000000000000
TMP_119(bool) = msg.value <= 100000000000000000000
TMP_120(bool) = TMP_118 && TMP_119
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
dayNum = ((now - startICOTime) / 86400) + 1

IRs:
TMP_122(uint256) = now - startICOTime
TMP_123(uint256) = TMP_122 / 86400
TMP_124(uint256) = TMP_123 + 1
dayNum(uint256) := TMP_124(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
daysnumber = dayNum

IRs:
daysnumber(uint256) := dayNum(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(daySellMap[dayNum] <= dayLimit)

IRs:
REF_55(uint256) -> daySellMap[dayNum]
TMP_125(bool) = REF_55 <= dayLimit
TMP_126(None) = SOLIDITY_CALL assert(bool)(TMP_125)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
amount = 0

IRs:
amount(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
now < (startICOTime + 604800) && leftICOTokens > milestone1

IRs:
TMP_127(uint256) = startICOTime + 604800
TMP_128(bool) = now < TMP_127
TMP_129(bool) = leftICOTokens > milestone1
TMP_130(bool) = TMP_128 && TMP_129
CONDITION TMP_130"];
7->8[label="True"];
7->13[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
msg.value * 320000 <= (leftICOTokens - milestone1)

IRs:
TMP_131(uint256) = msg.value * 320000
TMP_132(uint256) = leftICOTokens - milestone1
TMP_133(bool) = TMP_131 <= TMP_132
CONDITION TMP_133"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
amount = msg.value * 320000

IRs:
TMP_134(uint256) = msg.value * 320000
amount(uint256) := TMP_134(uint256)"];
9->12;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
priceOneEther1 = (leftICOTokens - milestone1) / 320000

IRs:
TMP_135(uint256) = leftICOTokens - milestone1
TMP_136(uint256) = TMP_135 / 320000
priceOneEther1(uint256) := TMP_136(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
amount = (msg.value - priceOneEther1) * 250000 + priceOneEther1 * 320000

IRs:
TMP_137(uint256) = msg.value - priceOneEther1
TMP_138(uint256) = TMP_137 * 250000
TMP_139(uint256) = priceOneEther1 * 320000
TMP_140(uint256) = TMP_138 + TMP_139
amount(uint256) := TMP_140(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->25;
13[label="Node Type: IF 13

EXPRESSION:
leftICOTokens > milestone2

IRs:
TMP_141(bool) = leftICOTokens > milestone2
CONDITION TMP_141"];
13->14[label="True"];
13->19[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
msg.value * 250000 <= (leftICOTokens - milestone2)

IRs:
TMP_142(uint256) = msg.value * 250000
TMP_143(uint256) = leftICOTokens - milestone2
TMP_144(bool) = TMP_142 <= TMP_143
CONDITION TMP_144"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
amount = msg.value * 250000

IRs:
TMP_145(uint256) = msg.value * 250000
amount(uint256) := TMP_145(uint256)"];
15->18;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
priceOneEther2 = (leftICOTokens - milestone2) / 250000

IRs:
TMP_146(uint256) = leftICOTokens - milestone2
TMP_147(uint256) = TMP_146 / 250000
priceOneEther2(uint256) := TMP_147(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
amount = (msg.value - priceOneEther2) * 180000 + priceOneEther2 * 250000

IRs:
TMP_148(uint256) = msg.value - priceOneEther2
TMP_149(uint256) = TMP_148 * 180000
TMP_150(uint256) = priceOneEther2 * 250000
TMP_151(uint256) = TMP_149 + TMP_150
amount(uint256) := TMP_151(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->24;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
assert(bool)(msg.value * 180000 <= leftICOTokens)

IRs:
TMP_152(uint256) = msg.value * 180000
TMP_153(bool) = TMP_152 <= leftICOTokens
TMP_154(None) = SOLIDITY_CALL assert(bool)(TMP_153)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
(leftICOTokens - msg.value * 180000) < 18000 && msg.value * 180000 <= 100 * 180000 * (10 ** 18)

IRs:
TMP_155(uint256) = msg.value * 180000
TMP_156(uint256) = leftICOTokens - TMP_155
TMP_157(bool) = TMP_156 < 18000
TMP_158(uint256) = msg.value * 180000
TMP_159(uint256) = 100 * 180000
TMP_160(uint256) = 10 ** 18
TMP_161(uint256) = TMP_159 * TMP_160
TMP_162(bool) = TMP_158 <= TMP_161
TMP_163(bool) = TMP_157 && TMP_162
CONDITION TMP_163"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
amount = leftICOTokens

IRs:
amount(uint256) := leftICOTokens(uint256)"];
21->23;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
amount = msg.value * 180000

IRs:
TMP_164(uint256) = msg.value * 180000
amount(uint256) := TMP_164(uint256)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
amount >= 18000 * (10 ** 18) && amount <= 320000 * 100 * (10 ** 18)

IRs:
TMP_165(uint256) = 10 ** 18
TMP_166(uint256) = 18000 * TMP_165
TMP_167(bool) = amount >= TMP_166
TMP_168(uint256) = 320000 * 100
TMP_169(uint256) = 10 ** 18
TMP_170(uint256) = TMP_168 * TMP_169
TMP_171(bool) = amount <= TMP_170
TMP_172(bool) = TMP_167 && TMP_171
CONDITION TMP_172"];
26->27[label="True"];
26->34[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
leftICOTokens = safeSub(leftICOTokens,amount)

IRs:
TMP_173(uint256) = INTERNAL_CALL, Utils.safeSub(uint256,uint256)(leftICOTokens,amount)
leftICOTokens(uint256) := TMP_173(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
pendingBalanceMap[msg.sender] = safeAdd(pendingBalanceMap[msg.sender],amount)

IRs:
REF_56(uint256) -> pendingBalanceMap[msg.sender]
REF_57(uint256) -> pendingBalanceMap[msg.sender]
TMP_174(uint256) = INTERNAL_CALL, Utils.safeAdd(uint256,uint256)(REF_57,amount)
REF_56(uint256) (->pendingBalanceMap) := TMP_174(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
totalBuyMap[msg.sender] = safeAdd(totalBuyMap[msg.sender],amount)

IRs:
REF_58(uint256) -> totalBuyMap[msg.sender]
REF_59(uint256) -> totalBuyMap[msg.sender]
TMP_175(uint256) = INTERNAL_CALL, Utils.safeAdd(uint256,uint256)(REF_59,amount)
REF_58(uint256) (->totalBuyMap) := TMP_175(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
daySellMap[dayNum] += amount

IRs:
REF_60(uint256) -> daySellMap[dayNum]
REF_60(-> daySellMap) = REF_60 + amount"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
totalBuyerETHMap[msg.sender] = safeAdd(totalBuyerETHMap[msg.sender],msg.value)

IRs:
REF_61(uint256) -> totalBuyerETHMap[msg.sender]
REF_62(uint256) -> totalBuyerETHMap[msg.sender]
TMP_176(uint256) = INTERNAL_CALL, Utils.safeAdd(uint256,uint256)(REF_62,msg.value)
REF_61(uint256) (->totalBuyerETHMap) := TMP_176(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
tatalEthFromBuyer += msg.value

IRs:
tatalEthFromBuyer(uint256) = tatalEthFromBuyer + msg.value"];
32->33;
33[label="Node Type: RETURN 33
"];
34[label="Node Type: EXPRESSION 34

EXPRESSION:
revert()()

IRs:
TMP_177(None) = SOLIDITY_CALL revert()()"];
34->35;
35[label="Node Type: END_IF 35
"];
}
// Function: 1263.sol-YoobaICO-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyToken()

IRs:
INTERNAL_CALL, YoobaICO.buyToken()()"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, YooStop.stoppable()()"];
2->1;
}
// Function: 1263.sol-YoobaICO-initLeftICOTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! hasInitLeftICOTokens)

IRs:
TMP_58 = UnaryType.BANG hasInitLeftICOTokens 
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
leftICOTokens = yoobaTokenAddress.balanceOf(this)

IRs:
TMP_60(uint256) = HIGH_LEVEL_CALL, dest:yoobaTokenAddress(IERC20Token), function:balanceOf, arguments:['this']  
leftICOTokens(uint256) := TMP_60(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
hasInitLeftICOTokens = true

IRs:
hasInitLeftICOTokens(bool) := True(bool)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
4->1;
}
// Function: 1263.sol-YoobaICO-notThis(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(this))

IRs:
TMP_182 = CONVERT this to address
TMP_183(bool) = _address != TMP_182
TMP_184(None) = SOLIDITY_CALL require(bool)(TMP_183)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1263.sol-YoobaICO-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner
"];
}
// Function: 1263.sol-YoobaICO-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner)

IRs:
TMP_187(bool) = msg.sender == owner
TMP_188(None) = SOLIDITY_CALL assert(bool)(TMP_187)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1263.sol-YoobaICO-refund(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to.length > 0 && _to.length < 10000)

IRs:
REF_27 -> LENGTH _to
TMP_94(bool) = REF_27 > 0
REF_28 -> LENGTH _to
TMP_95(bool) = REF_28 < 10000
TMP_96(bool) = TMP_94 && TMP_95
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint16) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _to.length

IRs:
REF_29 -> LENGTH _to
TMP_98(bool) = i < REF_29
CONDITION TMP_98"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
pendingBalanceMap[_to[i]] > 0 && withdrawYOOMap[_to[i]] == 0 && totalBuyerETHMap[_to[i]] > 0 && totalBuyMap[_to[i]] > 0

IRs:
REF_30(address) -> _to[i]
REF_31(uint256) -> pendingBalanceMap[REF_30]
TMP_99(bool) = REF_31 > 0
REF_32(address) -> _to[i]
REF_33(uint256) -> withdrawYOOMap[REF_32]
TMP_100(bool) = REF_33 == 0
TMP_101(bool) = TMP_99 && TMP_100
REF_34(address) -> _to[i]
REF_35(uint256) -> totalBuyerETHMap[REF_34]
TMP_102(bool) = REF_35 > 0
TMP_103(bool) = TMP_101 && TMP_102
REF_36(address) -> _to[i]
REF_37(uint256) -> totalBuyMap[REF_36]
TMP_104(bool) = REF_37 > 0
TMP_105(bool) = TMP_103 && TMP_104
CONDITION TMP_105"];
6->7[label="True"];
6->15[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
totalBuyerETHMap[_to[i]] <= this.balance

IRs:
REF_38(address) -> _to[i]
REF_39(uint256) -> totalBuyerETHMap[REF_38]
REF_40(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_106(bool) = REF_39 <= REF_40
CONDITION TMP_106"];
7->8[label="True"];
7->14[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_to[i].transfer(totalBuyerETHMap[_to[i]])

IRs:
REF_41(address) -> _to[i]
REF_43(address) -> _to[i]
REF_44(uint256) -> totalBuyerETHMap[REF_43]
Transfer dest:REF_41 value:REF_44"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
tatalEthFromBuyer = tatalEthFromBuyer - totalBuyerETHMap[_to[i]]

IRs:
REF_45(address) -> _to[i]
REF_46(uint256) -> totalBuyerETHMap[REF_45]
TMP_108(uint256) = tatalEthFromBuyer - REF_46
tatalEthFromBuyer(uint256) := TMP_108(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
leftICOTokens = leftICOTokens + pendingBalanceMap[_to[i]]

IRs:
REF_47(address) -> _to[i]
REF_48(uint256) -> pendingBalanceMap[REF_47]
TMP_109(uint256) = leftICOTokens + REF_48
leftICOTokens(uint256) := TMP_109(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalBuyerETHMap[_to[i]] = 0

IRs:
REF_49(address) -> _to[i]
REF_50(uint256) -> totalBuyerETHMap[REF_49]
REF_50(uint256) (->totalBuyerETHMap) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
pendingBalanceMap[_to[i]] = 0

IRs:
REF_51(address) -> _to[i]
REF_52(uint256) -> pendingBalanceMap[REF_51]
REF_52(uint256) (->pendingBalanceMap) := 0(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
totalBuyMap[_to[i]] = 0

IRs:
REF_53(address) -> _to[i]
REF_54(uint256) -> totalBuyMap[REF_53]
REF_54(uint256) (->totalBuyMap) := 0(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_110(uint16) := i(uint16)
i(uint16) = i + 1"];
16->5;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
17->1;
}
// Function: 1263.sol-YoobaICO-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_37(uint256) = _x + _y
z(uint256) := TMP_37(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_38(bool) = z >= _x
TMP_39(None) = SOLIDITY_CALL assert(bool)(TMP_38)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1263.sol-YoobaICO-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x * _y

IRs:
TMP_43(uint256) = _x * _y
z(uint256) := TMP_43(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_x == 0 || z / _x == _y)

IRs:
TMP_44(bool) = _x == 0
TMP_45(uint256) = z / _x
TMP_46(bool) = TMP_45 == _y
TMP_47(bool) = TMP_44 || TMP_46
TMP_48(None) = SOLIDITY_CALL assert(bool)(TMP_47)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1263.sol-YoobaICO-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_x >= _y)

IRs:
TMP_40(bool) = _x >= _y
TMP_41(None) = SOLIDITY_CALL assert(bool)(TMP_40)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_42(uint256) = _x - _y
RETURN TMP_42"];
}
// Function: 1263.sol-YoobaICO-setDaySellAmount(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
daySellMap[_dayNum] = _sellAmount

IRs:
REF_1(uint256) -> daySellMap[_dayNum]
REF_1(uint256) (->daySellMap) := _sellAmount(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
2->1;
}
// Function: 1263.sol-YoobaICO-setLeftICOTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
leftICOTokens = left

IRs:
leftICOTokens(uint256) := left(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
2->1;
}
// Function: 1263.sol-YoobaICO-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
startICOTime = 0

IRs:
startICOTime(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
endICOTime = 0

IRs:
endICOTime(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
leftICOTokens = 0

IRs:
leftICOTokens(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
tatalEthFromBuyer = 0

IRs:
tatalEthFromBuyer(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
daysnumber = 0

IRs:
daysnumber(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
milestone1 = 4000000000000000000000000000

IRs:
milestone1(uint256) := 4000000000000000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
milestone2 = 2500000000000000000000000000

IRs:
milestone2(uint256) := 2500000000000000000000000000(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
dayLimit = 300000000000000000000000000

IRs:
dayLimit(uint256) := 300000000000000000000000000(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
hasInitLeftICOTokens = false

IRs:
hasInitLeftICOTokens(bool) := False(bool)"];
}
// Function: 1263.sol-YoobaICO-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
2->1;
}
// Function: 1263.sol-YoobaICO-startICO(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
startICOTime = _startICOTime

IRs:
startICOTime(uint256) := _startICOTime(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
endICOTime = _endICOTime

IRs:
endICOTime(uint256) := _endICOTime(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
3->1;
}
// Function: 1263.sol-YoobaICO-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
2->1;
}
// Function: 1263.sol-YoobaICO-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! stopped)

IRs:
TMP_185 = UnaryType.BANG stopped 
TMP_186(None) = SOLIDITY_CALL assert(bool)(TMP_185)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1263.sol-YoobaICO-transferOwnership(address)
digraph{
}
// Function: 1263.sol-YoobaICO-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != 0x0)

IRs:
TMP_180(bool) = _address != 0
TMP_181(None) = SOLIDITY_CALL require(bool)(TMP_180)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1263.sol-YoobaICO-withdrawERC20TokenTo(IERC20Token,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_token.transfer(_to,_amount))

IRs:
TMP_69(bool) = HIGH_LEVEL_CALL, dest:_token(IERC20Token), function:transfer, arguments:['_to', '_amount']  
TMP_70(None) = SOLIDITY_CALL assert(bool)(TMP_69)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
validAddress(_token)

IRs:
MODIFIER_CALL, Utils.validAddress(address)(_token)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validAddress(_to)

IRs:
MODIFIER_CALL, Utils.validAddress(address)(_to)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
notThis(_to)

IRs:
MODIFIER_CALL, Utils.notThis(address)(_to)"];
5->1;
}
// Function: 1263.sol-YoobaICO-withdrawTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount <= this.balance)

IRs:
REF_2(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_64(bool) = _amount <= REF_2
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_to.transfer(_amount)

IRs:
Transfer dest:_to value:_amount"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notThis(_to)

IRs:
MODIFIER_CALL, Utils.notThis(address)(_to)"];
4->1;
}
// Function: 1263.sol-YoobaICO-withdrawToBuyer(IERC20Token,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_token.transfer(_to,_amount))

IRs:
TMP_86(bool) = HIGH_LEVEL_CALL, dest:_token(IERC20Token), function:transfer, arguments:['_to', '_amount']  
TMP_87(None) = SOLIDITY_CALL assert(bool)(TMP_86)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
withdrawYOOMap[_to] = safeAdd(withdrawYOOMap[_to],_amount)

IRs:
REF_23(uint256) -> withdrawYOOMap[_to]
REF_24(uint256) -> withdrawYOOMap[_to]
TMP_88(uint256) = INTERNAL_CALL, Utils.safeAdd(uint256,uint256)(REF_24,_amount)
REF_23(uint256) (->withdrawYOOMap) := TMP_88(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingBalanceMap[_to] = safeSub(pendingBalanceMap[_to],_amount)

IRs:
REF_25(uint256) -> pendingBalanceMap[_to]
REF_26(uint256) -> pendingBalanceMap[_to]
TMP_89(uint256) = INTERNAL_CALL, Utils.safeSub(uint256,uint256)(REF_26,_amount)
REF_25(uint256) (->pendingBalanceMap) := TMP_89(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
validAddress(_token)

IRs:
MODIFIER_CALL, Utils.validAddress(address)(_token)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
validAddress(_to)

IRs:
MODIFIER_CALL, Utils.validAddress(address)(_to)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
notThis(_to)

IRs:
MODIFIER_CALL, Utils.notThis(address)(_to)"];
7->1;
}
// Function: 1263.sol-YoobaICO-withdrawToBuyer(IERC20Token,address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to.length > 0 && _to.length < 10000)

IRs:
REF_5 -> LENGTH _to
TMP_75(bool) = REF_5 > 0
REF_6 -> LENGTH _to
TMP_76(bool) = REF_6 < 10000
TMP_77(bool) = TMP_75 && TMP_76
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint16) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _to.length

IRs:
REF_7 -> LENGTH _to
TMP_79(bool) = i < REF_7
CONDITION TMP_79"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
pendingBalanceMap[_to[i]] > 0

IRs:
REF_8(address) -> _to[i]
REF_9(uint256) -> pendingBalanceMap[REF_8]
TMP_80(bool) = REF_9 > 0
CONDITION TMP_80"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(_token.transfer(_to[i],pendingBalanceMap[_to[i]]))

IRs:
REF_11(address) -> _to[i]
REF_12(address) -> _to[i]
REF_13(uint256) -> pendingBalanceMap[REF_12]
TMP_81(bool) = HIGH_LEVEL_CALL, dest:_token(IERC20Token), function:transfer, arguments:['REF_11', 'REF_13']  
TMP_82(None) = SOLIDITY_CALL assert(bool)(TMP_81)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
withdrawYOOMap[_to[i]] = safeAdd(withdrawYOOMap[_to[i]],pendingBalanceMap[_to[i]])

IRs:
REF_14(address) -> _to[i]
REF_15(uint256) -> withdrawYOOMap[REF_14]
REF_16(address) -> _to[i]
REF_17(uint256) -> withdrawYOOMap[REF_16]
REF_18(address) -> _to[i]
REF_19(uint256) -> pendingBalanceMap[REF_18]
TMP_83(uint256) = INTERNAL_CALL, Utils.safeAdd(uint256,uint256)(REF_17,REF_19)
REF_15(uint256) (->withdrawYOOMap) := TMP_83(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pendingBalanceMap[_to[i]] = 0

IRs:
REF_20(address) -> _to[i]
REF_21(uint256) -> pendingBalanceMap[REF_20]
REF_21(uint256) (->pendingBalanceMap) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_84(uint16) := i(uint16)
i(uint16) = i + 1"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Owned.ownerOnly()()"];
12->1;
}
}
