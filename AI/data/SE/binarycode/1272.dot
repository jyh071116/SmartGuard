digraph G {
// Function: 1272.sol-BurnableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_holder])

IRs:
REF_77(uint256) -> balances[_holder]
TMP_92(bool) = _value <= REF_77
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_holder] = balances[_holder].subtract(_value)

IRs:
REF_78(uint256) -> balances[_holder]
REF_79(uint256) -> balances[_holder]
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['REF_79', '_value'] 
REF_78(uint256) (->balances) := TMP_94(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = totalSupply.subtract(_value)

IRs:
TMP_95(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_95(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_holder,_value)

IRs:
Emit Burn(_holder,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_holder,address(0),_value)

IRs:
TMP_97 = CONVERT 0 to address
Emit Transfer(_holder,TMP_97,_value)"];
}
// Function: 1272.sol-BurnableToken-allowance(address,address)
digraph{
}
// Function: 1272.sol-BurnableToken-approve(address,uint256)
digraph{
}
// Function: 1272.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 1272.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 1272.sol-BurnableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
oldValue(uint256) := REF_69(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_86(bool) = _subtractedValue > oldValue
CONDITION TMP_86"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
REF_71(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.subtract(_subtractedValue)

IRs:
REF_72(mapping(address => uint256)) -> allowed[msg.sender]
REF_73(uint256) -> REF_72[_spender]
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_73(uint256) (->allowed) := TMP_87(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
Emit Approval(msg.sender,_spender,REF_76)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_89(uint256) = 2 * 32
MODIFIER_CALL, StandardToken.onlyPayloadSize(uint256)(TMP_89)"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-BurnableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_61(mapping(address => uint256)) -> allowed[msg.sender]
REF_62(uint256) -> REF_61[_spender]
oldValue(uint256) := REF_62(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.add(_addedValue)

IRs:
REF_63(mapping(address => uint256)) -> allowed[msg.sender]
REF_64(uint256) -> REF_63[_spender]
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['oldValue', '_addedValue'] 
REF_64(uint256) (->allowed) := TMP_82(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_66(mapping(address => uint256)) -> allowed[msg.sender]
REF_67(uint256) -> REF_66[_spender]
Emit Approval(msg.sender,_spender,REF_67)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_84(uint256) = 2 * 32
MODIFIER_CALL, StandardToken.onlyPayloadSize(uint256)(TMP_84)"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-BurnableToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length == size + 4)

IRs:
REF_82 -> LENGTH msg.data
TMP_99(uint256) = size + 4
TMP_100(bool) = REF_82 == TMP_99
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1272.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 1272.sol-BurnableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1272.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 1272.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 1272.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 1272.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 1272.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 1272.sol-ERC223Interface-allowance(address,address)
digraph{
}
// Function: 1272.sol-ERC223Interface-approve(address,uint256)
digraph{
}
// Function: 1272.sol-ERC223Interface-balanceOf(address)
digraph{
}
// Function: 1272.sol-ERC223Interface-transfer(address,uint256)
digraph{
}
// Function: 1272.sol-ERC223Interface-transfer(address,uint256,bytes)
digraph{
}
// Function: 1272.sol-ERC223Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 1272.sol-ERC223ReceivingContract-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 1272.sol-ICO-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_244(bool) = msg.sender == newOwner
TMP_245(None) = SOLIDITY_CALL require(bool)(TMP_244)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newOwner = address(0)

IRs:
TMP_246 = CONVERT 0 to address
newOwner(address) := TMP_246(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
}
// Function: 1272.sol-ICO-addBeneficiary(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
beneficiaries.push(Beneficiary({wallet:_wallet,transferred:0,toTransfer:_toTransfer}))

IRs:
TMP_305(ICO.Beneficiary) = new Beneficiary(_wallet,0,_toTransfer)
REF_205 -> LENGTH beneficiaries
TMP_307(uint256) := REF_205(uint256)
TMP_308(uint256) = TMP_307 + 1
REF_205(uint256) (->beneficiaries) := TMP_308(uint256)
REF_206(ICO.Beneficiary) -> beneficiaries[TMP_307]
REF_206(ICO.Beneficiary) (->beneficiaries) := TMP_305(ICO.Beneficiary)"];
}
// Function: 1272.sol-ICO-afterEnd()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > salePeriod.end)

IRs:
REF_219(uint256) -> salePeriod.end
TMP_336(bool) = now > REF_219
TMP_337(None) = SOLIDITY_CALL require(bool)(TMP_336)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1272.sol-ICO-allocateFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
totalSold < softCap

IRs:
TMP_294(bool) = totalSold < softCap
CONDITION TMP_294"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
balance = address(this).balance - 5000000000000000000000

IRs:
TMP_295 = CONVERT this to address
TMP_296(uint256) = SOLIDITY_CALL balance(address)(TMP_295)
TMP_297(uint256) = TMP_296 - 5000000000000000000000
balance(uint256) := TMP_297(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
length = beneficiaries.length

IRs:
REF_194 -> LENGTH beneficiaries
length(uint256) := REF_194(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
toTransfer = 0

IRs:
toTransfer(uint256) := 0(uint256)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < length

IRs:
TMP_298(bool) = i < length
CONDITION TMP_298"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
beneficiary = beneficiaries[i]

IRs:
REF_195(ICO.Beneficiary) -> beneficiaries[i]
beneficiary(ICO.Beneficiary) := REF_195(ICO.Beneficiary)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
toTransfer = beneficiary.toTransfer.subtract(beneficiary.transferred)

IRs:
REF_196(uint256) -> beneficiary.toTransfer
REF_198(uint256) -> beneficiary.transferred
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['REF_196', 'REF_198'] 
toTransfer(uint256) := TMP_299(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
toTransfer > 0

IRs:
TMP_300(bool) = toTransfer > 0
CONDITION TMP_300"];
13->14[label="True"];
13->20[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
toTransfer > balance

IRs:
TMP_301(bool) = toTransfer > balance
CONDITION TMP_301"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
toTransfer = balance

IRs:
toTransfer(uint256) := balance(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
beneficiary.wallet.transfer(toTransfer)

IRs:
REF_199(address) -> beneficiary.wallet
Transfer dest:REF_199 value:toTransfer"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
beneficiary.transferred = beneficiary.transferred.add(toTransfer)

IRs:
REF_201(uint256) -> beneficiary.transferred
REF_202(uint256) -> beneficiary.transferred
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_202', 'toTransfer'] 
REF_201(uint256) (->beneficiary) := TMP_303(uint256)"];
18->19;
19[label="Node Type: BREAK 19
"];
19->8;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_304(uint256) := i(uint256)
i(uint256) = i + 1"];
21->10;
}
// Function: 1272.sol-ICO-burnUnsold()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
unsold = token.balanceOf(address(this))

IRs:
TMP_270 = CONVERT this to address
TMP_271(uint256) = HIGH_LEVEL_CALL, dest:token(ICOToken), function:balanceOf, arguments:['TMP_270']  
unsold(uint256) := TMP_271(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.burn(unsold)

IRs:
HIGH_LEVEL_CALL, dest:token(ICOToken), function:burn, arguments:['unsold']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
afterEnd()

IRs:
MODIFIER_CALL, ICO.afterEnd()()"];
4->1;
}
// Function: 1272.sol-ICO-calculateReward(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
reward = 0

IRs:
reward(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
step = 0

IRs:
step(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
firstPart = 0

IRs:
firstPart(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nextPart = 0

IRs:
nextPart(uint256) := 0(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->21;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 1

IRs:
i(uint8) := 1(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i <= 4

IRs:
TMP_309(bool) = i <= 4
CONDITION TMP_309"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
step = 5000000e2 * i

IRs:
TMP_310(uint256) = 500000000 * i
step(uint256) := TMP_310(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_sold < step

IRs:
TMP_311(bool) = _sold < step
CONDITION TMP_311"];
10->11[label="True"];
10->19[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
_purchased.add(_sold) > step

IRs:
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_purchased', '_sold'] 
TMP_313(bool) = TMP_312 > step
CONDITION TMP_313"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
nextPart = _purchased.add(_sold).subtract(step)

IRs:
TMP_314(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_purchased', '_sold'] 
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['TMP_314', 'step'] 
nextPart(uint256) := TMP_315(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
firstPart = _purchased.subtract(nextPart)

IRs:
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['_purchased', 'nextPart'] 
firstPart(uint256) := TMP_316(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
reward = reward.add(nextPart.multiply(20 - 5 * i).divide(100))

IRs:
TMP_317(uint256) = 5 * i
TMP_318(uint256) = 20 - TMP_317
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.multiply(uint256,uint256), arguments:['nextPart', 'TMP_318'] 
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.divide(uint256,uint256), arguments:['TMP_319', '100'] 
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['reward', 'TMP_320'] 
reward(uint256) := TMP_321(uint256)"];
14->16;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
firstPart = _purchased

IRs:
firstPart(uint256) := _purchased(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
reward = reward.add(firstPart.multiply(20 - 5 * (i - 1)).divide(100))

IRs:
TMP_322(uint8) = i - 1
TMP_323(uint256) = 5 * TMP_322
TMP_324(uint256) = 20 - TMP_323
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.multiply(uint256,uint256), arguments:['firstPart', 'TMP_324'] 
TMP_326(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.divide(uint256,uint256), arguments:['TMP_325', '100'] 
TMP_327(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['reward', 'TMP_326'] 
reward(uint256) := TMP_327(uint256)"];
17->18;
18[label="Node Type: BREAK 18
"];
18->6;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_328(uint8) := i(uint8)
i(uint8) = i + 1"];
20->8;
21[label="Node Type: RETURN 21

EXPRESSION:
reward

IRs:
RETURN reward"];
}
// Function: 1272.sol-ICO-changeEndTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
salePeriod.end = _endTime

IRs:
REF_186(uint256) -> salePeriod.end
REF_186(uint256) (->salePeriod) := _endTime(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1272.sol-ICO-changeStartTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
salePeriod.start = _startTime

IRs:
REF_185(uint256) -> salePeriod.start
REF_185(uint256) (->salePeriod) := _startTime(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1272.sol-ICO-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1272.sol-ICO-constructor(ICOToken,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = _token

IRs:
token(ICOToken) := _token(ICOToken)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
salePeriod.start = _startTime

IRs:
REF_169(uint256) -> salePeriod.start
REF_169(uint256) (->salePeriod) := _startTime(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
salePeriod.end = _endTime

IRs:
REF_170(uint256) -> salePeriod.end
REF_170(uint256) (->salePeriod) := _endTime(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
addBeneficiary(0x1f7672D49eEEE0dfEB971207651A42392e0ed1c5,5000000000000000000000)

IRs:
INTERNAL_CALL, ICO.addBeneficiary(address,uint256)(179620204980681997675891710123170997508611428805,5000000000000000000000)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addBeneficiary(0x7ADCE5a8CDC22b65A07b29Fb9F90ebe16F450aB1,15000000000000000000000)

IRs:
INTERNAL_CALL, ICO.addBeneficiary(address,uint256)(701423044138601099783512729004882404671016471217,15000000000000000000000)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
addBeneficiary(0xa406b97666Ea3D2093bDE9644794F8809B0F58Cc,10000000000000000000000)

IRs:
INTERNAL_CALL, ICO.addBeneficiary(address,uint256)(936424446949315030872422601862603291911967955148,10000000000000000000000)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
addBeneficiary(0x3Be990A4031D6A6a9f44c686ccD8B194Bdeea790,10000000000000000000000)

IRs:
INTERNAL_CALL, ICO.addBeneficiary(address,uint256)(342039129089486934610305165224111150638297950096,10000000000000000000000)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
addBeneficiary(0x80E94901ba1f6661A75aFC19f6E2A6CEe29Ff77a,10000000000000000000000)

IRs:
INTERNAL_CALL, ICO.addBeneficiary(address,uint256)(735953252081263924674078164573565611148365002618,10000000000000000000000)"];
}
// Function: 1272.sol-ICO-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= minPurchase)

IRs:
TMP_253(bool) = msg.value >= minPurchase
TMP_254(None) = SOLIDITY_CALL require(bool)(TMP_253)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
unsold = forSale.subtract(totalSold)

IRs:
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['forSale', 'totalSold'] 
unsold(uint256) := TMP_255(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
paid = msg.value

IRs:
paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
purchased = paid.divide(price)

IRs:
TMP_256(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.divide(uint256,uint256), arguments:['paid', 'price'] 
purchased(uint256) := TMP_256(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
purchased > unsold

IRs:
TMP_257(bool) = purchased > unsold
CONDITION TMP_257"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
purchased = unsold

IRs:
purchased(uint256) := unsold(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
toReturn = paid.subtract(purchased.multiply(price))

IRs:
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.multiply(uint256,uint256), arguments:['purchased', 'price'] 
TMP_259(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['paid', 'TMP_258'] 
toReturn(uint256) := TMP_259(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
reward = calculateReward(totalSold,purchased)

IRs:
TMP_260(uint256) = INTERNAL_CALL, ICO.calculateReward(uint256,uint256)(totalSold,purchased)
reward(uint256) := TMP_260(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
toReturn > 0

IRs:
TMP_261(bool) = toReturn > 0
CONDITION TMP_261"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
msg.sender.transfer(toReturn)

IRs:
Transfer dest:msg.sender value:toReturn"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
token.transfer(msg.sender,purchased.add(reward))

IRs:
TMP_263(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['purchased', 'reward'] 
TMP_264(bool) = HIGH_LEVEL_CALL, dest:token(ICOToken), function:transfer, arguments:['msg.sender', 'TMP_263']  "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
allocateFunds()

IRs:
INTERNAL_CALL, ICO.allocateFunds()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
buyers[msg.sender] = buyers[msg.sender].add(paid.subtract(toReturn))

IRs:
REF_178(uint256) -> buyers[msg.sender]
REF_179(uint256) -> buyers[msg.sender]
TMP_266(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['paid', 'toReturn'] 
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_179', 'TMP_266'] 
REF_178(uint256) (->buyers) := TMP_267(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
totalSold = totalSold.add(purchased)

IRs:
TMP_268(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSold', 'purchased'] 
totalSold(uint256) := TMP_268(uint256)"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
isRunning()

IRs:
MODIFIER_CALL, ICO.isRunning()()"];
17->1;
}
// Function: 1272.sol-ICO-isRunning()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= salePeriod.start)

IRs:
REF_217(uint256) -> salePeriod.start
TMP_332(bool) = now >= REF_217
TMP_333(None) = SOLIDITY_CALL require(bool)(TMP_332)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now <= salePeriod.end)

IRs:
REF_218(uint256) -> salePeriod.end
TMP_334(bool) = now <= REF_218
TMP_335(None) = SOLIDITY_CALL require(bool)(TMP_334)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 1272.sol-ICO-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_330(bool) = msg.sender == owner
TMP_331(None) = SOLIDITY_CALL require(bool)(TMP_330)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1272.sol-ICO-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
price = 2000000000000000 / 1e3

IRs:
TMP_329(uint256) = 2000000000000000 / 1000
price(uint256) := TMP_329(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
minPurchase = 10000000000000000

IRs:
minPurchase(uint256) := 10000000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
totalSold = 0

IRs:
totalSold(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
forSale = 25000000e3

IRs:
forSale(uint256) := 25000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
softCap = 2500000e3

IRs:
softCap(uint256) := 2500000000(uint256)"];
}
// Function: 1272.sol-ICO-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != address(token)

IRs:
TMP_277 = CONVERT token to address
TMP_278(bool) = msg.sender != TMP_277
CONDITION TMP_278"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_279(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_from != owner

IRs:
TMP_280(bool) = _from != owner
CONDITION TMP_280"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_281(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 1272.sol-ICO-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1272.sol-ICO-withdrawFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == owner

IRs:
TMP_282(bool) = msg.sender == owner
CONDITION TMP_282"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(totalSold >= softCap)

IRs:
TMP_283(bool) = totalSold >= softCap
TMP_284(None) = SOLIDITY_CALL require(bool)(TMP_283)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
beneficiary = beneficiaries[0]

IRs:
REF_187(ICO.Beneficiary) -> beneficiaries[0]
beneficiary(ICO.Beneficiary) := REF_187(ICO.Beneficiary)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
beneficiary.wallet.transfer(address(this).balance)

IRs:
REF_188(address) -> beneficiary.wallet
TMP_285 = CONVERT this to address
TMP_286(uint256) = SOLIDITY_CALL balance(address)(TMP_285)
Transfer dest:REF_188 value:TMP_286"];
4->9;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(totalSold < softCap)

IRs:
TMP_288(bool) = totalSold < softCap
TMP_289(None) = SOLIDITY_CALL require(bool)(TMP_288)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(buyers[msg.sender] > 0)

IRs:
REF_190(uint256) -> buyers[msg.sender]
TMP_290(bool) = REF_190 > 0
TMP_291(None) = SOLIDITY_CALL require(bool)(TMP_290)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
buyers[msg.sender] = 0

IRs:
REF_191(uint256) -> buyers[msg.sender]
REF_191(uint256) (->buyers) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
msg.sender.transfer(buyers[msg.sender])

IRs:
REF_193(uint256) -> buyers[msg.sender]
Transfer dest:msg.sender value:REF_193"];
8->9;
9[label="Node Type: END_IF 9
"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
afterEnd()

IRs:
MODIFIER_CALL, ICO.afterEnd()()"];
10->1;
}
// Function: 1272.sol-ICOToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_holder])

IRs:
REF_162(uint256) -> balances[_holder]
TMP_226(bool) = _value <= REF_162
TMP_227(None) = SOLIDITY_CALL require(bool)(TMP_226)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_holder] = balances[_holder].subtract(_value)

IRs:
REF_163(uint256) -> balances[_holder]
REF_164(uint256) -> balances[_holder]
TMP_228(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['REF_164', '_value'] 
REF_163(uint256) (->balances) := TMP_228(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = totalSupply.subtract(_value)

IRs:
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_229(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_holder,_value)

IRs:
Emit Burn(_holder,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_holder,address(0),_value)

IRs:
TMP_231 = CONVERT 0 to address
Emit Transfer(_holder,TMP_231,_value)"];
}
// Function: 1272.sol-ICOToken-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_221(bool) = msg.sender == newOwner
TMP_222(None) = SOLIDITY_CALL require(bool)(TMP_221)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newOwner = address(0)

IRs:
TMP_223 = CONVERT 0 to address
newOwner(address) := TMP_223(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
}
// Function: 1272.sol-ICOToken-allowance(address,address)
digraph{
}
// Function: 1272.sol-ICOToken-approve(address,uint256)
digraph{
}
// Function: 1272.sol-ICOToken-balanceOf(address)
digraph{
}
// Function: 1272.sol-ICOToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 1272.sol-ICOToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1272.sol-ICOToken-constructor(string,string,uint8,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint8) := _decimals(uint8)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = _totalSupply

IRs:
totalSupply(uint256) := _totalSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[owner] = totalSupply

IRs:
REF_167(uint256) -> balances[owner]
REF_167(uint256) (->balances) := totalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Mint(owner,totalSupply)

IRs:
Emit Mint(owner,totalSupply)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(address(0),owner,totalSupply)

IRs:
TMP_234 = CONVERT 0 to address
Emit Transfer(TMP_234,owner,totalSupply)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
}
// Function: 1272.sol-ICOToken-contractFallback(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
receiver = ERC223ReceivingContract(_to)

IRs:
TMP_184 = CONVERT _to to ERC223ReceivingContract
receiver(ERC223ReceivingContract) := TMP_184(ERC223ReceivingContract)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
receiver.tokenFallback(_origin,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ERC223ReceivingContract), function:tokenFallback, arguments:['_origin', '_value', '_data']  "];
}
// Function: 1272.sol-ICOToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_153(mapping(address => uint256)) -> allowed[msg.sender]
REF_154(uint256) -> REF_153[_spender]
oldValue(uint256) := REF_154(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_215(bool) = _subtractedValue > oldValue
CONDITION TMP_215"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_155(mapping(address => uint256)) -> allowed[msg.sender]
REF_156(uint256) -> REF_155[_spender]
REF_156(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.subtract(_subtractedValue)

IRs:
REF_157(mapping(address => uint256)) -> allowed[msg.sender]
REF_158(uint256) -> REF_157[_spender]
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_158(uint256) (->allowed) := TMP_216(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_160(mapping(address => uint256)) -> allowed[msg.sender]
REF_161(uint256) -> REF_160[_spender]
Emit Approval(msg.sender,_spender,REF_161)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_218(uint256) = 2 * 32
MODIFIER_CALL, StandardToken.onlyPayloadSize(uint256)(TMP_218)"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-ICOToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_237(None) = SOLIDITY_CALL revert()()"];
}
// Function: 1272.sol-ICOToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_146(mapping(address => uint256)) -> allowed[msg.sender]
REF_147(uint256) -> REF_146[_spender]
oldValue(uint256) := REF_147(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.add(_addedValue)

IRs:
REF_148(mapping(address => uint256)) -> allowed[msg.sender]
REF_149(uint256) -> REF_148[_spender]
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['oldValue', '_addedValue'] 
REF_149(uint256) (->allowed) := TMP_211(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_151(mapping(address => uint256)) -> allowed[msg.sender]
REF_152(uint256) -> REF_151[_spender]
Emit Approval(msg.sender,_spender,REF_152)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_213(uint256) = 2 * 32
MODIFIER_CALL, StandardToken.onlyPayloadSize(uint256)(TMP_213)"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-ICOToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_186(bool) = length > 0
RETURN TMP_186"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 1272.sol-ICOToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_241(bool) = msg.sender == owner
TMP_242(None) = SOLIDITY_CALL require(bool)(TMP_241)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1272.sol-ICOToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length == size + 4)

IRs:
REF_168 -> LENGTH msg.data
TMP_238(uint256) = size + 4
TMP_239(bool) = REF_168 == TMP_238
TMP_240(None) = SOLIDITY_CALL require(bool)(TMP_239)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1272.sol-ICOToken-transfer(address,uint256)
digraph{
}
// Function: 1272.sol-ICOToken-transfer(address,uint256,bytes)
digraph{
}
// Function: 1272.sol-ICOToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1272.sol-ICOToken-transferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! super.transferFrom(_from,_to,_value)

IRs:
TMP_175(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
TMP_176 = UnaryType.BANG TMP_175 
CONDITION TMP_176"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_177(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
isContract(_to)

IRs:
TMP_178(bool) = INTERNAL_CALL, Standard223Token.isContract(address)(_to)
CONDITION TMP_178"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
contractFallback(_from,_to,_value,_data)

IRs:
INTERNAL_CALL, Standard223Token.contractFallback(address,address,uint256,bytes)(_from,_to,_value,_data)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value,_data)

IRs:
Emit Transfer(_from,_to,_value,_data)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-ICOToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1272.sol-Ownable-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_103(bool) = msg.sender == newOwner
TMP_104(None) = SOLIDITY_CALL require(bool)(TMP_103)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newOwner = address(0)

IRs:
TMP_105 = CONVERT 0 to address
newOwner(address) := TMP_105(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
}
// Function: 1272.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1272.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_107(bool) = msg.sender == owner
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1272.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1272.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_17(uint256) = a + b
c(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_18(bool) = c >= a
TMP_19(bool) = c >= b
TMP_20(bool) = TMP_18 && TMP_19
TMP_21(None) = SOLIDITY_CALL assert(bool)(TMP_20)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1272.sol-SafeMath-divide(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_6(bool) = b > 0
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_8(uint256) = a / b
c(uint256) := TMP_8(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_9(uint256) = b * c
TMP_10(uint256) = a % b
TMP_11(uint256) = TMP_9 + TMP_10
TMP_12(bool) = a == TMP_11
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1272.sol-SafeMath-multiply(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1272.sol-SafeMath-subtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_14(bool) = b <= a
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_16(uint256) = a - b
RETURN TMP_16"];
}
// Function: 1272.sol-Standard223Token-allowance(address,address)
digraph{
}
// Function: 1272.sol-Standard223Token-approve(address,uint256)
digraph{
}
// Function: 1272.sol-Standard223Token-balanceOf(address)
digraph{
}
// Function: 1272.sol-Standard223Token-contractFallback(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
receiver = ERC223ReceivingContract(_to)

IRs:
TMP_160 = CONVERT _to to ERC223ReceivingContract
receiver(ERC223ReceivingContract) := TMP_160(ERC223ReceivingContract)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
receiver.tokenFallback(_origin,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ERC223ReceivingContract), function:tokenFallback, arguments:['_origin', '_value', '_data']  "];
}
// Function: 1272.sol-Standard223Token-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_112(mapping(address => uint256)) -> allowed[msg.sender]
REF_113(uint256) -> REF_112[_spender]
oldValue(uint256) := REF_113(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_137(bool) = _subtractedValue > oldValue
CONDITION TMP_137"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_114(mapping(address => uint256)) -> allowed[msg.sender]
REF_115(uint256) -> REF_114[_spender]
REF_115(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.subtract(_subtractedValue)

IRs:
REF_116(mapping(address => uint256)) -> allowed[msg.sender]
REF_117(uint256) -> REF_116[_spender]
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_117(uint256) (->allowed) := TMP_138(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_119(mapping(address => uint256)) -> allowed[msg.sender]
REF_120(uint256) -> REF_119[_spender]
Emit Approval(msg.sender,_spender,REF_120)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_140(uint256) = 2 * 32
MODIFIER_CALL, StandardToken.onlyPayloadSize(uint256)(TMP_140)"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-Standard223Token-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_105(mapping(address => uint256)) -> allowed[msg.sender]
REF_106(uint256) -> REF_105[_spender]
oldValue(uint256) := REF_106(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.add(_addedValue)

IRs:
REF_107(mapping(address => uint256)) -> allowed[msg.sender]
REF_108(uint256) -> REF_107[_spender]
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['oldValue', '_addedValue'] 
REF_108(uint256) (->allowed) := TMP_133(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_110(mapping(address => uint256)) -> allowed[msg.sender]
REF_111(uint256) -> REF_110[_spender]
Emit Approval(msg.sender,_spender,REF_111)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_135(uint256) = 2 * 32
MODIFIER_CALL, StandardToken.onlyPayloadSize(uint256)(TMP_135)"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-Standard223Token-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_162(bool) = length > 0
RETURN TMP_162"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 1272.sol-Standard223Token-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length == size + 4)

IRs:
REF_122 -> LENGTH msg.data
TMP_163(uint256) = size + 4
TMP_164(bool) = REF_122 == TMP_163
TMP_165(None) = SOLIDITY_CALL require(bool)(TMP_164)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1272.sol-Standard223Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transfer(_to,_value,new bytes(0))

IRs:
TMP_149 = new bytes(0)
TMP_150(bool) = INTERNAL_CALL, Standard223Token.transfer(address,uint256,bytes)(_to,_value,TMP_149)
RETURN TMP_150"];
2[label="Node Type: RETURN 2

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-Standard223Token-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! super.transfer(_to,_value)

IRs:
TMP_142(bool) = INTERNAL_CALL, StandardToken.transfer(address,uint256)(_to,_value)
TMP_143 = UnaryType.BANG TMP_142 
CONDITION TMP_143"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_144(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
isContract(_to)

IRs:
TMP_145(bool) = INTERNAL_CALL, Standard223Token.isContract(address)(_to)
CONDITION TMP_145"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
contractFallback(msg.sender,_to,_value,_data)

IRs:
INTERNAL_CALL, Standard223Token.contractFallback(address,address,uint256,bytes)(msg.sender,_to,_value,_data)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-Standard223Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transferFrom(_from,_to,_value,new bytes(0))

IRs:
TMP_158 = new bytes(0)
TMP_159(bool) = INTERNAL_CALL, Standard223Token.transferFrom(address,address,uint256,bytes)(_from,_to,_value,TMP_158)
RETURN TMP_159"];
2[label="Node Type: RETURN 2

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-Standard223Token-transferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! super.transferFrom(_from,_to,_value)

IRs:
TMP_151(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
TMP_152 = UnaryType.BANG TMP_151 
CONDITION TMP_152"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_153(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
isContract(_to)

IRs:
TMP_154(bool) = INTERNAL_CALL, Standard223Token.isContract(address)(_to)
CONDITION TMP_154"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
contractFallback(_from,_to,_value,_data)

IRs:
INTERNAL_CALL, Standard223Token.contractFallback(address,address,uint256,bytes)(_from,_to,_value,_data)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value,_data)

IRs:
Emit Transfer(_from,_to,_value,_data)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_20(mapping(address => uint256)) -> allowed[_owner]
REF_21(uint256) -> REF_20[_spender]
RETURN REF_21"];
}
// Function: 1272.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_18(mapping(address => uint256)) -> allowed[msg.sender]
REF_19(uint256) -> REF_18[_spender]
REF_19(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_17(uint256) -> balances[_owner]
RETURN REF_17"];
}
// Function: 1272.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_29(mapping(address => uint256)) -> allowed[msg.sender]
REF_30(uint256) -> REF_29[_spender]
oldValue(uint256) := REF_30(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_50(bool) = _subtractedValue > oldValue
CONDITION TMP_50"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
REF_32(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.subtract(_subtractedValue)

IRs:
REF_33(mapping(address => uint256)) -> allowed[msg.sender]
REF_34(uint256) -> REF_33[_spender]
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_34(uint256) (->allowed) := TMP_51(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
Emit Approval(msg.sender,_spender,REF_37)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_53(uint256) = 2 * 32
MODIFIER_CALL, StandardToken.onlyPayloadSize(uint256)(TMP_53)"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_22(mapping(address => uint256)) -> allowed[msg.sender]
REF_23(uint256) -> REF_22[_spender]
oldValue(uint256) := REF_23(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.add(_addedValue)

IRs:
REF_24(mapping(address => uint256)) -> allowed[msg.sender]
REF_25(uint256) -> REF_24[_spender]
TMP_46(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['oldValue', '_addedValue'] 
REF_25(uint256) (->allowed) := TMP_46(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_27(mapping(address => uint256)) -> allowed[msg.sender]
REF_28(uint256) -> REF_27[_spender]
Emit Approval(msg.sender,_spender,REF_28)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_48(uint256) = 2 * 32
MODIFIER_CALL, StandardToken.onlyPayloadSize(uint256)(TMP_48)"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-StandardToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length == size + 4)

IRs:
REF_38 -> LENGTH msg.data
TMP_55(uint256) = size + 4
TMP_56(bool) = REF_38 == TMP_55
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1272.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_22 = CONVERT 0 to address
TMP_23(bool) = _to != TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_25(bool) = _value > 0
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
holderBalance = balances[msg.sender]

IRs:
REF_0(uint256) -> balances[msg.sender]
holderBalance(uint256) := REF_0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value <= holderBalance)

IRs:
TMP_27(bool) = _value <= holderBalance
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = holderBalance.subtract(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['holderBalance', '_value'] 
REF_1(uint256) (->balances) := TMP_29(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_3(uint256) -> balances[_to]
REF_4(uint256) -> balances[_to]
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_4', '_value'] 
REF_3(uint256) (->balances) := TMP_30(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_32(uint256) = 2 * 32
MODIFIER_CALL, StandardToken.onlyPayloadSize(uint256)(TMP_32)"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
ok

IRs:
RETURN ok"];
}
// Function: 1272.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_34 = CONVERT 0 to address
TMP_35(bool) = _to != TMP_34
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
allowToTrans = allowed[_from][msg.sender]

IRs:
REF_6(mapping(address => uint256)) -> allowed[_from]
REF_7(uint256) -> REF_6[msg.sender]
allowToTrans(uint256) := REF_7(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
balanceFrom = balances[_from]

IRs:
REF_8(uint256) -> balances[_from]
balanceFrom(uint256) := REF_8(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value <= balanceFrom)

IRs:
TMP_37(bool) = _value <= balanceFrom
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_value <= allowToTrans)

IRs:
TMP_39(bool) = _value <= allowToTrans
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_from] = balanceFrom.subtract(_value)

IRs:
REF_9(uint256) -> balances[_from]
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['balanceFrom', '_value'] 
REF_9(uint256) (->balances) := TMP_41(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_11(uint256) -> balances[_to]
REF_12(uint256) -> balances[_to]
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_12', '_value'] 
REF_11(uint256) (->balances) := TMP_42(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allowed[_from][msg.sender] = allowToTrans.subtract(_value)

IRs:
REF_14(mapping(address => uint256)) -> allowed[_from]
REF_15(uint256) -> REF_14[msg.sender]
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.subtract(uint256,uint256), arguments:['allowToTrans', '_value'] 
REF_15(uint256) (->allowed) := TMP_43(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
ok

IRs:
RETURN ok"];
}
}
