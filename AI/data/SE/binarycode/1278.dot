digraph G {
// Function: 1278.sol-Ownable-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == newOwner,msg.sender == newOwner)

IRs:
TMP_17(bool) = msg.sender == newOwner
TMP_18(None) = SOLIDITY_CALL require(bool,string)(TMP_17,msg.sender == newOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,msg.sender)

IRs:
Emit OwnershipTransferred(owner,msg.sender)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_20 = CONVERT 0 to address
newOwner(address) := TMP_20(address)"];
}
// Function: 1278.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = address(0)

IRs:
TMP_12 = CONVERT 0 to address
newOwner(address) := TMP_12(address)"];
}
// Function: 1278.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,msg.sender == owner)

IRs:
TMP_21(bool) = msg.sender == owner
TMP_22(None) = SOLIDITY_CALL require(bool,string)(TMP_21,msg.sender == owner)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1278.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(0) != _newOwner,address(0) != _newOwner)

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = TMP_13 != _newOwner
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,address(0) != _newOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1278.sol-Refund-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == newOwner,msg.sender == newOwner)

IRs:
TMP_28(bool) = msg.sender == newOwner
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,msg.sender == newOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,msg.sender)

IRs:
Emit OwnershipTransferred(owner,msg.sender)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_31 = CONVERT 0 to address
newOwner(address) := TMP_31(address)"];
}
// Function: 1278.sol-Refund-cancelRefund(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
money = refunds[_buyer]

IRs:
REF_8(uint256) -> refunds[_buyer]
money(uint256) := REF_8(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(money > 0,money > 0)

IRs:
TMP_44(bool) = money > 0
TMP_45(None) = SOLIDITY_CALL require(bool,string)(TMP_44,money > 0)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
refunds[_buyer] = 0

IRs:
REF_9(uint256) -> refunds[_buyer]
REF_9(uint256) (->refunds) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner.transfer(money)

IRs:
Transfer dest:owner value:money"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 1278.sol-Refund-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = address(0)

IRs:
TMP_23 = CONVERT 0 to address
newOwner(address) := TMP_23(address)"];
}
// Function: 1278.sol-Refund-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
xcc = tokenInterface(_xcc)

IRs:
TMP_32 = CONVERT _xcc to tokenInterface
xcc(tokenInterface) := TMP_32(tokenInterface)"];
}
// Function: 1278.sol-Refund-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == tx.origin,msg.sender == tx.orgin)

IRs:
TMP_33(bool) = msg.sender == tx.origin
TMP_34(None) = SOLIDITY_CALL require(bool,string)(TMP_33,msg.sender == tx.orgin)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
xcc_amount = xcc.balanceOf(msg.sender)

IRs:
TMP_35(uint256) = HIGH_LEVEL_CALL, dest:xcc(tokenInterface), function:balanceOf, arguments:['msg.sender']  
xcc_amount(uint256) := TMP_35(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(xcc_amount > 0,xcc_amount > 0)

IRs:
TMP_36(bool) = xcc_amount > 0
TMP_37(None) = SOLIDITY_CALL require(bool,string)(TMP_36,xcc_amount > 0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
money = refunds[msg.sender]

IRs:
REF_1(uint256) -> refunds[msg.sender]
money(uint256) := REF_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(money > 0,money > 0)

IRs:
TMP_38(bool) = money > 0
TMP_39(None) = SOLIDITY_CALL require(bool,string)(TMP_38,money > 0)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
refunds[msg.sender] = 0

IRs:
REF_2(uint256) -> refunds[msg.sender]
REF_2(uint256) (->refunds) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
xcc.originBurn(xcc_amount)

IRs:
TMP_40(bool) = HIGH_LEVEL_CALL, dest:xcc(tokenInterface), function:originBurn, arguments:['xcc_amount']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
msg.sender.transfer(money)

IRs:
Transfer dest:msg.sender value:money"];
}
// Function: 1278.sol-Refund-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,msg.sender == owner)

IRs:
TMP_53(bool) = msg.sender == owner
TMP_54(None) = SOLIDITY_CALL require(bool,string)(TMP_53,msg.sender == owner)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1278.sol-Refund-setRefund(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
refunds[_buyer] = refunds[_buyer].add(msg.value)

IRs:
REF_5(uint256) -> refunds[_buyer]
REF_6(uint256) -> refunds[_buyer]
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_6', 'msg.value'] 
REF_5(uint256) (->refunds) := TMP_42(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1278.sol-Refund-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(0) != _newOwner,address(0) != _newOwner)

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = TMP_24 != _newOwner
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,address(0) != _newOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1278.sol-Refund-withdraw(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
to.transfer(value)

IRs:
Transfer dest:to value:value"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1278.sol-Refund-withdrawTokens(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenInterface(tknAddr).transfer(to,value)

IRs:
TMP_48 = CONVERT tknAddr to tokenInterface
TMP_49(bool) = HIGH_LEVEL_CALL, dest:TMP_48(tokenInterface), function:transfer, arguments:['to', 'value']  
RETURN TMP_49"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1278.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1278.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 1278.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1278.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 1278.sol-tokenInterface-balanceOf(address)
digraph{
}
// Function: 1278.sol-tokenInterface-originBurn(uint256)
digraph{
}
// Function: 1278.sol-tokenInterface-transfer(address,uint256)
digraph{
}
}
