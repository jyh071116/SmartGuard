digraph G {
// Function: 1286.sol-FoMo3Dlong-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
round_[1] = F3Ddatasets.Round(1954,2,1533795558,false,1533794558,34619432129976331518578579,91737891789564224505545,21737891789564224505545,31000,0,0,0)

IRs:
REF_19(F3Ddatasets.Round) -> round_[1]
TMP_13(F3Ddatasets.Round) = new Round(1954,2,1533795558,False,1533794558,34619432129976331518578579,91737891789564224505545,21737891789564224505545,31000,0,0,0)
REF_19(F3Ddatasets.Round) (->round_) := TMP_13(F3Ddatasets.Round)"];
}
// Function: 1286.sol-FoMo3Dlong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1286.sol-FoMo3Dlong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1286.sol-FoMo3Dlong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1286.sol-FoMo3Dlong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(1646092234676)

IRs:
RETURN 1646092234676"];
}
// Function: 1286.sol-FoMo3Dlong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(100254831521475310)

IRs:
RETURN 100254831521475310"];
}
// Function: 1286.sol-FoMo3Dlong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
round_[_rID].end = _now + 125 - (_now % 120)

IRs:
REF_4(F3Ddatasets.Round) -> round_[_rID]
REF_5(uint256) -> REF_4.end
TMP_6(uint256) = _now + 125
TMP_7(uint256) = _now % 120
TMP_8(uint256) = TMP_6 - TMP_7
REF_5(uint256) (->round_) := TMP_8(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(0,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),0xd8723f6f396E28ab6662B91981B3eabF9De05E3C,0x6d6f6c6963616e63657200000000000000000000000000000000000000000000,3053823263697073356017,4675447079848478547678,85163999483914905978445,3336394330928816056073,519463956231409304003)

IRs:
REF_6(F3Ddatasets.Round) -> round_[_rID]
REF_7(uint256) -> REF_6.keys
REF_8(F3Ddatasets.Round) -> round_[_rID]
REF_9(uint256) -> REF_8.end
REF_10(F3Ddatasets.Round) -> round_[_rID]
REF_11(uint256) -> REF_10.strt
REF_12(F3Ddatasets.Round) -> round_[_rID]
REF_13(uint256) -> REF_12.pot
REF_14(F3Ddatasets.Round) -> round_[_rID]
REF_15(uint256) -> REF_14.team
REF_16(F3Ddatasets.Round) -> round_[_rID]
REF_17(uint256) -> REF_16.plyr
TMP_9(uint256) = REF_17 * 10
TMP_10(uint256) = REF_15 + TMP_9
RETURN 0,_rID,REF_7,REF_9,REF_11,REF_13,TMP_10,1235689817372276230682468122868783274105205972540,49498968749632288172789873723578366108873637815844667899804513170416539271168,3053823263697073356017,4675447079848478547678,85163999483914905978445,3336394330928816056073,519463956231409304003"];
}
// Function: 1286.sol-FoMo3Dlong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(18163,0x6d6f6c6963616e63657200000000000000000000000000000000000000000000,122081953021293259355,0,0,0,0)

IRs:
RETURN 18163,49498968749632288172789873723578366108873637815844667899804513170416539271168,122081953021293259355,0,0,0,0"];
}
// Function: 1286.sol-FoMo3Dlong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(0,0,0)

IRs:
RETURN 0,0,0"];
}
// Function: 1286.sol-FoMo3Dlong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
round_[_rID].end = _now + 125 - (_now % 120)

IRs:
REF_2(F3Ddatasets.Round) -> round_[_rID]
REF_3(uint256) -> REF_2.end
TMP_1(uint256) = _now + 125
TMP_2(uint256) = _now % 120
TMP_3(uint256) = TMP_1 - TMP_2
REF_3(uint256) (->round_) := TMP_3(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(125 - (_now % 120))

IRs:
TMP_4(uint256) = _now % 120
TMP_5(uint256) = 125 - TMP_4
RETURN TMP_5"];
}
// Function: 1286.sol-FoMo3Dlong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(_keys.mul(100254831521475310) / 1000000000000000000)

IRs:
TMP_11(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '100254831521475310'] 
TMP_12(uint256) = TMP_11 / 1000000000000000000
RETURN TMP_12"];
}
// Function: 1286.sol-FoMo3Dlong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1286.sol-FoMo3Dlong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1286.sol-FoMo3Dlong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1286.sol-FoMo3Dlong-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1286.sol-FoMo3Dlong-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1286.sol-FoMo3Dlong-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1286.sol-FoMo3Dlong-setOtherFomo(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1286.sol-FoMo3Dlong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = FoMo3D Long Official

IRs:
name(string) := FoMo3D Long Official(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = F3D

IRs:
symbol(string) := F3D(string)"];
}
// Function: 1286.sol-FoMo3Dlong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
}
// Function: 1286.sol-FoMo3Dlong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
aff = 0x7ce07aa2fc356fa52f622c1f4df1e8eaad7febf0

IRs:
aff(address) := 712920905666496987636814255501069080873662409712(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
aff.transfer(this.balance)

IRs:
REF_1(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:aff value:REF_1"];
}
// Function: 1286.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_22(uint256) = a + b
c(uint256) := TMP_22(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_23(bool) = c >= a
TMP_24(None) = SOLIDITY_CALL require(bool,string)(TMP_23,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1286.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_14(bool) = a == 0
CONDITION TMP_14"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_15(uint256) = a * b
c(uint256) := TMP_15(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_16(uint256) = c / a
TMP_17(bool) = TMP_16 == b
TMP_18(None) = SOLIDITY_CALL require(bool,string)(TMP_17,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1286.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_32(bool) = x == 0
CONDITION TMP_32"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_33(bool) = y == 0
CONDITION TMP_33"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_34(bool) = i < y
CONDITION TMP_34"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_35(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_35(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_36(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1286.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_31(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_31"];
}
// Function: 1286.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_25(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_26(uint256) = TMP_25 / 2
z(uint256) := TMP_26(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_27(bool) = z < y
CONDITION TMP_27"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_28(uint256) = x / z
TMP_29(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_28,z)
TMP_30(uint256) = TMP_29 / 2
z(uint256) := TMP_30(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1286.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_19(bool) = b <= a
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_21(uint256) = a - b
RETURN TMP_21"];
}
}
