digraph G {
// Function: 1295.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_24 = CONVERT _input to bytes
_temp(bytes) := TMP_24(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_0 -> LENGTH _temp
_length(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_25(bool) = _length <= 32
TMP_26(bool) = _length > 0
TMP_27(bool) = TMP_25 && TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_1(None) -> _temp[0]
TMP_29(bool) = REF_1 != 32
TMP_30(uint256) = _length - 1
REF_2(None) -> _temp[TMP_30]
TMP_31(bool) = REF_2 != 32
TMP_32(bool) = TMP_29 && TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_3(None) -> _temp[0]
TMP_34(bool) = REF_3 == 48
CONDITION TMP_34"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_4(None) -> _temp[1]
TMP_35(bool) = REF_4 != 120
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_5(None) -> _temp[1]
TMP_37(bool) = REF_5 != 88
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_39(bool) = i < _length
CONDITION TMP_39"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_6(None) -> _temp[i]
TMP_40(bool) = REF_6 > 64
REF_7(None) -> _temp[i]
TMP_41(bool) = REF_7 < 91
TMP_42(bool) = TMP_40 && TMP_41
CONDITION TMP_42"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_8(bytes1) -> _temp[i]
REF_9(None) -> _temp[i]
TMP_43 = CONVERT REF_9 to uint256
TMP_44(uint256) = TMP_43 + 32
TMP_45 = CONVERT TMP_44 to bytes1
REF_8(bytes1) (->_temp) := TMP_45(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_46(bool) = _hasNonNumber == False
CONDITION TMP_46"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_10(None) -> _temp[i]
TMP_47(bool) = REF_10 == 32
REF_11(None) -> _temp[i]
TMP_48(bool) = REF_11 > 96
REF_12(None) -> _temp[i]
TMP_49(bool) = REF_12 < 123
TMP_50(bool) = TMP_48 && TMP_49
TMP_51(bool) = TMP_47 || TMP_50
REF_13(None) -> _temp[i]
TMP_52(bool) = REF_13 > 47
REF_14(None) -> _temp[i]
TMP_53(bool) = REF_14 < 58
TMP_54(bool) = TMP_52 && TMP_53
TMP_55(bool) = TMP_51 || TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_15(None) -> _temp[i]
TMP_57(bool) = REF_15 == 32
CONDITION TMP_57"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_58(uint256) = i + 1
REF_16(None) -> _temp[TMP_58]
TMP_59(bool) = REF_16 != 32
TMP_60(None) = SOLIDITY_CALL require(bool,string)(TMP_59,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_61(bool) = _hasNonNumber == False
REF_17(None) -> _temp[i]
TMP_62(bool) = REF_17 < 48
REF_18(None) -> _temp[i]
TMP_63(bool) = REF_18 > 57
TMP_64(bool) = TMP_62 || TMP_63
TMP_65(bool) = TMP_61 && TMP_64
CONDITION TMP_65"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_66(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_67(bool) = _hasNonNumber == True
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 1295.sol-PlayerBook-addGame(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(gameIDs_[_gameAddress] == 0,Game already registered)

IRs:
REF_21(uint256) -> gameIDs_[_gameAddress]
TMP_79(bool) = REF_21 == 0
TMP_80(None) = SOLIDITY_CALL require(bool,string)(TMP_79,Game already registered)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gID_ ++

IRs:
TMP_81(uint256) := gID_(uint256)
gID_(uint256) = gID_ + 1"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_name = _gameNameStr.nameFilter()

IRs:
TMP_82(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_gameNameStr'] 
_name(bytes32) := TMP_82(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameIDs_[_gameAddress] = gID_

IRs:
REF_23(uint256) -> gameIDs_[_gameAddress]
REF_23(uint256) (->gameIDs_) := gID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gameNames_[_gameAddress] = _name

IRs:
REF_24(bytes32) -> gameNames_[_gameAddress]
REF_24(bytes32) (->gameNames_) := _name(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[gID_] = PlayerBookReceiverInterface(_gameAddress)

IRs:
REF_25(PlayerBookReceiverInterface) -> games_[gID_]
TMP_83 = CONVERT _gameAddress to PlayerBookReceiverInterface
REF_25(PlayerBookReceiverInterface) (->games_) := TMP_83(PlayerBookReceiverInterface)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isAdmin()

IRs:
MODIFIER_CALL, PlayerBook.isAdmin()()"];
7->1;
}
// Function: 1295.sol-PlayerBook-addMeToAllGames()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_88(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_88(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_pID != 0,You dont even have an account)

IRs:
TMP_147(bool) = _pID != 0
TMP_148(None) = SOLIDITY_CALL require(bool,string)(TMP_147,You dont even have an account)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_laff = plyr_[_pID].laff

IRs:
REF_89(PlayerBook.Player) -> plyr_[_pID]
REF_90(uint256) -> REF_89.laff
_laff(uint256) := REF_90(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_91(PlayerBook.Player) -> plyr_[_pID]
REF_92(uint256) -> REF_91.names
_totalNames(uint256) := REF_92(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_name = plyr_[_pID].name

IRs:
REF_93(PlayerBook.Player) -> plyr_[_pID]
REF_94(bytes32) -> REF_93.name
_name(bytes32) := REF_94(bytes32)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i <= gID_

IRs:
TMP_149(bool) = i <= gID_
CONDITION TMP_149"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_laff)

IRs:
REF_95(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_95(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_laff']  "];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_totalNames > 1

IRs:
TMP_151(bool) = _totalNames > 1
CONDITION TMP_151"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
ii <= _totalNames

IRs:
TMP_152(bool) = ii <= _totalNames
CONDITION TMP_152"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_97(PlayerBookReceiverInterface) -> games_[i]
REF_99(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_100(bytes32) -> REF_99[ii]
HIGH_LEVEL_CALL, dest:REF_97(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_100']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ii ++

IRs:
TMP_154(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_155(uint256) := i(uint256)
i(uint256) = i + 1"];
20->10;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
21->1;
}
// Function: 1295.sol-PlayerBook-addMeToGame(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_gameID <= gID_,Game doesn't exist yet)

IRs:
TMP_137(bool) = _gameID <= gID_
TMP_138(None) = SOLIDITY_CALL require(bool,string)(TMP_137,Game doesn't exist yet)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_75(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_75(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_pID != 0,You dont even have an account)

IRs:
TMP_139(bool) = _pID != 0
TMP_140(None) = SOLIDITY_CALL require(bool,string)(TMP_139,You dont even have an account)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_76(PlayerBook.Player) -> plyr_[_pID]
REF_77(uint256) -> REF_76.names
_totalNames(uint256) := REF_77(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[_gameID].receivePlayerInfo(_pID,_addr,plyr_[_pID].name,plyr_[_pID].laff)

IRs:
REF_78(PlayerBookReceiverInterface) -> games_[_gameID]
REF_80(PlayerBook.Player) -> plyr_[_pID]
REF_81(bytes32) -> REF_80.name
REF_82(PlayerBook.Player) -> plyr_[_pID]
REF_83(uint256) -> REF_82.laff
HIGH_LEVEL_CALL, dest:REF_78(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', 'REF_81', 'REF_83']  "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_totalNames > 1

IRs:
TMP_142(bool) = _totalNames > 1
CONDITION TMP_142"];
7->10[label="True"];
7->14[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->14;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
ii <= _totalNames

IRs:
TMP_143(bool) = ii <= _totalNames
CONDITION TMP_143"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
games_[_gameID].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_84(PlayerBookReceiverInterface) -> games_[_gameID]
REF_86(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_87(bytes32) -> REF_86[ii]
HIGH_LEVEL_CALL, dest:REF_84(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_87']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ii ++

IRs:
TMP_145(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
13->11;
14[label="Node Type: END_IF 14
"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
15->1;
}
// Function: 1295.sol-PlayerBook-checkIfNameValid(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameStr.nameFilter()

IRs:
TMP_85(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameStr'] 
_name(bytes32) := TMP_85(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxName_[_name] == 0

IRs:
REF_27(uint256) -> pIDxName_[_name]
TMP_86(bool) = REF_27 == 0
CONDITION TMP_86"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1295.sol-PlayerBook-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
initUsers()

IRs:
INTERNAL_CALL, PlayerBook.initUsers()()"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
initPlayers()

IRs:
INTERNAL_CALL, PlayerBook.initPlayers()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
communityAddr = address(0x3C07f9f7164Bf72FDBefd9438658fAcD94Ed4439)

IRs:
TMP_89 = CONVERT 342717326504399175307816045330235527195452589113 to address
communityAddr(address) := TMP_89(address)"];
}
// Function: 1295.sol-PlayerBook-determinePID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxAddr_[_addr] == 0

IRs:
REF_71(uint256) -> pIDxAddr_[_addr]
TMP_135(bool) = REF_71 == 0
CONDITION TMP_135"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pID_ ++

IRs:
TMP_136(uint256) := pID_(uint256)
pID_(uint256) = pID_ + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = pID_

IRs:
REF_72(uint256) -> pIDxAddr_[_addr]
REF_72(uint256) (->pIDxAddr_) := pID_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[pID_].addr = _addr

IRs:
REF_73(PlayerBook.Player) -> plyr_[pID_]
REF_74(address) -> REF_73.addr
REF_74(address) (->plyr_) := _addr(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true)

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1295.sol-PlayerBook-getNameFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(registrationFee_)

IRs:
RETURN registrationFee_"];
}
// Function: 1295.sol-PlayerBook-getPlayerAddr(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].addr)

IRs:
REF_112(PlayerBook.Player) -> plyr_[_pID]
REF_113(address) -> REF_112.addr
RETURN REF_113"];
}
// Function: 1295.sol-PlayerBook-getPlayerID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
determinePID(_addr)

IRs:
TMP_161(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(pIDxAddr_[_addr])

IRs:
REF_107(uint256) -> pIDxAddr_[_addr]
RETURN REF_107"];
}
// Function: 1295.sol-PlayerBook-getPlayerLAff(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].laff)

IRs:
REF_110(PlayerBook.Player) -> plyr_[_pID]
REF_111(uint256) -> REF_110.laff
RETURN REF_111"];
}
// Function: 1295.sol-PlayerBook-getPlayerName(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].name)

IRs:
REF_108(PlayerBook.Player) -> plyr_[_pID]
REF_109(bytes32) -> REF_108.name
RETURN REF_109"];
}
// Function: 1295.sol-PlayerBook-initCommunityAddr(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(addr) != address(0x0),Empty address not allowed.)

IRs:
TMP_69 = CONVERT addr to address
TMP_70 = CONVERT 0 to address
TMP_71(bool) = TMP_69 != TMP_70
TMP_72(None) = SOLIDITY_CALL require(bool,string)(TMP_71,Empty address not allowed.)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(address(communityAddr) == address(0x0),Community address has been set.)

IRs:
TMP_73 = CONVERT communityAddr to address
TMP_74 = CONVERT 0 to address
TMP_75(bool) = TMP_73 == TMP_74
TMP_76(None) = SOLIDITY_CALL require(bool,string)(TMP_75,Community address has been set.)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
communityAddr = addr

IRs:
communityAddr(address) := addr(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isAdmin()

IRs:
MODIFIER_CALL, PlayerBook.isAdmin()()"];
4->1;
}
// Function: 1295.sol-PlayerBook-initPlayers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pID_ = 0

IRs:
pID_(uint256) := 0(uint256)"];
}
// Function: 1295.sol-PlayerBook-initUsers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
users[0x89b2E7Ee504afd522E07F80Ae7b9d4D228AF3fe2] = 9

IRs:
REF_19(uint256) -> users[786121472280185637130373584914477138834780798946]
REF_19(uint256) (->users) := 9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
users[msg.sender] = 9

IRs:
REF_20(uint256) -> users[msg.sender]
REF_20(uint256) (->users) := 9(uint256)"];
}
// Function: 1295.sol-PlayerBook-isAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
role = users[msg.sender]

IRs:
REF_131(uint256) -> users[msg.sender]
role(uint256) := REF_131(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)((role == 9),Must be admin.)

IRs:
TMP_186(bool) = role == 9
TMP_187(None) = SOLIDITY_CALL require(bool,string)(TMP_186,Must be admin.)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 1295.sol-PlayerBook-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,Humans only)

IRs:
TMP_188(bool) = _codeLength == 0
TMP_189(None) = SOLIDITY_CALL require(bool,string)(TMP_188,Humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1295.sol-PlayerBook-isRegisteredGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameIDs_[msg.sender] != 0)

IRs:
REF_132(uint256) -> gameIDs_[msg.sender]
TMP_190(bool) = REF_132 != 0
TMP_191(None) = SOLIDITY_CALL require(bool)(TMP_190)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1295.sol-PlayerBook-registerNameCore(uint256,address,uint256,bytes32,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxName_[_name] != 0

IRs:
REF_48(uint256) -> pIDxName_[_name]
TMP_116(bool) = REF_48 != 0
CONDITION TMP_116"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,That names already taken)

IRs:
REF_49(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_50(bool) -> REF_49[_name]
TMP_117(bool) = REF_50 == True
TMP_118(None) = SOLIDITY_CALL require(bool,string)(TMP_117,That names already taken)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_51(PlayerBook.Player) -> plyr_[_pID]
REF_52(bytes32) -> REF_51.name
REF_52(bytes32) (->plyr_) := _name(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_53(uint256) -> pIDxName_[_name]
REF_53(uint256) (->pIDxName_) := _pID(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_54(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_55(bool) -> REF_54[_name]
TMP_119(bool) = REF_55 == False
CONDITION TMP_119"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_56(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_57(bool) -> REF_56[_name]
REF_57(bool) (->plyrNames_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].names ++

IRs:
REF_58(PlayerBook.Player) -> plyr_[_pID]
REF_59(uint256) -> REF_58.names
TMP_120(uint256) := REF_59(uint256)
REF_59(-> plyr_) = REF_59 + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyrNameList_[_pID][plyr_[_pID].names] = _name

IRs:
REF_60(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_61(PlayerBook.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.names
REF_63(bytes32) -> REF_60[REF_62]
REF_63(bytes32) (->plyrNameList_) := _name(bytes32)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
address(this).balance > 0

IRs:
TMP_121 = CONVERT this to address
TMP_122(uint256) = SOLIDITY_CALL balance(address)(TMP_121)
TMP_123(bool) = TMP_122 > 0
CONDITION TMP_123"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
address(communityAddr) != address(0x0)

IRs:
TMP_124 = CONVERT communityAddr to address
TMP_125 = CONVERT 0 to address
TMP_126(bool) = TMP_124 != TMP_125
CONDITION TMP_126"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
communityAddr.transfer(address(this).balance)

IRs:
TMP_127 = CONVERT this to address
TMP_128(uint256) = SOLIDITY_CALL balance(address)(TMP_127)
Transfer dest:communityAddr value:TMP_128"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_all == true

IRs:
TMP_130(bool) = _all == True
CONDITION TMP_130"];
16->19[label="True"];
16->23[label="False"];
17[label="Node Type: BEGIN_LOOP 17
"];
17->20;
18[label="Node Type: END_LOOP 18
"];
18->23;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
19->17;
20[label="Node Type: IF_LOOP 20

EXPRESSION:
i <= gID_

IRs:
TMP_131(bool) = i <= gID_
CONDITION TMP_131"];
20->21[label="True"];
20->18[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_affID)

IRs:
REF_65(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_65(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_affID']  "];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_133(uint256) := i(uint256)
i(uint256) = i + 1"];
22->20;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,msg.value,now)

IRs:
REF_67(PlayerBook.Player) -> plyr_[_affID]
REF_68(address) -> REF_67.addr
REF_69(PlayerBook.Player) -> plyr_[_affID]
REF_70(bytes32) -> REF_69.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_68,REF_70,msg.value,now)"];
}
// Function: 1295.sol-PlayerBook-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_90(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_90(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_91(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_91(bool)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_29(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_29(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID

IRs:
TMP_92(bool) = _affCode != 0
REF_30(PlayerBook.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_93(bool) = _affCode != REF_31
TMP_94(bool) = TMP_92 && TMP_93
TMP_95(bool) = _affCode != _pID
TMP_96(bool) = TMP_94 && TMP_95
CONDITION TMP_96"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_32(PlayerBook.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affCode(uint256)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_affCode = 0

IRs:
_affCode(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
registerNameCore(_pID,_addr,_affCode,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affCode,_name,_isNewPlayer,_all)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
10->1;
}
// Function: 1295.sol-PlayerBook-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_162(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_162(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_114(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_114(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_affID = _affCode

IRs:
_affID(uint256) := _affCode(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID

IRs:
TMP_163(bool) = _affID != 0
REF_115(PlayerBook.Player) -> plyr_[_pID]
REF_116(uint256) -> REF_115.laff
TMP_164(bool) = _affID != REF_116
TMP_165(bool) = TMP_163 && TMP_164
TMP_166(bool) = _affID != _pID
TMP_167(bool) = TMP_165 && TMP_166
CONDITION TMP_167"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_117(PlayerBook.Player) -> plyr_[_pID]
REF_118(uint256) -> REF_117.laff
REF_118(uint256) (->plyr_) := _affID(uint256)"];
5->9;
6[label="Node Type: IF 6

EXPRESSION:
_affID == _pID

IRs:
TMP_168(bool) = _affID == _pID
CONDITION TMP_168"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
12->1;
}
// Function: 1295.sol-PlayerBook-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_99(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_99(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_100(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_100(bool)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_35(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_35(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_101 = CONVERT 0 to address
TMP_102(bool) = _affCode != TMP_101
TMP_103(bool) = _affCode != _addr
TMP_104(bool) = TMP_102 && TMP_103
CONDITION TMP_104"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_36(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_36(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_37(PlayerBook.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
TMP_105(bool) = _affID != REF_38
CONDITION TMP_105"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_39(PlayerBook.Player) -> plyr_[_pID]
REF_40(uint256) -> REF_39.laff
REF_40(uint256) (->plyr_) := _affID(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
13->1;
}
// Function: 1295.sol-PlayerBook-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_171(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_171(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_119(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_119(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_172 = CONVERT 0 to address
TMP_173(bool) = _affCode != TMP_172
TMP_174(bool) = _affCode != _addr
TMP_175(bool) = TMP_173 && TMP_174
CONDITION TMP_175"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_120(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_120(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_121(PlayerBook.Player) -> plyr_[_pID]
REF_122(uint256) -> REF_121.laff
TMP_176(bool) = _affID != REF_122
CONDITION TMP_176"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_123(PlayerBook.Player) -> plyr_[_pID]
REF_124(uint256) -> REF_123.laff
REF_124(uint256) (->plyr_) := _affID(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
12->1;
}
// Function: 1295.sol-PlayerBook-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_108(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_108(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_109(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_109(bool)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_42(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_42(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_110(bool) = _affCode != 
TMP_111(bool) = _affCode != _name
TMP_112(bool) = TMP_110 && TMP_111
CONDITION TMP_112"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_43(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_43(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_44(PlayerBook.Player) -> plyr_[_pID]
REF_45(uint256) -> REF_44.laff
TMP_113(bool) = _affID != REF_45
CONDITION TMP_113"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_46(PlayerBook.Player) -> plyr_[_pID]
REF_47(uint256) -> REF_46.laff
REF_47(uint256) (->plyr_) := _affID(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
13->1;
}
// Function: 1295.sol-PlayerBook-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_179(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_179(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_125(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_125(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_180(bool) = _affCode != 
TMP_181(bool) = _affCode != _name
TMP_182(bool) = TMP_180 && TMP_181
CONDITION TMP_182"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_126(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_126(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_127(PlayerBook.Player) -> plyr_[_pID]
REF_128(uint256) -> REF_127.laff
TMP_183(bool) = _affID != REF_128
CONDITION TMP_183"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_129(PlayerBook.Player) -> plyr_[_pID]
REF_130(uint256) -> REF_129.laff
REF_130(uint256) (->plyr_) := _affID(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
12->1;
}
// Function: 1295.sol-PlayerBook-setRegistrationFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
registrationFee_ = _fee

IRs:
registrationFee_(uint256) := _fee(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isAdmin()

IRs:
MODIFIER_CALL, PlayerBook.isAdmin()()"];
2->1;
}
// Function: 1295.sol-PlayerBook-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
registrationFee_ = 10000000000000000

IRs:
registrationFee_(uint256) := 10000000000000000(uint256)"];
}
// Function: 1295.sol-PlayerBook-useMyOldName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_157(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_157(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_102(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_102(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,Thats not a name you own)

IRs:
REF_103(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_104(bool) -> REF_103[_name]
TMP_158(bool) = REF_104 == True
TMP_159(None) = SOLIDITY_CALL require(bool,string)(TMP_158,Thats not a name you own)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_105(PlayerBook.Player) -> plyr_[_pID]
REF_106(bytes32) -> REF_105.name
REF_106(bytes32) (->plyr_) := _name(bytes32)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
5->1;
}
// Function: 1295.sol-PlayerBookReceiverInterface-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
}
// Function: 1295.sol-PlayerBookReceiverInterface-receivePlayerNameList(uint256,bytes32)
digraph{
}
// Function: 1295.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1295.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1295.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1295.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_19(bool) = x == 0
CONDITION TMP_19"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_20(bool) = y == 0
CONDITION TMP_20"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_21(bool) = i < y
CONDITION TMP_21"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_22(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_22(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_23(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1295.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_18(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_18"];
}
// Function: 1295.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_12(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_13(uint256) = TMP_12 / 2
z(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_14(bool) = z < y
CONDITION TMP_14"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_15(uint256) = x / z
TMP_16(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_15,z)
TMP_17(uint256) = TMP_16 / 2
z(uint256) := TMP_17(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1295.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL require(bool,string)(TMP_6,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
