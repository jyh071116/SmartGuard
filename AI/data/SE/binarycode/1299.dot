digraph G {
// Function: 1299.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_123 = CONVERT _input to bytes
_temp(bytes) := TMP_123(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_191 -> LENGTH _temp
_length(uint256) := REF_191(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_124(bool) = _length <= 32
TMP_125(bool) = _length > 0
TMP_126(bool) = TMP_124 && TMP_125
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_192(None) -> _temp[0]
TMP_128(bool) = REF_192 != 32
TMP_129(uint256) = _length - 1
REF_193(None) -> _temp[TMP_129]
TMP_130(bool) = REF_193 != 32
TMP_131(bool) = TMP_128 && TMP_130
TMP_132(None) = SOLIDITY_CALL require(bool,string)(TMP_131,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_194(None) -> _temp[0]
TMP_133(bool) = REF_194 == 48
CONDITION TMP_133"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_195(None) -> _temp[1]
TMP_134(bool) = REF_195 != 120
TMP_135(None) = SOLIDITY_CALL require(bool,string)(TMP_134,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_196(None) -> _temp[1]
TMP_136(bool) = REF_196 != 88
TMP_137(None) = SOLIDITY_CALL require(bool,string)(TMP_136,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_138(bool) = i < _length
CONDITION TMP_138"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_197(None) -> _temp[i]
TMP_139(bool) = REF_197 > 64
REF_198(None) -> _temp[i]
TMP_140(bool) = REF_198 < 91
TMP_141(bool) = TMP_139 && TMP_140
CONDITION TMP_141"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_199(bytes1) -> _temp[i]
REF_200(None) -> _temp[i]
TMP_142 = CONVERT REF_200 to uint256
TMP_143(uint256) = TMP_142 + 32
TMP_144 = CONVERT TMP_143 to bytes1
REF_199(bytes1) (->_temp) := TMP_144(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_145(bool) = _hasNonNumber == False
CONDITION TMP_145"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_201(None) -> _temp[i]
TMP_146(bool) = REF_201 == 32
REF_202(None) -> _temp[i]
TMP_147(bool) = REF_202 > 96
REF_203(None) -> _temp[i]
TMP_148(bool) = REF_203 < 123
TMP_149(bool) = TMP_147 && TMP_148
TMP_150(bool) = TMP_146 || TMP_149
REF_204(None) -> _temp[i]
TMP_151(bool) = REF_204 > 47
REF_205(None) -> _temp[i]
TMP_152(bool) = REF_205 < 58
TMP_153(bool) = TMP_151 && TMP_152
TMP_154(bool) = TMP_150 || TMP_153
TMP_155(None) = SOLIDITY_CALL require(bool,string)(TMP_154,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_206(None) -> _temp[i]
TMP_156(bool) = REF_206 == 32
CONDITION TMP_156"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_157(uint256) = i + 1
REF_207(None) -> _temp[TMP_157]
TMP_158(bool) = REF_207 != 32
TMP_159(None) = SOLIDITY_CALL require(bool,string)(TMP_158,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_160(bool) = _hasNonNumber == False
REF_208(None) -> _temp[i]
TMP_161(bool) = REF_208 < 48
REF_209(None) -> _temp[i]
TMP_162(bool) = REF_209 > 57
TMP_163(bool) = TMP_161 || TMP_162
TMP_164(bool) = TMP_160 && TMP_163
CONDITION TMP_164"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_165(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_166(bool) = _hasNonNumber == True
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 1299.sol-PlayerBook-addGame(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(gameIDs_[_gameAddress] == 0,derp, that games already been registered)

IRs:
REF_161(uint256) -> gameIDs_[_gameAddress]
TMP_106(bool) = REF_161 == 0
TMP_107(None) = SOLIDITY_CALL require(bool,string)(TMP_106,derp, that games already been registered)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gID_ ++

IRs:
TMP_108(uint256) := gID_(uint256)
gID_(uint256) = gID_ + 1"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_name = _gameNameStr.nameFilter()

IRs:
TMP_109(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_gameNameStr'] 
_name(bytes32) := TMP_109(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameIDs_[_gameAddress] = gID_

IRs:
REF_163(uint256) -> gameIDs_[_gameAddress]
REF_163(uint256) (->gameIDs_) := gID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gameNames_[_gameAddress] = _name

IRs:
REF_164(bytes32) -> gameNames_[_gameAddress]
REF_164(bytes32) (->gameNames_) := _name(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[gID_] = PlayerBookReceiverInterface(_gameAddress)

IRs:
REF_165(PlayerBookReceiverInterface) -> games_[gID_]
TMP_110 = CONVERT _gameAddress to PlayerBookReceiverInterface
REF_165(PlayerBookReceiverInterface) (->games_) := TMP_110(PlayerBookReceiverInterface)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
games_[gID_].receivePlayerInfo(1,plyr_[1].addr,plyr_[1].name,0)

IRs:
REF_166(PlayerBookReceiverInterface) -> games_[gID_]
REF_168(PlayerBook.Player) -> plyr_[1]
REF_169(address) -> REF_168.addr
REF_170(PlayerBook.Player) -> plyr_[1]
REF_171(bytes32) -> REF_170.name
HIGH_LEVEL_CALL, dest:REF_166(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['1', 'REF_169', 'REF_171', '0']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
games_[gID_].receivePlayerInfo(2,plyr_[2].addr,plyr_[2].name,0)

IRs:
REF_172(PlayerBookReceiverInterface) -> games_[gID_]
REF_174(PlayerBook.Player) -> plyr_[2]
REF_175(address) -> REF_174.addr
REF_176(PlayerBook.Player) -> plyr_[2]
REF_177(bytes32) -> REF_176.name
HIGH_LEVEL_CALL, dest:REF_172(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['2', 'REF_175', 'REF_177', '0']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
games_[gID_].receivePlayerInfo(3,plyr_[3].addr,plyr_[3].name,0)

IRs:
REF_178(PlayerBookReceiverInterface) -> games_[gID_]
REF_180(PlayerBook.Player) -> plyr_[3]
REF_181(address) -> REF_180.addr
REF_182(PlayerBook.Player) -> plyr_[3]
REF_183(bytes32) -> REF_182.name
HIGH_LEVEL_CALL, dest:REF_178(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['3', 'REF_181', 'REF_183', '0']  "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
games_[gID_].receivePlayerInfo(4,plyr_[4].addr,plyr_[4].name,0)

IRs:
REF_184(PlayerBookReceiverInterface) -> games_[gID_]
REF_186(PlayerBook.Player) -> plyr_[4]
REF_187(address) -> REF_186.addr
REF_188(PlayerBook.Player) -> plyr_[4]
REF_189(bytes32) -> REF_188.name
HIGH_LEVEL_CALL, dest:REF_184(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['4', 'REF_187', 'REF_189', '0']  "];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
11->1;
}
// Function: 1299.sol-PlayerBook-addMeToAllGames()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_91(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_91(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_45(bool) = _pID != 0
TMP_46(None) = SOLIDITY_CALL require(bool,string)(TMP_45,hey there buddy, you dont even have an account)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_laff = plyr_[_pID].laff

IRs:
REF_92(PlayerBook.Player) -> plyr_[_pID]
REF_93(uint256) -> REF_92.laff
_laff(uint256) := REF_93(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_94(PlayerBook.Player) -> plyr_[_pID]
REF_95(uint256) -> REF_94.names
_totalNames(uint256) := REF_95(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_name = plyr_[_pID].name

IRs:
REF_96(PlayerBook.Player) -> plyr_[_pID]
REF_97(bytes32) -> REF_96.name
_name(bytes32) := REF_97(bytes32)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i <= gID_

IRs:
TMP_47(bool) = i <= gID_
CONDITION TMP_47"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_laff)

IRs:
REF_98(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_98(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_laff']  "];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_totalNames > 1

IRs:
TMP_49(bool) = _totalNames > 1
CONDITION TMP_49"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
ii <= _totalNames

IRs:
TMP_50(bool) = ii <= _totalNames
CONDITION TMP_50"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_100(PlayerBookReceiverInterface) -> games_[i]
REF_102(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_103(bytes32) -> REF_102[ii]
HIGH_LEVEL_CALL, dest:REF_100(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_103']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ii ++

IRs:
TMP_52(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_53(uint256) := i(uint256)
i(uint256) = i + 1"];
20->10;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
21->1;
}
// Function: 1299.sol-PlayerBook-addMeToGame(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_gameID <= gID_,silly player, that game doesn't exist yet)

IRs:
TMP_35(bool) = _gameID <= gID_
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,silly player, that game doesn't exist yet)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_78(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_78(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_37(bool) = _pID != 0
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,hey there buddy, you dont even have an account)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_79(PlayerBook.Player) -> plyr_[_pID]
REF_80(uint256) -> REF_79.names
_totalNames(uint256) := REF_80(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[_gameID].receivePlayerInfo(_pID,_addr,plyr_[_pID].name,plyr_[_pID].laff)

IRs:
REF_81(PlayerBookReceiverInterface) -> games_[_gameID]
REF_83(PlayerBook.Player) -> plyr_[_pID]
REF_84(bytes32) -> REF_83.name
REF_85(PlayerBook.Player) -> plyr_[_pID]
REF_86(uint256) -> REF_85.laff
HIGH_LEVEL_CALL, dest:REF_81(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', 'REF_84', 'REF_86']  "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_totalNames > 1

IRs:
TMP_40(bool) = _totalNames > 1
CONDITION TMP_40"];
7->10[label="True"];
7->14[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->14;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
ii <= _totalNames

IRs:
TMP_41(bool) = ii <= _totalNames
CONDITION TMP_41"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
games_[_gameID].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_87(PlayerBookReceiverInterface) -> games_[_gameID]
REF_89(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_90(bytes32) -> REF_89[ii]
HIGH_LEVEL_CALL, dest:REF_87(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_90']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ii ++

IRs:
TMP_43(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
13->11;
14[label="Node Type: END_IF 14
"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
15->1;
}
// Function: 1299.sol-PlayerBook-checkIfNameValid(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameStr.nameFilter()

IRs:
TMP_0(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameStr'] 
_name(bytes32) := TMP_0(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxName_[_name] == 0

IRs:
REF_57(uint256) -> pIDxName_[_name]
TMP_1(bool) = REF_57 == 0
CONDITION TMP_1"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1299.sol-PlayerBook-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
plyr_[1].addr = 0x10719b75B0EBe216575FFcE40A1E47aeBf0b5Fb8

IRs:
REF_0(PlayerBook.Player) -> plyr_[1]
REF_1(address) -> REF_0.addr
REF_1(address) (->plyr_) := 93877378993140648005286406894195705754208133048(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
plyr_[1].name = zhangsan

IRs:
REF_2(PlayerBook.Player) -> plyr_[1]
REF_3(bytes32) -> REF_2.name
REF_3(bytes32) (->plyr_) := zhangsan(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[1].names = 1

IRs:
REF_4(PlayerBook.Player) -> plyr_[1]
REF_5(uint256) -> REF_4.names
REF_5(uint256) (->plyr_) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[1].laff = 0

IRs:
REF_6(PlayerBook.Player) -> plyr_[1]
REF_7(uint256) -> REF_6.laff
REF_7(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxAddr_[0x10719b75B0EBe216575FFcE40A1E47aeBf0b5Fb8] = 1

IRs:
REF_8(uint256) -> pIDxAddr_[93877378993140648005286406894195705754208133048]
REF_8(uint256) (->pIDxAddr_) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[zhangsan] = 1

IRs:
REF_9(uint256) -> pIDxName_[zhangsan]
REF_9(uint256) (->pIDxName_) := 1(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNames_[1][zhangsan] = true

IRs:
REF_10(mapping(bytes32 => bool)) -> plyrNames_[1]
REF_11(bool) -> REF_10[zhangsan]
REF_11(bool) (->plyrNames_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyrNameList_[1][1] = zhangsan

IRs:
REF_12(mapping(uint256 => bytes32)) -> plyrNameList_[1]
REF_13(bytes32) -> REF_12[1]
REF_13(bytes32) (->plyrNameList_) := zhangsan(string)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[2].addr = 0x6B6D054b9235b2e1c20DdC324Da36A0e9E0f36d3

IRs:
REF_14(PlayerBook.Player) -> plyr_[2]
REF_15(address) -> REF_14.addr
REF_15(address) (->plyr_) := 613293254981743952160394707893328828378832123603(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[2].name = lisi

IRs:
REF_16(PlayerBook.Player) -> plyr_[2]
REF_17(bytes32) -> REF_16.name
REF_17(bytes32) (->plyr_) := lisi(string)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[2].names = 1

IRs:
REF_18(PlayerBook.Player) -> plyr_[2]
REF_19(uint256) -> REF_18.names
REF_19(uint256) (->plyr_) := 1(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[2].laff = 0

IRs:
REF_20(PlayerBook.Player) -> plyr_[2]
REF_21(uint256) -> REF_20.laff
REF_21(uint256) (->plyr_) := 0(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
pIDxAddr_[0x6B6D054b9235b2e1c20DdC324Da36A0e9E0f36d3] = 2

IRs:
REF_22(uint256) -> pIDxAddr_[613293254981743952160394707893328828378832123603]
REF_22(uint256) (->pIDxAddr_) := 2(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
pIDxName_[lisi] = 2

IRs:
REF_23(uint256) -> pIDxName_[lisi]
REF_23(uint256) (->pIDxName_) := 2(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyrNames_[2][lisi] = true

IRs:
REF_24(mapping(bytes32 => bool)) -> plyrNames_[2]
REF_25(bool) -> REF_24[lisi]
REF_25(bool) (->plyrNames_) := True(bool)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyrNameList_[2][1] = lisi

IRs:
REF_26(mapping(uint256 => bytes32)) -> plyrNameList_[2]
REF_27(bytes32) -> REF_26[1]
REF_27(bytes32) (->plyrNameList_) := lisi(string)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
plyr_[3].addr = 0x3d53B536f883c3E6660244F78341F64330345Fa4

IRs:
REF_28(PlayerBook.Player) -> plyr_[3]
REF_29(address) -> REF_28.addr
REF_29(address) (->plyr_) := 350115184901066422201336810906498508278776225700(address)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[3].name = wanger

IRs:
REF_30(PlayerBook.Player) -> plyr_[3]
REF_31(bytes32) -> REF_30.name
REF_31(bytes32) (->plyr_) := wanger(string)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
plyr_[3].names = 1

IRs:
REF_32(PlayerBook.Player) -> plyr_[3]
REF_33(uint256) -> REF_32.names
REF_33(uint256) (->plyr_) := 1(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
plyr_[3].laff = 2

IRs:
REF_34(PlayerBook.Player) -> plyr_[3]
REF_35(uint256) -> REF_34.laff
REF_35(uint256) (->plyr_) := 2(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
pIDxAddr_[0x3d53B536f883c3E6660244F78341F64330345Fa4] = 3

IRs:
REF_36(uint256) -> pIDxAddr_[350115184901066422201336810906498508278776225700]
REF_36(uint256) (->pIDxAddr_) := 3(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
pIDxName_[wanger] = 3

IRs:
REF_37(uint256) -> pIDxName_[wanger]
REF_37(uint256) (->pIDxName_) := 3(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
plyrNames_[3][wanger] = true

IRs:
REF_38(mapping(bytes32 => bool)) -> plyrNames_[3]
REF_39(bool) -> REF_38[wanger]
REF_39(bool) (->plyrNames_) := True(bool)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
plyrNameList_[3][1] = wanger

IRs:
REF_40(mapping(uint256 => bytes32)) -> plyrNameList_[3]
REF_41(bytes32) -> REF_40[1]
REF_41(bytes32) (->plyrNameList_) := wanger(string)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
plyr_[4].addr = 0x812f76D5337307990c14A4A78cb5faEa561FE713

IRs:
REF_42(PlayerBook.Player) -> plyr_[4]
REF_43(address) -> REF_42.addr
REF_43(address) (->plyr_) := 737518296258878235809001839446295602140150753043(address)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
plyr_[4].name = maliu

IRs:
REF_44(PlayerBook.Player) -> plyr_[4]
REF_45(bytes32) -> REF_44.name
REF_45(bytes32) (->plyr_) := maliu(string)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
plyr_[4].names = 1

IRs:
REF_46(PlayerBook.Player) -> plyr_[4]
REF_47(uint256) -> REF_46.names
REF_47(uint256) (->plyr_) := 1(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[4].laff = 3

IRs:
REF_48(PlayerBook.Player) -> plyr_[4]
REF_49(uint256) -> REF_48.laff
REF_49(uint256) (->plyr_) := 3(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
pIDxAddr_[0x812f76D5337307990c14A4A78cb5faEa561FE713] = 4

IRs:
REF_50(uint256) -> pIDxAddr_[737518296258878235809001839446295602140150753043]
REF_50(uint256) (->pIDxAddr_) := 4(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
pIDxName_[maliu] = 4

IRs:
REF_51(uint256) -> pIDxName_[maliu]
REF_51(uint256) (->pIDxName_) := 4(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
plyrNames_[4][maliu] = true

IRs:
REF_52(mapping(bytes32 => bool)) -> plyrNames_[4]
REF_53(bool) -> REF_52[maliu]
REF_53(bool) (->plyrNames_) := True(bool)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
plyrNameList_[4][1] = maliu

IRs:
REF_54(mapping(uint256 => bytes32)) -> plyrNameList_[4]
REF_55(bytes32) -> REF_54[1]
REF_55(bytes32) (->plyrNameList_) := maliu(string)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
pID_ = 4

IRs:
pID_(uint256) := 4(uint256)"];
}
// Function: 1299.sol-PlayerBook-determinePID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxAddr_[_addr] == 0

IRs:
REF_133(uint256) -> pIDxAddr_[_addr]
TMP_72(bool) = REF_133 == 0
CONDITION TMP_72"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pID_ ++

IRs:
TMP_73(uint256) := pID_(uint256)
pID_(uint256) = pID_ + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = pID_

IRs:
REF_134(uint256) -> pIDxAddr_[_addr]
REF_134(uint256) (->pIDxAddr_) := pID_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[pID_].addr = _addr

IRs:
REF_135(PlayerBook.Player) -> plyr_[pID_]
REF_136(address) -> REF_135.addr
REF_136(address) (->plyr_) := _addr(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true)

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1299.sol-PlayerBook-getNameFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(registrationFee_)

IRs:
RETURN registrationFee_"];
}
// Function: 1299.sol-PlayerBook-getPlayerAddr(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].addr)

IRs:
REF_142(PlayerBook.Player) -> plyr_[_pID]
REF_143(address) -> REF_142.addr
RETURN REF_143"];
}
// Function: 1299.sol-PlayerBook-getPlayerID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
determinePID(_addr)

IRs:
TMP_74(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(pIDxAddr_[_addr])

IRs:
REF_137(uint256) -> pIDxAddr_[_addr]
RETURN REF_137"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
3->1;
}
// Function: 1299.sol-PlayerBook-getPlayerLAff(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].laff)

IRs:
REF_140(PlayerBook.Player) -> plyr_[_pID]
REF_141(uint256) -> REF_140.laff
RETURN REF_141"];
}
// Function: 1299.sol-PlayerBook-getPlayerName(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].name)

IRs:
REF_138(PlayerBook.Player) -> plyr_[_pID]
REF_139(bytes32) -> REF_138.name
RETURN REF_139"];
}
// Function: 1299.sol-PlayerBook-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_117(bool) = _codeLength == 0
TMP_118(None) = SOLIDITY_CALL require(bool,string)(TMP_117,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1299.sol-PlayerBook-isRegisteredGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameIDs_[msg.sender] != 0)

IRs:
REF_190(uint256) -> gameIDs_[msg.sender]
TMP_121(bool) = REF_190 != 0
TMP_122(None) = SOLIDITY_CALL require(bool)(TMP_121)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1299.sol-PlayerBook-onlyDevs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(admin == msg.sender,msg sender is not a dev)

IRs:
TMP_119(bool) = admin == msg.sender
TMP_120(None) = SOLIDITY_CALL require(bool,string)(TMP_119,msg sender is not a dev)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1299.sol-PlayerBook-registerNameCore(uint256,address,uint256,bytes32,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxName_[_name] != 0

IRs:
REF_110(uint256) -> pIDxName_[_name]
TMP_59(bool) = REF_110 != 0
CONDITION TMP_59"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,sorry that names already taken)

IRs:
REF_111(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_112(bool) -> REF_111[_name]
TMP_60(bool) = REF_112 == True
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,sorry that names already taken)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_113(PlayerBook.Player) -> plyr_[_pID]
REF_114(bytes32) -> REF_113.name
REF_114(bytes32) (->plyr_) := _name(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_115(uint256) -> pIDxName_[_name]
REF_115(uint256) (->pIDxName_) := _pID(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_116(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_117(bool) -> REF_116[_name]
TMP_62(bool) = REF_117 == False
CONDITION TMP_62"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_118(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_119(bool) -> REF_118[_name]
REF_119(bool) (->plyrNames_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].names ++

IRs:
REF_120(PlayerBook.Player) -> plyr_[_pID]
REF_121(uint256) -> REF_120.names
TMP_63(uint256) := REF_121(uint256)
REF_121(-> plyr_) = REF_121 + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyrNameList_[_pID][plyr_[_pID].names] = _name

IRs:
REF_122(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_123(PlayerBook.Player) -> plyr_[_pID]
REF_124(uint256) -> REF_123.names
REF_125(bytes32) -> REF_122[REF_124]
REF_125(bytes32) (->plyrNameList_) := _name(bytes32)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
admin.transfer(address(this).balance)

IRs:
TMP_64 = CONVERT this to address
TMP_65(uint256) = SOLIDITY_CALL balance(address)(TMP_64)
Transfer dest:admin value:TMP_65"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_all == true

IRs:
TMP_67(bool) = _all == True
CONDITION TMP_67"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i <= gID_

IRs:
TMP_68(bool) = i <= gID_
CONDITION TMP_68"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_affID)

IRs:
REF_127(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_127(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_affID']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_70(uint256) := i(uint256)
i(uint256) = i + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,msg.value,now)

IRs:
REF_129(PlayerBook.Player) -> plyr_[_affID]
REF_130(address) -> REF_129.addr
REF_131(PlayerBook.Player) -> plyr_[_affID]
REF_132(bytes32) -> REF_131.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_130,REF_132,msg.value,now)"];
}
// Function: 1299.sol-PlayerBook-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_2(bool) = msg.value >= registrationFee_
TMP_3(None) = SOLIDITY_CALL require(bool,string)(TMP_2,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_4(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_4(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_5(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_5(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_59(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_59(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID

IRs:
TMP_6(bool) = _affCode != 0
REF_60(PlayerBook.Player) -> plyr_[_pID]
REF_61(uint256) -> REF_60.laff
TMP_7(bool) = _affCode != REF_61
TMP_8(bool) = TMP_6 && TMP_7
TMP_9(bool) = _affCode != _pID
TMP_10(bool) = TMP_8 && TMP_9
CONDITION TMP_10"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_62(PlayerBook.Player) -> plyr_[_pID]
REF_63(uint256) -> REF_62.laff
REF_63(uint256) (->plyr_) := _affCode(uint256)"];
7->11;
8[label="Node Type: IF 8

EXPRESSION:
_affCode == _pID

IRs:
TMP_11(bool) = _affCode == _pID
CONDITION TMP_11"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_affCode = 0

IRs:
_affCode(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
registerNameCore(_pID,_addr,_affCode,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affCode,_name,_isNewPlayer,_all)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
13->1;
}
// Function: 1299.sol-PlayerBook-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_76(bool) = msg.value >= registrationFee_
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_78(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_78(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_144(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_144(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_affID = _affCode

IRs:
_affID(uint256) := _affCode(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID

IRs:
TMP_79(bool) = _affID != 0
REF_145(PlayerBook.Player) -> plyr_[_pID]
REF_146(uint256) -> REF_145.laff
TMP_80(bool) = _affID != REF_146
TMP_81(bool) = TMP_79 && TMP_80
TMP_82(bool) = _affID != _pID
TMP_83(bool) = TMP_81 && TMP_82
CONDITION TMP_83"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_147(PlayerBook.Player) -> plyr_[_pID]
REF_148(uint256) -> REF_147.laff
REF_148(uint256) (->plyr_) := _affID(uint256)"];
6->10;
7[label="Node Type: IF 7

EXPRESSION:
_affID == _pID

IRs:
TMP_84(bool) = _affID == _pID
CONDITION TMP_84"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 1299.sol-PlayerBook-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_14(bool) = msg.value >= registrationFee_
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_16(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_16(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_17(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_17(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_65(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_65(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_18 = CONVERT 0 to address
TMP_19(bool) = _affCode != TMP_18
TMP_20(bool) = _affCode != _addr
TMP_21(bool) = TMP_19 && TMP_20
CONDITION TMP_21"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_66(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_66(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_67(PlayerBook.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
TMP_22(bool) = _affID != REF_68
CONDITION TMP_22"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_69(PlayerBook.Player) -> plyr_[_pID]
REF_70(uint256) -> REF_69.laff
REF_70(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 1299.sol-PlayerBook-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_87(bool) = msg.value >= registrationFee_
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_89(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_89(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_149(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_149(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_90 = CONVERT 0 to address
TMP_91(bool) = _affCode != TMP_90
TMP_92(bool) = _affCode != _addr
TMP_93(bool) = TMP_91 && TMP_92
CONDITION TMP_93"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_150(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_150(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_151(PlayerBook.Player) -> plyr_[_pID]
REF_152(uint256) -> REF_151.laff
TMP_94(bool) = _affID != REF_152
CONDITION TMP_94"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_153(PlayerBook.Player) -> plyr_[_pID]
REF_154(uint256) -> REF_153.laff
REF_154(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 1299.sol-PlayerBook-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_25(bool) = msg.value >= registrationFee_
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_27(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_27(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_28(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_28(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_72(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_72(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_29(bool) = _affCode != 
TMP_30(bool) = _affCode != _name
TMP_31(bool) = TMP_29 && TMP_30
CONDITION TMP_31"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_73(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_73(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_74(PlayerBook.Player) -> plyr_[_pID]
REF_75(uint256) -> REF_74.laff
TMP_32(bool) = _affID != REF_75
CONDITION TMP_32"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_76(PlayerBook.Player) -> plyr_[_pID]
REF_77(uint256) -> REF_76.laff
REF_77(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 1299.sol-PlayerBook-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_97(bool) = msg.value >= registrationFee_
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_99(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_99(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_155(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_155(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_100(bool) = _affCode != 
TMP_101(bool) = _affCode != _name
TMP_102(bool) = TMP_100 && TMP_101
CONDITION TMP_102"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_156(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_156(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_157(PlayerBook.Player) -> plyr_[_pID]
REF_158(uint256) -> REF_157.laff
TMP_103(bool) = _affID != REF_158
CONDITION TMP_103"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_159(PlayerBook.Player) -> plyr_[_pID]
REF_160(uint256) -> REF_159.laff
REF_160(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 1299.sol-PlayerBook-setRegistrationFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
registrationFee_ = _fee

IRs:
registrationFee_(uint256) := _fee(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
2->1;
}
// Function: 1299.sol-PlayerBook-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
registrationFee_ = 10000000000000000

IRs:
registrationFee_(uint256) := 10000000000000000(uint256)"];
}
// Function: 1299.sol-PlayerBook-useMyOldName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_55(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_55(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_105(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_105(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,umm... thats not a name you own)

IRs:
REF_106(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_107(bool) -> REF_106[_name]
TMP_56(bool) = REF_107 == True
TMP_57(None) = SOLIDITY_CALL require(bool,string)(TMP_56,umm... thats not a name you own)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_108(PlayerBook.Player) -> plyr_[_pID]
REF_109(bytes32) -> REF_108.name
REF_109(bytes32) (->plyr_) := _name(bytes32)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
5->1;
}
// Function: 1299.sol-PlayerBookReceiverInterface-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
}
// Function: 1299.sol-PlayerBookReceiverInterface-receivePlayerNameList(uint256,bytes32)
digraph{
}
// Function: 1299.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_176(uint256) = a + b
c(uint256) := TMP_176(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_177(bool) = c >= a
TMP_178(None) = SOLIDITY_CALL require(bool,string)(TMP_177,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1299.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_168(bool) = a == 0
CONDITION TMP_168"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_169(uint256) = a * b
c(uint256) := TMP_169(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_170(uint256) = c / a
TMP_171(bool) = TMP_170 == b
TMP_172(None) = SOLIDITY_CALL require(bool,string)(TMP_171,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1299.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_186(bool) = x == 0
CONDITION TMP_186"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_187(bool) = y == 0
CONDITION TMP_187"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_188(bool) = i < y
CONDITION TMP_188"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_189(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_189(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_190(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1299.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_185(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_185"];
}
// Function: 1299.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_179(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_180(uint256) = TMP_179 / 2
z(uint256) := TMP_180(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_181(bool) = z < y
CONDITION TMP_181"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_182(uint256) = x / z
TMP_183(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_182,z)
TMP_184(uint256) = TMP_183 / 2
z(uint256) := TMP_184(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1299.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_173(bool) = b <= a
TMP_174(None) = SOLIDITY_CALL require(bool,string)(TMP_173,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_175(uint256) = a - b
RETURN TMP_175"];
}
}
