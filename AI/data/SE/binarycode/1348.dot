digraph G {
// Function: 1348.sol-Ownable-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == newOwner,msg.sender == newOwner)

IRs:
TMP_5(bool) = msg.sender == newOwner
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,msg.sender == newOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,msg.sender)

IRs:
Emit OwnershipTransferred(owner,msg.sender)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_8 = CONVERT 0 to address
newOwner(address) := TMP_8(address)"];
}
// Function: 1348.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = address(0)

IRs:
TMP_0 = CONVERT 0 to address
newOwner(address) := TMP_0(address)"];
}
// Function: 1348.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,msg.sender == owner)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1348.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(0) != _newOwner,address(0) != _newOwner)

IRs:
TMP_1 = CONVERT 0 to address
TMP_2(bool) = TMP_1 != _newOwner
TMP_3(None) = SOLIDITY_CALL require(bool,string)(TMP_2,address(0) != _newOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1348.sol-Timelock-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == newOwner,msg.sender == newOwner)

IRs:
TMP_16(bool) = msg.sender == newOwner
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,msg.sender == newOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,msg.sender)

IRs:
Emit OwnershipTransferred(owner,msg.sender)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_19 = CONVERT 0 to address
newOwner(address) := TMP_19(address)"];
}
// Function: 1348.sol-Timelock-claim()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(now > releaseTime,now > releaseTime)

IRs:
TMP_24(bool) = now > releaseTime
TMP_25(None) = SOLIDITY_CALL require(bool,string)(TMP_24,now > releaseTime)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tknToSend = tokenContract.balanceOf(this)

IRs:
TMP_26(uint256) = HIGH_LEVEL_CALL, dest:tokenContract(tokenInterface), function:balanceOf, arguments:['this']  
tknToSend(uint256) := TMP_26(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(tknToSend > 0,tknToSend > 0)

IRs:
TMP_27(bool) = tknToSend > 0
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,tknToSend > 0)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(tokenContract.transfer(msg.sender,tknToSend))

IRs:
TMP_29(bool) = HIGH_LEVEL_CALL, dest:tokenContract(tokenInterface), function:transfer, arguments:['msg.sender', 'tknToSend']  
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 1348.sol-Timelock-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = address(0)

IRs:
TMP_11 = CONVERT 0 to address
newOwner(address) := TMP_11(address)"];
}
// Function: 1348.sol-Timelock-constructor(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenContract = tokenInterface(_tokenAddress)

IRs:
TMP_20 = CONVERT _tokenAddress to tokenInterface
tokenContract(tokenInterface) := TMP_20(tokenInterface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
releaseTime = _releaseTime

IRs:
releaseTime(uint256) := _releaseTime(uint256)"];
}
// Function: 1348.sol-Timelock-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newOwner

IRs:
TMP_21(bool) = msg.sender == newOwner
CONDITION TMP_21"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
acceptOwnership()

IRs:
INTERNAL_CALL, Ownable.acceptOwnership()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
claim()

IRs:
INTERNAL_CALL, Timelock.claim()()"];
}
// Function: 1348.sol-Timelock-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,msg.sender == owner)

IRs:
TMP_33(bool) = msg.sender == owner
TMP_34(None) = SOLIDITY_CALL require(bool,string)(TMP_33,msg.sender == owner)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1348.sol-Timelock-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(0) != _newOwner,address(0) != _newOwner)

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = TMP_12 != _newOwner
TMP_14(None) = SOLIDITY_CALL require(bool,string)(TMP_13,address(0) != _newOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1348.sol-Timelock-unlocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > releaseTime

IRs:
TMP_32(bool) = now > releaseTime
RETURN TMP_32"];
}
// Function: 1348.sol-tokenInterface-balanceOf(address)
digraph{
}
// Function: 1348.sol-tokenInterface-transfer(address,uint256)
digraph{
}
}
