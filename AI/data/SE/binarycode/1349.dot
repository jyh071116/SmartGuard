digraph G {
// Function: 1349.sol-DrupeCoin-balanceOf(address)
digraph{
}
// Function: 1349.sol-DrupeCoin-transfer(address,uint256)
digraph{
}
// Function: 1349.sol-DrupeICO-_getBonus()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
now < _presale2.start

IRs:
REF_2(uint256) -> _presale2.start
TMP_44(bool) = now < REF_2
CONDITION TMP_44"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bonus = _presale1.bonus

IRs:
REF_3(DrupeICO.Fraction) -> _presale1.bonus
bonus(DrupeICO.Fraction) := REF_3(DrupeICO.Fraction)"];
2->7;
3[label="Node Type: IF 3

EXPRESSION:
now < _mainsale.start

IRs:
REF_4(uint256) -> _mainsale.start
TMP_45(bool) = now < REF_4
CONDITION TMP_45"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bonus = _presale2.bonus

IRs:
REF_5(DrupeICO.Fraction) -> _presale2.bonus
bonus(DrupeICO.Fraction) := REF_5(DrupeICO.Fraction)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
bonus = Fraction({n:0,d:1})

IRs:
TMP_46(DrupeICO.Fraction) = new Fraction(0,1)
bonus(DrupeICO.Fraction) := TMP_46(DrupeICO.Fraction)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
bonus

IRs:
RETURN bonus"];
}
// Function: 1349.sol-DrupeICO-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _newOwner)

IRs:
TMP_81(bool) = msg.sender == _newOwner
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_owner = _newOwner

IRs:
_owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_newOwner = address(0)

IRs:
TMP_83 = CONVERT 0 to address
_newOwner(address) := TMP_83(address)"];
}
// Function: 1349.sol-DrupeICO-burnUnsoldTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= _mainsale.end)

IRs:
REF_29(uint256) -> _mainsale.end
TMP_72(bool) = now >= REF_29
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
unsoldTokens = _drupe.balanceOf(this)

IRs:
TMP_74(uint256) = HIGH_LEVEL_CALL, dest:_drupe(DrupeCoin), function:balanceOf, arguments:['this']  
unsoldTokens(uint256) := TMP_74(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_drupe.transfer(address(0),unsoldTokens)

IRs:
TMP_75 = CONVERT 0 to address
TMP_76(bool) = HIGH_LEVEL_CALL, dest:_drupe(DrupeCoin), function:transfer, arguments:['TMP_75', 'unsoldTokens']  "];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, DrupeICO.ownerOnly()()"];
4->1;
}
// Function: 1349.sol-DrupeICO-constructor(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(drupe != address(0))

IRs:
TMP_8 = CONVERT 0 to address
TMP_9(bool) = drupe != TMP_8
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(basePriceN > 0 && basePriceD > 0)

IRs:
TMP_11(bool) = basePriceN > 0
TMP_12(bool) = basePriceD > 0
TMP_13(bool) = TMP_11 && TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(refBonusN > 0 && basePriceD > 0)

IRs:
TMP_15(bool) = refBonusN > 0
TMP_16(bool) = basePriceD > 0
TMP_17(bool) = TMP_15 && TMP_16
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(presale1Start > now)

IRs:
TMP_19(bool) = presale1Start > now
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(presale1BonusN > 0 && presale1BonusD > 0)

IRs:
TMP_21(bool) = presale1BonusN > 0
TMP_22(bool) = presale1BonusD > 0
TMP_23(bool) = TMP_21 && TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(presale2Start > presale1Start)

IRs:
TMP_25(bool) = presale2Start > presale1Start
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(presale2BonusN > 0 && presale2BonusD > 0)

IRs:
TMP_27(bool) = presale2BonusN > 0
TMP_28(bool) = presale2BonusD > 0
TMP_29(bool) = TMP_27 && TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(mainsaleStart > presale2Start)

IRs:
TMP_31(bool) = mainsaleStart > presale2Start
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(mainsaleEnd > mainsaleStart)

IRs:
TMP_33(bool) = mainsaleEnd > mainsaleStart
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_owner = msg.sender

IRs:
_owner(address) := msg.sender(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_newOwner = address(0)

IRs:
TMP_35 = CONVERT 0 to address
_newOwner(address) := TMP_35(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_drupe = DrupeCoin(drupe)

IRs:
TMP_36 = CONVERT drupe to DrupeCoin
_drupe(DrupeCoin) := TMP_36(DrupeCoin)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_basePrice = Fraction({n:basePriceN,d:basePriceD})

IRs:
TMP_37(DrupeICO.Fraction) = new Fraction(basePriceN,basePriceD)
_basePrice(DrupeICO.Fraction) := TMP_37(DrupeICO.Fraction)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_refBonus = Fraction({n:refBonusN,d:refBonusD})

IRs:
TMP_38(DrupeICO.Fraction) = new Fraction(refBonusN,refBonusD)
_refBonus(DrupeICO.Fraction) := TMP_38(DrupeICO.Fraction)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_presale1 = Presale({start:presale1Start,bonus:Fraction({n:presale1BonusN,d:presale1BonusD})})

IRs:
TMP_39(DrupeICO.Fraction) = new Fraction(presale1BonusN,presale1BonusD)
TMP_40(DrupeICO.Presale) = new Presale(presale1Start,TMP_39)
_presale1(DrupeICO.Presale) := TMP_40(DrupeICO.Presale)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_presale2 = Presale({start:presale2Start,bonus:Fraction({n:presale2BonusN,d:presale2BonusD})})

IRs:
TMP_41(DrupeICO.Fraction) = new Fraction(presale2BonusN,presale2BonusD)
TMP_42(DrupeICO.Presale) = new Presale(presale2Start,TMP_41)
_presale2(DrupeICO.Presale) := TMP_42(DrupeICO.Presale)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_mainsale = Mainsale({start:mainsaleStart,end:mainsaleEnd})

IRs:
TMP_43(DrupeICO.Mainsale) = new Mainsale(mainsaleStart,mainsaleEnd)
_mainsale(DrupeICO.Mainsale) := TMP_43(DrupeICO.Mainsale)"];
}
// Function: 1349.sol-DrupeICO-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bonus = _getBonus()

IRs:
TMP_47(DrupeICO.Fraction) = INTERNAL_CALL, DrupeICO._getBonus()()
bonus(DrupeICO.Fraction) := TMP_47(DrupeICO.Fraction)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
rawTokens = msg.value.mul(_basePrice.d).div(_basePrice.n)

IRs:
REF_7(uint256) -> _basePrice.d
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['msg.value', 'REF_7'] 
REF_9(uint256) -> _basePrice.n
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_48', 'REF_9'] 
rawTokens(uint256) := TMP_49(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
tokens = rawTokens + rawTokens.mul(bonus.n).div(bonus.d)

IRs:
REF_11(uint256) -> bonus.n
TMP_50(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['rawTokens', 'REF_11'] 
REF_13(uint256) -> bonus.d
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_50', 'REF_13'] 
TMP_52(uint256) = rawTokens + TMP_51
tokens(uint256) := TMP_52(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_drupe.transfer(msg.sender,tokens)

IRs:
TMP_53(bool) = HIGH_LEVEL_CALL, dest:_drupe(DrupeCoin), function:transfer, arguments:['msg.sender', 'tokens']  "];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
refContract = new DrupeICORef(msg.sender,this)

IRs:
TMP_55(DrupeICORef) = new DrupeICORef(msg.sender,this) 
refContract(address) := TMP_55(DrupeICORef)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Referrer(msg.sender,refContract)

IRs:
Emit Referrer(msg.sender,refContract)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
icoOnly()

IRs:
MODIFIER_CALL, DrupeICO.icoOnly()()"];
7->1;
}
// Function: 1349.sol-DrupeICO-getBasePrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
n = _basePrice.n

IRs:
REF_33(uint256) -> _basePrice.n
n(uint256) := REF_33(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
d = _basePrice.d

IRs:
REF_34(uint256) -> _basePrice.d
d(uint256) := REF_34(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(n,d)

IRs:
RETURN n,d"];
}
// Function: 1349.sol-DrupeICO-getDrupeCoin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_drupe

IRs:
RETURN _drupe"];
}
// Function: 1349.sol-DrupeICO-getMainsale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
start = _mainsale.start

IRs:
REF_47(uint256) -> _mainsale.start
start(uint256) := REF_47(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
end = _mainsale.end

IRs:
REF_48(uint256) -> _mainsale.end
end(uint256) := REF_48(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(start,end)

IRs:
RETURN start,end"];
}
// Function: 1349.sol-DrupeICO-getOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_owner

IRs:
RETURN _owner"];
}
// Function: 1349.sol-DrupeICO-getPresale1()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
start = _presale1.start

IRs:
REF_37(uint256) -> _presale1.start
start(uint256) := REF_37(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bonusN = _presale1.bonus.n

IRs:
REF_38(DrupeICO.Fraction) -> _presale1.bonus
REF_39(uint256) -> REF_38.n
bonusN(uint256) := REF_39(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
bonusD = _presale1.bonus.d

IRs:
REF_40(DrupeICO.Fraction) -> _presale1.bonus
REF_41(uint256) -> REF_40.d
bonusD(uint256) := REF_41(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(start,bonusN,bonusD)

IRs:
RETURN start,bonusN,bonusD"];
}
// Function: 1349.sol-DrupeICO-getPresale2()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
start = _presale2.start

IRs:
REF_42(uint256) -> _presale2.start
start(uint256) := REF_42(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bonusN = _presale2.bonus.n

IRs:
REF_43(DrupeICO.Fraction) -> _presale2.bonus
REF_44(uint256) -> REF_43.n
bonusN(uint256) := REF_44(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
bonusD = _presale2.bonus.d

IRs:
REF_45(DrupeICO.Fraction) -> _presale2.bonus
REF_46(uint256) -> REF_45.d
bonusD(uint256) := REF_46(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(start,bonusN,bonusD)

IRs:
RETURN start,bonusN,bonusD"];
}
// Function: 1349.sol-DrupeICO-getRefBonus()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
n = _refBonus.n

IRs:
REF_35(uint256) -> _refBonus.n
n(uint256) := REF_35(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
d = _refBonus.d

IRs:
REF_36(uint256) -> _refBonus.d
d(uint256) := REF_36(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(n,d)

IRs:
RETURN n,d"];
}
// Function: 1349.sol-DrupeICO-icoOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= _presale1.start && now < _mainsale.end)

IRs:
REF_49(uint256) -> _presale1.start
TMP_84(bool) = now >= REF_49
REF_50(uint256) -> _mainsale.end
TMP_85(bool) = now < REF_50
TMP_86(bool) = TMP_84 && TMP_85
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1349.sol-DrupeICO-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _owner)

IRs:
TMP_88(bool) = msg.sender == _owner
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1349.sol-DrupeICO-purchase(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bonus = _getBonus()

IRs:
TMP_58(DrupeICO.Fraction) = INTERNAL_CALL, DrupeICO._getBonus()()
bonus(DrupeICO.Fraction) := TMP_58(DrupeICO.Fraction)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
rawTokens = msg.value.mul(_basePrice.d).div(_basePrice.n)

IRs:
REF_16(uint256) -> _basePrice.d
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['msg.value', 'REF_16'] 
REF_18(uint256) -> _basePrice.n
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_59', 'REF_18'] 
rawTokens(uint256) := TMP_60(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokens = rawTokens + rawTokens.mul(bonus.n).div(bonus.d)

IRs:
REF_20(uint256) -> bonus.n
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['rawTokens', 'REF_20'] 
REF_22(uint256) -> bonus.d
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_61', 'REF_22'] 
TMP_63(uint256) = rawTokens + TMP_62
tokens(uint256) := TMP_63(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
refTokens = rawTokens.mul(_refBonus.n).div(_refBonus.d)

IRs:
REF_24(uint256) -> _refBonus.n
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['rawTokens', 'REF_24'] 
REF_26(uint256) -> _refBonus.d
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_64', 'REF_26'] 
refTokens(uint256) := TMP_65(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_drupe.transfer(payout,tokens)

IRs:
TMP_66(bool) = HIGH_LEVEL_CALL, dest:_drupe(DrupeCoin), function:transfer, arguments:['payout', 'tokens']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_drupe.transfer(referrer,refTokens)

IRs:
TMP_67(bool) = HIGH_LEVEL_CALL, dest:_drupe(DrupeCoin), function:transfer, arguments:['referrer', 'refTokens']  "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
refContract = new DrupeICORef(payout,this)

IRs:
TMP_69(DrupeICORef) = new DrupeICORef(payout,this) 
refContract(address) := TMP_69(DrupeICORef)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Referrer(payout,refContract)

IRs:
Emit Referrer(payout,refContract)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
icoOnly()

IRs:
MODIFIER_CALL, DrupeICO.icoOnly()()"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
tokens

IRs:
RETURN tokens"];
}
// Function: 1349.sol-DrupeICO-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_newOwner = newOwner

IRs:
_newOwner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, DrupeICO.ownerOnly()()"];
2->1;
}
// Function: 1349.sol-DrupeICO-withdrawFunds(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
msg.sender.transfer(value)

IRs:
Transfer dest:msg.sender value:value"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, DrupeICO.ownerOnly()()"];
2->1;
}
// Function: 1349.sol-DrupeICORef-constructor(address,DrupeICO)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_referrer = referrer

IRs:
_referrer(address) := referrer(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_ico = ico

IRs:
_ico(DrupeICO) := ico(DrupeICO)"];
}
// Function: 1349.sol-DrupeICORef-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_ico.purchase.value(msg.value)(msg.sender,_referrer)

IRs:
TMP_7(uint256) = HIGH_LEVEL_CALL, dest:_ico(DrupeICO), function:purchase, arguments:['msg.sender', '_referrer'] value:msg.value "];
}
// Function: 1349.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1349.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
}
