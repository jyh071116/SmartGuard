digraph G {
// Function: 1384.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_141(uint256) -> balances[_owner]
RETURN REF_141"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1384.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_633 = CONVERT 0 to address
TMP_634(bool) = _to != TMP_633
TMP_635(None) = SOLIDITY_CALL require(bool)(TMP_634)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_134(uint256) -> balances[msg.sender]
TMP_636(bool) = _value <= REF_134
TMP_637(None) = SOLIDITY_CALL require(bool)(TMP_636)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_135(uint256) -> balances[msg.sender]
REF_136(uint256) -> balances[msg.sender]
TMP_638(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_136', '_value'] 
REF_135(uint256) (->balances) := TMP_638(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_138(uint256) -> balances[_to]
REF_139(uint256) -> balances[_to]
TMP_639(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_139', '_value'] 
REF_138(uint256) (->balances) := TMP_639(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1384.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 1384.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_150(uint256) -> balances[msg.sender]
TMP_649(bool) = _value <= REF_150
TMP_650(None) = SOLIDITY_CALL require(bool)(TMP_649)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_151(uint256) -> balances[burner]
REF_152(uint256) -> balances[burner]
TMP_651(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_152', '_value'] 
REF_151(uint256) (->balances) := TMP_651(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_652(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_652(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
}
// Function: 1384.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 1384.sol-CappedCrowdsale-CappedCrowdsale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_cap > 0)

IRs:
TMP_60(bool) = _cap > 0
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cap = _cap

IRs:
cap(uint256) := _cap(uint256)"];
}
// Function: 1384.sol-CappedCrowdsale-Crowdsale(uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_30(bool) = _startTime >= now
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_32(bool) = _endTime >= _startTime
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_34(bool) = _rate > 0
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != address(0))

IRs:
TMP_36 = CONVERT 0 to address
TMP_37(bool) = _wallet != TMP_36
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
token = createTokenContract()

IRs:
TMP_39(MintableToken) = INTERNAL_CALL, Crowdsale.createTokenContract()()
token(MintableToken) := TMP_39(MintableToken)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
}
// Function: 1384.sol-CappedCrowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(beneficiary != address(0))

IRs:
TMP_43 = CONVERT 0 to address
TMP_44(bool) = beneficiary != TMP_43
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_46(bool) = INTERNAL_CALL, CappedCrowdsale.validPurchase()()
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokens = weiAmount.mul(rate)

IRs:
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'rate'] 
tokens(uint256) := TMP_48(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_49(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token.mint(beneficiary,tokens)

IRs:
TMP_50(bool) = HIGH_LEVEL_CALL, dest:token(MintableToken), function:mint, arguments:['beneficiary', 'tokens']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale.forwardFunds()()"];
}
// Function: 1384.sol-CappedCrowdsale-createTokenContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
new MintableToken()

IRs:
TMP_41(MintableToken) = new MintableToken() 
RETURN TMP_41"];
}
// Function: 1384.sol-CappedCrowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 1384.sol-CappedCrowdsale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(msg.value)

IRs:
Transfer dest:wallet value:msg.value"];
}
// Function: 1384.sol-CappedCrowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
capReached = weiRaised >= cap

IRs:
TMP_66(bool) = weiRaised >= cap
capReached(bool) := TMP_66(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.hasEnded() || capReached

IRs:
TMP_67(bool) = INTERNAL_CALL, Crowdsale.hasEnded()()
TMP_68(bool) = TMP_67 || capReached
RETURN TMP_68"];
}
// Function: 1384.sol-CappedCrowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinCap = weiRaised.add(msg.value) <= cap

IRs:
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'msg.value'] 
TMP_63(bool) = TMP_62 <= cap
withinCap(bool) := TMP_63(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.validPurchase() && withinCap

IRs:
TMP_64(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_65(bool) = TMP_64 && withinCap
RETURN TMP_65"];
}
// Function: 1384.sol-Crowdsale-Crowdsale(uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_0(bool) = _startTime >= now
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_2(bool) = _endTime >= _startTime
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_4(bool) = _rate > 0
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != address(0))

IRs:
TMP_6 = CONVERT 0 to address
TMP_7(bool) = _wallet != TMP_6
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
token = createTokenContract()

IRs:
TMP_9(MintableToken) = INTERNAL_CALL, Crowdsale.createTokenContract()()
token(MintableToken) := TMP_9(MintableToken)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
}
// Function: 1384.sol-Crowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(beneficiary != address(0))

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = beneficiary != TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_16(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokens = weiAmount.mul(rate)

IRs:
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'rate'] 
tokens(uint256) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_19(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_19(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token.mint(beneficiary,tokens)

IRs:
TMP_20(bool) = HIGH_LEVEL_CALL, dest:token(MintableToken), function:mint, arguments:['beneficiary', 'tokens']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale.forwardFunds()()"];
}
// Function: 1384.sol-Crowdsale-createTokenContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
new MintableToken()

IRs:
TMP_11(MintableToken) = new MintableToken() 
RETURN TMP_11"];
}
// Function: 1384.sol-Crowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 1384.sol-Crowdsale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(msg.value)

IRs:
Transfer dest:wallet value:msg.value"];
}
// Function: 1384.sol-Crowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endTime

IRs:
TMP_29(bool) = now > endTime
RETURN TMP_29"];
}
// Function: 1384.sol-Crowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinPeriod = now >= startTime && now <= endTime

IRs:
TMP_24(bool) = now >= startTime
TMP_25(bool) = now <= endTime
TMP_26(bool) = TMP_24 && TMP_25
withinPeriod(bool) := TMP_26(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_27(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_27(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
withinPeriod && nonZeroPurchase

IRs:
TMP_28(bool) = withinPeriod && nonZeroPurchase
RETURN TMP_28"];
}
// Function: 1384.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1384.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1384.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1384.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1384.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1384.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1384.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1384.sol-ExchangeOracle-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1384.sol-ExchangeOracle-calcWeiForTokensAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
weiAmount = tokensAmount.mul(minWeiAmount)

IRs:
TMP_622(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokensAmount', 'minWeiAmount'] 
weiAmount(uint256) := TMP_622(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
weiAmount = weiAmount.div(rate)

IRs:
TMP_623(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['weiAmount', 'rate'] 
weiAmount(uint256) := TMP_623(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
(tokensAmount % rate) != 0

IRs:
TMP_624(uint256) = tokensAmount % rate
TMP_625(bool) = TMP_624 != 0
CONDITION TMP_625"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
weiAmount ++

IRs:
TMP_626(uint256) := weiAmount(uint256)
weiAmount(uint256) = weiAmount + 1"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
weiAmount

IRs:
RETURN weiAmount"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
7->1;
}
// Function: 1384.sol-ExchangeOracle-constructor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(initialRate > 0)

IRs:
TMP_600(bool) = initialRate > 0
TMP_601(None) = SOLIDITY_CALL require(bool)(TMP_600)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rate = initialRate

IRs:
rate(uint256) := initialRate(uint256)"];
}
// Function: 1384.sol-ExchangeOracle-convertTokensAmountInWeiAtRate(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
weiAmount = tokensAmount.mul(minWeiAmount)

IRs:
TMP_616(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokensAmount', 'minWeiAmount'] 
weiAmount(uint256) := TMP_616(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
weiAmount = weiAmount.div(convertRate)

IRs:
TMP_617(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['weiAmount', 'convertRate'] 
weiAmount(uint256) := TMP_617(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
(tokensAmount % convertRate) != 0

IRs:
TMP_618(uint256) = tokensAmount % convertRate
TMP_619(bool) = TMP_618 != 0
CONDITION TMP_619"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
weiAmount ++

IRs:
TMP_620(uint256) := weiAmount(uint256)
weiAmount(uint256) = weiAmount + 1"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
weiAmount

IRs:
RETURN weiAmount"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
7->1;
}
// Function: 1384.sol-ExchangeOracle-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_631(bool) = msg.sender == owner
TMP_632(None) = SOLIDITY_CALL require(bool)(TMP_631)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ExchangeOracle-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1384.sol-ExchangeOracle-rate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
rate

IRs:
RETURN rate"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 1384.sol-ExchangeOracle-setMinWeiAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newMinWeiAmount > 0)

IRs:
TMP_608(bool) = newMinWeiAmount > 0
TMP_609(None) = SOLIDITY_CALL require(bool)(TMP_608)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(newMinWeiAmount % 10 == 0)

IRs:
TMP_610(uint256) = newMinWeiAmount % 10
TMP_611(bool) = TMP_610 == 0
TMP_612(None) = SOLIDITY_CALL require(bool)(TMP_611)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
oldMinWeiAmount = minWeiAmount

IRs:
oldMinWeiAmount(uint256) := minWeiAmount(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
minWeiAmount = newMinWeiAmount

IRs:
minWeiAmount(uint256) := newMinWeiAmount(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogMinWeiAmountChanged(oldMinWeiAmount,minWeiAmount,msg.sender)

IRs:
Emit LogMinWeiAmountChanged(oldMinWeiAmount,minWeiAmount,msg.sender)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
8->1;
}
// Function: 1384.sol-ExchangeOracle-setRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newRate > 0)

IRs:
TMP_603(bool) = newRate > 0
TMP_604(None) = SOLIDITY_CALL require(bool)(TMP_603)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
oldRate = rate

IRs:
oldRate(uint256) := rate(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rate = newRate

IRs:
rate(uint256) := newRate(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogRateChanged(oldRate,newRate,msg.sender)

IRs:
Emit LogRateChanged(oldRate,newRate,msg.sender)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
7->1;
}
// Function: 1384.sol-ExchangeOracle-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
isIrisOracle = true

IRs:
isIrisOracle(bool) := True(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rate = 0

IRs:
rate(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
minWeiAmount = 1000

IRs:
minWeiAmount(uint256) := 1000(uint256)"];
}
// Function: 1384.sol-ExchangeOracle-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_595 = CONVERT 0 to address
TMP_596(bool) = newOwner != TMP_595
TMP_597(None) = SOLIDITY_CALL require(bool)(TMP_596)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1384.sol-ExchangeOracle-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1384.sol-ExchangeOracle-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_628 = UnaryType.BANG paused 
TMP_629(None) = SOLIDITY_CALL require(bool)(TMP_628)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ExchangeOracle-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_630(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-FinalizableCrowdsale-Crowdsale(uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_163(bool) = _startTime >= now
TMP_164(None) = SOLIDITY_CALL require(bool)(TMP_163)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_165(bool) = _endTime >= _startTime
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_167(bool) = _rate > 0
TMP_168(None) = SOLIDITY_CALL require(bool)(TMP_167)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != address(0))

IRs:
TMP_169 = CONVERT 0 to address
TMP_170(bool) = _wallet != TMP_169
TMP_171(None) = SOLIDITY_CALL require(bool)(TMP_170)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
token = createTokenContract()

IRs:
TMP_172(MintableToken) = INTERNAL_CALL, Crowdsale.createTokenContract()()
token(MintableToken) := TMP_172(MintableToken)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
}
// Function: 1384.sol-FinalizableCrowdsale-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1384.sol-FinalizableCrowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(beneficiary != address(0))

IRs:
TMP_176 = CONVERT 0 to address
TMP_177(bool) = beneficiary != TMP_176
TMP_178(None) = SOLIDITY_CALL require(bool)(TMP_177)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_179(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_180(None) = SOLIDITY_CALL require(bool)(TMP_179)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokens = weiAmount.mul(rate)

IRs:
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'rate'] 
tokens(uint256) := TMP_181(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_182(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_182(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token.mint(beneficiary,tokens)

IRs:
TMP_183(bool) = HIGH_LEVEL_CALL, dest:token(MintableToken), function:mint, arguments:['beneficiary', 'tokens']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale.forwardFunds()()"];
}
// Function: 1384.sol-FinalizableCrowdsale-createTokenContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
new MintableToken()

IRs:
TMP_174(MintableToken) = new MintableToken() 
RETURN TMP_174"];
}
// Function: 1384.sol-FinalizableCrowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 1384.sol-FinalizableCrowdsale-finalization()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1384.sol-FinalizableCrowdsale-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isFinalized)

IRs:
TMP_193 = UnaryType.BANG isFinalized 
TMP_194(None) = SOLIDITY_CALL require(bool)(TMP_193)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(hasEnded())

IRs:
TMP_195(bool) = INTERNAL_CALL, Crowdsale.hasEnded()()
TMP_196(None) = SOLIDITY_CALL require(bool)(TMP_195)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
finalization()

IRs:
INTERNAL_CALL, FinalizableCrowdsale.finalization()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Finalized()

IRs:
Emit Finalized()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isFinalized = true

IRs:
isFinalized(bool) := True(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 1384.sol-FinalizableCrowdsale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(msg.value)

IRs:
Transfer dest:wallet value:msg.value"];
}
// Function: 1384.sol-FinalizableCrowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endTime

IRs:
TMP_192(bool) = now > endTime
RETURN TMP_192"];
}
// Function: 1384.sol-FinalizableCrowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_200(bool) = msg.sender == owner
TMP_201(None) = SOLIDITY_CALL require(bool)(TMP_200)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-FinalizableCrowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isFinalized = false

IRs:
isFinalized(bool) := False(bool)"];
}
// Function: 1384.sol-FinalizableCrowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_158 = CONVERT 0 to address
TMP_159(bool) = newOwner != TMP_158
TMP_160(None) = SOLIDITY_CALL require(bool)(TMP_159)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1384.sol-FinalizableCrowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinPeriod = now >= startTime && now <= endTime

IRs:
TMP_187(bool) = now >= startTime
TMP_188(bool) = now <= endTime
TMP_189(bool) = TMP_187 && TMP_188
withinPeriod(bool) := TMP_189(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_190(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_190(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
withinPeriod && nonZeroPurchase

IRs:
TMP_191(bool) = withinPeriod && nonZeroPurchase
RETURN TMP_191"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-CappedCrowdsale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_cap > 0)

IRs:
TMP_547(bool) = _cap > 0
TMP_548(None) = SOLIDITY_CALL require(bool)(TMP_547)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cap = _cap

IRs:
cap(uint256) := _cap(uint256)"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-Crowdsale(uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_430(bool) = _startTime >= now
TMP_431(None) = SOLIDITY_CALL require(bool)(TMP_430)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_432(bool) = _endTime >= _startTime
TMP_433(None) = SOLIDITY_CALL require(bool)(TMP_432)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_434(bool) = _rate > 0
TMP_435(None) = SOLIDITY_CALL require(bool)(TMP_434)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != address(0))

IRs:
TMP_436 = CONVERT 0 to address
TMP_437(bool) = _wallet != TMP_436
TMP_438(None) = SOLIDITY_CALL require(bool)(TMP_437)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
token = createTokenContract()

IRs:
TMP_439(MintableToken) = INTERNAL_CALL, ICOCrowdsale.createTokenContract()()
token(MintableToken) := TMP_439(MintableToken)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-addMultiplePublicSalesSpecialUser(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(users.length <= MAX_INPUT_USERS_COUNT)

IRs:
REF_124 -> LENGTH users
TMP_535(bool) = REF_124 <= MAX_INPUT_USERS_COUNT
TMP_536(None) = SOLIDITY_CALL require(bool)(TMP_535)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < users.length

IRs:
REF_125 -> LENGTH users
TMP_537(bool) = i < REF_125
CONDITION TMP_537"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
publicSalesSpecialUsers[users[i]] = true

IRs:
REF_126(address) -> users[i]
REF_127(bool) -> publicSalesSpecialUsers[REF_126]
REF_127(bool) (->publicSalesSpecialUsers) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_538(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LogMultiplePublicsalesSpecialUsersSet(users)

IRs:
Emit LogMultiplePublicsalesSpecialUsersSet(users)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
9->1;
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-addPublicSalesSpecialUser(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
publicSalesSpecialUsers[user] = true

IRs:
REF_123(bool) -> publicSalesSpecialUsers[user]
REF_123(bool) (->publicSalesSpecialUsers) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogPublicsalesSpecialUserAdd(user)

IRs:
Emit LogPublicsalesSpecialUserAdd(user)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notZeroAddress(user)

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.notZeroAddress(address)(user)"];
4->1;
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= MIN_CONTRIBUTION_AMOUNT)

IRs:
TMP_477(bool) = msg.value >= MIN_CONTRIBUTION_AMOUNT
TMP_478(None) = SOLIDITY_CALL require(bool)(TMP_477)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(beneficiary != address(0))

IRs:
TMP_479 = CONVERT 0 to address
TMP_480(bool) = beneficiary != TMP_479
TMP_481(None) = SOLIDITY_CALL require(bool)(TMP_480)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_482(bool) = INTERNAL_CALL, CappedCrowdsale.validPurchase()()
TMP_483(None) = SOLIDITY_CALL require(bool)(TMP_482)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
tokens = getTokenAmount(weiAmount,beneficiary)

IRs:
TMP_484(uint256) = INTERNAL_CALL, ICOCrowdsale.getTokenAmount(uint256,address)(weiAmount,beneficiary)
tokens(uint256) := TMP_484(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
beneficiaryBalance = token.balanceOf(beneficiary)

IRs:
TMP_485(uint256) = HIGH_LEVEL_CALL, dest:token(MintableToken), function:balanceOf, arguments:['beneficiary']  
beneficiaryBalance(uint256) := TMP_485(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(beneficiaryBalance.add(tokens) <= MAX_USER_TOKENS_BALANCE)

IRs:
TMP_486(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['beneficiaryBalance', 'tokens'] 
TMP_487(bool) = TMP_486 <= MAX_USER_TOKENS_BALANCE
TMP_488(None) = SOLIDITY_CALL require(bool)(TMP_487)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_489(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_489(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
weiRaised >= MAX_FUNDS_RAISED_DURING_PRESALE && isPresalesNotEndedInAdvance

IRs:
TMP_490(bool) = weiRaised >= MAX_FUNDS_RAISED_DURING_PRESALE
TMP_491(bool) = TMP_490 && isPresalesNotEndedInAdvance
CONDITION TMP_491"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
preSalesEndDate = now

IRs:
preSalesEndDate(uint256) := now(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isPresalesNotEndedInAdvance = false

IRs:
isPresalesNotEndedInAdvance(bool) := False(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
token.mint(beneficiary,tokens)

IRs:
TMP_492(bool) = HIGH_LEVEL_CALL, dest:token(MintableToken), function:mint, arguments:['beneficiary', 'tokens']  "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
userManagerContract.markUserAsFounder(beneficiary)

IRs:
HIGH_LEVEL_CALL, dest:userManagerContract(IUserManager), function:markUserAsFounder, arguments:['beneficiary']  "];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, RefundableCrowdsale.forwardFunds()()"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-claimRefund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isFinalized)

IRs:
TMP_408(None) = SOLIDITY_CALL require(bool)(isFinalized)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! goalReached())

IRs:
TMP_409(bool) = INTERNAL_CALL, RefundableCrowdsale.goalReached()()
TMP_410 = UnaryType.BANG TMP_409 
TMP_411(None) = SOLIDITY_CALL require(bool)(TMP_410)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
vault.refund(msg.sender)

IRs:
HIGH_LEVEL_CALL, dest:vault(RefundVault), function:refund, arguments:['msg.sender']  "];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-constructor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_goal > 0)

IRs:
TMP_402(bool) = _goal > 0
TMP_403(None) = SOLIDITY_CALL require(bool)(TMP_402)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vault = new RefundVault(wallet)

IRs:
TMP_405(RefundVault) = new RefundVault(wallet) 
vault(RefundVault) := TMP_405(RefundVault)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
goal = _goal

IRs:
goal(uint256) := _goal(uint256)"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-constructor(uint256,uint256,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
preSalesEndDate = startTime.add(DEFAULT_PRESALES_DURATION)

IRs:
TMP_460(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['startTime', 'DEFAULT_PRESALES_DURATION'] 
preSalesEndDate(uint256) := TMP_460(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
icoToken = ICOTokenExtended(token)

IRs:
TMP_461 = CONVERT token to ICOTokenExtended
icoToken(ICOTokenExtended) := TMP_461(ICOTokenExtended)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
icoToken.setHookOperator(hookOperatorAddress)

IRs:
HIGH_LEVEL_CALL, dest:icoToken(ICOTokenExtended), function:setHookOperator, arguments:['hookOperatorAddress']  "];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
FinalizableCrowdsale()

IRs:
INTERNAL_CALL, Ownable.Ownable()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Crowdsale(startTime,endTime,REGULAR_RATE,wallet)

IRs:
INTERNAL_CALL, Crowdsale.Crowdsale(uint256,uint256,uint256,address)(startTime,endTime,REGULAR_RATE,wallet)"];
5->1;
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-constructor(uint256,uint256,uint256,uint256,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(softCap <= hardCap)

IRs:
TMP_556(bool) = softCap <= hardCap
TMP_557(None) = SOLIDITY_CALL require(bool)(TMP_556)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FinalizableCrowdsale()

IRs:
INTERNAL_CALL, Ownable.Ownable()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ICOCrowdsale(startTime,endTime,wallet,HookOperatorContractAddress)

IRs:
INTERNAL_CALL, ICOCrowdsale.constructor(uint256,uint256,address,address)(startTime,endTime,wallet,HookOperatorContractAddress)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
CappedCrowdsale(hardCap)

IRs:
INTERNAL_CALL, CappedCrowdsale.CappedCrowdsale(uint256)(hardCap)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
RefundableCrowdsale(softCap)

IRs:
INTERNAL_CALL, RefundableCrowdsale.constructor(uint256)(softCap)"];
5->1;
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-createBountyToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! hasEnded())

IRs:
TMP_508(bool) = INTERNAL_CALL, CappedCrowdsale.hasEnded()()
TMP_509 = UnaryType.BANG TMP_508 
TMP_510(None) = SOLIDITY_CALL require(bool)(TMP_509)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(totalMintedBountyTokens.add(amount) <= MAX_BOUNTYTOKENS_AMOUNT)

IRs:
TMP_511(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalMintedBountyTokens', 'amount'] 
TMP_512(bool) = TMP_511 <= MAX_BOUNTYTOKENS_AMOUNT
TMP_513(None) = SOLIDITY_CALL require(bool)(TMP_512)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalMintedBountyTokens = totalMintedBountyTokens.add(amount)

IRs:
TMP_514(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalMintedBountyTokens', 'amount'] 
totalMintedBountyTokens(uint256) := TMP_514(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.mint(beneficiary,amount)

IRs:
TMP_515(bool) = HIGH_LEVEL_CALL, dest:token(MintableToken), function:mint, arguments:['beneficiary', 'amount']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogBountyTokenMinted(msg.sender,beneficiary,amount)

IRs:
Emit LogBountyTokenMinted(msg.sender,beneficiary,amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-createTokenContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
icoToken = new ICOTokenExtended()

IRs:
TMP_466(ICOTokenExtended) = new ICOTokenExtended() 
icoToken(ICOTokenExtended) := TMP_466(ICOTokenExtended)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
icoToken.pause()

IRs:
HIGH_LEVEL_CALL, dest:icoToken(ICOTokenExtended), function:pause, arguments:[]  "];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
icoToken

IRs:
RETURN icoToken"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-extendPreSalesPeriodWith(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(extensionTime <= MAX_PRESALES_EXTENSION)

IRs:
TMP_471(bool) = extensionTime <= MAX_PRESALES_EXTENSION
TMP_472(None) = SOLIDITY_CALL require(bool)(TMP_471)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
preSalesEndDate = preSalesEndDate.add(extensionTime)

IRs:
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['preSalesEndDate', 'extensionTime'] 
preSalesEndDate(uint256) := TMP_473(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
endTime = endTime.add(extensionTime)

IRs:
TMP_474(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['endTime', 'extensionTime'] 
endTime(uint256) := TMP_474(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogPrivatesaleExtend(extensionTime)

IRs:
Emit LogPrivatesaleExtend(extensionTime)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, ICOCrowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-finalization()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.finalization()

IRs:
INTERNAL_CALL, FinalizableCrowdsale.finalization()()"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
icoToken = ICOTokenExtended(token)

IRs:
TMP_469 = CONVERT token to ICOTokenExtended
icoToken(ICOTokenExtended) := TMP_469(ICOTokenExtended)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
icoToken.transferOwnership(owner)

IRs:
HIGH_LEVEL_CALL, dest:icoToken(ICOTokenExtended), function:transferOwnership, arguments:['owner']  "];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isFinalized)

IRs:
TMP_418 = UnaryType.BANG isFinalized 
TMP_419(None) = SOLIDITY_CALL require(bool)(TMP_418)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(hasEnded())

IRs:
TMP_420(bool) = INTERNAL_CALL, CappedCrowdsale.hasEnded()()
TMP_421(None) = SOLIDITY_CALL require(bool)(TMP_420)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
finalization()

IRs:
INTERNAL_CALL, RefundableCrowdsale.finalization()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Finalized()

IRs:
Emit Finalized()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isFinalized = true

IRs:
isFinalized(bool) := True(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(msg.value)

IRs:
Transfer dest:wallet value:msg.value"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-getRate(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
now <= preSalesEndDate && weiRaised < MAX_FUNDS_RAISED_DURING_PRESALE

IRs:
TMP_498(bool) = now <= preSalesEndDate
TMP_499(bool) = weiRaised < MAX_FUNDS_RAISED_DURING_PRESALE
TMP_500(bool) = TMP_498 && TMP_499
CONDITION TMP_500"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
preSalesSpecialUsers[beneficiary] > 0

IRs:
REF_109(uint256) -> preSalesSpecialUsers[beneficiary]
TMP_501(bool) = REF_109 > 0
CONDITION TMP_501"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
preSalesSpecialUsers[beneficiary]

IRs:
REF_110(uint256) -> preSalesSpecialUsers[beneficiary]
RETURN REF_110"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
REGULAR_RATE

IRs:
RETURN REGULAR_RATE"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
publicSalesSpecialUsers[beneficiary]

IRs:
REF_111(bool) -> publicSalesSpecialUsers[beneficiary]
CONDITION REF_111"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
PUBLIC_SALES_SPECIAL_USERS_RATE

IRs:
RETURN PUBLIC_SALES_SPECIAL_USERS_RATE"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
now <= preSalesEndDate.add(PUBLIC_SALES_1_PERIOD_END)

IRs:
TMP_502(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['preSalesEndDate', 'PUBLIC_SALES_1_PERIOD_END'] 
TMP_503(bool) = now <= TMP_502
CONDITION TMP_503"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
PUBLIC_SALES_1_RATE

IRs:
RETURN PUBLIC_SALES_1_RATE"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
now <= preSalesEndDate.add(PUBLIC_SALES_2_PERIOD_END)

IRs:
TMP_504(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['preSalesEndDate', 'PUBLIC_SALES_2_PERIOD_END'] 
TMP_505(bool) = now <= TMP_504
CONDITION TMP_505"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
PUBLIC_SALES_2_RATE

IRs:
RETURN PUBLIC_SALES_2_RATE"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
now <= preSalesEndDate.add(PUBLIC_SALES_3_PERIOD_END)

IRs:
TMP_506(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['preSalesEndDate', 'PUBLIC_SALES_3_PERIOD_END'] 
TMP_507(bool) = now <= TMP_506
CONDITION TMP_507"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: RETURN 17

EXPRESSION:
PUBLIC_SALES_3_RATE

IRs:
RETURN PUBLIC_SALES_3_RATE"];
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
REGULAR_RATE

IRs:
RETURN REGULAR_RATE"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-getTokenAmount(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
crowdsaleRate = getRate(beneficiaryAddress)

IRs:
TMP_496(uint256) = INTERNAL_CALL, ICOCrowdsale.getRate(address)(beneficiaryAddress)
crowdsaleRate(uint256) := TMP_496(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
weiAmount.mul(crowdsaleRate)

IRs:
TMP_497(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'crowdsaleRate'] 
RETURN TMP_497"];
3[label="Node Type: RETURN 3

EXPRESSION:
tokenAmount

IRs:
RETURN tokenAmount"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-goalReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
weiRaised >= goal

IRs:
TMP_417(bool) = weiRaised >= goal
RETURN TMP_417"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
capReached = weiRaised >= cap

IRs:
TMP_553(bool) = weiRaised >= cap
capReached(bool) := TMP_553(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.hasEnded() || capReached

IRs:
TMP_554(bool) = INTERNAL_CALL, Crowdsale.hasEnded()()
TMP_555(bool) = TMP_554 || capReached
RETURN TMP_555"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-notZeroAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addressForValidation != address(0))

IRs:
TMP_570 = CONVERT 0 to address
TMP_571(bool) = addressForValidation != TMP_570
TMP_572(None) = SOLIDITY_CALL require(bool)(TMP_571)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-onlyLister()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == lister)

IRs:
TMP_568(bool) = msg.sender == lister
TMP_569(None) = SOLIDITY_CALL require(bool)(TMP_568)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_566(bool) = msg.sender == owner
TMP_567(None) = SOLIDITY_CALL require(bool)(TMP_566)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-removePublicSalesSpecialUser(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
publicSalesSpecialUsers[user] = false

IRs:
REF_128(bool) -> publicSalesSpecialUsers[user]
REF_128(bool) (->publicSalesSpecialUsers) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogPublicsalesSpecialUserRemove(user)

IRs:
Emit LogPublicsalesSpecialUserRemove(user)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notZeroAddress(user)

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.notZeroAddress(address)(user)"];
4->1;
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-setLister(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lister = newLister

IRs:
lister(address) := newLister(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogListerSet(newLister)

IRs:
Emit LogListerSet(newLister)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notZeroAddress(newLister)

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.notZeroAddress(address)(newLister)"];
4->1;
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-setMultiplePreSalesSpecialUsers(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(users.length <= MAX_INPUT_USERS_COUNT)

IRs:
REF_119 -> LENGTH users
TMP_526(bool) = REF_119 <= MAX_INPUT_USERS_COUNT
TMP_527(None) = SOLIDITY_CALL require(bool)(TMP_526)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < users.length

IRs:
REF_120 -> LENGTH users
TMP_528(bool) = i < REF_120
CONDITION TMP_528"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
preSalesSpecialUsers[users[i]] = userRate

IRs:
REF_121(address) -> users[i]
REF_122(uint256) -> preSalesSpecialUsers[REF_121]
REF_122(uint256) (->preSalesSpecialUsers) := userRate(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_529(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LogMultiplePresalesSpecialUsersSet(users,userRate)

IRs:
Emit LogMultiplePresalesSpecialUsersSet(users,userRate)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
9->1;
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-setPreSalesSpecialUser(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
preSalesSpecialUsers[user] = userRate

IRs:
REF_118(uint256) -> preSalesSpecialUsers[user]
REF_118(uint256) (->preSalesSpecialUsers) := userRate(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogPresalesSpecialUserSet(user,userRate)

IRs:
Emit LogPresalesSpecialUserSet(user,userRate)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notZeroAddress(user)

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.notZeroAddress(address)(user)"];
4->1;
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-setUserManagerContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(userManagerInstance != address(0))

IRs:
TMP_518 = CONVERT 0 to address
TMP_519(bool) = userManagerInstance != TMP_518
TMP_520(None) = SOLIDITY_CALL require(bool)(TMP_519)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
userManagerContract = IUserManager(userManagerInstance)

IRs:
TMP_521 = CONVERT userManagerInstance to IUserManager
userManagerContract(IUserManager) := TMP_521(IUserManager)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_INPUT_USERS_COUNT = 200

IRs:
MAX_INPUT_USERS_COUNT(uint256) := 200(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
MIN_CONTRIBUTION_AMOUNT = 50000000000000000

IRs:
MIN_CONTRIBUTION_AMOUNT(uint256) := 50000000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
MAX_BOUNTYTOKENS_AMOUNT = 100000 * (10 ** 18)

IRs:
TMP_562(uint256) = 10 ** 18
TMP_563(uint256) = 100000 * TMP_562
MAX_BOUNTYTOKENS_AMOUNT(uint256) := TMP_563(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
MAX_FUNDS_RAISED_DURING_PRESALE = 20000000000000000000000

IRs:
MAX_FUNDS_RAISED_DURING_PRESALE(uint256) := 20000000000000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MAX_USER_TOKENS_BALANCE = 400000 * (10 ** 18)

IRs:
TMP_564(uint256) = 10 ** 18
TMP_565(uint256) = 400000 * TMP_564
MAX_USER_TOKENS_BALANCE(uint256) := TMP_565(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
REGULAR_RATE = 100

IRs:
REGULAR_RATE(uint256) := 100(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
PUBLIC_SALES_SPECIAL_USERS_RATE = 120

IRs:
PUBLIC_SALES_SPECIAL_USERS_RATE(uint256) := 120(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
DEFAULT_PRESALES_DURATION = 4233600

IRs:
DEFAULT_PRESALES_DURATION(uint256) := 4233600(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
MAX_PRESALES_EXTENSION = 7257600

IRs:
MAX_PRESALES_EXTENSION(uint256) := 7257600(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
PUBLIC_SALES_1_PERIOD_END = 604800

IRs:
PUBLIC_SALES_1_PERIOD_END(uint256) := 604800(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
PUBLIC_SALES_2_PERIOD_END = 1209600

IRs:
PUBLIC_SALES_2_PERIOD_END(uint256) := 1209600(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
PUBLIC_SALES_3_PERIOD_END = 1814400

IRs:
PUBLIC_SALES_3_PERIOD_END(uint256) := 1814400(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
PUBLIC_SALES_1_RATE = 115

IRs:
PUBLIC_SALES_1_RATE(uint256) := 115(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
PUBLIC_SALES_2_RATE = 110

IRs:
PUBLIC_SALES_2_RATE(uint256) := 110(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
PUBLIC_SALES_3_RATE = 105

IRs:
PUBLIC_SALES_3_RATE(uint256) := 105(uint256)"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isFinalized = false

IRs:
isFinalized(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
isPresalesNotEndedInAdvance = true

IRs:
isPresalesNotEndedInAdvance(bool) := True(bool)"];
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_425 = CONVERT 0 to address
TMP_426(bool) = newOwner != TMP_425
TMP_427(None) = SOLIDITY_CALL require(bool)(TMP_426)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1384.sol-ICOCappedRefundableCrowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinCap = weiRaised.add(msg.value) <= cap

IRs:
TMP_549(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'msg.value'] 
TMP_550(bool) = TMP_549 <= cap
withinCap(bool) := TMP_550(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.validPurchase() && withinCap

IRs:
TMP_551(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_552(bool) = TMP_551 && withinCap
RETURN TMP_552"];
}
// Function: 1384.sol-ICOCrowdsale-Crowdsale(uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_298(bool) = _startTime >= now
TMP_299(None) = SOLIDITY_CALL require(bool)(TMP_298)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_300(bool) = _endTime >= _startTime
TMP_301(None) = SOLIDITY_CALL require(bool)(TMP_300)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_302(bool) = _rate > 0
TMP_303(None) = SOLIDITY_CALL require(bool)(TMP_302)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != address(0))

IRs:
TMP_304 = CONVERT 0 to address
TMP_305(bool) = _wallet != TMP_304
TMP_306(None) = SOLIDITY_CALL require(bool)(TMP_305)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
token = createTokenContract()

IRs:
TMP_307(MintableToken) = INTERNAL_CALL, ICOCrowdsale.createTokenContract()()
token(MintableToken) := TMP_307(MintableToken)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
}
// Function: 1384.sol-ICOCrowdsale-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1384.sol-ICOCrowdsale-addMultiplePublicSalesSpecialUser(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(users.length <= MAX_INPUT_USERS_COUNT)

IRs:
REF_58 -> LENGTH users
TMP_274(bool) = REF_58 <= MAX_INPUT_USERS_COUNT
TMP_275(None) = SOLIDITY_CALL require(bool)(TMP_274)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < users.length

IRs:
REF_59 -> LENGTH users
TMP_276(bool) = i < REF_59
CONDITION TMP_276"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
publicSalesSpecialUsers[users[i]] = true

IRs:
REF_60(address) -> users[i]
REF_61(bool) -> publicSalesSpecialUsers[REF_60]
REF_61(bool) (->publicSalesSpecialUsers) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_277(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LogMultiplePublicsalesSpecialUsersSet(users)

IRs:
Emit LogMultiplePublicsalesSpecialUsersSet(users)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
9->1;
}
// Function: 1384.sol-ICOCrowdsale-addPublicSalesSpecialUser(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
publicSalesSpecialUsers[user] = true

IRs:
REF_57(bool) -> publicSalesSpecialUsers[user]
REF_57(bool) (->publicSalesSpecialUsers) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogPublicsalesSpecialUserAdd(user)

IRs:
Emit LogPublicsalesSpecialUserAdd(user)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notZeroAddress(user)

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.notZeroAddress(address)(user)"];
4->1;
}
// Function: 1384.sol-ICOCrowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= MIN_CONTRIBUTION_AMOUNT)

IRs:
TMP_345(bool) = msg.value >= MIN_CONTRIBUTION_AMOUNT
TMP_346(None) = SOLIDITY_CALL require(bool)(TMP_345)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(beneficiary != address(0))

IRs:
TMP_347 = CONVERT 0 to address
TMP_348(bool) = beneficiary != TMP_347
TMP_349(None) = SOLIDITY_CALL require(bool)(TMP_348)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_350(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_351(None) = SOLIDITY_CALL require(bool)(TMP_350)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
tokens = getTokenAmount(weiAmount,beneficiary)

IRs:
TMP_352(uint256) = INTERNAL_CALL, ICOCrowdsale.getTokenAmount(uint256,address)(weiAmount,beneficiary)
tokens(uint256) := TMP_352(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
beneficiaryBalance = token.balanceOf(beneficiary)

IRs:
TMP_353(uint256) = HIGH_LEVEL_CALL, dest:token(MintableToken), function:balanceOf, arguments:['beneficiary']  
beneficiaryBalance(uint256) := TMP_353(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(beneficiaryBalance.add(tokens) <= MAX_USER_TOKENS_BALANCE)

IRs:
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['beneficiaryBalance', 'tokens'] 
TMP_355(bool) = TMP_354 <= MAX_USER_TOKENS_BALANCE
TMP_356(None) = SOLIDITY_CALL require(bool)(TMP_355)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_357(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
weiRaised >= MAX_FUNDS_RAISED_DURING_PRESALE && isPresalesNotEndedInAdvance

IRs:
TMP_358(bool) = weiRaised >= MAX_FUNDS_RAISED_DURING_PRESALE
TMP_359(bool) = TMP_358 && isPresalesNotEndedInAdvance
CONDITION TMP_359"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
preSalesEndDate = now

IRs:
preSalesEndDate(uint256) := now(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isPresalesNotEndedInAdvance = false

IRs:
isPresalesNotEndedInAdvance(bool) := False(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
token.mint(beneficiary,tokens)

IRs:
TMP_360(bool) = HIGH_LEVEL_CALL, dest:token(MintableToken), function:mint, arguments:['beneficiary', 'tokens']  "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
userManagerContract.markUserAsFounder(beneficiary)

IRs:
HIGH_LEVEL_CALL, dest:userManagerContract(IUserManager), function:markUserAsFounder, arguments:['beneficiary']  "];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale.forwardFunds()()"];
}
// Function: 1384.sol-ICOCrowdsale-constructor(uint256,uint256,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
preSalesEndDate = startTime.add(DEFAULT_PRESALES_DURATION)

IRs:
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['startTime', 'DEFAULT_PRESALES_DURATION'] 
preSalesEndDate(uint256) := TMP_328(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
icoToken = ICOTokenExtended(token)

IRs:
TMP_329 = CONVERT token to ICOTokenExtended
icoToken(ICOTokenExtended) := TMP_329(ICOTokenExtended)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
icoToken.setHookOperator(hookOperatorAddress)

IRs:
HIGH_LEVEL_CALL, dest:icoToken(ICOTokenExtended), function:setHookOperator, arguments:['hookOperatorAddress']  "];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
FinalizableCrowdsale()

IRs:
INTERNAL_CALL, Ownable.Ownable()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Crowdsale(startTime,endTime,REGULAR_RATE,wallet)

IRs:
INTERNAL_CALL, Crowdsale.Crowdsale(uint256,uint256,uint256,address)(startTime,endTime,REGULAR_RATE,wallet)"];
5->1;
}
// Function: 1384.sol-ICOCrowdsale-createBountyToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! hasEnded())

IRs:
TMP_376(bool) = INTERNAL_CALL, Crowdsale.hasEnded()()
TMP_377 = UnaryType.BANG TMP_376 
TMP_378(None) = SOLIDITY_CALL require(bool)(TMP_377)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(totalMintedBountyTokens.add(amount) <= MAX_BOUNTYTOKENS_AMOUNT)

IRs:
TMP_379(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalMintedBountyTokens', 'amount'] 
TMP_380(bool) = TMP_379 <= MAX_BOUNTYTOKENS_AMOUNT
TMP_381(None) = SOLIDITY_CALL require(bool)(TMP_380)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalMintedBountyTokens = totalMintedBountyTokens.add(amount)

IRs:
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalMintedBountyTokens', 'amount'] 
totalMintedBountyTokens(uint256) := TMP_382(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.mint(beneficiary,amount)

IRs:
TMP_383(bool) = HIGH_LEVEL_CALL, dest:token(MintableToken), function:mint, arguments:['beneficiary', 'amount']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogBountyTokenMinted(msg.sender,beneficiary,amount)

IRs:
Emit LogBountyTokenMinted(msg.sender,beneficiary,amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 1384.sol-ICOCrowdsale-createTokenContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
icoToken = new ICOTokenExtended()

IRs:
TMP_334(ICOTokenExtended) = new ICOTokenExtended() 
icoToken(ICOTokenExtended) := TMP_334(ICOTokenExtended)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
icoToken.pause()

IRs:
HIGH_LEVEL_CALL, dest:icoToken(ICOTokenExtended), function:pause, arguments:[]  "];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
icoToken

IRs:
RETURN icoToken"];
}
// Function: 1384.sol-ICOCrowdsale-extendPreSalesPeriodWith(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(extensionTime <= MAX_PRESALES_EXTENSION)

IRs:
TMP_339(bool) = extensionTime <= MAX_PRESALES_EXTENSION
TMP_340(None) = SOLIDITY_CALL require(bool)(TMP_339)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
preSalesEndDate = preSalesEndDate.add(extensionTime)

IRs:
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['preSalesEndDate', 'extensionTime'] 
preSalesEndDate(uint256) := TMP_341(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
endTime = endTime.add(extensionTime)

IRs:
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['endTime', 'extensionTime'] 
endTime(uint256) := TMP_342(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogPrivatesaleExtend(extensionTime)

IRs:
Emit LogPrivatesaleExtend(extensionTime)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 1384.sol-ICOCrowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, ICOCrowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 1384.sol-ICOCrowdsale-finalization()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.finalization()

IRs:
INTERNAL_CALL, FinalizableCrowdsale.finalization()()"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
icoToken = ICOTokenExtended(token)

IRs:
TMP_337 = CONVERT token to ICOTokenExtended
icoToken(ICOTokenExtended) := TMP_337(ICOTokenExtended)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
icoToken.transferOwnership(owner)

IRs:
HIGH_LEVEL_CALL, dest:icoToken(ICOTokenExtended), function:transferOwnership, arguments:['owner']  "];
}
// Function: 1384.sol-ICOCrowdsale-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isFinalized)

IRs:
TMP_291 = UnaryType.BANG isFinalized 
TMP_292(None) = SOLIDITY_CALL require(bool)(TMP_291)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(hasEnded())

IRs:
TMP_293(bool) = INTERNAL_CALL, Crowdsale.hasEnded()()
TMP_294(None) = SOLIDITY_CALL require(bool)(TMP_293)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
finalization()

IRs:
INTERNAL_CALL, ICOCrowdsale.finalization()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Finalized()

IRs:
Emit Finalized()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isFinalized = true

IRs:
isFinalized(bool) := True(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 1384.sol-ICOCrowdsale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(msg.value)

IRs:
Transfer dest:wallet value:msg.value"];
}
// Function: 1384.sol-ICOCrowdsale-getRate(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
now <= preSalesEndDate && weiRaised < MAX_FUNDS_RAISED_DURING_PRESALE

IRs:
TMP_366(bool) = now <= preSalesEndDate
TMP_367(bool) = weiRaised < MAX_FUNDS_RAISED_DURING_PRESALE
TMP_368(bool) = TMP_366 && TMP_367
CONDITION TMP_368"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
preSalesSpecialUsers[beneficiary] > 0

IRs:
REF_79(uint256) -> preSalesSpecialUsers[beneficiary]
TMP_369(bool) = REF_79 > 0
CONDITION TMP_369"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
preSalesSpecialUsers[beneficiary]

IRs:
REF_80(uint256) -> preSalesSpecialUsers[beneficiary]
RETURN REF_80"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
REGULAR_RATE

IRs:
RETURN REGULAR_RATE"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
publicSalesSpecialUsers[beneficiary]

IRs:
REF_81(bool) -> publicSalesSpecialUsers[beneficiary]
CONDITION REF_81"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
PUBLIC_SALES_SPECIAL_USERS_RATE

IRs:
RETURN PUBLIC_SALES_SPECIAL_USERS_RATE"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
now <= preSalesEndDate.add(PUBLIC_SALES_1_PERIOD_END)

IRs:
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['preSalesEndDate', 'PUBLIC_SALES_1_PERIOD_END'] 
TMP_371(bool) = now <= TMP_370
CONDITION TMP_371"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
PUBLIC_SALES_1_RATE

IRs:
RETURN PUBLIC_SALES_1_RATE"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
now <= preSalesEndDate.add(PUBLIC_SALES_2_PERIOD_END)

IRs:
TMP_372(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['preSalesEndDate', 'PUBLIC_SALES_2_PERIOD_END'] 
TMP_373(bool) = now <= TMP_372
CONDITION TMP_373"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
PUBLIC_SALES_2_RATE

IRs:
RETURN PUBLIC_SALES_2_RATE"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
now <= preSalesEndDate.add(PUBLIC_SALES_3_PERIOD_END)

IRs:
TMP_374(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['preSalesEndDate', 'PUBLIC_SALES_3_PERIOD_END'] 
TMP_375(bool) = now <= TMP_374
CONDITION TMP_375"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: RETURN 17

EXPRESSION:
PUBLIC_SALES_3_RATE

IRs:
RETURN PUBLIC_SALES_3_RATE"];
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
REGULAR_RATE

IRs:
RETURN REGULAR_RATE"];
}
// Function: 1384.sol-ICOCrowdsale-getTokenAmount(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
crowdsaleRate = getRate(beneficiaryAddress)

IRs:
TMP_364(uint256) = INTERNAL_CALL, ICOCrowdsale.getRate(address)(beneficiaryAddress)
crowdsaleRate(uint256) := TMP_364(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
weiAmount.mul(crowdsaleRate)

IRs:
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'crowdsaleRate'] 
RETURN TMP_365"];
3[label="Node Type: RETURN 3

EXPRESSION:
tokenAmount

IRs:
RETURN tokenAmount"];
}
// Function: 1384.sol-ICOCrowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endTime

IRs:
TMP_327(bool) = now > endTime
RETURN TMP_327"];
}
// Function: 1384.sol-ICOCrowdsale-notZeroAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addressForValidation != address(0))

IRs:
TMP_397 = CONVERT 0 to address
TMP_398(bool) = addressForValidation != TMP_397
TMP_399(None) = SOLIDITY_CALL require(bool)(TMP_398)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOCrowdsale-onlyLister()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == lister)

IRs:
TMP_395(bool) = msg.sender == lister
TMP_396(None) = SOLIDITY_CALL require(bool)(TMP_395)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOCrowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_400(bool) = msg.sender == owner
TMP_401(None) = SOLIDITY_CALL require(bool)(TMP_400)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOCrowdsale-removePublicSalesSpecialUser(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
publicSalesSpecialUsers[user] = false

IRs:
REF_62(bool) -> publicSalesSpecialUsers[user]
REF_62(bool) (->publicSalesSpecialUsers) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogPublicsalesSpecialUserRemove(user)

IRs:
Emit LogPublicsalesSpecialUserRemove(user)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notZeroAddress(user)

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.notZeroAddress(address)(user)"];
4->1;
}
// Function: 1384.sol-ICOCrowdsale-setLister(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lister = newLister

IRs:
lister(address) := newLister(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogListerSet(newLister)

IRs:
Emit LogListerSet(newLister)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notZeroAddress(newLister)

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.notZeroAddress(address)(newLister)"];
4->1;
}
// Function: 1384.sol-ICOCrowdsale-setMultiplePreSalesSpecialUsers(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(users.length <= MAX_INPUT_USERS_COUNT)

IRs:
REF_53 -> LENGTH users
TMP_265(bool) = REF_53 <= MAX_INPUT_USERS_COUNT
TMP_266(None) = SOLIDITY_CALL require(bool)(TMP_265)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < users.length

IRs:
REF_54 -> LENGTH users
TMP_267(bool) = i < REF_54
CONDITION TMP_267"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
preSalesSpecialUsers[users[i]] = userRate

IRs:
REF_55(address) -> users[i]
REF_56(uint256) -> preSalesSpecialUsers[REF_55]
REF_56(uint256) (->preSalesSpecialUsers) := userRate(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_268(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LogMultiplePresalesSpecialUsersSet(users,userRate)

IRs:
Emit LogMultiplePresalesSpecialUsersSet(users,userRate)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
9->1;
}
// Function: 1384.sol-ICOCrowdsale-setPreSalesSpecialUser(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
preSalesSpecialUsers[user] = userRate

IRs:
REF_52(uint256) -> preSalesSpecialUsers[user]
REF_52(uint256) (->preSalesSpecialUsers) := userRate(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogPresalesSpecialUserSet(user,userRate)

IRs:
Emit LogPresalesSpecialUserSet(user,userRate)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notZeroAddress(user)

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.notZeroAddress(address)(user)"];
4->1;
}
// Function: 1384.sol-ICOCrowdsale-setUserManagerContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(userManagerInstance != address(0))

IRs:
TMP_386 = CONVERT 0 to address
TMP_387(bool) = userManagerInstance != TMP_386
TMP_388(None) = SOLIDITY_CALL require(bool)(TMP_387)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
userManagerContract = IUserManager(userManagerInstance)

IRs:
TMP_389 = CONVERT userManagerInstance to IUserManager
userManagerContract(IUserManager) := TMP_389(IUserManager)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1384.sol-ICOCrowdsale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_INPUT_USERS_COUNT = 200

IRs:
MAX_INPUT_USERS_COUNT(uint256) := 200(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
MIN_CONTRIBUTION_AMOUNT = 50000000000000000

IRs:
MIN_CONTRIBUTION_AMOUNT(uint256) := 50000000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
MAX_BOUNTYTOKENS_AMOUNT = 100000 * (10 ** 18)

IRs:
TMP_391(uint256) = 10 ** 18
TMP_392(uint256) = 100000 * TMP_391
MAX_BOUNTYTOKENS_AMOUNT(uint256) := TMP_392(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
MAX_FUNDS_RAISED_DURING_PRESALE = 20000000000000000000000

IRs:
MAX_FUNDS_RAISED_DURING_PRESALE(uint256) := 20000000000000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MAX_USER_TOKENS_BALANCE = 400000 * (10 ** 18)

IRs:
TMP_393(uint256) = 10 ** 18
TMP_394(uint256) = 400000 * TMP_393
MAX_USER_TOKENS_BALANCE(uint256) := TMP_394(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
REGULAR_RATE = 100

IRs:
REGULAR_RATE(uint256) := 100(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
PUBLIC_SALES_SPECIAL_USERS_RATE = 120

IRs:
PUBLIC_SALES_SPECIAL_USERS_RATE(uint256) := 120(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
DEFAULT_PRESALES_DURATION = 4233600

IRs:
DEFAULT_PRESALES_DURATION(uint256) := 4233600(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
MAX_PRESALES_EXTENSION = 7257600

IRs:
MAX_PRESALES_EXTENSION(uint256) := 7257600(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
PUBLIC_SALES_1_PERIOD_END = 604800

IRs:
PUBLIC_SALES_1_PERIOD_END(uint256) := 604800(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
PUBLIC_SALES_2_PERIOD_END = 1209600

IRs:
PUBLIC_SALES_2_PERIOD_END(uint256) := 1209600(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
PUBLIC_SALES_3_PERIOD_END = 1814400

IRs:
PUBLIC_SALES_3_PERIOD_END(uint256) := 1814400(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
PUBLIC_SALES_1_RATE = 115

IRs:
PUBLIC_SALES_1_RATE(uint256) := 115(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
PUBLIC_SALES_2_RATE = 110

IRs:
PUBLIC_SALES_2_RATE(uint256) := 110(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
PUBLIC_SALES_3_RATE = 105

IRs:
PUBLIC_SALES_3_RATE(uint256) := 105(uint256)"];
}
// Function: 1384.sol-ICOCrowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isFinalized = false

IRs:
isFinalized(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
isPresalesNotEndedInAdvance = true

IRs:
isPresalesNotEndedInAdvance(bool) := True(bool)"];
}
// Function: 1384.sol-ICOCrowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_286 = CONVERT 0 to address
TMP_287(bool) = newOwner != TMP_286
TMP_288(None) = SOLIDITY_CALL require(bool)(TMP_287)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1384.sol-ICOCrowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinPeriod = now >= startTime && now <= endTime

IRs:
TMP_322(bool) = now >= startTime
TMP_323(bool) = now <= endTime
TMP_324(bool) = TMP_322 && TMP_323
withinPeriod(bool) := TMP_324(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_325(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_325(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
withinPeriod && nonZeroPurchase

IRs:
TMP_326(bool) = withinPeriod && nonZeroPurchase
RETURN TMP_326"];
}
// Function: 1384.sol-ICOToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1384.sol-ICOToken-allowance(address,address)
digraph{
}
// Function: 1384.sol-ICOToken-approve(address,uint256)
digraph{
}
// Function: 1384.sol-ICOToken-balanceOf(address)
digraph{
}
// Function: 1384.sol-ICOToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_331(uint256) -> balances[msg.sender]
TMP_830(bool) = _value <= REF_331
TMP_831(None) = SOLIDITY_CALL require(bool)(TMP_830)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_332(uint256) -> balances[burner]
REF_333(uint256) -> balances[burner]
TMP_832(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_333', '_value'] 
REF_332(uint256) (->balances) := TMP_832(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_833(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_833(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
}
// Function: 1384.sol-ICOToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_840 = UnaryType.BANG mintingFinished 
TMP_841(None) = SOLIDITY_CALL require(bool)(TMP_840)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_310(mapping(address => uint256)) -> allowed[msg.sender]
REF_311(uint256) -> REF_310[_spender]
oldValue(uint256) := REF_311(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_809(bool) = _subtractedValue > oldValue
CONDITION TMP_809"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_312(mapping(address => uint256)) -> allowed[msg.sender]
REF_313(uint256) -> REF_312[_spender]
REF_313(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_314(mapping(address => uint256)) -> allowed[msg.sender]
REF_315(uint256) -> REF_314[_spender]
TMP_810(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_315(uint256) (->allowed) := TMP_810(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_317(mapping(address => uint256)) -> allowed[msg.sender]
REF_318(uint256) -> REF_317[_spender]
Emit Approval(msg.sender,_spender,REF_318)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1384.sol-ICOToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 1384.sol-ICOToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_303(mapping(address => uint256)) -> allowed[msg.sender]
REF_304(uint256) -> REF_303[_spender]
REF_305(mapping(address => uint256)) -> allowed[msg.sender]
REF_306(uint256) -> REF_305[_spender]
TMP_807(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_306', '_addedValue'] 
REF_304(uint256) (->allowed) := TMP_807(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_308(mapping(address => uint256)) -> allowed[msg.sender]
REF_309(uint256) -> REF_308[_spender]
Emit Approval(msg.sender,_spender,REF_309)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1384.sol-ICOToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_820(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_820(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_328(uint256) -> balances[_to]
REF_329(uint256) -> balances[_to]
TMP_821(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_329', '_amount'] 
REF_328(uint256) (->balances) := TMP_821(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_823 = CONVERT 0 to address
Emit Transfer(TMP_823,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 1384.sol-ICOToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_838(bool) = msg.sender == owner
TMP_839(None) = SOLIDITY_CALL require(bool)(TMP_838)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1384.sol-ICOToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = AIUR Token

IRs:
name(string) := AIUR Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = AIUR

IRs:
symbol(string) := AIUR(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 1384.sol-ICOToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1384.sol-ICOToken-transfer(address,uint256)
digraph{
}
// Function: 1384.sol-ICOToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1384.sol-ICOToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_790 = CONVERT 0 to address
TMP_791(bool) = newOwner != TMP_790
TMP_792(None) = SOLIDITY_CALL require(bool)(TMP_791)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1384.sol-ICOToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1384.sol-ICOToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_835 = UnaryType.BANG paused 
TMP_836(None) = SOLIDITY_CALL require(bool)(TMP_835)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_837(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOTokenExtended-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1384.sol-ICOTokenExtended-addMinter(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minters[minterAddress] = true

IRs:
REF_388(bool) -> minters[minterAddress]
REF_388(bool) (->minters) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogMinterAdd(minterAddress)

IRs:
Emit LogMinterAdd(minterAddress)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nonZeroAddress(minterAddress)

IRs:
MODIFIER_CALL, ICOTokenExtended.nonZeroAddress(address)(minterAddress)"];
4->1;
}
// Function: 1384.sol-ICOTokenExtended-allowance(address,address)
digraph{
}
// Function: 1384.sol-ICOTokenExtended-approve(address,uint256)
digraph{
}
// Function: 1384.sol-ICOTokenExtended-balanceOf(address)
digraph{
}
// Function: 1384.sol-ICOTokenExtended-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
hookOperator.onBurn(tokensAmount)

IRs:
HIGH_LEVEL_CALL, dest:hookOperator(IHookOperator), function:onBurn, arguments:['tokensAmount']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
super.burn(tokensAmount)

IRs:
INTERNAL_CALL, BurnableToken.burn(uint256)(tokensAmount)"];
}
// Function: 1384.sol-ICOTokenExtended-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_977 = UnaryType.BANG mintingFinished 
TMP_978(None) = SOLIDITY_CALL require(bool)(TMP_977)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOTokenExtended-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minters[msg.sender] = true

IRs:
REF_387(bool) -> minters[msg.sender]
REF_387(bool) (->minters) := True(bool)"];
}
// Function: 1384.sol-ICOTokenExtended-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_361(mapping(address => uint256)) -> allowed[msg.sender]
REF_362(uint256) -> REF_361[_spender]
oldValue(uint256) := REF_362(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_877(bool) = _subtractedValue > oldValue
CONDITION TMP_877"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_363(mapping(address => uint256)) -> allowed[msg.sender]
REF_364(uint256) -> REF_363[_spender]
REF_364(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_365(mapping(address => uint256)) -> allowed[msg.sender]
REF_366(uint256) -> REF_365[_spender]
TMP_878(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_366(uint256) (->allowed) := TMP_878(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_368(mapping(address => uint256)) -> allowed[msg.sender]
REF_369(uint256) -> REF_368[_spender]
Emit Approval(msg.sender,_spender,REF_369)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1384.sol-ICOTokenExtended-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 1384.sol-ICOTokenExtended-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_354(mapping(address => uint256)) -> allowed[msg.sender]
REF_355(uint256) -> REF_354[_spender]
REF_356(mapping(address => uint256)) -> allowed[msg.sender]
REF_357(uint256) -> REF_356[_spender]
TMP_875(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_357', '_addedValue'] 
REF_355(uint256) (->allowed) := TMP_875(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_359(mapping(address => uint256)) -> allowed[msg.sender]
REF_360(uint256) -> REF_359[_spender]
Emit Approval(msg.sender,_spender,REF_360)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1384.sol-ICOTokenExtended-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
hookOperator.onMint(to,tokensAmount)

IRs:
HIGH_LEVEL_CALL, dest:hookOperator(IHookOperator), function:onMint, arguments:['to', 'tokensAmount']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = totalSupply.add(tokensAmount)

IRs:
TMP_919(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', 'tokensAmount'] 
totalSupply(uint256) := TMP_919(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = balances[to].add(tokensAmount)

IRs:
REF_392(uint256) -> balances[to]
REF_393(uint256) -> balances[to]
TMP_920(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_393', 'tokensAmount'] 
REF_392(uint256) (->balances) := TMP_920(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Mint(to,tokensAmount)

IRs:
Emit Mint(to,tokensAmount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),to,tokensAmount)

IRs:
TMP_922 = CONVERT 0 to address
Emit Transfer(TMP_922,to,tokensAmount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyMinter()

IRs:
MODIFIER_CALL, ICOTokenExtended.onlyMinter()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
nonZeroAddress(to)

IRs:
MODIFIER_CALL, ICOTokenExtended.nonZeroAddress(address)(to)"];
9->1;
}
// Function: 1384.sol-ICOTokenExtended-nonZeroAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(inputAddress != address(0))

IRs:
TMP_983 = CONVERT 0 to address
TMP_984(bool) = inputAddress != TMP_983
TMP_985(None) = SOLIDITY_CALL require(bool)(TMP_984)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOTokenExtended-onlyCurrentHookOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(hookOperator))

IRs:
TMP_980 = CONVERT hookOperator to address
TMP_981(bool) = msg.sender == TMP_980
TMP_982(None) = SOLIDITY_CALL require(bool)(TMP_981)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOTokenExtended-onlyMinter()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(minters[msg.sender])

IRs:
REF_417(bool) -> minters[msg.sender]
TMP_979(None) = SOLIDITY_CALL require(bool)(REF_417)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOTokenExtended-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_975(bool) = msg.sender == owner
TMP_976(None) = SOLIDITY_CALL require(bool)(TMP_975)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOTokenExtended-onlyRefunder()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == refunder)

IRs:
TMP_986(bool) = msg.sender == refunder
TMP_987(None) = SOLIDITY_CALL require(bool)(TMP_986)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOTokenExtended-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1384.sol-ICOTokenExtended-removeMinter(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minters[minterAddress] = false

IRs:
REF_389(bool) -> minters[minterAddress]
REF_389(bool) (->minters) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogMinterRemove(minterAddress)

IRs:
Emit LogMinterRemove(minterAddress)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nonZeroAddress(minterAddress)

IRs:
MODIFIER_CALL, ICOTokenExtended.nonZeroAddress(address)(minterAddress)"];
4->1;
}
// Function: 1384.sol-ICOTokenExtended-setExchangeOracle(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
aiurExchangeOracle = ExchangeOracle(exchangeOracleAddress)

IRs:
TMP_906 = CONVERT exchangeOracleAddress to ExchangeOracle
aiurExchangeOracle(ExchangeOracle) := TMP_906(ExchangeOracle)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
nonZeroAddress(exchangeOracleAddress)

IRs:
MODIFIER_CALL, ICOTokenExtended.nonZeroAddress(address)(exchangeOracleAddress)"];
3->1;
}
// Function: 1384.sol-ICOTokenExtended-setHookOperator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
hookOperator = IHookOperator(hookOperatorAddress)

IRs:
TMP_909 = CONVERT hookOperatorAddress to IHookOperator
hookOperator(IHookOperator) := TMP_909(IHookOperator)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
nonZeroAddress(hookOperatorAddress)

IRs:
MODIFIER_CALL, ICOTokenExtended.nonZeroAddress(address)(hookOperatorAddress)"];
3->1;
}
// Function: 1384.sol-ICOTokenExtended-setRefunder(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
refunder = refunderAddress

IRs:
refunder(address) := refunderAddress(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogRefunderSet(refunderAddress)

IRs:
Emit LogRefunderSet(refunderAddress)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nonZeroAddress(refunderAddress)

IRs:
MODIFIER_CALL, ICOTokenExtended.nonZeroAddress(address)(refunderAddress)"];
4->1;
}
// Function: 1384.sol-ICOTokenExtended-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = AIUR Token

IRs:
name(string) := AIUR Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = AIUR

IRs:
symbol(string) := AIUR(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
MIN_REFUND_RATE_DELIMITER = 2

IRs:
MIN_REFUND_RATE_DELIMITER(uint256) := 2(uint256)"];
}
// Function: 1384.sol-ICOTokenExtended-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1384.sol-ICOTokenExtended-taxTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[from] >= tokensAmount)

IRs:
REF_398(uint256) -> balances[from]
TMP_936(bool) = REF_398 >= tokensAmount
TMP_937(None) = SOLIDITY_CALL require(bool)(TMP_936)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transferDirectly(from,to,tokensAmount)

IRs:
INTERNAL_CALL, ICOTokenExtended.transferDirectly(address,address,uint256)(from,to,tokensAmount)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
hookOperator.onTaxTransfer(from,tokensAmount)

IRs:
HIGH_LEVEL_CALL, dest:hookOperator(IHookOperator), function:onTaxTransfer, arguments:['from', 'tokensAmount']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogTaxTransfer(from,to,tokensAmount)

IRs:
Emit LogTaxTransfer(from,to,tokensAmount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyCurrentHookOperator()

IRs:
MODIFIER_CALL, ICOTokenExtended.onlyCurrentHookOperator()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
nonZeroAddress(from)

IRs:
MODIFIER_CALL, ICOTokenExtended.nonZeroAddress(address)(from)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
nonZeroAddress(to)

IRs:
MODIFIER_CALL, ICOTokenExtended.nonZeroAddress(address)(to)"];
8->1;
}
// Function: 1384.sol-ICOTokenExtended-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
hookOperator.onTransfer(msg.sender,to,tokensAmount)

IRs:
HIGH_LEVEL_CALL, dest:hookOperator(IHookOperator), function:onTransfer, arguments:['msg.sender', 'to', 'tokensAmount']  "];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.transfer(to,tokensAmount)

IRs:
TMP_930(bool) = INTERNAL_CALL, PausableToken.transfer(address,uint256)(to,tokensAmount)
RETURN TMP_930"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
nonZeroAddress(to)

IRs:
MODIFIER_CALL, ICOTokenExtended.nonZeroAddress(address)(to)"];
3->1;
}
// Function: 1384.sol-ICOTokenExtended-transferDirectly(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = balances[from].sub(tokensAmount)

IRs:
REF_411(uint256) -> balances[from]
REF_412(uint256) -> balances[from]
TMP_970(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_412', 'tokensAmount'] 
REF_411(uint256) (->balances) := TMP_970(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[to] = balances[to].add(tokensAmount)

IRs:
REF_414(uint256) -> balances[to]
REF_415(uint256) -> balances[to]
TMP_971(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_415', 'tokensAmount'] 
REF_414(uint256) (->balances) := TMP_971(uint256)"];
}
// Function: 1384.sol-ICOTokenExtended-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
hookOperator.onTransfer(from,to,tokensAmount)

IRs:
HIGH_LEVEL_CALL, dest:hookOperator(IHookOperator), function:onTransfer, arguments:['from', 'to', 'tokensAmount']  "];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.transferFrom(from,to,tokensAmount)

IRs:
TMP_933(bool) = INTERNAL_CALL, PausableToken.transferFrom(address,address,uint256)(from,to,tokensAmount)
RETURN TMP_933"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
nonZeroAddress(from)

IRs:
MODIFIER_CALL, ICOTokenExtended.nonZeroAddress(address)(from)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nonZeroAddress(to)

IRs:
MODIFIER_CALL, ICOTokenExtended.nonZeroAddress(address)(to)"];
4->1;
}
// Function: 1384.sol-ICOTokenExtended-transferOverBalanceFunds(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! hookOperator.isOverBalanceLimitHolder(from))

IRs:
TMP_944(bool) = HIGH_LEVEL_CALL, dest:hookOperator(IHookOperator), function:isOverBalanceLimitHolder, arguments:['from']  
TMP_945 = UnaryType.BANG TMP_944 
TMP_946(None) = SOLIDITY_CALL require(bool)(TMP_945)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
oracleRate = aiurExchangeOracle.rate()

IRs:
TMP_947(uint256) = HIGH_LEVEL_CALL, dest:aiurExchangeOracle(ExchangeOracle), function:rate, arguments:[]  
oracleRate(uint256) := TMP_947(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(rate <= oracleRate.add(oracleRate.div(MIN_REFUND_RATE_DELIMITER)))

IRs:
TMP_948(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['oracleRate', 'MIN_REFUND_RATE_DELIMITER'] 
TMP_949(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['oracleRate', 'TMP_948'] 
TMP_950(bool) = rate <= TMP_949
TMP_951(None) = SOLIDITY_CALL require(bool)(TMP_950)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
fromBalance = balanceOf(from)

IRs:
TMP_952(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(from)
fromBalance(uint256) := TMP_952(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
maxTokensBalance = totalSupply.mul(hookOperator.getBalancePercentageLimit()).div(100)

IRs:
TMP_953(uint256) = HIGH_LEVEL_CALL, dest:hookOperator(IHookOperator), function:getBalancePercentageLimit, arguments:[]  
TMP_954(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['totalSupply', 'TMP_953'] 
TMP_955(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_954', '100'] 
maxTokensBalance(uint256) := TMP_955(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(fromBalance > maxTokensBalance)

IRs:
TMP_956(bool) = fromBalance > maxTokensBalance
TMP_957(None) = SOLIDITY_CALL require(bool)(TMP_956)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
tokensToTake = fromBalance.sub(maxTokensBalance)

IRs:
TMP_958(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['fromBalance', 'maxTokensBalance'] 
tokensToTake(uint256) := TMP_958(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
weiToRefund = aiurExchangeOracle.convertTokensAmountInWeiAtRate(tokensToTake,rate)

IRs:
TMP_959(uint256) = HIGH_LEVEL_CALL, dest:aiurExchangeOracle(ExchangeOracle), function:convertTokensAmountInWeiAtRate, arguments:['tokensToTake', 'rate']  
weiToRefund(uint256) := TMP_959(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(hookOperator.isInBalanceLimit(to,tokensToTake))

IRs:
TMP_960(bool) = HIGH_LEVEL_CALL, dest:hookOperator(IHookOperator), function:isInBalanceLimit, arguments:['to', 'tokensToTake']  
TMP_961(None) = SOLIDITY_CALL require(bool)(TMP_960)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(msg.value == weiToRefund)

IRs:
TMP_962(bool) = msg.value == weiToRefund
TMP_963(None) = SOLIDITY_CALL require(bool)(TMP_962)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
transferDirectly(from,to,tokensToTake)

IRs:
INTERNAL_CALL, ICOTokenExtended.transferDirectly(address,address,uint256)(from,to,tokensToTake)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
from.transfer(msg.value)

IRs:
Transfer dest:from value:msg.value"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
LogTransferOverFunds(from,to,weiToRefund,tokensToTake)

IRs:
Emit LogTransferOverFunds(from,to,weiToRefund,tokensToTake)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyRefunder()

IRs:
MODIFIER_CALL, ICOTokenExtended.onlyRefunder()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
nonZeroAddress(from)

IRs:
MODIFIER_CALL, ICOTokenExtended.nonZeroAddress(address)(from)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
nonZeroAddress(to)

IRs:
MODIFIER_CALL, ICOTokenExtended.nonZeroAddress(address)(to)"];
17->1;
}
// Function: 1384.sol-ICOTokenExtended-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_858 = CONVERT 0 to address
TMP_859(bool) = newOwner != TMP_858
TMP_860(None) = SOLIDITY_CALL require(bool)(TMP_859)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1384.sol-ICOTokenExtended-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1384.sol-ICOTokenExtended-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_972 = UnaryType.BANG paused 
TMP_973(None) = SOLIDITY_CALL require(bool)(TMP_972)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-ICOTokenExtended-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_974(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-IHookOperator-getBalancePercentageLimit()
digraph{
}
// Function: 1384.sol-IHookOperator-getICOToken()
digraph{
}
// Function: 1384.sol-IHookOperator-getImplementation()
digraph{
}
// Function: 1384.sol-IHookOperator-getKYCVerificationContractAddress()
digraph{
}
// Function: 1384.sol-IHookOperator-getOwner()
digraph{
}
// Function: 1384.sol-IHookOperator-getUserManager()
digraph{
}
// Function: 1384.sol-IHookOperator-init()
digraph{
}
// Function: 1384.sol-IHookOperator-isInBalanceLimit(address,uint256)
digraph{
}
// Function: 1384.sol-IHookOperator-isOverBalanceLimitHolder(address)
digraph{
}
// Function: 1384.sol-IHookOperator-kycVerification(address,address,uint256)
digraph{
}
// Function: 1384.sol-IHookOperator-onBurn(uint256)
digraph{
}
// Function: 1384.sol-IHookOperator-onMint(address,uint256)
digraph{
}
// Function: 1384.sol-IHookOperator-onTaxTransfer(address,uint256)
digraph{
}
// Function: 1384.sol-IHookOperator-onTransfer(address,address,uint256)
digraph{
}
// Function: 1384.sol-IHookOperator-setBalancePercentageLimit(uint256)
digraph{
}
// Function: 1384.sol-IHookOperator-setICOToken(address)
digraph{
}
// Function: 1384.sol-IHookOperator-setKYCVerificationContract(address)
digraph{
}
// Function: 1384.sol-IHookOperator-setOverBalanceLimitHolder(address,bool)
digraph{
}
// Function: 1384.sol-IHookOperator-setUserManager(address)
digraph{
}
// Function: 1384.sol-IHookOperator-transferOwnership(address)
digraph{
}
// Function: 1384.sol-IHookOperator-updateUserRatio(uint256,address)
digraph{
}
// Function: 1384.sol-IHookOperator-upgradeImplementation(address)
digraph{
}
// Function: 1384.sol-INotInitedOwnable-init()
digraph{
}
// Function: 1384.sol-INotInitedOwnable-transferOwnership(address)
digraph{
}
// Function: 1384.sol-IOwnableUpgradeableImplementation-getImplementation()
digraph{
}
// Function: 1384.sol-IOwnableUpgradeableImplementation-getOwner()
digraph{
}
// Function: 1384.sol-IOwnableUpgradeableImplementation-init()
digraph{
}
// Function: 1384.sol-IOwnableUpgradeableImplementation-transferOwnership(address)
digraph{
}
// Function: 1384.sol-IOwnableUpgradeableImplementation-upgradeImplementation(address)
digraph{
}
// Function: 1384.sol-IUserContract-banUser()
digraph{
}
// Function: 1384.sol-IUserContract-getDailyTransactionVolumeReceiving()
digraph{
}
// Function: 1384.sol-IUserContract-getDailyTransactionVolumeSending()
digraph{
}
// Function: 1384.sol-IUserContract-getMonthlyTransactionVolumeReceiving()
digraph{
}
// Function: 1384.sol-IUserContract-getMonthlyTransactionVolumeSending()
digraph{
}
// Function: 1384.sol-IUserContract-getUserData()
digraph{
}
// Function: 1384.sol-IUserContract-getWeeklyTransactionVolumeReceiving()
digraph{
}
// Function: 1384.sol-IUserContract-getWeeklyTransactionVolumeSending()
digraph{
}
// Function: 1384.sol-IUserContract-increaseDailyTransactionVolumeReceiving(uint256)
digraph{
}
// Function: 1384.sol-IUserContract-increaseDailyTransactionVolumeSending(uint256)
digraph{
}
// Function: 1384.sol-IUserContract-increaseMonthlyTransactionVolumeReceiving(uint256)
digraph{
}
// Function: 1384.sol-IUserContract-increaseMonthlyTransactionVolumeSending(uint256)
digraph{
}
// Function: 1384.sol-IUserContract-increaseWeeklyTransactionVolumeReceiving(uint256)
digraph{
}
// Function: 1384.sol-IUserContract-increaseWeeklyTransactionVolumeSending(uint256)
digraph{
}
// Function: 1384.sol-IUserContract-initExchangeUser(uint256)
digraph{
}
// Function: 1384.sol-IUserContract-initKYCUser(uint256)
digraph{
}
// Function: 1384.sol-IUserContract-initUser(uint256)
digraph{
}
// Function: 1384.sol-IUserContract-isExchangeUser()
digraph{
}
// Function: 1384.sol-IUserContract-isFounderUser()
digraph{
}
// Function: 1384.sol-IUserContract-isUserBanned()
digraph{
}
// Function: 1384.sol-IUserContract-isUserBlacklisted()
digraph{
}
// Function: 1384.sol-IUserContract-isUserPolicyAccepted()
digraph{
}
// Function: 1384.sol-IUserContract-isValidUser()
digraph{
}
// Function: 1384.sol-IUserContract-markAsFounder()
digraph{
}
// Function: 1384.sol-IUserContract-setUserBlacklistedStatus(bool)
digraph{
}
// Function: 1384.sol-IUserContract-updateGenerationRatio(uint256)
digraph{
}
// Function: 1384.sol-IUserContract-updateKYCStatus(uint256)
digraph{
}
// Function: 1384.sol-IUserContract-updateLastTransactionTime(uint256)
digraph{
}
// Function: 1384.sol-IUserContract-updateUserPolicy(bool,bool,bool,bool)
digraph{
}
// Function: 1384.sol-IUserManager-getCrowdsaleContract()
digraph{
}
// Function: 1384.sol-IUserManager-getDataContractAddress()
digraph{
}
// Function: 1384.sol-IUserManager-getHookOperatorContractAddress()
digraph{
}
// Function: 1384.sol-IUserManager-getImplementation()
digraph{
}
// Function: 1384.sol-IUserManager-getOwner()
digraph{
}
// Function: 1384.sol-IUserManager-getUserContractAddress(address)
digraph{
}
// Function: 1384.sol-IUserManager-getUserFactoryContractAddress()
digraph{
}
// Function: 1384.sol-IUserManager-init()
digraph{
}
// Function: 1384.sol-IUserManager-isBannedUser(address)
digraph{
}
// Function: 1384.sol-IUserManager-isBlacklisted(address)
digraph{
}
// Function: 1384.sol-IUserManager-isUserKYCVerified(address)
digraph{
}
// Function: 1384.sol-IUserManager-isValidUser(address)
digraph{
}
// Function: 1384.sol-IUserManager-markUserAsFounder(address)
digraph{
}
// Function: 1384.sol-IUserManager-setCrowdsaleContract(address)
digraph{
}
// Function: 1384.sol-IUserManager-setDataContract(address)
digraph{
}
// Function: 1384.sol-IUserManager-setHookOperatorContract(address)
digraph{
}
// Function: 1384.sol-IUserManager-setTaxPercentage(uint256)
digraph{
}
// Function: 1384.sol-IUserManager-setTaxationPeriod(uint256)
digraph{
}
// Function: 1384.sol-IUserManager-setUserFactoryContract(address)
digraph{
}
// Function: 1384.sol-IUserManager-transferOwnership(address)
digraph{
}
// Function: 1384.sol-IUserManager-updateGenerationRatio(uint256,address)
digraph{
}
// Function: 1384.sol-IUserManager-updateLastTransactionTime(address)
digraph{
}
// Function: 1384.sol-IUserManager-upgradeImplementation(address)
digraph{
}
// Function: 1384.sol-MintableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1384.sol-MintableToken-allowance(address,address)
digraph{
}
// Function: 1384.sol-MintableToken-approve(address,uint256)
digraph{
}
// Function: 1384.sol-MintableToken-balanceOf(address)
digraph{
}
// Function: 1384.sol-MintableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_721 = UnaryType.BANG mintingFinished 
TMP_722(None) = SOLIDITY_CALL require(bool)(TMP_721)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-MintableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_222(mapping(address => uint256)) -> allowed[msg.sender]
REF_223(uint256) -> REF_222[_spender]
oldValue(uint256) := REF_223(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_698(bool) = _subtractedValue > oldValue
CONDITION TMP_698"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_224(mapping(address => uint256)) -> allowed[msg.sender]
REF_225(uint256) -> REF_224[_spender]
REF_225(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_226(mapping(address => uint256)) -> allowed[msg.sender]
REF_227(uint256) -> REF_226[_spender]
TMP_699(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_227(uint256) (->allowed) := TMP_699(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_229(mapping(address => uint256)) -> allowed[msg.sender]
REF_230(uint256) -> REF_229[_spender]
Emit Approval(msg.sender,_spender,REF_230)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1384.sol-MintableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 1384.sol-MintableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_215(mapping(address => uint256)) -> allowed[msg.sender]
REF_216(uint256) -> REF_215[_spender]
REF_217(mapping(address => uint256)) -> allowed[msg.sender]
REF_218(uint256) -> REF_217[_spender]
TMP_696(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_218', '_addedValue'] 
REF_216(uint256) (->allowed) := TMP_696(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_220(mapping(address => uint256)) -> allowed[msg.sender]
REF_221(uint256) -> REF_220[_spender]
Emit Approval(msg.sender,_spender,REF_221)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1384.sol-MintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_709(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_709(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_240(uint256) -> balances[_to]
REF_241(uint256) -> balances[_to]
TMP_710(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_241', '_amount'] 
REF_240(uint256) (->balances) := TMP_710(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_712 = CONVERT 0 to address
Emit Transfer(TMP_712,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 1384.sol-MintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_719(bool) = msg.sender == owner
TMP_720(None) = SOLIDITY_CALL require(bool)(TMP_719)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-MintableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 1384.sol-MintableToken-transfer(address,uint256)
digraph{
}
// Function: 1384.sol-MintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1384.sol-MintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_679 = CONVERT 0 to address
TMP_680(bool) = newOwner != TMP_679
TMP_681(None) = SOLIDITY_CALL require(bool)(TMP_680)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1384.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1384.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_86(bool) = msg.sender == owner
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_81 = CONVERT 0 to address
TMP_82(bool) = newOwner != TMP_81
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1384.sol-Pausable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1384.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_584(bool) = msg.sender == owner
TMP_585(None) = SOLIDITY_CALL require(bool)(TMP_584)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1384.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1384.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_573 = CONVERT 0 to address
TMP_574(bool) = newOwner != TMP_573
TMP_575(None) = SOLIDITY_CALL require(bool)(TMP_574)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1384.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1384.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_586 = UnaryType.BANG paused 
TMP_587(None) = SOLIDITY_CALL require(bool)(TMP_586)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_588(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-PausableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1384.sol-PausableToken-allowance(address,address)
digraph{
}
// Function: 1384.sol-PausableToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.approve(_spender,_value)

IRs:
TMP_763(bool) = INTERNAL_CALL, StandardToken.approve(address,uint256)(_spender,_value)
RETURN TMP_763"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 1384.sol-PausableToken-balanceOf(address)
digraph{
}
// Function: 1384.sol-PausableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.decreaseApproval(_spender,_subtractedValue)

IRs:
TMP_767(bool) = INTERNAL_CALL, StandardToken.decreaseApproval(address,uint256)(_spender,_subtractedValue)
RETURN TMP_767"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1384.sol-PausableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.increaseApproval(_spender,_addedValue)

IRs:
TMP_765(bool) = INTERNAL_CALL, StandardToken.increaseApproval(address,uint256)(_spender,_addedValue)
RETURN TMP_765"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1384.sol-PausableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_772(bool) = msg.sender == owner
TMP_773(None) = SOLIDITY_CALL require(bool)(TMP_772)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-PausableToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 1384.sol-PausableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 1384.sol-PausableToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_759(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(_to,_value)
RETURN TMP_759"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 1384.sol-PausableToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_761(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_761"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 1384.sol-PausableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_729 = CONVERT 0 to address
TMP_730(bool) = newOwner != TMP_729
TMP_731(None) = SOLIDITY_CALL require(bool)(TMP_730)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1384.sol-PausableToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 1384.sol-PausableToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_769 = UnaryType.BANG paused 
TMP_770(None) = SOLIDITY_CALL require(bool)(TMP_769)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-PausableToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_771(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-RefundVault-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1384.sol-RefundVault-close()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.Active)

IRs:
REF_14(RefundVault.State) -> State.Active
TMP_100(bool) = state == REF_14
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
state = State.Closed

IRs:
REF_15(RefundVault.State) -> State.Closed
state(RefundVault.State) := REF_15(RefundVault.State)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Closed()

IRs:
Emit Closed()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
wallet.transfer(address(this).balance)

IRs:
TMP_103 = CONVERT this to address
TMP_104(uint256) = SOLIDITY_CALL balance(address)(TMP_103)
Transfer dest:wallet value:TMP_104"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 1384.sol-RefundVault-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_wallet != address(0))

IRs:
TMP_93 = CONVERT 0 to address
TMP_94(bool) = _wallet != TMP_93
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
state = State.Active

IRs:
REF_9(RefundVault.State) -> State.Active
state(RefundVault.State) := REF_9(RefundVault.State)"];
}
// Function: 1384.sol-RefundVault-deposit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.Active)

IRs:
REF_10(RefundVault.State) -> State.Active
TMP_96(bool) = state == REF_10
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
deposited[investor] = deposited[investor].add(msg.value)

IRs:
REF_11(uint256) -> deposited[investor]
REF_12(uint256) -> deposited[investor]
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_12', 'msg.value'] 
REF_11(uint256) (->deposited) := TMP_98(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1384.sol-RefundVault-enableRefunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.Active)

IRs:
REF_17(RefundVault.State) -> State.Active
TMP_107(bool) = state == REF_17
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
state = State.Refunding

IRs:
REF_18(RefundVault.State) -> State.Refunding
state(RefundVault.State) := REF_18(RefundVault.State)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
RefundsEnabled()

IRs:
Emit RefundsEnabled()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1384.sol-RefundVault-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_120(bool) = msg.sender == owner
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-RefundVault-refund(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.Refunding)

IRs:
REF_19(RefundVault.State) -> State.Refunding
TMP_111(bool) = state == REF_19
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
depositedValue = deposited[investor]

IRs:
REF_20(uint256) -> deposited[investor]
depositedValue(uint256) := REF_20(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
deductedValue = depositedValue.mul(DEDUCTION).div(100)

IRs:
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['depositedValue', 'DEDUCTION'] 
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_113', '100'] 
deductedValue(uint256) := TMP_114(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
deposited[investor] = 0

IRs:
REF_23(uint256) -> deposited[investor]
REF_23(uint256) (->deposited) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
wallet.transfer(deductedValue)

IRs:
Transfer dest:wallet value:deductedValue"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
investor.transfer(depositedValue.sub(deductedValue))

IRs:
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['depositedValue', 'deductedValue'] 
Transfer dest:investor value:TMP_116"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
totalDeductedValue = totalDeductedValue.add(deductedValue)

IRs:
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalDeductedValue', 'deductedValue'] 
totalDeductedValue(uint256) := TMP_118(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Refunded(investor,depositedValue)

IRs:
Emit Refunded(investor,depositedValue)"];
}
// Function: 1384.sol-RefundVault-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
DEDUCTION = 3

IRs:
DEDUCTION(uint256) := 3(uint256)"];
}
// Function: 1384.sol-RefundVault-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_88 = CONVERT 0 to address
TMP_89(bool) = newOwner != TMP_88
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1384.sol-RefundableCrowdsale-Crowdsale(uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_214(bool) = _startTime >= now
TMP_215(None) = SOLIDITY_CALL require(bool)(TMP_214)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_216(bool) = _endTime >= _startTime
TMP_217(None) = SOLIDITY_CALL require(bool)(TMP_216)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_218(bool) = _rate > 0
TMP_219(None) = SOLIDITY_CALL require(bool)(TMP_218)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != address(0))

IRs:
TMP_220 = CONVERT 0 to address
TMP_221(bool) = _wallet != TMP_220
TMP_222(None) = SOLIDITY_CALL require(bool)(TMP_221)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
token = createTokenContract()

IRs:
TMP_223(MintableToken) = INTERNAL_CALL, Crowdsale.createTokenContract()()
token(MintableToken) := TMP_223(MintableToken)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
}
// Function: 1384.sol-RefundableCrowdsale-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1384.sol-RefundableCrowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(beneficiary != address(0))

IRs:
TMP_227 = CONVERT 0 to address
TMP_228(bool) = beneficiary != TMP_227
TMP_229(None) = SOLIDITY_CALL require(bool)(TMP_228)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_230(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_231(None) = SOLIDITY_CALL require(bool)(TMP_230)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokens = weiAmount.mul(rate)

IRs:
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'rate'] 
tokens(uint256) := TMP_232(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_233(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_233(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token.mint(beneficiary,tokens)

IRs:
TMP_234(bool) = HIGH_LEVEL_CALL, dest:token(MintableToken), function:mint, arguments:['beneficiary', 'tokens']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, RefundableCrowdsale.forwardFunds()()"];
}
// Function: 1384.sol-RefundableCrowdsale-claimRefund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isFinalized)

IRs:
TMP_250(None) = SOLIDITY_CALL require(bool)(isFinalized)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! goalReached())

IRs:
TMP_251(bool) = INTERNAL_CALL, RefundableCrowdsale.goalReached()()
TMP_252 = UnaryType.BANG TMP_251 
TMP_253(None) = SOLIDITY_CALL require(bool)(TMP_252)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
vault.refund(msg.sender)

IRs:
HIGH_LEVEL_CALL, dest:vault(RefundVault), function:refund, arguments:['msg.sender']  "];
}
// Function: 1384.sol-RefundableCrowdsale-constructor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_goal > 0)

IRs:
TMP_244(bool) = _goal > 0
TMP_245(None) = SOLIDITY_CALL require(bool)(TMP_244)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vault = new RefundVault(wallet)

IRs:
TMP_247(RefundVault) = new RefundVault(wallet) 
vault(RefundVault) := TMP_247(RefundVault)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
goal = _goal

IRs:
goal(uint256) := _goal(uint256)"];
}
// Function: 1384.sol-RefundableCrowdsale-createTokenContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
new MintableToken()

IRs:
TMP_225(MintableToken) = new MintableToken() 
RETURN TMP_225"];
}
// Function: 1384.sol-RefundableCrowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 1384.sol-RefundableCrowdsale-finalization()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
goalReached()

IRs:
TMP_255(bool) = INTERNAL_CALL, RefundableCrowdsale.goalReached()()
CONDITION TMP_255"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vault.close()

IRs:
HIGH_LEVEL_CALL, dest:vault(RefundVault), function:close, arguments:[]  "];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
vault.enableRefunds()

IRs:
HIGH_LEVEL_CALL, dest:vault(RefundVault), function:enableRefunds, arguments:[]  "];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
super.finalization()

IRs:
INTERNAL_CALL, FinalizableCrowdsale.finalization()()"];
}
// Function: 1384.sol-RefundableCrowdsale-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isFinalized)

IRs:
TMP_202 = UnaryType.BANG isFinalized 
TMP_203(None) = SOLIDITY_CALL require(bool)(TMP_202)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(hasEnded())

IRs:
TMP_204(bool) = INTERNAL_CALL, Crowdsale.hasEnded()()
TMP_205(None) = SOLIDITY_CALL require(bool)(TMP_204)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
finalization()

IRs:
INTERNAL_CALL, RefundableCrowdsale.finalization()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Finalized()

IRs:
Emit Finalized()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isFinalized = true

IRs:
isFinalized(bool) := True(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 1384.sol-RefundableCrowdsale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
vault.deposit.value(msg.value)(msg.sender)

IRs:
HIGH_LEVEL_CALL, dest:vault(RefundVault), function:deposit, arguments:['msg.sender'] value:msg.value "];
}
// Function: 1384.sol-RefundableCrowdsale-goalReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
weiRaised >= goal

IRs:
TMP_259(bool) = weiRaised >= goal
RETURN TMP_259"];
}
// Function: 1384.sol-RefundableCrowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endTime

IRs:
TMP_243(bool) = now > endTime
RETURN TMP_243"];
}
// Function: 1384.sol-RefundableCrowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_260(bool) = msg.sender == owner
TMP_261(None) = SOLIDITY_CALL require(bool)(TMP_260)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-RefundableCrowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isFinalized = false

IRs:
isFinalized(bool) := False(bool)"];
}
// Function: 1384.sol-RefundableCrowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_209 = CONVERT 0 to address
TMP_210(bool) = newOwner != TMP_209
TMP_211(None) = SOLIDITY_CALL require(bool)(TMP_210)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1384.sol-RefundableCrowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinPeriod = now >= startTime && now <= endTime

IRs:
TMP_238(bool) = now >= startTime
TMP_239(bool) = now <= endTime
TMP_240(bool) = TMP_238 && TMP_239
withinPeriod(bool) := TMP_240(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_241(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_241(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
withinPeriod && nonZeroPurchase

IRs:
TMP_242(bool) = withinPeriod && nonZeroPurchase
RETURN TMP_242"];
}
// Function: 1384.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_78(uint256) = a + b
c(uint256) := TMP_78(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_79(bool) = c >= a
TMP_80(None) = SOLIDITY_CALL assert(bool)(TMP_79)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1384.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_74(uint256) = a / b
c(uint256) := TMP_74(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1384.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_69(bool) = a == 0
CONDITION TMP_69"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_70(uint256) = a * b
c(uint256) := TMP_70(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_71(uint256) = c / a
TMP_72(bool) = TMP_71 == b
TMP_73(None) = SOLIDITY_CALL assert(bool)(TMP_72)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1384.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_75(bool) = b <= a
TMP_76(None) = SOLIDITY_CALL assert(bool)(TMP_75)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_77(uint256) = a - b
RETURN TMP_77"];
}
// Function: 1384.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_179(mapping(address => uint256)) -> allowed[_owner]
REF_180(uint256) -> REF_179[_spender]
RETURN REF_180"];
}
// Function: 1384.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_177(mapping(address => uint256)) -> allowed[msg.sender]
REF_178(uint256) -> REF_177[_spender]
REF_178(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1384.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 1384.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_188(mapping(address => uint256)) -> allowed[msg.sender]
REF_189(uint256) -> REF_188[_spender]
oldValue(uint256) := REF_189(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_676(bool) = _subtractedValue > oldValue
CONDITION TMP_676"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_190(mapping(address => uint256)) -> allowed[msg.sender]
REF_191(uint256) -> REF_190[_spender]
REF_191(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_192(mapping(address => uint256)) -> allowed[msg.sender]
REF_193(uint256) -> REF_192[_spender]
TMP_677(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_193(uint256) (->allowed) := TMP_677(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_195(mapping(address => uint256)) -> allowed[msg.sender]
REF_196(uint256) -> REF_195[_spender]
Emit Approval(msg.sender,_spender,REF_196)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1384.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_181(mapping(address => uint256)) -> allowed[msg.sender]
REF_182(uint256) -> REF_181[_spender]
REF_183(mapping(address => uint256)) -> allowed[msg.sender]
REF_184(uint256) -> REF_183[_spender]
TMP_674(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_184', '_addedValue'] 
REF_182(uint256) (->allowed) := TMP_674(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_186(mapping(address => uint256)) -> allowed[msg.sender]
REF_187(uint256) -> REF_186[_spender]
Emit Approval(msg.sender,_spender,REF_187)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1384.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 1384.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_662 = CONVERT 0 to address
TMP_663(bool) = _to != TMP_662
TMP_664(None) = SOLIDITY_CALL require(bool)(TMP_663)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_163(uint256) -> balances[_from]
TMP_665(bool) = _value <= REF_163
TMP_666(None) = SOLIDITY_CALL require(bool)(TMP_665)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_164(mapping(address => uint256)) -> allowed[_from]
REF_165(uint256) -> REF_164[msg.sender]
TMP_667(bool) = _value <= REF_165
TMP_668(None) = SOLIDITY_CALL require(bool)(TMP_667)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_166(uint256) -> balances[_from]
REF_167(uint256) -> balances[_from]
TMP_669(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_167', '_value'] 
REF_166(uint256) (->balances) := TMP_669(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_169(uint256) -> balances[_to]
REF_170(uint256) -> balances[_to]
TMP_670(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_170', '_value'] 
REF_169(uint256) (->balances) := TMP_670(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_172(mapping(address => uint256)) -> allowed[_from]
REF_173(uint256) -> REF_172[msg.sender]
REF_174(mapping(address => uint256)) -> allowed[_from]
REF_175(uint256) -> REF_174[msg.sender]
TMP_671(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_175', '_value'] 
REF_173(uint256) (->allowed) := TMP_671(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1384.sol-WhitelistedCrowdsale-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1384.sol-WhitelistedCrowdsale-addMultiplePublicSalesSpecialUser(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(users.length <= MAX_INPUT_USERS_COUNT)

IRs:
REF_34 -> LENGTH users
TMP_139(bool) = REF_34 <= MAX_INPUT_USERS_COUNT
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < users.length

IRs:
REF_35 -> LENGTH users
TMP_141(bool) = i < REF_35
CONDITION TMP_141"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
publicSalesSpecialUsers[users[i]] = true

IRs:
REF_36(address) -> users[i]
REF_37(bool) -> publicSalesSpecialUsers[REF_36]
REF_37(bool) (->publicSalesSpecialUsers) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_142(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LogMultiplePublicsalesSpecialUsersSet(users)

IRs:
Emit LogMultiplePublicsalesSpecialUsersSet(users)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
9->1;
}
// Function: 1384.sol-WhitelistedCrowdsale-addPublicSalesSpecialUser(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
publicSalesSpecialUsers[user] = true

IRs:
REF_33(bool) -> publicSalesSpecialUsers[user]
REF_33(bool) (->publicSalesSpecialUsers) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogPublicsalesSpecialUserAdd(user)

IRs:
Emit LogPublicsalesSpecialUserAdd(user)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notZeroAddress(user)

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.notZeroAddress(address)(user)"];
4->1;
}
// Function: 1384.sol-WhitelistedCrowdsale-notZeroAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addressForValidation != address(0))

IRs:
TMP_155 = CONVERT 0 to address
TMP_156(bool) = addressForValidation != TMP_155
TMP_157(None) = SOLIDITY_CALL require(bool)(TMP_156)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-WhitelistedCrowdsale-onlyLister()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == lister)

IRs:
TMP_153(bool) = msg.sender == lister
TMP_154(None) = SOLIDITY_CALL require(bool)(TMP_153)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-WhitelistedCrowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_151(bool) = msg.sender == owner
TMP_152(None) = SOLIDITY_CALL require(bool)(TMP_151)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1384.sol-WhitelistedCrowdsale-removePublicSalesSpecialUser(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
publicSalesSpecialUsers[user] = false

IRs:
REF_38(bool) -> publicSalesSpecialUsers[user]
REF_38(bool) (->publicSalesSpecialUsers) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogPublicsalesSpecialUserRemove(user)

IRs:
Emit LogPublicsalesSpecialUserRemove(user)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notZeroAddress(user)

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.notZeroAddress(address)(user)"];
4->1;
}
// Function: 1384.sol-WhitelistedCrowdsale-setLister(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lister = newLister

IRs:
lister(address) := newLister(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogListerSet(newLister)

IRs:
Emit LogListerSet(newLister)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notZeroAddress(newLister)

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.notZeroAddress(address)(newLister)"];
4->1;
}
// Function: 1384.sol-WhitelistedCrowdsale-setMultiplePreSalesSpecialUsers(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(users.length <= MAX_INPUT_USERS_COUNT)

IRs:
REF_29 -> LENGTH users
TMP_130(bool) = REF_29 <= MAX_INPUT_USERS_COUNT
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < users.length

IRs:
REF_30 -> LENGTH users
TMP_132(bool) = i < REF_30
CONDITION TMP_132"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
preSalesSpecialUsers[users[i]] = userRate

IRs:
REF_31(address) -> users[i]
REF_32(uint256) -> preSalesSpecialUsers[REF_31]
REF_32(uint256) (->preSalesSpecialUsers) := userRate(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_133(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LogMultiplePresalesSpecialUsersSet(users,userRate)

IRs:
Emit LogMultiplePresalesSpecialUsersSet(users,userRate)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
9->1;
}
// Function: 1384.sol-WhitelistedCrowdsale-setPreSalesSpecialUser(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
preSalesSpecialUsers[user] = userRate

IRs:
REF_28(uint256) -> preSalesSpecialUsers[user]
REF_28(uint256) (->preSalesSpecialUsers) := userRate(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogPresalesSpecialUserSet(user,userRate)

IRs:
Emit LogPresalesSpecialUserSet(user,userRate)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyLister()

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.onlyLister()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notZeroAddress(user)

IRs:
MODIFIER_CALL, WhitelistedCrowdsale.notZeroAddress(address)(user)"];
4->1;
}
// Function: 1384.sol-WhitelistedCrowdsale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_INPUT_USERS_COUNT = 200

IRs:
MAX_INPUT_USERS_COUNT(uint256) := 200(uint256)"];
}
// Function: 1384.sol-WhitelistedCrowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_122 = CONVERT 0 to address
TMP_123(bool) = newOwner != TMP_122
TMP_124(None) = SOLIDITY_CALL require(bool)(TMP_123)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
}
