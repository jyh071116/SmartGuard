digraph G {
// Function: 1398.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1398.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1398.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1398.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1398.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1398.sol-ERC223Basic-balanceOf(address)
digraph{
}
// Function: 1398.sol-ERC223Basic-transfer(address,uint256)
digraph{
}
// Function: 1398.sol-ERC223Basic-transfer(address,uint256,bytes)
digraph{
}
// Function: 1398.sol-ERC223ReceivingContract-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 1398.sol-ERC223Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_16(uint256) -> balances[_owner]
RETURN REF_16"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1398.sol-ERC223Token-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length == numwords * 32 + 4)

IRs:
REF_17 -> LENGTH msg.data
TMP_39(uint256) = numwords * 32
TMP_40(uint256) = TMP_39 + 4
TMP_41(bool) = REF_17 == TMP_40
TMP_42(None) = SOLIDITY_CALL assert(bool)(TMP_41)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1398.sol-ERC223Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_26 = CONVERT 0 to address
TMP_27(bool) = _to != TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_8(uint256) -> balances[msg.sender]
TMP_29(bool) = _value <= REF_8
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(transfersEnabled)

IRs:
TMP_31(None) = SOLIDITY_CALL require(bool)(transfersEnabled)"];
5->6;
6[label="Node Type: INLINE ASM 6
"];
6->7;
7[label="Node Type: END INLINE ASM 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_9(uint256) -> balances[msg.sender]
REF_10(uint256) -> balances[msg.sender]
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_10', '_value'] 
REF_9(uint256) (->balances) := TMP_32(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_12(uint256) -> balances[_to]
REF_13(uint256) -> balances[_to]
TMP_33(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_13', '_value'] 
REF_12(uint256) (->balances) := TMP_33(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
codeLength > 0

IRs:
TMP_34(bool) = codeLength > 0
CONDITION TMP_34"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
receiver = ERC223ReceivingContract(_to)

IRs:
TMP_35 = CONVERT _to to ERC223ReceivingContract
receiver(ERC223ReceivingContract) := TMP_35(ERC223ReceivingContract)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,empty)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ERC223ReceivingContract), function:tokenFallback, arguments:['msg.sender', '_value', 'empty']  "];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Transfer(msg.sender,_to,_value,empty)

IRs:
Emit Transfer(msg.sender,_to,_value,empty)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyPayloadSize(2)

IRs:
MODIFIER_CALL, ERC223Token.onlyPayloadSize(uint256)(2)"];
16->1;
}
// Function: 1398.sol-ERC223Token-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = _to != TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_16(bool) = _value <= REF_0
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(transfersEnabled)

IRs:
TMP_18(None) = SOLIDITY_CALL require(bool)(transfersEnabled)"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_19(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_19(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_20(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_20(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
codeLength > 0

IRs:
TMP_21(bool) = codeLength > 0
CONDITION TMP_21"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
receiver = ERC223ReceivingContract(_to)

IRs:
TMP_22 = CONVERT _to to ERC223ReceivingContract
receiver(ERC223ReceivingContract) := TMP_22(ERC223ReceivingContract)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ERC223ReceivingContract), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyPayloadSize(3)

IRs:
MODIFIER_CALL, ERC223Token.onlyPayloadSize(uint256)(3)"];
14->1;
}
// Function: 1398.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1398.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1398.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1398.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 1398.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_51(mapping(address => uint256)) -> allowed[_owner]
REF_52(uint256) -> REF_51[_spender]
RETURN REF_52"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyPayloadSize(2)

IRs:
MODIFIER_CALL, ERC223Token.onlyPayloadSize(uint256)(2)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1398.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_49(mapping(address => uint256)) -> allowed[msg.sender]
REF_50(uint256) -> REF_49[_spender]
REF_50(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1398.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 1398.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_60(mapping(address => uint256)) -> allowed[msg.sender]
REF_61(uint256) -> REF_60[_spender]
oldValue(uint256) := REF_61(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_86(bool) = _subtractedValue > oldValue
CONDITION TMP_86"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_62(mapping(address => uint256)) -> allowed[msg.sender]
REF_63(uint256) -> REF_62[_spender]
REF_63(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_64(mapping(address => uint256)) -> allowed[msg.sender]
REF_65(uint256) -> REF_64[_spender]
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_65(uint256) (->allowed) := TMP_87(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_67(mapping(address => uint256)) -> allowed[msg.sender]
REF_68(uint256) -> REF_67[_spender]
Emit Approval(msg.sender,_spender,REF_68)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1398.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_53(mapping(address => uint256)) -> allowed[msg.sender]
REF_54(uint256) -> REF_53[_spender]
REF_55(mapping(address => uint256)) -> allowed[msg.sender]
REF_56(uint256) -> REF_55[_spender]
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_56', '_addedValue'] 
REF_54(uint256) (->allowed) := TMP_84(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_58(mapping(address => uint256)) -> allowed[msg.sender]
REF_59(uint256) -> REF_58[_spender]
Emit Approval(msg.sender,_spender,REF_59)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1398.sol-StandardToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length == numwords * 32 + 4)

IRs:
REF_69 -> LENGTH msg.data
TMP_89(uint256) = numwords * 32
TMP_90(uint256) = TMP_89 + 4
TMP_91(bool) = REF_69 == TMP_90
TMP_92(None) = SOLIDITY_CALL assert(bool)(TMP_91)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1398.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 1398.sol-StandardToken-transfer(address,uint256,bytes)
digraph{
}
// Function: 1398.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_69 = CONVERT 0 to address
TMP_70(bool) = _to != TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_35(uint256) -> balances[_from]
TMP_72(bool) = _value <= REF_35
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_36(mapping(address => uint256)) -> allowed[_from]
REF_37(uint256) -> REF_36[msg.sender]
TMP_74(bool) = _value <= REF_37
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(transfersEnabled)

IRs:
TMP_76(None) = SOLIDITY_CALL require(bool)(transfersEnabled)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_38(uint256) -> balances[_from]
REF_39(uint256) -> balances[_from]
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_39', '_value'] 
REF_38(uint256) (->balances) := TMP_77(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_41(uint256) -> balances[_to]
REF_42(uint256) -> balances[_to]
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_42', '_value'] 
REF_41(uint256) (->balances) := TMP_78(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_44(mapping(address => uint256)) -> allowed[_from]
REF_45(uint256) -> REF_44[msg.sender]
REF_46(mapping(address => uint256)) -> allowed[_from]
REF_47(uint256) -> REF_46[msg.sender]
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_47', '_value'] 
REF_45(uint256) (->allowed) := TMP_79(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyPayloadSize(3)

IRs:
MODIFIER_CALL, ERC223Token.onlyPayloadSize(uint256)(3)"];
10->1;
}
// Function: 1398.sol-TaurusPay-allowance(address,address)
digraph{
}
// Function: 1398.sol-TaurusPay-approve(address,uint256)
digraph{
}
// Function: 1398.sol-TaurusPay-balanceOf(address)
digraph{
}
// Function: 1398.sol-TaurusPay-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_investor != address(0))

IRs:
TMP_140 = CONVERT 0 to address
TMP_141(bool) = _investor != TMP_140
TMP_142(None) = SOLIDITY_CALL require(bool)(TMP_141)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
tokens = validPurchaseTokens(weiAmount)

IRs:
TMP_143(uint256) = INTERNAL_CALL, TaurusPay.validPurchaseTokens(uint256)(weiAmount)
tokens(uint256) := TMP_143(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
tokens == 0

IRs:
TMP_144(bool) = tokens == 0
CONDITION TMP_144"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_145(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokenAllocated = tokenAllocated.add(tokens)

IRs:
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokenAllocated', 'tokens'] 
tokenAllocated(uint256) := TMP_146(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
mint(_investor,tokens,owner)

IRs:
TMP_147(bool) = INTERNAL_CALL, TaurusPay.mint(address,uint256,address)(_investor,tokens,owner)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
TokenPurchase(_investor,weiAmount,tokens)

IRs:
Emit TokenPurchase(_investor,weiAmount,tokens)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owner.transfer(weiAmount)

IRs:
Transfer dest:owner value:weiAmount"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
tokens

IRs:
RETURN tokens"];
}
// Function: 1398.sol-TaurusPay-calcAmount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
countClaimsToken[_beneficiar] == 0

IRs:
REF_143(uint256) -> countClaimsToken[_beneficiar]
TMP_196(bool) = REF_143 == 0
CONDITION TMP_196"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
countClaimsToken[_beneficiar] = 1

IRs:
REF_144(uint256) -> countClaimsToken[_beneficiar]
REF_144(uint256) (->countClaimsToken) := 1(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
countClaimsToken[_beneficiar] >= 22

IRs:
REF_145(uint256) -> countClaimsToken[_beneficiar]
TMP_197(bool) = REF_145 >= 22
CONDITION TMP_197"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
0

IRs:
RETURN 0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
step = countClaimsToken[_beneficiar]

IRs:
REF_146(uint256) -> countClaimsToken[_beneficiar]
step(uint256) := REF_146(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
amount = numberClaimToken.mul(105 - 5 * step).div(100)

IRs:
TMP_198(uint256) = 5 * step
TMP_199(uint256) = 105 - TMP_198
TMP_200(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['numberClaimToken', 'TMP_199'] 
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_200', '100'] 
amount(uint256) := TMP_201(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
countClaimsToken[_beneficiar] = countClaimsToken[_beneficiar].add(1)

IRs:
REF_149(uint256) -> countClaimsToken[_beneficiar]
REF_150(uint256) -> countClaimsToken[_beneficiar]
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_150', '1'] 
REF_149(uint256) (->countClaimsToken) := TMP_202(uint256)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, TaurusPay.canMint()()"];
10->1;
11[label="Node Type: RETURN 11

EXPRESSION:
amount

IRs:
RETURN amount"];
}
// Function: 1398.sol-TaurusPay-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_242 = UnaryType.BANG mintingFinished 
TMP_243(None) = SOLIDITY_CALL require(bool)(TMP_242)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1398.sol-TaurusPay-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_159 = CONVERT 0 to address
TMP_160(bool) = _newOwner != TMP_159
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerChanged(owner,_newOwner)

IRs:
Emit OwnerChanged(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, TaurusPay.onlyOwner()()"];
5->1;
}
// Function: 1398.sol-TaurusPay-changeTime(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(0 < _newStartTimeDay && 0 < _newEndTimeDay)

IRs:
TMP_209(bool) = 0 < _newStartTimeDay
TMP_210(bool) = 0 < _newEndTimeDay
TMP_211(bool) = TMP_209 && TMP_210
TMP_212(None) = SOLIDITY_CALL require(bool)(TMP_211)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
startTimeDay = _newStartTimeDay

IRs:
startTimeDay(uint256) := _newStartTimeDay(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
endTimeDay = _newEndTimeDay

IRs:
endTimeDay(uint256) := _newEndTimeDay(uint256)"];
}
// Function: 1398.sol-TaurusPay-claim()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
currentTime = now

IRs:
currentTime(uint256) := now(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchaseTime(currentTime))

IRs:
TMP_177(bool) = INTERNAL_CALL, TaurusPay.validPurchaseTime(uint256)(currentTime)
TMP_178(None) = SOLIDITY_CALL require(bool)(TMP_177)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value >= priceClaim)

IRs:
TMP_179(bool) = msg.value >= priceClaim
TMP_180(None) = SOLIDITY_CALL require(bool)(TMP_179)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
beneficiar = msg.sender

IRs:
beneficiar(address) := msg.sender(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(beneficiar != address(0))

IRs:
TMP_181 = CONVERT 0 to address
TMP_182(bool) = beneficiar != TMP_181
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_184 = UnaryType.BANG mintingFinished 
TMP_185(None) = SOLIDITY_CALL require(bool)(TMP_184)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
amount = calcAmount(beneficiar)

IRs:
TMP_186(uint256) = INTERNAL_CALL, TaurusPay.calcAmount(address)(beneficiar)
amount(uint256) := TMP_186(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(amount <= balances[owner])

IRs:
REF_134(uint256) -> balances[owner]
TMP_187(bool) = amount <= REF_134
TMP_188(None) = SOLIDITY_CALL require(bool)(TMP_187)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[beneficiar] = balances[beneficiar].add(amount)

IRs:
REF_135(uint256) -> balances[beneficiar]
REF_136(uint256) -> balances[beneficiar]
TMP_189(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_136', 'amount'] 
REF_135(uint256) (->balances) := TMP_189(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[owner] = balances[owner].sub(amount)

IRs:
REF_138(uint256) -> balances[owner]
REF_139(uint256) -> balances[owner]
TMP_190(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_139', 'amount'] 
REF_138(uint256) (->balances) := TMP_190(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
tokenAllocated = tokenAllocated.add(amount)

IRs:
TMP_191(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokenAllocated', 'amount'] 
tokenAllocated(uint256) := TMP_191(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
owner.transfer(msg.value)

IRs:
Transfer dest:owner value:msg.value"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Mint(beneficiar,amount)

IRs:
Emit Mint(beneficiar,amount)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Transfer(owner,beneficiar,amount)

IRs:
Emit Transfer(owner,beneficiar,amount)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, TaurusPay.canMint()()"];
16->1;
}
// Function: 1398.sol-TaurusPay-claimTokensToOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
_token == 0x0

IRs:
TMP_213(bool) = _token == 0
CONDITION TMP_213"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_214 = CONVERT this to address
TMP_215(uint256) = SOLIDITY_CALL balance(address)(TMP_214)
Transfer dest:owner value:TMP_215"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
token = TaurusPay(_token)

IRs:
TMP_217 = CONVERT _token to TaurusPay
token(TaurusPay) := TMP_217(TaurusPay)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
balance = token.balanceOf(this)

IRs:
TMP_218(uint256) = HIGH_LEVEL_CALL, dest:token(TaurusPay), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_218(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
token.transfer(owner,balance)

IRs:
TMP_219(bool) = HIGH_LEVEL_CALL, dest:token(TaurusPay), function:transfer, arguments:['owner', 'balance']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_token,owner,balance)

IRs:
Emit Transfer(_token,owner,balance)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, TaurusPay.onlyOwner()()"];
9->1;
}
// Function: 1398.sol-TaurusPay-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = INITIAL_SUPPLY

IRs:
totalSupply(uint256) := INITIAL_SUPPLY(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[owner] = INITIAL_SUPPLY

IRs:
REF_121(uint256) -> balances[owner]
REF_121(uint256) (->balances) := INITIAL_SUPPLY(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
transfersEnabled = true

IRs:
transfersEnabled(bool) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 1398.sol-TaurusPay-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_95(mapping(address => uint256)) -> allowed[msg.sender]
REF_96(uint256) -> REF_95[_spender]
oldValue(uint256) := REF_96(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_110(bool) = _subtractedValue > oldValue
CONDITION TMP_110"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_97(mapping(address => uint256)) -> allowed[msg.sender]
REF_98(uint256) -> REF_97[_spender]
REF_98(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_99(mapping(address => uint256)) -> allowed[msg.sender]
REF_100(uint256) -> REF_99[_spender]
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_100(uint256) (->allowed) := TMP_111(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_102(mapping(address => uint256)) -> allowed[msg.sender]
REF_103(uint256) -> REF_102[_spender]
Emit Approval(msg.sender,_spender,REF_103)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1398.sol-TaurusPay-enableTransfers(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transfersEnabled = _transfersEnabled

IRs:
transfersEnabled(bool) := _transfersEnabled(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, TaurusPay.onlyOwner()()"];
2->1;
}
// Function: 1398.sol-TaurusPay-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
TMP_139(uint256) = INTERNAL_CALL, TaurusPay.buyTokens(address)(msg.sender)"];
}
// Function: 1398.sol-TaurusPay-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, TaurusPay.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, TaurusPay.canMint()()"];
5->1;
}
// Function: 1398.sol-TaurusPay-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_88(mapping(address => uint256)) -> allowed[msg.sender]
REF_89(uint256) -> REF_88[_spender]
REF_90(mapping(address => uint256)) -> allowed[msg.sender]
REF_91(uint256) -> REF_90[_spender]
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_91', '_addedValue'] 
REF_89(uint256) (->allowed) := TMP_108(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_93(mapping(address => uint256)) -> allowed[msg.sender]
REF_94(uint256) -> REF_93[_spender]
Emit Approval(msg.sender,_spender,REF_94)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1398.sol-TaurusPay-mint(address,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_165 = CONVERT 0 to address
TMP_166(bool) = _to != TMP_165
TMP_167(None) = SOLIDITY_CALL require(bool)(TMP_166)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[owner])

IRs:
REF_127(uint256) -> balances[owner]
TMP_168(bool) = _amount <= REF_127
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_170 = UnaryType.BANG mintingFinished 
TMP_171(None) = SOLIDITY_CALL require(bool)(TMP_170)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_128(uint256) -> balances[_to]
REF_129(uint256) -> balances[_to]
TMP_172(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_129', '_amount'] 
REF_128(uint256) (->balances) := TMP_172(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_owner] = balances[_owner].sub(_amount)

IRs:
REF_131(uint256) -> balances[_owner]
REF_132(uint256) -> balances[_owner]
TMP_173(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_132', '_amount'] 
REF_131(uint256) (->balances) := TMP_173(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_owner,_to,_amount)

IRs:
Emit Transfer(_owner,_to,_amount)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, TaurusPay.canMint()()"];
9->1;
}
// Function: 1398.sol-TaurusPay-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_240(bool) = msg.sender == owner
TMP_241(None) = SOLIDITY_CALL require(bool)(TMP_240)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1398.sol-TaurusPay-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length == numwords * 32 + 4)

IRs:
REF_155 -> LENGTH msg.data
TMP_236(uint256) = numwords * 32
TMP_237(uint256) = TMP_236 + 4
TMP_238(bool) = REF_155 == TMP_237
TMP_239(None) = SOLIDITY_CALL assert(bool)(TMP_238)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1398.sol-TaurusPay-setNumberClaimToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newNumClaimToken > 0)

IRs:
TMP_225(bool) = _newNumClaimToken > 0
TMP_226(None) = SOLIDITY_CALL require(bool)(TMP_225)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
numberClaimToken = _newNumClaimToken

IRs:
numberClaimToken(uint256) := _newNumClaimToken(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, TaurusPay.onlyOwner()()"];
3->1;
}
// Function: 1398.sol-TaurusPay-setPriceClaim(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newPriceClaim > 0)

IRs:
TMP_222(bool) = _newPriceClaim > 0
TMP_223(None) = SOLIDITY_CALL require(bool)(TMP_222)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
priceClaim = _newPriceClaim

IRs:
priceClaim(uint256) := _newPriceClaim(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, TaurusPay.onlyOwner()()"];
3->1;
}
// Function: 1398.sol-TaurusPay-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = TaurusPay Token

IRs:
name(string) := TaurusPay Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = TAPT

IRs:
symbol(string) := TAPT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
INITIAL_SUPPLY = 950 * 10 ** 6 * (10 ** uint256(decimals))

IRs:
TMP_231(uint256) = 10 ** 6
TMP_232(uint256) = 950 * TMP_231
TMP_233 = CONVERT decimals to uint256
TMP_234(uint256) = 10 ** TMP_233
TMP_235(uint256) = TMP_232 * TMP_234
INITIAL_SUPPLY(uint256) := TMP_235(uint256)"];
}
// Function: 1398.sol-TaurusPay-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
tokenAllocated = 0

IRs:
tokenAllocated(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
priceToken = 950000

IRs:
priceToken(uint256) := 950000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
priceClaim = 500000000000000

IRs:
priceClaim(uint256) := 500000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
numberClaimToken = 200 * (10 ** uint256(decimals))

IRs:
TMP_228 = CONVERT decimals to uint256
TMP_229(uint256) = 10 ** TMP_228
TMP_230(uint256) = 200 * TMP_229
numberClaimToken(uint256) := TMP_230(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
startTimeDay = 50400

IRs:
startTimeDay(uint256) := 50400(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
endTimeDay = 51300

IRs:
endTimeDay(uint256) := 51300(uint256)"];
}
// Function: 1398.sol-TaurusPay-transfer(address,uint256)
digraph{
}
// Function: 1398.sol-TaurusPay-transfer(address,uint256,bytes)
digraph{
}
// Function: 1398.sol-TaurusPay-transferFrom(address,address,uint256)
digraph{
}
// Function: 1398.sol-TaurusPay-validPurchaseTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dayTime = _currentTime % 86400

IRs:
TMP_204(uint256) = _currentTime % 86400
dayTime(uint256) := TMP_204(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
startTimeDay <= dayTime && dayTime <= endTimeDay

IRs:
TMP_205(bool) = startTimeDay <= dayTime
TMP_206(bool) = dayTime <= endTimeDay
TMP_207(bool) = TMP_205 && TMP_206
CONDITION TMP_207"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, TaurusPay.canMint()()"];
6->1;
}
// Function: 1398.sol-TaurusPay-validPurchaseTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
addTokens = _weiAmount.mul(priceToken)

IRs:
TMP_150(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_weiAmount', 'priceToken'] 
addTokens(uint256) := TMP_150(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_weiAmount < 10000000000000000

IRs:
TMP_151(bool) = _weiAmount < 10000000000000000
CONDITION TMP_151"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
MinWeiLimitReached(msg.sender,_weiAmount)

IRs:
Emit MinWeiLimitReached(msg.sender,_weiAmount)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
tokenAllocated.add(addTokens) > balances[owner]

IRs:
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokenAllocated', 'addTokens'] 
REF_126(uint256) -> balances[owner]
TMP_154(bool) = TMP_153 > REF_126
CONDITION TMP_154"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
TokenLimitReached(tokenAllocated,addTokens)

IRs:
Emit TokenLimitReached(tokenAllocated,addTokens)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
addTokens

IRs:
RETURN addTokens"];
}
}
