digraph G {
// Function: 142.sol-P4WDToken-P4WDToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 142.sol-P4WDToken-addCompanion(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_companion != address(0))

IRs:
TMP_52 = CONVERT 0 to address
TMP_53(bool) = _companion != TMP_52
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
companions[_companion] = true

IRs:
REF_43(bool) -> companions[_companion]
REF_43(bool) (->companions) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
companionsList.push(_companion)

IRs:
REF_45 -> LENGTH companionsList
TMP_56(uint256) := REF_45(uint256)
TMP_57(uint256) = TMP_56 + 1
REF_45(uint256) (->companionsList) := TMP_57(uint256)
REF_46(address) -> companionsList[TMP_56]
REF_46(address) (->companionsList) := _companion(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
CompanionAdded(_companion)

IRs:
Emit CompanionAdded(_companion)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, P4WDToken.onlyOwner()()"];
5->1;
}
// Function: 142.sol-P4WDToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_2(mapping(address => uint256)) -> allowed[_owner]
REF_3(uint256) -> REF_2[_spender]
RETURN REF_3"];
}
// Function: 142.sol-P4WDToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_25(mapping(address => uint256)) -> allowed[msg.sender]
REF_26(uint256) -> REF_25[_spender]
REF_26(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, P4WDToken.whenNotPaused()()"];
4->1;
}
// Function: 142.sol-P4WDToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_1(uint256) -> balances[_owner]
RETURN REF_1"];
}
// Function: 142.sol-P4WDToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_91 = UnaryType.BANG mintingFinished 
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 142.sol-P4WDToken-companionsListCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
companionsList.length

IRs:
REF_48 -> LENGTH companionsList
RETURN REF_48"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, P4WDToken.onlyOwner()()"];
2->1;
}
// Function: 142.sol-P4WDToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
oldValue(uint256) := REF_35(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_37(bool) = _subtractedValue > oldValue
CONDITION TMP_37"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
REF_37(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_38(mapping(address => uint256)) -> allowed[msg.sender]
REF_39(uint256) -> REF_38[_spender]
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_39(uint256) (->allowed) := TMP_38(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_41(mapping(address => uint256)) -> allowed[msg.sender]
REF_42(uint256) -> REF_41[_spender]
Emit Approval(msg.sender,_spender,REF_42)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, P4WDToken.whenNotPaused()()"];
8->1;
}
// Function: 142.sol-P4WDToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, P4WDToken.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, P4WDToken.canMint()()"];
5->1;
}
// Function: 142.sol-P4WDToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_27(mapping(address => uint256)) -> allowed[msg.sender]
REF_28(uint256) -> REF_27[_spender]
REF_29(mapping(address => uint256)) -> allowed[msg.sender]
REF_30(uint256) -> REF_29[_spender]
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_30', '_addedValue'] 
REF_28(uint256) (->allowed) := TMP_34(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_32(mapping(address => uint256)) -> allowed[msg.sender]
REF_33(uint256) -> REF_32[_spender]
Emit Approval(msg.sender,_spender,REF_33)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, P4WDToken.whenNotPaused()()"];
4->1;
}
// Function: 142.sol-P4WDToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(totalSupply_.add(_amount) <= cap)

IRs:
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
TMP_67(bool) = TMP_66 <= cap
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_69(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_51(uint256) -> balances[_to]
REF_52(uint256) -> balances[_to]
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_52', '_amount'] 
REF_51(uint256) (->balances) := TMP_70(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_72 = CONVERT 0 to address
Emit Transfer(TMP_72,_to,_amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, P4WDToken.onlyOwner()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, P4WDToken.canMint()()"];
8->1;
}
// Function: 142.sol-P4WDToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((msg.sender == owner) || (companions[msg.sender]))

IRs:
TMP_85(bool) = msg.sender == owner
REF_56(bool) -> companions[msg.sender]
TMP_86(bool) = TMP_85 || REF_56
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 142.sol-P4WDToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, P4WDToken.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, P4WDToken.whenNotPaused()()"];
4->1;
}
// Function: 142.sol-P4WDToken-reclaimToken(P4WDToken)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balance = token.balanceOf(this)

IRs:
TMP_79(uint256) = HIGH_LEVEL_CALL, dest:token(P4WDToken), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_79(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.safeTransfer(owner,balance)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(P4WDToken,address,uint256), arguments:['token', 'owner', 'balance'] "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, P4WDToken.onlyOwner()()"];
3->1;
}
// Function: 142.sol-P4WDToken-removeCompanion(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_companion != address(0))

IRs:
TMP_60 = CONVERT 0 to address
TMP_61(bool) = _companion != TMP_60
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
companions[_companion] = false

IRs:
REF_47(bool) -> companions[_companion]
REF_47(bool) (->companions) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
CompanionRemoved(_companion)

IRs:
Emit CompanionRemoved(_companion)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, P4WDToken.onlyOwner()()"];
4->1;
}
// Function: 142.sol-P4WDToken-setCap(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(cap > 0)

IRs:
TMP_5(bool) = cap > 0
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_cap >= totalSupply_)

IRs:
TMP_7(bool) = _cap >= totalSupply_
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
old = cap

IRs:
old(uint256) := cap(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
cap = _cap

IRs:
cap(uint256) := _cap(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
CapChanged(old,cap)

IRs:
Emit CapChanged(old,cap)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, P4WDToken.onlyOwner()()"];
6->1;
}
// Function: 142.sol-P4WDToken-setName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(_name).length != 0)

IRs:
TMP_0 = CONVERT _name to bytes
REF_0 -> LENGTH TMP_0
TMP_1(bool) = REF_0 != 0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
NameChanged()

IRs:
Emit NameChanged()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, P4WDToken.onlyOwner()()"];
4->1;
}
// Function: 142.sol-P4WDToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
symbol = P4WD

IRs:
symbol(string) := P4WD(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimalsFactor = 10 ** uint256(decimals)

IRs:
TMP_83 = CONVERT decimals to uint256
TMP_84(uint256) = 10 ** TMP_83
decimalsFactor(uint256) := TMP_84(uint256)"];
}
// Function: 142.sol-P4WDToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Pay 4ward

IRs:
name(string) := Pay 4ward(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
cap = 10000000000 * decimalsFactor

IRs:
TMP_82(uint256) = 10000000000 * decimalsFactor
cap(uint256) := TMP_82(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 142.sol-P4WDToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 142.sol-P4WDToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_11 = CONVERT 0 to address
TMP_12(bool) = _to != TMP_11
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_4(uint256) -> balances[msg.sender]
TMP_14(bool) = _value <= REF_4
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_6(uint256) -> balances[msg.sender]
TMP_16(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_6', '_value'] 
REF_5(uint256) (->balances) := TMP_16(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_8(uint256) -> balances[_to]
REF_9(uint256) -> balances[_to]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_9', '_value'] 
REF_8(uint256) (->balances) := TMP_17(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, P4WDToken.whenNotPaused()()"];
7->1;
}
// Function: 142.sol-P4WDToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_20 = CONVERT 0 to address
TMP_21(bool) = _to != TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_11(uint256) -> balances[_from]
TMP_23(bool) = _value <= REF_11
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_12(mapping(address => uint256)) -> allowed[_from]
REF_13(uint256) -> REF_12[msg.sender]
TMP_25(bool) = _value <= REF_13
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_14(uint256) -> balances[_from]
REF_15(uint256) -> balances[_from]
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_15', '_value'] 
REF_14(uint256) (->balances) := TMP_27(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_17(uint256) -> balances[_to]
REF_18(uint256) -> balances[_to]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_18', '_value'] 
REF_17(uint256) (->balances) := TMP_28(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_20(mapping(address => uint256)) -> allowed[_from]
REF_21(uint256) -> REF_20[msg.sender]
REF_22(mapping(address => uint256)) -> allowed[_from]
REF_23(uint256) -> REF_22[msg.sender]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_23', '_value'] 
REF_21(uint256) (->allowed) := TMP_29(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, P4WDToken.whenNotPaused()()"];
9->1;
}
// Function: 142.sol-P4WDToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_47 = CONVERT 0 to address
TMP_48(bool) = newOwner != TMP_47
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, P4WDToken.onlyOwner()()"];
4->1;
}
// Function: 142.sol-P4WDToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, P4WDToken.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, P4WDToken.whenPaused()()"];
4->1;
}
// Function: 142.sol-P4WDToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_88 = UnaryType.BANG paused 
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 142.sol-P4WDToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_90(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 142.sol-SafeERC20-safeApprove(P4WDToken,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.approve(spender,value))

IRs:
TMP_109(bool) = HIGH_LEVEL_CALL, dest:token(P4WDToken), function:approve, arguments:['spender', 'value']  
TMP_110(None) = SOLIDITY_CALL assert(bool)(TMP_109)"];
}
// Function: 142.sol-SafeERC20-safeTransfer(P4WDToken,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.transfer(to,value))

IRs:
TMP_105(bool) = HIGH_LEVEL_CALL, dest:token(P4WDToken), function:transfer, arguments:['to', 'value']  
TMP_106(None) = SOLIDITY_CALL assert(bool)(TMP_105)"];
}
// Function: 142.sol-SafeERC20-safeTransferFrom(P4WDToken,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.transferFrom(from,to,value))

IRs:
TMP_107(bool) = HIGH_LEVEL_CALL, dest:token(P4WDToken), function:transferFrom, arguments:['from', 'to', 'value']  
TMP_108(None) = SOLIDITY_CALL assert(bool)(TMP_107)"];
}
// Function: 142.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_102(uint256) = a + b
c(uint256) := TMP_102(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_103(bool) = c >= a
TMP_104(None) = SOLIDITY_CALL assert(bool)(TMP_103)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 142.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_98(uint256) = a / b
RETURN TMP_98"];
}
// Function: 142.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_93(bool) = a == 0
CONDITION TMP_93"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_94(uint256) = a * b
c(uint256) := TMP_94(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_95(uint256) = c / a
TMP_96(bool) = TMP_95 == b
TMP_97(None) = SOLIDITY_CALL assert(bool)(TMP_96)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 142.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_99(bool) = b <= a
TMP_100(None) = SOLIDITY_CALL assert(bool)(TMP_99)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_101(uint256) = a - b
RETURN TMP_101"];
}
}
