digraph G {
// Function: 144.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 144.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_35 = CONVERT 0 to address
TMP_36(bool) = _to != TMP_35
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_38(bool) = _value <= REF_0
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_40(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_41(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 144.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 144.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_16(uint256) -> balances[msg.sender]
TMP_51(bool) = _value <= REF_16
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_17(uint256) -> balances[burner]
REF_18(uint256) -> balances[burner]
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_18', '_value'] 
REF_17(uint256) (->balances) := TMP_53(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_54(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_54(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
}
// Function: 144.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 144.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 144.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 144.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 144.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 144.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 144.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 144.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 144.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 144.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 144.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 144.sol-Pausable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 144.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_18(bool) = msg.sender == owner
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 144.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 144.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 144.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_7 = CONVERT 0 to address
TMP_8(bool) = newOwner != TMP_7
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 144.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 144.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_20 = UnaryType.BANG paused 
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 144.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_22(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 144.sol-Pen-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 144.sol-Pen-Pen(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = INITIAL_SUPPLY

IRs:
totalSupply(uint256) := INITIAL_SUPPLY(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_105(uint256) -> balances[msg.sender]
REF_105(uint256) (->balances) := totalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0x0),msg.sender,totalSupply)

IRs:
TMP_111 = CONVERT 0 to address
Emit Transfer(TMP_111,msg.sender,totalSupply)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
adminAddr = admin

IRs:
adminAddr(address) := admin(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
approve(adminAddr,ADMIN_ALLOWANCE)

IRs:
TMP_113(bool) = INTERNAL_CALL, StandardToken.approve(address,uint256)(adminAddr,ADMIN_ALLOWANCE)"];
}
// Function: 144.sol-Pen-allowance(address,address)
digraph{
}
// Function: 144.sol-Pen-approve(address,uint256)
digraph{
}
// Function: 144.sol-Pen-balanceOf(address)
digraph{
}
// Function: 144.sol-Pen-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_88(mapping(address => uint256)) -> allowed[msg.sender]
REF_89(uint256) -> REF_88[_spender]
oldValue(uint256) := REF_89(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_100(bool) = _subtractedValue > oldValue
CONDITION TMP_100"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_90(mapping(address => uint256)) -> allowed[msg.sender]
REF_91(uint256) -> REF_90[_spender]
REF_91(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_92(mapping(address => uint256)) -> allowed[msg.sender]
REF_93(uint256) -> REF_92[_spender]
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_93(uint256) (->allowed) := TMP_101(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_95(mapping(address => uint256)) -> allowed[msg.sender]
REF_96(uint256) -> REF_95[_spender]
Emit Approval(msg.sender,_spender,REF_96)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 144.sol-Pen-enableTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferEnabled = true

IRs:
transferEnabled(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
approve(tokenOfferingAddr,0)

IRs:
TMP_122(bool) = INTERNAL_CALL, StandardToken.approve(address,uint256)(tokenOfferingAddr,0)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 144.sol-Pen-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_81(mapping(address => uint256)) -> allowed[msg.sender]
REF_82(uint256) -> REF_81[_spender]
REF_83(mapping(address => uint256)) -> allowed[msg.sender]
REF_84(uint256) -> REF_83[_spender]
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_84', '_addedValue'] 
REF_82(uint256) (->allowed) := TMP_98(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_86(mapping(address => uint256)) -> allowed[msg.sender]
REF_87(uint256) -> REF_86[_spender]
Emit Approval(msg.sender,_spender,REF_87)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 144.sol-Pen-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_137(bool) = msg.sender == owner
TMP_138(None) = SOLIDITY_CALL require(bool)(TMP_137)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 144.sol-Pen-onlyTokenOfferingAddrNotSet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOfferingAddr == address(0x0))

IRs:
TMP_144 = CONVERT 0 to address
TMP_145(bool) = tokenOfferingAddr == TMP_144
TMP_146(None) = SOLIDITY_CALL require(bool)(TMP_145)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 144.sol-Pen-onlyWhenTransferAllowed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(transferEnabled || msg.sender == adminAddr || msg.sender == tokenOfferingAddr)

IRs:
TMP_139(bool) = msg.sender == adminAddr
TMP_140(bool) = transferEnabled || TMP_139
TMP_141(bool) = msg.sender == tokenOfferingAddr
TMP_142(bool) = TMP_140 || TMP_141
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 144.sol-Pen-setTokenOffering(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! transferEnabled)

IRs:
TMP_114 = UnaryType.BANG transferEnabled 
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->8;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(amount <= TOKEN_OFFERING_ALLOWANCE)

IRs:
TMP_116(bool) = amount <= TOKEN_OFFERING_ALLOWANCE
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
approve(offeringAddr,amount)

IRs:
TMP_118(bool) = INTERNAL_CALL, StandardToken.approve(address,uint256)(offeringAddr,amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenOfferingAddr = offeringAddr

IRs:
tokenOfferingAddr(address) := offeringAddr(address)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyTokenOfferingAddrNotSet()

IRs:
MODIFIER_CALL, Pen.onlyTokenOfferingAddrNotSet()()"];
7->1;
8[label="Node Type: IF 8

EXPRESSION:
(amountForSale == 0)

IRs:
TMP_121(bool) = amountForSale == 0
CONDITION TMP_121"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
amount = TOKEN_OFFERING_ALLOWANCE

IRs:
amount(uint256) := TOKEN_OFFERING_ALLOWANCE(uint256)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
amount = amountForSale

IRs:
amount(uint256) := amountForSale(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->3;
}
// Function: 144.sol-Pen-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
symbol = PEN

IRs:
symbol(string) := PEN(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Pen

IRs:
name(string) := Pen(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
INITIAL_SUPPLY = 1250000000 * (10 ** uint256(decimals))

IRs:
TMP_130 = CONVERT decimals to uint256
TMP_131(uint256) = 10 ** TMP_130
TMP_132(uint256) = 1250000000 * TMP_131
INITIAL_SUPPLY(uint256) := TMP_132(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
TOKEN_OFFERING_ALLOWANCE = 937500000 * (10 ** uint256(decimals))

IRs:
TMP_133 = CONVERT decimals to uint256
TMP_134(uint256) = 10 ** TMP_133
TMP_135(uint256) = 937500000 * TMP_134
TOKEN_OFFERING_ALLOWANCE(uint256) := TMP_135(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
ADMIN_ALLOWANCE = INITIAL_SUPPLY - TOKEN_OFFERING_ALLOWANCE

IRs:
TMP_136(uint256) = INITIAL_SUPPLY - TOKEN_OFFERING_ALLOWANCE
ADMIN_ALLOWANCE(uint256) := TMP_136(uint256)"];
}
// Function: 144.sol-Pen-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
transferEnabled = false

IRs:
transferEnabled(bool) := False(bool)"];
}
// Function: 144.sol-Pen-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(to,value)

IRs:
TMP_124(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(to,value)
RETURN TMP_124"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyWhenTransferAllowed()

IRs:
MODIFIER_CALL, Pen.onlyWhenTransferAllowed()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
validDestination(to)

IRs:
MODIFIER_CALL, Pen.validDestination(address)(to)"];
3->1;
}
// Function: 144.sol-Pen-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(from,to,value)

IRs:
TMP_127(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(from,to,value)
RETURN TMP_127"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyWhenTransferAllowed()

IRs:
MODIFIER_CALL, Pen.onlyWhenTransferAllowed()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
validDestination(to)

IRs:
MODIFIER_CALL, Pen.validDestination(address)(to)"];
3->1;
}
// Function: 144.sol-Pen-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_81 = CONVERT 0 to address
TMP_82(bool) = newOwner != TMP_81
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 144.sol-Pen-validDestination(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to != address(0x0))

IRs:
TMP_147 = CONVERT 0 to address
TMP_148(bool) = to != TMP_147
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(this))

IRs:
TMP_150 = CONVERT this to address
TMP_151(bool) = to != TMP_150
TMP_152(None) = SOLIDITY_CALL require(bool)(TMP_151)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(to != owner)

IRs:
TMP_153(bool) = to != owner
TMP_154(None) = SOLIDITY_CALL require(bool)(TMP_153)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(to != address(adminAddr))

IRs:
TMP_155 = CONVERT adminAddr to address
TMP_156(bool) = to != TMP_155
TMP_157(None) = SOLIDITY_CALL require(bool)(TMP_156)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(to != address(tokenOfferingAddr))

IRs:
TMP_158 = CONVERT tokenOfferingAddr to address
TMP_159(bool) = to != TMP_158
TMP_160(None) = SOLIDITY_CALL require(bool)(TMP_159)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 144.sol-PenCrowdsale-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 144.sol-PenCrowdsale-PenCrowdsale(uint256,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(testToEtherRate > 0)

IRs:
TMP_172(bool) = testToEtherRate > 0
TMP_173(None) = SOLIDITY_CALL require(bool)(TMP_172)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(beneficiaryAddr != address(0))

IRs:
TMP_174 = CONVERT 0 to address
TMP_175(bool) = beneficiaryAddr != TMP_174
TMP_176(None) = SOLIDITY_CALL require(bool)(TMP_175)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(tokenAddress != address(0))

IRs:
TMP_177 = CONVERT 0 to address
TMP_178(bool) = tokenAddress != TMP_177
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token = Pen(tokenAddress)

IRs:
TMP_180 = CONVERT tokenAddress to Pen
token(Pen) := TMP_180(Pen)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
rate = testToEtherRate

IRs:
rate(uint256) := testToEtherRate(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
beneficiary = beneficiaryAddr

IRs:
beneficiary(address) := beneficiaryAddr(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
stage = Stages.Setup

IRs:
REF_106(PenCrowdsale.Stages) -> Stages.Setup
stage(PenCrowdsale.Stages) := REF_106(PenCrowdsale.Stages)"];
}
// Function: 144.sol-PenCrowdsale-allocateTokensBeforeOffering(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
! token.transferFrom(token.owner(),to,tokens)

IRs:
TMP_221(address) = HIGH_LEVEL_CALL, dest:token(Pen), function:owner, arguments:[]  
TMP_222(bool) = HIGH_LEVEL_CALL, dest:token(Pen), function:transferFrom, arguments:['TMP_221', 'to', 'tokens']  
TMP_223 = UnaryType.BANG TMP_222 
CONDITION TMP_223"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_224(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
atStage(Stages.Setup)

IRs:
REF_134(PenCrowdsale.Stages) -> Stages.Setup
MODIFIER_CALL, PenCrowdsale.atStage(PenCrowdsale.Stages)(REF_134)"];
6->1;
}
// Function: 144.sol-PenCrowdsale-atStage(PenCrowdsale.Stages)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(stage == expectedStage)

IRs:
TMP_242(bool) = stage == expectedStage
TMP_243(None) = SOLIDITY_CALL require(bool)(TMP_242)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 144.sol-PenCrowdsale-batchAllocateTokensBeforeOffering(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(toList.length == tokensList.length)

IRs:
REF_135 -> LENGTH toList
REF_136 -> LENGTH tokensList
TMP_227(bool) = REF_135 == REF_136
TMP_228(None) = SOLIDITY_CALL require(bool)(TMP_227)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < toList.length

IRs:
REF_137 -> LENGTH toList
TMP_229(bool) = i < REF_137
CONDITION TMP_229"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allocateTokensBeforeOffering(toList[i],tokensList[i])

IRs:
REF_138(address) -> toList[i]
REF_139(uint256) -> tokensList[i]
TMP_230(bool) = INTERNAL_CALL, PenCrowdsale.allocateTokensBeforeOffering(address,uint256)(REF_138,REF_139)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_231(uint32) := i(uint32)
i(uint32) = i + 1"];
7->5;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
atStage(Stages.Setup)

IRs:
REF_140(PenCrowdsale.Stages) -> Stages.Setup
MODIFIER_CALL, PenCrowdsale.atStage(PenCrowdsale.Stages)(REF_140)"];
10->1;
}
// Function: 144.sol-PenCrowdsale-buy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
whitelists[msg.sender]

IRs:
REF_119(bool) -> whitelists[msg.sender]
CONDITION REF_119"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buyTokens()

IRs:
INTERNAL_CALL, PenCrowdsale.buyTokens()()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_201(None) = SOLIDITY_CALL revert()()"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
atStage(Stages.OfferingStarted)

IRs:
REF_120(PenCrowdsale.Stages) -> Stages.OfferingStarted
MODIFIER_CALL, PenCrowdsale.atStage(PenCrowdsale.Stages)(REF_120)"];
7->1;
}
// Function: 144.sol-PenCrowdsale-buyTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
contributionInWei = msg.value

IRs:
contributionInWei(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
participant = msg.sender

IRs:
participant(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
tokens = contributionInWei.mul(rate)

IRs:
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['contributionInWei', 'rate'] 
tokens(uint256) := TMP_207(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! token.transferFrom(token.owner(),participant,tokens)

IRs:
TMP_208(address) = HIGH_LEVEL_CALL, dest:token(Pen), function:owner, arguments:[]  
TMP_209(bool) = HIGH_LEVEL_CALL, dest:token(Pen), function:transferFrom, arguments:['TMP_208', 'participant', 'tokens']  
TMP_210 = UnaryType.BANG TMP_209 
CONDITION TMP_210"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_211(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
weiRaised = weiRaised.add(contributionInWei)

IRs:
TMP_212(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'contributionInWei'] 
weiRaised(uint256) := TMP_212(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
contributions[participant] = contributions[participant].add(contributionInWei)

IRs:
REF_126(uint256) -> contributions[participant]
REF_127(uint256) -> contributions[participant]
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_127', 'contributionInWei'] 
REF_126(uint256) (->contributions) := TMP_213(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
remainCap = FUNDING_ETH_HARD_CAP.sub(weiRaised)

IRs:
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['FUNDING_ETH_HARD_CAP', 'weiRaised'] 
remainCap(uint256) := TMP_214(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
weiRaised >= FUNDING_ETH_HARD_CAP

IRs:
TMP_215(bool) = weiRaised >= FUNDING_ETH_HARD_CAP
CONDITION TMP_215"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
endOfferingImpl()

IRs:
INTERNAL_CALL, PenCrowdsale.endOfferingImpl()()"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
beneficiary.transfer(contributionInWei)

IRs:
Transfer dest:beneficiary value:contributionInWei"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
TokenPurchase(msg.sender,contributionInWei,tokens)

IRs:
Emit TokenPurchase(msg.sender,contributionInWei,tokens)"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
validPurchase()

IRs:
MODIFIER_CALL, PenCrowdsale.validPurchase()()"];
15->1;
}
// Function: 144.sol-PenCrowdsale-endOffering()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
endOfferingImpl()

IRs:
INTERNAL_CALL, PenCrowdsale.endOfferingImpl()()"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
atStage(Stages.OfferingStarted)

IRs:
REF_118(PenCrowdsale.Stages) -> Stages.OfferingStarted
MODIFIER_CALL, PenCrowdsale.atStage(PenCrowdsale.Stages)(REF_118)"];
3->1;
}
// Function: 144.sol-PenCrowdsale-endOfferingImpl()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
endTime = now

IRs:
endTime(uint256) := now(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
stage = Stages.OfferingEnded

IRs:
REF_131(PenCrowdsale.Stages) -> Stages.OfferingEnded
stage(PenCrowdsale.Stages) := REF_131(PenCrowdsale.Stages)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OfferingCloses(endTime,weiRaised)

IRs:
Emit OfferingCloses(endTime,weiRaised)"];
}
// Function: 144.sol-PenCrowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buy()

IRs:
TMP_181(bool) = INTERNAL_CALL, PenCrowdsale.buy()()"];
}
// Function: 144.sol-PenCrowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endTime || stage == Stages.OfferingEnded

IRs:
TMP_204(bool) = now > endTime
REF_121(PenCrowdsale.Stages) -> Stages.OfferingEnded
TMP_205(bool) = stage == REF_121
TMP_206(bool) = TMP_204 || TMP_205
RETURN TMP_206"];
}
// Function: 144.sol-PenCrowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_240(bool) = msg.sender == owner
TMP_241(None) = SOLIDITY_CALL require(bool)(TMP_240)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 144.sol-PenCrowdsale-ownerSafeWithdrawal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
beneficiary.transfer(this.balance)

IRs:
REF_108(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:beneficiary value:REF_108"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 144.sol-PenCrowdsale-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 144.sol-PenCrowdsale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
FUNDING_ETH_HARD_CAP = 15000 * 1000000000000000000

IRs:
TMP_236(uint256) = 15000 * 1000000000000000000
FUNDING_ETH_HARD_CAP(uint256) := TMP_236(uint256)"];
}
// Function: 144.sol-PenCrowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
minContribution = 50 ** 16

IRs:
TMP_234(uint256) = 50 ** 16
minContribution(uint256) := TMP_234(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
maxContribution = 100 ** 18

IRs:
TMP_235(uint256) = 100 ** 18
maxContribution(uint256) := TMP_235(uint256)"];
}
// Function: 144.sol-PenCrowdsale-startOffering(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stage = Stages.OfferingStarted

IRs:
REF_115(PenCrowdsale.Stages) -> Stages.OfferingStarted
stage(PenCrowdsale.Stages) := REF_115(PenCrowdsale.Stages)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
startTime = now

IRs:
startTime(uint256) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
capReleaseTimestamp = startTime + 18000

IRs:
TMP_191(uint256) = startTime + 18000
capReleaseTimestamp(uint256) := TMP_191(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
extraTime = capReleaseTimestamp + 604800

IRs:
TMP_192(uint256) = capReleaseTimestamp + 604800
extraTime(uint256) := TMP_192(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
endTime = extraTime.add(durationInSeconds)

IRs:
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['extraTime', 'durationInSeconds'] 
endTime(uint256) := TMP_193(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
OfferingOpens(startTime,endTime)

IRs:
Emit OfferingOpens(startTime,endTime)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
atStage(Stages.Setup)

IRs:
REF_117(PenCrowdsale.Stages) -> Stages.Setup
MODIFIER_CALL, PenCrowdsale.atStage(PenCrowdsale.Stages)(REF_117)"];
8->1;
}
// Function: 144.sol-PenCrowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_167 = CONVERT 0 to address
TMP_168(bool) = newOwner != TMP_167
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 144.sol-PenCrowdsale-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 144.sol-PenCrowdsale-updateRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rate = bouToEtherRate

IRs:
rate(uint256) := bouToEtherRate(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
atStage(Stages.Setup)

IRs:
REF_109(PenCrowdsale.Stages) -> Stages.Setup
MODIFIER_CALL, PenCrowdsale.atStage(PenCrowdsale.Stages)(REF_109)"];
3->1;
}
// Function: 144.sol-PenCrowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= startTime && now <= endTime && stage == Stages.OfferingStarted)

IRs:
TMP_244(bool) = now >= startTime
TMP_245(bool) = now <= endTime
TMP_246(bool) = TMP_244 && TMP_245
REF_141(PenCrowdsale.Stages) -> Stages.OfferingStarted
TMP_247(bool) = stage == REF_141
TMP_248(bool) = TMP_246 && TMP_247
TMP_249(None) = SOLIDITY_CALL require(bool)(TMP_248)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > capReleaseTimestamp

IRs:
TMP_250(bool) = now > capReleaseTimestamp
CONDITION TMP_250"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
maxContribution = 5000 * 1000000000000000000

IRs:
TMP_251(uint256) = 5000 * 1000000000000000000
maxContribution(uint256) := TMP_251(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
contributionInWei = msg.value

IRs:
contributionInWei(uint256) := msg.value(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
participant = msg.sender

IRs:
participant(address) := msg.sender(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(contributionInWei <= maxContribution.sub(contributions[participant]))

IRs:
REF_143(uint256) -> contributions[participant]
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['maxContribution', 'REF_143'] 
TMP_253(bool) = contributionInWei <= TMP_252
TMP_254(None) = SOLIDITY_CALL require(bool)(TMP_253)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(participant != address(0) && contributionInWei >= minContribution && contributionInWei <= maxContribution)

IRs:
TMP_255 = CONVERT 0 to address
TMP_256(bool) = participant != TMP_255
TMP_257(bool) = contributionInWei >= minContribution
TMP_258(bool) = TMP_256 && TMP_257
TMP_259(bool) = contributionInWei <= maxContribution
TMP_260(bool) = TMP_258 && TMP_259
TMP_261(None) = SOLIDITY_CALL require(bool)(TMP_260)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(weiRaised.add(contributionInWei) <= FUNDING_ETH_HARD_CAP)

IRs:
TMP_262(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'contributionInWei'] 
TMP_263(bool) = TMP_262 <= FUNDING_ETH_HARD_CAP
TMP_264(None) = SOLIDITY_CALL require(bool)(TMP_263)"];
9->10;
10[label="Node Type: _ 10
"];
}
// Function: 144.sol-PenCrowdsale-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_237 = UnaryType.BANG paused 
TMP_238(None) = SOLIDITY_CALL require(bool)(TMP_237)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 144.sol-PenCrowdsale-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_239(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 144.sol-PenCrowdsale-whitelist(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < users.length

IRs:
REF_110 -> LENGTH users
TMP_186(bool) = i < REF_110
CONDITION TMP_186"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whitelists[users[i]] = true

IRs:
REF_111(address) -> users[i]
REF_112(bool) -> whitelists[REF_111]
REF_112(bool) (->whitelists) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_187(uint32) := i(uint32)
i(uint32) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->3;
}
// Function: 144.sol-PenCrowdsale-whitelistRemove(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(whitelists[user])

IRs:
REF_113(bool) -> whitelists[user]
TMP_189(None) = SOLIDITY_CALL require(bool)(REF_113)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whitelists[user] = false

IRs:
REF_114(bool) -> whitelists[user]
REF_114(bool) (->whitelists) := False(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 144.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_32(uint256) = a + b
c(uint256) := TMP_32(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_33(bool) = c >= a
TMP_34(None) = SOLIDITY_CALL assert(bool)(TMP_33)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 144.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_28(uint256) = a / b
c(uint256) := TMP_28(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 144.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_23(bool) = a == 0
CONDITION TMP_23"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_24(uint256) = a * b
c(uint256) := TMP_24(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_25(uint256) = c / a
TMP_26(bool) = TMP_25 == b
TMP_27(None) = SOLIDITY_CALL assert(bool)(TMP_26)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 144.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_29(bool) = b <= a
TMP_30(None) = SOLIDITY_CALL assert(bool)(TMP_29)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_31(uint256) = a - b
RETURN TMP_31"];
}
// Function: 144.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_45(mapping(address => uint256)) -> allowed[_owner]
REF_46(uint256) -> REF_45[_spender]
RETURN REF_46"];
}
// Function: 144.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_43(mapping(address => uint256)) -> allowed[msg.sender]
REF_44(uint256) -> REF_43[_spender]
REF_44(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 144.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 144.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_54(mapping(address => uint256)) -> allowed[msg.sender]
REF_55(uint256) -> REF_54[_spender]
oldValue(uint256) := REF_55(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_78(bool) = _subtractedValue > oldValue
CONDITION TMP_78"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_56(mapping(address => uint256)) -> allowed[msg.sender]
REF_57(uint256) -> REF_56[_spender]
REF_57(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_58(mapping(address => uint256)) -> allowed[msg.sender]
REF_59(uint256) -> REF_58[_spender]
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_59(uint256) (->allowed) := TMP_79(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_61(mapping(address => uint256)) -> allowed[msg.sender]
REF_62(uint256) -> REF_61[_spender]
Emit Approval(msg.sender,_spender,REF_62)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 144.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_47(mapping(address => uint256)) -> allowed[msg.sender]
REF_48(uint256) -> REF_47[_spender]
REF_49(mapping(address => uint256)) -> allowed[msg.sender]
REF_50(uint256) -> REF_49[_spender]
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_50', '_addedValue'] 
REF_48(uint256) (->allowed) := TMP_76(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_52(mapping(address => uint256)) -> allowed[msg.sender]
REF_53(uint256) -> REF_52[_spender]
Emit Approval(msg.sender,_spender,REF_53)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 144.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 144.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_64 = CONVERT 0 to address
TMP_65(bool) = _to != TMP_64
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_29(uint256) -> balances[_from]
TMP_67(bool) = _value <= REF_29
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_30(mapping(address => uint256)) -> allowed[_from]
REF_31(uint256) -> REF_30[msg.sender]
TMP_69(bool) = _value <= REF_31
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_32(uint256) -> balances[_from]
REF_33(uint256) -> balances[_from]
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_33', '_value'] 
REF_32(uint256) (->balances) := TMP_71(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_35(uint256) -> balances[_to]
REF_36(uint256) -> balances[_to]
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_36', '_value'] 
REF_35(uint256) (->balances) := TMP_72(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_38(mapping(address => uint256)) -> allowed[_from]
REF_39(uint256) -> REF_38[msg.sender]
REF_40(mapping(address => uint256)) -> allowed[_from]
REF_41(uint256) -> REF_40[msg.sender]
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_41', '_value'] 
REF_39(uint256) (->allowed) := TMP_73(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
