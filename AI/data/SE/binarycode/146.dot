digraph G {
// Function: 146.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 146.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 146.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 146.sol-ERC20-totalSupply()
digraph{
}
// Function: 146.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 146.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 146.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 146.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 146.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 146.sol-SafeERC20-safeApprove(ERC20,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.approve(spender,value))

IRs:
TMP_4(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:approve, arguments:['spender', 'value']  
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
}
// Function: 146.sol-SafeERC20-safeTransfer(ERC20Basic,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.transfer(to,value))

IRs:
TMP_0(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['to', 'value']  
TMP_1(None) = SOLIDITY_CALL assert(bool)(TMP_0)"];
}
// Function: 146.sol-SafeERC20-safeTransferFrom(ERC20,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.transferFrom(from,to,value))

IRs:
TMP_2(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transferFrom, arguments:['from', 'to', 'value']  
TMP_3(None) = SOLIDITY_CALL assert(bool)(TMP_2)"];
}
// Function: 146.sol-TokenTimelock-TokenTimelock(ERC20Basic,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_releaseTime > now)

IRs:
TMP_6(bool) = _releaseTime > now
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token = _token

IRs:
token(ERC20Basic) := _token(ERC20Basic)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
beneficiary = _beneficiary

IRs:
beneficiary(address) := _beneficiary(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
releaseTime = _releaseTime

IRs:
releaseTime(uint256) := _releaseTime(uint256)"];
}
// Function: 146.sol-TokenTimelock-release()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= releaseTime)

IRs:
TMP_8(bool) = now >= releaseTime
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = token.balanceOf(this)

IRs:
TMP_10(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:balanceOf, arguments:['this']  
amount(uint256) := TMP_10(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(amount > 0)

IRs:
TMP_11(bool) = amount > 0
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.safeTransfer(beneficiary,amount)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['token', 'beneficiary', 'amount'] "];
}
}
