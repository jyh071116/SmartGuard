digraph G {
// Function: 147.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 147.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 147.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 147.sol-ERC20-totalSupply()
digraph{
}
// Function: 147.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 147.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 147.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 147.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 147.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 147.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 147.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_1(mapping(address => uint256)) -> allowed[_owner]
REF_2(uint256) -> REF_1[_spender]
RETURN REF_2"];
}
// Function: 147.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_10(mapping(address => uint256)) -> allowed[msg.sender]
REF_11(uint256) -> REF_10[_spender]
REF_11(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
}
// Function: 147.sol-StandardToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 147.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_3(uint256) -> balances[msg.sender]
TMP_12(bool) = _value <= REF_3
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_14 = CONVERT 0 to address
TMP_15(bool) = _to != TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_4(uint256) -> balances[msg.sender]
REF_5(uint256) -> balances[msg.sender]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_7(uint256) -> balances[_to]
REF_8(uint256) -> balances[_to]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', '_value'] 
REF_7(uint256) (->balances) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_12(uint256) -> balances[_from]
TMP_21(bool) = _value <= REF_12
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_13(mapping(address => uint256)) -> allowed[_from]
REF_14(uint256) -> REF_13[msg.sender]
TMP_23(bool) = _value <= REF_14
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_25 = CONVERT 0 to address
TMP_26(bool) = _to != TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_15(uint256) -> balances[_from]
REF_16(uint256) -> balances[_from]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_16', '_value'] 
REF_15(uint256) (->balances) := TMP_28(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_18(uint256) -> balances[_to]
REF_19(uint256) -> balances[_to]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_19', '_value'] 
REF_18(uint256) (->balances) := TMP_29(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_21(mapping(address => uint256)) -> allowed[_from]
REF_22(uint256) -> REF_21[msg.sender]
REF_23(mapping(address => uint256)) -> allowed[_from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_24', '_value'] 
REF_22(uint256) (->allowed) := TMP_30(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-allowance(address,address)
digraph{
}
// Function: 147.sol-token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_133(mapping(address => uint256)) -> allowed[msg.sender]
REF_134(uint256) -> REF_133[_spender]
REF_134(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-balanceOf(address)
digraph{
}
// Function: 147.sol-token-changeowner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_72(bool) = msg.sender == owner
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_newowner != address(0))

IRs:
TMP_74 = CONVERT 0 to address
TMP_75(bool) = _newowner != TMP_74
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newowner

IRs:
owner(address) := _newowner(address)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply

IRs:
totalSupply_(uint256) := totalSupply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_52(uint256) -> balances[msg.sender]
REF_52(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 147.sol-token-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_52(bool) = msg.value > 0
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
exchangeFlag

IRs:
CONDITION exchangeFlag"];
2->3[label="True"];
2->24[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
msg.value >= minWei && msg.value <= maxWei

IRs:
TMP_54(bool) = msg.value >= minWei
TMP_55(bool) = msg.value <= maxWei
TMP_56(bool) = TMP_54 && TMP_55
CONDITION TMP_56"];
3->4[label="True"];
3->22[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
raisedAmount < maxRaiseAmount

IRs:
TMP_57(bool) = raisedAmount < maxRaiseAmount
CONDITION TMP_57"];
4->5[label="True"];
4->21[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
valueNeed = msg.value

IRs:
valueNeed(uint256) := msg.value(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
raisedAmount = raisedAmount.add(msg.value)

IRs:
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['raisedAmount', 'msg.value'] 
raisedAmount(uint256) := TMP_58(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
raisedAmount > maxRaiseAmount

IRs:
TMP_59(bool) = raisedAmount > maxRaiseAmount
CONDITION TMP_59"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
valueLeft = raisedAmount.sub(maxRaiseAmount)

IRs:
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['raisedAmount', 'maxRaiseAmount'] 
valueLeft(uint256) := TMP_60(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
valueNeed = msg.value.sub(valueLeft)

IRs:
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['msg.value', 'valueLeft'] 
valueNeed(uint256) := TMP_61(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
msg.sender.transfer(valueLeft)

IRs:
Transfer dest:msg.sender value:valueLeft"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
raisedAmount = maxRaiseAmount

IRs:
raisedAmount(uint256) := maxRaiseAmount(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
raisedAmount >= maxRaiseAmount

IRs:
TMP_63(bool) = raisedAmount >= maxRaiseAmount
CONDITION TMP_63"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
exchangeFlag = false

IRs:
exchangeFlag(bool) := False(bool)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
_value = valueNeed.mul(raiseRatio)

IRs:
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['valueNeed', 'raiseRatio'] 
_value(uint256) := TMP_64(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
require(bool)(_value <= balances[owner])

IRs:
REF_58(uint256) -> balances[owner]
TMP_65(bool) = _value <= REF_58
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
balances[owner] = balances[owner].sub(_value)

IRs:
REF_59(uint256) -> balances[owner]
REF_60(uint256) -> balances[owner]
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_60', '_value'] 
REF_59(uint256) (->balances) := TMP_67(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(_value)

IRs:
REF_62(uint256) -> balances[msg.sender]
REF_63(uint256) -> balances[msg.sender]
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_63', '_value'] 
REF_62(uint256) (->balances) := TMP_68(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
Transfer(owner,msg.sender,_value)

IRs:
Emit Transfer(owner,msg.sender,_value)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->23;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
msg.sender.transfer(msg.value)

IRs:
Transfer dest:msg.sender value:msg.value"];
22->23;
23[label="Node Type: END_IF 23
"];
23->25;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
msg.sender.transfer(msg.value)

IRs:
Transfer dest:msg.sender value:msg.value"];
24->25;
25[label="Node Type: END_IF 25
"];
}
// Function: 147.sol-token-freeze(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_87(bool) = msg.sender == owner
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_89 = CONVERT 0 to address
TMP_90(bool) = _target != TMP_89
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
frozenAccount[_target] = _freeze

IRs:
REF_72(bool) -> frozenAccount[_target]
REF_72(bool) (->frozenAccount) := _freeze(bool)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-freezeWithTimestamp(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_92(bool) = msg.sender == owner
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_94 = CONVERT 0 to address
TMP_95(bool) = _target != TMP_94
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
frozenTimestamp[_target] = _timestamp

IRs:
REF_73(uint256) -> frozenTimestamp[_target]
REF_73(uint256) (->frozenTimestamp) := _timestamp(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-generateToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_77(bool) = msg.sender == owner
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_79 = CONVERT 0 to address
TMP_80(bool) = _target != TMP_79
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_target] = balances[_target].add(_amount)

IRs:
REF_67(uint256) -> balances[_target]
REF_68(uint256) -> balances[_target]
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_68', '_amount'] 
REF_67(uint256) (->balances) := TMP_82(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_83(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = totalSupply_

IRs:
totalSupply(uint256) := totalSupply_(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-getBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
address(this).balance

IRs:
TMP_174 = CONVERT this to address
TMP_175(uint256) = SOLIDITY_CALL balance(address)(TMP_174)
RETURN TMP_175"];
}
// Function: 147.sol-token-getFrozenAccount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_171 = CONVERT 0 to address
TMP_172(bool) = _target != TMP_171
TMP_173(None) = SOLIDITY_CALL require(bool)(TMP_172)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
frozenAccount[_target]

IRs:
REF_136(bool) -> frozenAccount[_target]
RETURN REF_136"];
}
// Function: 147.sol-token-getFrozenTimestamp(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_168 = CONVERT 0 to address
TMP_169(bool) = _target != TMP_168
TMP_170(None) = SOLIDITY_CALL require(bool)(TMP_169)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
frozenTimestamp[_target]

IRs:
REF_135(uint256) -> frozenTimestamp[_target]
RETURN REF_135"];
}
// Function: 147.sol-token-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_192(bool) = msg.sender == owner
TMP_193(None) = SOLIDITY_CALL require(bool)(TMP_192)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_194(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
}
// Function: 147.sol-token-multiFreeze(address[],bool[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_97(bool) = msg.sender == owner
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_targets.length == _freezes.length)

IRs:
REF_74 -> LENGTH _targets
REF_75 -> LENGTH _freezes
TMP_99(bool) = REF_74 == REF_75
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
len = _targets.length

IRs:
REF_76 -> LENGTH _targets
len(uint256) := REF_76(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(len > 0)

IRs:
TMP_101(bool) = len > 0
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->14;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < len

IRs:
TMP_103(bool) = i < len
CONDITION TMP_103"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_target = _targets[i]

IRs:
REF_77(address) -> _targets[i]
_target(address) := REF_77(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_104 = CONVERT 0 to address
TMP_105(bool) = _target != TMP_104
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_freeze = _freezes[i]

IRs:
REF_78(bool) -> _freezes[i]
_freeze(bool) := REF_78(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
frozenAccount[_target] = _freeze

IRs:
REF_79(bool) -> frozenAccount[_target]
REF_79(bool) (->frozenAccount) := _freeze(bool)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i = i.add(1)

IRs:
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['i', '1'] 
i(uint256) := TMP_107(uint256)"];
13->8;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-multiFreezeWithTimestamp(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_108(bool) = msg.sender == owner
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_targets.length == _timestamps.length)

IRs:
REF_81 -> LENGTH _targets
REF_82 -> LENGTH _timestamps
TMP_110(bool) = REF_81 == REF_82
TMP_111(None) = SOLIDITY_CALL require(bool)(TMP_110)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
len = _targets.length

IRs:
REF_83 -> LENGTH _targets
len(uint256) := REF_83(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(len > 0)

IRs:
TMP_112(bool) = len > 0
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->14;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < len

IRs:
TMP_114(bool) = i < len
CONDITION TMP_114"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_target = _targets[i]

IRs:
REF_84(address) -> _targets[i]
_target(address) := REF_84(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(_target != address(0))

IRs:
TMP_115 = CONVERT 0 to address
TMP_116(bool) = _target != TMP_115
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_timestamp = _timestamps[i]

IRs:
REF_85(uint256) -> _timestamps[i]
_timestamp(uint256) := REF_85(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
frozenTimestamp[_target] = _timestamp

IRs:
REF_86(uint256) -> frozenTimestamp[_target]
REF_86(uint256) (->frozenTimestamp) := _timestamp(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i = i.add(1)

IRs:
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['i', '1'] 
i(uint256) := TMP_118(uint256)"];
13->8;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-multiTransfer(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_88(bool) -> frozenAccount[msg.sender]
TMP_119 = UnaryType.BANG REF_88 
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now > frozenTimestamp[msg.sender])

IRs:
REF_89(uint256) -> frozenTimestamp[msg.sender]
TMP_121(bool) = now > REF_89
TMP_122(None) = SOLIDITY_CALL require(bool)(TMP_121)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_tos.length == _values.length)

IRs:
REF_90 -> LENGTH _tos
REF_91 -> LENGTH _values
TMP_123(bool) = REF_90 == REF_91
TMP_124(None) = SOLIDITY_CALL require(bool)(TMP_123)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
len = _tos.length

IRs:
REF_92 -> LENGTH _tos
len(uint256) := REF_92(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(len > 0)

IRs:
TMP_125(bool) = len > 0
TMP_126(None) = SOLIDITY_CALL require(bool)(TMP_125)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
amount = 0

IRs:
amount(uint256) := 0(uint256)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->13;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < len

IRs:
TMP_127(bool) = i < len
CONDITION TMP_127"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
amount = amount.add(_values[i])

IRs:
REF_94(uint256) -> _values[i]
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['amount', 'REF_94'] 
amount(uint256) := TMP_128(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i = i.add(1)

IRs:
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['i', '1'] 
i(uint256) := TMP_129(uint256)"];
12->10;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool)(amount <= balances[msg.sender])

IRs:
REF_96(uint256) -> balances[msg.sender]
TMP_130(bool) = amount <= REF_96
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->24;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
j < len

IRs:
TMP_132(bool) = j < len
CONDITION TMP_132"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
_to = _tos[j]

IRs:
REF_97(address) -> _tos[j]
_to(address) := REF_97(address)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_133 = CONVERT 0 to address
TMP_134(bool) = _to != TMP_133
TMP_135(None) = SOLIDITY_CALL require(bool)(TMP_134)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
balances[_to] = balances[_to].add(_values[j])

IRs:
REF_98(uint256) -> balances[_to]
REF_99(uint256) -> balances[_to]
REF_101(uint256) -> _values[j]
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_99', 'REF_101'] 
REF_98(uint256) (->balances) := TMP_136(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_values[j])

IRs:
REF_102(uint256) -> balances[msg.sender]
REF_103(uint256) -> balances[msg.sender]
REF_105(uint256) -> _values[j]
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_103', 'REF_105'] 
REF_102(uint256) (->balances) := TMP_137(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Transfer(msg.sender,_to,_values[j])

IRs:
REF_106(uint256) -> _values[j]
Emit Transfer(msg.sender,_to,REF_106)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
j = j.add(1)

IRs:
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['j', '1'] 
j(uint256) := TMP_139(uint256)"];
23->17;
24[label="Node Type: RETURN 24

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-setExchangeFlag(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_180(bool) = msg.sender == owner
TMP_181(None) = SOLIDITY_CALL require(bool)(TMP_180)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
exchangeFlag = _flag

IRs:
exchangeFlag(bool) := _flag(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-setMaxRaiseAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_186(bool) = msg.sender == owner
TMP_187(None) = SOLIDITY_CALL require(bool)(TMP_186)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
maxRaiseAmount = _value

IRs:
maxRaiseAmount(uint256) := _value(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-setMaxWei(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_184(bool) = msg.sender == owner
TMP_185(None) = SOLIDITY_CALL require(bool)(TMP_184)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
maxWei = _value

IRs:
maxWei(uint256) := _value(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-setMinWei(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_182(bool) = msg.sender == owner
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
minWei = _value

IRs:
minWei(uint256) := _value(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-setName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_176(bool) = msg.sender == owner
TMP_177(None) = SOLIDITY_CALL require(bool)(TMP_176)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _value

IRs:
name(string) := _value(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-setRaiseRatio(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_190(bool) = msg.sender == owner
TMP_191(None) = SOLIDITY_CALL require(bool)(TMP_190)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
raiseRatio = _value

IRs:
raiseRatio(uint256) := _value(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-setRaisedAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_188(bool) = msg.sender == owner
TMP_189(None) = SOLIDITY_CALL require(bool)(TMP_188)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
raisedAmount = _value

IRs:
raisedAmount(uint256) := _value(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-setSymbol(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_178(bool) = msg.sender == owner
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _value

IRs:
symbol(string) := _value(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Black Hole Coin

IRs:
name(string) := Black Hole Coin(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = BLOC

IRs:
symbol(string) := BLOC(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalSupply = 1000000000000000000000000000

IRs:
totalSupply(uint256) := 1000000000000000000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
exchangeFlag = true

IRs:
exchangeFlag(bool) := True(bool)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
minWei = 1

IRs:
minWei(uint256) := 1(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
maxWei = 2000000000000000000

IRs:
maxWei(uint256) := 2000000000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
maxRaiseAmount = 20000000000000000000

IRs:
maxRaiseAmount(uint256) := 20000000000000000000(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
raisedAmount = 0

IRs:
raisedAmount(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
raiseRatio = 20000000

IRs:
raiseRatio(uint256) := 20000000(uint256)"];
}
// Function: 147.sol-token-totalSupply()
digraph{
}
// Function: 147.sol-token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[msg.sender])

IRs:
REF_108(bool) -> frozenAccount[msg.sender]
TMP_140 = UnaryType.BANG REF_108 
TMP_141(None) = SOLIDITY_CALL require(bool)(TMP_140)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now > frozenTimestamp[msg.sender])

IRs:
REF_109(uint256) -> frozenTimestamp[msg.sender]
TMP_142(bool) = now > REF_109
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_144 = CONVERT 0 to address
TMP_145(bool) = _to != TMP_144
TMP_146(None) = SOLIDITY_CALL require(bool)(TMP_145)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_110(uint256) -> balances[msg.sender]
TMP_147(bool) = _value <= REF_110
TMP_148(None) = SOLIDITY_CALL require(bool)(TMP_147)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_111(uint256) -> balances[msg.sender]
REF_112(uint256) -> balances[msg.sender]
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_112', '_value'] 
REF_111(uint256) (->balances) := TMP_149(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_114(uint256) -> balances[_to]
REF_115(uint256) -> balances[_to]
TMP_150(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_115', '_value'] 
REF_114(uint256) (->balances) := TMP_150(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! frozenAccount[_from])

IRs:
REF_117(bool) -> frozenAccount[_from]
TMP_152 = UnaryType.BANG REF_117 
TMP_153(None) = SOLIDITY_CALL require(bool)(TMP_152)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now > frozenTimestamp[msg.sender])

IRs:
REF_118(uint256) -> frozenTimestamp[msg.sender]
TMP_154(bool) = now > REF_118
TMP_155(None) = SOLIDITY_CALL require(bool)(TMP_154)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_156 = CONVERT 0 to address
TMP_157(bool) = _to != TMP_156
TMP_158(None) = SOLIDITY_CALL require(bool)(TMP_157)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_119(uint256) -> balances[_from]
TMP_159(bool) = _value <= REF_119
TMP_160(None) = SOLIDITY_CALL require(bool)(TMP_159)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_120(mapping(address => uint256)) -> allowed[_from]
REF_121(uint256) -> REF_120[msg.sender]
TMP_161(bool) = _value <= REF_121
TMP_162(None) = SOLIDITY_CALL require(bool)(TMP_161)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_122(uint256) -> balances[_from]
REF_123(uint256) -> balances[_from]
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_123', '_value'] 
REF_122(uint256) (->balances) := TMP_163(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_125(uint256) -> balances[_to]
REF_126(uint256) -> balances[_to]
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_126', '_value'] 
REF_125(uint256) (->balances) := TMP_164(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_128(mapping(address => uint256)) -> allowed[_from]
REF_129(uint256) -> REF_128[msg.sender]
REF_130(mapping(address => uint256)) -> allowed[_from]
REF_131(uint256) -> REF_130[msg.sender]
TMP_165(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_131', '_value'] 
REF_129(uint256) (->allowed) := TMP_165(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 147.sol-token-withdraw(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_84(bool) = msg.sender == owner
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
msg.sender.transfer(_amount)

IRs:
Transfer dest:msg.sender value:_amount"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
}
