digraph G {
// Function: 1473.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_5(uint256) -> balances[_owner]
RETURN REF_5"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1473.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_9 = CONVERT 0 to address
TMP_10(bool) = _to != TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_12(bool) = _value <= REF_0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_14(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_14(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] += _value

IRs:
REF_4(uint256) -> balances[_to]
REF_4(-> balances) = REF_4 + _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1473.sol-Data-Data()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
statuses[msg.sender] = 7

IRs:
REF_81(uint8) -> statuses[msg.sender]
REF_81(uint8) (->statuses) := 7(uint256)"];
}
// Function: 1473.sol-Data-addBalance(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_addr] += amount

IRs:
REF_82(uint256) -> balances[_addr]
REF_82(-> balances) = REF_82 + amount"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1473.sol-Data-addInvestorBalance(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
investorBalances[_addr] += amount

IRs:
REF_85(uint256) -> investorBalances[_addr]
REF_85(-> investorBalances) = REF_85 + amount"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1473.sol-Data-addReferralDeposit(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
referralDeposits[_addr] += amount

IRs:
REF_88(uint256) -> referralDeposits[_addr]
REF_88(-> referralDeposits) = REF_88 + amount"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1473.sol-Data-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_addr] / 1000000

IRs:
REF_79(uint256) -> balances[_addr]
TMP_129(uint256) = REF_79 / 1000000
RETURN TMP_129"];
}
// Function: 1473.sol-Data-investorBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
investorBalances[_addr] / 1000000

IRs:
REF_80(uint256) -> investorBalances[_addr]
TMP_130(uint256) = REF_80 / 1000000
RETURN TMP_130"];
}
// Function: 1473.sol-Data-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_142(bool) = msg.sender == owner
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1473.sol-Data-parentOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parent[_addr]

IRs:
REF_78(address) -> parent[_addr]
RETURN REF_78"];
}
// Function: 1473.sol-Data-setParent(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
parent[_addr] = _parent

IRs:
REF_90(address) -> parent[_addr]
REF_90(address) (->parent) := _parent(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1473.sol-Data-setStatus(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
statuses[_addr] = _status

IRs:
REF_89(uint8) -> statuses[_addr]
REF_89(uint8) (->statuses) := _status(uint8)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1473.sol-Data-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1473.sol-Data-subtrBalance(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[_addr] >= amount)

IRs:
REF_83(uint256) -> balances[_addr]
TMP_132(bool) = REF_83 >= amount
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_addr] -= amount

IRs:
REF_84(uint256) -> balances[_addr]
REF_84(-> balances) = REF_84 - amount"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1473.sol-Data-subtrInvestorBalance(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(investorBalances[_addr] >= amount)

IRs:
REF_86(uint256) -> investorBalances[_addr]
TMP_136(bool) = REF_86 >= amount
TMP_137(None) = SOLIDITY_CALL require(bool)(TMP_136)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
investorBalances[_addr] -= amount

IRs:
REF_87(uint256) -> investorBalances[_addr]
REF_87(-> investorBalances) = REF_87 - amount"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1473.sol-Data-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_125 = CONVERT 0 to address
TMP_126(bool) = newOwner != TMP_125
TMP_127(None) = SOLIDITY_CALL require(bool)(TMP_126)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1473.sol-Declaration-Declaration()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setFeeDistributionsAndStatusThresholds()

IRs:
INTERNAL_CALL, Declaration.setFeeDistributionsAndStatusThresholds()()"];
}
// Function: 1473.sol-Declaration-setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
statusThreshold[_threshold] = _st

IRs:
REF_99(uint8) -> statusThreshold[_threshold]
REF_99(uint8) (->statusThreshold) := _st(uint8)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _percentages.length

IRs:
REF_100 -> LENGTH _percentages
TMP_153(bool) = i < REF_100
CONDITION TMP_153"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
feeDistribution[_st][i] = _percentages[i]

IRs:
REF_101(mapping(uint8 => uint256)) -> feeDistribution[_st]
REF_102(uint256) -> REF_101[i]
REF_103(uint8) -> _percentages[i]
REF_102(uint256) (->feeDistribution) := REF_103(uint8)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_154(uint8) := i(uint8)
i(uint8) = i + 1"];
7->5;
}
// Function: 1473.sol-Declaration-setFeeDistributionsAndStatusThresholds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setFeeDistributionAndStatusThreshold(0,(12,8,5,2,1),thresholds[0])

IRs:
REF_91(uint256) -> thresholds[0]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(0,[12, 8, 5, 2, 1],REF_91)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setFeeDistributionAndStatusThreshold(1,(16,10,6,3,2),thresholds[1])

IRs:
REF_92(uint256) -> thresholds[1]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(1,[16, 10, 6, 3, 2],REF_92)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFeeDistributionAndStatusThreshold(2,(20,12,8,4,2),thresholds[2])

IRs:
REF_93(uint256) -> thresholds[2]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(2,[20, 12, 8, 4, 2],REF_93)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFeeDistributionAndStatusThreshold(3,(25,15,10,5,3),thresholds[3])

IRs:
REF_94(uint256) -> thresholds[3]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(3,[25, 15, 10, 5, 3],REF_94)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
setFeeDistributionAndStatusThreshold(4,(30,18,12,6,3),thresholds[4])

IRs:
REF_95(uint256) -> thresholds[4]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(4,[30, 18, 12, 6, 3],REF_95)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
setFeeDistributionAndStatusThreshold(5,(35,21,14,7,4),thresholds[5])

IRs:
REF_96(uint256) -> thresholds[5]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(5,[35, 21, 14, 7, 4],REF_96)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
setFeeDistributionAndStatusThreshold(6,(40,24,16,8,4),thresholds[6])

IRs:
REF_97(uint256) -> thresholds[6]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(6,[40, 24, 16, 8, 4],REF_97)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
setFeeDistributionAndStatusThreshold(7,(50,30,20,10,5),thresholds[7])

IRs:
REF_98(uint256) -> thresholds[7]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(7,[50, 30, 20, 10, 5],REF_98)"];
}
// Function: 1473.sol-Declaration-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
thresholds = (0,5000,35000,150000,500000,2500000,5000000,10000000)

IRs:
thresholds(uint256[8]) = ['0(uint256)', '5000(uint256)', '35000(uint256)', '150000(uint256)', '500000(uint256)', '2500000(uint256)', '5000000(uint256)', '10000000(uint256)']"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
referralFees = (50,30,20,10,5)

IRs:
referralFees(uint256[5]) = ['50(uint256)', '30(uint256)', '20(uint256)', '10(uint256)', '5(uint256)']"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
serviceFees = (25,20,15,10,5)

IRs:
serviceFees(uint256[5]) = ['25(uint256)', '20(uint256)', '15(uint256)', '10(uint256)', '5(uint256)']"];
}
// Function: 1473.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1473.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1473.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1473.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1473.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1473.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1473.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1473.sol-Investors-addInvestors(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _investors.length

IRs:
REF_104 -> LENGTH _investors
TMP_159(bool) = i < REF_104
CONDITION TMP_159"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
investors.push(_investors[i])

IRs:
REF_106(address) -> _investors[i]
REF_107 -> LENGTH investors
TMP_161(uint256) := REF_107(uint256)
TMP_162(uint256) = TMP_161 + 1
REF_107(uint256) (->investors) := TMP_162(uint256)
REF_108(address) -> investors[TMP_161]
REF_108(address) (->investors) := REF_106(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
investorPercentages[_investors[i]] = _investorPercentages[i]

IRs:
REF_109(address) -> _investors[i]
REF_110(uint256) -> investorPercentages[REF_109]
REF_111(uint256) -> _investorPercentages[i]
REF_110(uint256) (->investorPercentages) := REF_111(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_163(uint256) := i(uint256)
i(uint256) = i + 1"];
7->4;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->3;
}
// Function: 1473.sol-Investors-getInvestorsCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
investors.length

IRs:
REF_112 -> LENGTH investors
RETURN REF_112"];
}
// Function: 1473.sol-Investors-getInvestorsFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
now >= 1577836800

IRs:
TMP_165(bool) = now >= 1577836800
CONDITION TMP_165"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
now >= 1546300800

IRs:
TMP_166(bool) = now >= 1546300800
CONDITION TMP_166"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
5

IRs:
RETURN 5"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
10

IRs:
RETURN 10"];
}
// Function: 1473.sol-Investors-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_167(bool) = msg.sender == owner
TMP_168(None) = SOLIDITY_CALL require(bool)(TMP_167)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1473.sol-Investors-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1473.sol-Investors-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_155 = CONVERT 0 to address
TMP_156(bool) = newOwner != TMP_155
TMP_157(None) = SOLIDITY_CALL require(bool)(TMP_156)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1473.sol-MintableToken-allowance(address,address)
digraph{
}
// Function: 1473.sol-MintableToken-approve(address,uint256)
digraph{
}
// Function: 1473.sol-MintableToken-balanceOf(address)
digraph{
}
// Function: 1473.sol-MintableToken-burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0 && balances[_addr] >= _amount && totalSupply >= _amount)

IRs:
TMP_61(bool) = _amount > 0
REF_51(uint256) -> balances[_addr]
TMP_62(bool) = REF_51 >= _amount
TMP_63(bool) = TMP_61 && TMP_62
TMP_64(bool) = totalSupply >= _amount
TMP_65(bool) = TMP_63 && TMP_64
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_addr] -= _amount

IRs:
REF_52(uint256) -> balances[_addr]
REF_52(-> balances) = REF_52 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply -= _amount

IRs:
totalSupply(uint256) = totalSupply - _amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_addr,_amount)

IRs:
Emit Burn(_addr,_amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_addr,address(0),_amount)

IRs:
TMP_68 = CONVERT 0 to address
Emit Transfer(_addr,TMP_68,_amount)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 1473.sol-MintableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_76 = UnaryType.BANG mintingFinished 
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1473.sol-MintableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 1473.sol-MintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply += _amount

IRs:
totalSupply(uint256) = totalSupply + _amount"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _amount

IRs:
REF_50(uint256) -> balances[_to]
REF_50(-> balances) = REF_50 + _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_57 = CONVERT 0 to address
Emit Transfer(TMP_57,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 1473.sol-MintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_74(bool) = msg.sender == owner
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1473.sol-MintableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 1473.sol-MintableToken-transfer(address,uint256)
digraph{
}
// Function: 1473.sol-MintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1473.sol-MintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_34 = CONVERT 0 to address
TMP_35(bool) = newOwner != TMP_34
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1473.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_4(bool) = msg.sender == owner
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1473.sol-Ownable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1473.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1473.sol-PChannel-PChannel(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
refProgram = Referral(_refProgram)

IRs:
TMP_286 = CONVERT _refProgram to Referral
refProgram(Referral) := TMP_286(Referral)"];
}
// Function: 1473.sol-PChannel-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
depositsCount = deposits[msg.sender]

IRs:
REF_176(uint8) -> deposits[msg.sender]
depositsCount(uint8) := REF_176(uint8)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
depositsCount == 15

IRs:
TMP_287(bool) = depositsCount == 15
CONDITION TMP_287"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
depositsCount = 0

IRs:
depositsCount(uint8) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
deposits[msg.sender] = 0

IRs:
REF_177(uint8) -> deposits[msg.sender]
REF_177(uint8) (->deposits) := 0(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
amount = msg.value

IRs:
amount(uint256) := msg.value(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
usdAmount = amount * refProgram.ethUsdRate() / 10 ** 18

IRs:
TMP_288(uint256) = HIGH_LEVEL_CALL, dest:refProgram(Referral), function:ethUsdRate, arguments:[]  
TMP_289(uint256) = amount * TMP_288
TMP_290(uint256) = 10 ** 18
TMP_291(uint256) = TMP_289 / TMP_290
usdAmount(uint256) := TMP_291(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(usdAmount >= depositAmount && usdAmount <= maxDepositAmount)

IRs:
TMP_292(bool) = usdAmount >= depositAmount
TMP_293(bool) = usdAmount <= maxDepositAmount
TMP_294(bool) = TMP_292 && TMP_293
TMP_295(None) = SOLIDITY_CALL require(bool)(TMP_294)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
refProgram.invest.value(amount)(msg.sender,depositsCount)

IRs:
HIGH_LEVEL_CALL, dest:refProgram(Referral), function:invest, arguments:['msg.sender', 'depositsCount'] value:amount "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
deposits[msg.sender] ++

IRs:
REF_181(uint8) -> deposits[msg.sender]
TMP_298(uint8) := REF_181(uint8)
REF_181(-> deposits) = REF_181 + 1"];
}
// Function: 1473.sol-PChannel-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_301(bool) = msg.sender == owner
TMP_302(None) = SOLIDITY_CALL require(bool)(TMP_301)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1473.sol-PChannel-setRefProgram(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
refProgram = Referral(_addr)

IRs:
TMP_299 = CONVERT _addr to Referral
refProgram(Referral) := TMP_299(Referral)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1473.sol-PChannel-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
depositAmount = 10000000

IRs:
depositAmount(uint256) := 10000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
maxDepositAmount = 12500000

IRs:
maxDepositAmount(uint256) := 12500000(uint256)"];
}
// Function: 1473.sol-PChannel-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_282 = CONVERT 0 to address
TMP_283(bool) = newOwner != TMP_282
TMP_284(None) = SOLIDITY_CALL require(bool)(TMP_283)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1473.sol-Referral-Declaration()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setFeeDistributionsAndStatusThresholds()

IRs:
INTERNAL_CALL, Declaration.setFeeDistributionsAndStatusThresholds()()"];
}
// Function: 1473.sol-Referral-Referral(uint256,address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ethUsdRate = _ethUsdRate

IRs:
ethUsdRate(uint256) := _ethUsdRate(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token = WealthBuilderToken(_token)

IRs:
TMP_184 = CONVERT _token to WealthBuilderToken
token(WealthBuilderToken) := TMP_184(WealthBuilderToken)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
data = Data(_data)

IRs:
TMP_185 = CONVERT _data to Data
data(Data) := TMP_185(Data)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
investors = Investors(_investors)

IRs:
TMP_186 = CONVERT _investors to Investors
investors(Investors) := TMP_186(Investors)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
investorsBalance = 0

IRs:
investorsBalance(uint256) := 0(uint256)"];
}
// Function: 1473.sol-Referral-distribute(address,uint256,uint8,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
node = _node

IRs:
node(address) := _node(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
prevPercentage = _prevPercentage

IRs:
prevPercentage(uint256) := _prevPercentage(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
node != address(0)

IRs:
TMP_214 = CONVERT 0 to address
TMP_215(bool) = node != TMP_214
CONDITION TMP_215"];
4->5[label="True"];
4->13[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
status = data.statuses(node)

IRs:
TMP_216(uint8) = HIGH_LEVEL_CALL, dest:data(Data), function:statuses, arguments:['node']  
status(uint8) := TMP_216(uint8)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
nodePercentage = feeDistribution[status][_depositsCount]

IRs:
REF_143(mapping(uint8 => uint256)) -> feeDistribution[status]
REF_144(uint256) -> REF_143[_depositsCount]
nodePercentage(uint256) := REF_144(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
percentage = nodePercentage.sub(prevPercentage)

IRs:
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['nodePercentage', 'prevPercentage'] 
percentage(uint256) := TMP_217(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
data.addBalance(node,_amount * percentage * 10000)

IRs:
TMP_218(uint256) = _amount * percentage
TMP_219(uint256) = TMP_218 * 10000
HIGH_LEVEL_CALL, dest:data(Data), function:addBalance, arguments:['node', 'TMP_219']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
data.addReferralDeposit(node,_amount * ethUsdRate / 10 ** 18)

IRs:
TMP_221(uint256) = _amount * ethUsdRate
TMP_222(uint256) = 10 ** 18
TMP_223(uint256) = TMP_221 / TMP_222
HIGH_LEVEL_CALL, dest:data(Data), function:addReferralDeposit, arguments:['node', 'TMP_223']  "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
updateStatus(node,status)

IRs:
INTERNAL_CALL, Referral.updateStatus(address,uint8)(node,status)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
node = data.parentOf(node)

IRs:
TMP_226(address) = HIGH_LEVEL_CALL, dest:data(Data), function:parentOf, arguments:['node']  
node(address) := TMP_226(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
prevPercentage = nodePercentage

IRs:
prevPercentage(uint256) := nodePercentage(uint256)"];
12->4;
13[label="Node Type: END_LOOP 13
"];
}
// Function: 1473.sol-Referral-distributeInvestorsFee(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = start

IRs:
i(uint256) := start(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < end

IRs:
TMP_234(bool) = i < end
CONDITION TMP_234"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
investor = investors.investors(i)

IRs:
TMP_235(address) = HIGH_LEVEL_CALL, dest:investors(Investors), function:investors, arguments:['i']  
investor(address) := TMP_235(address)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
investorPercentage = investors.investorPercentages(investor)

IRs:
TMP_236(uint256) = HIGH_LEVEL_CALL, dest:investors(Investors), function:investorPercentages, arguments:['investor']  
investorPercentage(uint256) := TMP_236(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
data.addInvestorBalance(investor,investorsBalance * investorPercentage)

IRs:
TMP_237(uint256) = investorsBalance * investorPercentage
HIGH_LEVEL_CALL, dest:data(Data), function:addInvestorBalance, arguments:['investor', 'TMP_237']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_239(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: IF 9

EXPRESSION:
end == investors.getInvestorsCount()

IRs:
TMP_240(uint256) = HIGH_LEVEL_CALL, dest:investors(Investors), function:getInvestorsCount, arguments:[]  
TMP_241(bool) = end == TMP_240
CONDITION TMP_241"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
investorsBalance = 0

IRs:
investorsBalance(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
12->3;
}
// Function: 1473.sol-Referral-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1473.sol-Referral-invest(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
amount = msg.value

IRs:
amount(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
depositsCount < 5

IRs:
TMP_187(bool) = depositsCount < 5
CONDITION TMP_187"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
investorsFee = 0

IRs:
investorsFee(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
depositsCount == 0

IRs:
TMP_188(bool) = depositsCount == 0
CONDITION TMP_188"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
investorsFeePercentage = investors.getInvestorsFee()

IRs:
TMP_189(uint8) = HIGH_LEVEL_CALL, dest:investors(Investors), function:getInvestorsFee, arguments:[]  
investorsFeePercentage(uint8) := TMP_189(uint8)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
serviceFee = amount * (serviceFees[depositsCount].sub(investorsFeePercentage))

IRs:
REF_127(uint256) -> serviceFees[depositsCount]
TMP_190(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_127', 'investorsFeePercentage'] 
TMP_191(uint256) = amount * TMP_190
serviceFee(uint256) := TMP_191(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
investorsFee = amount * investorsFeePercentage

IRs:
TMP_192(uint256) = amount * investorsFeePercentage
investorsFee(uint256) := TMP_192(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
investorsBalance += investorsFee

IRs:
investorsBalance(uint256) = investorsBalance + investorsFee"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
serviceFee = amount * serviceFees[depositsCount]

IRs:
REF_129(uint256) -> serviceFees[depositsCount]
TMP_193(uint256) = amount * REF_129
serviceFee(uint256) := TMP_193(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
referralFee = amount * referralFees[depositsCount]

IRs:
REF_130(uint256) -> referralFees[depositsCount]
TMP_194(uint256) = amount * REF_130
referralFee(uint256) := TMP_194(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
distribute(data.parentOf(client),0,depositsCount,amount)

IRs:
TMP_195(address) = HIGH_LEVEL_CALL, dest:data(Data), function:parentOf, arguments:['client']  
INTERNAL_CALL, Referral.distribute(address,uint256,uint8,uint256)(TMP_195,0,depositsCount,amount)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
active = (amount * 100).sub(referralFee).sub(serviceFee).sub(investorsFee)

IRs:
TMP_197(uint256) = amount * 100
TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_197', 'referralFee'] 
TMP_199(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_198', 'serviceFee'] 
TMP_200(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_199', 'investorsFee'] 
active(uint256) := TMP_200(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
token.mint(client,active / 100 * token.rate() / token.mrate())

IRs:
TMP_201(uint256) = active / 100
TMP_202(uint256) = HIGH_LEVEL_CALL, dest:token(WealthBuilderToken), function:rate, arguments:[]  
TMP_203(uint256) = TMP_201 * TMP_202
TMP_204(uint256) = HIGH_LEVEL_CALL, dest:token(WealthBuilderToken), function:mrate, arguments:[]  
TMP_205(uint256) = TMP_203 / TMP_204
TMP_206(bool) = HIGH_LEVEL_CALL, dest:token(WealthBuilderToken), function:mint, arguments:['client', 'TMP_205']  "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
data.addBalance(owner,serviceFee * 10000)

IRs:
TMP_207(uint256) = serviceFee * 10000
HIGH_LEVEL_CALL, dest:data(Data), function:addBalance, arguments:['owner', 'TMP_207']  "];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
token.mint(client,amount * token.rate() / token.mrate())

IRs:
TMP_209(uint256) = HIGH_LEVEL_CALL, dest:token(WealthBuilderToken), function:rate, arguments:[]  
TMP_210(uint256) = amount * TMP_209
TMP_211(uint256) = HIGH_LEVEL_CALL, dest:token(WealthBuilderToken), function:mrate, arguments:[]  
TMP_212(uint256) = TMP_210 / TMP_211
TMP_213(bool) = HIGH_LEVEL_CALL, dest:token(WealthBuilderToken), function:mint, arguments:['client', 'TMP_212']  "];
17->18;
18[label="Node Type: END_IF 18
"];
}
// Function: 1473.sol-Referral-invite(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
data.setParent(_invitee,_inviter)

IRs:
HIGH_LEVEL_CALL, dest:data(Data), function:setParent, arguments:['_invitee', '_inviter']  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
data.setStatus(_invitee,0)

IRs:
HIGH_LEVEL_CALL, dest:data(Data), function:setStatus, arguments:['_invitee', '0']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1473.sol-Referral-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_280(bool) = msg.sender == owner
TMP_281(None) = SOLIDITY_CALL require(bool)(TMP_280)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1473.sol-Referral-setEthUsdRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ethUsdRate = _ethUsdRate

IRs:
ethUsdRate(uint256) := _ethUsdRate(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1473.sol-Referral-setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
statusThreshold[_threshold] = _st

IRs:
REF_121(uint8) -> statusThreshold[_threshold]
REF_121(uint8) (->statusThreshold) := _st(uint8)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _percentages.length

IRs:
REF_122 -> LENGTH _percentages
TMP_182(bool) = i < REF_122
CONDITION TMP_182"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
feeDistribution[_st][i] = _percentages[i]

IRs:
REF_123(mapping(uint8 => uint256)) -> feeDistribution[_st]
REF_124(uint256) -> REF_123[i]
REF_125(uint8) -> _percentages[i]
REF_124(uint256) (->feeDistribution) := REF_125(uint8)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_183(uint8) := i(uint8)
i(uint8) = i + 1"];
7->5;
}
// Function: 1473.sol-Referral-setFeeDistributionsAndStatusThresholds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setFeeDistributionAndStatusThreshold(0,(12,8,5,2,1),thresholds[0])

IRs:
REF_113(uint256) -> thresholds[0]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(0,[12, 8, 5, 2, 1],REF_113)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setFeeDistributionAndStatusThreshold(1,(16,10,6,3,2),thresholds[1])

IRs:
REF_114(uint256) -> thresholds[1]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(1,[16, 10, 6, 3, 2],REF_114)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setFeeDistributionAndStatusThreshold(2,(20,12,8,4,2),thresholds[2])

IRs:
REF_115(uint256) -> thresholds[2]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(2,[20, 12, 8, 4, 2],REF_115)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setFeeDistributionAndStatusThreshold(3,(25,15,10,5,3),thresholds[3])

IRs:
REF_116(uint256) -> thresholds[3]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(3,[25, 15, 10, 5, 3],REF_116)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
setFeeDistributionAndStatusThreshold(4,(30,18,12,6,3),thresholds[4])

IRs:
REF_117(uint256) -> thresholds[4]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(4,[30, 18, 12, 6, 3],REF_117)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
setFeeDistributionAndStatusThreshold(5,(35,21,14,7,4),thresholds[5])

IRs:
REF_118(uint256) -> thresholds[5]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(5,[35, 21, 14, 7, 4],REF_118)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
setFeeDistributionAndStatusThreshold(6,(40,24,16,8,4),thresholds[6])

IRs:
REF_119(uint256) -> thresholds[6]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(6,[40, 24, 16, 8, 4],REF_119)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
setFeeDistributionAndStatusThreshold(7,(50,30,20,10,5),thresholds[7])

IRs:
REF_120(uint256) -> thresholds[7]
INTERNAL_CALL, Declaration.setFeeDistributionAndStatusThreshold(uint8,uint8[5],uint256)(7,[50, 30, 20, 10, 5],REF_120)"];
}
// Function: 1473.sol-Referral-setInvestors(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
investors = Investors(_addr)

IRs:
TMP_251 = CONVERT _addr to Investors
investors(Investors) := TMP_251(Investors)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1473.sol-Referral-setRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token.setRate(_rate)

IRs:
HIGH_LEVEL_CALL, dest:token(WealthBuilderToken), function:setRate, arguments:['_rate']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1473.sol-Referral-setStatus(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
data.setStatus(_addr,_status)

IRs:
HIGH_LEVEL_CALL, dest:data(Data), function:setStatus, arguments:['_addr', '_status']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1473.sol-Referral-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
thresholds = (0,5000,35000,150000,500000,2500000,5000000,10000000)

IRs:
thresholds(uint256[8]) = ['0(uint256)', '5000(uint256)', '35000(uint256)', '150000(uint256)', '500000(uint256)', '2500000(uint256)', '5000000(uint256)', '10000000(uint256)']"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
referralFees = (50,30,20,10,5)

IRs:
referralFees(uint256[5]) = ['50(uint256)', '30(uint256)', '20(uint256)', '10(uint256)', '5(uint256)']"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
serviceFees = (25,20,15,10,5)

IRs:
serviceFees(uint256[5]) = ['25(uint256)', '20(uint256)', '15(uint256)', '10(uint256)', '5(uint256)']"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1473.sol-Referral-transferDataOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
data.transferOwnership(_addr)

IRs:
HIGH_LEVEL_CALL, dest:data(Data), function:transferOwnership, arguments:['_addr']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1473.sol-Referral-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_169 = CONVERT 0 to address
TMP_170(bool) = newOwner != TMP_169
TMP_171(None) = SOLIDITY_CALL require(bool)(TMP_170)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1473.sol-Referral-transferTokenOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token.transferOwnership(_addr)

IRs:
HIGH_LEVEL_CALL, dest:token(WealthBuilderToken), function:transferOwnership, arguments:['_addr']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1473.sol-Referral-updateStatus(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
refDep = data.referralDeposits(_node)

IRs:
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:data(Data), function:referralDeposits, arguments:['_node']  
refDep(uint256) := TMP_227(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = thresholds.length - 1

IRs:
REF_150 -> LENGTH thresholds
TMP_228(uint256) = REF_150 - 1
i(uint256) := TMP_228(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i > _status

IRs:
TMP_229(bool) = i > _status
CONDITION TMP_229"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
threshold = thresholds[i] * 100

IRs:
REF_151(uint256) -> thresholds[i]
TMP_230(uint256) = REF_151 * 100
threshold(uint256) := TMP_230(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
refDep >= threshold

IRs:
TMP_231(bool) = refDep >= threshold
CONDITION TMP_231"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
data.setStatus(_node,statusThreshold[threshold])

IRs:
REF_153(uint8) -> statusThreshold[threshold]
HIGH_LEVEL_CALL, dest:data(Data), function:setStatus, arguments:['_node', 'REF_153']  "];
8->9;
9[label="Node Type: BREAK 9
"];
9->3;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i --

IRs:
TMP_233(uint256) := i(uint256)
i(uint256) = i - 1"];
11->5;
}
// Function: 1473.sol-Referral-withdraw(address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(amount >= _amount && this.balance >= _amount)

IRs:
TMP_253(bool) = amount >= _amount
REF_162(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_254(bool) = REF_162 >= _amount
TMP_255(bool) = TMP_253 && TMP_254
TMP_256(None) = SOLIDITY_CALL require(bool)(TMP_255)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
investor

IRs:
CONDITION investor"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
data.subtrInvestorBalance(_addr,_amount * 1000000)

IRs:
TMP_257(uint256) = _amount * 1000000
HIGH_LEVEL_CALL, dest:data(Data), function:subtrInvestorBalance, arguments:['_addr', 'TMP_257']  "];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
data.subtrBalance(_addr,_amount * 1000000)

IRs:
TMP_259(uint256) = _amount * 1000000
HIGH_LEVEL_CALL, dest:data(Data), function:subtrBalance, arguments:['_addr', 'TMP_259']  "];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_addr.transfer(_amount)

IRs:
Transfer dest:_addr value:_amount"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
investor

IRs:
CONDITION investor"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
amount = data.investorBalanceOf(_addr)

IRs:
TMP_263(uint256) = HIGH_LEVEL_CALL, dest:data(Data), function:investorBalanceOf, arguments:['_addr']  
amount(uint256) := TMP_263(uint256)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
amount = data.balanceOf(_addr)

IRs:
TMP_264(uint256) = HIGH_LEVEL_CALL, dest:data(Data), function:balanceOf, arguments:['_addr']  
amount(uint256) := TMP_264(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->2;
}
// Function: 1473.sol-Referral-withdrawOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(this.balance >= _amount)

IRs:
REF_168(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_265(bool) = REF_168 >= _amount
TMP_266(None) = SOLIDITY_CALL require(bool)(TMP_265)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_addr.transfer(_amount)

IRs:
Transfer dest:_addr value:_amount"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1473.sol-Referral-withdrawToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token.burn(_addr,_amount)

IRs:
HIGH_LEVEL_CALL, dest:token(WealthBuilderToken), function:burn, arguments:['_addr', '_amount']  "];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
etherValue = _amount * token.mrate() / token.rate()

IRs:
TMP_270(uint256) = HIGH_LEVEL_CALL, dest:token(WealthBuilderToken), function:mrate, arguments:[]  
TMP_271(uint256) = _amount * TMP_270
TMP_272(uint256) = HIGH_LEVEL_CALL, dest:token(WealthBuilderToken), function:rate, arguments:[]  
TMP_273(uint256) = TMP_271 / TMP_272
etherValue(uint256) := TMP_273(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr.transfer(etherValue)

IRs:
Transfer dest:_addr value:etherValue"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1473.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 1473.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_26(mapping(address => uint256)) -> allowed[_owner]
REF_27(uint256) -> REF_26[_spender]
RETURN REF_27"];
}
// Function: 1473.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_24(mapping(address => uint256)) -> allowed[msg.sender]
REF_25(uint256) -> REF_24[_spender]
REF_25(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1473.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 1473.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 1473.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_23 = CONVERT 0 to address
TMP_24(bool) = _to != TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_12(uint256) -> balances[_from]
TMP_26(bool) = _value <= REF_12
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_13(mapping(address => uint256)) -> allowed[_from]
REF_14(uint256) -> REF_13[msg.sender]
TMP_28(bool) = _value <= REF_14
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_15(uint256) -> balances[_from]
REF_16(uint256) -> balances[_from]
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_16', '_value'] 
REF_15(uint256) (->balances) := TMP_30(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] += _value

IRs:
REF_18(uint256) -> balances[_to]
REF_18(-> balances) = REF_18 + _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_19(mapping(address => uint256)) -> allowed[_from]
REF_20(uint256) -> REF_19[msg.sender]
REF_21(mapping(address => uint256)) -> allowed[_from]
REF_22(uint256) -> REF_21[msg.sender]
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_22', '_value'] 
REF_20(uint256) (->allowed) := TMP_31(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1473.sol-WealthBuilderToken-allowance(address,address)
digraph{
}
// Function: 1473.sol-WealthBuilderToken-approve(address,uint256)
digraph{
}
// Function: 1473.sol-WealthBuilderToken-balanceOf(address)
digraph{
}
// Function: 1473.sol-WealthBuilderToken-burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0 && balances[_addr] >= _amount && totalSupply >= _amount)

IRs:
TMP_83(bool) = _amount > 0
REF_54(uint256) -> balances[_addr]
TMP_84(bool) = REF_54 >= _amount
TMP_85(bool) = TMP_83 && TMP_84
TMP_86(bool) = totalSupply >= _amount
TMP_87(bool) = TMP_85 && TMP_86
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_addr] -= _amount

IRs:
REF_55(uint256) -> balances[_addr]
REF_55(-> balances) = REF_55 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply -= _amount

IRs:
totalSupply(uint256) = totalSupply - _amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_addr,_amount)

IRs:
Emit Burn(_addr,_amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_addr,address(0),_amount)

IRs:
TMP_90 = CONVERT 0 to address
Emit Transfer(_addr,TMP_90,_amount)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 1473.sol-WealthBuilderToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_121 = UnaryType.BANG mintingFinished 
TMP_122(None) = SOLIDITY_CALL require(bool)(TMP_121)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1473.sol-WealthBuilderToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 1473.sol-WealthBuilderToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply += _amount

IRs:
totalSupply(uint256) = totalSupply + _amount"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _amount

IRs:
REF_53(uint256) -> balances[_to]
REF_53(-> balances) = REF_53 + _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_79 = CONVERT 0 to address
Emit Transfer(TMP_79,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 1473.sol-WealthBuilderToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_123(bool) = msg.sender == owner
TMP_124(None) = SOLIDITY_CALL require(bool)(TMP_123)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1473.sol-WealthBuilderToken-setRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1473.sol-WealthBuilderToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = Wealth Builder Token

IRs:
name(string) := Wealth Builder Token(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
symbol = WBT

IRs:
symbol(string) := WBT(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
decimals = 18

IRs:
decimals(uint32) := 18(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rate = 10 ** 7

IRs:
TMP_119(uint256) = 10 ** 7
rate(uint256) := TMP_119(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
mrate = 10 ** 7

IRs:
TMP_120(uint256) = 10 ** 7
mrate(uint256) := TMP_120(uint256)"];
}
// Function: 1473.sol-WealthBuilderToken-transfer(address,uint256)
digraph{
}
// Function: 1473.sol-WealthBuilderToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1473.sol-WealthBuilderToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_96 = CONVERT 0 to address
TMP_97(bool) = newOwner != TMP_96
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
}
