digraph G {
// Function: 1481.sol-CrowdsaleTokenExt-CrowdsaleTokenExt(string,string,uint256,uint256,bool,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = _initialSupply

IRs:
totalSupply(uint256) := _initialSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint256) := _decimals(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
minCap = _globalMinCap

IRs:
minCap(uint256) := _globalMinCap(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[owner] = totalSupply

IRs:
REF_170(uint256) -> balances[owner]
REF_170(uint256) (->balances) := totalSupply(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
totalSupply > 0

IRs:
TMP_377(bool) = totalSupply > 0
CONDITION TMP_377"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Minted(owner,totalSupply)

IRs:
Emit Minted(owner,totalSupply)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
! _mintable

IRs:
TMP_379 = UnaryType.BANG _mintable 
CONDITION TMP_379"];
11->12[label="True"];
11->16[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
totalSupply == 0

IRs:
TMP_380(bool) = totalSupply == 0
CONDITION TMP_380"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: THROW 14
"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
UpgradeableToken(msg.sender)

IRs:
INTERNAL_CALL, UpgradeableToken.UpgradeableToken(address)(msg.sender)"];
17->1;
}
// Function: 1481.sol-CrowdsaleTokenExt-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1481.sol-CrowdsaleTokenExt-UpgradeableToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradeMaster = _upgradeMaster

IRs:
upgradeMaster(address) := _upgradeMaster(address)"];
}
// Function: 1481.sol-CrowdsaleTokenExt-allowance(address,address)
digraph{
}
// Function: 1481.sol-CrowdsaleTokenExt-approve(address,uint256)
digraph{
}
// Function: 1481.sol-CrowdsaleTokenExt-areTokensDistributedForAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].isDistributed

IRs:
REF_140(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_141(bool) -> REF_140.isDistributed
RETURN REF_141"];
2[label="Node Type: RETURN 2

EXPRESSION:
isDistributed

IRs:
RETURN isDistributed"];
}
// Function: 1481.sol-CrowdsaleTokenExt-balanceOf(address)
digraph{
}
// Function: 1481.sol-CrowdsaleTokenExt-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
mintingFinished

IRs:
CONDITION mintingFinished"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1481.sol-CrowdsaleTokenExt-canTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! released

IRs:
TMP_399 = UnaryType.BANG released 
CONDITION TMP_399"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
! transferAgents[_sender]

IRs:
REF_174(bool) -> transferAgents[_sender]
TMP_400 = UnaryType.BANG REF_174 
CONDITION TMP_400"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1481.sol-CrowdsaleTokenExt-canUpgrade()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
released && super.canUpgrade()

IRs:
TMP_384(bool) = INTERNAL_CALL, UpgradeableToken.canUpgrade()()
TMP_385(bool) = released && TMP_384
RETURN TMP_385"];
}
// Function: 1481.sol-CrowdsaleTokenExt-claimTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token != address(0))

IRs:
TMP_388 = CONVERT 0 to address
TMP_389(bool) = _token != TMP_388
TMP_390(None) = SOLIDITY_CALL require(bool)(TMP_389)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_391 = CONVERT _token to ERC20
token(ERC20) := TMP_391(ERC20)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
balance = token.balanceOf(this)

IRs:
TMP_392(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_392(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.transfer(owner,balance)

IRs:
TMP_393(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['owner', 'balance']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ClaimedTokens(_token,owner,balance)

IRs:
Emit ClaimedTokens(_token,owner,balance)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 1481.sol-CrowdsaleTokenExt-finalizeReservedAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
reservedTokensData = reservedTokensList[addr]

IRs:
REF_136(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
reservedTokensData(MintableTokenExt.ReservedTokensData) := REF_136(MintableTokenExt.ReservedTokensData)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reservedTokensData.isDistributed = true

IRs:
REF_137(bool) -> reservedTokensData.isDistributed
REF_137(bool) (->reservedTokensData) := True(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableTokenExt.onlyMintAgent()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
4->1;
}
// Function: 1481.sol-CrowdsaleTokenExt-getReservedPercentageDecimals(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].inPercentageDecimals

IRs:
REF_146(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_147(uint256) -> REF_146.inPercentageDecimals
RETURN REF_147"];
2[label="Node Type: RETURN 2

EXPRESSION:
inPercentageDecimals

IRs:
RETURN inPercentageDecimals"];
}
// Function: 1481.sol-CrowdsaleTokenExt-getReservedPercentageUnit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].inPercentageUnit

IRs:
REF_144(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_145(uint256) -> REF_144.inPercentageUnit
RETURN REF_145"];
2[label="Node Type: RETURN 2

EXPRESSION:
inPercentageUnit

IRs:
RETURN inPercentageUnit"];
}
// Function: 1481.sol-CrowdsaleTokenExt-getReservedTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].inTokens

IRs:
REF_142(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_143(uint256) -> REF_142.inTokens
RETURN REF_143"];
2[label="Node Type: RETURN 2

EXPRESSION:
inTokens

IRs:
RETURN inTokens"];
}
// Function: 1481.sol-CrowdsaleTokenExt-getUpgradeState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_282(bool) = INTERNAL_CALL, CrowdsaleTokenExt.canUpgrade()()
TMP_283 = UnaryType.BANG TMP_282 
CONDITION TMP_283"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
UpgradeState.NotAllowed

IRs:
REF_113(UpgradeableToken.UpgradeState) -> UpgradeState.NotAllowed
RETURN REF_113"];
3[label="Node Type: IF 3

EXPRESSION:
address(upgradeAgent) == 0x00

IRs:
TMP_284 = CONVERT upgradeAgent to address
TMP_285(bool) = TMP_284 == 0
CONDITION TMP_285"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
UpgradeState.WaitingForAgent

IRs:
REF_114(UpgradeableToken.UpgradeState) -> UpgradeState.WaitingForAgent
RETURN REF_114"];
5[label="Node Type: IF 5

EXPRESSION:
totalUpgraded == 0

IRs:
TMP_286(bool) = totalUpgraded == 0
CONDITION TMP_286"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
UpgradeState.ReadyToUpgrade

IRs:
REF_115(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
RETURN REF_115"];
7[label="Node Type: RETURN 7

EXPRESSION:
UpgradeState.Upgrading

IRs:
REF_116(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
RETURN REF_116"];
}
// Function: 1481.sol-CrowdsaleTokenExt-inReleaseState(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
releaseState != released

IRs:
TMP_401(bool) = releaseState != released
CONDITION TMP_401"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1481.sol-CrowdsaleTokenExt-isAddressReserved(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].isReserved

IRs:
REF_138(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_139(bool) -> REF_138.isReserved
RETURN REF_139"];
2[label="Node Type: RETURN 2

EXPRESSION:
isReserved

IRs:
RETURN isReserved"];
}
// Function: 1481.sol-CrowdsaleTokenExt-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 1481.sol-CrowdsaleTokenExt-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_324(bool) = a >= b
CONDITION TMP_324"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-CrowdsaleTokenExt-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_322(bool) = a >= b
CONDITION TMP_322"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-CrowdsaleTokenExt-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_325(bool) = a < b
CONDITION TMP_325"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-CrowdsaleTokenExt-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_323(bool) = a < b
CONDITION TMP_323"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-CrowdsaleTokenExt-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.plus(amount)

IRs:
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['totalSupply', 'amount'] 
totalSupply(uint256) := TMP_343(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[receiver] = balances[receiver].plus(amount)

IRs:
REF_161(uint256) -> balances[receiver]
REF_162(uint256) -> balances[receiver]
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['REF_162', 'amount'] 
REF_161(uint256) (->balances) := TMP_344(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0,receiver,amount)

IRs:
Emit Transfer(0,receiver,amount)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableTokenExt.onlyMintAgent()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
5->1;
}
// Function: 1481.sol-CrowdsaleTokenExt-onlyMintAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! mintAgents[msg.sender]

IRs:
REF_173(bool) -> mintAgents[msg.sender]
TMP_396 = UnaryType.BANG REF_173 
CONDITION TMP_396"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1481.sol-CrowdsaleTokenExt-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_397(bool) = msg.sender == owner
TMP_398(None) = SOLIDITY_CALL require(bool)(TMP_397)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1481.sol-CrowdsaleTokenExt-onlyReleaseAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != releaseAgent

IRs:
TMP_402(bool) = msg.sender != releaseAgent
CONDITION TMP_402"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1481.sol-CrowdsaleTokenExt-releaseTokenTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
super.releaseTokenTransfer()

IRs:
INTERNAL_CALL, ReleasableToken.releaseTokenTransfer()()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyReleaseAgent()

IRs:
MODIFIER_CALL, ReleasableToken.onlyReleaseAgent()()"];
3->1;
}
// Function: 1481.sol-CrowdsaleTokenExt-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_317(uint256) = a + b
c(uint256) := TMP_317(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_318(bool) = c >= a
TMP_319(bool) = c >= b
TMP_320(bool) = TMP_318 && TMP_319
TMP_321(None) = SOLIDITY_CALL assert(bool)(TMP_320)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-CrowdsaleTokenExt-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_306(bool) = b > 0
TMP_307(None) = SOLIDITY_CALL assert(bool)(TMP_306)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_308(uint256) = a / b
c(uint256) := TMP_308(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_309(uint256) = b * c
TMP_310(uint256) = a % b
TMP_311(uint256) = TMP_309 + TMP_310
TMP_312(bool) = a == TMP_311
TMP_313(None) = SOLIDITY_CALL assert(bool)(TMP_312)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-CrowdsaleTokenExt-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_300(uint256) = a * b
c(uint256) := TMP_300(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_301(bool) = a == 0
TMP_302(uint256) = c / a
TMP_303(bool) = TMP_302 == b
TMP_304(bool) = TMP_301 || TMP_303
TMP_305(None) = SOLIDITY_CALL assert(bool)(TMP_304)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-CrowdsaleTokenExt-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_314(bool) = b <= a
TMP_315(None) = SOLIDITY_CALL assert(bool)(TMP_314)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_316(uint256) = a - b
RETURN TMP_316"];
}
// Function: 1481.sol-CrowdsaleTokenExt-setMintAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAgents[addr] = state

IRs:
REF_164(bool) -> mintAgents[addr]
REF_164(bool) (->mintAgents) := state(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintingAgentChanged(addr,state)

IRs:
Emit MintingAgentChanged(addr,state)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
4->1;
}
// Function: 1481.sol-CrowdsaleTokenExt-setReleaseAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseAgent = addr

IRs:
releaseAgent(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 1481.sol-CrowdsaleTokenExt-setReservedTokensList(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(addr != address(0))

IRs:
TMP_351 = CONVERT 0 to address
TMP_352(bool) = addr != TMP_351
TMP_353(None) = SOLIDITY_CALL assert(bool)(TMP_352)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! isAddressReserved(addr)

IRs:
TMP_354(bool) = INTERNAL_CALL, MintableTokenExt.isAddressReserved(address)(addr)
TMP_355 = UnaryType.BANG TMP_354 
CONDITION TMP_355"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
reservedTokensDestinations.push(addr)

IRs:
REF_166 -> LENGTH reservedTokensDestinations
TMP_357(uint256) := REF_166(uint256)
TMP_358(uint256) = TMP_357 + 1
REF_166(uint256) (->reservedTokensDestinations) := TMP_358(uint256)
REF_167(address) -> reservedTokensDestinations[TMP_357]
REF_167(address) (->reservedTokensDestinations) := addr(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reservedTokensDestinationsLen ++

IRs:
TMP_359(uint256) := reservedTokensDestinationsLen(uint256)
reservedTokensDestinationsLen(uint256) = reservedTokensDestinationsLen + 1"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
reservedTokensList[addr] = ReservedTokensData(inTokens,inPercentageUnit,inPercentageDecimals,true,false)

IRs:
REF_168(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
TMP_360(MintableTokenExt.ReservedTokensData) = new ReservedTokensData(inTokens,inPercentageUnit,inPercentageDecimals,True,False)
REF_168(MintableTokenExt.ReservedTokensData) (->reservedTokensList) := TMP_360(MintableTokenExt.ReservedTokensData)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 1481.sol-CrowdsaleTokenExt-setReservedTokensListMultiple(address[],uint256[],uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! reservedTokensDestinationsAreSet)

IRs:
TMP_328 = UnaryType.BANG reservedTokensDestinationsAreSet 
TMP_329(None) = SOLIDITY_CALL assert(bool)(TMP_328)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(addrs.length == inTokens.length)

IRs:
REF_148 -> LENGTH addrs
REF_149 -> LENGTH inTokens
TMP_330(bool) = REF_148 == REF_149
TMP_331(None) = SOLIDITY_CALL assert(bool)(TMP_330)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(inTokens.length == inPercentageUnit.length)

IRs:
REF_150 -> LENGTH inTokens
REF_151 -> LENGTH inPercentageUnit
TMP_332(bool) = REF_150 == REF_151
TMP_333(None) = SOLIDITY_CALL assert(bool)(TMP_332)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(inPercentageUnit.length == inPercentageDecimals.length)

IRs:
REF_152 -> LENGTH inPercentageUnit
REF_153 -> LENGTH inPercentageDecimals
TMP_334(bool) = REF_152 == REF_153
TMP_335(None) = SOLIDITY_CALL assert(bool)(TMP_334)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->13;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
iterator = 0

IRs:
iterator(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
iterator < addrs.length

IRs:
REF_154 -> LENGTH addrs
TMP_336(bool) = iterator < REF_154
CONDITION TMP_336"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
addrs[iterator] != address(0)

IRs:
REF_155(address) -> addrs[iterator]
TMP_337 = CONVERT 0 to address
TMP_338(bool) = REF_155 != TMP_337
CONDITION TMP_338"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
setReservedTokensList(addrs[iterator],inTokens[iterator],inPercentageUnit[iterator],inPercentageDecimals[iterator])

IRs:
REF_156(address) -> addrs[iterator]
REF_157(uint256) -> inTokens[iterator]
REF_158(uint256) -> inPercentageUnit[iterator]
REF_159(uint256) -> inPercentageDecimals[iterator]
INTERNAL_CALL, MintableTokenExt.setReservedTokensList(address,uint256,uint256,uint256)(REF_156,REF_157,REF_158,REF_159)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
iterator ++

IRs:
TMP_340(uint256) := iterator(uint256)
iterator(uint256) = iterator + 1"];
12->8;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
reservedTokensDestinationsAreSet = true

IRs:
reservedTokensDestinationsAreSet(bool) := True(bool)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
15->1;
}
// Function: 1481.sol-CrowdsaleTokenExt-setTokenInformation(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
UpdatedTokenInformation(name,symbol)

IRs:
Emit UpdatedTokenInformation(name,symbol)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1481.sol-CrowdsaleTokenExt-setTransferAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferAgents[addr] = state

IRs:
REF_169(bool) -> transferAgents[addr]
REF_169(bool) (->transferAgents) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 1481.sol-CrowdsaleTokenExt-setUpgradeAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_270(bool) = INTERNAL_CALL, CrowdsaleTokenExt.canUpgrade()()
TMP_271 = UnaryType.BANG TMP_270 
CONDITION TMP_271"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
agent == 0x0

IRs:
TMP_272(bool) = agent == 0
CONDITION TMP_272"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_273(bool) = msg.sender != upgradeMaster
CONDITION TMP_273"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
getUpgradeState() == UpgradeState.Upgrading

IRs:
TMP_274(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
REF_110(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_275(bool) = TMP_274 == REF_110
CONDITION TMP_275"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: THROW 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
upgradeAgent = UpgradeAgent(agent)

IRs:
TMP_276 = CONVERT agent to UpgradeAgent
upgradeAgent(UpgradeAgent) := TMP_276(UpgradeAgent)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! upgradeAgent.isUpgradeAgent()

IRs:
TMP_277(bool) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:isUpgradeAgent, arguments:[]  
TMP_278 = UnaryType.BANG TMP_277 
CONDITION TMP_278"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
upgradeAgent.originalSupply() != totalSupply

IRs:
TMP_279(uint256) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:originalSupply, arguments:[]  
TMP_280(bool) = TMP_279 != totalSupply
CONDITION TMP_280"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: THROW 18
"];
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
UpgradeAgentSet(upgradeAgent)

IRs:
Emit UpgradeAgentSet(upgradeAgent)"];
}
// Function: 1481.sol-CrowdsaleTokenExt-setUpgradeMaster(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
master == 0x0

IRs:
TMP_287(bool) = master == 0
CONDITION TMP_287"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_288(bool) = msg.sender != upgradeMaster
CONDITION TMP_288"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
upgradeMaster = master

IRs:
upgradeMaster(address) := master(address)"];
}
// Function: 1481.sol-CrowdsaleTokenExt-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
released = false

IRs:
released(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
reservedTokensDestinationsLen = 0

IRs:
reservedTokensDestinationsLen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
reservedTokensDestinationsAreSet = false

IRs:
reservedTokensDestinationsAreSet(bool) := False(bool)"];
}
// Function: 1481.sol-CrowdsaleTokenExt-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_373(bool) = INTERNAL_CALL, ERC20Basic.transfer(address,uint256)(_to,_value)
RETURN TMP_373"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(msg.sender)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(msg.sender)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1481.sol-CrowdsaleTokenExt-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_375(bool) = INTERNAL_CALL, ERC20.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_375"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_from)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(_from)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1481.sol-CrowdsaleTokenExt-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_363 = CONVERT 0 to address
TMP_364(bool) = newOwner != TMP_363
TMP_365(None) = SOLIDITY_CALL require(bool)(TMP_364)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1481.sol-CrowdsaleTokenExt-upgrade(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
state = getUpgradeState()

IRs:
TMP_259(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
state(UpgradeableToken.UpgradeState) := TMP_259(UpgradeableToken.UpgradeState)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! (state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)

IRs:
REF_105(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
TMP_260(bool) = state == REF_105
REF_106(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_261(bool) = state == REF_106
TMP_262(bool) = TMP_260 || TMP_261
TMP_263 = UnaryType.BANG TMP_262 
CONDITION TMP_263"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
value == 0

IRs:
TMP_264(bool) = value == 0
CONDITION TMP_264"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],value)

IRs:
REF_107(uint256) -> balances[msg.sender]
REF_108(uint256) -> balances[msg.sender]
TMP_265(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_108,value)
REF_107(uint256) (->balances) := TMP_265(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalSupply = safeSub(totalSupply,value)

IRs:
TMP_266(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(totalSupply,value)
totalSupply(uint256) := TMP_266(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalUpgraded = safeAdd(totalUpgraded,value)

IRs:
TMP_267(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalUpgraded,value)
totalUpgraded(uint256) := TMP_267(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
upgradeAgent.upgradeFrom(msg.sender,value)

IRs:
HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:upgradeFrom, arguments:['msg.sender', 'value']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Upgrade(msg.sender,upgradeAgent,value)

IRs:
Emit Upgrade(msg.sender,upgradeAgent,value)"];
}
// Function: 1481.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1481.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1481.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1481.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1481.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1481.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1481.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1481.sol-MintableTokenExt-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1481.sol-MintableTokenExt-allowance(address,address)
digraph{
}
// Function: 1481.sol-MintableTokenExt-approve(address,uint256)
digraph{
}
// Function: 1481.sol-MintableTokenExt-areTokensDistributedForAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].isDistributed

IRs:
REF_75(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_76(bool) -> REF_75.isDistributed
RETURN REF_76"];
2[label="Node Type: RETURN 2

EXPRESSION:
isDistributed

IRs:
RETURN isDistributed"];
}
// Function: 1481.sol-MintableTokenExt-balanceOf(address)
digraph{
}
// Function: 1481.sol-MintableTokenExt-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
mintingFinished

IRs:
CONDITION mintingFinished"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1481.sol-MintableTokenExt-finalizeReservedAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
reservedTokensData = reservedTokensList[addr]

IRs:
REF_71(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
reservedTokensData(MintableTokenExt.ReservedTokensData) := REF_71(MintableTokenExt.ReservedTokensData)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reservedTokensData.isDistributed = true

IRs:
REF_72(bool) -> reservedTokensData.isDistributed
REF_72(bool) (->reservedTokensData) := True(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableTokenExt.onlyMintAgent()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
4->1;
}
// Function: 1481.sol-MintableTokenExt-getReservedPercentageDecimals(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].inPercentageDecimals

IRs:
REF_81(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_82(uint256) -> REF_81.inPercentageDecimals
RETURN REF_82"];
2[label="Node Type: RETURN 2

EXPRESSION:
inPercentageDecimals

IRs:
RETURN inPercentageDecimals"];
}
// Function: 1481.sol-MintableTokenExt-getReservedPercentageUnit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].inPercentageUnit

IRs:
REF_79(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_80(uint256) -> REF_79.inPercentageUnit
RETURN REF_80"];
2[label="Node Type: RETURN 2

EXPRESSION:
inPercentageUnit

IRs:
RETURN inPercentageUnit"];
}
// Function: 1481.sol-MintableTokenExt-getReservedTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].inTokens

IRs:
REF_77(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_78(uint256) -> REF_77.inTokens
RETURN REF_78"];
2[label="Node Type: RETURN 2

EXPRESSION:
inTokens

IRs:
RETURN inTokens"];
}
// Function: 1481.sol-MintableTokenExt-isAddressReserved(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].isReserved

IRs:
REF_73(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_74(bool) -> REF_73.isReserved
RETURN REF_74"];
2[label="Node Type: RETURN 2

EXPRESSION:
isReserved

IRs:
RETURN isReserved"];
}
// Function: 1481.sol-MintableTokenExt-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 1481.sol-MintableTokenExt-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_217(bool) = a >= b
CONDITION TMP_217"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-MintableTokenExt-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_215(bool) = a >= b
CONDITION TMP_215"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-MintableTokenExt-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_218(bool) = a < b
CONDITION TMP_218"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-MintableTokenExt-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_216(bool) = a < b
CONDITION TMP_216"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-MintableTokenExt-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.plus(amount)

IRs:
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['totalSupply', 'amount'] 
totalSupply(uint256) := TMP_236(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[receiver] = balances[receiver].plus(amount)

IRs:
REF_96(uint256) -> balances[receiver]
REF_97(uint256) -> balances[receiver]
TMP_237(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['REF_97', 'amount'] 
REF_96(uint256) (->balances) := TMP_237(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0,receiver,amount)

IRs:
Emit Transfer(0,receiver,amount)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableTokenExt.onlyMintAgent()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
5->1;
}
// Function: 1481.sol-MintableTokenExt-onlyMintAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! mintAgents[msg.sender]

IRs:
REF_104(bool) -> mintAgents[msg.sender]
TMP_258 = UnaryType.BANG REF_104 
CONDITION TMP_258"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1481.sol-MintableTokenExt-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_256(bool) = msg.sender == owner
TMP_257(None) = SOLIDITY_CALL require(bool)(TMP_256)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1481.sol-MintableTokenExt-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_210(uint256) = a + b
c(uint256) := TMP_210(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_211(bool) = c >= a
TMP_212(bool) = c >= b
TMP_213(bool) = TMP_211 && TMP_212
TMP_214(None) = SOLIDITY_CALL assert(bool)(TMP_213)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-MintableTokenExt-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_199(bool) = b > 0
TMP_200(None) = SOLIDITY_CALL assert(bool)(TMP_199)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_201(uint256) = a / b
c(uint256) := TMP_201(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_202(uint256) = b * c
TMP_203(uint256) = a % b
TMP_204(uint256) = TMP_202 + TMP_203
TMP_205(bool) = a == TMP_204
TMP_206(None) = SOLIDITY_CALL assert(bool)(TMP_205)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-MintableTokenExt-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_193(uint256) = a * b
c(uint256) := TMP_193(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_194(bool) = a == 0
TMP_195(uint256) = c / a
TMP_196(bool) = TMP_195 == b
TMP_197(bool) = TMP_194 || TMP_196
TMP_198(None) = SOLIDITY_CALL assert(bool)(TMP_197)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-MintableTokenExt-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_207(bool) = b <= a
TMP_208(None) = SOLIDITY_CALL assert(bool)(TMP_207)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_209(uint256) = a - b
RETURN TMP_209"];
}
// Function: 1481.sol-MintableTokenExt-setMintAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAgents[addr] = state

IRs:
REF_99(bool) -> mintAgents[addr]
REF_99(bool) (->mintAgents) := state(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintingAgentChanged(addr,state)

IRs:
Emit MintingAgentChanged(addr,state)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
4->1;
}
// Function: 1481.sol-MintableTokenExt-setReservedTokensList(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(addr != address(0))

IRs:
TMP_244 = CONVERT 0 to address
TMP_245(bool) = addr != TMP_244
TMP_246(None) = SOLIDITY_CALL assert(bool)(TMP_245)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! isAddressReserved(addr)

IRs:
TMP_247(bool) = INTERNAL_CALL, MintableTokenExt.isAddressReserved(address)(addr)
TMP_248 = UnaryType.BANG TMP_247 
CONDITION TMP_248"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
reservedTokensDestinations.push(addr)

IRs:
REF_101 -> LENGTH reservedTokensDestinations
TMP_250(uint256) := REF_101(uint256)
TMP_251(uint256) = TMP_250 + 1
REF_101(uint256) (->reservedTokensDestinations) := TMP_251(uint256)
REF_102(address) -> reservedTokensDestinations[TMP_250]
REF_102(address) (->reservedTokensDestinations) := addr(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reservedTokensDestinationsLen ++

IRs:
TMP_252(uint256) := reservedTokensDestinationsLen(uint256)
reservedTokensDestinationsLen(uint256) = reservedTokensDestinationsLen + 1"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
reservedTokensList[addr] = ReservedTokensData(inTokens,inPercentageUnit,inPercentageDecimals,true,false)

IRs:
REF_103(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
TMP_253(MintableTokenExt.ReservedTokensData) = new ReservedTokensData(inTokens,inPercentageUnit,inPercentageDecimals,True,False)
REF_103(MintableTokenExt.ReservedTokensData) (->reservedTokensList) := TMP_253(MintableTokenExt.ReservedTokensData)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 1481.sol-MintableTokenExt-setReservedTokensListMultiple(address[],uint256[],uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! reservedTokensDestinationsAreSet)

IRs:
TMP_221 = UnaryType.BANG reservedTokensDestinationsAreSet 
TMP_222(None) = SOLIDITY_CALL assert(bool)(TMP_221)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(addrs.length == inTokens.length)

IRs:
REF_83 -> LENGTH addrs
REF_84 -> LENGTH inTokens
TMP_223(bool) = REF_83 == REF_84
TMP_224(None) = SOLIDITY_CALL assert(bool)(TMP_223)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(inTokens.length == inPercentageUnit.length)

IRs:
REF_85 -> LENGTH inTokens
REF_86 -> LENGTH inPercentageUnit
TMP_225(bool) = REF_85 == REF_86
TMP_226(None) = SOLIDITY_CALL assert(bool)(TMP_225)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(inPercentageUnit.length == inPercentageDecimals.length)

IRs:
REF_87 -> LENGTH inPercentageUnit
REF_88 -> LENGTH inPercentageDecimals
TMP_227(bool) = REF_87 == REF_88
TMP_228(None) = SOLIDITY_CALL assert(bool)(TMP_227)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->13;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
iterator = 0

IRs:
iterator(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
iterator < addrs.length

IRs:
REF_89 -> LENGTH addrs
TMP_229(bool) = iterator < REF_89
CONDITION TMP_229"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
addrs[iterator] != address(0)

IRs:
REF_90(address) -> addrs[iterator]
TMP_230 = CONVERT 0 to address
TMP_231(bool) = REF_90 != TMP_230
CONDITION TMP_231"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
setReservedTokensList(addrs[iterator],inTokens[iterator],inPercentageUnit[iterator],inPercentageDecimals[iterator])

IRs:
REF_91(address) -> addrs[iterator]
REF_92(uint256) -> inTokens[iterator]
REF_93(uint256) -> inPercentageUnit[iterator]
REF_94(uint256) -> inPercentageDecimals[iterator]
INTERNAL_CALL, MintableTokenExt.setReservedTokensList(address,uint256,uint256,uint256)(REF_91,REF_92,REF_93,REF_94)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
iterator ++

IRs:
TMP_233(uint256) := iterator(uint256)
iterator(uint256) = iterator + 1"];
12->8;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
reservedTokensDestinationsAreSet = true

IRs:
reservedTokensDestinationsAreSet(bool) := True(bool)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
15->1;
}
// Function: 1481.sol-MintableTokenExt-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
reservedTokensDestinationsLen = 0

IRs:
reservedTokensDestinationsLen(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
reservedTokensDestinationsAreSet = false

IRs:
reservedTokensDestinationsAreSet(bool) := False(bool)"];
}
// Function: 1481.sol-MintableTokenExt-transfer(address,uint256)
digraph{
}
// Function: 1481.sol-MintableTokenExt-transferFrom(address,address,uint256)
digraph{
}
// Function: 1481.sol-MintableTokenExt-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_177 = CONVERT 0 to address
TMP_178(bool) = newOwner != TMP_177
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1481.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1481.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1481.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1481.sol-ReleasableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1481.sol-ReleasableToken-allowance(address,address)
digraph{
}
// Function: 1481.sol-ReleasableToken-approve(address,uint256)
digraph{
}
// Function: 1481.sol-ReleasableToken-balanceOf(address)
digraph{
}
// Function: 1481.sol-ReleasableToken-canTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! released

IRs:
TMP_153 = UnaryType.BANG released 
CONDITION TMP_153"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
! transferAgents[_sender]

IRs:
REF_51(bool) -> transferAgents[_sender]
TMP_154 = UnaryType.BANG REF_51 
CONDITION TMP_154"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1481.sol-ReleasableToken-inReleaseState(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
releaseState != released

IRs:
TMP_155(bool) = releaseState != released
CONDITION TMP_155"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1481.sol-ReleasableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_151(bool) = msg.sender == owner
TMP_152(None) = SOLIDITY_CALL require(bool)(TMP_151)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1481.sol-ReleasableToken-onlyReleaseAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != releaseAgent

IRs:
TMP_156(bool) = msg.sender != releaseAgent
CONDITION TMP_156"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 1481.sol-ReleasableToken-releaseTokenTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
released = true

IRs:
released(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyReleaseAgent()

IRs:
MODIFIER_CALL, ReleasableToken.onlyReleaseAgent()()"];
2->1;
}
// Function: 1481.sol-ReleasableToken-setReleaseAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseAgent = addr

IRs:
releaseAgent(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 1481.sol-ReleasableToken-setTransferAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferAgents[addr] = state

IRs:
REF_50(bool) -> transferAgents[addr]
REF_50(bool) (->transferAgents) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 1481.sol-ReleasableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
released = false

IRs:
released(bool) := False(bool)"];
}
// Function: 1481.sol-ReleasableToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_147(bool) = INTERNAL_CALL, ERC20Basic.transfer(address,uint256)(_to,_value)
RETURN TMP_147"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(msg.sender)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(msg.sender)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1481.sol-ReleasableToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_149(bool) = INTERNAL_CALL, ERC20.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_149"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_from)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(_from)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1481.sol-ReleasableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_137 = CONVERT 0 to address
TMP_138(bool) = newOwner != TMP_137
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1481.sol-SafeMath-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_31(bool) = a >= b
CONDITION TMP_31"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-SafeMath-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_29(bool) = a >= b
CONDITION TMP_29"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-SafeMath-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_32(bool) = a < b
CONDITION TMP_32"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-SafeMath-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_30(bool) = a < b
CONDITION TMP_30"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_24(uint256) = a + b
c(uint256) := TMP_24(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_25(bool) = c >= a
TMP_26(bool) = c >= b
TMP_27(bool) = TMP_25 && TMP_26
TMP_28(None) = SOLIDITY_CALL assert(bool)(TMP_27)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_13(bool) = b > 0
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_15(uint256) = a / b
c(uint256) := TMP_15(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_16(uint256) = b * c
TMP_17(uint256) = a % b
TMP_18(uint256) = TMP_16 + TMP_17
TMP_19(bool) = a == TMP_18
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_7(uint256) = a * b
c(uint256) := TMP_7(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_8(bool) = a == 0
TMP_9(uint256) = c / a
TMP_10(bool) = TMP_9 == b
TMP_11(bool) = TMP_8 || TMP_10
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_21(bool) = b <= a
TMP_22(None) = SOLIDITY_CALL assert(bool)(TMP_21)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_23(uint256) = a - b
RETURN TMP_23"];
}
// Function: 1481.sol-SafeMathLibExt-divides(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_163(bool) = b > 0
TMP_164(None) = SOLIDITY_CALL assert(bool)(TMP_163)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_165(uint256) = a / b
c(uint256) := TMP_165(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_166(uint256) = b * c
TMP_167(uint256) = a % b
TMP_168(uint256) = TMP_166 + TMP_167
TMP_169(bool) = a == TMP_168
TMP_170(None) = SOLIDITY_CALL assert(bool)(TMP_169)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-SafeMathLibExt-minus(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_171(bool) = b <= a
TMP_172(None) = SOLIDITY_CALL assert(bool)(TMP_171)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_173(uint256) = a - b
RETURN TMP_173"];
}
// Function: 1481.sol-SafeMathLibExt-plus(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_174(uint256) = a + b
c(uint256) := TMP_174(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_175(bool) = c >= a
TMP_176(None) = SOLIDITY_CALL assert(bool)(TMP_175)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-SafeMathLibExt-times(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_157(uint256) = a * b
c(uint256) := TMP_157(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_158(bool) = a == 0
TMP_159(uint256) = c / a
TMP_160(bool) = TMP_159 == b
TMP_161(bool) = TMP_158 || TMP_160
TMP_162(None) = SOLIDITY_CALL assert(bool)(TMP_161)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_17(mapping(address => uint256)) -> allowed[_owner]
REF_18(uint256) -> REF_17[_spender]
RETURN REF_18"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1481.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_value != 0) && (allowed[msg.sender][_spender] != 0)

IRs:
TMP_66(bool) = _value != 0
REF_13(mapping(address => uint256)) -> allowed[msg.sender]
REF_14(uint256) -> REF_13[_spender]
TMP_67(bool) = REF_14 != 0
TMP_68(bool) = TMP_66 && TMP_67
CONDITION TMP_68"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_15(mapping(address => uint256)) -> allowed[msg.sender]
REF_16(uint256) -> REF_15[_spender]
REF_16(uint256) (->allowed) := _value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1481.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_12(uint256) -> balances[_owner]
RETURN REF_12"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1481.sol-StandardToken-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 1481.sol-StandardToken-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_57(bool) = a >= b
CONDITION TMP_57"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-StandardToken-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_55(bool) = a >= b
CONDITION TMP_55"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-StandardToken-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_58(bool) = a < b
CONDITION TMP_58"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-StandardToken-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_56(bool) = a < b
CONDITION TMP_56"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-StandardToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_50(uint256) = a + b
c(uint256) := TMP_50(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_51(bool) = c >= a
TMP_52(bool) = c >= b
TMP_53(bool) = TMP_51 && TMP_52
TMP_54(None) = SOLIDITY_CALL assert(bool)(TMP_53)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-StandardToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_39(bool) = b > 0
TMP_40(None) = SOLIDITY_CALL assert(bool)(TMP_39)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_41(uint256) = a / b
c(uint256) := TMP_41(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_42(uint256) = b * c
TMP_43(uint256) = a % b
TMP_44(uint256) = TMP_42 + TMP_43
TMP_45(bool) = a == TMP_44
TMP_46(None) = SOLIDITY_CALL assert(bool)(TMP_45)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-StandardToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_33(uint256) = a * b
c(uint256) := TMP_33(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_34(bool) = a == 0
TMP_35(uint256) = c / a
TMP_36(bool) = TMP_35 == b
TMP_37(bool) = TMP_34 || TMP_36
TMP_38(None) = SOLIDITY_CALL assert(bool)(TMP_37)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-StandardToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_47(bool) = b <= a
TMP_48(None) = SOLIDITY_CALL assert(bool)(TMP_47)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_49(uint256) = a - b
RETURN TMP_49"];
}
// Function: 1481.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_value)

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_1(uint256) -> balances[msg.sender]
TMP_59(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_1,_value)
REF_0(uint256) (->balances) := TMP_59(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_2(uint256) -> balances[_to]
REF_3(uint256) -> balances[_to]
TMP_60(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_3,_value)
REF_2(uint256) (->balances) := TMP_60(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1481.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
_allowance(uint256) := REF_5(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_6(uint256) -> balances[_to]
REF_7(uint256) -> balances[_to]
TMP_62(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_7,_value)
REF_6(uint256) (->balances) := TMP_62(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = safeSub(balances[_from],_value)

IRs:
REF_8(uint256) -> balances[_from]
REF_9(uint256) -> balances[_from]
TMP_63(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_9,_value)
REF_8(uint256) (->balances) := TMP_63(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] = safeSub(_allowance,_value)

IRs:
REF_10(mapping(address => uint256)) -> allowed[_from]
REF_11(uint256) -> REF_10[msg.sender]
TMP_64(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(_allowance,_value)
REF_11(uint256) (->allowed) := TMP_64(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1481.sol-UpgradeAgent-isUpgradeAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1481.sol-UpgradeAgent-upgradeFrom(address,uint256)
digraph{
}
// Function: 1481.sol-UpgradeableToken-UpgradeableToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradeMaster = _upgradeMaster

IRs:
upgradeMaster(address) := _upgradeMaster(address)"];
}
// Function: 1481.sol-UpgradeableToken-allowance(address,address)
digraph{
}
// Function: 1481.sol-UpgradeableToken-approve(address,uint256)
digraph{
}
// Function: 1481.sol-UpgradeableToken-balanceOf(address)
digraph{
}
// Function: 1481.sol-UpgradeableToken-canUpgrade()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1481.sol-UpgradeableToken-getUpgradeState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_130(bool) = INTERNAL_CALL, UpgradeableToken.canUpgrade()()
TMP_131 = UnaryType.BANG TMP_130 
CONDITION TMP_131"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
UpgradeState.NotAllowed

IRs:
REF_46(UpgradeableToken.UpgradeState) -> UpgradeState.NotAllowed
RETURN REF_46"];
3[label="Node Type: IF 3

EXPRESSION:
address(upgradeAgent) == 0x00

IRs:
TMP_132 = CONVERT upgradeAgent to address
TMP_133(bool) = TMP_132 == 0
CONDITION TMP_133"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
UpgradeState.WaitingForAgent

IRs:
REF_47(UpgradeableToken.UpgradeState) -> UpgradeState.WaitingForAgent
RETURN REF_47"];
5[label="Node Type: IF 5

EXPRESSION:
totalUpgraded == 0

IRs:
TMP_134(bool) = totalUpgraded == 0
CONDITION TMP_134"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
UpgradeState.ReadyToUpgrade

IRs:
REF_48(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
RETURN REF_48"];
7[label="Node Type: RETURN 7

EXPRESSION:
UpgradeState.Upgrading

IRs:
REF_49(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
RETURN REF_49"];
}
// Function: 1481.sol-UpgradeableToken-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 1481.sol-UpgradeableToken-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_105(bool) = a >= b
CONDITION TMP_105"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-UpgradeableToken-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_103(bool) = a >= b
CONDITION TMP_103"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-UpgradeableToken-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_106(bool) = a < b
CONDITION TMP_106"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-UpgradeableToken-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_104(bool) = a < b
CONDITION TMP_104"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1481.sol-UpgradeableToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_98(uint256) = a + b
c(uint256) := TMP_98(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_99(bool) = c >= a
TMP_100(bool) = c >= b
TMP_101(bool) = TMP_99 && TMP_100
TMP_102(None) = SOLIDITY_CALL assert(bool)(TMP_101)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-UpgradeableToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_87(bool) = b > 0
TMP_88(None) = SOLIDITY_CALL assert(bool)(TMP_87)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_89(uint256) = a / b
c(uint256) := TMP_89(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_90(uint256) = b * c
TMP_91(uint256) = a % b
TMP_92(uint256) = TMP_90 + TMP_91
TMP_93(bool) = a == TMP_92
TMP_94(None) = SOLIDITY_CALL assert(bool)(TMP_93)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-UpgradeableToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_81(uint256) = a * b
c(uint256) := TMP_81(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_82(bool) = a == 0
TMP_83(uint256) = c / a
TMP_84(bool) = TMP_83 == b
TMP_85(bool) = TMP_82 || TMP_84
TMP_86(None) = SOLIDITY_CALL assert(bool)(TMP_85)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1481.sol-UpgradeableToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_95(bool) = b <= a
TMP_96(None) = SOLIDITY_CALL assert(bool)(TMP_95)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_97(uint256) = a - b
RETURN TMP_97"];
}
// Function: 1481.sol-UpgradeableToken-setUpgradeAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_118(bool) = INTERNAL_CALL, UpgradeableToken.canUpgrade()()
TMP_119 = UnaryType.BANG TMP_118 
CONDITION TMP_119"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
agent == 0x0

IRs:
TMP_120(bool) = agent == 0
CONDITION TMP_120"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_121(bool) = msg.sender != upgradeMaster
CONDITION TMP_121"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
getUpgradeState() == UpgradeState.Upgrading

IRs:
TMP_122(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
REF_43(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_123(bool) = TMP_122 == REF_43
CONDITION TMP_123"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: THROW 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
upgradeAgent = UpgradeAgent(agent)

IRs:
TMP_124 = CONVERT agent to UpgradeAgent
upgradeAgent(UpgradeAgent) := TMP_124(UpgradeAgent)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! upgradeAgent.isUpgradeAgent()

IRs:
TMP_125(bool) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:isUpgradeAgent, arguments:[]  
TMP_126 = UnaryType.BANG TMP_125 
CONDITION TMP_126"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
upgradeAgent.originalSupply() != totalSupply

IRs:
TMP_127(uint256) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:originalSupply, arguments:[]  
TMP_128(bool) = TMP_127 != totalSupply
CONDITION TMP_128"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: THROW 18
"];
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
UpgradeAgentSet(upgradeAgent)

IRs:
Emit UpgradeAgentSet(upgradeAgent)"];
}
// Function: 1481.sol-UpgradeableToken-setUpgradeMaster(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
master == 0x0

IRs:
TMP_135(bool) = master == 0
CONDITION TMP_135"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_136(bool) = msg.sender != upgradeMaster
CONDITION TMP_136"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
upgradeMaster = master

IRs:
upgradeMaster(address) := master(address)"];
}
// Function: 1481.sol-UpgradeableToken-transfer(address,uint256)
digraph{
}
// Function: 1481.sol-UpgradeableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 1481.sol-UpgradeableToken-upgrade(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
state = getUpgradeState()

IRs:
TMP_107(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
state(UpgradeableToken.UpgradeState) := TMP_107(UpgradeableToken.UpgradeState)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! (state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)

IRs:
REF_38(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
TMP_108(bool) = state == REF_38
REF_39(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_109(bool) = state == REF_39
TMP_110(bool) = TMP_108 || TMP_109
TMP_111 = UnaryType.BANG TMP_110 
CONDITION TMP_111"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
value == 0

IRs:
TMP_112(bool) = value == 0
CONDITION TMP_112"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],value)

IRs:
REF_40(uint256) -> balances[msg.sender]
REF_41(uint256) -> balances[msg.sender]
TMP_113(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_41,value)
REF_40(uint256) (->balances) := TMP_113(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalSupply = safeSub(totalSupply,value)

IRs:
TMP_114(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(totalSupply,value)
totalSupply(uint256) := TMP_114(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalUpgraded = safeAdd(totalUpgraded,value)

IRs:
TMP_115(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalUpgraded,value)
totalUpgraded(uint256) := TMP_115(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
upgradeAgent.upgradeFrom(msg.sender,value)

IRs:
HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:upgradeFrom, arguments:['msg.sender', 'value']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Upgrade(msg.sender,upgradeAgent,value)

IRs:
Emit Upgrade(msg.sender,upgradeAgent,value)"];
}
}
