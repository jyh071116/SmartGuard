digraph G {
// Function: 1488.sol-BatchTransfer-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner = msg.sender

IRs:
_owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_erc20_address = erc20_address

IRs:
_erc20_address(address) := erc20_address(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_authed_addresses[msg.sender] = true

IRs:
REF_0(bool) -> _authed_addresses[msg.sender]
REF_0(bool) (->_authed_addresses) := True(bool)"];
}
// Function: 1488.sol-BatchTransfer-erc20Address()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_erc20_address

IRs:
RETURN _erc20_address"];
}
// Function: 1488.sol-BatchTransfer-isAuthed(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_authed_addresses[authed_address]

IRs:
REF_2(bool) -> _authed_addresses[authed_address]
RETURN REF_2"];
}
// Function: 1488.sol-BatchTransfer-onlyAuthed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_authed_addresses[msg.sender],require auth permission)

IRs:
REF_13(bool) -> _authed_addresses[msg.sender]
TMP_21(None) = SOLIDITY_CALL require(bool,string)(REF_13,require auth permission)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1488.sol-BatchTransfer-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == _owner,require owner permission)

IRs:
TMP_19(bool) = msg.sender == _owner
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,require owner permission)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1488.sol-BatchTransfer-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_owner

IRs:
RETURN _owner"];
}
// Function: 1488.sol-BatchTransfer-transferFrom(address,address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->30;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(token_receivers.length == values.length,token_receiver's size must eq value's size)

IRs:
REF_3 -> LENGTH token_receivers
REF_4 -> LENGTH values
TMP_1(bool) = REF_3 == REF_4
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,token_receiver's size must eq value's size)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(token_receivers.length > 0,token_receiver's length must gt 0)

IRs:
REF_5 -> LENGTH token_receivers
TMP_3(bool) = REF_5 > 0
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,token_receiver's length must gt 0)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
length = token_receivers.length

IRs:
REF_6 -> LENGTH token_receivers
length(uint256) := REF_6(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
value = 0

IRs:
value(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
total_value = 0

IRs:
total_value(uint256) := 0(uint256)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->15;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < length

IRs:
TMP_5(bool) = i < length
CONDITION TMP_5"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
value = values[i]

IRs:
REF_7(uint256) -> values[i]
value(uint256) := REF_7(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool,string)(value > 0,value must gt 0)

IRs:
TMP_6(bool) = value > 0
TMP_7(None) = SOLIDITY_CALL require(bool,string)(TMP_6,value must gt 0)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
total_value += value

IRs:
total_value(uint256) = total_value + value"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
14->10;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
token_contract = ERC20(_erc20_address)

IRs:
TMP_8 = CONVERT _erc20_address to ERC20
token_contract(ERC20) := TMP_8(ERC20)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
holder_balance = token_contract.balanceOf(token_holder)

IRs:
TMP_9(uint256) = HIGH_LEVEL_CALL, dest:token_contract(ERC20), function:balanceOf, arguments:['token_holder']  
holder_balance(uint256) := TMP_9(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
require(bool,string)(holder_balance >= total_value,balance of holder must gte total_value)

IRs:
TMP_10(bool) = holder_balance >= total_value
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,balance of holder must gte total_value)"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
my_allowance = token_contract.allowance(token_holder,this)

IRs:
TMP_12(uint256) = HIGH_LEVEL_CALL, dest:token_contract(ERC20), function:allowance, arguments:['token_holder', 'this']  
my_allowance(uint256) := TMP_12(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(my_allowance >= total_value,allowance to contract must gte total_value)

IRs:
TMP_13(bool) = my_allowance >= total_value
TMP_14(None) = SOLIDITY_CALL require(bool,string)(TMP_13,allowance to contract must gte total_value)"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->29;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < length

IRs:
TMP_15(bool) = i < length
CONDITION TMP_15"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: NEW VARIABLE 24

EXPRESSION:
token_receiver = token_receivers[i]

IRs:
REF_10(address) -> token_receivers[i]
token_receiver(address) := REF_10(address)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
value = values[i]

IRs:
REF_11(uint256) -> values[i]
value(uint256) := REF_11(uint256)"];
25->26;
26[label="Node Type: NEW VARIABLE 26

EXPRESSION:
is_success = token_contract.transferFrom(token_holder,token_receiver,value)

IRs:
TMP_16(bool) = HIGH_LEVEL_CALL, dest:token_contract(ERC20), function:transferFrom, arguments:['token_holder', 'token_receiver', 'value']  
is_success(bool) := TMP_16(bool)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
require(bool,string)(is_success,transaction should be success)

IRs:
TMP_17(None) = SOLIDITY_CALL require(bool,string)(is_success,transaction should be success)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
28->23;
29[label="Node Type: RETURN 29

EXPRESSION:
true

IRs:
RETURN True"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
onlyAuthed()

IRs:
MODIFIER_CALL, BatchTransfer.onlyAuthed()()"];
30->1;
}
// Function: 1488.sol-BatchTransfer-updateAuth(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_authed_addresses[auth_address] = is_auth

IRs:
REF_1(bool) -> _authed_addresses[auth_address]
REF_1(bool) (->_authed_addresses) := is_auth(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BatchTransfer.onlyOwner()()"];
2->1;
}
// Function: 1488.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1488.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1488.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1488.sol-ERC20-decimals()
digraph{
}
// Function: 1488.sol-ERC20-name()
digraph{
}
// Function: 1488.sol-ERC20-symbol()
digraph{
}
// Function: 1488.sol-ERC20-totalSupply()
digraph{
}
// Function: 1488.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1488.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
}
