digraph G {
// Function: 1514.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_127 = CONVERT _input to bytes
_temp(bytes) := TMP_127(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_184 -> LENGTH _temp
_length(uint256) := REF_184(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_128(bool) = _length <= 32
TMP_129(bool) = _length > 0
TMP_130(bool) = TMP_128 && TMP_129
TMP_131(None) = SOLIDITY_CALL require(bool,string)(TMP_130,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_185(None) -> _temp[0]
TMP_132(bool) = REF_185 != 32
TMP_133(uint256) = _length - 1
REF_186(None) -> _temp[TMP_133]
TMP_134(bool) = REF_186 != 32
TMP_135(bool) = TMP_132 && TMP_134
TMP_136(None) = SOLIDITY_CALL require(bool,string)(TMP_135,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_187(None) -> _temp[0]
TMP_137(bool) = REF_187 == 48
CONDITION TMP_137"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_188(None) -> _temp[1]
TMP_138(bool) = REF_188 != 120
TMP_139(None) = SOLIDITY_CALL require(bool,string)(TMP_138,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_189(None) -> _temp[1]
TMP_140(bool) = REF_189 != 88
TMP_141(None) = SOLIDITY_CALL require(bool,string)(TMP_140,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_142(bool) = i < _length
CONDITION TMP_142"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_190(None) -> _temp[i]
TMP_143(bool) = REF_190 > 64
REF_191(None) -> _temp[i]
TMP_144(bool) = REF_191 < 91
TMP_145(bool) = TMP_143 && TMP_144
CONDITION TMP_145"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_192(bytes1) -> _temp[i]
REF_193(None) -> _temp[i]
TMP_146 = CONVERT REF_193 to uint256
TMP_147(uint256) = TMP_146 + 32
TMP_148 = CONVERT TMP_147 to bytes1
REF_192(bytes1) (->_temp) := TMP_148(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_149(bool) = _hasNonNumber == False
CONDITION TMP_149"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_194(None) -> _temp[i]
TMP_150(bool) = REF_194 == 32
REF_195(None) -> _temp[i]
TMP_151(bool) = REF_195 > 96
REF_196(None) -> _temp[i]
TMP_152(bool) = REF_196 < 123
TMP_153(bool) = TMP_151 && TMP_152
TMP_154(bool) = TMP_150 || TMP_153
REF_197(None) -> _temp[i]
TMP_155(bool) = REF_197 > 47
REF_198(None) -> _temp[i]
TMP_156(bool) = REF_198 < 58
TMP_157(bool) = TMP_155 && TMP_156
TMP_158(bool) = TMP_154 || TMP_157
TMP_159(None) = SOLIDITY_CALL require(bool,string)(TMP_158,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_199(None) -> _temp[i]
TMP_160(bool) = REF_199 == 32
CONDITION TMP_160"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_161(uint256) = i + 1
REF_200(None) -> _temp[TMP_161]
TMP_162(bool) = REF_200 != 32
TMP_163(None) = SOLIDITY_CALL require(bool,string)(TMP_162,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_164(bool) = _hasNonNumber == False
REF_201(None) -> _temp[i]
TMP_165(bool) = REF_201 < 48
REF_202(None) -> _temp[i]
TMP_166(bool) = REF_202 > 57
TMP_167(bool) = TMP_165 || TMP_166
TMP_168(bool) = TMP_164 && TMP_167
CONDITION TMP_168"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_169(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_170(bool) = _hasNonNumber == True
TMP_171(None) = SOLIDITY_CALL require(bool,string)(TMP_170,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 1514.sol-PlayerBook-addGame(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(gameIDs_[_gameAddress] == 0,derp, that games already been registered)

IRs:
REF_154(uint256) -> gameIDs_[_gameAddress]
TMP_110(bool) = REF_154 == 0
TMP_111(None) = SOLIDITY_CALL require(bool,string)(TMP_110,derp, that games already been registered)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gID_ ++

IRs:
TMP_112(uint256) := gID_(uint256)
gID_(uint256) = gID_ + 1"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_name = _gameNameStr.nameFilter()

IRs:
TMP_113(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_gameNameStr'] 
_name(bytes32) := TMP_113(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameIDs_[_gameAddress] = gID_

IRs:
REF_156(uint256) -> gameIDs_[_gameAddress]
REF_156(uint256) (->gameIDs_) := gID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gameNames_[_gameAddress] = _name

IRs:
REF_157(bytes32) -> gameNames_[_gameAddress]
REF_157(bytes32) (->gameNames_) := _name(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[gID_] = PlayerBookReceiverInterface(_gameAddress)

IRs:
REF_158(PlayerBookReceiverInterface) -> games_[gID_]
TMP_114 = CONVERT _gameAddress to PlayerBookReceiverInterface
REF_158(PlayerBookReceiverInterface) (->games_) := TMP_114(PlayerBookReceiverInterface)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
games_[gID_].receivePlayerInfo(1,plyr_[1].addr,plyr_[1].name,0)

IRs:
REF_159(PlayerBookReceiverInterface) -> games_[gID_]
REF_161(PlayerBook.Player) -> plyr_[1]
REF_162(address) -> REF_161.addr
REF_163(PlayerBook.Player) -> plyr_[1]
REF_164(bytes32) -> REF_163.name
HIGH_LEVEL_CALL, dest:REF_159(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['1', 'REF_162', 'REF_164', '0']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
games_[gID_].receivePlayerInfo(2,plyr_[2].addr,plyr_[2].name,0)

IRs:
REF_165(PlayerBookReceiverInterface) -> games_[gID_]
REF_167(PlayerBook.Player) -> plyr_[2]
REF_168(address) -> REF_167.addr
REF_169(PlayerBook.Player) -> plyr_[2]
REF_170(bytes32) -> REF_169.name
HIGH_LEVEL_CALL, dest:REF_165(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['2', 'REF_168', 'REF_170', '0']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
games_[gID_].receivePlayerInfo(3,plyr_[3].addr,plyr_[3].name,0)

IRs:
REF_171(PlayerBookReceiverInterface) -> games_[gID_]
REF_173(PlayerBook.Player) -> plyr_[3]
REF_174(address) -> REF_173.addr
REF_175(PlayerBook.Player) -> plyr_[3]
REF_176(bytes32) -> REF_175.name
HIGH_LEVEL_CALL, dest:REF_171(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['3', 'REF_174', 'REF_176', '0']  "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
games_[gID_].receivePlayerInfo(4,plyr_[4].addr,plyr_[4].name,0)

IRs:
REF_177(PlayerBookReceiverInterface) -> games_[gID_]
REF_179(PlayerBook.Player) -> plyr_[4]
REF_180(address) -> REF_179.addr
REF_181(PlayerBook.Player) -> plyr_[4]
REF_182(bytes32) -> REF_181.name
HIGH_LEVEL_CALL, dest:REF_177(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['4', 'REF_180', 'REF_182', '0']  "];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyManager()

IRs:
MODIFIER_CALL, PlayerBook.onlyManager()()"];
11->1;
}
// Function: 1514.sol-PlayerBook-addMeToAllGames()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_83(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_83(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_45(bool) = _pID != 0
TMP_46(None) = SOLIDITY_CALL require(bool,string)(TMP_45,hey there buddy, you dont even have an account)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_laff = plyr_[_pID].laff

IRs:
REF_84(PlayerBook.Player) -> plyr_[_pID]
REF_85(uint256) -> REF_84.laff
_laff(uint256) := REF_85(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_86(PlayerBook.Player) -> plyr_[_pID]
REF_87(uint256) -> REF_86.names
_totalNames(uint256) := REF_87(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_name = plyr_[_pID].name

IRs:
REF_88(PlayerBook.Player) -> plyr_[_pID]
REF_89(bytes32) -> REF_88.name
_name(bytes32) := REF_89(bytes32)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i <= gID_

IRs:
TMP_47(bool) = i <= gID_
CONDITION TMP_47"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_laff)

IRs:
REF_90(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_90(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_laff']  "];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_totalNames > 1

IRs:
TMP_49(bool) = _totalNames > 1
CONDITION TMP_49"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
ii <= _totalNames

IRs:
TMP_50(bool) = ii <= _totalNames
CONDITION TMP_50"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_92(PlayerBookReceiverInterface) -> games_[i]
REF_94(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_95(bytes32) -> REF_94[ii]
HIGH_LEVEL_CALL, dest:REF_92(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_95']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ii ++

IRs:
TMP_52(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_53(uint256) := i(uint256)
i(uint256) = i + 1"];
20->10;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
21->1;
}
// Function: 1514.sol-PlayerBook-addMeToGame(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_gameID <= gID_,silly player, that game doesn't exist yet)

IRs:
TMP_35(bool) = _gameID <= gID_
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,silly player, that game doesn't exist yet)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_70(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_70(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_37(bool) = _pID != 0
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,hey there buddy, you dont even have an account)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_71(PlayerBook.Player) -> plyr_[_pID]
REF_72(uint256) -> REF_71.names
_totalNames(uint256) := REF_72(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[_gameID].receivePlayerInfo(_pID,_addr,plyr_[_pID].name,plyr_[_pID].laff)

IRs:
REF_73(PlayerBookReceiverInterface) -> games_[_gameID]
REF_75(PlayerBook.Player) -> plyr_[_pID]
REF_76(bytes32) -> REF_75.name
REF_77(PlayerBook.Player) -> plyr_[_pID]
REF_78(uint256) -> REF_77.laff
HIGH_LEVEL_CALL, dest:REF_73(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', 'REF_76', 'REF_78']  "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_totalNames > 1

IRs:
TMP_40(bool) = _totalNames > 1
CONDITION TMP_40"];
7->10[label="True"];
7->14[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->14;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
ii <= _totalNames

IRs:
TMP_41(bool) = ii <= _totalNames
CONDITION TMP_41"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
games_[_gameID].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_79(PlayerBookReceiverInterface) -> games_[_gameID]
REF_81(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_82(bytes32) -> REF_81[ii]
HIGH_LEVEL_CALL, dest:REF_79(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_82']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ii ++

IRs:
TMP_43(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
13->11;
14[label="Node Type: END_IF 14
"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
15->1;
}
// Function: 1514.sol-PlayerBook-checkIfNameValid(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameStr.nameFilter()

IRs:
TMP_0(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameStr'] 
_name(bytes32) := TMP_0(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxName_[_name] == 0

IRs:
REF_49(uint256) -> pIDxName_[_name]
TMP_1(bool) = REF_49 == 0
CONDITION TMP_1"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1514.sol-PlayerBook-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
plyr_[1].addr = 0xdb81a5EFd600B87e31C31C64bc1F73E98a7Ed6D7

IRs:
REF_0(PlayerBook.Player) -> plyr_[1]
REF_1(address) -> REF_0.addr
REF_1(address) (->plyr_) := 1253160230080154273796794263191520095796079810263(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
plyr_[1].name = alice

IRs:
REF_2(PlayerBook.Player) -> plyr_[1]
REF_3(bytes32) -> REF_2.name
REF_3(bytes32) (->plyr_) := alice(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[1].names = 1

IRs:
REF_4(PlayerBook.Player) -> plyr_[1]
REF_5(uint256) -> REF_4.names
REF_5(uint256) (->plyr_) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pIDxAddr_[0xdb81a5EFd600B87e31C31C64bc1F73E98a7Ed6D7] = 1

IRs:
REF_6(uint256) -> pIDxAddr_[1253160230080154273796794263191520095796079810263]
REF_6(uint256) (->pIDxAddr_) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[alice] = 1

IRs:
REF_7(uint256) -> pIDxName_[alice]
REF_7(uint256) (->pIDxName_) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyrNames_[1][alice] = true

IRs:
REF_8(mapping(bytes32 => bool)) -> plyrNames_[1]
REF_9(bool) -> REF_8[alice]
REF_9(bool) (->plyrNames_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNameList_[1][1] = alice

IRs:
REF_10(mapping(uint256 => bytes32)) -> plyrNameList_[1]
REF_11(bytes32) -> REF_10[1]
REF_11(bytes32) (->plyrNameList_) := alice(string)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[2].addr = 0x4a81569789c65258a9bC727c3990E48bdF97809c

IRs:
REF_12(PlayerBook.Player) -> plyr_[2]
REF_13(address) -> REF_12.addr
REF_13(address) (->plyr_) := 425349656393936092004150303744870462172656271516(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[2].name = bob

IRs:
REF_14(PlayerBook.Player) -> plyr_[2]
REF_15(bytes32) -> REF_14.name
REF_15(bytes32) (->plyr_) := bob(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[2].names = 1

IRs:
REF_16(PlayerBook.Player) -> plyr_[2]
REF_17(uint256) -> REF_16.names
REF_17(uint256) (->plyr_) := 1(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
pIDxAddr_[0x4a81569789c65258a9bC727c3990E48bdF97809c] = 2

IRs:
REF_18(uint256) -> pIDxAddr_[425349656393936092004150303744870462172656271516]
REF_18(uint256) (->pIDxAddr_) := 2(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
pIDxName_[bob] = 2

IRs:
REF_19(uint256) -> pIDxName_[bob]
REF_19(uint256) (->pIDxName_) := 2(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
plyrNames_[2][bob] = true

IRs:
REF_20(mapping(bytes32 => bool)) -> plyrNames_[2]
REF_21(bool) -> REF_20[bob]
REF_21(bool) (->plyrNames_) := True(bool)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyrNameList_[2][1] = bob

IRs:
REF_22(mapping(uint256 => bytes32)) -> plyrNameList_[2]
REF_23(bytes32) -> REF_22[1]
REF_23(bytes32) (->plyrNameList_) := bob(string)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[3].addr = 0xf5E59B09Fc926abEff0B16989fc649E29cd9dE7B

IRs:
REF_24(PlayerBook.Player) -> plyr_[3]
REF_25(address) -> REF_24.addr
REF_25(address) (->plyr_) := 1403823115304890616610054159408489427242055229051(address)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[3].name = clark

IRs:
REF_26(PlayerBook.Player) -> plyr_[3]
REF_27(bytes32) -> REF_26.name
REF_27(bytes32) (->plyr_) := clark(string)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
plyr_[3].names = 1

IRs:
REF_28(PlayerBook.Player) -> plyr_[3]
REF_29(uint256) -> REF_28.names
REF_29(uint256) (->plyr_) := 1(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
pIDxAddr_[0xf5E59B09Fc926abEff0B16989fc649E29cd9dE7B] = 3

IRs:
REF_30(uint256) -> pIDxAddr_[1403823115304890616610054159408489427242055229051]
REF_30(uint256) (->pIDxAddr_) := 3(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
pIDxName_[clark] = 3

IRs:
REF_31(uint256) -> pIDxName_[clark]
REF_31(uint256) (->pIDxName_) := 3(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
plyrNames_[3][clark] = true

IRs:
REF_32(mapping(bytes32 => bool)) -> plyrNames_[3]
REF_33(bool) -> REF_32[clark]
REF_33(bool) (->plyrNames_) := True(bool)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
plyrNameList_[3][1] = clark

IRs:
REF_34(mapping(uint256 => bytes32)) -> plyrNameList_[3]
REF_35(bytes32) -> REF_34[1]
REF_35(bytes32) (->plyrNameList_) := clark(string)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
plyr_[4].addr = 0x15Bed2Fd45d1B4C43bFdA83205167E037e147d97

IRs:
REF_36(PlayerBook.Player) -> plyr_[4]
REF_37(address) -> REF_36.addr
REF_37(address) (->plyr_) := 124144327539311537188622607551538836965667667351(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
plyr_[4].name = dog

IRs:
REF_38(PlayerBook.Player) -> plyr_[4]
REF_39(bytes32) -> REF_38.name
REF_39(bytes32) (->plyr_) := dog(string)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
plyr_[4].names = 1

IRs:
REF_40(PlayerBook.Player) -> plyr_[4]
REF_41(uint256) -> REF_40.names
REF_41(uint256) (->plyr_) := 1(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
pIDxAddr_[0x15Bed2Fd45d1B4C43bFdA83205167E037e147d97] = 4

IRs:
REF_42(uint256) -> pIDxAddr_[124144327539311537188622607551538836965667667351]
REF_42(uint256) (->pIDxAddr_) := 4(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
pIDxName_[dog] = 4

IRs:
REF_43(uint256) -> pIDxName_[dog]
REF_43(uint256) (->pIDxName_) := 4(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
plyrNames_[4][dog] = true

IRs:
REF_44(mapping(bytes32 => bool)) -> plyrNames_[4]
REF_45(bool) -> REF_44[dog]
REF_45(bool) (->plyrNames_) := True(bool)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyrNameList_[4][1] = dog

IRs:
REF_46(mapping(uint256 => bytes32)) -> plyrNameList_[4]
REF_47(bytes32) -> REF_46[1]
REF_47(bytes32) (->plyrNameList_) := dog(string)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
pID_ = 4

IRs:
pID_(uint256) := 4(uint256)"];
}
// Function: 1514.sol-PlayerBook-determinePID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxAddr_[_addr] == 0

IRs:
REF_126(uint256) -> pIDxAddr_[_addr]
TMP_76(bool) = REF_126 == 0
CONDITION TMP_76"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pID_ ++

IRs:
TMP_77(uint256) := pID_(uint256)
pID_(uint256) = pID_ + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = pID_

IRs:
REF_127(uint256) -> pIDxAddr_[_addr]
REF_127(uint256) (->pIDxAddr_) := pID_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[pID_].addr = _addr

IRs:
REF_128(PlayerBook.Player) -> plyr_[pID_]
REF_129(address) -> REF_128.addr
REF_129(address) (->plyr_) := _addr(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true)

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 1514.sol-PlayerBook-getNameFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(registrationFee_)

IRs:
RETURN registrationFee_"];
}
// Function: 1514.sol-PlayerBook-getPlayerAddr(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].addr)

IRs:
REF_135(PlayerBook.Player) -> plyr_[_pID]
REF_136(address) -> REF_135.addr
RETURN REF_136"];
}
// Function: 1514.sol-PlayerBook-getPlayerID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
determinePID(_addr)

IRs:
TMP_78(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(pIDxAddr_[_addr])

IRs:
REF_130(uint256) -> pIDxAddr_[_addr]
RETURN REF_130"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
3->1;
}
// Function: 1514.sol-PlayerBook-getPlayerLAff(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].laff)

IRs:
REF_133(PlayerBook.Player) -> plyr_[_pID]
REF_134(uint256) -> REF_133.laff
RETURN REF_134"];
}
// Function: 1514.sol-PlayerBook-getPlayerName(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].name)

IRs:
REF_131(PlayerBook.Player) -> plyr_[_pID]
REF_132(bytes32) -> REF_131.name
RETURN REF_132"];
}
// Function: 1514.sol-PlayerBook-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_121(bool) = _codeLength == 0
TMP_122(None) = SOLIDITY_CALL require(bool,string)(TMP_121,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 1514.sol-PlayerBook-isRegisteredGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameIDs_[msg.sender] != 0)

IRs:
REF_183(uint256) -> gameIDs_[msg.sender]
TMP_125(bool) = REF_183 != 0
TMP_126(None) = SOLIDITY_CALL require(bool)(TMP_125)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1514.sol-PlayerBook-onlyManager()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == manager,msg sender is not the manager)

IRs:
TMP_123(bool) = msg.sender == manager
TMP_124(None) = SOLIDITY_CALL require(bool,string)(TMP_123,msg sender is not the manager)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1514.sol-PlayerBook-registerNameCore(uint256,address,uint256,bytes32,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxName_[_name] != 0

IRs:
REF_102(uint256) -> pIDxName_[_name]
TMP_59(bool) = REF_102 != 0
CONDITION TMP_59"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,sorry that names already taken)

IRs:
REF_103(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_104(bool) -> REF_103[_name]
TMP_60(bool) = REF_104 == True
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,sorry that names already taken)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_105(PlayerBook.Player) -> plyr_[_pID]
REF_106(bytes32) -> REF_105.name
REF_106(bytes32) (->plyr_) := _name(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_107(uint256) -> pIDxName_[_name]
REF_107(uint256) (->pIDxName_) := _pID(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_108(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_109(bool) -> REF_108[_name]
TMP_62(bool) = REF_109 == False
CONDITION TMP_62"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_110(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_111(bool) -> REF_110[_name]
REF_111(bool) (->plyrNames_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].names ++

IRs:
REF_112(PlayerBook.Player) -> plyr_[_pID]
REF_113(uint256) -> REF_112.names
TMP_63(uint256) := REF_113(uint256)
REF_113(-> plyr_) = REF_113 + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyrNameList_[_pID][plyr_[_pID].names] = _name

IRs:
REF_114(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_115(PlayerBook.Player) -> plyr_[_pID]
REF_116(uint256) -> REF_115.names
REF_117(bytes32) -> REF_114[REF_116]
REF_117(bytes32) (->plyrNameList_) := _name(bytes32)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
community1.transfer(address(this).balance / 2)

IRs:
TMP_64 = CONVERT this to address
TMP_65(uint256) = SOLIDITY_CALL balance(address)(TMP_64)
TMP_66(uint256) = TMP_65 / 2
Transfer dest:community1 value:TMP_66"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
community2.transfer(address(this).balance)

IRs:
TMP_68 = CONVERT this to address
TMP_69(uint256) = SOLIDITY_CALL balance(address)(TMP_68)
Transfer dest:community2 value:TMP_69"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_all == true

IRs:
TMP_71(bool) = _all == True
CONDITION TMP_71"];
13->16[label="True"];
13->20[label="False"];
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
i <= gID_

IRs:
TMP_72(bool) = i <= gID_
CONDITION TMP_72"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_affID)

IRs:
REF_120(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_120(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_affID']  "];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i ++

IRs:
TMP_74(uint256) := i(uint256)
i(uint256) = i + 1"];
19->17;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,msg.value,now)

IRs:
REF_122(PlayerBook.Player) -> plyr_[_affID]
REF_123(address) -> REF_122.addr
REF_124(PlayerBook.Player) -> plyr_[_affID]
REF_125(bytes32) -> REF_124.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_123,REF_125,msg.value,now)"];
}
// Function: 1514.sol-PlayerBook-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_2(bool) = msg.value >= registrationFee_
TMP_3(None) = SOLIDITY_CALL require(bool,string)(TMP_2,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_4(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_4(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_5(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_5(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_51(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_51(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID

IRs:
TMP_6(bool) = _affCode != 0
REF_52(PlayerBook.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
TMP_7(bool) = _affCode != REF_53
TMP_8(bool) = TMP_6 && TMP_7
TMP_9(bool) = _affCode != _pID
TMP_10(bool) = TMP_8 && TMP_9
CONDITION TMP_10"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_54(PlayerBook.Player) -> plyr_[_pID]
REF_55(uint256) -> REF_54.laff
REF_55(uint256) (->plyr_) := _affCode(uint256)"];
7->11;
8[label="Node Type: IF 8

EXPRESSION:
_affCode == _pID

IRs:
TMP_11(bool) = _affCode == _pID
CONDITION TMP_11"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_affCode = 0

IRs:
_affCode(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
registerNameCore(_pID,_addr,_affCode,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affCode,_name,_isNewPlayer,_all)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
13->1;
}
// Function: 1514.sol-PlayerBook-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_80(bool) = msg.value >= registrationFee_
TMP_81(None) = SOLIDITY_CALL require(bool,string)(TMP_80,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_82(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_82(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_137(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_137(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_affID = _affCode

IRs:
_affID(uint256) := _affCode(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID

IRs:
TMP_83(bool) = _affID != 0
REF_138(PlayerBook.Player) -> plyr_[_pID]
REF_139(uint256) -> REF_138.laff
TMP_84(bool) = _affID != REF_139
TMP_85(bool) = TMP_83 && TMP_84
TMP_86(bool) = _affID != _pID
TMP_87(bool) = TMP_85 && TMP_86
CONDITION TMP_87"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_140(PlayerBook.Player) -> plyr_[_pID]
REF_141(uint256) -> REF_140.laff
REF_141(uint256) (->plyr_) := _affID(uint256)"];
6->10;
7[label="Node Type: IF 7

EXPRESSION:
_affID == _pID

IRs:
TMP_88(bool) = _affID == _pID
CONDITION TMP_88"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 1514.sol-PlayerBook-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_14(bool) = msg.value >= registrationFee_
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_16(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_16(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_17(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_17(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_57(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_57(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_18 = CONVERT 0 to address
TMP_19(bool) = _affCode != TMP_18
TMP_20(bool) = _affCode != _addr
TMP_21(bool) = TMP_19 && TMP_20
CONDITION TMP_21"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_58(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_58(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_59(PlayerBook.Player) -> plyr_[_pID]
REF_60(uint256) -> REF_59.laff
TMP_22(bool) = _affID != REF_60
CONDITION TMP_22"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_61(PlayerBook.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.laff
REF_62(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 1514.sol-PlayerBook-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_91(bool) = msg.value >= registrationFee_
TMP_92(None) = SOLIDITY_CALL require(bool,string)(TMP_91,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_93(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_93(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_142(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_142(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_94 = CONVERT 0 to address
TMP_95(bool) = _affCode != TMP_94
TMP_96(bool) = _affCode != _addr
TMP_97(bool) = TMP_95 && TMP_96
CONDITION TMP_97"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_143(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_143(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_144(PlayerBook.Player) -> plyr_[_pID]
REF_145(uint256) -> REF_144.laff
TMP_98(bool) = _affID != REF_145
CONDITION TMP_98"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_146(PlayerBook.Player) -> plyr_[_pID]
REF_147(uint256) -> REF_146.laff
REF_147(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 1514.sol-PlayerBook-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_25(bool) = msg.value >= registrationFee_
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_27(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_27(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_28(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_28(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_64(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_64(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_29(bool) = _affCode != 
TMP_30(bool) = _affCode != _name
TMP_31(bool) = TMP_29 && TMP_30
CONDITION TMP_31"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_65(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_65(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_66(PlayerBook.Player) -> plyr_[_pID]
REF_67(uint256) -> REF_66.laff
TMP_32(bool) = _affID != REF_67
CONDITION TMP_32"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_68(PlayerBook.Player) -> plyr_[_pID]
REF_69(uint256) -> REF_68.laff
REF_69(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 1514.sol-PlayerBook-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_101(bool) = msg.value >= registrationFee_
TMP_102(None) = SOLIDITY_CALL require(bool,string)(TMP_101,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_103(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_103(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_148(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_148(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_104(bool) = _affCode != 
TMP_105(bool) = _affCode != _name
TMP_106(bool) = TMP_104 && TMP_105
CONDITION TMP_106"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_149(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_149(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_150(PlayerBook.Player) -> plyr_[_pID]
REF_151(uint256) -> REF_150.laff
TMP_107(bool) = _affID != REF_151
CONDITION TMP_107"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_152(PlayerBook.Player) -> plyr_[_pID]
REF_153(uint256) -> REF_152.laff
REF_153(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 1514.sol-PlayerBook-setRegistrationFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
registrationFee_ = _fee

IRs:
registrationFee_(uint256) := _fee(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyManager()

IRs:
MODIFIER_CALL, PlayerBook.onlyManager()()"];
2->1;
}
// Function: 1514.sol-PlayerBook-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
manager = msg.sender

IRs:
manager(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
community1 = 0x28a52B6FB427cf299b67f68835c7A37Bf80db915

IRs:
community1(address) := 232043037629816668276460592366495812095860128021(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
community2 = 0x366b8C3Dd186A29dCaA9C148F39cdf741997A168

IRs:
community2(address) := 310683898116492656746500473727151670297055699304(address)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
registrationFee_ = 10000000000000000

IRs:
registrationFee_(uint256) := 10000000000000000(uint256)"];
}
// Function: 1514.sol-PlayerBook-useMyOldName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_55(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_55(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_97(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_97(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,umm... thats not a name you own)

IRs:
REF_98(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_99(bool) -> REF_98[_name]
TMP_56(bool) = REF_99 == True
TMP_57(None) = SOLIDITY_CALL require(bool,string)(TMP_56,umm... thats not a name you own)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_100(PlayerBook.Player) -> plyr_[_pID]
REF_101(bytes32) -> REF_100.name
REF_101(bytes32) (->plyr_) := _name(bytes32)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
5->1;
}
// Function: 1514.sol-PlayerBookReceiverInterface-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
}
// Function: 1514.sol-PlayerBookReceiverInterface-receivePlayerNameList(uint256,bytes32)
digraph{
}
// Function: 1514.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_180(uint256) = a + b
c(uint256) := TMP_180(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_181(bool) = c >= a
TMP_182(None) = SOLIDITY_CALL require(bool,string)(TMP_181,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1514.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_172(bool) = a == 0
CONDITION TMP_172"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_173(uint256) = a * b
c(uint256) := TMP_173(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_174(uint256) = c / a
TMP_175(bool) = TMP_174 == b
TMP_176(None) = SOLIDITY_CALL require(bool,string)(TMP_175,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1514.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_190(bool) = x == 0
CONDITION TMP_190"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_191(bool) = y == 0
CONDITION TMP_191"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_192(bool) = i < y
CONDITION TMP_192"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_193(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_193(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_194(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1514.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_189(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_189"];
}
// Function: 1514.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_183(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_184(uint256) = TMP_183 / 2
z(uint256) := TMP_184(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_185(bool) = z < y
CONDITION TMP_185"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_186(uint256) = x / z
TMP_187(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_186,z)
TMP_188(uint256) = TMP_187 / 2
z(uint256) := TMP_188(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1514.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_177(bool) = b <= a
TMP_178(None) = SOLIDITY_CALL require(bool,string)(TMP_177,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_179(uint256) = a - b
RETURN TMP_179"];
}
}
