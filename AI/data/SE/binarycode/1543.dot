digraph G {
// Function: 1543.sol-guess_tw-NewQuestion(string,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == questionSender)

IRs:
TMP_12(bool) = msg.sender == questionSender
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
question = _question

IRs:
question(string) := _question(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
responseHash = _responseHash

IRs:
responseHash(bytes32) := _responseHash(bytes32)"];
}
// Function: 1543.sol-guess_tw-StartGuess_tw(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
responseHash == 0x0

IRs:
TMP_7(bool) = responseHash == 0
CONDITION TMP_7"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
responseHash = keccak256()(_response)

IRs:
TMP_8(bytes32) = SOLIDITY_CALL keccak256()(_response)
responseHash(bytes32) := TMP_8(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
question = _question

IRs:
question(string) := _question(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
questionSender = msg.sender

IRs:
questionSender(address) := msg.sender(address)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1543.sol-guess_tw-StopGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == questionSender)

IRs:
TMP_9(bool) = msg.sender == questionSender
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
msg.sender.transfer(this.balance)

IRs:
REF_3(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:msg.sender value:REF_3"];
}
// Function: 1543.sol-guess_tw-Try(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == tx.origin)

IRs:
TMP_0(bool) = msg.sender == tx.origin
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
responseHash == keccak256()(_response) && msg.value > 1000000000000000000

IRs:
TMP_2(bytes32) = SOLIDITY_CALL keccak256()(_response)
TMP_3(bool) = responseHash == TMP_2
TMP_4(bool) = msg.value > 1000000000000000000
TMP_5(bool) = TMP_3 && TMP_4
CONDITION TMP_5"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.transfer(this.balance)

IRs:
REF_1(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:msg.sender value:REF_1"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1543.sol-guess_tw-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
}
