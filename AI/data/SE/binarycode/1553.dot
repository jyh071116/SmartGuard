digraph G {
// Function: 1553.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 1553.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 1553.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 1553.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 1553.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 1553.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 1553.sol-Gateway-addToWhitelist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == whitelistWallet || msg.sender == owner)

IRs:
TMP_18(bool) = msg.sender == whitelistWallet
TMP_19(bool) = msg.sender == owner
TMP_20(bool) = TMP_18 || TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whitelist[_participant] = true

IRs:
REF_0(bool) -> whitelist[_participant]
REF_0(bool) (->whitelist) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
WhitelistUpdated(_participant,true)

IRs:
Emit WhitelistUpdated(_participant,True)"];
}
// Function: 1553.sol-Gateway-addToWhitelistMultiple(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == whitelistWallet || msg.sender == owner)

IRs:
TMP_23(bool) = msg.sender == whitelistWallet
TMP_24(bool) = msg.sender == owner
TMP_25(bool) = TMP_23 || TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _participants.length

IRs:
REF_1 -> LENGTH _participants
TMP_27(bool) = i < REF_1
CONDITION TMP_27"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whitelist[_participants[i]] = true

IRs:
REF_2(address) -> _participants[i]
REF_3(bool) -> whitelist[REF_2]
REF_3(bool) (->whitelist) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
WhitelistUpdated(_participants[i],true)

IRs:
REF_4(address) -> _participants[i]
Emit WhitelistUpdated(REF_4,True)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_29(uint256) := i(uint256)
i(uint256) = i + 1"];
8->5;
}
// Function: 1553.sol-Gateway-closeGateway()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gatewayOpened)

IRs:
TMP_53(None) = SOLIDITY_CALL require(bool)(gatewayOpened)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gatewayOpened = false

IRs:
gatewayOpened(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
GatewayStatusUpdated(false)

IRs:
Emit GatewayStatusUpdated(False)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 1553.sol-Gateway-confirmOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == newOwner)

IRs:
TMP_13(bool) = msg.sender == newOwner
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferConfirmed(owner,newOwner)

IRs:
Emit OwnershipTransferConfirmed(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
}
// Function: 1553.sol-Gateway-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
targetWallet = owner

IRs:
targetWallet(address) := owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whitelistWallet = owner

IRs:
whitelistWallet(address) := owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newOwner = address(0x0)

IRs:
TMP_16 = CONVERT 0 to address
newOwner(address) := TMP_16(address)"];
}
// Function: 1553.sol-Gateway-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
passGateway()

IRs:
INTERNAL_CALL, Gateway.passGateway()()"];
}
// Function: 1553.sol-Gateway-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_66(bool) = msg.sender == owner
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1553.sol-Gateway-openGateway()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! gatewayOpened)

IRs:
TMP_49 = UnaryType.BANG gatewayOpened 
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gatewayOpened = true

IRs:
gatewayOpened(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
GatewayStatusUpdated(true)

IRs:
Emit GatewayStatusUpdated(True)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 1553.sol-Gateway-passGateway()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gatewayOpened)

IRs:
TMP_56(None) = SOLIDITY_CALL require(bool)(gatewayOpened)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(whitelist[msg.sender])

IRs:
REF_10(bool) -> whitelist[msg.sender]
TMP_57(None) = SOLIDITY_CALL require(bool)(REF_10)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
address(targetWallet).transfer(address(this).balance)

IRs:
TMP_58 = CONVERT targetWallet to address
TMP_59 = CONVERT this to address
TMP_60(uint256) = SOLIDITY_CALL balance(address)(TMP_59)
Transfer dest:TMP_58 value:TMP_60"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
PassedGateway(msg.sender,msg.value)

IRs:
Emit PassedGateway(msg.sender,msg.value)"];
}
// Function: 1553.sol-Gateway-removeFromWhitelist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == whitelistWallet || msg.sender == owner)

IRs:
TMP_30(bool) = msg.sender == whitelistWallet
TMP_31(bool) = msg.sender == owner
TMP_32(bool) = TMP_30 || TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whitelist[_participant] = false

IRs:
REF_5(bool) -> whitelist[_participant]
REF_5(bool) (->whitelist) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
WhitelistUpdated(_participant,false)

IRs:
Emit WhitelistUpdated(_participant,False)"];
}
// Function: 1553.sol-Gateway-removeFromWhitelistMultiple(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == whitelistWallet || msg.sender == owner)

IRs:
TMP_35(bool) = msg.sender == whitelistWallet
TMP_36(bool) = msg.sender == owner
TMP_37(bool) = TMP_35 || TMP_36
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _participants.length

IRs:
REF_6 -> LENGTH _participants
TMP_39(bool) = i < REF_6
CONDITION TMP_39"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whitelist[_participants[i]] = false

IRs:
REF_7(address) -> _participants[i]
REF_8(bool) -> whitelist[REF_7]
REF_8(bool) (->whitelist) := False(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
WhitelistUpdated(_participants[i],false)

IRs:
REF_9(address) -> _participants[i]
Emit WhitelistUpdated(REF_9,False)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_41(uint256) := i(uint256)
i(uint256) = i + 1"];
8->5;
}
// Function: 1553.sol-Gateway-setTargetWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_wallet != address(0x0))

IRs:
TMP_42 = CONVERT 0 to address
TMP_43(bool) = _wallet != TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
targetWallet = _wallet

IRs:
targetWallet(address) := _wallet(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
TargetWalletUpdated(_wallet)

IRs:
Emit TargetWalletUpdated(_wallet)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 1553.sol-Gateway-setWhitelistWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
whitelistWallet = _wallet

IRs:
whitelistWallet(address) := _wallet(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WhitelistWalletUpdated(_wallet)

IRs:
Emit WhitelistWalletUpdated(_wallet)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 1553.sol-Gateway-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
gatewayOpened = false

IRs:
gatewayOpened(bool) := False(bool)"];
}
// Function: 1553.sol-Gateway-transferAnyERC20Token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20Interface(tokenAddress).transfer(owner,tokens)

IRs:
TMP_63 = CONVERT tokenAddress to ERC20Interface
TMP_64(bool) = HIGH_LEVEL_CALL, dest:TMP_63(ERC20Interface), function:transfer, arguments:['owner', 'tokens']  
RETURN TMP_64"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1553.sol-Gateway-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != owner)

IRs:
TMP_9(bool) = _newOwner != owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferProposed(owner,_newOwner)

IRs:
Emit OwnershipTransferProposed(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 1553.sol-Owned-confirmOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == newOwner)

IRs:
TMP_4(bool) = msg.sender == newOwner
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferConfirmed(owner,newOwner)

IRs:
Emit OwnershipTransferConfirmed(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
}
// Function: 1553.sol-Owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1553.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_7(bool) = msg.sender == owner
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1553.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != owner)

IRs:
TMP_0(bool) = _newOwner != owner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferProposed(owner,_newOwner)

IRs:
Emit OwnershipTransferProposed(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
}
