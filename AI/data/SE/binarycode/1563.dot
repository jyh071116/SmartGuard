digraph G {
// Function: 1563.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_3(uint256) = a + b
c(uint256) := TMP_3(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_4(bool) = c >= a
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1563.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_11(uint256) = a / b
RETURN TMP_11"];
}
// Function: 1563.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_6(bool) = a == 0
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_7(uint256) = a * b
c(uint256) := TMP_7(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_8(uint256) = c / a
TMP_9(bool) = TMP_8 == b
TMP_10(None) = SOLIDITY_CALL assert(bool)(TMP_9)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1563.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_0(bool) = b <= a
TMP_1(None) = SOLIDITY_CALL assert(bool)(TMP_0)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_2(uint256) = a - b
RETURN TMP_2"];
}
// Function: 1563.sol-Token-balanceOf(address)
digraph{
}
// Function: 1563.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 1563.sol-Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 1563.sol-TokenLiquidityMarket-TokenLiquidityMarket(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admin = tx.origin

IRs:
admin(address) := tx.origin(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
platform = msg.sender

IRs:
platform(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
traded_token = _traded_token

IRs:
traded_token(address) := _traded_token(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
eth_seed_amount = _eth_seed_amount

IRs:
eth_seed_amount(uint256) := _eth_seed_amount(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
traded_token_seed_amount = _traded_token_seed_amount

IRs:
traded_token_seed_amount(uint256) := _traded_token_seed_amount(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
commission_ratio = _commission_ratio

IRs:
commission_ratio(uint256) := _commission_ratio(uint256)"];
}
// Function: 1563.sol-TokenLiquidityMarket-activate_admin_commission()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! admin_commission_activated)

IRs:
TMP_80 = UnaryType.BANG admin_commission_activated 
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin_commission_activated = true

IRs:
admin_commission_activated(bool) := True(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
3->1;
}
// Function: 1563.sol-TokenLiquidityMarket-buy_tokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(market_is_open())

IRs:
TMP_114(bool) = INTERNAL_CALL, TokenLiquidityMarket.market_is_open()()
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
complete_buy_exchange()

IRs:
INTERNAL_CALL, TokenLiquidityMarket.complete_buy_exchange()()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
trading_activated()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.trading_activated()()"];
3->1;
}
// Function: 1563.sol-TokenLiquidityMarket-change_admin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admin = _newAdmin

IRs:
admin(address) := _newAdmin(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
2->1;
}
// Function: 1563.sol-TokenLiquidityMarket-change_admin_commission(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_new_commission_ratio != commission_ratio)

IRs:
TMP_85(bool) = _new_commission_ratio != commission_ratio
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
commission_ratio = _new_commission_ratio

IRs:
commission_ratio(uint256) := _new_commission_ratio(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
3->1;
}
// Function: 1563.sol-TokenLiquidityMarket-complete_buy_exchange()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
amount_get_ = get_amount_buy(msg.value)

IRs:
TMP_99(uint256) = INTERNAL_CALL, TokenLiquidityMarket.get_amount_buy(uint256)(msg.value)
amount_get_(uint256) := TMP_99(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount_get_minus_commission_ = get_amount_minus_commission(amount_get_)

IRs:
TMP_100(uint256) = INTERNAL_CALL, TokenLiquidityMarket.get_amount_minus_commission(uint256)(amount_get_)
amount_get_minus_commission_(uint256) := TMP_100(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
platform_commission_ = (amount_get_ - amount_get_minus_commission_) / 5

IRs:
TMP_101(uint256) = amount_get_ - amount_get_minus_commission_
TMP_102(uint256) = TMP_101 / 5
platform_commission_(uint256) := TMP_102(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
admin_commission_ = ((amount_get_ - amount_get_minus_commission_) * 4) / 5

IRs:
TMP_103(uint256) = amount_get_ - amount_get_minus_commission_
TMP_104(uint256) = TMP_103 * 4
TMP_105(uint256) = TMP_104 / 5
admin_commission_(uint256) := TMP_105(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
transfer_eth_to_contract()

IRs:
INTERNAL_CALL, TokenLiquidityMarket.transfer_eth_to_contract()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
transfer_tokens_from_contract(msg.sender,amount_get_minus_commission_)

IRs:
INTERNAL_CALL, TokenLiquidityMarket.transfer_tokens_from_contract(address,uint256)(msg.sender,amount_get_minus_commission_)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
transfer_tokens_from_contract(platform,platform_commission_)

IRs:
INTERNAL_CALL, TokenLiquidityMarket.transfer_tokens_from_contract(address,uint256)(platform,platform_commission_)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
admin_commission_activated

IRs:
CONDITION admin_commission_activated"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
transfer_tokens_from_contract(admin,admin_commission_)

IRs:
INTERNAL_CALL, TokenLiquidityMarket.transfer_tokens_from_contract(address,uint256)(admin,admin_commission_)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 1563.sol-TokenLiquidityMarket-complete_sell_exchange(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
amount_get_ = get_amount_sell(_amount_give)

IRs:
TMP_88(uint256) = INTERNAL_CALL, TokenLiquidityMarket.get_amount_sell(uint256)(_amount_give)
amount_get_(uint256) := TMP_88(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount_get_minus_commission_ = get_amount_minus_commission(amount_get_)

IRs:
TMP_89(uint256) = INTERNAL_CALL, TokenLiquidityMarket.get_amount_minus_commission(uint256)(amount_get_)
amount_get_minus_commission_(uint256) := TMP_89(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
platform_commission_ = (amount_get_ - amount_get_minus_commission_) / 5

IRs:
TMP_90(uint256) = amount_get_ - amount_get_minus_commission_
TMP_91(uint256) = TMP_90 / 5
platform_commission_(uint256) := TMP_91(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
admin_commission_ = ((amount_get_ - amount_get_minus_commission_) * 4) / 5

IRs:
TMP_92(uint256) = amount_get_ - amount_get_minus_commission_
TMP_93(uint256) = TMP_92 * 4
TMP_94(uint256) = TMP_93 / 5
admin_commission_(uint256) := TMP_94(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
transfer_tokens_through_proxy_to_contract(msg.sender,this,_amount_give)

IRs:
INTERNAL_CALL, TokenLiquidityMarket.transfer_tokens_through_proxy_to_contract(address,address,uint256)(msg.sender,this,_amount_give)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
transfer_eth_from_contract(msg.sender,amount_get_minus_commission_)

IRs:
INTERNAL_CALL, TokenLiquidityMarket.transfer_eth_from_contract(address,uint256)(msg.sender,amount_get_minus_commission_)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
transfer_eth_from_contract(platform,platform_commission_)

IRs:
INTERNAL_CALL, TokenLiquidityMarket.transfer_eth_from_contract(address,uint256)(platform,platform_commission_)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
admin_commission_activated

IRs:
CONDITION admin_commission_activated"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
transfer_eth_from_contract(admin,admin_commission_)

IRs:
INTERNAL_CALL, TokenLiquidityMarket.transfer_eth_from_contract(address,uint256)(admin,admin_commission_)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 1563.sol-TokenLiquidityMarket-deactivate_admin_comission()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(admin_commission_activated)

IRs:
TMP_83(None) = SOLIDITY_CALL require(bool)(admin_commission_activated)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin_commission_activated = false

IRs:
admin_commission_activated(bool) := False(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
3->1;
}
// Function: 1563.sol-TokenLiquidityMarket-deactivate_trading()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! trading_deactivated)

IRs:
TMP_66 = UnaryType.BANG trading_deactivated 
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
trading_deactivated = true

IRs:
trading_deactivated(bool) := True(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
3->1;
}
// Function: 1563.sol-TokenLiquidityMarket-deposit_eth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transfer_eth_to_contract()

IRs:
INTERNAL_CALL, TokenLiquidityMarket.transfer_eth_to_contract()()"];
}
// Function: 1563.sol-TokenLiquidityMarket-deposit_token(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transfer_tokens_through_proxy_to_contract(msg.sender,this,_amount)

IRs:
INTERNAL_CALL, TokenLiquidityMarket.transfer_tokens_through_proxy_to_contract(address,address,uint256)(msg.sender,this,_amount)"];
}
// Function: 1563.sol-TokenLiquidityMarket-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buy_tokens()

IRs:
INTERNAL_CALL, TokenLiquidityMarket.buy_tokens()()"];
}
// Function: 1563.sol-TokenLiquidityMarket-get_amount_buy(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
eth_balance_plus_amount_ = eth_balance.add(_amount)

IRs:
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['eth_balance', '_amount'] 
eth_balance_plus_amount_(uint256) := TMP_74(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
((traded_token_balance).mul(_amount)).div(eth_balance_plus_amount_)

IRs:
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['traded_token_balance', '_amount'] 
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_75', 'eth_balance_plus_amount_'] 
RETURN TMP_76"];
}
// Function: 1563.sol-TokenLiquidityMarket-get_amount_minus_commission(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(_amount * (1000000000000000000 - commission_ratio)) / (1000000000000000000)

IRs:
TMP_77(uint256) = 1000000000000000000 - commission_ratio
TMP_78(uint256) = _amount * TMP_77
TMP_79(uint256) = TMP_78 / 1000000000000000000
RETURN TMP_79"];
}
// Function: 1563.sol-TokenLiquidityMarket-get_amount_sell(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
traded_token_balance_plus_amount_ = traded_token_balance.add(_amount)

IRs:
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['traded_token_balance', '_amount'] 
traded_token_balance_plus_amount_(uint256) := TMP_71(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(eth_balance.mul(_amount)).div(traded_token_balance_plus_amount_)

IRs:
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['eth_balance', '_amount'] 
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_72', 'traded_token_balance_plus_amount_'] 
RETURN TMP_73"];
}
// Function: 1563.sol-TokenLiquidityMarket-market_is_open()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(eth_is_seeded && traded_token_is_seeded)

IRs:
TMP_65(bool) = eth_is_seeded && traded_token_is_seeded
RETURN TMP_65"];
}
// Function: 1563.sol-TokenLiquidityMarket-only_admin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_119(bool) = msg.sender == admin
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1563.sol-TokenLiquidityMarket-reactivate_trading()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(trading_deactivated)

IRs:
TMP_69(None) = SOLIDITY_CALL require(bool)(trading_deactivated)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
trading_deactivated = false

IRs:
trading_deactivated(bool) := False(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
3->1;
}
// Function: 1563.sol-TokenLiquidityMarket-seed_additional_eth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(market_is_open())

IRs:
TMP_61(bool) = INTERNAL_CALL, TokenLiquidityMarket.market_is_open()()
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
deposit_eth()

IRs:
INTERNAL_CALL, TokenLiquidityMarket.deposit_eth()()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
3->1;
}
// Function: 1563.sol-TokenLiquidityMarket-seed_additional_token(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(market_is_open())

IRs:
TMP_57(bool) = INTERNAL_CALL, TokenLiquidityMarket.market_is_open()()
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
deposit_token(_amount)

IRs:
INTERNAL_CALL, TokenLiquidityMarket.deposit_token(uint256)(_amount)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
3->1;
}
// Function: 1563.sol-TokenLiquidityMarket-seed_eth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! eth_is_seeded)

IRs:
TMP_50 = UnaryType.BANG eth_is_seeded 
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value == eth_seed_amount)

IRs:
TMP_52(bool) = msg.value == eth_seed_amount
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
set_eth_as_seeded()

IRs:
INTERNAL_CALL, TokenLiquidityMarket.set_eth_as_seeded()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
deposit_eth()

IRs:
INTERNAL_CALL, TokenLiquidityMarket.deposit_eth()()"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
5->1;
}
// Function: 1563.sol-TokenLiquidityMarket-seed_traded_token()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! traded_token_is_seeded)

IRs:
TMP_45 = UnaryType.BANG traded_token_is_seeded 
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
set_traded_token_as_seeded()

IRs:
INTERNAL_CALL, TokenLiquidityMarket.set_traded_token_as_seeded()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
deposit_token(traded_token_seed_amount)

IRs:
INTERNAL_CALL, TokenLiquidityMarket.deposit_token(uint256)(traded_token_seed_amount)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
4->1;
}
// Function: 1563.sol-TokenLiquidityMarket-sell_tokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(market_is_open())

IRs:
TMP_110(bool) = INTERNAL_CALL, TokenLiquidityMarket.market_is_open()()
TMP_111(None) = SOLIDITY_CALL require(bool)(TMP_110)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
complete_sell_exchange(_amount_give)

IRs:
INTERNAL_CALL, TokenLiquidityMarket.complete_sell_exchange(uint256)(_amount_give)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
trading_activated()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.trading_activated()()"];
3->1;
}
// Function: 1563.sol-TokenLiquidityMarket-set_eth_as_seeded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
eth_is_seeded = true

IRs:
eth_is_seeded(bool) := True(bool)"];
}
// Function: 1563.sol-TokenLiquidityMarket-set_traded_token_as_seeded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
traded_token_is_seeded = true

IRs:
traded_token_is_seeded(bool) := True(bool)"];
}
// Function: 1563.sol-TokenLiquidityMarket-trading_activated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(trading_deactivated == false)

IRs:
TMP_121(bool) = trading_deactivated == False
TMP_122(None) = SOLIDITY_CALL require(bool)(TMP_121)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1563.sol-TokenLiquidityMarket-transfer_eth_from_contract(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
eth_balance = eth_balance.sub(_amount)

IRs:
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['eth_balance', '_amount'] 
eth_balance(uint256) := TMP_37(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_to.transfer(_amount)

IRs:
Transfer dest:_to value:_amount"];
}
// Function: 1563.sol-TokenLiquidityMarket-transfer_eth_to_contract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
eth_balance = eth_balance.add(msg.value)

IRs:
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['eth_balance', 'msg.value'] 
eth_balance(uint256) := TMP_36(uint256)"];
}
// Function: 1563.sol-TokenLiquidityMarket-transfer_tokens_from_contract(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
traded_token_balance = traded_token_balance.sub(_amount)

IRs:
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['traded_token_balance', '_amount'] 
traded_token_balance(uint256) := TMP_32(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(Token(traded_token).transfer(_to,_amount))

IRs:
TMP_33 = CONVERT traded_token to Token
TMP_34(bool) = HIGH_LEVEL_CALL, dest:TMP_33(Token), function:transfer, arguments:['_to', '_amount']  
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
}
// Function: 1563.sol-TokenLiquidityMarket-transfer_tokens_through_proxy_to_contract(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
traded_token_balance = traded_token_balance.add(_amount)

IRs:
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['traded_token_balance', '_amount'] 
traded_token_balance(uint256) := TMP_28(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(Token(traded_token).transferFrom(_from,_to,_amount))

IRs:
TMP_29 = CONVERT traded_token to Token
TMP_30(bool) = HIGH_LEVEL_CALL, dest:TMP_29(Token), function:transferFrom, arguments:['_from', '_to', '_amount']  
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
}
// Function: 1563.sol-TokenLiquidityMarket-withdraw_arbitrary_token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token != traded_token)

IRs:
TMP_13(bool) = _token != traded_token
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(Token(_token).transfer(admin,_amount))

IRs:
TMP_15 = CONVERT _token to Token
TMP_16(bool) = HIGH_LEVEL_CALL, dest:TMP_15(Token), function:transfer, arguments:['admin', '_amount']  
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
3->1;
}
// Function: 1563.sol-TokenLiquidityMarket-withdraw_eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transfer_eth_from_contract(admin,_amount)

IRs:
INTERNAL_CALL, TokenLiquidityMarket.transfer_eth_from_contract(address,uint256)(admin,_amount)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
2->1;
}
// Function: 1563.sol-TokenLiquidityMarket-withdraw_excess_tokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
queried_traded_token_balance_ = Token(traded_token).balanceOf(this)

IRs:
TMP_19 = CONVERT traded_token to Token
TMP_20(uint256) = HIGH_LEVEL_CALL, dest:TMP_19(Token), function:balanceOf, arguments:['this']  
queried_traded_token_balance_(uint256) := TMP_20(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(queried_traded_token_balance_ >= traded_token_balance)

IRs:
TMP_21(bool) = queried_traded_token_balance_ >= traded_token_balance
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
excess_ = queried_traded_token_balance_.sub(traded_token_balance)

IRs:
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['queried_traded_token_balance_', 'traded_token_balance'] 
excess_(uint256) := TMP_23(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(Token(traded_token).transfer(admin,excess_))

IRs:
TMP_24 = CONVERT traded_token to Token
TMP_25(bool) = HIGH_LEVEL_CALL, dest:TMP_24(Token), function:transfer, arguments:['admin', 'excess_']  
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
5->1;
}
// Function: 1563.sol-TokenLiquidityMarket-withdraw_token(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transfer_tokens_from_contract(admin,_amount)

IRs:
INTERNAL_CALL, TokenLiquidityMarket.transfer_tokens_from_contract(address,uint256)(admin,_amount)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityMarket.only_admin()()"];
2->1;
}
// Function: 1563.sol-TokenLiquidityPlatform-TokenLiquidityPlatform()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
}
// Function: 1563.sol-TokenLiquidityPlatform-create_a_new_market(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
new TokenLiquidityMarket(_traded_token,_base_token_seed_amount,_traded_token_seed_amount,_commission_ratio)

IRs:
TMP_124(TokenLiquidityMarket) = new TokenLiquidityMarket(_traded_token,_base_token_seed_amount,_traded_token_seed_amount,_commission_ratio) "];
}
// Function: 1563.sol-TokenLiquidityPlatform-only_admin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_131(bool) = msg.sender == admin
TMP_132(None) = SOLIDITY_CALL require(bool)(TMP_131)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1563.sol-TokenLiquidityPlatform-withdraw_eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admin.transfer(_amount)

IRs:
Transfer dest:admin value:_amount"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityPlatform.only_admin()()"];
2->1;
}
// Function: 1563.sol-TokenLiquidityPlatform-withdraw_token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Token(_token).transfer(admin,_amount))

IRs:
TMP_127 = CONVERT _token to Token
TMP_128(bool) = HIGH_LEVEL_CALL, dest:TMP_127(Token), function:transfer, arguments:['admin', '_amount']  
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
only_admin()

IRs:
MODIFIER_CALL, TokenLiquidityPlatform.only_admin()()"];
2->1;
}
}
