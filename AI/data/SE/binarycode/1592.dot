digraph G {
// Function: 1592.sol-IERC20Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_spender
"];
}
// Function: 1592.sol-IERC20Token-approve(address,uint256)
digraph{
}
// Function: 1592.sol-IERC20Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner
"];
}
// Function: 1592.sol-IERC20Token-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1592.sol-IERC20Token-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1592.sol-IERC20Token-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1592.sol-IERC20Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1592.sol-IERC20Token-transfer(address,uint256)
digraph{
}
// Function: 1592.sol-IERC20Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 1592.sol-Ownable-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_3(bool) = msg.sender == newOwner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerUpdate(owner,newOwner)

IRs:
Emit OwnerUpdate(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_6 = CONVERT 0 to address
newOwner(address) := TMP_6(address)"];
}
// Function: 1592.sol-Ownable-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
}
// Function: 1592.sol-Ownable-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_7(bool) = msg.sender == owner
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1592.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != owner)

IRs:
TMP_0(bool) = _newOwner != owner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Ownable.ownerOnly()()"];
3->1;
}
// Function: 1592.sol-SmartWallet-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.initWallet(_operator,_feesAccount)

IRs:
LIBRARY_CALL, dest:SmartWalletLib, function:SmartWalletLib.initWallet(SmartWalletLib.Wallet,address,address), arguments:['wallet', '_operator', '_feesAccount'] "];
}
// Function: 1592.sol-SmartWallet-performUserWithdraw(IERC20Token)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.performUserWithdraw(_token)

IRs:
LIBRARY_CALL, dest:SmartWalletLib, function:SmartWalletLib.performUserWithdraw(SmartWalletLib.Wallet,IERC20Token), arguments:['wallet', '_token'] "];
}
// Function: 1592.sol-SmartWallet-requestWithdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.requestWithdraw()

IRs:
LIBRARY_CALL, dest:SmartWalletLib, function:SmartWalletLib.requestWithdraw(SmartWalletLib.Wallet), arguments:['wallet'] "];
}
// Function: 1592.sol-SmartWallet-setUserWithdrawalAccount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.setUserWithdrawalAccount(_userWithdrawalAccount)

IRs:
LIBRARY_CALL, dest:SmartWalletLib, function:SmartWalletLib.setUserWithdrawalAccount(SmartWalletLib.Wallet,address), arguments:['wallet', '_userWithdrawalAccount'] "];
}
// Function: 1592.sol-SmartWallet-transferToUserWithdrawalAccount(IERC20Token,uint256,IERC20Token,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transferToUserWithdrawalAccount(_token,_amount,_feesToken,_fee)

IRs:
LIBRARY_CALL, dest:SmartWalletLib, function:SmartWalletLib.transferToUserWithdrawalAccount(SmartWalletLib.Wallet,IERC20Token,uint256,IERC20Token,uint256), arguments:['wallet', '_token', '_amount', '_feesToken', '_fee'] "];
}
// Function: 1592.sol-SmartWalletLib-addressNotSet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address == 0)

IRs:
TMP_108(bool) = _address == 0
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1592.sol-SmartWalletLib-initWallet(SmartWalletLib.Wallet,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_self.operatorAccount = _operator

IRs:
REF_2(address) -> _self.operatorAccount
REF_2(address) (->_self) := _operator(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_self.feesAccount = _feesAccount

IRs:
REF_3(address) -> _self.feesAccount
REF_3(address) (->_self) := _feesAccount(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
validAddress(_operator)

IRs:
MODIFIER_CALL, SmartWalletLib.validAddress(address)(_operator)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validAddress(_feesAccount)

IRs:
MODIFIER_CALL, SmartWalletLib.validAddress(address)(_feesAccount)"];
4->1;
}
// Function: 1592.sol-SmartWalletLib-operatorOnly(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _operatorAccount)

IRs:
TMP_110(bool) = msg.sender == _operatorAccount
TMP_111(None) = SOLIDITY_CALL require(bool)(TMP_110)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1592.sol-SmartWalletLib-performUserWithdraw(SmartWalletLib.Wallet,IERC20Token)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_self.withdrawAllowedAt != 0 && _self.withdrawAllowedAt <= now)

IRs:
REF_18(uint256) -> _self.withdrawAllowedAt
TMP_98(bool) = REF_18 != 0
REF_19(uint256) -> _self.withdrawAllowedAt
TMP_99(bool) = REF_19 <= now
TMP_100(bool) = TMP_98 && TMP_99
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
userBalance = _token.balanceOf(this)

IRs:
TMP_102(uint256) = HIGH_LEVEL_CALL, dest:_token(IERC20Token), function:balanceOf, arguments:['this']  
userBalance(uint256) := TMP_102(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_token.transfer(_self.userWithdrawalAccount,userBalance)

IRs:
REF_22(address) -> _self.userWithdrawalAccount
TMP_103(bool) = HIGH_LEVEL_CALL, dest:_token(IERC20Token), function:transfer, arguments:['REF_22', 'userBalance']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
PerformUserWithdraw(_token,_self.userWithdrawalAccount,userBalance)

IRs:
REF_23(address) -> _self.userWithdrawalAccount
Emit PerformUserWithdraw(_token,REF_23,userBalance)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
userWithdrawalAccountOnly(_self)

IRs:
MODIFIER_CALL, SmartWalletLib.userWithdrawalAccountOnly(SmartWalletLib.Wallet)(_self)"];
5->1;
}
// Function: 1592.sol-SmartWalletLib-requestWithdraw(SmartWalletLib.Wallet)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withdrawalConfigurations = WithdrawalConfigurations(withdrawalConfigurationsContract)

IRs:
TMP_92 = CONVERT withdrawalConfigurationsContract to WithdrawalConfigurations
withdrawalConfigurations(WithdrawalConfigurations) := TMP_92(WithdrawalConfigurations)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_self.withdrawAllowedAt = safeAdd(now,withdrawalConfigurations.getWithdrawalCoolingPeriod())

IRs:
REF_15(uint256) -> _self.withdrawAllowedAt
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:withdrawalConfigurations(WithdrawalConfigurations), function:getWithdrawalCoolingPeriod, arguments:[]  
TMP_94(uint256) = INTERNAL_CALL, SmartWalletLib.safeAdd(uint256,uint256)(now,TMP_93)
REF_15(uint256) (->_self) := TMP_94(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
withdrawalConfigurations.emitWithrawalRequestEvent(msg.sender,address(this))

IRs:
TMP_95 = CONVERT this to address
HIGH_LEVEL_CALL, dest:withdrawalConfigurations(WithdrawalConfigurations), function:emitWithrawalRequestEvent, arguments:['msg.sender', 'TMP_95']  "];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
userWithdrawalAccountOnly(_self)

IRs:
MODIFIER_CALL, SmartWalletLib.userWithdrawalAccountOnly(SmartWalletLib.Wallet)(_self)"];
4->1;
}
// Function: 1592.sol-SmartWalletLib-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_89(uint256) = _x + _y
z(uint256) := TMP_89(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_90(bool) = z >= _x
TMP_91(None) = SOLIDITY_CALL assert(bool)(TMP_90)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1592.sol-SmartWalletLib-setUserWithdrawalAccount(SmartWalletLib.Wallet,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_self.userWithdrawalAccount = _userWithdrawalAccount

IRs:
REF_4(address) -> _self.userWithdrawalAccount
REF_4(address) (->_self) := _userWithdrawalAccount(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
SetUserWithdrawalAccount(_userWithdrawalAccount)

IRs:
Emit SetUserWithdrawalAccount(_userWithdrawalAccount)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
operatorOnly(_self.operatorAccount)

IRs:
REF_5(address) -> _self.operatorAccount
MODIFIER_CALL, SmartWalletLib.operatorOnly(address)(REF_5)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validAddress(_userWithdrawalAccount)

IRs:
MODIFIER_CALL, SmartWalletLib.validAddress(address)(_userWithdrawalAccount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addressNotSet(_self.userWithdrawalAccount)

IRs:
REF_6(address) -> _self.userWithdrawalAccount
MODIFIER_CALL, SmartWalletLib.addressNotSet(address)(REF_6)"];
5->1;
}
// Function: 1592.sol-SmartWalletLib-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
VERSION = 1.1

IRs:
VERSION(string) := 1.1(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
withdrawalConfigurationsContract = 0xDdD336eAad17F1D40cc81997Fb956608f00639FF

IRs:
withdrawalConfigurationsContract(address) := 1266397201508553441850885607938068346195109362175(address)"];
}
// Function: 1592.sol-SmartWalletLib-transferToUserWithdrawalAccount(SmartWalletLib.Wallet,IERC20Token,uint256,IERC20Token,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
_fee > 0

IRs:
TMP_83(bool) = _fee > 0
CONDITION TMP_83"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_feesToken.transfer(_self.feesAccount,_fee)

IRs:
REF_8(address) -> _self.feesAccount
TMP_84(bool) = HIGH_LEVEL_CALL, dest:_feesToken(IERC20Token), function:transfer, arguments:['REF_8', '_fee']  "];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_token.transfer(_self.userWithdrawalAccount,_amount)

IRs:
REF_10(address) -> _self.userWithdrawalAccount
TMP_85(bool) = HIGH_LEVEL_CALL, dest:_token(IERC20Token), function:transfer, arguments:['REF_10', '_amount']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
TransferToUserWithdrawalAccount(_token,_self.userWithdrawalAccount,_amount,_feesToken,_self.feesAccount,_fee)

IRs:
REF_11(address) -> _self.userWithdrawalAccount
REF_12(address) -> _self.feesAccount
Emit TransferToUserWithdrawalAccount(_token,REF_11,_amount,_feesToken,REF_12,_fee)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
operatorOnly(_self.operatorAccount)

IRs:
REF_13(address) -> _self.operatorAccount
MODIFIER_CALL, SmartWalletLib.operatorOnly(address)(REF_13)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
validAddress(_self.userWithdrawalAccount)

IRs:
REF_14(address) -> _self.userWithdrawalAccount
MODIFIER_CALL, SmartWalletLib.validAddress(address)(REF_14)"];
7->1;
}
// Function: 1592.sol-SmartWalletLib-userWithdrawalAccountOnly(SmartWalletLib.Wallet)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _self.userWithdrawalAccount)

IRs:
REF_24(address) -> _self.userWithdrawalAccount
TMP_112(bool) = msg.sender == REF_24
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1592.sol-SmartWalletLib-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != 0x0)

IRs:
TMP_106(bool) = _address != 0
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1592.sol-Utils-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1592.sol-Utils-greaterThanZero(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_21(bool) = _amount > 0
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1592.sol-Utils-notEmpty(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(_str).length > 0)

IRs:
TMP_28 = CONVERT _str to bytes
REF_0 -> LENGTH TMP_28
TMP_29(bool) = REF_0 > 0
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1592.sol-Utils-notThis(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(this))

IRs:
TMP_25 = CONVERT this to address
TMP_26(bool) = _address != TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1592.sol-Utils-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_9(uint256) = _x + _y
z(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_10(bool) = z >= _x
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1592.sol-Utils-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x * _y

IRs:
TMP_15(uint256) = _x * _y
z(uint256) := TMP_15(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_x == 0 || z / _x == _y)

IRs:
TMP_16(bool) = _x == 0
TMP_17(uint256) = z / _x
TMP_18(bool) = TMP_17 == _y
TMP_19(bool) = TMP_16 || TMP_18
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1592.sol-Utils-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_x >= _y)

IRs:
TMP_12(bool) = _x >= _y
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_14(uint256) = _x - _y
RETURN TMP_14"];
}
// Function: 1592.sol-Utils-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != 0x0)

IRs:
TMP_23(bool) = _address != 0
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1592.sol-WithdrawalConfigurations-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_46(bool) = msg.sender == newOwner
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnerUpdate(owner,newOwner)

IRs:
Emit OwnerUpdate(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_49 = CONVERT 0 to address
newOwner(address) := TMP_49(address)"];
}
// Function: 1592.sol-WithdrawalConfigurations-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1592.sol-WithdrawalConfigurations-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
}
// Function: 1592.sol-WithdrawalConfigurations-constructor(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_withdrawalCoolingPeriod <= maxWithdrawalCoolingPeriod && _withdrawalCoolingPeriod >= _minWithdrawalCoolingPeriod)

IRs:
TMP_50(bool) = _withdrawalCoolingPeriod <= maxWithdrawalCoolingPeriod
TMP_51(bool) = _withdrawalCoolingPeriod >= _minWithdrawalCoolingPeriod
TMP_52(bool) = TMP_50 && TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_minWithdrawalCoolingPeriod >= 0)

IRs:
TMP_54(bool) = _minWithdrawalCoolingPeriod >= 0
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
minWithdrawalCoolingPeriod = _minWithdrawalCoolingPeriod

IRs:
minWithdrawalCoolingPeriod(uint256) := _minWithdrawalCoolingPeriod(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
withdrawalCoolingPeriod = _withdrawalCoolingPeriod

IRs:
withdrawalCoolingPeriod(uint256) := _withdrawalCoolingPeriod(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Ownable(msg.sender)

IRs:
INTERNAL_CALL, Ownable.constructor(address)(msg.sender)"];
5->1;
}
// Function: 1592.sol-WithdrawalConfigurations-emitWithrawalRequestEvent(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
WithdrawalRequested(_sender,_smartWallet)

IRs:
Emit WithdrawalRequested(_sender,_smartWallet)"];
}
// Function: 1592.sol-WithdrawalConfigurations-getWithdrawalCoolingPeriod()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
withdrawalCoolingPeriod

IRs:
RETURN withdrawalCoolingPeriod"];
}
// Function: 1592.sol-WithdrawalConfigurations-greaterThanZero(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_65(bool) = _amount > 0
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1592.sol-WithdrawalConfigurations-notEmpty(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(_str).length > 0)

IRs:
TMP_72 = CONVERT _str to bytes
REF_1 -> LENGTH TMP_72
TMP_73(bool) = REF_1 > 0
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1592.sol-WithdrawalConfigurations-notThis(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != address(this))

IRs:
TMP_69 = CONVERT this to address
TMP_70(bool) = _address != TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1592.sol-WithdrawalConfigurations-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_75(bool) = msg.sender == owner
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1592.sol-WithdrawalConfigurations-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_31(uint256) = _x + _y
z(uint256) := TMP_31(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_32(bool) = z >= _x
TMP_33(None) = SOLIDITY_CALL assert(bool)(TMP_32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1592.sol-WithdrawalConfigurations-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x * _y

IRs:
TMP_37(uint256) = _x * _y
z(uint256) := TMP_37(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_x == 0 || z / _x == _y)

IRs:
TMP_38(bool) = _x == 0
TMP_39(uint256) = z / _x
TMP_40(bool) = TMP_39 == _y
TMP_41(bool) = TMP_38 || TMP_40
TMP_42(None) = SOLIDITY_CALL assert(bool)(TMP_41)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1592.sol-WithdrawalConfigurations-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_x >= _y)

IRs:
TMP_34(bool) = _x >= _y
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_36(uint256) = _x - _y
RETURN TMP_36"];
}
// Function: 1592.sol-WithdrawalConfigurations-setWithdrawalCoolingPeriod(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_withdrawalCoolingPeriod <= maxWithdrawalCoolingPeriod && _withdrawalCoolingPeriod >= minWithdrawalCoolingPeriod)

IRs:
TMP_57(bool) = _withdrawalCoolingPeriod <= maxWithdrawalCoolingPeriod
TMP_58(bool) = _withdrawalCoolingPeriod >= minWithdrawalCoolingPeriod
TMP_59(bool) = TMP_57 && TMP_58
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
withdrawalCoolingPeriod = _withdrawalCoolingPeriod

IRs:
withdrawalCoolingPeriod(uint256) := _withdrawalCoolingPeriod(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SetWithdrawalCoolingPeriod(_withdrawalCoolingPeriod)

IRs:
Emit SetWithdrawalCoolingPeriod(_withdrawalCoolingPeriod)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Ownable.ownerOnly()()"];
4->1;
}
// Function: 1592.sol-WithdrawalConfigurations-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
maxWithdrawalCoolingPeriod = 12 * 604800

IRs:
TMP_64(uint256) = 12 * 604800
maxWithdrawalCoolingPeriod(uint256) := TMP_64(uint256)"];
}
// Function: 1592.sol-WithdrawalConfigurations-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != owner)

IRs:
TMP_43(bool) = _newOwner != owner
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, Ownable.ownerOnly()()"];
3->1;
}
// Function: 1592.sol-WithdrawalConfigurations-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != 0x0)

IRs:
TMP_67(bool) = _address != 0
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
