digraph G {
// Function: 1641.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1641.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1641.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1641.sol-ERC20-totalSupply()
digraph{
}
// Function: 1641.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1641.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1641.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1641.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 1641.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1641.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = _newOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1641.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1641.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1641.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_1 = CONVERT 0 to address
owner(address) := TMP_1(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1641.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1641.sol-TakeBack-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_16 = CONVERT 0 to address
TMP_17(bool) = _newOwner != TMP_16
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1641.sol-TakeBack-changeSupervisor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
supervisor = _newSupervisor

IRs:
supervisor(address) := _newSupervisor(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1641.sol-TakeBack-claimTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
_token == 0x0

IRs:
TMP_35(bool) = _token == 0
CONDITION TMP_35"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_36 = CONVERT this to address
TMP_37(uint256) = SOLIDITY_CALL balance(address)(TMP_36)
Transfer dest:owner value:TMP_37"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_39 = CONVERT _token to ERC20
token(ERC20) := TMP_39(ERC20)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
balance = token.balanceOf(this)

IRs:
TMP_40(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_40(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
token.transfer(owner,balance)

IRs:
TMP_41(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['owner', 'balance']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ClaimedTokens(_token,owner,balance)

IRs:
Emit ClaimedTokens(_token,owner,balance)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->1;
}
// Function: 1641.sol-TakeBack-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1641.sol-TakeBack-constructor(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenAdd = _token

IRs:
tokenAdd(address) := _token(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
supervisor = _supervisor

IRs:
supervisor(address) := _supervisor(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
networkId = _networkId

IRs:
networkId(uint256) := _networkId(uint256)"];
}
// Function: 1641.sol-TakeBack-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_45(bool) = msg.sender == owner
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1641.sol-TakeBack-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_12 = CONVERT 0 to address
owner(address) := TMP_12(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1641.sol-TakeBack-takeBack(uint256,uint256,bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_user = msg.sender

IRs:
_user(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(userToNonce[_user] == _nonce)

IRs:
REF_0(uint256) -> userToNonce[_user]
TMP_20(bool) = REF_0 == _nonce
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(supervisor == verify(_hashmessage,_v,_r,_s))

IRs:
TMP_22(address) = INTERNAL_CALL, TakeBack.verify(bytes32,uint8,bytes32,bytes32)(_hashmessage,_v,_r,_s)
TMP_23(bool) = supervisor == TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(keccak256()(abi.encodePacked(_user,_nonce,_value,networkId)) == _hashmessage)

IRs:
TMP_25(bytes) = SOLIDITY_CALL abi.encodePacked()(_user,_nonce,_value,networkId)
TMP_26(bytes32) = SOLIDITY_CALL keccak256()(TMP_25)
TMP_27(bool) = TMP_26 == _hashmessage
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
token = ERC20(tokenAdd)

IRs:
TMP_29 = CONVERT tokenAdd to ERC20
token(ERC20) := TMP_29(ERC20)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token.transfer(_user,_value)

IRs:
TMP_30(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['_user', '_value']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
userToNonce[_user] += 1

IRs:
REF_3(uint256) -> userToNonce[_user]
REF_3(-> userToNonce) = REF_3 + 1"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
TakedBack(_user,_nonce,_value)

IRs:
Emit TakedBack(_user,_nonce,_value)"];
}
// Function: 1641.sol-TakeBack-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1641.sol-TakeBack-verify(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
prefix = EvolutionLand Signed Message:
32

IRs:
prefix(bytes) := EvolutionLand Signed Message:
32(string)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
prefixedHash = keccak256()(abi.encodePacked(prefix,_hashmessage))

IRs:
TMP_32(bytes) = SOLIDITY_CALL abi.encodePacked()(prefix,_hashmessage)
TMP_33(bytes32) = SOLIDITY_CALL keccak256()(TMP_32)
prefixedHash(bytes32) := TMP_33(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
signer = ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,_v,_r,_s)

IRs:
TMP_34(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,_v,_r,_s)
signer(address) := TMP_34(address)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
signer

IRs:
RETURN signer"];
}
}
