digraph G {
// Function: 1658.sol-EEMCrowdsale-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_26(mapping(address => uint256)) -> allowed[_owner]
REF_27(uint256) -> REF_26[_spender]
RETURN REF_27"];
}
// Function: 1658.sol-EEMCrowdsale-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_value != 0 && allowed[msg.sender][_spender] != 0

IRs:
TMP_62(bool) = _value != 0
REF_22(mapping(address => uint256)) -> allowed[msg.sender]
REF_23(uint256) -> REF_22[_spender]
TMP_63(bool) = REF_23 != 0
TMP_64(bool) = TMP_62 && TMP_63
CONDITION TMP_64"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_24(mapping(address => uint256)) -> allowed[msg.sender]
REF_25(uint256) -> REF_24[_spender]
REF_25(uint256) (->allowed) := _value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1658.sol-EEMCrowdsale-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_5(uint256) -> balances[_owner]
RETURN REF_5"];
}
// Function: 1658.sol-EEMCrowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(beneficiary != address(0))

IRs:
TMP_14 = CONVERT 0 to address
TMP_15(bool) = beneficiary != TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! purchasingAllowed

IRs:
TMP_17 = UnaryType.BANG purchasingAllowed 
CONDITION TMP_17"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
msg.value < 1000000000000000 * MINfinney

IRs:
TMP_18(uint256) = 1000000000000000 * MINfinney
TMP_19(bool) = msg.value < TMP_18
CONDITION TMP_19"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
msg.value > 1000000000000000 * MAXfinney

IRs:
TMP_20(uint256) = 1000000000000000 * MAXfinney
TMP_21(bool) = msg.value > TMP_20
CONDITION TMP_21"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
EEMAmounts = calculateObtained(msg.value)

IRs:
TMP_22(uint256) = INTERNAL_CALL, EEMCrowdsale.calculateObtained(uint256)(msg.value)
EEMAmounts(uint256) := TMP_22(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
weiRaised = weiRaised.add(msg.value)

IRs:
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'msg.value'] 
weiRaised(uint256) := TMP_23(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool)(ERC20Basic(EEM).transfer(beneficiary,EEMAmounts))

IRs:
TMP_24 = CONVERT EEM to ERC20Basic
TMP_25(bool) = HIGH_LEVEL_CALL, dest:TMP_24(ERC20Basic), function:transfer, arguments:['beneficiary', 'EEMAmounts']  
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,msg.value,EEMAmounts)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,msg.value,EEMAmounts)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, EEMCrowdsale.forwardFunds()()"];
}
// Function: 1658.sol-EEMCrowdsale-calculateObtained(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
amountEtherInWei.mul(ICORatio).div(10 ** 10)

IRs:
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amountEtherInWei', 'ICORatio'] 
TMP_31(uint256) = 10 ** 10
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_30', 'TMP_31'] 
RETURN TMP_32"];
}
// Function: 1658.sol-EEMCrowdsale-changeEEMWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == EEMWallet)

IRs:
TMP_35(bool) = msg.sender == EEMWallet
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
EEMWallet = _EEMWallet

IRs:
EEMWallet(address) := _EEMWallet(address)"];
}
// Function: 1658.sol-EEMCrowdsale-disablePurchasing()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_34(bool) = msg.sender != owner
CONDITION TMP_34"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
purchasingAllowed = false

IRs:
purchasingAllowed(bool) := False(bool)"];
}
// Function: 1658.sol-EEMCrowdsale-enablePurchasing()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_33(bool) = msg.sender != owner
CONDITION TMP_33"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
purchasingAllowed = true

IRs:
purchasingAllowed(bool) := True(bool)"];
}
// Function: 1658.sol-EEMCrowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, EEMCrowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 1658.sol-EEMCrowdsale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
EEMWallet.transfer(msg.value)

IRs:
Transfer dest:EEMWallet value:msg.value"];
}
// Function: 1658.sol-EEMCrowdsale-getStats()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(totalContribution,totalSupply,totalBonusTokensIssued,purchasingAllowed)

IRs:
RETURN totalContribution,totalSupply,totalBonusTokensIssued,purchasingAllowed"];
}
// Function: 1658.sol-EEMCrowdsale-setAIRDROPBounce(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_74(bool) = msg.sender != owner
CONDITION TMP_74"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
AIRDROPBounce = _newPrice

IRs:
AIRDROPBounce(uint256) := _newPrice(uint256)"];
}
// Function: 1658.sol-EEMCrowdsale-setICOPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_71(bool) = msg.sender != owner
CONDITION TMP_71"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ICORatio = _newPrice

IRs:
ICORatio(uint256) := _newPrice(uint256)"];
}
// Function: 1658.sol-EEMCrowdsale-setMAXfinney(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_73(bool) = msg.sender != owner
CONDITION TMP_73"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
MAXfinney = _newPrice

IRs:
MAXfinney(uint256) := _newPrice(uint256)"];
}
// Function: 1658.sol-EEMCrowdsale-setMINfinney(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_72(bool) = msg.sender != owner
CONDITION TMP_72"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
MINfinney = _newPrice

IRs:
MINfinney(uint256) := _newPrice(uint256)"];
}
// Function: 1658.sol-EEMCrowdsale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
EEM = 0x5d48aca3954d288a5fea9fc374ac48a5dbf5fa6d

IRs:
EEM(address) := 532556834318572951984880655053588615641433504365(uint256)"];
}
// Function: 1658.sol-EEMCrowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
purchasingAllowed = false

IRs:
purchasingAllowed(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
totalContribution = 0

IRs:
totalContribution(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalBonusTokensIssued = 0

IRs:
totalBonusTokensIssued(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MINfinney = 0

IRs:
MINfinney(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
MAXfinney = 5000

IRs:
MAXfinney(uint256) := 5000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
AIRDROPBounce = 0

IRs:
AIRDROPBounce(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
ICORatio = 168000

IRs:
ICORatio(uint256) := 168000(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
EEMWallet = 0x4959935d592FE71583d813Af2E68a990ff597472

IRs:
EEMWallet(address) := 418753929863651619650572600955102890916125963378(address)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
rate = ICORatio

IRs:
rate(uint256) := ICORatio(uint256)"];
}
// Function: 1658.sol-EEMCrowdsale-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_37(bool) = b <= a
TMP_38(None) = SOLIDITY_CALL assert(bool)(TMP_37)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_39(uint256) = a - b
RETURN TMP_39"];
}
// Function: 1658.sol-EEMCrowdsale-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.data.length < (2 * 32) + 4

IRs:
REF_6 -> LENGTH msg.data
TMP_40(uint256) = 2 * 32
TMP_41(uint256) = TMP_40 + 4
TMP_42(bool) = REF_6 < TMP_41
CONDITION TMP_42"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_value == 0

IRs:
TMP_43(bool) = _value == 0
CONDITION TMP_43"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
fromBalance = balances[msg.sender]

IRs:
REF_7(uint256) -> balances[msg.sender]
fromBalance(uint256) := REF_7(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sufficientFunds = fromBalance >= _value

IRs:
TMP_44(bool) = fromBalance >= _value
sufficientFunds(bool) := TMP_44(bool)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
overflowed = balances[_to] + _value < balances[_to]

IRs:
REF_8(uint256) -> balances[_to]
TMP_45(uint256) = REF_8 + _value
REF_9(uint256) -> balances[_to]
TMP_46(bool) = TMP_45 < REF_9
overflowed(bool) := TMP_46(bool)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
sufficientFunds && ! overflowed

IRs:
TMP_47 = UnaryType.BANG overflowed 
TMP_48(bool) = sufficientFunds && TMP_47
CONDITION TMP_48"];
10->11[label="True"];
10->15[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_10(uint256) -> balances[msg.sender]
REF_10(-> balances) = REF_10 - _value"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
balances[_to] += _value

IRs:
REF_11(uint256) -> balances[_to]
REF_11(-> balances) = REF_11 + _value"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: RETURN 15

EXPRESSION:
false

IRs:
RETURN False"];
17[label="Node Type: RETURN 17

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1658.sol-EEMCrowdsale-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.data.length < (3 * 32) + 4

IRs:
REF_12 -> LENGTH msg.data
TMP_50(uint256) = 3 * 32
TMP_51(uint256) = TMP_50 + 4
TMP_52(bool) = REF_12 < TMP_51
CONDITION TMP_52"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_value == 0

IRs:
TMP_53(bool) = _value == 0
CONDITION TMP_53"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
fromBalance = balances[_from]

IRs:
REF_13(uint256) -> balances[_from]
fromBalance(uint256) := REF_13(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
allowance = allowed[_from][msg.sender]

IRs:
REF_14(mapping(address => uint256)) -> allowed[_from]
REF_15(uint256) -> REF_14[msg.sender]
allowance(uint256) := REF_15(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
sufficientFunds = fromBalance <= _value

IRs:
TMP_54(bool) = fromBalance <= _value
sufficientFunds(bool) := TMP_54(bool)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
sufficientAllowance = allowance <= _value

IRs:
TMP_55(bool) = allowance <= _value
sufficientAllowance(bool) := TMP_55(bool)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
overflowed = balances[_to] + _value > balances[_to]

IRs:
REF_16(uint256) -> balances[_to]
TMP_56(uint256) = REF_16 + _value
REF_17(uint256) -> balances[_to]
TMP_57(bool) = TMP_56 > REF_17
overflowed(bool) := TMP_57(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sufficientFunds && sufficientAllowance && ! overflowed

IRs:
TMP_58(bool) = sufficientFunds && sufficientAllowance
TMP_59 = UnaryType.BANG overflowed 
TMP_60(bool) = TMP_58 && TMP_59
CONDITION TMP_60"];
12->13[label="True"];
12->18[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
balances[_to] += _value

IRs:
REF_18(uint256) -> balances[_to]
REF_18(-> balances) = REF_18 + _value"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balances[_from] -= _value

IRs:
REF_19(uint256) -> balances[_from]
REF_19(-> balances) = REF_19 - _value"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_20(mapping(address => uint256)) -> allowed[_from]
REF_21(uint256) -> REF_20[msg.sender]
REF_21(-> allowed) = REF_21 - _value"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
true

IRs:
RETURN True"];
18[label="Node Type: RETURN 18

EXPRESSION:
false

IRs:
RETURN False"];
20[label="Node Type: RETURN 20

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1658.sol-EEMCrowdsale-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
etherBalance = this.balance

IRs:
REF_30(uint256) = SOLIDITY_CALL balance(address)(this)
etherBalance(uint256) := REF_30([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f57c757cf40>])"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(etherBalance)

IRs:
Transfer dest:owner value:etherBalance"];
}
// Function: 1658.sol-EEMCrowdsale-withdrawForeignTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_66(bool) = msg.sender != owner
CONDITION TMP_66"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
token = ForeignToken(_tokenContract)

IRs:
TMP_67 = CONVERT _tokenContract to ForeignToken
token(ForeignToken) := TMP_67(ForeignToken)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
amount = token.balanceOf(address(this))

IRs:
TMP_68 = CONVERT this to address
TMP_69(uint256) = HIGH_LEVEL_CALL, dest:token(ForeignToken), function:balanceOf, arguments:['TMP_68']  
amount(uint256) := TMP_69(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
token.transfer(owner,amount)

IRs:
TMP_70(bool) = HIGH_LEVEL_CALL, dest:token(ForeignToken), function:transfer, arguments:['owner', 'amount']  
RETURN TMP_70"];
}
// Function: 1658.sol-EEMTokenAbstract-unlock()
digraph{
}
// Function: 1658.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 1658.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 1658.sol-ForeignToken-balanceOf(address)
digraph{
}
// Function: 1658.sol-ForeignToken-transfer(address,uint256)
digraph{
}
// Function: 1658.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1658.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1658.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1658.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
}
