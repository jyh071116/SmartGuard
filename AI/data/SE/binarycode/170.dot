digraph G {
// Function: 170.sol-CSC-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_28(uint256) -> balances[_owner]
RETURN REF_28"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 170.sol-CSC-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(balances[_who] >= _value)

IRs:
REF_21(uint256) -> balances[_who]
TMP_19(bool) = REF_21 >= _value
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_who] -= _value

IRs:
REF_22(uint256) -> balances[_who]
REF_22(-> balances) = REF_22 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lockedBalances[_who][0] = 0

IRs:
REF_23(uint256[2]) -> lockedBalances[_who]
REF_24(uint256) -> REF_23[0]
REF_24(uint256) (->lockedBalances) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
lockedBalances[_who][1] = 0

IRs:
REF_25(uint256[2]) -> lockedBalances[_who]
REF_26(uint256) -> REF_25[1]
REF_26(uint256) (->lockedBalances) := 0(uint256)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 170.sol-CSC-constructor(uint256,string,uint8,string,address,address[],uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_owner] = _initialAmount

IRs:
REF_0(uint256) -> balances[_owner]
REF_0(uint256) (->balances) := _initialAmount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = _initialAmount

IRs:
totalSupply(uint256) := _initialAmount(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = _decimalUnits

IRs:
decimals(uint8) := _decimalUnits(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < _lockedAddress.length

IRs:
REF_1 -> LENGTH _lockedAddress
TMP_0(bool) = i < REF_1
CONDITION TMP_0"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
lockedBalances[_lockedAddress[i]][0] = _lockedBalances[i]

IRs:
REF_2(address) -> _lockedAddress[i]
REF_3(uint256[2]) -> lockedBalances[REF_2]
REF_4(uint256) -> REF_3[0]
REF_5(uint256) -> _lockedBalances[i]
REF_4(uint256) (->lockedBalances) := REF_5(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
lockedBalances[_lockedAddress[i]][1] = _lockedTimes[i]

IRs:
REF_6(address) -> _lockedAddress[i]
REF_7(uint256[2]) -> lockedBalances[REF_6]
REF_8(uint256) -> REF_7[1]
REF_9(uint256) -> _lockedTimes[i]
REF_8(uint256) (->lockedBalances) := REF_9(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_1(uint256) := i(uint256)
i(uint256) = i + 1"];
13->10;
}
// Function: 170.sol-CSC-makeCoin(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_21(bool) = msg.sender == owner
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply += _value

IRs:
totalSupply(uint256) = totalSupply + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[owner] += _value

IRs:
REF_27(uint256) -> balances[owner]
REF_27(-> balances) = REF_27 + _value"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 170.sol-CSC-setIcoLockUntil(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_23(bool) = msg.sender == owner
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
icoLockUntil = _until

IRs:
icoLockUntil(uint256) := _until(uint256)"];
}
// Function: 170.sol-CSC-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
icoLockUntil = 1543593540

IRs:
icoLockUntil(uint256) := 1543593540(uint256)"];
}
// Function: 170.sol-CSC-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || icoLockUntil < now)

IRs:
TMP_2(bool) = msg.sender == owner
TMP_3(bool) = icoLockUntil < now
TMP_4(bool) = TMP_2 || TMP_3
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_to != address(0)

IRs:
TMP_6 = CONVERT 0 to address
TMP_7(bool) = _to != TMP_6
CONDITION TMP_7"];
2->3[label="True"];
2->11[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
lockedBalances[msg.sender][1] >= now

IRs:
REF_10(uint256[2]) -> lockedBalances[msg.sender]
REF_11(uint256) -> REF_10[1]
TMP_8(bool) = REF_11 >= now
CONDITION TMP_8"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)((balances[msg.sender] > lockedBalances[msg.sender][0]) && (balances[msg.sender] - lockedBalances[msg.sender][0] >= _value))

IRs:
REF_12(uint256) -> balances[msg.sender]
REF_13(uint256[2]) -> lockedBalances[msg.sender]
REF_14(uint256) -> REF_13[0]
TMP_9(bool) = REF_12 > REF_14
REF_15(uint256) -> balances[msg.sender]
REF_16(uint256[2]) -> lockedBalances[msg.sender]
REF_17(uint256) -> REF_16[0]
TMP_10(uint256) = REF_15 - REF_17
TMP_11(bool) = TMP_10 >= _value
TMP_12(bool) = TMP_9 && TMP_11
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_18(uint256) -> balances[msg.sender]
TMP_14(bool) = REF_18 >= _value
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_19(uint256) -> balances[msg.sender]
REF_19(-> balances) = REF_19 - _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[_to] += _value

IRs:
REF_20(uint256) -> balances[_to]
REF_20(-> balances) = REF_20 + _value"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 170.sol-CSC-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_25(bool) = msg.sender == owner
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
msg.sender.transfer(address(this).balance)

IRs:
TMP_27 = CONVERT this to address
TMP_28(uint256) = SOLIDITY_CALL balance(address)(TMP_27)
Transfer dest:msg.sender value:TMP_28"];
}
// Function: 170.sol-CSC-withdrawTo(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_30(bool) = msg.sender == owner
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
address(_to).transfer(address(this).balance)

IRs:
TMP_32 = CONVERT _to to address
TMP_33 = CONVERT this to address
TMP_34(uint256) = SOLIDITY_CALL balance(address)(TMP_33)
Transfer dest:TMP_32 value:TMP_34"];
}
}
