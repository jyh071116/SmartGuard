digraph G {
// Function: 199.sol-JIincForwarderInterface-cancelMigration()
digraph{
}
// Function: 199.sol-JIincForwarderInterface-deposit()
digraph{
}
// Function: 199.sol-JIincForwarderInterface-finishMigration()
digraph{
}
// Function: 199.sol-JIincForwarderInterface-setup(address)
digraph{
}
// Function: 199.sol-JIincForwarderInterface-startMigration(address)
digraph{
}
// Function: 199.sol-JIincForwarderInterface-status()
digraph{
}
// Function: 199.sol-MSFun-checkCount(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_84(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_84(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(self.proposal_[_whatProposal].count)

IRs:
REF_114(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_115(MSFun.ProposalData) -> REF_114[_whatProposal]
REF_116(uint256) -> REF_115.count
RETURN REF_116"];
3[label="Node Type: RETURN 3

EXPRESSION:
signature_count

IRs:
RETURN signature_count"];
}
// Function: 199.sol-MSFun-checkMsgData(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_83(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_83(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(self.proposal_[_whatProposal].msgData)

IRs:
REF_111(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_112(MSFun.ProposalData) -> REF_111[_whatProposal]
REF_113(bytes32) -> REF_112.msgData
RETURN REF_113"];
3[label="Node Type: RETURN 3

EXPRESSION:
msg_data

IRs:
RETURN msg_data"];
}
// Function: 199.sol-MSFun-checkSigner(MSFun.Data,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_signer > 0,MSFun checkSigner failed - 0 not allowed)

IRs:
TMP_85(bool) = _signer > 0
TMP_86(None) = SOLIDITY_CALL require(bool,string)(TMP_85,MSFun checkSigner failed - 0 not allowed)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_87(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_87(bytes32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(self.proposal_[_whatProposal].log[_signer - 1])

IRs:
REF_117(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_118(MSFun.ProposalData) -> REF_117[_whatProposal]
REF_119(mapping(uint256 => address)) -> REF_118.log
TMP_88(uint256) = _signer - 1
REF_120(address) -> REF_119[TMP_88]
RETURN REF_120"];
4[label="Node Type: RETURN 4

EXPRESSION:
signer

IRs:
RETURN signer"];
}
// Function: 199.sol-MSFun-deleteProposal(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_78(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_78(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < self.proposal_[_whatProposal].count

IRs:
REF_93(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_94(MSFun.ProposalData) -> REF_93[_whatProposal]
REF_95(uint256) -> REF_94.count
TMP_79(bool) = i < REF_95
CONDITION TMP_79"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_whichAdmin = self.proposal_[_whatProposal].log[i]

IRs:
REF_96(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_97(MSFun.ProposalData) -> REF_96[_whatProposal]
REF_98(mapping(uint256 => address)) -> REF_97.log
REF_99(address) -> REF_98[i]
_whichAdmin(address) := REF_99(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete self.proposal_[_whatProposal].admin[_whichAdmin]

IRs:
REF_100(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_101(MSFun.ProposalData) -> REF_100[_whatProposal]
REF_102(mapping(address => bool)) -> REF_101.admin
REF_103(bool) -> REF_102[_whichAdmin]
REF_102 = delete REF_103 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
delete self.proposal_[_whatProposal].log[i]

IRs:
REF_104(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_105(MSFun.ProposalData) -> REF_104[_whatProposal]
REF_106(mapping(uint256 => address)) -> REF_105.log
REF_107(address) -> REF_106[i]
REF_106 = delete REF_107 "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_80(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete self.proposal_[_whatProposal]

IRs:
REF_108(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_109(MSFun.ProposalData) -> REF_108[_whatProposal]
REF_108 = delete REF_109 "];
}
// Function: 199.sol-MSFun-multiSig(MSFun.Data,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_71(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_71(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_currentCount = self.proposal_[_whatProposal].count

IRs:
REF_52(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_53(MSFun.ProposalData) -> REF_52[_whatProposal]
REF_54(uint256) -> REF_53.count
_currentCount(uint256) := REF_54(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_whichAdmin = msg.sender

IRs:
_whichAdmin(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_msgData = keccak256()(msg.data)

IRs:
TMP_72(bytes32) = SOLIDITY_CALL keccak256()(msg.data)
_msgData(bytes32) := TMP_72(bytes32)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_currentCount == 0

IRs:
TMP_73(bool) = _currentCount == 0
CONDITION TMP_73"];
5->6[label="True"];
5->13[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
self.proposal_[_whatProposal].msgData = _msgData

IRs:
REF_55(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_56(MSFun.ProposalData) -> REF_55[_whatProposal]
REF_57(bytes32) -> REF_56.msgData
REF_57(bytes32) (->self) := _msgData(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] = true

IRs:
REF_58(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_59(MSFun.ProposalData) -> REF_58[_whatProposal]
REF_60(mapping(address => bool)) -> REF_59.admin
REF_61(bool) -> REF_60[_whichAdmin]
REF_61(bool) (->self) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin

IRs:
REF_62(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_63(MSFun.ProposalData) -> REF_62[_whatProposal]
REF_64(mapping(uint256 => address)) -> REF_63.log
REF_65(address) -> REF_64[_currentCount]
REF_65(address) (->self) := _whichAdmin(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
self.proposal_[_whatProposal].count += 1

IRs:
REF_66(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_67(MSFun.ProposalData) -> REF_66[_whatProposal]
REF_68(uint256) -> REF_67.count
REF_68(-> self) = REF_68 + 1"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
self.proposal_[_whatProposal].count == _requiredSignatures

IRs:
REF_69(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_70(MSFun.ProposalData) -> REF_69[_whatProposal]
REF_71(uint256) -> REF_70.count
TMP_74(bool) = REF_71 == _requiredSignatures
CONDITION TMP_74"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
(true)

IRs:
RETURN True"];
12[label="Node Type: END_IF 12
"];
12->23;
13[label="Node Type: IF 13

EXPRESSION:
self.proposal_[_whatProposal].msgData == _msgData

IRs:
REF_72(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_73(MSFun.ProposalData) -> REF_72[_whatProposal]
REF_74(bytes32) -> REF_73.msgData
TMP_75(bool) = REF_74 == _msgData
CONDITION TMP_75"];
13->14[label="True"];
13->22[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] == false

IRs:
REF_75(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_76(MSFun.ProposalData) -> REF_75[_whatProposal]
REF_77(mapping(address => bool)) -> REF_76.admin
REF_78(bool) -> REF_77[_whichAdmin]
TMP_76(bool) = REF_78 == False
CONDITION TMP_76"];
14->15[label="True"];
14->18[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] = true

IRs:
REF_79(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_80(MSFun.ProposalData) -> REF_79[_whatProposal]
REF_81(mapping(address => bool)) -> REF_80.admin
REF_82(bool) -> REF_81[_whichAdmin]
REF_82(bool) (->self) := True(bool)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin

IRs:
REF_83(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_84(MSFun.ProposalData) -> REF_83[_whatProposal]
REF_85(mapping(uint256 => address)) -> REF_84.log
REF_86(address) -> REF_85[_currentCount]
REF_86(address) (->self) := _whichAdmin(address)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
self.proposal_[_whatProposal].count += 1

IRs:
REF_87(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_88(MSFun.ProposalData) -> REF_87[_whatProposal]
REF_89(uint256) -> REF_88.count
REF_89(-> self) = REF_89 + 1"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
self.proposal_[_whatProposal].count == _requiredSignatures

IRs:
REF_90(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_91(MSFun.ProposalData) -> REF_90[_whatProposal]
REF_92(uint256) -> REF_91.count
TMP_77(bool) = REF_92 == _requiredSignatures
CONDITION TMP_77"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: RETURN 20

EXPRESSION:
(true)

IRs:
RETURN True"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
}
// Function: 199.sol-MSFun-whatProposal(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keccak256()(abi.encodePacked(_whatFunction,this)))

IRs:
TMP_81(bytes) = SOLIDITY_CALL abi.encodePacked()(_whatFunction,this)
TMP_82(bytes32) = SOLIDITY_CALL keccak256()(TMP_81)
RETURN TMP_82"];
}
// Function: 199.sol-TeamJust-addAdmin(address,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: IF 1

EXPRESSION:
MSFun.multiSig(msData,requiredDevSignatures_,addAdmin) == true

IRs:
TMP_27(bool) = LIBRARY_CALL, dest:MSFun, function:MSFun.multiSig(MSFun.Data,uint256,bytes32), arguments:['msData', 'requiredDevSignatures_', 'addAdmin'] 
TMP_28(bool) = TMP_27 == True
CONDITION TMP_28"];
1->2[label="True"];
1->13[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MSFun.deleteProposal(msData,addAdmin)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', 'addAdmin'] "];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
admins_[_who].isAdmin == false

IRs:
REF_18(TeamJust.Admin) -> admins_[_who]
REF_19(bool) -> REF_18.isAdmin
TMP_30(bool) = REF_19 == False
CONDITION TMP_30"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
admins_[_who].isAdmin = true

IRs:
REF_20(TeamJust.Admin) -> admins_[_who]
REF_21(bool) -> REF_20.isAdmin
REF_21(bool) (->admins_) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
adminCount_ += 1

IRs:
adminCount_(uint256) = adminCount_ + 1"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
requiredSignatures_ += 1

IRs:
requiredSignatures_(uint256) = requiredSignatures_ + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_isDev == true

IRs:
TMP_31(bool) = _isDev == True
CONDITION TMP_31"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
admins_[_who].isDev = _isDev

IRs:
REF_22(TeamJust.Admin) -> admins_[_who]
REF_23(bool) -> REF_22.isDev
REF_23(bool) (->admins_) := _isDev(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
devCount_ += 1

IRs:
devCount_(uint256) = devCount_ + 1"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
requiredDevSignatures_ += 1

IRs:
requiredDevSignatures_(uint256) = requiredDevSignatures_ + 1"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
admins_[_who].name = _name

IRs:
REF_24(TeamJust.Admin) -> admins_[_who]
REF_25(bytes32) -> REF_24.name
REF_25(bytes32) (->admins_) := _name(bytes32)"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, TeamJust.onlyDevs()()"];
15->1;
}
// Function: 199.sol-TeamJust-adminCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(adminCount_)

IRs:
RETURN adminCount_"];
}
// Function: 199.sol-TeamJust-adminName(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(admins_[_who].name)

IRs:
REF_42(TeamJust.Admin) -> admins_[_who]
REF_43(bytes32) -> REF_42.name
RETURN REF_43"];
}
// Function: 199.sol-TeamJust-changeRequiredDevSignatures(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_howMany > 0 && _howMany <= devCount_,changeRequiredDevSignatures failed - must be between 1 and number of devs)

IRs:
TMP_58(bool) = _howMany > 0
TMP_59(bool) = _howMany <= devCount_
TMP_60(bool) = TMP_58 && TMP_59
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,changeRequiredDevSignatures failed - must be between 1 and number of devs)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
MSFun.multiSig(msData,requiredDevSignatures_,changeRequiredDevSignatures) == true

IRs:
TMP_62(bool) = LIBRARY_CALL, dest:MSFun, function:MSFun.multiSig(MSFun.Data,uint256,bytes32), arguments:['msData', 'requiredDevSignatures_', 'changeRequiredDevSignatures'] 
TMP_63(bool) = TMP_62 == True
CONDITION TMP_63"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
MSFun.deleteProposal(msData,changeRequiredDevSignatures)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', 'changeRequiredDevSignatures'] "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
requiredDevSignatures_ = _howMany

IRs:
requiredDevSignatures_(uint256) := _howMany(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, TeamJust.onlyDevs()()"];
6->1;
}
// Function: 199.sol-TeamJust-changeRequiredSignatures(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_howMany > 0 && _howMany <= adminCount_,changeRequiredSignatures failed - must be between 1 and number of admins)

IRs:
TMP_50(bool) = _howMany > 0
TMP_51(bool) = _howMany <= adminCount_
TMP_52(bool) = TMP_50 && TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool,string)(TMP_52,changeRequiredSignatures failed - must be between 1 and number of admins)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
MSFun.multiSig(msData,requiredDevSignatures_,changeRequiredSignatures) == true

IRs:
TMP_54(bool) = LIBRARY_CALL, dest:MSFun, function:MSFun.multiSig(MSFun.Data,uint256,bytes32), arguments:['msData', 'requiredDevSignatures_', 'changeRequiredSignatures'] 
TMP_55(bool) = TMP_54 == True
CONDITION TMP_55"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
MSFun.deleteProposal(msData,changeRequiredSignatures)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', 'changeRequiredSignatures'] "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
requiredSignatures_ = _howMany

IRs:
requiredSignatures_(uint256) := _howMany(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, TeamJust.onlyDevs()()"];
6->1;
}
// Function: 199.sol-TeamJust-checkData(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
(MSFun.checkMsgData(msData,_whatFunction),MSFun.checkCount(msData,_whatFunction))

IRs:
TMP_2(bytes32) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkMsgData(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] 
TMP_3(uint256) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkCount(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] 
RETURN TMP_2,TMP_3"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, TeamJust.onlyAdmins()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
(message_data,signature_count)

IRs:
RETURN message_data,signature_count"];
}
// Function: 199.sol-TeamJust-checkSignersByName(bytes32,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
(this.adminName(MSFun.checkSigner(msData,_whatFunction,_signerA)),this.adminName(MSFun.checkSigner(msData,_whatFunction,_signerB)),this.adminName(MSFun.checkSigner(msData,_whatFunction,_signerC)))

IRs:
TMP_5(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerA'] 
TMP_6(bytes32) = HIGH_LEVEL_CALL, dest:this(address), function:adminName, arguments:['TMP_5']  
TMP_7(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerB'] 
TMP_8(bytes32) = HIGH_LEVEL_CALL, dest:this(address), function:adminName, arguments:['TMP_7']  
TMP_9(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerC'] 
TMP_10(bytes32) = HIGH_LEVEL_CALL, dest:this(address), function:adminName, arguments:['TMP_9']  
RETURN TMP_6,TMP_8,TMP_10"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmins()

IRs:
MODIFIER_CALL, TeamJust.onlyAdmins()()"];
2->1;
}
// Function: 199.sol-TeamJust-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
inventor = 0x0D78E82ECEd57aC3CE65fE3B828f4d52fF712f31

IRs:
inventor(address) := 76913195422788051662307630662237416461341634353(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mantso = 0x0D78E82ECEd57aC3CE65fE3B828f4d52fF712f31

IRs:
mantso(address) := 76913195422788051662307630662237416461341634353(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
justo = 0x0D78E82ECEd57aC3CE65fE3B828f4d52fF712f31

IRs:
justo(address) := 76913195422788051662307630662237416461341634353(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
sumpunk = 0x0D78E82ECEd57aC3CE65fE3B828f4d52fF712f31

IRs:
sumpunk(address) := 76913195422788051662307630662237416461341634353(address)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
deployer = 0x8Ba912954aedfeAF2978a1864e486fFbE4D5940f

IRs:
deployer(address) := 797320161905883423736956246217931866277076636687(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
admins_[inventor] = Admin(true,true,inventor)

IRs:
REF_9(TeamJust.Admin) -> admins_[inventor]
TMP_12(TeamJust.Admin) = new Admin(True,True,inventor)
REF_9(TeamJust.Admin) (->admins_) := TMP_12(TeamJust.Admin)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
admins_[mantso] = Admin(true,true,mantso)

IRs:
REF_10(TeamJust.Admin) -> admins_[mantso]
TMP_13(TeamJust.Admin) = new Admin(True,True,mantso)
REF_10(TeamJust.Admin) (->admins_) := TMP_13(TeamJust.Admin)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
admins_[justo] = Admin(true,true,justo)

IRs:
REF_11(TeamJust.Admin) -> admins_[justo]
TMP_14(TeamJust.Admin) = new Admin(True,True,justo)
REF_11(TeamJust.Admin) (->admins_) := TMP_14(TeamJust.Admin)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
admins_[sumpunk] = Admin(true,true,sumpunk)

IRs:
REF_12(TeamJust.Admin) -> admins_[sumpunk]
TMP_15(TeamJust.Admin) = new Admin(True,True,sumpunk)
REF_12(TeamJust.Admin) (->admins_) := TMP_15(TeamJust.Admin)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
admins_[deployer] = Admin(true,true,deployer)

IRs:
REF_13(TeamJust.Admin) -> admins_[deployer]
TMP_16(TeamJust.Admin) = new Admin(True,True,deployer)
REF_13(TeamJust.Admin) (->admins_) := TMP_16(TeamJust.Admin)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
adminCount_ = 5

IRs:
adminCount_(uint256) := 5(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
devCount_ = 5

IRs:
devCount_(uint256) := 5(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
requiredSignatures_ = 1

IRs:
requiredSignatures_(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
requiredDevSignatures_ = 1

IRs:
requiredDevSignatures_(uint256) := 1(uint256)"];
}
// Function: 199.sol-TeamJust-deleteAnyProposal(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
MSFun.deleteProposal(msData,_whatFunction)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, TeamJust.onlyDevs()()"];
2->1;
}
// Function: 199.sol-TeamJust-devCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(devCount_)

IRs:
RETURN devCount_"];
}
// Function: 199.sol-TeamJust-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Jekyll_Island_Inc.deposit.value(address(this).balance)()

IRs:
TMP_17 = CONVERT this to address
TMP_18(uint256) = SOLIDITY_CALL balance(address)(TMP_17)
TMP_20(bool) = HIGH_LEVEL_CALL, dest:Jekyll_Island_Inc(JIincForwarderInterface), function:deposit, arguments:[] value:TMP_18 "];
}
// Function: 199.sol-TeamJust-isAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(admins_[_who].isAdmin)

IRs:
REF_44(TeamJust.Admin) -> admins_[_who]
REF_45(bool) -> REF_44.isAdmin
RETURN REF_45"];
}
// Function: 199.sol-TeamJust-isDev(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(admins_[_who].isDev)

IRs:
REF_46(TeamJust.Admin) -> admins_[_who]
REF_47(bool) -> REF_46.isDev
RETURN REF_47"];
}
// Function: 199.sol-TeamJust-onlyAdmins()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(admins_[msg.sender].isAdmin == true,onlyAdmins failed - msg.sender is not an admin)

IRs:
REF_50(TeamJust.Admin) -> admins_[msg.sender]
REF_51(bool) -> REF_50.isAdmin
TMP_69(bool) = REF_51 == True
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,onlyAdmins failed - msg.sender is not an admin)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 199.sol-TeamJust-onlyDevs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(admins_[msg.sender].isDev == true,onlyDevs failed - msg.sender is not a dev)

IRs:
REF_48(TeamJust.Admin) -> admins_[msg.sender]
REF_49(bool) -> REF_48.isDev
TMP_67(bool) = REF_49 == True
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,onlyDevs failed - msg.sender is not a dev)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 199.sol-TeamJust-removeAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->24;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(adminCount_ > 1,removeAdmin failed - cannot have less than 2 admins)

IRs:
TMP_33(bool) = adminCount_ > 1
TMP_34(None) = SOLIDITY_CALL require(bool,string)(TMP_33,removeAdmin failed - cannot have less than 2 admins)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(adminCount_ >= requiredSignatures_,removeAdmin failed - cannot have less admins than number of required signatures)

IRs:
TMP_35(bool) = adminCount_ >= requiredSignatures_
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,removeAdmin failed - cannot have less admins than number of required signatures)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
admins_[_who].isDev == true

IRs:
REF_26(TeamJust.Admin) -> admins_[_who]
REF_27(bool) -> REF_26.isDev
TMP_37(bool) = REF_27 == True
CONDITION TMP_37"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(devCount_ > 1,removeAdmin failed - cannot have less than 2 devs)

IRs:
TMP_38(bool) = devCount_ > 1
TMP_39(None) = SOLIDITY_CALL require(bool,string)(TMP_38,removeAdmin failed - cannot have less than 2 devs)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(devCount_ >= requiredDevSignatures_,removeAdmin failed - cannot have less devs than number of required dev signatures)

IRs:
TMP_40(bool) = devCount_ >= requiredDevSignatures_
TMP_41(None) = SOLIDITY_CALL require(bool,string)(TMP_40,removeAdmin failed - cannot have less devs than number of required dev signatures)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
MSFun.multiSig(msData,requiredDevSignatures_,removeAdmin) == true

IRs:
TMP_42(bool) = LIBRARY_CALL, dest:MSFun, function:MSFun.multiSig(MSFun.Data,uint256,bytes32), arguments:['msData', 'requiredDevSignatures_', 'removeAdmin'] 
TMP_43(bool) = TMP_42 == True
CONDITION TMP_43"];
7->8[label="True"];
7->23[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
MSFun.deleteProposal(msData,removeAdmin)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', 'removeAdmin'] "];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
admins_[_who].isAdmin == true

IRs:
REF_30(TeamJust.Admin) -> admins_[_who]
REF_31(bool) -> REF_30.isAdmin
TMP_45(bool) = REF_31 == True
CONDITION TMP_45"];
9->10[label="True"];
9->15[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
admins_[_who].isAdmin = false

IRs:
REF_32(TeamJust.Admin) -> admins_[_who]
REF_33(bool) -> REF_32.isAdmin
REF_33(bool) (->admins_) := False(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
adminCount_ -= 1

IRs:
adminCount_(uint256) = adminCount_ - 1"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
requiredSignatures_ > 1

IRs:
TMP_46(bool) = requiredSignatures_ > 1
CONDITION TMP_46"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
requiredSignatures_ -= 1

IRs:
requiredSignatures_(uint256) = requiredSignatures_ - 1"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
admins_[_who].isDev == true

IRs:
REF_34(TeamJust.Admin) -> admins_[_who]
REF_35(bool) -> REF_34.isDev
TMP_47(bool) = REF_35 == True
CONDITION TMP_47"];
16->17[label="True"];
16->22[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admins_[_who].isDev = false

IRs:
REF_36(TeamJust.Admin) -> admins_[_who]
REF_37(bool) -> REF_36.isDev
REF_37(bool) (->admins_) := False(bool)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
devCount_ -= 1

IRs:
devCount_(uint256) = devCount_ - 1"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
requiredDevSignatures_ > 1

IRs:
TMP_48(bool) = requiredDevSignatures_ > 1
CONDITION TMP_48"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
requiredDevSignatures_ -= 1

IRs:
requiredDevSignatures_(uint256) = requiredDevSignatures_ - 1"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, TeamJust.onlyDevs()()"];
24->1;
}
// Function: 199.sol-TeamJust-requiredDevSignatures()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(requiredDevSignatures_)

IRs:
RETURN requiredDevSignatures_"];
}
// Function: 199.sol-TeamJust-requiredSignatures()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(requiredSignatures_)

IRs:
RETURN requiredSignatures_"];
}
// Function: 199.sol-TeamJust-setup(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(address(Jekyll_Island_Inc) == address(0))

IRs:
TMP_21 = CONVERT Jekyll_Island_Inc to address
TMP_22 = CONVERT 0 to address
TMP_23(bool) = TMP_21 == TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Jekyll_Island_Inc = JIincForwarderInterface(_addr)

IRs:
TMP_25 = CONVERT _addr to JIincForwarderInterface
Jekyll_Island_Inc(JIincForwarderInterface) := TMP_25(JIincForwarderInterface)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, TeamJust.onlyDevs()()"];
3->1;
}
// Function: 199.sol-TeamJust-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
Jekyll_Island_Inc = JIincForwarderInterface(0x0)

IRs:
TMP_66 = CONVERT 0 to JIincForwarderInterface
Jekyll_Island_Inc(JIincForwarderInterface) := TMP_66(JIincForwarderInterface)"];
}
}
