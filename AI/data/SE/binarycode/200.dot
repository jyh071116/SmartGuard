digraph G {
// Function: 200.sol-JIincForwarderInterface-cancelMigration()
digraph{
}
// Function: 200.sol-JIincForwarderInterface-deposit()
digraph{
}
// Function: 200.sol-JIincForwarderInterface-finishMigration()
digraph{
}
// Function: 200.sol-JIincForwarderInterface-setup(address)
digraph{
}
// Function: 200.sol-JIincForwarderInterface-startMigration(address)
digraph{
}
// Function: 200.sol-JIincForwarderInterface-status()
digraph{
}
// Function: 200.sol-MSFun-checkCount(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_231(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_231(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(self.proposal_[_whatProposal].count)

IRs:
REF_280(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_281(MSFun.ProposalData) -> REF_280[_whatProposal]
REF_282(uint256) -> REF_281.count
RETURN REF_282"];
3[label="Node Type: RETURN 3

EXPRESSION:
signature_count

IRs:
RETURN signature_count"];
}
// Function: 200.sol-MSFun-checkMsgData(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_230(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_230(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(self.proposal_[_whatProposal].msgData)

IRs:
REF_277(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_278(MSFun.ProposalData) -> REF_277[_whatProposal]
REF_279(bytes32) -> REF_278.msgData
RETURN REF_279"];
3[label="Node Type: RETURN 3

EXPRESSION:
msg_data

IRs:
RETURN msg_data"];
}
// Function: 200.sol-MSFun-checkSigner(MSFun.Data,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_signer > 0,MSFun checkSigner failed - 0 not allowed)

IRs:
TMP_232(bool) = _signer > 0
TMP_233(None) = SOLIDITY_CALL require(bool,string)(TMP_232,MSFun checkSigner failed - 0 not allowed)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_234(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_234(bytes32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(self.proposal_[_whatProposal].log[_signer - 1])

IRs:
REF_283(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_284(MSFun.ProposalData) -> REF_283[_whatProposal]
REF_285(mapping(uint256 => address)) -> REF_284.log
TMP_235(uint256) = _signer - 1
REF_286(address) -> REF_285[TMP_235]
RETURN REF_286"];
4[label="Node Type: RETURN 4

EXPRESSION:
signer

IRs:
RETURN signer"];
}
// Function: 200.sol-MSFun-deleteProposal(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_225(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_225(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < self.proposal_[_whatProposal].count

IRs:
REF_259(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_260(MSFun.ProposalData) -> REF_259[_whatProposal]
REF_261(uint256) -> REF_260.count
TMP_226(bool) = i < REF_261
CONDITION TMP_226"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_whichAdmin = self.proposal_[_whatProposal].log[i]

IRs:
REF_262(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_263(MSFun.ProposalData) -> REF_262[_whatProposal]
REF_264(mapping(uint256 => address)) -> REF_263.log
REF_265(address) -> REF_264[i]
_whichAdmin(address) := REF_265(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete self.proposal_[_whatProposal].admin[_whichAdmin]

IRs:
REF_266(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_267(MSFun.ProposalData) -> REF_266[_whatProposal]
REF_268(mapping(address => bool)) -> REF_267.admin
REF_269(bool) -> REF_268[_whichAdmin]
REF_268 = delete REF_269 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
delete self.proposal_[_whatProposal].log[i]

IRs:
REF_270(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_271(MSFun.ProposalData) -> REF_270[_whatProposal]
REF_272(mapping(uint256 => address)) -> REF_271.log
REF_273(address) -> REF_272[i]
REF_272 = delete REF_273 "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_227(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete self.proposal_[_whatProposal]

IRs:
REF_274(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_275(MSFun.ProposalData) -> REF_274[_whatProposal]
REF_274 = delete REF_275 "];
}
// Function: 200.sol-MSFun-multiSig(MSFun.Data,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_218(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_218(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_currentCount = self.proposal_[_whatProposal].count

IRs:
REF_218(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_219(MSFun.ProposalData) -> REF_218[_whatProposal]
REF_220(uint256) -> REF_219.count
_currentCount(uint256) := REF_220(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_whichAdmin = msg.sender

IRs:
_whichAdmin(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_msgData = keccak256()(msg.data)

IRs:
TMP_219(bytes32) = SOLIDITY_CALL keccak256()(msg.data)
_msgData(bytes32) := TMP_219(bytes32)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_currentCount == 0

IRs:
TMP_220(bool) = _currentCount == 0
CONDITION TMP_220"];
5->6[label="True"];
5->13[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
self.proposal_[_whatProposal].msgData = _msgData

IRs:
REF_221(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_222(MSFun.ProposalData) -> REF_221[_whatProposal]
REF_223(bytes32) -> REF_222.msgData
REF_223(bytes32) (->self) := _msgData(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] = true

IRs:
REF_224(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_225(MSFun.ProposalData) -> REF_224[_whatProposal]
REF_226(mapping(address => bool)) -> REF_225.admin
REF_227(bool) -> REF_226[_whichAdmin]
REF_227(bool) (->self) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin

IRs:
REF_228(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_229(MSFun.ProposalData) -> REF_228[_whatProposal]
REF_230(mapping(uint256 => address)) -> REF_229.log
REF_231(address) -> REF_230[_currentCount]
REF_231(address) (->self) := _whichAdmin(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
self.proposal_[_whatProposal].count += 1

IRs:
REF_232(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_233(MSFun.ProposalData) -> REF_232[_whatProposal]
REF_234(uint256) -> REF_233.count
REF_234(-> self) = REF_234 + 1"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
self.proposal_[_whatProposal].count == _requiredSignatures

IRs:
REF_235(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_236(MSFun.ProposalData) -> REF_235[_whatProposal]
REF_237(uint256) -> REF_236.count
TMP_221(bool) = REF_237 == _requiredSignatures
CONDITION TMP_221"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
(true)

IRs:
RETURN True"];
12[label="Node Type: END_IF 12
"];
12->23;
13[label="Node Type: IF 13

EXPRESSION:
self.proposal_[_whatProposal].msgData == _msgData

IRs:
REF_238(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_239(MSFun.ProposalData) -> REF_238[_whatProposal]
REF_240(bytes32) -> REF_239.msgData
TMP_222(bool) = REF_240 == _msgData
CONDITION TMP_222"];
13->14[label="True"];
13->22[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] == false

IRs:
REF_241(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_242(MSFun.ProposalData) -> REF_241[_whatProposal]
REF_243(mapping(address => bool)) -> REF_242.admin
REF_244(bool) -> REF_243[_whichAdmin]
TMP_223(bool) = REF_244 == False
CONDITION TMP_223"];
14->15[label="True"];
14->18[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] = true

IRs:
REF_245(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_246(MSFun.ProposalData) -> REF_245[_whatProposal]
REF_247(mapping(address => bool)) -> REF_246.admin
REF_248(bool) -> REF_247[_whichAdmin]
REF_248(bool) (->self) := True(bool)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin

IRs:
REF_249(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_250(MSFun.ProposalData) -> REF_249[_whatProposal]
REF_251(mapping(uint256 => address)) -> REF_250.log
REF_252(address) -> REF_251[_currentCount]
REF_252(address) (->self) := _whichAdmin(address)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
self.proposal_[_whatProposal].count += 1

IRs:
REF_253(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_254(MSFun.ProposalData) -> REF_253[_whatProposal]
REF_255(uint256) -> REF_254.count
REF_255(-> self) = REF_255 + 1"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
self.proposal_[_whatProposal].count == _requiredSignatures

IRs:
REF_256(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_257(MSFun.ProposalData) -> REF_256[_whatProposal]
REF_258(uint256) -> REF_257.count
TMP_224(bool) = REF_258 == _requiredSignatures
CONDITION TMP_224"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: RETURN 20

EXPRESSION:
(true)

IRs:
RETURN True"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
}
// Function: 200.sol-MSFun-whatProposal(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keccak256()(abi.encodePacked(_whatFunction,this)))

IRs:
TMP_228(bytes) = SOLIDITY_CALL abi.encodePacked()(_whatFunction,this)
TMP_229(bytes32) = SOLIDITY_CALL keccak256()(TMP_228)
RETURN TMP_229"];
}
// Function: 200.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_150 = CONVERT _input to bytes
_temp(bytes) := TMP_150(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_199 -> LENGTH _temp
_length(uint256) := REF_199(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_151(bool) = _length <= 32
TMP_152(bool) = _length > 0
TMP_153(bool) = TMP_151 && TMP_152
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_200(None) -> _temp[0]
TMP_155(bool) = REF_200 != 32
TMP_156(uint256) = _length - 1
REF_201(None) -> _temp[TMP_156]
TMP_157(bool) = REF_201 != 32
TMP_158(bool) = TMP_155 && TMP_157
TMP_159(None) = SOLIDITY_CALL require(bool,string)(TMP_158,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_202(None) -> _temp[0]
TMP_160(bool) = REF_202 == 48
CONDITION TMP_160"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_203(None) -> _temp[1]
TMP_161(bool) = REF_203 != 120
TMP_162(None) = SOLIDITY_CALL require(bool,string)(TMP_161,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_204(None) -> _temp[1]
TMP_163(bool) = REF_204 != 88
TMP_164(None) = SOLIDITY_CALL require(bool,string)(TMP_163,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_165(bool) = i < _length
CONDITION TMP_165"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_205(None) -> _temp[i]
TMP_166(bool) = REF_205 > 64
REF_206(None) -> _temp[i]
TMP_167(bool) = REF_206 < 91
TMP_168(bool) = TMP_166 && TMP_167
CONDITION TMP_168"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_207(bytes1) -> _temp[i]
REF_208(None) -> _temp[i]
TMP_169 = CONVERT REF_208 to uint256
TMP_170(uint256) = TMP_169 + 32
TMP_171 = CONVERT TMP_170 to bytes1
REF_207(bytes1) (->_temp) := TMP_171(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_172(bool) = _hasNonNumber == False
CONDITION TMP_172"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_209(None) -> _temp[i]
TMP_173(bool) = REF_209 == 32
REF_210(None) -> _temp[i]
TMP_174(bool) = REF_210 > 96
REF_211(None) -> _temp[i]
TMP_175(bool) = REF_211 < 123
TMP_176(bool) = TMP_174 && TMP_175
TMP_177(bool) = TMP_173 || TMP_176
REF_212(None) -> _temp[i]
TMP_178(bool) = REF_212 > 47
REF_213(None) -> _temp[i]
TMP_179(bool) = REF_213 < 58
TMP_180(bool) = TMP_178 && TMP_179
TMP_181(bool) = TMP_177 || TMP_180
TMP_182(None) = SOLIDITY_CALL require(bool,string)(TMP_181,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_214(None) -> _temp[i]
TMP_183(bool) = REF_214 == 32
CONDITION TMP_183"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_184(uint256) = i + 1
REF_215(None) -> _temp[TMP_184]
TMP_185(bool) = REF_215 != 32
TMP_186(None) = SOLIDITY_CALL require(bool,string)(TMP_185,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_187(bool) = _hasNonNumber == False
REF_216(None) -> _temp[i]
TMP_188(bool) = REF_216 < 48
REF_217(None) -> _temp[i]
TMP_189(bool) = REF_217 > 57
TMP_190(bool) = TMP_188 || TMP_189
TMP_191(bool) = TMP_187 && TMP_190
CONDITION TMP_191"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_192(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_193(bool) = _hasNonNumber == True
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 200.sol-PlayerBook-addGame(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(gameIDs_[_gameAddress] == 0,derp, that games already been registered)

IRs:
REF_168(uint256) -> gameIDs_[_gameAddress]
TMP_125(bool) = REF_168 == 0
TMP_126(None) = SOLIDITY_CALL require(bool,string)(TMP_125,derp, that games already been registered)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
multiSigDev(addGame) == true

IRs:
TMP_127(bool) = INTERNAL_CALL, PlayerBook.multiSigDev(bytes32)(addGame)
TMP_128(bool) = TMP_127 == True
CONDITION TMP_128"];
2->3[label="True"];
2->13[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
deleteProposal(addGame)

IRs:
INTERNAL_CALL, PlayerBook.deleteProposal(bytes32)(addGame)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gID_ ++

IRs:
TMP_130(uint256) := gID_(uint256)
gID_(uint256) = gID_ + 1"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_name = _gameNameStr.nameFilter()

IRs:
TMP_131(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_gameNameStr'] 
_name(bytes32) := TMP_131(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
gameIDs_[_gameAddress] = gID_

IRs:
REF_170(uint256) -> gameIDs_[_gameAddress]
REF_170(uint256) (->gameIDs_) := gID_(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
gameNames_[_gameAddress] = _name

IRs:
REF_171(bytes32) -> gameNames_[_gameAddress]
REF_171(bytes32) (->gameNames_) := _name(bytes32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
games_[gID_] = PlayerBookReceiverInterface(_gameAddress)

IRs:
REF_172(PlayerBookReceiverInterface) -> games_[gID_]
TMP_132 = CONVERT _gameAddress to PlayerBookReceiverInterface
REF_172(PlayerBookReceiverInterface) (->games_) := TMP_132(PlayerBookReceiverInterface)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
games_[gID_].receivePlayerInfo(1,plyr_[1].addr,plyr_[1].name,0)

IRs:
REF_173(PlayerBookReceiverInterface) -> games_[gID_]
REF_175(PlayerBook.Player) -> plyr_[1]
REF_176(address) -> REF_175.addr
REF_177(PlayerBook.Player) -> plyr_[1]
REF_178(bytes32) -> REF_177.name
HIGH_LEVEL_CALL, dest:REF_173(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['1', 'REF_176', 'REF_178', '0']  "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
games_[gID_].receivePlayerInfo(2,plyr_[2].addr,plyr_[2].name,0)

IRs:
REF_179(PlayerBookReceiverInterface) -> games_[gID_]
REF_181(PlayerBook.Player) -> plyr_[2]
REF_182(address) -> REF_181.addr
REF_183(PlayerBook.Player) -> plyr_[2]
REF_184(bytes32) -> REF_183.name
HIGH_LEVEL_CALL, dest:REF_179(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['2', 'REF_182', 'REF_184', '0']  "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
games_[gID_].receivePlayerInfo(3,plyr_[3].addr,plyr_[3].name,0)

IRs:
REF_185(PlayerBookReceiverInterface) -> games_[gID_]
REF_187(PlayerBook.Player) -> plyr_[3]
REF_188(address) -> REF_187.addr
REF_189(PlayerBook.Player) -> plyr_[3]
REF_190(bytes32) -> REF_189.name
HIGH_LEVEL_CALL, dest:REF_185(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['3', 'REF_188', 'REF_190', '0']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
games_[gID_].receivePlayerInfo(4,plyr_[4].addr,plyr_[4].name,0)

IRs:
REF_191(PlayerBookReceiverInterface) -> games_[gID_]
REF_193(PlayerBook.Player) -> plyr_[4]
REF_194(address) -> REF_193.addr
REF_195(PlayerBook.Player) -> plyr_[4]
REF_196(bytes32) -> REF_195.name
HIGH_LEVEL_CALL, dest:REF_191(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['4', 'REF_194', 'REF_196', '0']  "];
12->13;
13[label="Node Type: END_IF 13
"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
14->1;
}
// Function: 200.sol-PlayerBook-addMeToAllGames()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_98(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_98(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_64(bool) = _pID != 0
TMP_65(None) = SOLIDITY_CALL require(bool,string)(TMP_64,hey there buddy, you dont even have an account)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_laff = plyr_[_pID].laff

IRs:
REF_99(PlayerBook.Player) -> plyr_[_pID]
REF_100(uint256) -> REF_99.laff
_laff(uint256) := REF_100(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_101(PlayerBook.Player) -> plyr_[_pID]
REF_102(uint256) -> REF_101.names
_totalNames(uint256) := REF_102(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_name = plyr_[_pID].name

IRs:
REF_103(PlayerBook.Player) -> plyr_[_pID]
REF_104(bytes32) -> REF_103.name
_name(bytes32) := REF_104(bytes32)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i <= gID_

IRs:
TMP_66(bool) = i <= gID_
CONDITION TMP_66"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_laff)

IRs:
REF_105(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_105(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_laff']  "];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_totalNames > 1

IRs:
TMP_68(bool) = _totalNames > 1
CONDITION TMP_68"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
ii <= _totalNames

IRs:
TMP_69(bool) = ii <= _totalNames
CONDITION TMP_69"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_107(PlayerBookReceiverInterface) -> games_[i]
REF_109(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_110(bytes32) -> REF_109[ii]
HIGH_LEVEL_CALL, dest:REF_107(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_110']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ii ++

IRs:
TMP_71(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_72(uint256) := i(uint256)
i(uint256) = i + 1"];
20->10;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
21->1;
}
// Function: 200.sol-PlayerBook-addMeToGame(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_gameID <= gID_,silly player, that game doesn't exist yet)

IRs:
TMP_54(bool) = _gameID <= gID_
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,silly player, that game doesn't exist yet)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_85(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_85(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_56(bool) = _pID != 0
TMP_57(None) = SOLIDITY_CALL require(bool,string)(TMP_56,hey there buddy, you dont even have an account)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_86(PlayerBook.Player) -> plyr_[_pID]
REF_87(uint256) -> REF_86.names
_totalNames(uint256) := REF_87(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[_gameID].receivePlayerInfo(_pID,_addr,plyr_[_pID].name,plyr_[_pID].laff)

IRs:
REF_88(PlayerBookReceiverInterface) -> games_[_gameID]
REF_90(PlayerBook.Player) -> plyr_[_pID]
REF_91(bytes32) -> REF_90.name
REF_92(PlayerBook.Player) -> plyr_[_pID]
REF_93(uint256) -> REF_92.laff
HIGH_LEVEL_CALL, dest:REF_88(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', 'REF_91', 'REF_93']  "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_totalNames > 1

IRs:
TMP_59(bool) = _totalNames > 1
CONDITION TMP_59"];
7->10[label="True"];
7->14[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->14;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
ii <= _totalNames

IRs:
TMP_60(bool) = ii <= _totalNames
CONDITION TMP_60"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
games_[_gameID].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_94(PlayerBookReceiverInterface) -> games_[_gameID]
REF_96(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_97(bytes32) -> REF_96[ii]
HIGH_LEVEL_CALL, dest:REF_94(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_97']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ii ++

IRs:
TMP_62(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
13->11;
14[label="Node Type: END_IF 14
"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
15->1;
}
// Function: 200.sol-PlayerBook-checkData(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
(MSFun.checkMsgData(msData,_whatFunction),MSFun.checkCount(msData,_whatFunction))

IRs:
TMP_5(bytes32) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkMsgData(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] 
TMP_6(uint256) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkCount(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] 
RETURN TMP_5,TMP_6"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
2->1;
}
// Function: 200.sol-PlayerBook-checkIfNameValid(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameStr.nameFilter()

IRs:
TMP_19(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameStr'] 
_name(bytes32) := TMP_19(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxName_[_name] == 0

IRs:
REF_64(uint256) -> pIDxName_[_name]
TMP_20(bool) = REF_64 == 0
CONDITION TMP_20"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 200.sol-PlayerBook-checkSignersByAddress(bytes32,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
(MSFun.checkSigner(msData,_whatFunction,_signerA),MSFun.checkSigner(msData,_whatFunction,_signerB),MSFun.checkSigner(msData,_whatFunction,_signerC))

IRs:
TMP_8(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerA'] 
TMP_9(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerB'] 
TMP_10(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerC'] 
RETURN TMP_8,TMP_9,TMP_10"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
2->1;
}
// Function: 200.sol-PlayerBook-checkSignersByName(bytes32,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
(TeamJust.adminName(MSFun.checkSigner(msData,_whatFunction,_signerA)),TeamJust.adminName(MSFun.checkSigner(msData,_whatFunction,_signerB)),TeamJust.adminName(MSFun.checkSigner(msData,_whatFunction,_signerC)))

IRs:
TMP_12(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerA'] 
TMP_13(bytes32) = HIGH_LEVEL_CALL, dest:TeamJust(TeamJustInterface), function:adminName, arguments:['TMP_12']  
TMP_14(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerB'] 
TMP_15(bytes32) = HIGH_LEVEL_CALL, dest:TeamJust(TeamJustInterface), function:adminName, arguments:['TMP_14']  
TMP_16(address) = LIBRARY_CALL, dest:MSFun, function:MSFun.checkSigner(MSFun.Data,bytes32,uint256), arguments:['msData', '_whatFunction', '_signerC'] 
TMP_17(bytes32) = HIGH_LEVEL_CALL, dest:TeamJust(TeamJustInterface), function:adminName, arguments:['TMP_16']  
RETURN TMP_13,TMP_15,TMP_17"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
2->1;
}
// Function: 200.sol-PlayerBook-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
plyr_[1].addr = 0x8Ba912954aedfeAF2978a1864e486fFbE4D5940f

IRs:
REF_15(PlayerBook.Player) -> plyr_[1]
REF_16(address) -> REF_15.addr
REF_16(address) (->plyr_) := 797320161905883423736956246217931866277076636687(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
plyr_[1].name = justo

IRs:
REF_17(PlayerBook.Player) -> plyr_[1]
REF_18(bytes32) -> REF_17.name
REF_18(bytes32) (->plyr_) := justo(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[1].names = 1

IRs:
REF_19(PlayerBook.Player) -> plyr_[1]
REF_20(uint256) -> REF_19.names
REF_20(uint256) (->plyr_) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pIDxAddr_[0x8Ba912954aedfeAF2978a1864e486fFbE4D5940f] = 1

IRs:
REF_21(uint256) -> pIDxAddr_[797320161905883423736956246217931866277076636687]
REF_21(uint256) (->pIDxAddr_) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[justo] = 1

IRs:
REF_22(uint256) -> pIDxName_[justo]
REF_22(uint256) (->pIDxName_) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyrNames_[1][justo] = true

IRs:
REF_23(mapping(bytes32 => bool)) -> plyrNames_[1]
REF_24(bool) -> REF_23[justo]
REF_24(bool) (->plyrNames_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNameList_[1][1] = justo

IRs:
REF_25(mapping(uint256 => bytes32)) -> plyrNameList_[1]
REF_26(bytes32) -> REF_25[1]
REF_26(bytes32) (->plyrNameList_) := justo(string)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[2].addr = 0x8Ba912954aedfeAF2978a1864e486fFbE4D5940f

IRs:
REF_27(PlayerBook.Player) -> plyr_[2]
REF_28(address) -> REF_27.addr
REF_28(address) (->plyr_) := 797320161905883423736956246217931866277076636687(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[2].name = mantso

IRs:
REF_29(PlayerBook.Player) -> plyr_[2]
REF_30(bytes32) -> REF_29.name
REF_30(bytes32) (->plyr_) := mantso(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[2].names = 1

IRs:
REF_31(PlayerBook.Player) -> plyr_[2]
REF_32(uint256) -> REF_31.names
REF_32(uint256) (->plyr_) := 1(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
pIDxAddr_[0x8Ba912954aedfeAF2978a1864e486fFbE4D5940f] = 2

IRs:
REF_33(uint256) -> pIDxAddr_[797320161905883423736956246217931866277076636687]
REF_33(uint256) (->pIDxAddr_) := 2(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
pIDxName_[mantso] = 2

IRs:
REF_34(uint256) -> pIDxName_[mantso]
REF_34(uint256) (->pIDxName_) := 2(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
plyrNames_[2][mantso] = true

IRs:
REF_35(mapping(bytes32 => bool)) -> plyrNames_[2]
REF_36(bool) -> REF_35[mantso]
REF_36(bool) (->plyrNames_) := True(bool)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyrNameList_[2][1] = mantso

IRs:
REF_37(mapping(uint256 => bytes32)) -> plyrNameList_[2]
REF_38(bytes32) -> REF_37[1]
REF_38(bytes32) (->plyrNameList_) := mantso(string)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[3].addr = 0x8Ba912954aedfeAF2978a1864e486fFbE4D5940f

IRs:
REF_39(PlayerBook.Player) -> plyr_[3]
REF_40(address) -> REF_39.addr
REF_40(address) (->plyr_) := 797320161905883423736956246217931866277076636687(address)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[3].name = sumpunk

IRs:
REF_41(PlayerBook.Player) -> plyr_[3]
REF_42(bytes32) -> REF_41.name
REF_42(bytes32) (->plyr_) := sumpunk(string)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
plyr_[3].names = 1

IRs:
REF_43(PlayerBook.Player) -> plyr_[3]
REF_44(uint256) -> REF_43.names
REF_44(uint256) (->plyr_) := 1(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
pIDxAddr_[0x8Ba912954aedfeAF2978a1864e486fFbE4D5940f] = 3

IRs:
REF_45(uint256) -> pIDxAddr_[797320161905883423736956246217931866277076636687]
REF_45(uint256) (->pIDxAddr_) := 3(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
pIDxName_[sumpunk] = 3

IRs:
REF_46(uint256) -> pIDxName_[sumpunk]
REF_46(uint256) (->pIDxName_) := 3(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
plyrNames_[3][sumpunk] = true

IRs:
REF_47(mapping(bytes32 => bool)) -> plyrNames_[3]
REF_48(bool) -> REF_47[sumpunk]
REF_48(bool) (->plyrNames_) := True(bool)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
plyrNameList_[3][1] = sumpunk

IRs:
REF_49(mapping(uint256 => bytes32)) -> plyrNameList_[3]
REF_50(bytes32) -> REF_49[1]
REF_50(bytes32) (->plyrNameList_) := sumpunk(string)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
plyr_[4].addr = 0x8Ba912954aedfeAF2978a1864e486fFbE4D5940f

IRs:
REF_51(PlayerBook.Player) -> plyr_[4]
REF_52(address) -> REF_51.addr
REF_52(address) (->plyr_) := 797320161905883423736956246217931866277076636687(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
plyr_[4].name = inventor

IRs:
REF_53(PlayerBook.Player) -> plyr_[4]
REF_54(bytes32) -> REF_53.name
REF_54(bytes32) (->plyr_) := inventor(string)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
plyr_[4].names = 1

IRs:
REF_55(PlayerBook.Player) -> plyr_[4]
REF_56(uint256) -> REF_55.names
REF_56(uint256) (->plyr_) := 1(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
pIDxAddr_[0x8Ba912954aedfeAF2978a1864e486fFbE4D5940f] = 4

IRs:
REF_57(uint256) -> pIDxAddr_[797320161905883423736956246217931866277076636687]
REF_57(uint256) (->pIDxAddr_) := 4(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
pIDxName_[inventor] = 4

IRs:
REF_58(uint256) -> pIDxName_[inventor]
REF_58(uint256) (->pIDxName_) := 4(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
plyrNames_[4][inventor] = true

IRs:
REF_59(mapping(bytes32 => bool)) -> plyrNames_[4]
REF_60(bool) -> REF_59[inventor]
REF_60(bool) (->plyrNames_) := True(bool)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyrNameList_[4][1] = inventor

IRs:
REF_61(mapping(uint256 => bytes32)) -> plyrNameList_[4]
REF_62(bytes32) -> REF_61[1]
REF_62(bytes32) (->plyrNameList_) := inventor(string)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
pID_ = 4

IRs:
pID_(uint256) := 4(uint256)"];
}
// Function: 200.sol-PlayerBook-deleteAnyProposal(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
MSFun.deleteProposal(msData,_whatFunction)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
2->1;
}
// Function: 200.sol-PlayerBook-deleteProposal(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
MSFun.deleteProposal(msData,_whatFunction)

IRs:
LIBRARY_CALL, dest:MSFun, function:MSFun.deleteProposal(MSFun.Data,bytes32), arguments:['msData', '_whatFunction'] "];
}
// Function: 200.sol-PlayerBook-determinePID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxAddr_[_addr] == 0

IRs:
REF_140(uint256) -> pIDxAddr_[_addr]
TMP_91(bool) = REF_140 == 0
CONDITION TMP_91"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pID_ ++

IRs:
TMP_92(uint256) := pID_(uint256)
pID_(uint256) = pID_ + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = pID_

IRs:
REF_141(uint256) -> pIDxAddr_[_addr]
REF_141(uint256) (->pIDxAddr_) := pID_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[pID_].addr = _addr

IRs:
REF_142(PlayerBook.Player) -> plyr_[pID_]
REF_143(address) -> REF_142.addr
REF_143(address) (->plyr_) := _addr(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true)

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 200.sol-PlayerBook-getNameFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(registrationFee_)

IRs:
RETURN registrationFee_"];
}
// Function: 200.sol-PlayerBook-getPlayerAddr(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].addr)

IRs:
REF_149(PlayerBook.Player) -> plyr_[_pID]
REF_150(address) -> REF_149.addr
RETURN REF_150"];
}
// Function: 200.sol-PlayerBook-getPlayerID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
determinePID(_addr)

IRs:
TMP_93(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(pIDxAddr_[_addr])

IRs:
REF_144(uint256) -> pIDxAddr_[_addr]
RETURN REF_144"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
3->1;
}
// Function: 200.sol-PlayerBook-getPlayerLAff(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].laff)

IRs:
REF_147(PlayerBook.Player) -> plyr_[_pID]
REF_148(uint256) -> REF_147.laff
RETURN REF_148"];
}
// Function: 200.sol-PlayerBook-getPlayerName(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].name)

IRs:
REF_145(PlayerBook.Player) -> plyr_[_pID]
REF_146(bytes32) -> REF_145.name
RETURN REF_146"];
}
// Function: 200.sol-PlayerBook-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_143(bool) = _codeLength == 0
TMP_144(None) = SOLIDITY_CALL require(bool,string)(TMP_143,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 200.sol-PlayerBook-isRegisteredGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameIDs_[msg.sender] != 0)

IRs:
REF_198(uint256) -> gameIDs_[msg.sender]
TMP_148(bool) = REF_198 != 0
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 200.sol-PlayerBook-multiSigDev(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(MSFun.multiSig(msData,TeamJust.requiredDevSignatures(),_whatFunction))

IRs:
TMP_0(uint256) = HIGH_LEVEL_CALL, dest:TeamJust(TeamJustInterface), function:requiredDevSignatures, arguments:[]  
TMP_1(bool) = LIBRARY_CALL, dest:MSFun, function:MSFun.multiSig(MSFun.Data,uint256,bytes32), arguments:['msData', 'TMP_0', '_whatFunction'] 
RETURN TMP_1"];
}
// Function: 200.sol-PlayerBook-onlyDevs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(TeamJust.isDev(msg.sender) == true,msg sender is not a dev)

IRs:
TMP_145(bool) = HIGH_LEVEL_CALL, dest:TeamJust(TeamJustInterface), function:isDev, arguments:['msg.sender']  
TMP_146(bool) = TMP_145 == True
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,msg sender is not a dev)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 200.sol-PlayerBook-registerNameCore(uint256,address,uint256,bytes32,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxName_[_name] != 0

IRs:
REF_117(uint256) -> pIDxName_[_name]
TMP_78(bool) = REF_117 != 0
CONDITION TMP_78"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,sorry that names already taken)

IRs:
REF_118(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_119(bool) -> REF_118[_name]
TMP_79(bool) = REF_119 == True
TMP_80(None) = SOLIDITY_CALL require(bool,string)(TMP_79,sorry that names already taken)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_120(PlayerBook.Player) -> plyr_[_pID]
REF_121(bytes32) -> REF_120.name
REF_121(bytes32) (->plyr_) := _name(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_122(uint256) -> pIDxName_[_name]
REF_122(uint256) (->pIDxName_) := _pID(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_123(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_124(bool) -> REF_123[_name]
TMP_81(bool) = REF_124 == False
CONDITION TMP_81"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_125(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_126(bool) -> REF_125[_name]
REF_126(bool) (->plyrNames_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].names ++

IRs:
REF_127(PlayerBook.Player) -> plyr_[_pID]
REF_128(uint256) -> REF_127.names
TMP_82(uint256) := REF_128(uint256)
REF_128(-> plyr_) = REF_128 + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyrNameList_[_pID][plyr_[_pID].names] = _name

IRs:
REF_129(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_130(PlayerBook.Player) -> plyr_[_pID]
REF_131(uint256) -> REF_130.names
REF_132(bytes32) -> REF_129[REF_131]
REF_132(bytes32) (->plyrNameList_) := _name(bytes32)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reward.send(address(this).balance)

IRs:
TMP_83 = CONVERT this to address
TMP_84(uint256) = SOLIDITY_CALL balance(address)(TMP_83)
TMP_85 = SEND dest:reward value:TMP_84"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_all == true

IRs:
TMP_86(bool) = _all == True
CONDITION TMP_86"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i <= gID_

IRs:
TMP_87(bool) = i <= gID_
CONDITION TMP_87"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_affID)

IRs:
REF_134(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_134(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_affID']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_89(uint256) := i(uint256)
i(uint256) = i + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,msg.value,now)

IRs:
REF_136(PlayerBook.Player) -> plyr_[_affID]
REF_137(address) -> REF_136.addr
REF_138(PlayerBook.Player) -> plyr_[_affID]
REF_139(bytes32) -> REF_138.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_137,REF_139,msg.value,now)"];
}
// Function: 200.sol-PlayerBook-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_21(bool) = msg.value >= registrationFee_
TMP_22(None) = SOLIDITY_CALL require(bool,string)(TMP_21,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_23(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_23(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_24(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_24(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_66(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_66(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID

IRs:
TMP_25(bool) = _affCode != 0
REF_67(PlayerBook.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
TMP_26(bool) = _affCode != REF_68
TMP_27(bool) = TMP_25 && TMP_26
TMP_28(bool) = _affCode != _pID
TMP_29(bool) = TMP_27 && TMP_28
CONDITION TMP_29"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_69(PlayerBook.Player) -> plyr_[_pID]
REF_70(uint256) -> REF_69.laff
REF_70(uint256) (->plyr_) := _affCode(uint256)"];
7->11;
8[label="Node Type: IF 8

EXPRESSION:
_affCode == _pID

IRs:
TMP_30(bool) = _affCode == _pID
CONDITION TMP_30"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_affCode = 0

IRs:
_affCode(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
registerNameCore(_pID,_addr,_affCode,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affCode,_name,_isNewPlayer,_all)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
13->1;
}
// Function: 200.sol-PlayerBook-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_95(bool) = msg.value >= registrationFee_
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_97(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_97(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_151(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_151(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_affID = _affCode

IRs:
_affID(uint256) := _affCode(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID

IRs:
TMP_98(bool) = _affID != 0
REF_152(PlayerBook.Player) -> plyr_[_pID]
REF_153(uint256) -> REF_152.laff
TMP_99(bool) = _affID != REF_153
TMP_100(bool) = TMP_98 && TMP_99
TMP_101(bool) = _affID != _pID
TMP_102(bool) = TMP_100 && TMP_101
CONDITION TMP_102"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_154(PlayerBook.Player) -> plyr_[_pID]
REF_155(uint256) -> REF_154.laff
REF_155(uint256) (->plyr_) := _affID(uint256)"];
6->10;
7[label="Node Type: IF 7

EXPRESSION:
_affID == _pID

IRs:
TMP_103(bool) = _affID == _pID
CONDITION TMP_103"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 200.sol-PlayerBook-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_33(bool) = msg.value >= registrationFee_
TMP_34(None) = SOLIDITY_CALL require(bool,string)(TMP_33,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_35(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_35(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_36(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_36(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_72(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_72(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_37 = CONVERT 0 to address
TMP_38(bool) = _affCode != TMP_37
TMP_39(bool) = _affCode != _addr
TMP_40(bool) = TMP_38 && TMP_39
CONDITION TMP_40"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_73(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_73(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_74(PlayerBook.Player) -> plyr_[_pID]
REF_75(uint256) -> REF_74.laff
TMP_41(bool) = _affID != REF_75
CONDITION TMP_41"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_76(PlayerBook.Player) -> plyr_[_pID]
REF_77(uint256) -> REF_76.laff
REF_77(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 200.sol-PlayerBook-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_106(bool) = msg.value >= registrationFee_
TMP_107(None) = SOLIDITY_CALL require(bool,string)(TMP_106,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_108(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_108(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_156(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_156(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_109 = CONVERT 0 to address
TMP_110(bool) = _affCode != TMP_109
TMP_111(bool) = _affCode != _addr
TMP_112(bool) = TMP_110 && TMP_111
CONDITION TMP_112"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_157(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_157(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_158(PlayerBook.Player) -> plyr_[_pID]
REF_159(uint256) -> REF_158.laff
TMP_113(bool) = _affID != REF_159
CONDITION TMP_113"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_160(PlayerBook.Player) -> plyr_[_pID]
REF_161(uint256) -> REF_160.laff
REF_161(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 200.sol-PlayerBook-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_44(bool) = msg.value >= registrationFee_
TMP_45(None) = SOLIDITY_CALL require(bool,string)(TMP_44,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_46(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_46(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_47(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_47(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_79(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_79(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_48(bool) = _affCode != 
TMP_49(bool) = _affCode != _name
TMP_50(bool) = TMP_48 && TMP_49
CONDITION TMP_50"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_80(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_80(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_81(PlayerBook.Player) -> plyr_[_pID]
REF_82(uint256) -> REF_81.laff
TMP_51(bool) = _affID != REF_82
CONDITION TMP_51"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_83(PlayerBook.Player) -> plyr_[_pID]
REF_84(uint256) -> REF_83.laff
REF_84(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 200.sol-PlayerBook-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_116(bool) = msg.value >= registrationFee_
TMP_117(None) = SOLIDITY_CALL require(bool,string)(TMP_116,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_118(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_118(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_162(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_162(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_119(bool) = _affCode != 
TMP_120(bool) = _affCode != _name
TMP_121(bool) = TMP_119 && TMP_120
CONDITION TMP_121"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_163(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_163(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_164(PlayerBook.Player) -> plyr_[_pID]
REF_165(uint256) -> REF_164.laff
TMP_122(bool) = _affID != REF_165
CONDITION TMP_122"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_166(PlayerBook.Player) -> plyr_[_pID]
REF_167(uint256) -> REF_166.laff
REF_167(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 200.sol-PlayerBook-setRegistrationFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
multiSigDev(setRegistrationFee) == true

IRs:
TMP_138(bool) = INTERNAL_CALL, PlayerBook.multiSigDev(bytes32)(setRegistrationFee)
TMP_139(bool) = TMP_138 == True
CONDITION TMP_139"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
deleteProposal(setRegistrationFee)

IRs:
INTERNAL_CALL, PlayerBook.deleteProposal(bytes32)(setRegistrationFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
registrationFee_ = _fee

IRs:
registrationFee_(uint256) := _fee(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
5->1;
}
// Function: 200.sol-PlayerBook-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
TeamJust = TeamJustInterface(0xc314e8f2150cb9075ff0744234739af891df929d)

IRs:
TMP_142 = CONVERT 1113719507641268131236475176984311816471460156061 to TeamJustInterface
TeamJust(TeamJustInterface) := TMP_142(TeamJustInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
reward = 0x8Ba912954aedfeAF2978a1864e486fFbE4D5940f

IRs:
reward(address) := 797320161905883423736956246217931866277076636687(address)"];
}
// Function: 200.sol-PlayerBook-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
registrationFee_ = 10000000000000000

IRs:
registrationFee_(uint256) := 10000000000000000(uint256)"];
}
// Function: 200.sol-PlayerBook-useMyOldName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_74(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_74(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_112(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_112(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,umm... thats not a name you own)

IRs:
REF_113(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_114(bool) -> REF_113[_name]
TMP_75(bool) = REF_114 == True
TMP_76(None) = SOLIDITY_CALL require(bool,string)(TMP_75,umm... thats not a name you own)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_115(PlayerBook.Player) -> plyr_[_pID]
REF_116(bytes32) -> REF_115.name
REF_116(bytes32) (->plyr_) := _name(bytes32)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
5->1;
}
// Function: 200.sol-PlayerBookReceiverInterface-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
}
// Function: 200.sol-PlayerBookReceiverInterface-receivePlayerNameList(uint256,bytes32)
digraph{
}
// Function: 200.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_203(uint256) = a + b
c(uint256) := TMP_203(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_204(bool) = c >= a
TMP_205(None) = SOLIDITY_CALL require(bool,string)(TMP_204,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 200.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_195(bool) = a == 0
CONDITION TMP_195"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_196(uint256) = a * b
c(uint256) := TMP_196(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_197(uint256) = c / a
TMP_198(bool) = TMP_197 == b
TMP_199(None) = SOLIDITY_CALL require(bool,string)(TMP_198,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 200.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_213(bool) = x == 0
CONDITION TMP_213"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_214(bool) = y == 0
CONDITION TMP_214"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_215(bool) = i < y
CONDITION TMP_215"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_216(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_216(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_217(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 200.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_212(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_212"];
}
// Function: 200.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_206(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_207(uint256) = TMP_206 / 2
z(uint256) := TMP_207(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_208(bool) = z < y
CONDITION TMP_208"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_209(uint256) = x / z
TMP_210(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_209,z)
TMP_211(uint256) = TMP_210 / 2
z(uint256) := TMP_211(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 200.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_200(bool) = b <= a
TMP_201(None) = SOLIDITY_CALL require(bool,string)(TMP_200,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_202(uint256) = a - b
RETURN TMP_202"];
}
// Function: 200.sol-TeamJustInterface-adminCount()
digraph{
}
// Function: 200.sol-TeamJustInterface-adminName(address)
digraph{
}
// Function: 200.sol-TeamJustInterface-devCount()
digraph{
}
// Function: 200.sol-TeamJustInterface-isAdmin(address)
digraph{
}
// Function: 200.sol-TeamJustInterface-isDev(address)
digraph{
}
// Function: 200.sol-TeamJustInterface-requiredDevSignatures()
digraph{
}
// Function: 200.sol-TeamJustInterface-requiredSignatures()
digraph{
}
}
