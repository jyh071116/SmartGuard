digraph G {
// Function: 227.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_111 = CONVERT _input to bytes
_temp(bytes) := TMP_111(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_110 -> LENGTH _temp
_length(uint256) := REF_110(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_length <= 32 && _length > 0)

IRs:
TMP_112(bool) = _length <= 32
TMP_113(bool) = _length > 0
TMP_114(bool) = TMP_112 && TMP_113
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20)

IRs:
REF_111(None) -> _temp[0]
TMP_116(bool) = REF_111 != 32
TMP_117(uint256) = _length - 1
REF_112(None) -> _temp[TMP_117]
TMP_118(bool) = REF_112 != 32
TMP_119(bool) = TMP_116 && TMP_118
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_113(None) -> _temp[0]
TMP_121(bool) = REF_113 == 48
CONDITION TMP_121"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_temp[1] != 0x78)

IRs:
REF_114(None) -> _temp[1]
TMP_122(bool) = REF_114 != 120
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(_temp[1] != 0x58)

IRs:
REF_115(None) -> _temp[1]
TMP_124(bool) = REF_115 != 88
TMP_125(None) = SOLIDITY_CALL require(bool)(TMP_124)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_126(bool) = i < _length
CONDITION TMP_126"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_116(None) -> _temp[i]
TMP_127(bool) = REF_116 > 64
REF_117(None) -> _temp[i]
TMP_128(bool) = REF_117 < 91
TMP_129(bool) = TMP_127 && TMP_128
CONDITION TMP_129"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_118(bytes1) -> _temp[i]
REF_119(None) -> _temp[i]
TMP_130 = CONVERT REF_119 to uint256
TMP_131(uint256) = TMP_130 + 32
TMP_132 = CONVERT TMP_131 to bytes1
REF_118(bytes1) (->_temp) := TMP_132(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_133(bool) = _hasNonNumber == False
CONDITION TMP_133"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a))

IRs:
REF_120(None) -> _temp[i]
TMP_134(bool) = REF_120 == 32
REF_121(None) -> _temp[i]
TMP_135(bool) = REF_121 > 96
REF_122(None) -> _temp[i]
TMP_136(bool) = REF_122 < 123
TMP_137(bool) = TMP_135 && TMP_136
TMP_138(bool) = TMP_134 || TMP_137
REF_123(None) -> _temp[i]
TMP_139(bool) = REF_123 > 47
REF_124(None) -> _temp[i]
TMP_140(bool) = REF_124 < 58
TMP_141(bool) = TMP_139 && TMP_140
TMP_142(bool) = TMP_138 || TMP_141
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_125(None) -> _temp[i]
TMP_144(bool) = REF_125 == 32
CONDITION TMP_144"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool)(_temp[i + 1] != 0x20)

IRs:
TMP_145(uint256) = i + 1
REF_126(None) -> _temp[TMP_145]
TMP_146(bool) = REF_126 != 32
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_148(bool) = _hasNonNumber == False
REF_127(None) -> _temp[i]
TMP_149(bool) = REF_127 < 48
REF_128(None) -> _temp[i]
TMP_150(bool) = REF_128 > 57
TMP_151(bool) = TMP_149 || TMP_150
TMP_152(bool) = TMP_148 && TMP_151
CONDITION TMP_152"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_153(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool)(_hasNonNumber == true)

IRs:
TMP_154(bool) = _hasNonNumber == True
TMP_155(None) = SOLIDITY_CALL require(bool)(TMP_154)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 227.sol-PlayerBook-addGame(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameIDs_[_gameAddress] == 0)

IRs:
REF_104(uint256) -> gameIDs_[_gameAddress]
TMP_96(bool) = REF_104 == 0
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gID_ ++

IRs:
TMP_98(uint256) := gID_(uint256)
gID_(uint256) = gID_ + 1"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_name = _gameNameStr.nameFilter()

IRs:
TMP_99(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_gameNameStr'] 
_name(bytes32) := TMP_99(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameIDs_[_gameAddress] = gID_

IRs:
REF_106(uint256) -> gameIDs_[_gameAddress]
REF_106(uint256) (->gameIDs_) := gID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gameNames_[_gameAddress] = _name

IRs:
REF_107(bytes32) -> gameNames_[_gameAddress]
REF_107(bytes32) (->gameNames_) := _name(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[gID_] = PlayerBookReceiverInterface(_gameAddress)

IRs:
REF_108(PlayerBookReceiverInterface) -> games_[gID_]
TMP_100 = CONVERT _gameAddress to PlayerBookReceiverInterface
REF_108(PlayerBookReceiverInterface) (->games_) := TMP_100(PlayerBookReceiverInterface)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, PlayerBook.onlyAdmin()()"];
7->1;
}
// Function: 227.sol-PlayerBook-addMeToGame(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_gameID <= gID_)

IRs:
TMP_35(bool) = _gameID <= gID_
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_34(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_34(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_pID != 0)

IRs:
TMP_37(bool) = _pID != 0
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_35(PlayerBook.Player) -> plyr_[_pID]
REF_36(uint256) -> REF_35.names
_totalNames(uint256) := REF_36(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[_gameID].receivePlayerInfo(_pID,_addr,plyr_[_pID].name,plyr_[_pID].laff)

IRs:
REF_37(PlayerBookReceiverInterface) -> games_[_gameID]
REF_39(PlayerBook.Player) -> plyr_[_pID]
REF_40(bytes32) -> REF_39.name
REF_41(PlayerBook.Player) -> plyr_[_pID]
REF_42(uint256) -> REF_41.laff
HIGH_LEVEL_CALL, dest:REF_37(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', 'REF_40', 'REF_42']  "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_totalNames > 1

IRs:
TMP_40(bool) = _totalNames > 1
CONDITION TMP_40"];
7->10[label="True"];
7->14[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->14;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
ii <= _totalNames

IRs:
TMP_41(bool) = ii <= _totalNames
CONDITION TMP_41"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
games_[_gameID].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_43(PlayerBookReceiverInterface) -> games_[_gameID]
REF_45(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_46(bytes32) -> REF_45[ii]
HIGH_LEVEL_CALL, dest:REF_43(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_46']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ii ++

IRs:
TMP_43(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
13->11;
14[label="Node Type: END_IF 14
"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
15->1;
}
// Function: 227.sol-PlayerBook-checkIfNameValid(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameStr.nameFilter()

IRs:
TMP_0(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameStr'] 
_name(bytes32) := TMP_0(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxName_[_name] == 0

IRs:
REF_13(uint256) -> pIDxName_[_name]
TMP_1(bool) = REF_13 == 0
CONDITION TMP_1"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 227.sol-PlayerBook-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
plyr_[1].addr = 0x7e474fe5Cfb720804860215f407111183cbc2f85

IRs:
REF_0(PlayerBook.Player) -> plyr_[1]
REF_1(address) -> REF_0.addr
REF_1(address) (->plyr_) := 720923150104251132904119094008145287487250247557(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
plyr_[1].name = kenny

IRs:
REF_2(PlayerBook.Player) -> plyr_[1]
REF_3(bytes32) -> REF_2.name
REF_3(bytes32) (->plyr_) := kenny(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[1].names = 1

IRs:
REF_4(PlayerBook.Player) -> plyr_[1]
REF_5(uint256) -> REF_4.names
REF_5(uint256) (->plyr_) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pIDxAddr_[0x7e474fe5Cfb720804860215f407111183cbc2f85] = 1

IRs:
REF_6(uint256) -> pIDxAddr_[720923150104251132904119094008145287487250247557]
REF_6(uint256) (->pIDxAddr_) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[kenny] = 1

IRs:
REF_7(uint256) -> pIDxName_[kenny]
REF_7(uint256) (->pIDxName_) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyrNames_[1][kenny] = true

IRs:
REF_8(mapping(bytes32 => bool)) -> plyrNames_[1]
REF_9(bool) -> REF_8[kenny]
REF_9(bool) (->plyrNames_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNameList_[1][1] = kenny

IRs:
REF_10(mapping(uint256 => bytes32)) -> plyrNameList_[1]
REF_11(bytes32) -> REF_10[1]
REF_11(bytes32) (->plyrNameList_) := kenny(string)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
pID_ = 1

IRs:
pID_(uint256) := 1(uint256)"];
}
// Function: 227.sol-PlayerBook-determinePID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxAddr_[_addr] == 0

IRs:
REF_76(uint256) -> pIDxAddr_[_addr]
TMP_62(bool) = REF_76 == 0
CONDITION TMP_62"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pID_ ++

IRs:
TMP_63(uint256) := pID_(uint256)
pID_(uint256) = pID_ + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = pID_

IRs:
REF_77(uint256) -> pIDxAddr_[_addr]
REF_77(uint256) (->pIDxAddr_) := pID_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[pID_].addr = _addr

IRs:
REF_78(PlayerBook.Player) -> plyr_[pID_]
REF_79(address) -> REF_78.addr
REF_79(address) (->plyr_) := _addr(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true)

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 227.sol-PlayerBook-getNameFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(registrationFee_)

IRs:
RETURN registrationFee_"];
}
// Function: 227.sol-PlayerBook-getPlayerAddr(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].addr)

IRs:
REF_85(PlayerBook.Player) -> plyr_[_pID]
REF_86(address) -> REF_85.addr
RETURN REF_86"];
}
// Function: 227.sol-PlayerBook-getPlayerID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
determinePID(_addr)

IRs:
TMP_64(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(pIDxAddr_[_addr])

IRs:
REF_80(uint256) -> pIDxAddr_[_addr]
RETURN REF_80"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
3->1;
}
// Function: 227.sol-PlayerBook-getPlayerLAff(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].laff)

IRs:
REF_83(PlayerBook.Player) -> plyr_[_pID]
REF_84(uint256) -> REF_83.laff
RETURN REF_84"];
}
// Function: 227.sol-PlayerBook-getPlayerName(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].name)

IRs:
REF_81(PlayerBook.Player) -> plyr_[_pID]
REF_82(bytes32) -> REF_81.name
RETURN REF_82"];
}
// Function: 227.sol-PlayerBook-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_codeLength == 0)

IRs:
TMP_103(bool) = _codeLength == 0
TMP_104(None) = SOLIDITY_CALL require(bool)(TMP_103)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_addr == tx.origin)

IRs:
TMP_105(bool) = _addr == tx.origin
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 227.sol-PlayerBook-isRegisteredGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameIDs_[msg.sender] != 0)

IRs:
REF_109(uint256) -> gameIDs_[msg.sender]
TMP_109(bool) = REF_109 != 0
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 227.sol-PlayerBook-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_107(bool) = msg.sender == admin
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 227.sol-PlayerBook-registerNameCore(uint256,address,uint256,bytes32,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxName_[_name] != 0

IRs:
REF_53(uint256) -> pIDxName_[_name]
TMP_49(bool) = REF_53 != 0
CONDITION TMP_49"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(plyrNames_[_pID][_name] == true)

IRs:
REF_54(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_55(bool) -> REF_54[_name]
TMP_50(bool) = REF_55 == True
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_56(PlayerBook.Player) -> plyr_[_pID]
REF_57(bytes32) -> REF_56.name
REF_57(bytes32) (->plyr_) := _name(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_58(uint256) -> pIDxName_[_name]
REF_58(uint256) (->pIDxName_) := _pID(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_59(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_60(bool) -> REF_59[_name]
TMP_52(bool) = REF_60 == False
CONDITION TMP_52"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_61(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_62(bool) -> REF_61[_name]
REF_62(bool) (->plyrNames_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].names ++

IRs:
REF_63(PlayerBook.Player) -> plyr_[_pID]
REF_64(uint256) -> REF_63.names
TMP_53(uint256) := REF_64(uint256)
REF_64(-> plyr_) = REF_64 + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyrNameList_[_pID][plyr_[_pID].names] = _name

IRs:
REF_65(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_66(PlayerBook.Player) -> plyr_[_pID]
REF_67(uint256) -> REF_66.names
REF_68(bytes32) -> REF_65[REF_67]
REF_68(bytes32) (->plyrNameList_) := _name(bytes32)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
admin.transfer(address(this).balance)

IRs:
TMP_54 = CONVERT this to address
TMP_55(uint256) = SOLIDITY_CALL balance(address)(TMP_54)
Transfer dest:admin value:TMP_55"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_all == true

IRs:
TMP_57(bool) = _all == True
CONDITION TMP_57"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i <= gID_

IRs:
TMP_58(bool) = i <= gID_
CONDITION TMP_58"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_affID)

IRs:
REF_70(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_70(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_affID']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_60(uint256) := i(uint256)
i(uint256) = i + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,msg.value,now)

IRs:
REF_72(PlayerBook.Player) -> plyr_[_affID]
REF_73(address) -> REF_72.addr
REF_74(PlayerBook.Player) -> plyr_[_affID]
REF_75(bytes32) -> REF_74.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_73,REF_75,msg.value,now)"];
}
// Function: 227.sol-PlayerBook-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= registrationFee_)

IRs:
TMP_2(bool) = msg.value >= registrationFee_
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_4(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_4(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_5(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_5(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_15(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_15(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID

IRs:
TMP_6(bool) = _affCode != 0
REF_16(PlayerBook.Player) -> plyr_[_pID]
REF_17(uint256) -> REF_16.laff
TMP_7(bool) = _affCode != REF_17
TMP_8(bool) = TMP_6 && TMP_7
TMP_9(bool) = _affCode != _pID
TMP_10(bool) = TMP_8 && TMP_9
CONDITION TMP_10"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_18(PlayerBook.Player) -> plyr_[_pID]
REF_19(uint256) -> REF_18.laff
REF_19(uint256) (->plyr_) := _affCode(uint256)"];
7->11;
8[label="Node Type: IF 8

EXPRESSION:
_affCode == _pID

IRs:
TMP_11(bool) = _affCode == _pID
CONDITION TMP_11"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_affCode = 0

IRs:
_affCode(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
registerNameCore(_pID,_addr,_affCode,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affCode,_name,_isNewPlayer,_all)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
13->1;
}
// Function: 227.sol-PlayerBook-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= registrationFee_)

IRs:
TMP_66(bool) = msg.value >= registrationFee_
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_68(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_68(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_87(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_87(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_affID = _affCode

IRs:
_affID(uint256) := _affCode(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID

IRs:
TMP_69(bool) = _affID != 0
REF_88(PlayerBook.Player) -> plyr_[_pID]
REF_89(uint256) -> REF_88.laff
TMP_70(bool) = _affID != REF_89
TMP_71(bool) = TMP_69 && TMP_70
TMP_72(bool) = _affID != _pID
TMP_73(bool) = TMP_71 && TMP_72
CONDITION TMP_73"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_90(PlayerBook.Player) -> plyr_[_pID]
REF_91(uint256) -> REF_90.laff
REF_91(uint256) (->plyr_) := _affID(uint256)"];
6->10;
7[label="Node Type: IF 7

EXPRESSION:
_affID == _pID

IRs:
TMP_74(bool) = _affID == _pID
CONDITION TMP_74"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 227.sol-PlayerBook-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= registrationFee_)

IRs:
TMP_14(bool) = msg.value >= registrationFee_
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_16(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_16(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_17(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_17(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_21(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_21(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_18 = CONVERT 0 to address
TMP_19(bool) = _affCode != TMP_18
TMP_20(bool) = _affCode != _addr
TMP_21(bool) = TMP_19 && TMP_20
CONDITION TMP_21"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_22(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_22(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_23(PlayerBook.Player) -> plyr_[_pID]
REF_24(uint256) -> REF_23.laff
TMP_22(bool) = _affID != REF_24
CONDITION TMP_22"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_25(PlayerBook.Player) -> plyr_[_pID]
REF_26(uint256) -> REF_25.laff
REF_26(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 227.sol-PlayerBook-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= registrationFee_)

IRs:
TMP_77(bool) = msg.value >= registrationFee_
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_79(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_79(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_92(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_92(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_80 = CONVERT 0 to address
TMP_81(bool) = _affCode != TMP_80
TMP_82(bool) = _affCode != _addr
TMP_83(bool) = TMP_81 && TMP_82
CONDITION TMP_83"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_93(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_93(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_94(PlayerBook.Player) -> plyr_[_pID]
REF_95(uint256) -> REF_94.laff
TMP_84(bool) = _affID != REF_95
CONDITION TMP_84"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_96(PlayerBook.Player) -> plyr_[_pID]
REF_97(uint256) -> REF_96.laff
REF_97(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 227.sol-PlayerBook-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= registrationFee_)

IRs:
TMP_25(bool) = msg.value >= registrationFee_
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_27(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_27(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_28(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_28(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_28(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_28(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_29(bool) = _affCode != 
TMP_30(bool) = _affCode != _name
TMP_31(bool) = TMP_29 && TMP_30
CONDITION TMP_31"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_29(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_29(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_30(PlayerBook.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_32(bool) = _affID != REF_31
CONDITION TMP_32"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_32(PlayerBook.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 227.sol-PlayerBook-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= registrationFee_)

IRs:
TMP_87(bool) = msg.value >= registrationFee_
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_89(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_89(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_98(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_98(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_90(bool) = _affCode != 
TMP_91(bool) = _affCode != _name
TMP_92(bool) = TMP_90 && TMP_91
CONDITION TMP_92"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_99(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_99(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_100(PlayerBook.Player) -> plyr_[_pID]
REF_101(uint256) -> REF_100.laff
TMP_93(bool) = _affID != REF_101
CONDITION TMP_93"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_102(PlayerBook.Player) -> plyr_[_pID]
REF_103(uint256) -> REF_102.laff
REF_103(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 227.sol-PlayerBook-setRegistrationFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
registrationFee_ = _fee

IRs:
registrationFee_(uint256) := _fee(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, PlayerBook.onlyAdmin()()"];
2->1;
}
// Function: 227.sol-PlayerBook-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
registrationFee_ = 10000000000000000

IRs:
registrationFee_(uint256) := 10000000000000000(uint256)"];
}
// Function: 227.sol-PlayerBook-useMyOldName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_45(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_45(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_48(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_48(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(plyrNames_[_pID][_name] == true)

IRs:
REF_49(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_50(bool) -> REF_49[_name]
TMP_46(bool) = REF_50 == True
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_51(PlayerBook.Player) -> plyr_[_pID]
REF_52(bytes32) -> REF_51.name
REF_52(bytes32) (->plyr_) := _name(bytes32)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
5->1;
}
// Function: 227.sol-PlayerBookReceiverInterface-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
}
// Function: 227.sol-PlayerBookReceiverInterface-receivePlayerNameList(uint256,bytes32)
digraph{
}
// Function: 227.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_164(uint256) = a + b
c(uint256) := TMP_164(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_165(bool) = c >= a
TMP_166(None) = SOLIDITY_CALL require(bool,string)(TMP_165,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 227.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_156(bool) = a == 0
CONDITION TMP_156"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_157(uint256) = a * b
c(uint256) := TMP_157(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_158(uint256) = c / a
TMP_159(bool) = TMP_158 == b
TMP_160(None) = SOLIDITY_CALL require(bool,string)(TMP_159,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 227.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_174(bool) = x == 0
CONDITION TMP_174"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_175(bool) = y == 0
CONDITION TMP_175"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_176(bool) = i < y
CONDITION TMP_176"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_177(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_177(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_178(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 227.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_173(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_173"];
}
// Function: 227.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_167(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_168(uint256) = TMP_167 / 2
z(uint256) := TMP_168(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_169(bool) = z < y
CONDITION TMP_169"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_170(uint256) = x / z
TMP_171(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_170,z)
TMP_172(uint256) = TMP_171 / 2
z(uint256) := TMP_172(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 227.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_161(bool) = b <= a
TMP_162(None) = SOLIDITY_CALL require(bool,string)(TMP_161,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_163(uint256) = a - b
RETURN TMP_163"];
}
}
