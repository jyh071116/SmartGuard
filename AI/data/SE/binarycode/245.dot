digraph G {
// Function: 245.sol-QuizQuest-End(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == riddler)

IRs:
TMP_13(bool) = msg.sender == riddler
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Answer = _answer

IRs:
Answer(string) := _answer(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isActive = false

IRs:
isActive(bool) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
msg.sender.transfer(this.balance)

IRs:
REF_9(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:msg.sender value:REF_9"];
}
// Function: 245.sol-QuizQuest-Play(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isActive && msg.value >= 500000000000000000)

IRs:
TMP_2(bool) = msg.value >= 500000000000000000
TMP_3(bool) = isActive && TMP_2
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
bytes(guess).length == 0

IRs:
TMP_5 = CONVERT guess to bytes
REF_0 -> LENGTH TMP_5
TMP_6(bool) = REF_0 == 0
CONDITION TMP_6"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
newGuess.player = msg.sender

IRs:
REF_1(address) -> newGuess.player
REF_1(address) (->newGuess) := msg.sender(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
newGuess.guess = guess

IRs:
REF_2(string) -> newGuess.guess
REF_2(string) (->newGuess) := guess(string)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
PreviousGuesses.push(newGuess)

IRs:
REF_4 -> LENGTH PreviousGuesses
TMP_8(uint256) := REF_4(uint256)
TMP_9(uint256) = TMP_8 + 1
REF_4(uint256) (->PreviousGuesses) := TMP_9(uint256)
REF_5(QuizQuest.Guess) -> PreviousGuesses[TMP_8]
REF_5(QuizQuest.Guess) (->PreviousGuesses) := newGuess(QuizQuest.Guess)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
keccak256()(guess) == answerHash

IRs:
TMP_10(bytes32) = SOLIDITY_CALL keccak256()(guess)
TMP_11(bool) = TMP_10 == answerHash
CONDITION TMP_11"];
9->10[label="True"];
9->13[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Answer = guess

IRs:
Answer(string) := guess(string)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActive = false

IRs:
isActive(bool) := False(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
msg.sender.transfer(this.balance)

IRs:
REF_7(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:msg.sender value:REF_7"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 245.sol-QuizQuest-Quiz(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
riddler == 0x0

IRs:
TMP_0(bool) = riddler == 0
CONDITION TMP_0"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
riddler = msg.sender

IRs:
riddler(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Riddle = _riddle

IRs:
Riddle(string) := _riddle(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
answerHash = keccak256()(_answer)

IRs:
TMP_1(bytes32) = SOLIDITY_CALL keccak256()(_answer)
answerHash(bytes32) := TMP_1(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isActive = true

IRs:
isActive(bool) := True(bool)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 245.sol-QuizQuest-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
}
