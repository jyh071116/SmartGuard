digraph G {
// Function: 249.sol-Crowdsale-_deliverTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.transfer(_beneficiary,_tokenAmount))

IRs:
TMP_98(bool) = HIGH_LEVEL_CALL, dest:token(Token), function:transfer, arguments:['_beneficiary', '_tokenAmount']  
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
}
// Function: 249.sol-Crowdsale-_forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(address(this).balance)

IRs:
TMP_148 = CONVERT this to address
TMP_149(uint256) = SOLIDITY_CALL balance(address)(TMP_148)
Transfer dest:wallet value:TMP_149"];
}
// Function: 249.sol-Crowdsale-_getStageIndex()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
now < round1StartTime

IRs:
TMP_44(bool) = now < round1StartTime
CONDITION TMP_44"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
now <= round1EndTime

IRs:
TMP_45(bool) = now <= round1EndTime
CONDITION TMP_45"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
1

IRs:
RETURN 1"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
now < round2StartTime

IRs:
TMP_46(bool) = now < round2StartTime
CONDITION TMP_46"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
2

IRs:
RETURN 2"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
now <= round2EndTime

IRs:
TMP_47(bool) = now <= round2EndTime
CONDITION TMP_47"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
3

IRs:
RETURN 3"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
now < round3StartTime

IRs:
TMP_48(bool) = now < round3StartTime
CONDITION TMP_48"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
4

IRs:
RETURN 4"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
now <= round3EndTime

IRs:
TMP_49(bool) = now <= round3EndTime
CONDITION TMP_49"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: RETURN 17

EXPRESSION:
5

IRs:
RETURN 5"];
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
now < round4StartTime

IRs:
TMP_50(bool) = now < round4StartTime
CONDITION TMP_50"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: RETURN 20

EXPRESSION:
6

IRs:
RETURN 6"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
now <= round4EndTime

IRs:
TMP_51(bool) = now <= round4EndTime
CONDITION TMP_51"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: RETURN 23

EXPRESSION:
7

IRs:
RETURN 7"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
8

IRs:
RETURN 8"];
}
// Function: 249.sol-Crowdsale-_getTokenAmount(uint256,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_bonus = 0

IRs:
_bonus(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_stageIndex == 1

IRs:
TMP_101(bool) = _stageIndex == 1
CONDITION TMP_101"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_bonus = round1Bonus

IRs:
_bonus(uint256) := round1Bonus(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_cap = round1Cap.sub(round1Sold)

IRs:
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['round1Cap', 'round1Sold'] 
_cap(uint256) := TMP_102(uint256)"];
5->24;
6[label="Node Type: IF 6

EXPRESSION:
_stageIndex == 2

IRs:
TMP_103(bool) = _stageIndex == 2
CONDITION TMP_103"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_cap = round2Cap.sub(round1Sold)

IRs:
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['round2Cap', 'round1Sold'] 
_cap(uint256) := TMP_104(uint256)"];
7->23;
8[label="Node Type: IF 8

EXPRESSION:
_stageIndex == 3

IRs:
TMP_105(bool) = _stageIndex == 3
CONDITION TMP_105"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_bonus = round2Bonus

IRs:
_bonus(uint256) := round2Bonus(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_cap = round1Cap.sub(round1Sold).add(round2Cap).sub(round2Sold)

IRs:
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['round1Cap', 'round1Sold'] 
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_106', 'round2Cap'] 
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_107', 'round2Sold'] 
_cap(uint256) := TMP_108(uint256)"];
10->22;
11[label="Node Type: IF 11

EXPRESSION:
_stageIndex == 4

IRs:
TMP_109(bool) = _stageIndex == 4
CONDITION TMP_109"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_cap = round1Cap.sub(round1Sold).add(round2Cap).sub(round2Sold)

IRs:
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['round1Cap', 'round1Sold'] 
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_110', 'round2Cap'] 
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_111', 'round2Sold'] 
_cap(uint256) := TMP_112(uint256)"];
12->21;
13[label="Node Type: IF 13

EXPRESSION:
_stageIndex == 5

IRs:
TMP_113(bool) = _stageIndex == 5
CONDITION TMP_113"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_bonus = round3Bonus

IRs:
_bonus(uint256) := round3Bonus(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_cap = round1Cap.sub(round1Sold).add(round2Cap).sub(round2Sold).add(round3Cap).sub(round3Sold)

IRs:
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['round1Cap', 'round1Sold'] 
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_114', 'round2Cap'] 
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_115', 'round2Sold'] 
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_116', 'round3Cap'] 
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_117', 'round3Sold'] 
_cap(uint256) := TMP_118(uint256)"];
15->20;
16[label="Node Type: IF 16

EXPRESSION:
_stageIndex == 6

IRs:
TMP_119(bool) = _stageIndex == 6
CONDITION TMP_119"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_cap = round1Cap.sub(round1Sold).add(round2Cap).sub(round2Sold).add(round3Cap).sub(round3Sold)

IRs:
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['round1Cap', 'round1Sold'] 
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_120', 'round2Cap'] 
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_121', 'round2Sold'] 
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_122', 'round3Cap'] 
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_123', 'round3Sold'] 
_cap(uint256) := TMP_124(uint256)"];
17->19;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_cap = round1Cap.sub(round1Sold).add(round2Cap).sub(round2Sold).add(round3Cap).sub(round3Sold).add(round4Cap).sub(round4Sold)

IRs:
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['round1Cap', 'round1Sold'] 
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_125', 'round2Cap'] 
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_126', 'round2Sold'] 
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_127', 'round3Cap'] 
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_128', 'round3Sold'] 
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_129', 'round4Cap'] 
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_130', 'round4Sold'] 
_cap(uint256) := TMP_131(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: NEW VARIABLE 25

EXPRESSION:
_tokenAmount = _weiAmount.mul(rate)

IRs:
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_weiAmount', 'rate'] 
_tokenAmount(uint256) := TMP_132(uint256)"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_bonus > 0

IRs:
TMP_133(bool) = _bonus > 0
CONDITION TMP_133"];
26->27[label="True"];
26->29[label="False"];
27[label="Node Type: NEW VARIABLE 27

EXPRESSION:
_bonusTokens = _tokenAmount.mul(_bonus).div(100)

IRs:
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_tokenAmount', '_bonus'] 
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_134', '100'] 
_bonusTokens(uint256) := TMP_135(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_tokenAmount = _tokenAmount.add(_bonusTokens)

IRs:
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_tokenAmount', '_bonusTokens'] 
_tokenAmount(uint256) := TMP_136(uint256)"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: IF 30

EXPRESSION:
_stageIndex < 8

IRs:
TMP_137(bool) = _stageIndex < 8
CONDITION TMP_137"];
30->31[label="True"];
30->32[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
require(bool)(_tokenAmount <= _cap)

IRs:
TMP_138(bool) = _tokenAmount <= _cap
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
31->32;
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
_tokenAmount

IRs:
RETURN _tokenAmount"];
}
// Function: 249.sol-Crowdsale-_preValidatePurchase(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_88 = CONVERT 0 to address
TMP_89(bool) = _beneficiary != TMP_88
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_weiAmount > 0)

IRs:
TMP_91(bool) = _weiAmount > 0
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(weiRaised.add(_weiAmount) <= hardCap)

IRs:
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', '_weiAmount'] 
TMP_94(bool) = TMP_93 <= hardCap
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_weiAmount >= minContribution)

IRs:
TMP_96(bool) = _weiAmount >= minContribution
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
}
// Function: 249.sol-Crowdsale-_processPurchase(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_deliverTokens(_beneficiary,_tokenAmount)

IRs:
INTERNAL_CALL, Crowdsale._deliverTokens(address,uint256)(_beneficiary,_tokenAmount)"];
}
// Function: 249.sol-Crowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
stageIndex = _getStageIndex()

IRs:
TMP_62(uint8) = INTERNAL_CALL, Crowdsale._getStageIndex()()
stageIndex(uint8) := TMP_62(uint8)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(stageIndex > 0)

IRs:
TMP_63(bool) = stageIndex > 0
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(stageIndex <= 8)

IRs:
TMP_65(bool) = stageIndex <= 8
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_preValidatePurchase(_beneficiary,weiAmount)

IRs:
INTERNAL_CALL, Crowdsale._preValidatePurchase(address,uint256)(_beneficiary,weiAmount)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tokens = _getTokenAmount(weiAmount,stageIndex)

IRs:
TMP_68(uint256) = INTERNAL_CALL, Crowdsale._getTokenAmount(uint256,uint8)(weiAmount,stageIndex)
tokens(uint256) := TMP_68(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_69(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
contributions[msg.sender] = contributions[msg.sender].add(weiAmount)

IRs:
REF_8(uint256) -> contributions[msg.sender]
REF_9(uint256) -> contributions[msg.sender]
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_9', 'weiAmount'] 
REF_8(uint256) (->contributions) := TMP_70(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
stageIndex == 1 || stageIndex == 2

IRs:
TMP_71(bool) = stageIndex == 1
TMP_72(bool) = stageIndex == 2
TMP_73(bool) = TMP_71 || TMP_72
CONDITION TMP_73"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round1Sold = round1Sold.add(tokens)

IRs:
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round1Sold', 'tokens'] 
round1Sold(uint256) := TMP_74(uint256)"];
10->18;
11[label="Node Type: IF 11

EXPRESSION:
stageIndex == 3 || stageIndex == 4

IRs:
TMP_75(bool) = stageIndex == 3
TMP_76(bool) = stageIndex == 4
TMP_77(bool) = TMP_75 || TMP_76
CONDITION TMP_77"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round2Sold = round2Sold.add(tokens)

IRs:
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round2Sold', 'tokens'] 
round2Sold(uint256) := TMP_78(uint256)"];
12->17;
13[label="Node Type: IF 13

EXPRESSION:
stageIndex == 5 || stageIndex == 6

IRs:
TMP_79(bool) = stageIndex == 5
TMP_80(bool) = stageIndex == 6
TMP_81(bool) = TMP_79 || TMP_80
CONDITION TMP_81"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
round3Sold = round3Sold.add(tokens)

IRs:
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round3Sold', 'tokens'] 
round3Sold(uint256) := TMP_82(uint256)"];
14->16;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round4Sold = round4Sold.add(tokens)

IRs:
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round4Sold', 'tokens'] 
round4Sold(uint256) := TMP_83(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_processPurchase(_beneficiary,tokens)

IRs:
INTERNAL_CALL, Crowdsale._processPurchase(address,uint256)(_beneficiary,tokens)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
weiRaised >= softCap

IRs:
TMP_86(bool) = weiRaised >= softCap
CONDITION TMP_86"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale._forwardFunds()()"];
22->23;
23[label="Node Type: END_IF 23
"];
}
// Function: 249.sol-Crowdsale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 249.sol-Crowdsale-constructor(uint256,address,address,Token)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_wallet != address(0))

IRs:
TMP_30 = CONVERT 0 to address
TMP_31(bool) = _wallet != TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_token != address(0))

IRs:
TMP_33 = CONVERT 0 to address
TMP_34(bool) = _token != TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token = _token

IRs:
token(Token) := _token(Token)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round1StartTime = startTime

IRs:
round1StartTime(uint256) := startTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round1EndTime = round1StartTime.add(604800)

IRs:
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round1StartTime', '604800'] 
round1EndTime(uint256) := TMP_36(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round2StartTime = round1EndTime.add(86400)

IRs:
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round1EndTime', '86400'] 
round2StartTime(uint256) := TMP_37(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round2EndTime = round2StartTime.add(864000)

IRs:
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round2StartTime', '864000'] 
round2EndTime(uint256) := TMP_38(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
round3StartTime = round2EndTime.add(86400)

IRs:
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round2EndTime', '86400'] 
round3StartTime(uint256) := TMP_39(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round3EndTime = round3StartTime.add(1209600)

IRs:
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round3StartTime', '1209600'] 
round3EndTime(uint256) := TMP_40(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
round4StartTime = round3EndTime.add(86400)

IRs:
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round3EndTime', '86400'] 
round4StartTime(uint256) := TMP_41(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
round4EndTime = round4StartTime.add(1814400)

IRs:
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round4StartTime', '1814400'] 
round4EndTime(uint256) := TMP_42(uint256)"];
}
// Function: 249.sol-Crowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 249.sol-Crowdsale-getStageName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
stageIndex = _getStageIndex()

IRs:
TMP_52(uint8) = INTERNAL_CALL, Crowdsale._getStageIndex()()
stageIndex(uint8) := TMP_52(uint8)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
stageIndex == 0

IRs:
TMP_53(bool) = stageIndex == 0
CONDITION TMP_53"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
Pause

IRs:
RETURN Pause"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
stageIndex == 1

IRs:
TMP_54(bool) = stageIndex == 1
CONDITION TMP_54"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
Round1

IRs:
RETURN Round1"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
stageIndex == 2

IRs:
TMP_55(bool) = stageIndex == 2
CONDITION TMP_55"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9

EXPRESSION:
Round1 end

IRs:
RETURN Round1 end"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
stageIndex == 3

IRs:
TMP_56(bool) = stageIndex == 3
CONDITION TMP_56"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
Round2

IRs:
RETURN Round2"];
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
stageIndex == 4

IRs:
TMP_57(bool) = stageIndex == 4
CONDITION TMP_57"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
Round2 end

IRs:
RETURN Round2 end"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
stageIndex == 5

IRs:
TMP_58(bool) = stageIndex == 5
CONDITION TMP_58"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: RETURN 18

EXPRESSION:
Round3

IRs:
RETURN Round3"];
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
stageIndex == 6

IRs:
TMP_59(bool) = stageIndex == 6
CONDITION TMP_59"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
Round3 end

IRs:
RETURN Round3 end"];
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
stageIndex == 7

IRs:
TMP_60(bool) = stageIndex == 7
CONDITION TMP_60"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: RETURN 24

EXPRESSION:
Round4

IRs:
RETURN Round4"];
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
stageIndex == 8

IRs:
TMP_61(bool) = stageIndex == 8
CONDITION TMP_61"];
26->27[label="True"];
26->28[label="False"];
27[label="Node Type: RETURN 27

EXPRESSION:
Round4 end

IRs:
RETURN Round4 end"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: RETURN 29

EXPRESSION:
Pause

IRs:
RETURN Pause"];
}
// Function: 249.sol-Crowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_190(bool) = msg.sender == owner
TMP_191(None) = SOLIDITY_CALL require(bool)(TMP_190)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 249.sol-Crowdsale-refund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > round4EndTime)

IRs:
TMP_140(bool) = now > round4EndTime
TMP_141(None) = SOLIDITY_CALL require(bool)(TMP_140)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(weiRaised < softCap)

IRs:
TMP_142(bool) = weiRaised < softCap
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(contributions[msg.sender] > 0)

IRs:
REF_46(uint256) -> contributions[msg.sender]
TMP_144(bool) = REF_46 > 0
TMP_145(None) = SOLIDITY_CALL require(bool)(TMP_144)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
refundAmount = contributions[msg.sender]

IRs:
REF_47(uint256) -> contributions[msg.sender]
refundAmount(uint256) := REF_47(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
contributions[msg.sender] = 0

IRs:
REF_48(uint256) -> contributions[msg.sender]
REF_48(uint256) (->contributions) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
weiRaised = weiRaised.sub(refundAmount)

IRs:
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['weiRaised', 'refundAmount'] 
weiRaised(uint256) := TMP_146(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
msg.sender.transfer(refundAmount)

IRs:
Transfer dest:msg.sender value:refundAmount"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 249.sol-Crowdsale-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_28 = CONVERT 0 to address
owner(address) := TMP_28(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 249.sol-Crowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
startTime = now

IRs:
startTime(uint256) := now(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
round1Bonus = 20

IRs:
round1Bonus(uint256) := 20(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
round2Bonus = 15

IRs:
round2Bonus(uint256) := 15(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
round3Bonus = 5

IRs:
round3Bonus(uint256) := 5(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
minContribution = 100000000000000000

IRs:
minContribution(uint256) := 100000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
round1Cap = uint256(9e8).mul(1000000000000000000)

IRs:
TMP_182 = CONVERT 900000000 to uint256
TMP_183(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_182', '1000000000000000000'] 
round1Cap(uint256) := TMP_183(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
round2Cap = uint256(12e8).mul(1000000000000000000)

IRs:
TMP_184 = CONVERT 1200000000 to uint256
TMP_185(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_184', '1000000000000000000'] 
round2Cap(uint256) := TMP_185(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
round3Cap = uint256(15e8).mul(1000000000000000000)

IRs:
TMP_186 = CONVERT 1500000000 to uint256
TMP_187(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_186', '1000000000000000000'] 
round3Cap(uint256) := TMP_187(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
round4Cap = uint256(24e8).mul(1000000000000000000)

IRs:
TMP_188 = CONVERT 2400000000 to uint256
TMP_189(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_188', '1000000000000000000'] 
round4Cap(uint256) := TMP_189(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
hardCap = 12500000000000000000000

IRs:
hardCap(uint256) := 12500000000000000000000(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
softCap = 1250000000000000000000

IRs:
softCap(uint256) := 1250000000000000000000(uint256)"];
}
// Function: 249.sol-Crowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_22 = CONVERT 0 to address
TMP_23(bool) = newOwner != TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 249.sol-Crowdsale-transferSoldTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
stageIndex = _getStageIndex()

IRs:
TMP_151(uint8) = INTERNAL_CALL, Crowdsale._getStageIndex()()
stageIndex(uint8) := TMP_151(uint8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(stageIndex > 0)

IRs:
TMP_152(bool) = stageIndex > 0
TMP_153(None) = SOLIDITY_CALL require(bool)(TMP_152)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(stageIndex <= 8)

IRs:
TMP_154(bool) = stageIndex <= 8
TMP_155(None) = SOLIDITY_CALL require(bool)(TMP_154)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
stageIndex == 1 || stageIndex == 2

IRs:
TMP_156(bool) = stageIndex == 1
TMP_157(bool) = stageIndex == 2
TMP_158(bool) = TMP_156 || TMP_157
CONDITION TMP_158"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round1Sold = round1Sold.add(_tokenAmount)

IRs:
TMP_159(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round1Sold', '_tokenAmount'] 
round1Sold(uint256) := TMP_159(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(round1Sold <= round1Cap)

IRs:
TMP_160(bool) = round1Sold <= round1Cap
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
6->19;
7[label="Node Type: IF 7

EXPRESSION:
stageIndex == 3 || stageIndex == 4

IRs:
TMP_162(bool) = stageIndex == 3
TMP_163(bool) = stageIndex == 4
TMP_164(bool) = TMP_162 || TMP_163
CONDITION TMP_164"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round2Sold = round2Sold.add(_tokenAmount)

IRs:
TMP_165(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round2Sold', '_tokenAmount'] 
round2Sold(uint256) := TMP_165(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(round2Sold <= round2Cap)

IRs:
TMP_166(bool) = round2Sold <= round2Cap
TMP_167(None) = SOLIDITY_CALL require(bool)(TMP_166)"];
9->18;
10[label="Node Type: IF 10

EXPRESSION:
stageIndex == 5 || stageIndex == 6

IRs:
TMP_168(bool) = stageIndex == 5
TMP_169(bool) = stageIndex == 6
TMP_170(bool) = TMP_168 || TMP_169
CONDITION TMP_170"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
round3Sold = round3Sold.add(_tokenAmount)

IRs:
TMP_171(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round3Sold', '_tokenAmount'] 
round3Sold(uint256) := TMP_171(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(round3Sold <= round3Cap)

IRs:
TMP_172(bool) = round3Sold <= round3Cap
TMP_173(None) = SOLIDITY_CALL require(bool)(TMP_172)"];
12->17;
13[label="Node Type: IF 13

EXPRESSION:
stageIndex == 7

IRs:
TMP_174(bool) = stageIndex == 7
CONDITION TMP_174"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
round4Sold = round4Sold.add(_tokenAmount)

IRs:
TMP_175(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['round4Sold', '_tokenAmount'] 
round4Sold(uint256) := TMP_175(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
require(bool)(round4Sold <= round4Cap)

IRs:
TMP_176(bool) = round4Sold <= round4Cap
TMP_177(None) = SOLIDITY_CALL require(bool)(TMP_176)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
ExternalTokenPurchase(_beneficiary,_beneficiary,_tokenAmount)

IRs:
Emit ExternalTokenPurchase(_beneficiary,_beneficiary,_tokenAmount)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool)(token.transfer(_beneficiary,_tokenAmount))

IRs:
TMP_179(bool) = HIGH_LEVEL_CALL, dest:token(Token), function:transfer, arguments:['_beneficiary', '_tokenAmount']  
TMP_180(None) = SOLIDITY_CALL require(bool)(TMP_179)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
true

IRs:
RETURN True"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
23->1;
}
// Function: 249.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 249.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_20(bool) = msg.sender == owner
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 249.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_18 = CONVERT 0 to address
owner(address) := TMP_18(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 249.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 249.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 249.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 249.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 249.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 249.sol-Token-transfer(address,uint256)
digraph{
}
}
