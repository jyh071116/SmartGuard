digraph G {
// Function: 37.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 37.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 37.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 37.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 37.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 37.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 37.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 37.sol-ForeignToken-balanceOf(address)
digraph{
}
// Function: 37.sol-ForeignToken-transfer(address,uint256)
digraph{
}
// Function: 37.sol-LUMA-LUMA()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
value = 100e8

IRs:
value(uint256) := 10000000000(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
distr(owner,totalDistributed)

IRs:
TMP_13(bool) = INTERNAL_CALL, LUMA.distr(address,uint256)(owner,totalDistributed)"];
}
// Function: 37.sol-LUMA-airdrop(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addresses.length <= 255)

IRs:
REF_11 -> LENGTH addresses
TMP_34(bool) = REF_11 <= 255
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(value <= totalRemaining)

IRs:
TMP_36(bool) = value <= totalRemaining
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->10;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < addresses.length

IRs:
REF_12 -> LENGTH addresses
TMP_38(bool) = i < REF_12
CONDITION TMP_38"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(value <= totalRemaining)

IRs:
TMP_39(bool) = value <= totalRemaining
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
distr(addresses[i],value)

IRs:
REF_13(address) -> addresses[i]
TMP_41(bool) = INTERNAL_CALL, LUMA.distr(address,uint256)(REF_13,value)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_42(uint256) := i(uint256)
i(uint256) = i + 1"];
9->6;
10[label="Node Type: IF 10

EXPRESSION:
totalDistributed >= totalSupply

IRs:
TMP_43(bool) = totalDistributed >= totalSupply
CONDITION TMP_43"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
distributionFinished = true

IRs:
distributionFinished(bool) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LUMA.onlyOwner()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
canDistr()

IRs:
MODIFIER_CALL, LUMA.canDistr()()"];
14->1;
}
// Function: 37.sol-LUMA-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_53(mapping(address => uint256)) -> allowed[_owner]
REF_54(uint256) -> REF_53[_spender]
RETURN REF_54"];
}
// Function: 37.sol-LUMA-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_value != 0 && allowed[msg.sender][_spender] != 0

IRs:
TMP_104(bool) = _value != 0
REF_49(mapping(address => uint256)) -> allowed[msg.sender]
REF_50(uint256) -> REF_49[_spender]
TMP_105(bool) = REF_50 != 0
TMP_106(bool) = TMP_104 && TMP_105
CONDITION TMP_106"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_51(mapping(address => uint256)) -> allowed[msg.sender]
REF_52(uint256) -> REF_51[_spender]
REF_52(uint256) (->allowed) := _value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 37.sol-LUMA-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_27(uint256) -> balances[_owner]
RETURN REF_27"];
}
// Function: 37.sol-LUMA-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_58(uint256) -> balances[msg.sender]
TMP_112(bool) = _value <= REF_58
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_59(uint256) -> balances[burner]
REF_60(uint256) -> balances[burner]
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_60', '_value'] 
REF_59(uint256) (->balances) := TMP_114(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_115(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalDistributed = totalDistributed.sub(_value)

IRs:
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalDistributed', '_value'] 
totalDistributed(uint256) := TMP_116(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LUMA.onlyOwner()()"];
7->1;
}
// Function: 37.sol-LUMA-canDistr()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! distributionFinished)

IRs:
TMP_125 = UnaryType.BANG distributionFinished 
TMP_126(None) = SOLIDITY_CALL require(bool)(TMP_125)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37.sol-LUMA-disableWhitelist(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < addresses.length

IRs:
REF_3 -> LENGTH addresses
TMP_20(bool) = i < REF_3
CONDITION TMP_20"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
blacklist[addresses[i]] = true

IRs:
REF_4(address) -> addresses[i]
REF_5(bool) -> blacklist[REF_4]
REF_5(bool) (->blacklist) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_21(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LUMA.onlyOwner()()"];
7->3;
}
// Function: 37.sol-LUMA-distr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalDistributed = totalDistributed.add(_amount)

IRs:
TMP_26(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalDistributed', '_amount'] 
totalDistributed(uint256) := TMP_26(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalRemaining = totalRemaining.sub(_amount)

IRs:
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalRemaining', '_amount'] 
totalRemaining(uint256) := TMP_27(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_8(uint256) -> balances[_to]
REF_9(uint256) -> balances[_to]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_9', '_amount'] 
REF_8(uint256) (->balances) := TMP_28(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Distr(_to,_amount)

IRs:
Emit Distr(_to,_amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_30 = CONVERT 0 to address
Emit Transfer(TMP_30,_to,_amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: IF 7

EXPRESSION:
totalDistributed >= totalSupply

IRs:
TMP_32(bool) = totalDistributed >= totalSupply
CONDITION TMP_32"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
distributionFinished = true

IRs:
distributionFinished(bool) := True(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
canDistr()

IRs:
MODIFIER_CALL, LUMA.canDistr()()"];
10->1;
}
// Function: 37.sol-LUMA-distributeAmounts(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addresses.length <= 255)

IRs:
REF_17 -> LENGTH addresses
TMP_58(bool) = REF_17 <= 255
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(addresses.length == amounts.length)

IRs:
REF_18 -> LENGTH addresses
REF_19 -> LENGTH amounts
TMP_60(bool) = REF_18 == REF_19
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < addresses.length

IRs:
REF_20 -> LENGTH addresses
TMP_62(bool) = i < REF_20
CONDITION TMP_62"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(amounts[i] <= totalRemaining)

IRs:
REF_21(uint256) -> amounts[i]
TMP_63(bool) = REF_21 <= totalRemaining
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
distr(addresses[i],amounts[i])

IRs:
REF_22(address) -> addresses[i]
REF_23(uint256) -> amounts[i]
TMP_65(bool) = INTERNAL_CALL, LUMA.distr(address,uint256)(REF_22,REF_23)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
totalDistributed >= totalSupply

IRs:
TMP_66(bool) = totalDistributed >= totalSupply
CONDITION TMP_66"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
distributionFinished = true

IRs:
distributionFinished(bool) := True(bool)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_67(uint8) := i(uint8)
i(uint8) = i + 1"];
12->6;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LUMA.onlyOwner()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
canDistr()

IRs:
MODIFIER_CALL, LUMA.canDistr()()"];
14->1;
}
// Function: 37.sol-LUMA-distribution(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addresses.length <= 255)

IRs:
REF_14 -> LENGTH addresses
TMP_46(bool) = REF_14 <= 255
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(amount <= totalRemaining)

IRs:
TMP_48(bool) = amount <= totalRemaining
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->10;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < addresses.length

IRs:
REF_15 -> LENGTH addresses
TMP_50(bool) = i < REF_15
CONDITION TMP_50"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(amount <= totalRemaining)

IRs:
TMP_51(bool) = amount <= totalRemaining
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
distr(addresses[i],amount)

IRs:
REF_16(address) -> addresses[i]
TMP_53(bool) = INTERNAL_CALL, LUMA.distr(address,uint256)(REF_16,amount)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_54(uint256) := i(uint256)
i(uint256) = i + 1"];
9->6;
10[label="Node Type: IF 10

EXPRESSION:
totalDistributed >= totalSupply

IRs:
TMP_55(bool) = totalDistributed >= totalSupply
CONDITION TMP_55"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
distributionFinished = true

IRs:
distributionFinished(bool) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LUMA.onlyOwner()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
canDistr()

IRs:
MODIFIER_CALL, LUMA.canDistr()()"];
14->1;
}
// Function: 37.sol-LUMA-enableWhitelist(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < addresses.length

IRs:
REF_0 -> LENGTH addresses
TMP_17(bool) = i < REF_0
CONDITION TMP_17"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
blacklist[addresses[i]] = false

IRs:
REF_1(address) -> addresses[i]
REF_2(bool) -> blacklist[REF_1]
REF_2(bool) (->blacklist) := False(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_18(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LUMA.onlyOwner()()"];
7->3;
}
// Function: 37.sol-LUMA-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
getTokens()

IRs:
INTERNAL_CALL, LUMA.getTokens()()"];
}
// Function: 37.sol-LUMA-finishDistribution()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
distributionFinished = true

IRs:
distributionFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
DistrFinished()

IRs:
Emit DistrFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LUMA.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canDistr()

IRs:
MODIFIER_CALL, LUMA.canDistr()()"];
5->1;
}
// Function: 37.sol-LUMA-getTokenBalance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
t = ForeignToken(tokenAddress)

IRs:
TMP_108 = CONVERT tokenAddress to ForeignToken
t(ForeignToken) := TMP_108(ForeignToken)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
bal = t.balanceOf(who)

IRs:
TMP_109(uint256) = HIGH_LEVEL_CALL, dest:t(ForeignToken), function:balanceOf, arguments:['who']  
bal(uint256) := TMP_109(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
bal

IRs:
RETURN bal"];
}
// Function: 37.sol-LUMA-getTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: IF 1

EXPRESSION:
value > totalRemaining

IRs:
TMP_71(bool) = value > totalRemaining
CONDITION TMP_71"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
value = totalRemaining

IRs:
value(uint256) := totalRemaining(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(value <= totalRemaining)

IRs:
TMP_72(bool) = value <= totalRemaining
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
investor = msg.sender

IRs:
investor(address) := msg.sender(address)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
toGive = value

IRs:
toGive(uint256) := value(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
distr(investor,toGive)

IRs:
TMP_74(bool) = INTERNAL_CALL, LUMA.distr(address,uint256)(investor,toGive)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
toGive > 0

IRs:
TMP_75(bool) = toGive > 0
CONDITION TMP_75"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
blacklist[investor] = true

IRs:
REF_24(bool) -> blacklist[investor]
REF_24(bool) (->blacklist) := True(bool)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
totalDistributed >= totalSupply

IRs:
TMP_76(bool) = totalDistributed >= totalSupply
CONDITION TMP_76"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
distributionFinished = true

IRs:
distributionFinished(bool) := True(bool)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
value = value.div(100000).mul(99999)

IRs:
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['value', '100000'] 
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_77', '99999'] 
value(uint256) := TMP_78(uint256)"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
canDistr()

IRs:
MODIFIER_CALL, LUMA.canDistr()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyWhitelist()

IRs:
MODIFIER_CALL, LUMA.onlyWhitelist()()"];
16->1;
}
// Function: 37.sol-LUMA-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_127(bool) = msg.sender == owner
TMP_128(None) = SOLIDITY_CALL require(bool)(TMP_127)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37.sol-LUMA-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length >= size + 4)

IRs:
REF_68 -> LENGTH msg.data
TMP_131(uint256) = size + 4
TMP_132(bool) = REF_68 >= TMP_131
TMP_133(None) = SOLIDITY_CALL assert(bool)(TMP_132)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37.sol-LUMA-onlyWhitelist()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(blacklist[msg.sender] == false)

IRs:
REF_67(bool) -> blacklist[msg.sender]
TMP_129(bool) = REF_67 == False
TMP_130(None) = SOLIDITY_CALL require(bool)(TMP_129)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37.sol-LUMA-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = LUMA

IRs:
name(string) := LUMA(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = LUMA

IRs:
symbol(string) := LUMA(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 8

IRs:
decimals(uint256) := 8(uint256)"];
}
// Function: 37.sol-LUMA-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 500000000e8

IRs:
totalSupply(uint256) := 50000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
totalDistributed = 50000000e8

IRs:
totalDistributed(uint256) := 5000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalRemaining = totalSupply.sub(totalDistributed)

IRs:
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', 'totalDistributed'] 
totalRemaining(uint256) := TMP_124(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
distributionFinished = false

IRs:
distributionFinished(bool) := False(bool)"];
}
// Function: 37.sol-LUMA-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_81 = CONVERT 0 to address
TMP_82(bool) = _to != TMP_81
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[msg.sender])

IRs:
REF_28(uint256) -> balances[msg.sender]
TMP_84(bool) = _amount <= REF_28
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_amount)

IRs:
REF_29(uint256) -> balances[msg.sender]
REF_30(uint256) -> balances[msg.sender]
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_30', '_amount'] 
REF_29(uint256) (->balances) := TMP_86(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_32(uint256) -> balances[_to]
REF_33(uint256) -> balances[_to]
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_33', '_amount'] 
REF_32(uint256) (->balances) := TMP_87(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_89(uint256) = 2 * 32
MODIFIER_CALL, LUMA.onlyPayloadSize(uint256)(TMP_89)"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 37.sol-LUMA-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_91 = CONVERT 0 to address
TMP_92(bool) = _to != TMP_91
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[_from])

IRs:
REF_35(uint256) -> balances[_from]
TMP_94(bool) = _amount <= REF_35
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_amount <= allowed[_from][msg.sender])

IRs:
REF_36(mapping(address => uint256)) -> allowed[_from]
REF_37(uint256) -> REF_36[msg.sender]
TMP_96(bool) = _amount <= REF_37
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_amount)

IRs:
REF_38(uint256) -> balances[_from]
REF_39(uint256) -> balances[_from]
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_39', '_amount'] 
REF_38(uint256) (->balances) := TMP_98(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount)

IRs:
REF_41(mapping(address => uint256)) -> allowed[_from]
REF_42(uint256) -> REF_41[msg.sender]
REF_43(mapping(address => uint256)) -> allowed[_from]
REF_44(uint256) -> REF_43[msg.sender]
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_44', '_amount'] 
REF_42(uint256) (->allowed) := TMP_99(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_46(uint256) -> balances[_to]
REF_47(uint256) -> balances[_to]
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_47', '_amount'] 
REF_46(uint256) (->balances) := TMP_100(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_amount)

IRs:
Emit Transfer(_from,_to,_amount)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_102(uint256) = 3 * 32
MODIFIER_CALL, LUMA.onlyPayloadSize(uint256)(TMP_102)"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 37.sol-LUMA-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_14 = CONVERT 0 to address
TMP_15(bool) = newOwner != TMP_14
CONDITION TMP_15"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LUMA.onlyOwner()()"];
4->1;
}
// Function: 37.sol-LUMA-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
etherBalance = this.balance

IRs:
REF_56(uint256) = SOLIDITY_CALL balance(address)(this)
etherBalance(uint256) := REF_56([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7ff9e42842e0>])"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(etherBalance)

IRs:
Transfer dest:owner value:etherBalance"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LUMA.onlyOwner()()"];
3->1;
}
// Function: 37.sol-LUMA-withdrawForeignTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
token = ForeignToken(_tokenContract)

IRs:
TMP_119 = CONVERT _tokenContract to ForeignToken
token(ForeignToken) := TMP_119(ForeignToken)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = token.balanceOf(address(this))

IRs:
TMP_120 = CONVERT this to address
TMP_121(uint256) = HIGH_LEVEL_CALL, dest:token(ForeignToken), function:balanceOf, arguments:['TMP_120']  
amount(uint256) := TMP_121(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
token.transfer(owner,amount)

IRs:
TMP_122(bool) = HIGH_LEVEL_CALL, dest:token(ForeignToken), function:transfer, arguments:['owner', 'amount']  
RETURN TMP_122"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, LUMA.onlyOwner()()"];
4->1;
}
// Function: 37.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 37.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 37.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 37.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 37.sol-Token-balanceOf(address)
digraph{
}
// Function: 37.sol-Token-distr(address,uint256)
digraph{
}
// Function: 37.sol-Token-totalSupply()
digraph{
}
}
