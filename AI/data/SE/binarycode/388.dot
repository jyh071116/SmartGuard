digraph G {
// Function: 388.sol-ArbitrageETHStaking-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = _newOwner != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 388.sol-ArbitrageETHStaking-buy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(msg.value >= minBuyIn,should be more the 0.0001 ether sent)

IRs:
TMP_33(bool) = msg.value >= minBuyIn
TMP_34(None) = SOLIDITY_CALL require(bool,string)(TMP_33,should be more the 0.0001 ether sent)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_etherBeforeBuyIn = getBalance().sub(msg.value)

IRs:
TMP_35(uint256) = INTERNAL_CALL, ArbitrageETHStaking.getBalance()()
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_35', 'msg.value'] 
_etherBeforeBuyIn(uint256) := TMP_36(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_etherBeforeBuyIn != 0

IRs:
TMP_37(bool) = _etherBeforeBuyIn != 0
CONDITION TMP_37"];
5->6[label="True"];
5->9[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
poolFee = msg.value.mul(stakingPrecent).div(100)

IRs:
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['msg.value', 'stakingPrecent'] 
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_38', '100'] 
poolFee(uint256) := TMP_39(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
globalIncrease = globalFactor.mul(poolFee) / _etherBeforeBuyIn

IRs:
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['globalFactor', 'poolFee'] 
TMP_41(uint256) = TMP_40 / _etherBeforeBuyIn
globalIncrease(uint256) := TMP_41(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
globalFactor = globalFactor.add(globalIncrease)

IRs:
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['globalFactor', 'globalIncrease'] 
globalFactor(uint256) := TMP_42(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balanceLedger_[_customerAddress] = ethBalanceOf(_customerAddress).add(msg.value).sub(poolFee)

IRs:
REF_5(uint256) -> balanceLedger_[_customerAddress]
TMP_43(uint256) = INTERNAL_CALL, ArbitrageETHStaking.ethBalanceOf(address)(_customerAddress)
TMP_44(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_43', 'msg.value'] 
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_44', 'poolFee'] 
REF_5(uint256) (->balanceLedger_) := TMP_45(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
personalFactorLedger_[_customerAddress] = constantFactor / globalFactor

IRs:
REF_8(uint256) -> personalFactorLedger_[_customerAddress]
TMP_46(uint256) = constantFactor / globalFactor
REF_8(uint256) (->personalFactorLedger_) := TMP_46(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onPurchase(_customerAddress,msg.value,getBalance(),poolFee,now)

IRs:
TMP_47(uint256) = INTERNAL_CALL, ArbitrageETHStaking.getBalance()()
Emit onPurchase(_customerAddress,msg.value,TMP_47,poolFee,now)"];
}
// Function: 388.sol-ArbitrageETHStaking-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 388.sol-ArbitrageETHStaking-ethBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balanceLedger_[_customerAddress].mul(personalFactorLedger_[_customerAddress]).mul(globalFactor) / constantFactor

IRs:
REF_16(uint256) -> balanceLedger_[_customerAddress]
REF_18(uint256) -> personalFactorLedger_[_customerAddress]
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_16', 'REF_18'] 
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_69', 'globalFactor'] 
TMP_71(uint256) = TMP_70 / constantFactor
RETURN TMP_71"];
}
// Function: 388.sol-ArbitrageETHStaking-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buy()

IRs:
INTERNAL_CALL, ArbitrageETHStaking.buy()()"];
}
// Function: 388.sol-ArbitrageETHStaking-getBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
address(this).balance

IRs:
TMP_67 = CONVERT this to address
TMP_68(uint256) = SOLIDITY_CALL balance(address)(TMP_67)
RETURN TMP_68"];
}
// Function: 388.sol-ArbitrageETHStaking-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_73(bool) = msg.sender == owner
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 388.sol-ArbitrageETHStaking-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_24 = CONVERT 0 to address
owner(address) := TMP_24(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 388.sol-ArbitrageETHStaking-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
constantFactor = 10e21 * 10e21

IRs:
TMP_72(uint256) = 10000000000000000000000 * 10000000000000000000000
constantFactor(uint256) := TMP_72(uint256)"];
}
// Function: 388.sol-ArbitrageETHStaking-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
minBuyIn = 1000000000000000

IRs:
minBuyIn(uint256) := 1000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
stakingPrecent = 2

IRs:
stakingPrecent(uint256) := 2(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
globalFactor = 10e21

IRs:
globalFactor(uint256) := 10000000000000000000000(uint256)"];
}
// Function: 388.sol-ArbitrageETHStaking-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 388.sol-ArbitrageETHStaking-withdraw(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_sellEth > 0,user cant spam transactions with 0 value)

IRs:
TMP_49(bool) = _sellEth > 0
TMP_50(None) = SOLIDITY_CALL require(bool,string)(TMP_49,user cant spam transactions with 0 value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_sellEth <= ethBalanceOf(_customerAddress),user cant withdraw more then he holds )

IRs:
TMP_51(uint256) = INTERNAL_CALL, ArbitrageETHStaking.ethBalanceOf(address)(_customerAddress)
TMP_52(bool) = _sellEth <= TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool,string)(TMP_52,user cant withdraw more then he holds )"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_customerAddress.transfer(_sellEth)

IRs:
Transfer dest:_customerAddress value:_sellEth"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceLedger_[_customerAddress] = ethBalanceOf(_customerAddress).sub(_sellEth)

IRs:
REF_10(uint256) -> balanceLedger_[_customerAddress]
TMP_55(uint256) = INTERNAL_CALL, ArbitrageETHStaking.ethBalanceOf(address)(_customerAddress)
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_55', '_sellEth'] 
REF_10(uint256) (->balanceLedger_) := TMP_56(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
personalFactorLedger_[_customerAddress] = constantFactor / globalFactor

IRs:
REF_12(uint256) -> personalFactorLedger_[_customerAddress]
TMP_57(uint256) = constantFactor / globalFactor
REF_12(uint256) (->personalFactorLedger_) := TMP_57(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onWithdraw(_customerAddress,_sellEth,getBalance(),now)

IRs:
TMP_58(uint256) = INTERNAL_CALL, ArbitrageETHStaking.getBalance()()
Emit onWithdraw(_customerAddress,_sellEth,TMP_58,now)"];
}
// Function: 388.sol-ArbitrageETHStaking-withdrawAll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_sellEth = ethBalanceOf(_customerAddress)

IRs:
TMP_60(uint256) = INTERNAL_CALL, ArbitrageETHStaking.ethBalanceOf(address)(_customerAddress)
_sellEth(uint256) := TMP_60(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_sellEth > 0,user cant call withdraw, when holds nothing)

IRs:
TMP_61(bool) = _sellEth > 0
TMP_62(None) = SOLIDITY_CALL require(bool,string)(TMP_61,user cant call withdraw, when holds nothing)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_customerAddress.transfer(_sellEth)

IRs:
Transfer dest:_customerAddress value:_sellEth"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceLedger_[_customerAddress] = 0

IRs:
REF_14(uint256) -> balanceLedger_[_customerAddress]
REF_14(uint256) (->balanceLedger_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
personalFactorLedger_[_customerAddress] = constantFactor / globalFactor

IRs:
REF_15(uint256) -> personalFactorLedger_[_customerAddress]
TMP_64(uint256) = constantFactor / globalFactor
REF_15(uint256) (->personalFactorLedger_) := TMP_64(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onWithdraw(_customerAddress,_sellEth,getBalance(),now)

IRs:
TMP_65(uint256) = INTERNAL_CALL, ArbitrageETHStaking.getBalance()()
Emit onWithdraw(_customerAddress,_sellEth,TMP_65,now)"];
}
// Function: 388.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = _newOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 388.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 388.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 388.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_1 = CONVERT 0 to address
owner(address) := TMP_1(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 388.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 388.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_20(uint256) = a + b
c(uint256) := TMP_20(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_21(bool) = c >= a
TMP_22(None) = SOLIDITY_CALL assert(bool)(TMP_21)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 388.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_16(uint256) = a / b
RETURN TMP_16"];
}
// Function: 388.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_11(bool) = a == 0
CONDITION TMP_11"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_12(uint256) = a * b
c(uint256) := TMP_12(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_13(uint256) = c / a
TMP_14(bool) = TMP_13 == b
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 388.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_17(bool) = b <= a
TMP_18(None) = SOLIDITY_CALL assert(bool)(TMP_17)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_19(uint256) = a - b
RETURN TMP_19"];
}
}
