digraph G {
// Function: 4.sol-BaseContract-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 4.sol-BaseContract-onlyByOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_3(bool) = msg.sender == owner
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 4.sol-BaseContract-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
TokensAreFrozen = true

IRs:
TokensAreFrozen(bool) := True(bool)"];
}
// Function: 4.sol-BaseContract-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyByOwner()

IRs:
MODIFIER_CALL, BaseContract.onlyByOwner()()"];
4->1;
}
// Function: 4.sol-ERC20Contract-allowance(address,address)
digraph{
}
// Function: 4.sol-ERC20Contract-approve(address,uint256)
digraph{
}
// Function: 4.sol-ERC20Contract-balanceOf(address)
digraph{
}
// Function: 4.sol-ERC20Contract-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 4.sol-ERC20Contract-onlyByOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_8(bool) = msg.sender == owner
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 4.sol-ERC20Contract-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
TokensAreFrozen = true

IRs:
TokensAreFrozen(bool) := True(bool)"];
}
// Function: 4.sol-ERC20Contract-transfer(address,uint256)
digraph{
}
// Function: 4.sol-ERC20Contract-transferFrom(address,address,uint256)
digraph{
}
// Function: 4.sol-ERC20Contract-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = newOwner != TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyByOwner()

IRs:
MODIFIER_CALL, BaseContract.onlyByOwner()()"];
4->1;
}
// Function: 4.sol-Freedom-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_29(mapping(address => uint256)) -> allowed[_owner]
REF_30(uint256) -> REF_29[_spender]
RETURN REF_30"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 4.sol-Freedom-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! TokensAreFrozen)

IRs:
TMP_51 = UnaryType.BANG TokensAreFrozen 
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_spender != address(0))

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = _spender != TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

IRs:
TMP_56(bool) = _value == 0
REF_25(mapping(address => uint256)) -> allowed[msg.sender]
REF_26(uint256) -> REF_25[_spender]
TMP_57(bool) = REF_26 == 0
TMP_58(bool) = TMP_56 || TMP_57
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_27(mapping(address => uint256)) -> allowed[msg.sender]
REF_28(uint256) -> REF_27[_spender]
REF_28(uint256) (->allowed) := _value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 4.sol-Freedom-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balanceOf[_owner]

IRs:
REF_24(uint256) -> balanceOf[_owner]
RETURN REF_24"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 4.sol-Freedom-burnTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! TokensAreFrozen)

IRs:
TMP_69 = UnaryType.BANG TokensAreFrozen 
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_owner] >= _value)

IRs:
REF_31(uint256) -> balanceOf[_owner]
TMP_71(bool) = REF_31 >= _value
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_owner] -= _value

IRs:
REF_32(uint256) -> balanceOf[_owner]
REF_32(-> balanceOf) = REF_32 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply -= _value

IRs:
totalSupply(uint256) = totalSupply - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
BurnTokens(_owner,_value)

IRs:
Emit BurnTokens(_owner,_value)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyByOwner()

IRs:
MODIFIER_CALL, BaseContract.onlyByOwner()()"];
6->1;
}
// Function: 4.sol-Freedom-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[msg.sender] = totalSupply

IRs:
REF_0(uint256) -> balanceOf[msg.sender]
REF_0(uint256) (->balanceOf) := totalSupply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = totalSupply

IRs:
totalSupply(uint256) := totalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = decimals

IRs:
decimals(uint8) := decimals(uint8)"];
}
// Function: 4.sol-Freedom-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 4.sol-Freedom-freezeTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(TokensAreFrozen == false)

IRs:
TMP_61(bool) = TokensAreFrozen == False
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
TokensAreFrozen = true

IRs:
TokensAreFrozen(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
FreezeTokensFrom(_owner)

IRs:
Emit FreezeTokensFrom(_owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyByOwner()

IRs:
MODIFIER_CALL, BaseContract.onlyByOwner()()"];
4->1;
}
// Function: 4.sol-Freedom-onlyByOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_81(bool) = msg.sender == owner
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 4.sol-Freedom-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= _size + 4)

IRs:
REF_34 -> LENGTH msg.data
TMP_83(uint256) = _size + 4
TMP_84(bool) = REF_34 >= TMP_83
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 4.sol-Freedom-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_UINT256 = 2 ** 256 - 1

IRs:
TMP_79(uint256) = 2 ** 256
TMP_80(uint256) = TMP_79 - 1
MAX_UINT256(uint256) := TMP_80(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
tokenName = Freedom

IRs:
tokenName(string) := Freedom(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
tokenSymbol = FREE

IRs:
tokenSymbol(string) := FREE(string)"];
}
// Function: 4.sol-Freedom-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
TokensAreFrozen = true

IRs:
TokensAreFrozen(bool) := True(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
totalSupply = 1000000000e8

IRs:
totalSupply(uint256) := 100000000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
}
// Function: 4.sol-Freedom-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! TokensAreFrozen)

IRs:
TMP_18 = UnaryType.BANG TokensAreFrozen 
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_20(bool) = _to != 0
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_22(bool) = _value > 0
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_1(uint256) -> balanceOf[msg.sender]
TMP_24(bool) = REF_1 >= _value
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(balanceOf[_to] + _value >= balanceOf[_to])

IRs:
REF_2(uint256) -> balanceOf[_to]
TMP_26(uint256) = REF_2 + _value
REF_3(uint256) -> balanceOf[_to]
TMP_27(bool) = TMP_26 >= REF_3
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender].Sub(_value)

IRs:
REF_4(uint256) -> balanceOf[msg.sender]
REF_5(uint256) -> balanceOf[msg.sender]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.Sub(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balanceOf) := TMP_29(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[_to] = balanceOf[_to].Add(_value)

IRs:
REF_7(uint256) -> balanceOf[_to]
REF_8(uint256) -> balanceOf[_to]
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.Add(uint256,uint256), arguments:['REF_8', '_value'] 
REF_7(uint256) (->balanceOf) := TMP_30(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_32(uint256) = 2 * 32
MODIFIER_CALL, Freedom.onlyPayloadSize(uint256)(TMP_32)"];
10->1;
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 4.sol-Freedom-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
allowance = allowed[_from][msg.sender]

IRs:
REF_10(mapping(address => uint256)) -> allowed[_from]
REF_11(uint256) -> REF_10[msg.sender]
allowance(uint256) := REF_11(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! TokensAreFrozen)

IRs:
TMP_34 = UnaryType.BANG TokensAreFrozen 
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_36(bool) = _to != 0
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_38(bool) = _value > 0
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(balanceOf[_from] >= _value && allowance >= _value)

IRs:
REF_12(uint256) -> balanceOf[_from]
TMP_40(bool) = REF_12 >= _value
TMP_41(bool) = allowance >= _value
TMP_42(bool) = TMP_40 && TMP_41
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] = balanceOf[_to].Add(_value)

IRs:
REF_13(uint256) -> balanceOf[_to]
REF_14(uint256) -> balanceOf[_to]
TMP_44(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.Add(uint256,uint256), arguments:['REF_14', '_value'] 
REF_13(uint256) (->balanceOf) := TMP_44(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[_from] = balanceOf[_from].Sub(_value)

IRs:
REF_16(uint256) -> balanceOf[_from]
REF_17(uint256) -> balanceOf[_from]
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.Sub(uint256,uint256), arguments:['REF_17', '_value'] 
REF_16(uint256) (->balanceOf) := TMP_45(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
allowance < MAX_UINT256

IRs:
TMP_46(bool) = allowance < MAX_UINT256
CONDITION TMP_46"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].Sub(_value)

IRs:
REF_19(mapping(address => uint256)) -> allowed[_from]
REF_20(uint256) -> REF_19[msg.sender]
REF_21(mapping(address => uint256)) -> allowed[_from]
REF_22(uint256) -> REF_21[msg.sender]
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.Sub(uint256,uint256), arguments:['REF_22', '_value'] 
REF_20(uint256) (->allowed) := TMP_47(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
true

IRs:
RETURN True"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_49(uint256) = 3 * 32
MODIFIER_CALL, Freedom.onlyPayloadSize(uint256)(TMP_49)"];
13->1;
14[label="Node Type: RETURN 14

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 4.sol-Freedom-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_15 = CONVERT 0 to address
TMP_16(bool) = newOwner != TMP_15
CONDITION TMP_16"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyByOwner()

IRs:
MODIFIER_CALL, BaseContract.onlyByOwner()()"];
4->1;
}
// Function: 4.sol-Freedom-unfreezeTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(TokensAreFrozen == true)

IRs:
TMP_65(bool) = TokensAreFrozen == True
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
TokensAreFrozen = false

IRs:
TokensAreFrozen(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
UnfreezeTokensFrom(_owner)

IRs:
Emit UnfreezeTokensFrom(_owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyByOwner()

IRs:
MODIFIER_CALL, BaseContract.onlyByOwner()()"];
4->1;
}
// Function: 4.sol-Freedom-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_75 = CONVERT this to address
TMP_76(uint256) = SOLIDITY_CALL balance(address)(TMP_75)
Transfer dest:owner value:TMP_76"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyByOwner()

IRs:
MODIFIER_CALL, BaseContract.onlyByOwner()()"];
2->1;
}
// Function: 4.sol-SafeMath-Add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_13(uint256) = a + b
c(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 4.sol-SafeMath-Div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_14(uint256) = a / b
c(uint256) := TMP_14(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 4.sol-SafeMath-Mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_10(bool) = a == 0
CONDITION TMP_10"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_11(uint256) = a * b
c(uint256) := TMP_11(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 4.sol-SafeMath-Sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a - b

IRs:
TMP_12(uint256) = a - b
RETURN TMP_12"];
}
}
