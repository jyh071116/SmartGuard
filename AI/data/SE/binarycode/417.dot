digraph G {
// Function: 417.sol-ERC20Token-balanceOf(address)
digraph{
}
// Function: 417.sol-ERC20Token-decimals()
digraph{
}
// Function: 417.sol-ERC20Token-transfer(address,uint256)
digraph{
}
// Function: 417.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 417.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,onlyOwner wrong)

IRs:
TMP_13(bool) = msg.sender == owner
TMP_14(None) = SOLIDITY_CALL require(bool,string)(TMP_13,onlyOwner wrong)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 417.sol-Ownable-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 417.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = _a + _b

IRs:
TMP_0(uint256) = _a + _b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= _a)

IRs:
TMP_1(bool) = c >= _a
TMP_2(None) = SOLIDITY_CALL assert(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 417.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_a / _b

IRs:
TMP_11(uint256) = _a / _b
RETURN TMP_11"];
}
// Function: 417.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_6(bool) = _a == 0
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = _a * _b

IRs:
TMP_7(uint256) = _a * _b
c(uint256) := TMP_7(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / _a == _b)

IRs:
TMP_8(uint256) = c / _a
TMP_9(bool) = TMP_8 == _b
TMP_10(None) = SOLIDITY_CALL assert(bool)(TMP_9)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 417.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_a >= _b)

IRs:
TMP_3(bool) = _a >= _b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_a - _b

IRs:
TMP_5(uint256) = _a - _b
RETURN TMP_5"];
}
// Function: 417.sol-WTAGameBook-addAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isHuman(_admin),addAdmin human only)

IRs:
TMP_24(bool) = INTERNAL_CALL, WTAGameBook.isHuman(address)(_admin)
TMP_25(None) = SOLIDITY_CALL require(bool,string)(TMP_24,addAdmin human only)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
id = adminId[_admin]

IRs:
REF_6(uint256) -> adminId[_admin]
id(uint256) := REF_6(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
id == 0

IRs:
TMP_26(bool) = id == 0
CONDITION TMP_26"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
adminId[_admin] = admins.length

IRs:
REF_7(uint256) -> adminId[_admin]
REF_8 -> LENGTH admins
REF_7(uint256) (->adminId) := REF_8(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
id = admins.length ++

IRs:
REF_9 -> LENGTH admins
TMP_27(uint256) := REF_9(uint256)
REF_9(-> admins) = REF_9 + 1
id(uint256) := TMP_27(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
admins[id] = _admin

IRs:
REF_10(address) -> admins[id]
REF_10(address) (->admins) := _admin(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
AdminAdded(_admin,id,msg.sender)

IRs:
Emit AdminAdded(_admin,id,msg.sender)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
validAddress(_admin)

IRs:
MODIFIER_CALL, WTAGameBook.validAddress(address)(_admin)"];
10->1;
}
// Function: 417.sol-WTAGameBook-addGame(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! isHuman(_game),addGame inhuman only)

IRs:
TMP_42(bool) = INTERNAL_CALL, WTAGameBook.isHuman(address)(_game)
TMP_43 = UnaryType.BANG TMP_42 
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,addGame inhuman only)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
id = gameId[_game]

IRs:
REF_22(uint256) -> gameId[_game]
id(uint256) := REF_22(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
id == 0

IRs:
TMP_45(bool) = id == 0
CONDITION TMP_45"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameId[_game] = games.length

IRs:
REF_23(uint256) -> gameId[_game]
REF_24 -> LENGTH games
REF_23(uint256) (->gameId) := REF_24(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
id = games.length ++

IRs:
REF_25 -> LENGTH games
TMP_46(uint256) := REF_25(uint256)
REF_25(-> games) = REF_25 + 1
id(uint256) := TMP_46(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
games[id] = _game

IRs:
REF_26(address) -> games[id]
REF_26(address) (->games) := _game(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
GameAdded(_game,id,msg.sender)

IRs:
Emit GameAdded(_game,id,msg.sender)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, WTAGameBook.onlyAdmin()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
validAddress(_game)

IRs:
MODIFIER_CALL, WTAGameBook.validAddress(address)(_game)"];
10->1;
}
// Function: 417.sol-WTAGameBook-addPlayer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isHuman(_addr),addPlayer human only)

IRs:
TMP_61(bool) = INTERNAL_CALL, WTAGameBook.isHuman(address)(_addr)
TMP_62(None) = SOLIDITY_CALL require(bool,string)(TMP_61,addPlayer human only)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)((_ref < playerNum.add(1)) && (playerId[_addr] == 0),addPlayer parameter wrong)

IRs:
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['playerNum', '1'] 
TMP_64(bool) = _ref < TMP_63
REF_39(uint256) -> playerId[_addr]
TMP_65(bool) = REF_39 == 0
TMP_66(bool) = TMP_64 && TMP_65
TMP_67(None) = SOLIDITY_CALL require(bool,string)(TMP_66,addPlayer parameter wrong)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
playerId[_addr] = playerNum.add(1)

IRs:
REF_40(uint256) -> playerId[_addr]
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['playerNum', '1'] 
REF_40(uint256) (->playerId) := TMP_68(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
player[playerNum.add(1)] = PlayerInfo({pid:playerNum.add(1),paddr:_addr,referrer:_ref})

IRs:
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['playerNum', '1'] 
REF_43(WTAGameBook.PlayerInfo) -> player[TMP_69]
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['playerNum', '1'] 
TMP_71(WTAGameBook.PlayerInfo) = new PlayerInfo(TMP_70,_addr,_ref)
REF_43(WTAGameBook.PlayerInfo) (->player) := TMP_71(WTAGameBook.PlayerInfo)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
playerNum ++

IRs:
TMP_72(uint256) := playerNum(uint256)
playerNum(uint256) = playerNum + 1"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
PlayerAdded(playerNum,_addr,_ref,msg.sender)

IRs:
Emit PlayerAdded(playerNum,_addr,_ref,msg.sender)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
playerNum

IRs:
RETURN playerNum"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyAdminOrGame()

IRs:
MODIFIER_CALL, WTAGameBook.onlyAdminOrGame()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
validAddress(_addr)

IRs:
MODIFIER_CALL, WTAGameBook.validAddress(address)(_addr)"];
9->1;
}
// Function: 417.sol-WTAGameBook-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
adminId[address(0x0)] = 0

IRs:
TMP_17 = CONVERT 0 to address
REF_0(uint256) -> adminId[TMP_17]
REF_0(uint256) (->adminId) := 0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admins.length ++

IRs:
REF_1 -> LENGTH admins
TMP_18(uint256) := REF_1(uint256)
REF_1(-> admins) = REF_1 + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
admins[0] = address(0x0)

IRs:
REF_2(address) -> admins[0]
TMP_19 = CONVERT 0 to address
REF_2(address) (->admins) := TMP_19(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameId[address(0x0)] = 0

IRs:
TMP_20 = CONVERT 0 to address
REF_3(uint256) -> gameId[TMP_20]
REF_3(uint256) (->gameId) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
games.length ++

IRs:
REF_4 -> LENGTH games
TMP_21(uint256) := REF_4(uint256)
REF_4(-> games) = REF_4 + 1"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games[0] = address(0x0)

IRs:
REF_5(address) -> games[0]
TMP_22 = CONVERT 0 to address
REF_5(address) (->games) := TMP_22(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
addAdmin(owner)

IRs:
INTERNAL_CALL, WTAGameBook.addAdmin(address)(owner)"];
}
// Function: 417.sol-WTAGameBook-emptyWrongEther()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
amount = address(this).balance

IRs:
TMP_102 = CONVERT this to address
TMP_103(uint256) = SOLIDITY_CALL balance(address)(TMP_102)
amount(uint256) := TMP_103(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(amount > 0,emptyEther need more balance)

IRs:
TMP_104(bool) = amount > 0
TMP_105(None) = SOLIDITY_CALL require(bool,string)(TMP_104,emptyEther need more balance)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.transfer(amount)

IRs:
Transfer dest:msg.sender value:amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
WrongEtherEmptied(msg.sender,amount)

IRs:
Emit WrongEtherEmptied(msg.sender,amount)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, WTAGameBook.onlyAdmin()()"];
5->1;
}
// Function: 417.sol-WTAGameBook-emptyWrongToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
wrongToken = ERC20Token(_addr)

IRs:
TMP_93 = CONVERT _addr to ERC20Token
wrongToken(ERC20Token) := TMP_93(ERC20Token)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = wrongToken.balanceOf(address(this))

IRs:
TMP_94 = CONVERT this to address
TMP_95(uint256) = HIGH_LEVEL_CALL, dest:wrongToken(ERC20Token), function:balanceOf, arguments:['TMP_94']  
amount(uint256) := TMP_95(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(amount > 0,emptyToken need more balance)

IRs:
TMP_96(bool) = amount > 0
TMP_97(None) = SOLIDITY_CALL require(bool,string)(TMP_96,emptyToken need more balance)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(wrongToken.transfer(msg.sender,amount),empty Token transfer wrong)

IRs:
TMP_98(bool) = HIGH_LEVEL_CALL, dest:wrongToken(ERC20Token), function:transfer, arguments:['msg.sender', 'amount']  
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,empty Token transfer wrong)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
WrongTokenEmptied(_addr,msg.sender,amount)

IRs:
Emit WrongTokenEmptied(_addr,msg.sender,amount)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, WTAGameBook.onlyAdmin()()"];
6->1;
}
// Function: 417.sol-WTAGameBook-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_92(None) = SOLIDITY_CALL revert()()"];
}
// Function: 417.sol-WTAGameBook-getGameAddressById(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_id < games.length && _id > 0,getGameAddressById wrong)

IRs:
REF_51 -> LENGTH games
TMP_86(bool) = _id < REF_51
TMP_87(bool) = _id > 0
TMP_88(bool) = TMP_86 && TMP_87
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,getGameAddressById wrong)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
games[_id]

IRs:
REF_52(address) -> games[_id]
RETURN REF_52"];
}
// Function: 417.sol-WTAGameBook-getGameIdByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
gameId[_addr]

IRs:
REF_50(uint256) -> gameId[_addr]
RETURN REF_50"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
validAddress(_addr)

IRs:
MODIFIER_CALL, WTAGameBook.validAddress(address)(_addr)"];
2->1;
}
// Function: 417.sol-WTAGameBook-getPlayerAddressById(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_id <= playerNum && _id > 0,getPlayerAddressById wrong)

IRs:
TMP_77(bool) = _id <= playerNum
TMP_78(bool) = _id > 0
TMP_79(bool) = TMP_77 && TMP_78
TMP_80(None) = SOLIDITY_CALL require(bool,string)(TMP_79,getPlayerAddressById wrong)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
player[_id].paddr

IRs:
REF_46(WTAGameBook.PlayerInfo) -> player[_id]
REF_47(address) -> REF_46.paddr
RETURN REF_47"];
}
// Function: 417.sol-WTAGameBook-getPlayerIdByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
playerId[_addr]

IRs:
REF_45(uint256) -> playerId[_addr]
RETURN REF_45"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
validAddress(_addr)

IRs:
MODIFIER_CALL, WTAGameBook.validAddress(address)(_addr)"];
2->1;
}
// Function: 417.sol-WTAGameBook-getPlayerRefById(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_id <= playerNum && _id > 0,getPlayerRefById wrong)

IRs:
TMP_81(bool) = _id <= playerNum
TMP_82(bool) = _id > 0
TMP_83(bool) = TMP_81 && TMP_82
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,getPlayerRefById wrong)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
player[_id].referrer

IRs:
REF_48(WTAGameBook.PlayerInfo) -> player[_id]
REF_49(uint256) -> REF_48.referrer
RETURN REF_49"];
}
// Function: 417.sol-WTAGameBook-isAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
(adminId[_addr] > 0)

IRs:
REF_53(uint256) -> adminId[_addr]
TMP_90(bool) = REF_53 > 0
RETURN TMP_90"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
validAddress(_addr)

IRs:
MODIFIER_CALL, WTAGameBook.validAddress(address)(_addr)"];
2->1;
}
// Function: 417.sol-WTAGameBook-isHuman(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(_codeLength == 0)

IRs:
TMP_16(bool) = _codeLength == 0
RETURN TMP_16"];
}
// Function: 417.sol-WTAGameBook-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(adminId[msg.sender] != 0,onlyAdmin wrong)

IRs:
REF_57(uint256) -> adminId[msg.sender]
TMP_113(bool) = REF_57 != 0
TMP_114(None) = SOLIDITY_CALL require(bool,string)(TMP_113,onlyAdmin wrong)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 417.sol-WTAGameBook-onlyAdminOrGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)((adminId[msg.sender] != 0) || (gameId[msg.sender] != 0),onlyAdminOrGame wrong)

IRs:
REF_58(uint256) -> adminId[msg.sender]
TMP_115(bool) = REF_58 != 0
REF_59(uint256) -> gameId[msg.sender]
TMP_116(bool) = REF_59 != 0
TMP_117(bool) = TMP_115 || TMP_116
TMP_118(None) = SOLIDITY_CALL require(bool,string)(TMP_117,onlyAdminOrGame wrong)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 417.sol-WTAGameBook-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,onlyOwner wrong)

IRs:
TMP_109(bool) = msg.sender == owner
TMP_110(None) = SOLIDITY_CALL require(bool,string)(TMP_109,onlyOwner wrong)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 417.sol-WTAGameBook-removeAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(adminId[_admin] != 0,removeAdmin wrong)

IRs:
REF_11(uint256) -> adminId[_admin]
TMP_31(bool) = REF_11 != 0
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,removeAdmin wrong)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
aid = adminId[_admin]

IRs:
REF_12(uint256) -> adminId[_admin]
aid(uint256) := REF_12(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
adminId[_admin] = 0

IRs:
REF_13(uint256) -> adminId[_admin]
REF_13(uint256) (->adminId) := 0(uint256)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = aid

IRs:
i(uint256) := aid(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < admins.length - 1

IRs:
REF_14 -> LENGTH admins
TMP_33(uint256) = REF_14 - 1
TMP_34(bool) = i < TMP_33
CONDITION TMP_34"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
admins[i] = admins[i + 1]

IRs:
REF_15(address) -> admins[i]
TMP_35(uint256) = i + 1
REF_16(address) -> admins[TMP_35]
REF_15(address) (->admins) := REF_16(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
adminId[admins[i]] = i

IRs:
REF_17(address) -> admins[i]
REF_18(uint256) -> adminId[REF_17]
REF_18(uint256) (->adminId) := i(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_36(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete admins[admins.length - 1]

IRs:
REF_19 -> LENGTH admins
TMP_37(uint256) = REF_19 - 1
REF_20(address) -> admins[TMP_37]
admins = delete REF_20 "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
admins.length --

IRs:
REF_21 -> LENGTH admins
TMP_38(uint256) := REF_21(uint256)
REF_21(-> admins) = REF_21 - 1"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
AdminRemoved(_admin,aid,msg.sender)

IRs:
Emit AdminRemoved(_admin,aid,msg.sender)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
validAddress(_admin)

IRs:
MODIFIER_CALL, WTAGameBook.validAddress(address)(_admin)"];
15->1;
}
// Function: 417.sol-WTAGameBook-removeGame(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(gameId[_game] != 0,removeGame wrong)

IRs:
REF_27(uint256) -> gameId[_game]
TMP_50(bool) = REF_27 != 0
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,removeGame wrong)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
gid = gameId[_game]

IRs:
REF_28(uint256) -> gameId[_game]
gid(uint256) := REF_28(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
gameId[_game] = 0

IRs:
REF_29(uint256) -> gameId[_game]
REF_29(uint256) (->gameId) := 0(uint256)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = gid

IRs:
i(uint256) := gid(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < games.length - 1

IRs:
REF_30 -> LENGTH games
TMP_52(uint256) = REF_30 - 1
TMP_53(bool) = i < TMP_52
CONDITION TMP_53"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
games[i] = games[i + 1]

IRs:
REF_31(address) -> games[i]
TMP_54(uint256) = i + 1
REF_32(address) -> games[TMP_54]
REF_31(address) (->games) := REF_32(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
gameId[games[i]] = i

IRs:
REF_33(address) -> games[i]
REF_34(uint256) -> gameId[REF_33]
REF_34(uint256) (->gameId) := i(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_55(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete games[games.length - 1]

IRs:
REF_35 -> LENGTH games
TMP_56(uint256) = REF_35 - 1
REF_36(address) -> games[TMP_56]
games = delete REF_36 "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
games.length --

IRs:
REF_37 -> LENGTH games
TMP_57(uint256) := REF_37(uint256)
REF_37(-> games) = REF_37 - 1"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
GameRemoved(_game,gid,msg.sender)

IRs:
Emit GameRemoved(_game,gid,msg.sender)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, WTAGameBook.onlyAdmin()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
validAddress(_game)

IRs:
MODIFIER_CALL, WTAGameBook.validAddress(address)(_game)"];
15->1;
}
// Function: 417.sol-WTAGameBook-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 417.sol-WTAGameBook-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = WTAGameBook V0.5

IRs:
name(string) := WTAGameBook V0.5(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
version = 0.5

IRs:
version(string) := 0.5(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
playerNum = 0

IRs:
playerNum(uint256) := 0(uint256)"];
}
// Function: 417.sol-WTAGameBook-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_addr != 0x0,validAddress wrong)

IRs:
TMP_111(bool) = _addr != 0
TMP_112(None) = SOLIDITY_CALL require(bool,string)(TMP_111,validAddress wrong)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
