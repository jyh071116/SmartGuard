digraph G {
// Function: 43.sol-Presale-close()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == fiduciary

IRs:
TMP_14(bool) = msg.sender == fiduciary
CONDITION TMP_14"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
msg.sender.transfer(this.balance)

IRs:
REF_10(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:msg.sender value:REF_10"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 43.sol-Presale-deposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value >= 500000000000000000 && msg.sender != 0x0

IRs:
TMP_0(bool) = msg.value >= 500000000000000000
TMP_1(bool) = msg.sender != 0
TMP_2(bool) = TMP_0 && TMP_1
CONDITION TMP_2"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newDeposit.buyer = msg.sender

IRs:
REF_0(address) -> newDeposit.buyer
REF_0(address) (->newDeposit) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newDeposit.amount = msg.value

IRs:
REF_1(uint256) -> newDeposit.amount
REF_1(uint256) (->newDeposit) := msg.value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Deposits.push(newDeposit)

IRs:
REF_3 -> LENGTH Deposits
TMP_4(uint256) := REF_3(uint256)
TMP_5(uint256) = TMP_4 + 1
REF_3(uint256) (->Deposits) := TMP_5(uint256)
REF_4(Presale.Deposit) -> Deposits[TMP_4]
REF_4(Presale.Deposit) (->Deposits) := newDeposit(Presale.Deposit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
total[msg.sender] += msg.value

IRs:
REF_5(uint256) -> total[msg.sender]
REF_5(-> total) = REF_5 + msg.value"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
this.balance >= 100000000000000000000

IRs:
REF_6(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_6(bool) = REF_6 >= 100000000000000000000
CONDITION TMP_6"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isClosed = true

IRs:
isClosed(bool) := True(bool)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 43.sol-Presale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 43.sol-Presale-init(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
refundDate = date

IRs:
refundDate(uint256) := date(uint256)"];
}
// Function: 43.sol-Presale-refund(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
now >= refundDate && isClosed == false

IRs:
TMP_7(bool) = now >= refundDate
TMP_8(bool) = isClosed == False
TMP_9(bool) = TMP_7 && TMP_8
CONDITION TMP_9"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
amount <= total[msg.sender] && amount > 0

IRs:
REF_7(uint256) -> total[msg.sender]
TMP_10(bool) = amount <= REF_7
TMP_11(bool) = amount > 0
TMP_12(bool) = TMP_10 && TMP_11
CONDITION TMP_12"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.transfer(amount)

IRs:
Transfer dest:msg.sender value:amount"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 43.sol-Presale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
fiduciary = msg.sender

IRs:
fiduciary(address) := msg.sender(address)"];
}
}
