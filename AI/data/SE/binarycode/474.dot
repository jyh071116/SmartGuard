digraph G {
// Function: 474.sol-Firetoken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_96(uint256) -> balances[_who]
TMP_149(bool) = _value <= REF_96
TMP_150(None) = SOLIDITY_CALL require(bool)(TMP_149)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_97(uint256) -> balances[_who]
REF_98(uint256) -> balances[_who]
TMP_151(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_98', '_value'] 
REF_97(uint256) (->balances) := TMP_151(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_152(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_154 = CONVERT 0 to address
Emit Transfer(_who,TMP_154,_value)"];
}
// Function: 474.sol-Firetoken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_78(mapping(address => uint256)) -> allowed[_owner]
REF_79(uint256) -> REF_78[_spender]
RETURN REF_79"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 474.sol-Firetoken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_76(mapping(address => uint256)) -> allowed[msg.sender]
REF_77(uint256) -> REF_76[_spender]
REF_77(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 474.sol-Firetoken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_61(uint256) -> balances[_owner]
RETURN REF_61"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 474.sol-Firetoken-bountyTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
marketingReserve = 0x00Fe8117437eeCB51782b703BD0272C14911ECdA

IRs:
marketingReserve(address) := 5675634681523720649356955068186563162812837082(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
bountyReserve = 0x0089F23EeeCCF6bd677C050E59697D1f6feB6227

IRs:
bountyReserve(address) := 3076304680321426483126793900228902794071597607(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
teamReserve = 0x00FD87f78843D7580a4c785A1A5aaD0862f6EB19

IRs:
teamReserve(address) := 5653932924700923769507081739961167300460473113(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
devteamReserve = 0x005D4Fe4DAf0440Eb17bc39534929B71a2a13F48

IRs:
devteamReserve(address) := 2080929049450849680753385402002269391596633928(address)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
marketingToken = (totalSupply * 10) / 100

IRs:
TMP_92(uint256) = totalSupply * 10
TMP_93(uint256) = TMP_92 / 100
marketingToken(uint256) := TMP_93(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
bountyToken = (totalSupply * 10) / 100

IRs:
TMP_94(uint256) = totalSupply * 10
TMP_95(uint256) = TMP_94 / 100
bountyToken(uint256) := TMP_95(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
teamToken = (totalSupply * 26) / 100

IRs:
TMP_96(uint256) = totalSupply * 26
TMP_97(uint256) = TMP_96 / 100
teamToken(uint256) := TMP_97(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
devteamToken = (totalSupply * 10) / 100

IRs:
TMP_98(uint256) = totalSupply * 10
TMP_99(uint256) = TMP_98 / 100
devteamToken(uint256) := TMP_99(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
balances[msg.sender] = totalSupply - marketingToken - teamToken - devteamToken - bountyToken

IRs:
REF_49(uint256) -> balances[msg.sender]
TMP_100(uint256) = totalSupply - marketingToken
TMP_101(uint256) = TMP_100 - teamToken
TMP_102(uint256) = TMP_101 - devteamToken
TMP_103(uint256) = TMP_102 - bountyToken
REF_49(uint256) (->balances) := TMP_103(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
balances[teamReserve] = teamToken

IRs:
REF_50(uint256) -> balances[teamReserve]
REF_50(uint256) (->balances) := teamToken(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
balances[devteamReserve] = devteamToken

IRs:
REF_51(uint256) -> balances[devteamReserve]
REF_51(uint256) (->balances) := devteamToken(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
balances[bountyReserve] = bountyToken

IRs:
REF_52(uint256) -> balances[bountyReserve]
REF_52(uint256) (->balances) := bountyToken(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
balances[marketingReserve] = marketingToken

IRs:
REF_53(uint256) -> balances[marketingReserve]
REF_53(uint256) (->balances) := marketingToken(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Transfer(msg.sender,marketingReserve,marketingToken)

IRs:
Emit Transfer(msg.sender,marketingReserve,marketingToken)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
Transfer(msg.sender,bountyReserve,bountyToken)

IRs:
Emit Transfer(msg.sender,bountyReserve,bountyToken)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
Transfer(msg.sender,teamReserve,teamToken)

IRs:
Emit Transfer(msg.sender,teamReserve,teamToken)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
Transfer(msg.sender,devteamReserve,devteamToken)

IRs:
Emit Transfer(msg.sender,devteamReserve,devteamToken)"];
}
// Function: 474.sol-Firetoken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, Firetoken._burn(address,uint256)(msg.sender,_value)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 474.sol-Firetoken-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_101(mapping(address => uint256)) -> allowed[_from]
REF_102(uint256) -> REF_101[msg.sender]
TMP_156(bool) = _value <= REF_102
TMP_157(None) = SOLIDITY_CALL require(bool)(TMP_156)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_103(mapping(address => uint256)) -> allowed[_from]
REF_104(uint256) -> REF_103[msg.sender]
REF_105(mapping(address => uint256)) -> allowed[_from]
REF_106(uint256) -> REF_105[msg.sender]
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_106', '_value'] 
REF_104(uint256) (->allowed) := TMP_158(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(_from,_value)

IRs:
INTERNAL_CALL, Firetoken._burn(address,uint256)(_from,_value)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 474.sol-Firetoken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 474.sol-Firetoken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_87(mapping(address => uint256)) -> allowed[msg.sender]
REF_88(uint256) -> REF_87[_spender]
oldValue(uint256) := REF_88(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_136(bool) = _subtractedValue >= oldValue
CONDITION TMP_136"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_89(mapping(address => uint256)) -> allowed[msg.sender]
REF_90(uint256) -> REF_89[_spender]
REF_90(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_91(mapping(address => uint256)) -> allowed[msg.sender]
REF_92(uint256) -> REF_91[_spender]
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_92(uint256) (->allowed) := TMP_137(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_94(mapping(address => uint256)) -> allowed[msg.sender]
REF_95(uint256) -> REF_94[_spender]
Emit Approval(msg.sender,_spender,REF_95)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
8->1;
}
// Function: 474.sol-Firetoken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 474.sol-Firetoken-freeze(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value < balances[_spender])

IRs:
REF_112(uint256) -> balances[_spender]
TMP_169(bool) = _value < REF_112
TMP_170(None) = SOLIDITY_CALL require(bool)(TMP_169)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value >= 0)

IRs:
TMP_171(bool) = _value >= 0
TMP_172(None) = SOLIDITY_CALL require(bool)(TMP_171)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_spender] = balances[_spender].sub(_value)

IRs:
REF_113(uint256) -> balances[_spender]
REF_114(uint256) -> balances[_spender]
TMP_173(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_114', '_value'] 
REF_113(uint256) (->balances) := TMP_173(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
freezed[_spender] = freezed[_spender].add(_value)

IRs:
REF_116(uint256) -> freezed[_spender]
REF_117(uint256) -> freezed[_spender]
TMP_174(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_117', '_value'] 
REF_116(uint256) (->freezed) := TMP_174(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Freeze(_spender,_value)

IRs:
Emit Freeze(_spender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 474.sol-Firetoken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_80(mapping(address => uint256)) -> allowed[msg.sender]
REF_81(uint256) -> REF_80[_spender]
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(uint256) -> REF_82[_spender]
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_83', '_addedValue'] 
REF_81(uint256) (->allowed) := TMP_133(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_85(mapping(address => uint256)) -> allowed[msg.sender]
REF_86(uint256) -> REF_85[_spender]
Emit Approval(msg.sender,_spender,REF_86)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 474.sol-Firetoken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_162(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_162(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_109(uint256) -> balances[_to]
REF_110(uint256) -> balances[_to]
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_110', '_amount'] 
REF_109(uint256) (->balances) := TMP_163(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_165 = CONVERT 0 to address
Emit Transfer(TMP_165,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
7->1;
}
// Function: 474.sol-Firetoken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_198(bool) = msg.sender == owner
TMP_199(None) = SOLIDITY_CALL require(bool)(TMP_198)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 474.sol-Firetoken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 474.sol-Firetoken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 474.sol-Firetoken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_54(uint256) -> balances[msg.sender]
TMP_108(bool) = _value <= REF_54
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_110 = CONVERT 0 to address
TMP_111(bool) = _to != TMP_110
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_55(uint256) -> balances[msg.sender]
REF_56(uint256) -> balances[msg.sender]
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_56', '_value'] 
REF_55(uint256) (->balances) := TMP_113(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_58(uint256) -> balances[_to]
REF_59(uint256) -> balances[_to]
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_59', '_value'] 
REF_58(uint256) (->balances) := TMP_114(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
7->1;
}
// Function: 474.sol-Firetoken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_62(uint256) -> balances[_from]
TMP_118(bool) = _value <= REF_62
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_63(mapping(address => uint256)) -> allowed[_from]
REF_64(uint256) -> REF_63[msg.sender]
TMP_120(bool) = _value <= REF_64
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_122 = CONVERT 0 to address
TMP_123(bool) = _to != TMP_122
TMP_124(None) = SOLIDITY_CALL require(bool)(TMP_123)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_65(uint256) -> balances[_from]
REF_66(uint256) -> balances[_from]
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_66', '_value'] 
REF_65(uint256) (->balances) := TMP_125(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_68(uint256) -> balances[_to]
REF_69(uint256) -> balances[_to]
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_69', '_value'] 
REF_68(uint256) (->balances) := TMP_126(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_71(mapping(address => uint256)) -> allowed[_from]
REF_72(uint256) -> REF_71[msg.sender]
REF_73(mapping(address => uint256)) -> allowed[_from]
REF_74(uint256) -> REF_73[msg.sender]
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_74', '_value'] 
REF_72(uint256) (->allowed) := TMP_127(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
9->1;
}
// Function: 474.sol-Firetoken-unfreeze(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(freezed[_spender] < _value)

IRs:
REF_119(uint256) -> freezed[_spender]
TMP_178(bool) = REF_119 < _value
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= 0)

IRs:
TMP_180(bool) = _value <= 0
TMP_181(None) = SOLIDITY_CALL require(bool)(TMP_180)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
freezed[_spender] = freezed[_spender].sub(_value)

IRs:
REF_120(uint256) -> freezed[_spender]
REF_121(uint256) -> freezed[_spender]
TMP_182(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_121', '_value'] 
REF_120(uint256) (->freezed) := TMP_182(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_spender] = balances[_spender].add(_value)

IRs:
REF_123(uint256) -> balances[_spender]
REF_124(uint256) -> balances[_spender]
TMP_183(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_124', '_value'] 
REF_123(uint256) (->balances) := TMP_183(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Unfreeze(_spender,_value)

IRs:
Emit Unfreeze(_spender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 474.sol-Firetoken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 474.sol-Firetoken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! paused,Contract Paused. Events/Transaction Paused until Further Notice)

IRs:
TMP_195 = UnaryType.BANG paused 
TMP_196(None) = SOLIDITY_CALL require(bool,string)(TMP_195,Contract Paused. Events/Transaction Paused until Further Notice)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 474.sol-Firetoken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(paused,Contract Functionality Resumed)

IRs:
TMP_197(None) = SOLIDITY_CALL require(bool,string)(paused,Contract Functionality Resumed)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 474.sol-Firetoken-withdrawEther(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_account.transfer(address(this).balance)

IRs:
TMP_187 = CONVERT this to address
TMP_188(uint256) = SOLIDITY_CALL balance(address)(TMP_187)
Transfer dest:_account value:TMP_188"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Withdraw(this,_account,address(this).balance)

IRs:
TMP_190 = CONVERT this to address
TMP_191(uint256) = SOLIDITY_CALL balance(address)(TMP_190)
Emit Withdraw(this,_account,TMP_191)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 474.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 474.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_12(bool) = msg.sender == owner
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 474.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 474.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_20(bool) = msg.sender == owner
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 474.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 474.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 474.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 474.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! paused,Contract Paused. Events/Transaction Paused until Further Notice)

IRs:
TMP_22 = UnaryType.BANG paused 
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,Contract Paused. Events/Transaction Paused until Further Notice)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 474.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(paused,Contract Functionality Resumed)

IRs:
TMP_24(None) = SOLIDITY_CALL require(bool,string)(paused,Contract Functionality Resumed)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 474.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 474.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 474.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 474.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 474.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_30(mapping(address => uint256)) -> allowed[_owner]
REF_31(uint256) -> REF_30[_spender]
RETURN REF_31"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 474.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_28(mapping(address => uint256)) -> allowed[msg.sender]
REF_29(uint256) -> REF_28[_spender]
REF_29(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 474.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_13(uint256) -> balances[_owner]
RETURN REF_13"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 474.sol-StandardToken-bountyTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
marketingReserve = 0x00Fe8117437eeCB51782b703BD0272C14911ECdA

IRs:
marketingReserve(address) := 5675634681523720649356955068186563162812837082(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
bountyReserve = 0x0089F23EeeCCF6bd677C050E59697D1f6feB6227

IRs:
bountyReserve(address) := 3076304680321426483126793900228902794071597607(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
teamReserve = 0x00FD87f78843D7580a4c785A1A5aaD0862f6EB19

IRs:
teamReserve(address) := 5653932924700923769507081739961167300460473113(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
devteamReserve = 0x005D4Fe4DAf0440Eb17bc39534929B71a2a13F48

IRs:
devteamReserve(address) := 2080929049450849680753385402002269391596633928(address)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
marketingToken = (totalSupply * 10) / 100

IRs:
TMP_35(uint256) = totalSupply * 10
TMP_36(uint256) = TMP_35 / 100
marketingToken(uint256) := TMP_36(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
bountyToken = (totalSupply * 10) / 100

IRs:
TMP_37(uint256) = totalSupply * 10
TMP_38(uint256) = TMP_37 / 100
bountyToken(uint256) := TMP_38(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
teamToken = (totalSupply * 26) / 100

IRs:
TMP_39(uint256) = totalSupply * 26
TMP_40(uint256) = TMP_39 / 100
teamToken(uint256) := TMP_40(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
devteamToken = (totalSupply * 10) / 100

IRs:
TMP_41(uint256) = totalSupply * 10
TMP_42(uint256) = TMP_41 / 100
devteamToken(uint256) := TMP_42(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
balances[msg.sender] = totalSupply - marketingToken - teamToken - devteamToken - bountyToken

IRs:
REF_1(uint256) -> balances[msg.sender]
TMP_43(uint256) = totalSupply - marketingToken
TMP_44(uint256) = TMP_43 - teamToken
TMP_45(uint256) = TMP_44 - devteamToken
TMP_46(uint256) = TMP_45 - bountyToken
REF_1(uint256) (->balances) := TMP_46(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
balances[teamReserve] = teamToken

IRs:
REF_2(uint256) -> balances[teamReserve]
REF_2(uint256) (->balances) := teamToken(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
balances[devteamReserve] = devteamToken

IRs:
REF_3(uint256) -> balances[devteamReserve]
REF_3(uint256) (->balances) := devteamToken(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
balances[bountyReserve] = bountyToken

IRs:
REF_4(uint256) -> balances[bountyReserve]
REF_4(uint256) (->balances) := bountyToken(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
balances[marketingReserve] = marketingToken

IRs:
REF_5(uint256) -> balances[marketingReserve]
REF_5(uint256) (->balances) := marketingToken(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Transfer(msg.sender,marketingReserve,marketingToken)

IRs:
Emit Transfer(msg.sender,marketingReserve,marketingToken)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
Transfer(msg.sender,bountyReserve,bountyToken)

IRs:
Emit Transfer(msg.sender,bountyReserve,bountyToken)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
Transfer(msg.sender,teamReserve,teamToken)

IRs:
Emit Transfer(msg.sender,teamReserve,teamToken)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
Transfer(msg.sender,devteamReserve,devteamToken)

IRs:
Emit Transfer(msg.sender,devteamReserve,devteamToken)"];
}
// Function: 474.sol-StandardToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = Firetoken

IRs:
name(string) := Firetoken(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = FPWR

IRs:
symbol(string) := FPWR(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
supply = 1800000000

IRs:
supply(uint256) := 1800000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
initialSupply = supply * (10 ** uint256(decimals))

IRs:
TMP_31 = CONVERT decimals to uint256
TMP_32(uint256) = 10 ** TMP_31
TMP_33(uint256) = supply * TMP_32
initialSupply(uint256) := TMP_33(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalSupply = initialSupply

IRs:
totalSupply(uint256) := initialSupply(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[owner] = totalSupply

IRs:
REF_0(uint256) -> balances[owner]
REF_0(uint256) (->balances) := totalSupply(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
bountyTransfers()

IRs:
INTERNAL_CALL, StandardToken.bountyTransfers()()"];
}
// Function: 474.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_39(mapping(address => uint256)) -> allowed[msg.sender]
REF_40(uint256) -> REF_39[_spender]
oldValue(uint256) := REF_40(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_79(bool) = _subtractedValue >= oldValue
CONDITION TMP_79"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_41(mapping(address => uint256)) -> allowed[msg.sender]
REF_42(uint256) -> REF_41[_spender]
REF_42(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_43(mapping(address => uint256)) -> allowed[msg.sender]
REF_44(uint256) -> REF_43[_spender]
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_44(uint256) (->allowed) := TMP_80(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_46(mapping(address => uint256)) -> allowed[msg.sender]
REF_47(uint256) -> REF_46[_spender]
Emit Approval(msg.sender,_spender,REF_47)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
8->1;
}
// Function: 474.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_32(mapping(address => uint256)) -> allowed[msg.sender]
REF_33(uint256) -> REF_32[_spender]
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_35', '_addedValue'] 
REF_33(uint256) (->allowed) := TMP_76(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_37(mapping(address => uint256)) -> allowed[msg.sender]
REF_38(uint256) -> REF_37[_spender]
Emit Approval(msg.sender,_spender,REF_38)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 474.sol-StandardToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_86(bool) = msg.sender == owner
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 474.sol-StandardToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 474.sol-StandardToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 474.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_6(uint256) -> balances[msg.sender]
TMP_51(bool) = _value <= REF_6
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = _to != TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_7(uint256) -> balances[msg.sender]
REF_8(uint256) -> balances[msg.sender]
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_8', '_value'] 
REF_7(uint256) (->balances) := TMP_56(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_10(uint256) -> balances[_to]
REF_11(uint256) -> balances[_to]
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_11', '_value'] 
REF_10(uint256) (->balances) := TMP_57(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
7->1;
}
// Function: 474.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_14(uint256) -> balances[_from]
TMP_61(bool) = _value <= REF_14
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_15(mapping(address => uint256)) -> allowed[_from]
REF_16(uint256) -> REF_15[msg.sender]
TMP_63(bool) = _value <= REF_16
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_65 = CONVERT 0 to address
TMP_66(bool) = _to != TMP_65
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_17(uint256) -> balances[_from]
REF_18(uint256) -> balances[_from]
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_18', '_value'] 
REF_17(uint256) (->balances) := TMP_68(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_20(uint256) -> balances[_to]
REF_21(uint256) -> balances[_to]
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_21', '_value'] 
REF_20(uint256) (->balances) := TMP_69(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_23(mapping(address => uint256)) -> allowed[_from]
REF_24(uint256) -> REF_23[msg.sender]
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_26', '_value'] 
REF_24(uint256) (->allowed) := TMP_70(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
9->1;
}
// Function: 474.sol-StandardToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 474.sol-StandardToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! paused,Contract Paused. Events/Transaction Paused until Further Notice)

IRs:
TMP_83 = UnaryType.BANG paused 
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,Contract Paused. Events/Transaction Paused until Further Notice)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 474.sol-StandardToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(paused,Contract Functionality Resumed)

IRs:
TMP_85(None) = SOLIDITY_CALL require(bool,string)(paused,Contract Functionality Resumed)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
