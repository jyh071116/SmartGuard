digraph G {
// Function: 491.sol-AltcoinToken-balanceOf(address)
digraph{
}
// Function: 491.sol-AltcoinToken-transfer(address,uint256)
digraph{
}
// Function: 491.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 491.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 491.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 491.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 491.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 491.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 491.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 491.sol-Penchant-Penchant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
devTokens = 2250000000e18

IRs:
devTokens(uint256) := 2250000000000000000000000000(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
distr(owner,devTokens)

IRs:
TMP_12(bool) = INTERNAL_CALL, Penchant.distr(address,uint256)(owner,devTokens)"];
}
// Function: 491.sol-Penchant-adminClaimAirdrop(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
doAirdrop(_participant,_amount)

IRs:
INTERNAL_CALL, Penchant.doAirdrop(address,uint256)(_participant,_amount)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Penchant.onlyOwner()()"];
2->1;
}
// Function: 491.sol-Penchant-adminClaimAirdropMultiple(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _addresses.length

IRs:
REF_9 -> LENGTH _addresses
TMP_37(bool) = i < REF_9
CONDITION TMP_37"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
doAirdrop(_addresses[i],_amount)

IRs:
REF_10(address) -> _addresses[i]
INTERNAL_CALL, Penchant.doAirdrop(address,uint256)(REF_10,_amount)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_39(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Penchant.onlyOwner()()"];
7->3;
}
// Function: 491.sol-Penchant-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_38(mapping(address => uint256)) -> allowed[_owner]
REF_39(uint256) -> REF_38[_spender]
RETURN REF_39"];
}
// Function: 491.sol-Penchant-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_value != 0 && allowed[msg.sender][_spender] != 0

IRs:
TMP_82(bool) = _value != 0
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
TMP_83(bool) = REF_35 != 0
TMP_84(bool) = TMP_82 && TMP_83
CONDITION TMP_84"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
REF_37(uint256) (->allowed) := _value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 491.sol-Penchant-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_12(uint256) -> balances[_owner]
RETURN REF_12"];
}
// Function: 491.sol-Penchant-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_42(uint256) -> balances[msg.sender]
TMP_91(bool) = _value <= REF_42
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_43(uint256) -> balances[burner]
REF_44(uint256) -> balances[burner]
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_44', '_value'] 
REF_43(uint256) (->balances) := TMP_93(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_94(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalDistributed = totalDistributed.sub(_value)

IRs:
TMP_95(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalDistributed', '_value'] 
totalDistributed(uint256) := TMP_95(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Penchant.onlyOwner()()"];
7->1;
}
// Function: 491.sol-Penchant-canDistr()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! distributionFinished)

IRs:
TMP_106 = UnaryType.BANG distributionFinished 
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 491.sol-Penchant-distr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalDistributed = totalDistributed.add(_amount)

IRs:
TMP_19(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalDistributed', '_amount'] 
totalDistributed(uint256) := TMP_19(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_1(uint256) -> balances[_to]
REF_2(uint256) -> balances[_to]
TMP_20(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_2', '_amount'] 
REF_1(uint256) (->balances) := TMP_20(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Distr(_to,_amount)

IRs:
Emit Distr(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_22 = CONVERT 0 to address
Emit Transfer(TMP_22,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
canDistr()

IRs:
MODIFIER_CALL, Penchant.canDistr()()"];
6->1;
}
// Function: 491.sol-Penchant-doAirdrop(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_25(bool) = _amount > 0
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(totalDistributed < totalSupply)

IRs:
TMP_27(bool) = totalDistributed < totalSupply
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_participant] = balances[_participant].add(_amount)

IRs:
REF_4(uint256) -> balances[_participant]
REF_5(uint256) -> balances[_participant]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_amount'] 
REF_4(uint256) (->balances) := TMP_29(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalDistributed = totalDistributed.add(_amount)

IRs:
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalDistributed', '_amount'] 
totalDistributed(uint256) := TMP_30(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
totalDistributed >= totalSupply

IRs:
TMP_31(bool) = totalDistributed >= totalSupply
CONDITION TMP_31"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
distributionFinished = true

IRs:
distributionFinished(bool) := True(bool)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Airdrop(_participant,_amount,balances[_participant])

IRs:
REF_8(uint256) -> balances[_participant]
Emit Airdrop(_participant,_amount,REF_8)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(address(0),_participant,_amount)

IRs:
TMP_33 = CONVERT 0 to address
Emit Transfer(TMP_33,_participant,_amount)"];
}
// Function: 491.sol-Penchant-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
getTokens()

IRs:
INTERNAL_CALL, Penchant.getTokens()()"];
}
// Function: 491.sol-Penchant-finishDistribution()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
distributionFinished = true

IRs:
distributionFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
DistrFinished()

IRs:
Emit DistrFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Penchant.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canDistr()

IRs:
MODIFIER_CALL, Penchant.canDistr()()"];
5->1;
}
// Function: 491.sol-Penchant-getTokenBalance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
t = AltcoinToken(tokenAddress)

IRs:
TMP_86 = CONVERT tokenAddress to AltcoinToken
t(AltcoinToken) := TMP_86(AltcoinToken)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
bal = t.balanceOf(who)

IRs:
TMP_87(uint256) = HIGH_LEVEL_CALL, dest:t(AltcoinToken), function:balanceOf, arguments:['who']  
bal(uint256) := TMP_87(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
bal

IRs:
RETURN bal"];
}
// Function: 491.sol-Penchant-getTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokens = 0

IRs:
tokens(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value >= minContribution)

IRs:
TMP_44(bool) = msg.value >= minContribution
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_46(bool) = msg.value > 0
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokens = tokensPerEth.mul(msg.value) / 1000000000000000000

IRs:
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokensPerEth', 'msg.value'] 
TMP_49(uint256) = TMP_48 / 1000000000000000000
tokens(uint256) := TMP_49(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
investor = msg.sender

IRs:
investor(address) := msg.sender(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
bonus = 0

IRs:
bonus(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
msg.value >= minBonus

IRs:
TMP_50(bool) = msg.value >= minBonus
CONDITION TMP_50"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
bonus = tokens / 5

IRs:
TMP_51(uint256) = tokens / 5
bonus(uint256) := TMP_51(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
msg.value >= maxBonus

IRs:
TMP_52(bool) = msg.value >= maxBonus
CONDITION TMP_52"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
bonus = tokens / 2

IRs:
TMP_53(uint256) = tokens / 2
bonus(uint256) := TMP_53(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
tokens = tokens + bonus

IRs:
TMP_54(uint256) = tokens + bonus
tokens(uint256) := TMP_54(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
tokens > 0

IRs:
TMP_55(bool) = tokens > 0
CONDITION TMP_55"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
distr(investor,tokens)

IRs:
TMP_56(bool) = INTERNAL_CALL, Penchant.distr(address,uint256)(investor,tokens)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
totalDistributed >= totalSupply

IRs:
TMP_57(bool) = totalDistributed >= totalSupply
CONDITION TMP_57"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
distributionFinished = true

IRs:
distributionFinished(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
canDistr()

IRs:
MODIFIER_CALL, Penchant.canDistr()()"];
20->1;
}
// Function: 491.sol-Penchant-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_108(bool) = msg.sender == owner
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 491.sol-Penchant-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length >= size + 4)

IRs:
REF_50 -> LENGTH msg.data
TMP_110(uint256) = size + 4
TMP_111(bool) = REF_50 >= TMP_110
TMP_112(None) = SOLIDITY_CALL assert(bool)(TMP_111)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 491.sol-Penchant-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Penchant Token

IRs:
name(string) := Penchant Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = PCT

IRs:
symbol(string) := PCT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
minContribution = 1000000000000000000 / 100

IRs:
TMP_103(uint256) = 1000000000000000000 / 100
minContribution(uint256) := TMP_103(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
minBonus = 1000000000000000000 / 2

IRs:
TMP_104(uint256) = 1000000000000000000 / 2
minBonus(uint256) := TMP_104(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
maxBonus = 1000000000000000000 / 1

IRs:
TMP_105(uint256) = 1000000000000000000 / 1
maxBonus(uint256) := TMP_105(uint256)"];
}
// Function: 491.sol-Penchant-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 5000000000e18

IRs:
totalSupply(uint256) := 5000000000000000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
totalDistributed = 0

IRs:
totalDistributed(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
tokensPerEth = 3000000e18

IRs:
tokensPerEth(uint256) := 3000000000000000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
bonus = 0

IRs:
bonus(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
distributionFinished = false

IRs:
distributionFinished(bool) := False(bool)"];
}
// Function: 491.sol-Penchant-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_59 = CONVERT 0 to address
TMP_60(bool) = _to != TMP_59
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[msg.sender])

IRs:
REF_13(uint256) -> balances[msg.sender]
TMP_62(bool) = _amount <= REF_13
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_amount)

IRs:
REF_14(uint256) -> balances[msg.sender]
REF_15(uint256) -> balances[msg.sender]
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_15', '_amount'] 
REF_14(uint256) (->balances) := TMP_64(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_17(uint256) -> balances[_to]
REF_18(uint256) -> balances[_to]
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_18', '_amount'] 
REF_17(uint256) (->balances) := TMP_65(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_67(uint256) = 2 * 32
MODIFIER_CALL, Penchant.onlyPayloadSize(uint256)(TMP_67)"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 491.sol-Penchant-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_69 = CONVERT 0 to address
TMP_70(bool) = _to != TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[_from])

IRs:
REF_20(uint256) -> balances[_from]
TMP_72(bool) = _amount <= REF_20
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_amount <= allowed[_from][msg.sender])

IRs:
REF_21(mapping(address => uint256)) -> allowed[_from]
REF_22(uint256) -> REF_21[msg.sender]
TMP_74(bool) = _amount <= REF_22
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_amount)

IRs:
REF_23(uint256) -> balances[_from]
REF_24(uint256) -> balances[_from]
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_24', '_amount'] 
REF_23(uint256) (->balances) := TMP_76(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount)

IRs:
REF_26(mapping(address => uint256)) -> allowed[_from]
REF_27(uint256) -> REF_26[msg.sender]
REF_28(mapping(address => uint256)) -> allowed[_from]
REF_29(uint256) -> REF_28[msg.sender]
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_29', '_amount'] 
REF_27(uint256) (->allowed) := TMP_77(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_31(uint256) -> balances[_to]
REF_32(uint256) -> balances[_to]
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_32', '_amount'] 
REF_31(uint256) (->balances) := TMP_78(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_amount)

IRs:
Emit Transfer(_from,_to,_amount)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_80(uint256) = 3 * 32
MODIFIER_CALL, Penchant.onlyPayloadSize(uint256)(TMP_80)"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 491.sol-Penchant-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
newOwner != address(0)

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = newOwner != TMP_13
CONDITION TMP_14"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Penchant.onlyOwner()()"];
4->1;
}
// Function: 491.sol-Penchant-updateTokensPerEth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokensPerEth = _tokensPerEth

IRs:
tokensPerEth(uint256) := _tokensPerEth(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
TokensPerEthUpdated(_tokensPerEth)

IRs:
Emit TokensPerEthUpdated(_tokensPerEth)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Penchant.onlyOwner()()"];
3->1;
}
// Function: 491.sol-Penchant-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
myAddress = this

IRs:
myAddress(address) := this(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
etherBalance = myAddress.balance

IRs:
TMP_88(uint256) = SOLIDITY_CALL balance(address)(myAddress)
etherBalance(uint256) := TMP_88(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner.transfer(etherBalance)

IRs:
Transfer dest:owner value:etherBalance"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Penchant.onlyOwner()()"];
4->1;
}
// Function: 491.sol-Penchant-withdrawAltcoinTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
token = AltcoinToken(_tokenContract)

IRs:
TMP_98 = CONVERT _tokenContract to AltcoinToken
token(AltcoinToken) := TMP_98(AltcoinToken)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = token.balanceOf(address(this))

IRs:
TMP_99 = CONVERT this to address
TMP_100(uint256) = HIGH_LEVEL_CALL, dest:token(AltcoinToken), function:balanceOf, arguments:['TMP_99']  
amount(uint256) := TMP_100(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
token.transfer(owner,amount)

IRs:
TMP_101(bool) = HIGH_LEVEL_CALL, dest:token(AltcoinToken), function:transfer, arguments:['owner', 'amount']  
RETURN TMP_101"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Penchant.onlyOwner()()"];
4->1;
}
// Function: 491.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 491.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 491.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 491.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
