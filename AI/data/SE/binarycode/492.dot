digraph G {
// Function: 492.sol-RiddleMeThis-constructor(string,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
riddler = msg.sender

IRs:
riddler(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
riddle = _riddle

IRs:
riddle(string) := _riddle(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
answerHash = _answerHash

IRs:
answerHash(bytes32) := _answerHash(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActive = true

IRs:
isActive(bool) := True(bool)"];
}
// Function: 492.sol-RiddleMeThis-end(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == riddler)

IRs:
TMP_12(bool) = msg.sender == riddler
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
answer = _answer

IRs:
answer(string) := _answer(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isActive = false

IRs:
isActive(bool) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
msg.sender.transfer(this.balance)

IRs:
REF_9(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:msg.sender value:REF_9"];
}
// Function: 492.sol-RiddleMeThis-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 492.sol-RiddleMeThis-play(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isActive)

IRs:
TMP_0(None) = SOLIDITY_CALL require(bool)(isActive)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value > 1000000000000000000)

IRs:
TMP_1(bool) = msg.value > 1000000000000000000
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(bytes(guess).length > 0)

IRs:
TMP_3 = CONVERT guess to bytes
REF_0 -> LENGTH TMP_3
TMP_4(bool) = REF_0 > 0
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
newGuess.player = msg.sender

IRs:
REF_1(address) -> newGuess.player
REF_1(address) (->newGuess) := msg.sender(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
newGuess.guess = guess

IRs:
REF_2(string) -> newGuess.guess
REF_2(string) (->newGuess) := guess(string)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
guesses.push(newGuess)

IRs:
REF_4 -> LENGTH guesses
TMP_7(uint256) := REF_4(uint256)
TMP_8(uint256) = TMP_7 + 1
REF_4(uint256) (->guesses) := TMP_8(uint256)
REF_5(RiddleMeThis.Guess) -> guesses[TMP_7]
REF_5(RiddleMeThis.Guess) (->guesses) := newGuess(RiddleMeThis.Guess)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
keccak256()(guess) == answerHash

IRs:
TMP_9(bytes32) = SOLIDITY_CALL keccak256()(guess)
TMP_10(bool) = TMP_9 == answerHash
CONDITION TMP_10"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
answer = guess

IRs:
answer(string) := guess(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActive = false

IRs:
isActive(bool) := False(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
msg.sender.transfer(this.balance)

IRs:
REF_7(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:msg.sender value:REF_7"];
11->12;
12[label="Node Type: END_IF 12
"];
}
}
