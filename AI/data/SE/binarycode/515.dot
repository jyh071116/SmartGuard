digraph G {
// Function: 515.sol-JIincForwarderInterface-cancelMigration()
digraph{
}
// Function: 515.sol-JIincForwarderInterface-deposit()
digraph{
}
// Function: 515.sol-JIincForwarderInterface-finishMigration()
digraph{
}
// Function: 515.sol-JIincForwarderInterface-setup(address)
digraph{
}
// Function: 515.sol-JIincForwarderInterface-startMigration(address)
digraph{
}
// Function: 515.sol-JIincForwarderInterface-status()
digraph{
}
// Function: 515.sol-MSFun-checkCount(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_13(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_13(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(self.proposal_[_whatProposal].count)

IRs:
REF_62(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_63(MSFun.ProposalData) -> REF_62[_whatProposal]
REF_64(uint256) -> REF_63.count
RETURN REF_64"];
3[label="Node Type: RETURN 3

EXPRESSION:
signature_count

IRs:
RETURN signature_count"];
}
// Function: 515.sol-MSFun-checkMsgData(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_12(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_12(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(self.proposal_[_whatProposal].msgData)

IRs:
REF_59(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_60(MSFun.ProposalData) -> REF_59[_whatProposal]
REF_61(bytes32) -> REF_60.msgData
RETURN REF_61"];
3[label="Node Type: RETURN 3

EXPRESSION:
msg_data

IRs:
RETURN msg_data"];
}
// Function: 515.sol-MSFun-checkSigner(MSFun.Data,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_signer > 0,MSFun checkSigner failed - 0 not allowed)

IRs:
TMP_14(bool) = _signer > 0
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,MSFun checkSigner failed - 0 not allowed)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_16(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_16(bytes32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(self.proposal_[_whatProposal].log[_signer - 1])

IRs:
REF_65(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_66(MSFun.ProposalData) -> REF_65[_whatProposal]
REF_67(mapping(uint256 => address)) -> REF_66.log
TMP_17(uint256) = _signer - 1
REF_68(address) -> REF_67[TMP_17]
RETURN REF_68"];
4[label="Node Type: RETURN 4

EXPRESSION:
signer

IRs:
RETURN signer"];
}
// Function: 515.sol-MSFun-deleteProposal(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_7(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_7(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < self.proposal_[_whatProposal].count

IRs:
REF_41(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_42(MSFun.ProposalData) -> REF_41[_whatProposal]
REF_43(uint256) -> REF_42.count
TMP_8(bool) = i < REF_43
CONDITION TMP_8"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_whichAdmin = self.proposal_[_whatProposal].log[i]

IRs:
REF_44(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_45(MSFun.ProposalData) -> REF_44[_whatProposal]
REF_46(mapping(uint256 => address)) -> REF_45.log
REF_47(address) -> REF_46[i]
_whichAdmin(address) := REF_47(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete self.proposal_[_whatProposal].admin[_whichAdmin]

IRs:
REF_48(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_49(MSFun.ProposalData) -> REF_48[_whatProposal]
REF_50(mapping(address => bool)) -> REF_49.admin
REF_51(bool) -> REF_50[_whichAdmin]
REF_50 = delete REF_51 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
delete self.proposal_[_whatProposal].log[i]

IRs:
REF_52(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_53(MSFun.ProposalData) -> REF_52[_whatProposal]
REF_54(mapping(uint256 => address)) -> REF_53.log
REF_55(address) -> REF_54[i]
REF_54 = delete REF_55 "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_9(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete self.proposal_[_whatProposal]

IRs:
REF_56(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_57(MSFun.ProposalData) -> REF_56[_whatProposal]
REF_56 = delete REF_57 "];
}
// Function: 515.sol-MSFun-multiSig(MSFun.Data,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_0(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_0(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_currentCount = self.proposal_[_whatProposal].count

IRs:
REF_0(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_1(MSFun.ProposalData) -> REF_0[_whatProposal]
REF_2(uint256) -> REF_1.count
_currentCount(uint256) := REF_2(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_whichAdmin = msg.sender

IRs:
_whichAdmin(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_msgData = keccak256()(msg.data)

IRs:
TMP_1(bytes32) = SOLIDITY_CALL keccak256()(msg.data)
_msgData(bytes32) := TMP_1(bytes32)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_currentCount == 0

IRs:
TMP_2(bool) = _currentCount == 0
CONDITION TMP_2"];
5->6[label="True"];
5->13[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
self.proposal_[_whatProposal].msgData = _msgData

IRs:
REF_3(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_4(MSFun.ProposalData) -> REF_3[_whatProposal]
REF_5(bytes32) -> REF_4.msgData
REF_5(bytes32) (->self) := _msgData(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] = true

IRs:
REF_6(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_7(MSFun.ProposalData) -> REF_6[_whatProposal]
REF_8(mapping(address => bool)) -> REF_7.admin
REF_9(bool) -> REF_8[_whichAdmin]
REF_9(bool) (->self) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin

IRs:
REF_10(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_11(MSFun.ProposalData) -> REF_10[_whatProposal]
REF_12(mapping(uint256 => address)) -> REF_11.log
REF_13(address) -> REF_12[_currentCount]
REF_13(address) (->self) := _whichAdmin(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
self.proposal_[_whatProposal].count += 1

IRs:
REF_14(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_15(MSFun.ProposalData) -> REF_14[_whatProposal]
REF_16(uint256) -> REF_15.count
REF_16(-> self) = REF_16 + 1"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
self.proposal_[_whatProposal].count == _requiredSignatures

IRs:
REF_17(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_18(MSFun.ProposalData) -> REF_17[_whatProposal]
REF_19(uint256) -> REF_18.count
TMP_3(bool) = REF_19 == _requiredSignatures
CONDITION TMP_3"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
(true)

IRs:
RETURN True"];
12[label="Node Type: END_IF 12
"];
12->23;
13[label="Node Type: IF 13

EXPRESSION:
self.proposal_[_whatProposal].msgData == _msgData

IRs:
REF_20(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_21(MSFun.ProposalData) -> REF_20[_whatProposal]
REF_22(bytes32) -> REF_21.msgData
TMP_4(bool) = REF_22 == _msgData
CONDITION TMP_4"];
13->14[label="True"];
13->22[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] == false

IRs:
REF_23(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_24(MSFun.ProposalData) -> REF_23[_whatProposal]
REF_25(mapping(address => bool)) -> REF_24.admin
REF_26(bool) -> REF_25[_whichAdmin]
TMP_5(bool) = REF_26 == False
CONDITION TMP_5"];
14->15[label="True"];
14->18[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] = true

IRs:
REF_27(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_28(MSFun.ProposalData) -> REF_27[_whatProposal]
REF_29(mapping(address => bool)) -> REF_28.admin
REF_30(bool) -> REF_29[_whichAdmin]
REF_30(bool) (->self) := True(bool)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin

IRs:
REF_31(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_32(MSFun.ProposalData) -> REF_31[_whatProposal]
REF_33(mapping(uint256 => address)) -> REF_32.log
REF_34(address) -> REF_33[_currentCount]
REF_34(address) (->self) := _whichAdmin(address)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
self.proposal_[_whatProposal].count += 1

IRs:
REF_35(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_36(MSFun.ProposalData) -> REF_35[_whatProposal]
REF_37(uint256) -> REF_36.count
REF_37(-> self) = REF_37 + 1"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
self.proposal_[_whatProposal].count == _requiredSignatures

IRs:
REF_38(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_39(MSFun.ProposalData) -> REF_38[_whatProposal]
REF_40(uint256) -> REF_39.count
TMP_6(bool) = REF_40 == _requiredSignatures
CONDITION TMP_6"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: RETURN 20

EXPRESSION:
(true)

IRs:
RETURN True"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
}
// Function: 515.sol-MSFun-whatProposal(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keccak256()(abi.encodePacked(_whatFunction,this)))

IRs:
TMP_10(bytes) = SOLIDITY_CALL abi.encodePacked()(_whatFunction,this)
TMP_11(bytes32) = SOLIDITY_CALL keccak256()(TMP_10)
RETURN TMP_11"];
}
// Function: 515.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_18 = CONVERT _input to bytes
_temp(bytes) := TMP_18(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_69 -> LENGTH _temp
_length(uint256) := REF_69(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_19(bool) = _length <= 32
TMP_20(bool) = _length > 0
TMP_21(bool) = TMP_19 && TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool,string)(TMP_21,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_70(None) -> _temp[0]
TMP_23(bool) = REF_70 != 32
TMP_24(uint256) = _length - 1
REF_71(None) -> _temp[TMP_24]
TMP_25(bool) = REF_71 != 32
TMP_26(bool) = TMP_23 && TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_72(None) -> _temp[0]
TMP_28(bool) = REF_72 == 48
CONDITION TMP_28"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_73(None) -> _temp[1]
TMP_29(bool) = REF_73 != 120
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_74(None) -> _temp[1]
TMP_31(bool) = REF_74 != 88
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_33(bool) = i < _length
CONDITION TMP_33"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_75(None) -> _temp[i]
TMP_34(bool) = REF_75 > 64
REF_76(None) -> _temp[i]
TMP_35(bool) = REF_76 < 91
TMP_36(bool) = TMP_34 && TMP_35
CONDITION TMP_36"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_77(bytes1) -> _temp[i]
REF_78(None) -> _temp[i]
TMP_37 = CONVERT REF_78 to uint256
TMP_38(uint256) = TMP_37 + 32
TMP_39 = CONVERT TMP_38 to bytes1
REF_77(bytes1) (->_temp) := TMP_39(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_40(bool) = _hasNonNumber == False
CONDITION TMP_40"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_79(None) -> _temp[i]
TMP_41(bool) = REF_79 == 32
REF_80(None) -> _temp[i]
TMP_42(bool) = REF_80 > 96
REF_81(None) -> _temp[i]
TMP_43(bool) = REF_81 < 123
TMP_44(bool) = TMP_42 && TMP_43
TMP_45(bool) = TMP_41 || TMP_44
REF_82(None) -> _temp[i]
TMP_46(bool) = REF_82 > 47
REF_83(None) -> _temp[i]
TMP_47(bool) = REF_83 < 58
TMP_48(bool) = TMP_46 && TMP_47
TMP_49(bool) = TMP_45 || TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool,string)(TMP_49,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_84(None) -> _temp[i]
TMP_51(bool) = REF_84 == 32
CONDITION TMP_51"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_52(uint256) = i + 1
REF_85(None) -> _temp[TMP_52]
TMP_53(bool) = REF_85 != 32
TMP_54(None) = SOLIDITY_CALL require(bool,string)(TMP_53,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_55(bool) = _hasNonNumber == False
REF_86(None) -> _temp[i]
TMP_56(bool) = REF_86 < 48
REF_87(None) -> _temp[i]
TMP_57(bool) = REF_87 > 57
TMP_58(bool) = TMP_56 || TMP_57
TMP_59(bool) = TMP_55 && TMP_58
CONDITION TMP_59"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_60(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_61(bool) = _hasNonNumber == True
TMP_62(None) = SOLIDITY_CALL require(bool,string)(TMP_61,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 515.sol-PlayerBook-addGame(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(gameIDs_[_gameAddress] == 0,derp, that games already been registered)

IRs:
REF_208(uint256) -> gameIDs_[_gameAddress]
TMP_200(bool) = REF_208 == 0
TMP_201(None) = SOLIDITY_CALL require(bool,string)(TMP_200,derp, that games already been registered)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gID_ ++

IRs:
TMP_202(uint256) := gID_(uint256)
gID_(uint256) = gID_ + 1"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_name = _gameNameStr.nameFilter()

IRs:
TMP_203(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_gameNameStr'] 
_name(bytes32) := TMP_203(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameIDs_[_gameAddress] = gID_

IRs:
REF_210(uint256) -> gameIDs_[_gameAddress]
REF_210(uint256) (->gameIDs_) := gID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gameNames_[_gameAddress] = _name

IRs:
REF_211(bytes32) -> gameNames_[_gameAddress]
REF_211(bytes32) (->gameNames_) := _name(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[gID_] = PlayerBookReceiverInterface(_gameAddress)

IRs:
REF_212(PlayerBookReceiverInterface) -> games_[gID_]
TMP_204 = CONVERT _gameAddress to PlayerBookReceiverInterface
REF_212(PlayerBookReceiverInterface) (->games_) := TMP_204(PlayerBookReceiverInterface)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < superPlayers_.length

IRs:
REF_213 -> LENGTH superPlayers_
TMP_205(bool) = i < REF_213
CONDITION TMP_205"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
pid = superPlayers_[i]

IRs:
REF_214(uint256) -> superPlayers_[i]
pid(uint256) := REF_214(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
pid > 0

IRs:
TMP_206(bool) = pid > 0
CONDITION TMP_206"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
games_[gID_].receivePlayerInfo(pid,plyr_[pid].addr,plyr_[pid].name,0)

IRs:
REF_215(PlayerBookReceiverInterface) -> games_[gID_]
REF_217(PlayerBook.Player) -> plyr_[pid]
REF_218(address) -> REF_217.addr
REF_219(PlayerBook.Player) -> plyr_[pid]
REF_220(bytes32) -> REF_219.name
HIGH_LEVEL_CALL, dest:REF_215(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['pid', 'REF_218', 'REF_220', '0']  "];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_208(uint8) := i(uint8)
i(uint8) = i + 1"];
15->10;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
16->1;
}
// Function: 515.sol-PlayerBook-addMeToAllGames()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_138(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_138(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_139(bool) = _pID != 0
TMP_140(None) = SOLIDITY_CALL require(bool,string)(TMP_139,hey there buddy, you dont even have an account)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_laff = plyr_[_pID].laff

IRs:
REF_139(PlayerBook.Player) -> plyr_[_pID]
REF_140(uint256) -> REF_139.laff
_laff(uint256) := REF_140(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_141(PlayerBook.Player) -> plyr_[_pID]
REF_142(uint256) -> REF_141.names
_totalNames(uint256) := REF_142(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_name = plyr_[_pID].name

IRs:
REF_143(PlayerBook.Player) -> plyr_[_pID]
REF_144(bytes32) -> REF_143.name
_name(bytes32) := REF_144(bytes32)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i <= gID_

IRs:
TMP_141(bool) = i <= gID_
CONDITION TMP_141"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_laff)

IRs:
REF_145(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_145(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_laff']  "];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_totalNames > 1

IRs:
TMP_143(bool) = _totalNames > 1
CONDITION TMP_143"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
ii <= _totalNames

IRs:
TMP_144(bool) = ii <= _totalNames
CONDITION TMP_144"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_147(PlayerBookReceiverInterface) -> games_[i]
REF_149(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_150(bytes32) -> REF_149[ii]
HIGH_LEVEL_CALL, dest:REF_147(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_150']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ii ++

IRs:
TMP_146(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_147(uint256) := i(uint256)
i(uint256) = i + 1"];
20->10;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
21->1;
}
// Function: 515.sol-PlayerBook-addMeToGame(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_gameID <= gID_,silly player, that game doesn't exist yet)

IRs:
TMP_129(bool) = _gameID <= gID_
TMP_130(None) = SOLIDITY_CALL require(bool,string)(TMP_129,silly player, that game doesn't exist yet)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_125(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_125(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_131(bool) = _pID != 0
TMP_132(None) = SOLIDITY_CALL require(bool,string)(TMP_131,hey there buddy, you dont even have an account)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_126(PlayerBook.Player) -> plyr_[_pID]
REF_127(uint256) -> REF_126.names
_totalNames(uint256) := REF_127(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[_gameID].receivePlayerInfo(_pID,_addr,plyr_[_pID].name,plyr_[_pID].laff)

IRs:
REF_128(PlayerBookReceiverInterface) -> games_[_gameID]
REF_130(PlayerBook.Player) -> plyr_[_pID]
REF_131(bytes32) -> REF_130.name
REF_132(PlayerBook.Player) -> plyr_[_pID]
REF_133(uint256) -> REF_132.laff
HIGH_LEVEL_CALL, dest:REF_128(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', 'REF_131', 'REF_133']  "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_totalNames > 1

IRs:
TMP_134(bool) = _totalNames > 1
CONDITION TMP_134"];
7->10[label="True"];
7->14[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->14;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
ii <= _totalNames

IRs:
TMP_135(bool) = ii <= _totalNames
CONDITION TMP_135"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
games_[_gameID].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_134(PlayerBookReceiverInterface) -> games_[_gameID]
REF_136(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_137(bytes32) -> REF_136[ii]
HIGH_LEVEL_CALL, dest:REF_134(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_137']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ii ++

IRs:
TMP_137(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
13->11;
14[label="Node Type: END_IF 14
"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
15->1;
}
// Function: 515.sol-PlayerBook-addSuperPlayer(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pID_ ++

IRs:
TMP_90(uint256) := pID_(uint256)
pID_(uint256) = pID_ + 1"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
plyr_[pID_].addr = _addr

IRs:
REF_88(PlayerBook.Player) -> plyr_[pID_]
REF_89(address) -> REF_88.addr
REF_89(address) (->plyr_) := _addr(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[pID_].name = _name

IRs:
REF_90(PlayerBook.Player) -> plyr_[pID_]
REF_91(bytes32) -> REF_90.name
REF_91(bytes32) (->plyr_) := _name(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[pID_].names = 1

IRs:
REF_92(PlayerBook.Player) -> plyr_[pID_]
REF_93(uint256) -> REF_92.names
REF_93(uint256) (->plyr_) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxAddr_[_addr] = 1

IRs:
REF_94(uint256) -> pIDxAddr_[_addr]
REF_94(uint256) (->pIDxAddr_) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = pID_

IRs:
REF_95(uint256) -> pIDxName_[_name]
REF_95(uint256) (->pIDxName_) := pID_(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNames_[pID_][_name] = true

IRs:
REF_96(mapping(bytes32 => bool)) -> plyrNames_[pID_]
REF_97(bool) -> REF_96[_name]
REF_97(bool) (->plyrNames_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyrNameList_[pID_][1] = _name

IRs:
REF_98(mapping(uint256 => bytes32)) -> plyrNameList_[pID_]
REF_99(bytes32) -> REF_98[1]
REF_99(bytes32) (->plyrNameList_) := _name(bytes32)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
superPlayers_.push(pID_)

IRs:
REF_101 -> LENGTH superPlayers_
TMP_92(uint256) := REF_101(uint256)
TMP_93(uint256) = TMP_92 + 1
REF_101(uint256) (->superPlayers_) := TMP_93(uint256)
REF_102(uint256) -> superPlayers_[TMP_92]
REF_102(uint256) (->superPlayers_) := pID_(uint256)"];
}
// Function: 515.sol-PlayerBook-checkIfNameValid(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameStr.nameFilter()

IRs:
TMP_94(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameStr'] 
_name(bytes32) := TMP_94(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxName_[_name] == 0

IRs:
REF_104(uint256) -> pIDxName_[_name]
TMP_95(bool) = REF_104 == 0
CONDITION TMP_95"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 515.sol-PlayerBook-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
addSuperPlayer(0x7a9f5d9f4BdCf4C2Aa93e929d823FCFBD1fa19D0,go)

IRs:
INTERNAL_CALL, PlayerBook.addSuperPlayer(address,bytes32)(700050848175402154491845995165241806129437743568,go)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addSuperPlayer(0x4BBd45F22aAae700F612E2e3365d2bc017B19EEC,to)

IRs:
INTERNAL_CALL, PlayerBook.addSuperPlayer(address,bytes32)(432395241807087290017054792195735086062078369516,to)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addSuperPlayer(0x00904cF2F74Aba6Df6A60E089CDF9b7b155BAf6c,just)

IRs:
INTERNAL_CALL, PlayerBook.addSuperPlayer(address,bytes32)(3218010519359344545030296475657360186399240044,just)"];
}
// Function: 515.sol-PlayerBook-determinePID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxAddr_[_addr] == 0

IRs:
REF_180(uint256) -> pIDxAddr_[_addr]
TMP_166(bool) = REF_180 == 0
CONDITION TMP_166"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pID_ ++

IRs:
TMP_167(uint256) := pID_(uint256)
pID_(uint256) = pID_ + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = pID_

IRs:
REF_181(uint256) -> pIDxAddr_[_addr]
REF_181(uint256) (->pIDxAddr_) := pID_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[pID_].addr = _addr

IRs:
REF_182(PlayerBook.Player) -> plyr_[pID_]
REF_183(address) -> REF_182.addr
REF_183(address) (->plyr_) := _addr(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true)

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 515.sol-PlayerBook-getNameFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(registrationFee_)

IRs:
RETURN registrationFee_"];
}
// Function: 515.sol-PlayerBook-getPlayerAddr(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].addr)

IRs:
REF_189(PlayerBook.Player) -> plyr_[_pID]
REF_190(address) -> REF_189.addr
RETURN REF_190"];
}
// Function: 515.sol-PlayerBook-getPlayerID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
determinePID(_addr)

IRs:
TMP_168(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(pIDxAddr_[_addr])

IRs:
REF_184(uint256) -> pIDxAddr_[_addr]
RETURN REF_184"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
3->1;
}
// Function: 515.sol-PlayerBook-getPlayerLAff(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].laff)

IRs:
REF_187(PlayerBook.Player) -> plyr_[_pID]
REF_188(uint256) -> REF_187.laff
RETURN REF_188"];
}
// Function: 515.sol-PlayerBook-getPlayerName(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].name)

IRs:
REF_185(PlayerBook.Player) -> plyr_[_pID]
REF_186(bytes32) -> REF_185.name
RETURN REF_186"];
}
// Function: 515.sol-PlayerBook-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_211(bool) = _codeLength == 0
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 515.sol-PlayerBook-isRegisteredGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameIDs_[msg.sender] != 0)

IRs:
REF_221(uint256) -> gameIDs_[msg.sender]
TMP_217(bool) = REF_221 != 0
TMP_218(None) = SOLIDITY_CALL require(bool)(TMP_217)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 515.sol-PlayerBook-onlyDevs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == 0x00904cF2F74Aba6Df6A60E089CDF9b7b155BAf6c || msg.sender == 0x00b0Beac53077938634A63306b2c801169b18464,only team just can activate)

IRs:
TMP_213(bool) = msg.sender == 3218010519359344545030296475657360186399240044
TMP_214(bool) = msg.sender == 3941541128200262888414709443076825697355924580
TMP_215(bool) = TMP_213 || TMP_214
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,only team just can activate)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 515.sol-PlayerBook-registerNameCore(uint256,address,uint256,bytes32,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxName_[_name] != 0

IRs:
REF_157(uint256) -> pIDxName_[_name]
TMP_153(bool) = REF_157 != 0
CONDITION TMP_153"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,sorry that names already taken)

IRs:
REF_158(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_159(bool) -> REF_158[_name]
TMP_154(bool) = REF_159 == True
TMP_155(None) = SOLIDITY_CALL require(bool,string)(TMP_154,sorry that names already taken)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_160(PlayerBook.Player) -> plyr_[_pID]
REF_161(bytes32) -> REF_160.name
REF_161(bytes32) (->plyr_) := _name(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_162(uint256) -> pIDxName_[_name]
REF_162(uint256) (->pIDxName_) := _pID(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_163(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_164(bool) -> REF_163[_name]
TMP_156(bool) = REF_164 == False
CONDITION TMP_156"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_165(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_166(bool) -> REF_165[_name]
REF_166(bool) (->plyrNames_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].names ++

IRs:
REF_167(PlayerBook.Player) -> plyr_[_pID]
REF_168(uint256) -> REF_167.names
TMP_157(uint256) := REF_168(uint256)
REF_168(-> plyr_) = REF_168 + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyrNameList_[_pID][plyr_[_pID].names] = _name

IRs:
REF_169(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_170(PlayerBook.Player) -> plyr_[_pID]
REF_171(uint256) -> REF_170.names
REF_172(bytes32) -> REF_169[REF_171]
REF_172(bytes32) (->plyrNameList_) := _name(bytes32)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
affWallet.transfer(address(this).balance)

IRs:
TMP_158 = CONVERT this to address
TMP_159(uint256) = SOLIDITY_CALL balance(address)(TMP_158)
Transfer dest:affWallet value:TMP_159"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_all == true

IRs:
TMP_161(bool) = _all == True
CONDITION TMP_161"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i <= gID_

IRs:
TMP_162(bool) = i <= gID_
CONDITION TMP_162"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_affID)

IRs:
REF_174(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_174(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_affID']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_164(uint256) := i(uint256)
i(uint256) = i + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,msg.value,now)

IRs:
REF_176(PlayerBook.Player) -> plyr_[_affID]
REF_177(address) -> REF_176.addr
REF_178(PlayerBook.Player) -> plyr_[_affID]
REF_179(bytes32) -> REF_178.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_177,REF_179,msg.value,now)"];
}
// Function: 515.sol-PlayerBook-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_96(bool) = msg.value >= registrationFee_
TMP_97(None) = SOLIDITY_CALL require(bool,string)(TMP_96,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_98(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_98(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_99(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_99(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_106(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_106(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID

IRs:
TMP_100(bool) = _affCode != 0
REF_107(PlayerBook.Player) -> plyr_[_pID]
REF_108(uint256) -> REF_107.laff
TMP_101(bool) = _affCode != REF_108
TMP_102(bool) = TMP_100 && TMP_101
TMP_103(bool) = _affCode != _pID
TMP_104(bool) = TMP_102 && TMP_103
CONDITION TMP_104"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_109(PlayerBook.Player) -> plyr_[_pID]
REF_110(uint256) -> REF_109.laff
REF_110(uint256) (->plyr_) := _affCode(uint256)"];
7->11;
8[label="Node Type: IF 8

EXPRESSION:
_affCode == _pID

IRs:
TMP_105(bool) = _affCode == _pID
CONDITION TMP_105"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_affCode = 0

IRs:
_affCode(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
registerNameCore(_pID,_addr,_affCode,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affCode,_name,_isNewPlayer,_all)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
13->1;
}
// Function: 515.sol-PlayerBook-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_170(bool) = msg.value >= registrationFee_
TMP_171(None) = SOLIDITY_CALL require(bool,string)(TMP_170,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_172(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_172(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_191(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_191(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_affID = _affCode

IRs:
_affID(uint256) := _affCode(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID

IRs:
TMP_173(bool) = _affID != 0
REF_192(PlayerBook.Player) -> plyr_[_pID]
REF_193(uint256) -> REF_192.laff
TMP_174(bool) = _affID != REF_193
TMP_175(bool) = TMP_173 && TMP_174
TMP_176(bool) = _affID != _pID
TMP_177(bool) = TMP_175 && TMP_176
CONDITION TMP_177"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_194(PlayerBook.Player) -> plyr_[_pID]
REF_195(uint256) -> REF_194.laff
REF_195(uint256) (->plyr_) := _affID(uint256)"];
6->10;
7[label="Node Type: IF 7

EXPRESSION:
_affID == _pID

IRs:
TMP_178(bool) = _affID == _pID
CONDITION TMP_178"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 515.sol-PlayerBook-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_108(bool) = msg.value >= registrationFee_
TMP_109(None) = SOLIDITY_CALL require(bool,string)(TMP_108,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_110(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_110(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_111(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_111(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_112(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_112(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_112 = CONVERT 0 to address
TMP_113(bool) = _affCode != TMP_112
TMP_114(bool) = _affCode != _addr
TMP_115(bool) = TMP_113 && TMP_114
CONDITION TMP_115"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_113(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_113(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_114(PlayerBook.Player) -> plyr_[_pID]
REF_115(uint256) -> REF_114.laff
TMP_116(bool) = _affID != REF_115
CONDITION TMP_116"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_116(PlayerBook.Player) -> plyr_[_pID]
REF_117(uint256) -> REF_116.laff
REF_117(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 515.sol-PlayerBook-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_181(bool) = msg.value >= registrationFee_
TMP_182(None) = SOLIDITY_CALL require(bool,string)(TMP_181,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_183(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_183(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_196(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_196(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_184 = CONVERT 0 to address
TMP_185(bool) = _affCode != TMP_184
TMP_186(bool) = _affCode != _addr
TMP_187(bool) = TMP_185 && TMP_186
CONDITION TMP_187"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_197(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_197(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_198(PlayerBook.Player) -> plyr_[_pID]
REF_199(uint256) -> REF_198.laff
TMP_188(bool) = _affID != REF_199
CONDITION TMP_188"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_200(PlayerBook.Player) -> plyr_[_pID]
REF_201(uint256) -> REF_200.laff
REF_201(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 515.sol-PlayerBook-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_119(bool) = msg.value >= registrationFee_
TMP_120(None) = SOLIDITY_CALL require(bool,string)(TMP_119,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_121(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_121(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_122(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_122(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_119(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_119(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_123(bool) = _affCode != 
TMP_124(bool) = _affCode != _name
TMP_125(bool) = TMP_123 && TMP_124
CONDITION TMP_125"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_120(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_120(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_121(PlayerBook.Player) -> plyr_[_pID]
REF_122(uint256) -> REF_121.laff
TMP_126(bool) = _affID != REF_122
CONDITION TMP_126"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_123(PlayerBook.Player) -> plyr_[_pID]
REF_124(uint256) -> REF_123.laff
REF_124(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 515.sol-PlayerBook-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_191(bool) = msg.value >= registrationFee_
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_193(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_193(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_202(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_202(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_194(bool) = _affCode != 
TMP_195(bool) = _affCode != _name
TMP_196(bool) = TMP_194 && TMP_195
CONDITION TMP_196"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_203(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_203(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_204(PlayerBook.Player) -> plyr_[_pID]
REF_205(uint256) -> REF_204.laff
TMP_197(bool) = _affID != REF_205
CONDITION TMP_197"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_206(PlayerBook.Player) -> plyr_[_pID]
REF_207(uint256) -> REF_206.laff
REF_207(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 515.sol-PlayerBook-setRegistrationFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
registrationFee_ = _fee

IRs:
registrationFee_(uint256) := _fee(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
2->1;
}
// Function: 515.sol-PlayerBook-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
affWallet = 0x4BBd45F22aAae700F612E2e3365d2bc017B19EEC

IRs:
affWallet(address) := 432395241807087290017054792195735086062078369516(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
registrationFee_ = 200000000000000000

IRs:
registrationFee_(uint256) := 200000000000000000(uint256)"];
}
// Function: 515.sol-PlayerBook-useMyOldName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_149(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_149(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_152(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_152(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,umm... thats not a name you own)

IRs:
REF_153(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_154(bool) -> REF_153[_name]
TMP_150(bool) = REF_154 == True
TMP_151(None) = SOLIDITY_CALL require(bool,string)(TMP_150,umm... thats not a name you own)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_155(PlayerBook.Player) -> plyr_[_pID]
REF_156(bytes32) -> REF_155.name
REF_156(bytes32) (->plyr_) := _name(bytes32)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
5->1;
}
// Function: 515.sol-PlayerBookReceiverInterface-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
}
// Function: 515.sol-PlayerBookReceiverInterface-receivePlayerNameList(uint256,bytes32)
digraph{
}
// Function: 515.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_72(uint256) = a + b
c(uint256) := TMP_72(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_73(bool) = c >= a
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 515.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_68(uint256) = a / b
c(uint256) := TMP_68(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 515.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_63(bool) = a == 0
CONDITION TMP_63"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_64(uint256) = a * b
c(uint256) := TMP_64(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_65(uint256) = c / a
TMP_66(bool) = TMP_65 == b
TMP_67(None) = SOLIDITY_CALL require(bool,string)(TMP_66,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 515.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_82(bool) = x == 0
CONDITION TMP_82"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_83(bool) = y == 0
CONDITION TMP_83"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_84(bool) = i < y
CONDITION TMP_84"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_85(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_85(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_86(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 515.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_81(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_81"];
}
// Function: 515.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_75(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_76(uint256) = TMP_75 / 2
z(uint256) := TMP_76(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_77(bool) = z < y
CONDITION TMP_77"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_78(uint256) = x / z
TMP_79(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_78,z)
TMP_80(uint256) = TMP_79 / 2
z(uint256) := TMP_80(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 515.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_69(bool) = b <= a
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_71(uint256) = a - b
RETURN TMP_71"];
}
// Function: 515.sol-TeamJustInterface-adminCount()
digraph{
}
// Function: 515.sol-TeamJustInterface-adminName(address)
digraph{
}
// Function: 515.sol-TeamJustInterface-devCount()
digraph{
}
// Function: 515.sol-TeamJustInterface-isAdmin(address)
digraph{
}
// Function: 515.sol-TeamJustInterface-isDev(address)
digraph{
}
// Function: 515.sol-TeamJustInterface-requiredDevSignatures()
digraph{
}
// Function: 515.sol-TeamJustInterface-requiredSignatures()
digraph{
}
}
