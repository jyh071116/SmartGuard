digraph G {
// Function: 545.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 545.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 545.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 545.sol-ERC20-totalSupply()
digraph{
}
// Function: 545.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 545.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 545.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 545.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 545.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 545.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 545.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_11(bool) = msg.sender == owner
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 545.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_6 = CONVERT 0 to address
TMP_7(bool) = newOwner != TMP_6
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 545.sol-SafeERC20-safeApprove(ERC20,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.approve(spender,value))

IRs:
TMP_4(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:approve, arguments:['spender', 'value']  
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
}
// Function: 545.sol-SafeERC20-safeTransfer(ERC20Basic,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.transfer(to,value))

IRs:
TMP_0(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['to', 'value']  
TMP_1(None) = SOLIDITY_CALL assert(bool)(TMP_0)"];
}
// Function: 545.sol-SafeERC20-safeTransferFrom(ERC20,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.transferFrom(from,to,value))

IRs:
TMP_2(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transferFrom, arguments:['from', 'to', 'value']  
TMP_3(None) = SOLIDITY_CALL assert(bool)(TMP_2)"];
}
// Function: 545.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_22(uint256) = a + b
c(uint256) := TMP_22(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_23(bool) = c >= a
TMP_24(None) = SOLIDITY_CALL assert(bool)(TMP_23)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 545.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_18(uint256) = a / b
c(uint256) := TMP_18(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 545.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_13(bool) = a == 0
CONDITION TMP_13"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_14(uint256) = a * b
c(uint256) := TMP_14(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_15(uint256) = c / a
TMP_16(bool) = TMP_15 == b
TMP_17(None) = SOLIDITY_CALL assert(bool)(TMP_16)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 545.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_19(bool) = b <= a
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_21(uint256) = a - b
RETURN TMP_21"];
}
// Function: 545.sol-TokenVesting-addVesting(address[],uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_beneficiary.length == _token.length) && (_beneficiary.length == _vestingTime.length))

IRs:
REF_3 -> LENGTH _beneficiary
REF_4 -> LENGTH _token
TMP_31(bool) = REF_3 == REF_4
REF_5 -> LENGTH _beneficiary
REF_6 -> LENGTH _vestingTime
TMP_32(bool) = REF_5 == REF_6
TMP_33(bool) = TMP_31 && TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _beneficiary.length

IRs:
REF_7 -> LENGTH _beneficiary
TMP_35(bool) = i < REF_7
CONDITION TMP_35"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_vestingTime[i] > now)

IRs:
REF_8(uint256) -> _vestingTime[i]
TMP_36(bool) = REF_8 > now
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(checkZeroValue(_token[i]))

IRs:
REF_9(uint256) -> _token[i]
TMP_38(bool) = INTERNAL_CALL, TokenVesting.checkZeroValue(uint256)(REF_9)
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(uint256(getBalance()) >= totalTokenVested.add(_token[i]))

IRs:
TMP_40(uint256) = INTERNAL_CALL, TokenVesting.getBalance()()
TMP_41 = CONVERT TMP_40 to uint256
REF_11(uint256) -> _token[i]
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalTokenVested', 'REF_11'] 
TMP_43(bool) = TMP_41 >= TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
vestingObj[_beneficiary[i]].push(VestingObj({token:_token[i],releaseTime:_vestingTime[i]}))

IRs:
REF_12(address) -> _beneficiary[i]
REF_13(TokenVesting.VestingObj[]) -> vestingObj[REF_12]
REF_15(uint256) -> _token[i]
REF_16(uint256) -> _vestingTime[i]
TMP_45(TokenVesting.VestingObj) = new VestingObj(REF_15,REF_16)
REF_17 -> LENGTH REF_13
TMP_47(uint256) := REF_17(uint256)
TMP_48(uint256) = TMP_47 + 1
REF_17(uint256) (->vestingObj) := TMP_48(uint256)
REF_18(TokenVesting.VestingObj) -> REF_13[TMP_47]
REF_18(TokenVesting.VestingObj) (->vestingObj) := TMP_45(TokenVesting.VestingObj)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalTokenVested = totalTokenVested.add(_token[i])

IRs:
REF_20(uint256) -> _token[i]
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalTokenVested', 'REF_20'] 
totalTokenVested(uint256) := TMP_49(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
AddVesting(_beneficiary[i],_token[i],_vestingTime[i])

IRs:
REF_21(address) -> _beneficiary[i]
REF_22(uint256) -> _token[i]
REF_23(uint256) -> _vestingTime[i]
Emit AddVesting(REF_21,REF_22,REF_23)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_51(uint256) := i(uint256)
i(uint256) = i + 1"];
12->5;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
13->1;
}
// Function: 545.sol-TokenVesting-checkZeroAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_add != address(0))

IRs:
TMP_66 = CONVERT 0 to address
TMP_67(bool) = _add != TMP_66
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 545.sol-TokenVesting-checkZeroValue(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
value > 0

IRs:
TMP_63(bool) = value > 0
RETURN TMP_63"];
}
// Function: 545.sol-TokenVesting-claim()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
transferTokenCount = 0

IRs:
transferTokenCount(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->11;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < vestingObj[msg.sender].length

IRs:
REF_24(TokenVesting.VestingObj[]) -> vestingObj[msg.sender]
REF_25 -> LENGTH REF_24
TMP_53(bool) = i < REF_25
CONDITION TMP_53"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
now >= vestingObj[msg.sender][i].releaseTime

IRs:
REF_26(TokenVesting.VestingObj[]) -> vestingObj[msg.sender]
REF_27(TokenVesting.VestingObj) -> REF_26[i]
REF_28(uint256) -> REF_27.releaseTime
TMP_54(bool) = now >= REF_28
CONDITION TMP_54"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
transferTokenCount = transferTokenCount.add(vestingObj[msg.sender][i].token)

IRs:
REF_30(TokenVesting.VestingObj[]) -> vestingObj[msg.sender]
REF_31(TokenVesting.VestingObj) -> REF_30[i]
REF_32(uint256) -> REF_31.token
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['transferTokenCount', 'REF_32'] 
transferTokenCount(uint256) := TMP_55(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete vestingObj[msg.sender][i]

IRs:
REF_33(TokenVesting.VestingObj[]) -> vestingObj[msg.sender]
REF_34(TokenVesting.VestingObj) -> REF_33[i]
REF_33 = delete REF_34 "];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_56(uint256) := i(uint256)
i(uint256) = i + 1"];
10->5;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(transferTokenCount > 0)

IRs:
TMP_57(bool) = transferTokenCount > 0
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
token.safeTransfer(msg.sender,transferTokenCount)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['token', 'msg.sender', 'transferTokenCount'] "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Release(msg.sender,transferTokenCount,now)

IRs:
Emit Release(msg.sender,transferTokenCount,now)"];
}
// Function: 545.sol-TokenVesting-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 545.sol-TokenVesting-constructor(ERC20Basic)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = _token

IRs:
token(ERC20Basic) := _token(ERC20Basic)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
checkZeroAddress(_token)

IRs:
MODIFIER_CALL, TokenVesting.checkZeroAddress(address)(_token)"];
2->1;
}
// Function: 545.sol-TokenVesting-getBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
token.balanceOf(address(this))

IRs:
TMP_61 = CONVERT this to address
TMP_62(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:balanceOf, arguments:['TMP_61']  
RETURN TMP_62"];
}
// Function: 545.sol-TokenVesting-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_64(bool) = msg.sender == owner
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 545.sol-TokenVesting-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_25 = CONVERT 0 to address
TMP_26(bool) = newOwner != TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
}
