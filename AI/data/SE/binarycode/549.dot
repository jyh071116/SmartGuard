digraph G {
// Function: 549.sol-MinimalTokenInterface-balanceOf(address)
digraph{
}
// Function: 549.sol-MinimalTokenInterface-decimals()
digraph{
}
// Function: 549.sol-MinimalTokenInterface-transfer(address,uint256)
digraph{
}
// Function: 549.sol-MinimalTokenInterface-transferFrom(address,address,uint256)
digraph{
}
// Function: 549.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_1(bool) = msg.sender == newOwner
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_4 = CONVERT 0 to address
newOwner(address) := TMP_4(address)"];
}
// Function: 549.sol-Owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 549.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 549.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 549.sol-SNcoin_CountrySale-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_8(bool) = msg.sender == newOwner
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_11 = CONVERT 0 to address
newOwner(address) := TMP_11(address)"];
}
// Function: 549.sol-SNcoin_CountrySale-claimTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
_token == 0x0

IRs:
TMP_58(bool) = _token == 0
CONDITION TMP_58"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_59 = CONVERT this to address
TMP_60(uint256) = SOLIDITY_CALL balance(address)(TMP_59)
Transfer dest:owner value:TMP_60"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
token = MinimalTokenInterface(_token)

IRs:
TMP_62 = CONVERT _token to MinimalTokenInterface
token(MinimalTokenInterface) := TMP_62(MinimalTokenInterface)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
balance = token.balanceOf(this)

IRs:
TMP_63(uint256) = HIGH_LEVEL_CALL, dest:token(MinimalTokenInterface), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_63(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
token.transfer(owner,balance)

IRs:
TMP_64(bool) = HIGH_LEVEL_CALL, dest:token(MinimalTokenInterface), function:transfer, arguments:['owner', 'balance']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ClaimedTokens(_token,owner,balance)

IRs:
Emit ClaimedTokens(_token,owner,balance)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
9->1;
}
// Function: 549.sol-SNcoin_CountrySale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 549.sol-SNcoin_CountrySale-constructor(address,address,address,address,bool,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tokenAddress != 0)

IRs:
TMP_12(bool) = _tokenAddress != 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_spenderAddress != 0)

IRs:
TMP_14(bool) = _spenderAddress != 0
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_vaultAddress != 0)

IRs:
TMP_16(bool) = _vaultAddress != 0
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_newTokenPrice > 0)

IRs:
TMP_18(bool) = _newTokenPrice > 0
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(bytes(_country).length > 0)

IRs:
TMP_20 = CONVERT _country to bytes
REF_0 -> LENGTH TMP_20
TMP_21(bool) = REF_0 > 0
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenContract = MinimalTokenInterface(_tokenAddress)

IRs:
TMP_23 = CONVERT _tokenAddress to MinimalTokenInterface
tokenContract(MinimalTokenInterface) := TMP_23(MinimalTokenInterface)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
spenderAddress = _spenderAddress

IRs:
spenderAddress(address) := _spenderAddress(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
vaultAddress = _vaultAddress

IRs:
vaultAddress(address) := _vaultAddress(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ambassadorAddress = _ambassadorAddress

IRs:
ambassadorAddress(address) := _ambassadorAddress(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
fundingEnabled = _fundingEnabled

IRs:
fundingEnabled(bool) := _fundingEnabled(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
tokenPrice = _newTokenPrice

IRs:
tokenPrice(uint256) := _newTokenPrice(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
country = _country

IRs:
country(string) := _country(string)"];
}
// Function: 549.sol-SNcoin_CountrySale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(fundingEnabled)

IRs:
TMP_38(None) = SOLIDITY_CALL require(bool)(fundingEnabled)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(ambassadorAddress != 0)

IRs:
TMP_39(bool) = ambassadorAddress != 0
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(tokenPrice > 10 ** 9)

IRs:
TMP_41(uint256) = 10 ** 9
TMP_42(bool) = tokenPrice > TMP_41
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(msg.value >= tokenPrice)

IRs:
TMP_44(bool) = msg.value >= tokenPrice
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalCollected += msg.value

IRs:
totalCollected(uint256) = totalCollected + msg.value"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
ambVal = (20 * msg.value) / 100

IRs:
TMP_46(uint256) = 20 * msg.value
TMP_47(uint256) = TMP_46 / 100
ambVal(uint256) := TMP_47(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
tokens = (msg.value * 10 ** uint256(tokenContract.decimals())) / tokenPrice

IRs:
TMP_48(uint8) = HIGH_LEVEL_CALL, dest:tokenContract(MinimalTokenInterface), function:decimals, arguments:[]  
TMP_49 = CONVERT TMP_48 to uint256
TMP_50(uint256) = 10 ** TMP_49
TMP_51(uint256) = msg.value * TMP_50
TMP_52(uint256) = TMP_51 / tokenPrice
tokens(uint256) := TMP_52(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(tokenContract.transferFrom(spenderAddress,msg.sender,tokens))

IRs:
TMP_53(bool) = HIGH_LEVEL_CALL, dest:tokenContract(MinimalTokenInterface), function:transferFrom, arguments:['spenderAddress', 'msg.sender', 'tokens']  
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ambassadorAddress.transfer(ambVal)

IRs:
Transfer dest:ambassadorAddress value:ambVal"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
vaultAddress.transfer(msg.value - ambVal)

IRs:
TMP_56(uint256) = msg.value - ambVal
Transfer dest:vaultAddress value:TMP_56"];
10->11;
11[label="Node Type: RETURN 11
"];
}
// Function: 549.sol-SNcoin_CountrySale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_67(bool) = msg.sender == owner
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 549.sol-SNcoin_CountrySale-setAmbassadorAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_ambassadorAddress != 0)

IRs:
TMP_30(bool) = _ambassadorAddress != 0
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ambassadorAddress = _ambassadorAddress

IRs:
ambassadorAddress(address) := _ambassadorAddress(address)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 549.sol-SNcoin_CountrySale-setFundingEnabled(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fundingEnabled = _fundingEnabled

IRs:
fundingEnabled(bool) := _fundingEnabled(bool)"];
1->2;
2[label="Node Type: RETURN 2
"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 549.sol-SNcoin_CountrySale-setSpenderAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spenderAddress != 0)

IRs:
TMP_24(bool) = _spenderAddress != 0
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
spenderAddress = _spenderAddress

IRs:
spenderAddress(address) := _spenderAddress(address)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 549.sol-SNcoin_CountrySale-setVaultAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_vaultAddress != 0)

IRs:
TMP_27(bool) = _vaultAddress != 0
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vaultAddress = _vaultAddress

IRs:
vaultAddress(address) := _vaultAddress(address)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 549.sol-SNcoin_CountrySale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 549.sol-SNcoin_CountrySale-updateTokenPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newTokenPrice > 10 ** 9)

IRs:
TMP_34(uint256) = 10 ** 9
TMP_35(bool) = _newTokenPrice > TMP_34
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenPrice = _newTokenPrice

IRs:
tokenPrice(uint256) := _newTokenPrice(uint256)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
}
