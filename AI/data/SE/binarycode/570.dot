digraph G {
// Function: 570.sol-Simple_SHA3_Test-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 570.sol-Simple_SHA3_Test-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 570.sol-Simple_SHA3_Test-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
hash = 0x9c22ff5f21f0b81b113e63f7db6da94fedef11b2119b4088b89664cb9a3cb658

IRs:
hash(bytes32) := 70622639689279718371527342103894932928233838121221666359043189029507524507224(uint256)"];
}
// Function: 570.sol-Simple_SHA3_Test-test_suicide()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_18(bool) = msg.sender == owner
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(msg.sender)

IRs:
TMP_20(None) = SOLIDITY_CALL selfdestruct(address)(msg.sender)"];
}
// Function: 570.sol-Simple_SHA3_Test-test_withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_13(bool) = msg.sender == owner
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
msg.sender.transfer(address(this).balance)

IRs:
TMP_15 = CONVERT this to address
TMP_16(uint256) = SOLIDITY_CALL balance(address)(TMP_15)
Transfer dest:msg.sender value:TMP_16"];
}
// Function: 570.sol-Simple_SHA3_Test-withdraw(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= 10000000000000000000)

IRs:
TMP_0(bool) = msg.value >= 10000000000000000000
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(bytes(preimage).length > 0)

IRs:
TMP_2 = CONVERT preimage to bytes
REF_0 -> LENGTH TMP_2
TMP_3(bool) = REF_0 > 0
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
solution = keccak256()(bytes(preimage))

IRs:
TMP_5 = CONVERT preimage to bytes
TMP_6(bytes32) = SOLIDITY_CALL keccak256()(TMP_5)
solution(bytes32) := TMP_6(bytes32)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
solution == hash

IRs:
TMP_7(bool) = solution == hash
CONDITION TMP_7"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
test(SHA works)

IRs:
Emit test(SHA works)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
msg.sender.transfer(address(this).balance)

IRs:
TMP_9 = CONVERT this to address
TMP_10(uint256) = SOLIDITY_CALL balance(address)(TMP_9)
Transfer dest:msg.sender value:TMP_10"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
test(SHA doesnt work)

IRs:
Emit test(SHA doesnt work)"];
7->8;
8[label="Node Type: END_IF 8
"];
}
}
