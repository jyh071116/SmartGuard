digraph G {
// Function: 586.sol-Obredis-Obredis()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = 0

IRs:
REF_30(uint256) -> balances[msg.sender]
REF_30(uint256) (->balances) := 0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = Obelisk Reward Token

IRs:
name(string) := Obelisk Reward Token(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = ORT

IRs:
symbol(string) := ORT(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allRewPaid = true

IRs:
allRewPaid(bool) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
awaitingRew[msg.sender] = false

IRs:
REF_31(bool) -> awaitingRew[msg.sender]
REF_31(bool) (->awaitingRew) := False(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
fundsWallet = msg.sender

IRs:
fundsWallet(address) := msg.sender(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
addresses.push(msg.sender)

IRs:
REF_33 -> LENGTH addresses
TMP_23(uint256) := REF_33(uint256)
TMP_24(uint256) = TMP_23 + 1
REF_33(uint256) (->addresses) := TMP_24(uint256)
REF_34(address) -> addresses[TMP_23]
REF_34(address) (->addresses) := msg.sender(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isAddress[msg.sender] = true

IRs:
REF_35(bool) -> isAddress[msg.sender]
REF_35(bool) (->isAddress) := True(bool)"];
}
// Function: 586.sol-Obredis-addressesLength()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint32(addresses.length)

IRs:
REF_84 -> LENGTH addresses
TMP_92 = CONVERT REF_84 to uint32
RETURN TMP_92"];
2[label="Node Type: RETURN 2

EXPRESSION:
len

IRs:
RETURN len"];
}
// Function: 586.sol-Obredis-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 586.sol-Obredis-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 586.sol-Obredis-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 586.sol-Obredis-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(totalSupply - _qty < totalSupply)

IRs:
TMP_79(uint256) = totalSupply - _qty
TMP_80(bool) = TMP_79 < totalSupply
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[fundsWallet] >= _qty)

IRs:
REF_78(uint256) -> balances[fundsWallet]
TMP_82(bool) = REF_78 >= _qty
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply -= _qty

IRs:
totalSupply(uint256) = totalSupply - _qty"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[fundsWallet] -= _qty

IRs:
REF_79(uint256) -> balances[fundsWallet]
REF_79(-> balances) = REF_79 - _qty"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burned(_qty,totalSupply)

IRs:
Emit Burned(_qty,totalSupply)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(fundsWallet,0x0,_qty)

IRs:
Emit Transfer(fundsWallet,0,_qty)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canSend()

IRs:
MODIFIER_CALL, Obredis.canSend()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, Obredis.isOwner()()"];
8->1;
}
// Function: 586.sol-Obredis-canSend()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allRewPaid)

IRs:
TMP_97(None) = SOLIDITY_CALL require(bool)(allRewPaid)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 586.sol-Obredis-checkAllRewPaid()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
len = uint32(addresses.length)

IRs:
REF_74 -> LENGTH addresses
TMP_67 = CONVERT REF_74 to uint32
len(uint32) := TMP_67(uint32)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < len

IRs:
TMP_68(bool) = i < len
CONDITION TMP_68"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
awaitingRew[addresses[i]]

IRs:
REF_75(address) -> addresses[i]
REF_76(bool) -> awaitingRew[REF_75]
CONDITION REF_76"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_69(uint32) := i(uint32)
i(uint32) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 586.sol-Obredis-collectOwnRew()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
awaitingRew[msg.sender]

IRs:
REF_80(bool) -> awaitingRew[msg.sender]
CONDITION REF_80"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
msg.sender.transfer((newReward * balances[msg.sender]) / totalSupply)

IRs:
REF_82(uint256) -> balances[msg.sender]
TMP_88(uint256) = newReward * REF_82
TMP_89(uint256) = TMP_88 / totalSupply
Transfer dest:msg.sender value:TMP_89"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
awaitingRew[msg.sender] = false

IRs:
REF_83(bool) -> awaitingRew[msg.sender]
REF_83(bool) (->awaitingRew) := False(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allRewPaid = checkAllRewPaid()

IRs:
TMP_91(bool) = INTERNAL_CALL, Obredis.checkAllRewPaid()()
allRewPaid(bool) := TMP_91(bool)"];
}
// Function: 586.sol-Obredis-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 586.sol-Obredis-forceTransfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
balances[_who] >= _qty && _qty > 0

IRs:
REF_41(uint256) -> balances[_who]
TMP_32(bool) = REF_41 >= _qty
TMP_33(bool) = _qty > 0
TMP_34(bool) = TMP_32 && TMP_33
CONDITION TMP_34"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] -= _qty

IRs:
REF_42(uint256) -> balances[_who]
REF_42(-> balances) = REF_42 - _qty"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[fundsWallet] += _qty

IRs:
REF_43(uint256) -> balances[fundsWallet]
REF_43(-> balances) = REF_43 + _qty"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(_who,fundsWallet,_qty)

IRs:
Emit Transfer(_who,fundsWallet,_qty)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, Obredis.isOwner()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 586.sol-Obredis-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == fundsWallet)

IRs:
TMP_95(bool) = msg.sender == fundsWallet
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 586.sol-Obredis-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(fundsWallet)

IRs:
TMP_93(None) = SOLIDITY_CALL selfdestruct(address)(fundsWallet)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, Obredis.isOwner()()"];
2->1;
}
// Function: 586.sol-Obredis-mint(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(totalSupply + _qty > totalSupply)

IRs:
TMP_72(uint256) = totalSupply + _qty
TMP_73(bool) = TMP_72 > totalSupply
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply += _qty

IRs:
totalSupply(uint256) = totalSupply + _qty"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[fundsWallet] += _qty

IRs:
REF_77(uint256) -> balances[fundsWallet]
REF_77(-> balances) = REF_77 + _qty"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Minted(_qty,totalSupply)

IRs:
Emit Minted(_qty,totalSupply)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(0x0,fundsWallet,_qty)

IRs:
Emit Transfer(0,fundsWallet,_qty)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
canSend()

IRs:
MODIFIER_CALL, Obredis.canSend()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, Obredis.isOwner()()"];
7->1;
}
// Function: 586.sol-Obredis-payAllRewards()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allRewPaid == false)

IRs:
TMP_45(bool) = allRewPaid == False
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
len = uint32(addresses.length)

IRs:
REF_48 -> LENGTH addresses
TMP_47 = CONVERT REF_48 to uint32
len(uint32) := TMP_47(uint32)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->15;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < len

IRs:
TMP_48(bool) = i < len
CONDITION TMP_48"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
balances[addresses[i]] == 0

IRs:
REF_49(address) -> addresses[i]
REF_50(uint256) -> balances[REF_49]
TMP_49(bool) = REF_50 == 0
CONDITION TMP_49"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
awaitingRew[addresses[i]] = false

IRs:
REF_51(address) -> addresses[i]
REF_52(bool) -> awaitingRew[REF_51]
REF_52(bool) (->awaitingRew) := False(bool)"];
8->13;
9[label="Node Type: IF 9

EXPRESSION:
awaitingRew[addresses[i]]

IRs:
REF_53(address) -> addresses[i]
REF_54(bool) -> awaitingRew[REF_53]
CONDITION REF_54"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
addresses[i].transfer((newReward * balances[addresses[i]]) / totalSupply)

IRs:
REF_55(address) -> addresses[i]
REF_57(address) -> addresses[i]
REF_58(uint256) -> balances[REF_57]
TMP_50(uint256) = newReward * REF_58
TMP_51(uint256) = TMP_50 / totalSupply
Transfer dest:REF_55 value:TMP_51"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
awaitingRew[addresses[i]] = false

IRs:
REF_59(address) -> addresses[i]
REF_60(bool) -> awaitingRew[REF_59]
REF_60(bool) (->awaitingRew) := False(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_53(uint32) := i(uint32)
i(uint32) = i + 1"];
14->6;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
allRewPaid = true

IRs:
allRewPaid(bool) := True(bool)"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, Obredis.isOwner()()"];
16->1;
}
// Function: 586.sol-Obredis-payReward()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_37(bool) = msg.value > 0
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newReward = this.balance

IRs:
REF_44(uint256) = SOLIDITY_CALL balance(address)(this)
newReward(uint256) := REF_44([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f364a797730>])"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalRewards += msg.value

IRs:
totalRewards(uint256) = totalRewards + msg.value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Reward(msg.value)

IRs:
Emit Reward(msg.value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allRewPaid = false

IRs:
allRewPaid(bool) := False(bool)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
len = uint32(addresses.length)

IRs:
REF_45 -> LENGTH addresses
TMP_40 = CONVERT REF_45 to uint32
len(uint32) := TMP_40(uint32)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < len

IRs:
TMP_41(bool) = i < len
CONDITION TMP_41"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
awaitingRew[addresses[i]] = true

IRs:
REF_46(address) -> addresses[i]
REF_47(bool) -> awaitingRew[REF_46]
REF_47(bool) (->awaitingRew) := True(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_42(uint32) := i(uint32)
i(uint32) = i + 1"];
12->10;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, Obredis.isOwner()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
canSend()

IRs:
MODIFIER_CALL, Obredis.canSend()()"];
14->1;
}
// Function: 586.sol-Obredis-paySomeRewards(uint32,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_first <= _last)

IRs:
TMP_55(bool) = _first <= _last
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_last <= addresses.length)

IRs:
REF_61 -> LENGTH addresses
TMP_57(bool) = _last <= REF_61
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->15;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = _first

IRs:
i(uint32) := _first(uint32)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i <= _last

IRs:
TMP_59(bool) = i <= _last
CONDITION TMP_59"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
balances[addresses[i]] == 0

IRs:
REF_62(address) -> addresses[i]
REF_63(uint256) -> balances[REF_62]
TMP_60(bool) = REF_63 == 0
CONDITION TMP_60"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
awaitingRew[addresses[i]] = false

IRs:
REF_64(address) -> addresses[i]
REF_65(bool) -> awaitingRew[REF_64]
REF_65(bool) (->awaitingRew) := False(bool)"];
8->13;
9[label="Node Type: IF 9

EXPRESSION:
awaitingRew[addresses[i]]

IRs:
REF_66(address) -> addresses[i]
REF_67(bool) -> awaitingRew[REF_66]
CONDITION REF_67"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
addresses[i].transfer((newReward * balances[addresses[i]]) / totalSupply)

IRs:
REF_68(address) -> addresses[i]
REF_70(address) -> addresses[i]
REF_71(uint256) -> balances[REF_70]
TMP_61(uint256) = newReward * REF_71
TMP_62(uint256) = TMP_61 / totalSupply
Transfer dest:REF_68 value:TMP_62"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
awaitingRew[addresses[i]] = false

IRs:
REF_72(address) -> addresses[i]
REF_73(bool) -> awaitingRew[REF_72]
REF_73(bool) (->awaitingRew) := False(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_64(uint32) := i(uint32)
i(uint32) = i + 1"];
14->6;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
allRewPaid = checkAllRewPaid()

IRs:
TMP_65(bool) = INTERNAL_CALL, Obredis.checkAllRewPaid()()
allRewPaid(bool) := TMP_65(bool)"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, Obredis.isOwner()()"];
16->1;
}
// Function: 586.sol-Obredis-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 586.sol-Obredis-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(super.transfer(_to,_value))

IRs:
TMP_25(bool) = INTERNAL_CALL, StandardToken.transfer(address,uint256)(_to,_value)
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! isAddress[_to]

IRs:
REF_36(bool) -> isAddress[_to]
TMP_27 = UnaryType.BANG REF_36 
CONDITION TMP_27"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
addresses.push(_to)

IRs:
REF_38 -> LENGTH addresses
TMP_29(uint256) := REF_38(uint256)
TMP_30(uint256) = TMP_29 + 1
REF_38(uint256) (->addresses) := TMP_30(uint256)
REF_39(address) -> addresses[TMP_29]
REF_39(address) (->addresses) := _to(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isAddress[_to] = true

IRs:
REF_40(bool) -> isAddress[_to]
REF_40(bool) (->isAddress) := True(bool)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canSend()

IRs:
MODIFIER_CALL, Obredis.canSend()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 586.sol-Obredis-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 586.sol-Obredis-updateAllRewPaid()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allRewPaid = checkAllRewPaid()

IRs:
TMP_70(bool) = INTERNAL_CALL, Obredis.checkAllRewPaid()()
allRewPaid(bool) := TMP_70(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, Obredis.isOwner()()"];
2->1;
}
// Function: 586.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_13(mapping(address => uint256)) -> allowed[_owner]
REF_14(uint256) -> REF_13[_spender]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 586.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_11(mapping(address => uint256)) -> allowed[msg.sender]
REF_12(uint256) -> REF_11[_spender]
REF_12(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 586.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_10(uint256) -> balances[_owner]
RETURN REF_10"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 586.sol-StandardToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 586.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && _value > 0

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_0 >= _value
TMP_1(bool) = _value > 0
TMP_2(bool) = TMP_0 && TMP_1
CONDITION TMP_2"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_1(-> balances) = REF_1 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_2(uint256) -> balances[_to]
REF_2(-> balances) = REF_2 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 586.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0

IRs:
REF_3(uint256) -> balances[_from]
TMP_4(bool) = REF_3 >= _value
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
TMP_5(bool) = REF_5 >= _value
TMP_6(bool) = TMP_4 && TMP_5
TMP_7(bool) = _value > 0
TMP_8(bool) = TMP_6 && TMP_7
CONDITION TMP_8"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_6(uint256) -> balances[_to]
REF_6(-> balances) = REF_6 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_7(uint256) -> balances[_from]
REF_7(-> balances) = REF_7 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
REF_9(-> allowed) = REF_9 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 586.sol-Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 586.sol-Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 586.sol-Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 586.sol-Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 586.sol-Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 586.sol-Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
}
