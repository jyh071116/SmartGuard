digraph G {
// Function: 629.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_133 = CONVERT _input to bytes
_temp(bytes) := TMP_133(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_111 -> LENGTH _temp
_length(uint256) := REF_111(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,Invalid Length)

IRs:
TMP_134(bool) = _length <= 32
TMP_135(bool) = _length > 0
TMP_136(bool) = TMP_134 && TMP_135
TMP_137(None) = SOLIDITY_CALL require(bool,string)(TMP_136,Invalid Length)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,Can NOT start with SPACE)

IRs:
REF_112(None) -> _temp[0]
TMP_138(bool) = REF_112 != 32
TMP_139(uint256) = _length - 1
REF_113(None) -> _temp[TMP_139]
TMP_140(bool) = REF_113 != 32
TMP_141(bool) = TMP_138 && TMP_140
TMP_142(None) = SOLIDITY_CALL require(bool,string)(TMP_141,Can NOT start with SPACE)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_114(None) -> _temp[0]
TMP_143(bool) = REF_114 == 48
CONDITION TMP_143"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,CAN NOT Start With 0x)

IRs:
REF_115(None) -> _temp[1]
TMP_144(bool) = REF_115 != 120
TMP_145(None) = SOLIDITY_CALL require(bool,string)(TMP_144,CAN NOT Start With 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,CAN NOT Start With 0X)

IRs:
REF_116(None) -> _temp[1]
TMP_146(bool) = REF_116 != 88
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,CAN NOT Start With 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_148(bool) = i < _length
CONDITION TMP_148"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_117(None) -> _temp[i]
TMP_149(bool) = REF_117 > 64
REF_118(None) -> _temp[i]
TMP_150(bool) = REF_118 < 91
TMP_151(bool) = TMP_149 && TMP_150
CONDITION TMP_151"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_119(bytes1) -> _temp[i]
REF_120(None) -> _temp[i]
TMP_152 = CONVERT REF_120 to uint256
TMP_153(uint256) = TMP_152 + 32
TMP_154 = CONVERT TMP_153 to bytes1
REF_119(bytes1) (->_temp) := TMP_154(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_155(bool) = _hasNonNumber == False
CONDITION TMP_155"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),Include Illegal characters)

IRs:
REF_121(None) -> _temp[i]
TMP_156(bool) = REF_121 == 32
REF_122(None) -> _temp[i]
TMP_157(bool) = REF_122 > 96
REF_123(None) -> _temp[i]
TMP_158(bool) = REF_123 < 123
TMP_159(bool) = TMP_157 && TMP_158
TMP_160(bool) = TMP_156 || TMP_159
REF_124(None) -> _temp[i]
TMP_161(bool) = REF_124 > 47
REF_125(None) -> _temp[i]
TMP_162(bool) = REF_125 < 58
TMP_163(bool) = TMP_161 && TMP_162
TMP_164(bool) = TMP_160 || TMP_163
TMP_165(None) = SOLIDITY_CALL require(bool,string)(TMP_164,Include Illegal characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_126(None) -> _temp[i]
TMP_166(bool) = REF_126 == 32
CONDITION TMP_166"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,ONLY One Space Allowed)

IRs:
TMP_167(uint256) = i + 1
REF_127(None) -> _temp[TMP_167]
TMP_168(bool) = REF_127 != 32
TMP_169(None) = SOLIDITY_CALL require(bool,string)(TMP_168,ONLY One Space Allowed)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_170(bool) = _hasNonNumber == False
REF_128(None) -> _temp[i]
TMP_171(bool) = REF_128 < 48
REF_129(None) -> _temp[i]
TMP_172(bool) = REF_129 > 57
TMP_173(bool) = TMP_171 || TMP_172
TMP_174(bool) = TMP_170 && TMP_173
CONDITION TMP_174"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_175(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,All Numbers Not Allowed)

IRs:
TMP_176(bool) = _hasNonNumber == True
TMP_177(None) = SOLIDITY_CALL require(bool,string)(TMP_176,All Numbers Not Allowed)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 629.sol-PlayerBook-addGame(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(ceo == msg.sender,ONLY ceo CAN add game)

IRs:
TMP_118(bool) = ceo == msg.sender
TMP_119(None) = SOLIDITY_CALL require(bool,string)(TMP_118,ONLY ceo CAN add game)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(gameIDs_[_gameAddress] == 0,Game Already Registered!)

IRs:
REF_105(uint256) -> gameIDs_[_gameAddress]
TMP_120(bool) = REF_105 == 0
TMP_121(None) = SOLIDITY_CALL require(bool,string)(TMP_120,Game Already Registered!)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
gID_ ++

IRs:
TMP_122(uint256) := gID_(uint256)
gID_(uint256) = gID_ + 1"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = _gameNameStr.nameFilter()

IRs:
TMP_123(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_gameNameStr'] 
_name(bytes32) := TMP_123(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gameIDs_[_gameAddress] = gID_

IRs:
REF_107(uint256) -> gameIDs_[_gameAddress]
REF_107(uint256) (->gameIDs_) := gID_(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
gameNames_[_gameAddress] = _name

IRs:
REF_108(bytes32) -> gameNames_[_gameAddress]
REF_108(bytes32) (->gameNames_) := _name(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
games_[gID_] = PlayerBookReceiverInterface(_gameAddress)

IRs:
REF_109(PlayerBookReceiverInterface) -> games_[gID_]
TMP_124 = CONVERT _gameAddress to PlayerBookReceiverInterface
REF_109(PlayerBookReceiverInterface) (->games_) := TMP_124(PlayerBookReceiverInterface)"];
}
// Function: 629.sol-PlayerBook-addMeToAllGames()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_35(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_35(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_pID != 0,Player Not Found)

IRs:
TMP_57(bool) = _pID != 0
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,Player Not Found)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_laff = plyr_[_pID].laff

IRs:
REF_36(PlayerBook.Player) -> plyr_[_pID]
REF_37(uint256) -> REF_36.laff
_laff(uint256) := REF_37(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_38(PlayerBook.Player) -> plyr_[_pID]
REF_39(uint256) -> REF_38.names
_totalNames(uint256) := REF_39(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_name = plyr_[_pID].name

IRs:
REF_40(PlayerBook.Player) -> plyr_[_pID]
REF_41(bytes32) -> REF_40.name
_name(bytes32) := REF_41(bytes32)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i <= gID_

IRs:
TMP_59(bool) = i <= gID_
CONDITION TMP_59"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_laff)

IRs:
REF_42(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_42(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_laff']  "];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_totalNames > 1

IRs:
TMP_61(bool) = _totalNames > 1
CONDITION TMP_61"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
ii <= _totalNames

IRs:
TMP_62(bool) = ii <= _totalNames
CONDITION TMP_62"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_44(PlayerBookReceiverInterface) -> games_[i]
REF_46(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_47(bytes32) -> REF_46[ii]
HIGH_LEVEL_CALL, dest:REF_44(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_47']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ii ++

IRs:
TMP_64(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_65(uint256) := i(uint256)
i(uint256) = i + 1"];
20->10;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
21->1;
}
// Function: 629.sol-PlayerBook-addMeToGame(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_gameID <= gID_,Game Not Exist)

IRs:
TMP_47(bool) = _gameID <= gID_
TMP_48(None) = SOLIDITY_CALL require(bool,string)(TMP_47,Game Not Exist)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_22(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_22(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_pID != 0,Player Not Found)

IRs:
TMP_49(bool) = _pID != 0
TMP_50(None) = SOLIDITY_CALL require(bool,string)(TMP_49,Player Not Found)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_23(PlayerBook.Player) -> plyr_[_pID]
REF_24(uint256) -> REF_23.names
_totalNames(uint256) := REF_24(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[_gameID].receivePlayerInfo(_pID,_addr,plyr_[_pID].name,plyr_[_pID].laff)

IRs:
REF_25(PlayerBookReceiverInterface) -> games_[_gameID]
REF_27(PlayerBook.Player) -> plyr_[_pID]
REF_28(bytes32) -> REF_27.name
REF_29(PlayerBook.Player) -> plyr_[_pID]
REF_30(uint256) -> REF_29.laff
HIGH_LEVEL_CALL, dest:REF_25(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', 'REF_28', 'REF_30']  "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_totalNames > 1

IRs:
TMP_52(bool) = _totalNames > 1
CONDITION TMP_52"];
7->10[label="True"];
7->14[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->14;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
ii <= _totalNames

IRs:
TMP_53(bool) = ii <= _totalNames
CONDITION TMP_53"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
games_[_gameID].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_31(PlayerBookReceiverInterface) -> games_[_gameID]
REF_33(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_34(bytes32) -> REF_33[ii]
HIGH_LEVEL_CALL, dest:REF_31(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_34']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ii ++

IRs:
TMP_55(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
13->11;
14[label="Node Type: END_IF 14
"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
15->1;
}
// Function: 629.sol-PlayerBook-checkIfNameValid(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameStr.nameFilter()

IRs:
TMP_0(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameStr'] 
_name(bytes32) := TMP_0(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxName_[_name] == 0

IRs:
REF_1(uint256) -> pIDxName_[_name]
TMP_1(bool) = REF_1 == 0
CONDITION TMP_1"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 629.sol-PlayerBook-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ceo = msg.sender

IRs:
ceo(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cfo = msg.sender

IRs:
cfo(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pID_ = 0

IRs:
pID_(uint256) := 0(uint256)"];
}
// Function: 629.sol-PlayerBook-determinePID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxAddr_[_addr] == 0

IRs:
REF_77(uint256) -> pIDxAddr_[_addr]
TMP_84(bool) = REF_77 == 0
CONDITION TMP_84"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pID_ ++

IRs:
TMP_85(uint256) := pID_(uint256)
pID_(uint256) = pID_ + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = pID_

IRs:
REF_78(uint256) -> pIDxAddr_[_addr]
REF_78(uint256) (->pIDxAddr_) := pID_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[pID_].addr = _addr

IRs:
REF_79(PlayerBook.Player) -> plyr_[pID_]
REF_80(address) -> REF_79.addr
REF_80(address) (->plyr_) := _addr(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true)

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 629.sol-PlayerBook-getNameFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(registrationFee_)

IRs:
RETURN registrationFee_"];
}
// Function: 629.sol-PlayerBook-getPlayerAddr(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].addr)

IRs:
REF_86(PlayerBook.Player) -> plyr_[_pID]
REF_87(address) -> REF_86.addr
RETURN REF_87"];
}
// Function: 629.sol-PlayerBook-getPlayerID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
determinePID(_addr)

IRs:
TMP_86(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(pIDxAddr_[_addr])

IRs:
REF_81(uint256) -> pIDxAddr_[_addr]
RETURN REF_81"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
3->1;
}
// Function: 629.sol-PlayerBook-getPlayerLAff(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].laff)

IRs:
REF_84(PlayerBook.Player) -> plyr_[_pID]
REF_85(uint256) -> REF_84.laff
RETURN REF_85"];
}
// Function: 629.sol-PlayerBook-getPlayerName(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].name)

IRs:
REF_82(PlayerBook.Player) -> plyr_[_pID]
REF_83(bytes32) -> REF_82.name
RETURN REF_83"];
}
// Function: 629.sol-PlayerBook-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_addr == tx.origin)

IRs:
TMP_127(bool) = _addr == tx.origin
TMP_128(None) = SOLIDITY_CALL require(bool)(TMP_127)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_codeLength == 0,Not Human)

IRs:
TMP_129(bool) = _codeLength == 0
TMP_130(None) = SOLIDITY_CALL require(bool,string)(TMP_129,Not Human)"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 629.sol-PlayerBook-isRegisteredGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameIDs_[msg.sender] != 0)

IRs:
REF_110(uint256) -> gameIDs_[msg.sender]
TMP_131(bool) = REF_110 != 0
TMP_132(None) = SOLIDITY_CALL require(bool)(TMP_131)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 629.sol-PlayerBook-modCEOAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(0) != newCEO,CEO Can not be 0)

IRs:
TMP_2 = CONVERT 0 to address
TMP_3(bool) = TMP_2 != newCEO
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,CEO Can not be 0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(ceo == msg.sender,only  ceo can modify ceo)

IRs:
TMP_5(bool) = ceo == msg.sender
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,only  ceo can modify ceo)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ceo = newCEO

IRs:
ceo(address) := newCEO(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
4->1;
}
// Function: 629.sol-PlayerBook-modCFOAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(0) != newCFO,CFO Can not be 0)

IRs:
TMP_8 = CONVERT 0 to address
TMP_9(bool) = TMP_8 != newCFO
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,CFO Can not be 0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(cfo == msg.sender,only cfo can modify cfo)

IRs:
TMP_11(bool) = cfo == msg.sender
TMP_12(None) = SOLIDITY_CALL require(bool,string)(TMP_11,only cfo can modify cfo)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
cfo = newCFO

IRs:
cfo(address) := newCFO(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
4->1;
}
// Function: 629.sol-PlayerBook-registerNameCore(uint256,address,uint256,bytes32,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxName_[_name] != 0

IRs:
REF_54(uint256) -> pIDxName_[_name]
TMP_71(bool) = REF_54 != 0
CONDITION TMP_71"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,Name Already Exist!)

IRs:
REF_55(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_56(bool) -> REF_55[_name]
TMP_72(bool) = REF_56 == True
TMP_73(None) = SOLIDITY_CALL require(bool,string)(TMP_72,Name Already Exist!)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_57(PlayerBook.Player) -> plyr_[_pID]
REF_58(bytes32) -> REF_57.name
REF_58(bytes32) (->plyr_) := _name(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_59(uint256) -> pIDxName_[_name]
REF_59(uint256) (->pIDxName_) := _pID(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_60(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_61(bool) -> REF_60[_name]
TMP_74(bool) = REF_61 == False
CONDITION TMP_74"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_62(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_63(bool) -> REF_62[_name]
REF_63(bool) (->plyrNames_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].names ++

IRs:
REF_64(PlayerBook.Player) -> plyr_[_pID]
REF_65(uint256) -> REF_64.names
TMP_75(uint256) := REF_65(uint256)
REF_65(-> plyr_) = REF_65 + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyrNameList_[_pID][plyr_[_pID].names] = _name

IRs:
REF_66(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_67(PlayerBook.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.names
REF_69(bytes32) -> REF_66[REF_68]
REF_69(bytes32) (->plyrNameList_) := _name(bytes32)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
cfo.transfer(address(this).balance)

IRs:
TMP_76 = CONVERT this to address
TMP_77(uint256) = SOLIDITY_CALL balance(address)(TMP_76)
Transfer dest:cfo value:TMP_77"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_all == true

IRs:
TMP_79(bool) = _all == True
CONDITION TMP_79"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i <= gID_

IRs:
TMP_80(bool) = i <= gID_
CONDITION TMP_80"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_affID)

IRs:
REF_71(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_71(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_affID']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_82(uint256) := i(uint256)
i(uint256) = i + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,msg.value,now)

IRs:
REF_73(PlayerBook.Player) -> plyr_[_affID]
REF_74(address) -> REF_73.addr
REF_75(PlayerBook.Player) -> plyr_[_affID]
REF_76(bytes32) -> REF_75.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_74,REF_76,msg.value,now)"];
}
// Function: 629.sol-PlayerBook-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_14(bool) = msg.value >= registrationFee_
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_16(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_16(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_17(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_17(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_3(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_3(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID

IRs:
TMP_18(bool) = _affCode != 0
REF_4(PlayerBook.Player) -> plyr_[_pID]
REF_5(uint256) -> REF_4.laff
TMP_19(bool) = _affCode != REF_5
TMP_20(bool) = TMP_18 && TMP_19
TMP_21(bool) = _affCode != _pID
TMP_22(bool) = TMP_20 && TMP_21
CONDITION TMP_22"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_6(PlayerBook.Player) -> plyr_[_pID]
REF_7(uint256) -> REF_6.laff
REF_7(uint256) (->plyr_) := _affCode(uint256)"];
7->11;
8[label="Node Type: IF 8

EXPRESSION:
_affCode == _pID

IRs:
TMP_23(bool) = _affCode == _pID
CONDITION TMP_23"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_affCode = 0

IRs:
_affCode(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
registerNameCore(_pID,_addr,_affCode,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affCode,_name,_isNewPlayer,_all)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
13->1;
}
// Function: 629.sol-PlayerBook-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_88(bool) = msg.value >= registrationFee_
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_90(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_90(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_88(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_88(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_affID = _affCode

IRs:
_affID(uint256) := _affCode(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID

IRs:
TMP_91(bool) = _affID != 0
REF_89(PlayerBook.Player) -> plyr_[_pID]
REF_90(uint256) -> REF_89.laff
TMP_92(bool) = _affID != REF_90
TMP_93(bool) = TMP_91 && TMP_92
TMP_94(bool) = _affID != _pID
TMP_95(bool) = TMP_93 && TMP_94
CONDITION TMP_95"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_91(PlayerBook.Player) -> plyr_[_pID]
REF_92(uint256) -> REF_91.laff
REF_92(uint256) (->plyr_) := _affID(uint256)"];
6->10;
7[label="Node Type: IF 7

EXPRESSION:
_affID == _pID

IRs:
TMP_96(bool) = _affID == _pID
CONDITION TMP_96"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 629.sol-PlayerBook-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_26(bool) = msg.value >= registrationFee_
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_28(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_28(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_29(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_29(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_9(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_9(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_30 = CONVERT 0 to address
TMP_31(bool) = _affCode != TMP_30
TMP_32(bool) = _affCode != _addr
TMP_33(bool) = TMP_31 && TMP_32
CONDITION TMP_33"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_10(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_10(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_11(PlayerBook.Player) -> plyr_[_pID]
REF_12(uint256) -> REF_11.laff
TMP_34(bool) = _affID != REF_12
CONDITION TMP_34"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_13(PlayerBook.Player) -> plyr_[_pID]
REF_14(uint256) -> REF_13.laff
REF_14(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 629.sol-PlayerBook-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_99(bool) = msg.value >= registrationFee_
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_101(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_101(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_93(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_93(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_102 = CONVERT 0 to address
TMP_103(bool) = _affCode != TMP_102
TMP_104(bool) = _affCode != _addr
TMP_105(bool) = TMP_103 && TMP_104
CONDITION TMP_105"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_94(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_94(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_95(PlayerBook.Player) -> plyr_[_pID]
REF_96(uint256) -> REF_95.laff
TMP_106(bool) = _affID != REF_96
CONDITION TMP_106"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_97(PlayerBook.Player) -> plyr_[_pID]
REF_98(uint256) -> REF_97.laff
REF_98(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 629.sol-PlayerBook-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_37(bool) = msg.value >= registrationFee_
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_39(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_39(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_40(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_40(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_16(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_16(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_41(bool) = _affCode != 
TMP_42(bool) = _affCode != _name
TMP_43(bool) = TMP_41 && TMP_42
CONDITION TMP_43"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_17(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_17(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_18(PlayerBook.Player) -> plyr_[_pID]
REF_19(uint256) -> REF_18.laff
TMP_44(bool) = _affID != REF_19
CONDITION TMP_44"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_20(PlayerBook.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
REF_21(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 629.sol-PlayerBook-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_109(bool) = msg.value >= registrationFee_
TMP_110(None) = SOLIDITY_CALL require(bool,string)(TMP_109,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_111(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_111(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_99(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_99(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_112(bool) = _affCode != 
TMP_113(bool) = _affCode != _name
TMP_114(bool) = TMP_112 && TMP_113
CONDITION TMP_114"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_100(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_100(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_101(PlayerBook.Player) -> plyr_[_pID]
REF_102(uint256) -> REF_101.laff
TMP_115(bool) = _affID != REF_102
CONDITION TMP_115"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_103(PlayerBook.Player) -> plyr_[_pID]
REF_104(uint256) -> REF_103.laff
REF_104(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 629.sol-PlayerBook-setRegistrationFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(ceo == msg.sender,ONLY ceo CAN add game)

IRs:
TMP_125(bool) = ceo == msg.sender
TMP_126(None) = SOLIDITY_CALL require(bool,string)(TMP_125,ONLY ceo CAN add game)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
registrationFee_ = _fee

IRs:
registrationFee_(uint256) := _fee(uint256)"];
}
// Function: 629.sol-PlayerBook-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
registrationFee_ = 10000000000000000

IRs:
registrationFee_(uint256) := 10000000000000000(uint256)"];
}
// Function: 629.sol-PlayerBook-useMyOldName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_67(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_67(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_49(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_49(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,umm... thats not a name you own)

IRs:
REF_50(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_51(bool) -> REF_50[_name]
TMP_68(bool) = REF_51 == True
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,umm... thats not a name you own)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_52(PlayerBook.Player) -> plyr_[_pID]
REF_53(bytes32) -> REF_52.name
REF_53(bytes32) (->plyr_) := _name(bytes32)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
5->1;
}
// Function: 629.sol-PlayerBookReceiverInterface-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
}
// Function: 629.sol-PlayerBookReceiverInterface-receivePlayerNameList(uint256,bytes32)
digraph{
}
// Function: 629.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_178(uint256) = a + b
c(uint256) := TMP_178(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,Add Failed)

IRs:
TMP_179(bool) = c >= a
TMP_180(None) = SOLIDITY_CALL require(bool,string)(TMP_179,Add Failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
}
