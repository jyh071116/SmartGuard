digraph G {
// Function: 656.sol-Ambix-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_114 = CONVERT 0 to address
TMP_115(bool) = _newOwner != TMP_114
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 656.sol-Ambix-appendSource(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_a.length == _n.length)

IRs:
REF_117 -> LENGTH _a
REF_118 -> LENGTH _n
TMP_118(bool) = REF_117 == REF_118
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _a.length

IRs:
REF_119 -> LENGTH _a
TMP_120(bool) = i < REF_119
CONDITION TMP_120"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_a[i] != 0)

IRs:
REF_120(address) -> _a[i]
TMP_121(bool) = REF_120 != 0
TMP_122(None) = SOLIDITY_CALL require(bool)(TMP_121)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
A.push(_a)

IRs:
REF_122 -> LENGTH A
TMP_124(uint256) := REF_122(uint256)
TMP_125(uint256) = TMP_124 + 1
REF_122(uint256) (->A) := TMP_125(uint256)
REF_123(address[]) -> A[TMP_124]
REF_123(address[]) (->A) := _a(address[])"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
N.push(_n)

IRs:
REF_125 -> LENGTH N
TMP_127(uint256) := REF_125(uint256)
TMP_128(uint256) = TMP_127 + 1
REF_125(uint256) (->N) := TMP_128(uint256)
REF_126(uint256[]) -> N[TMP_127]
REF_126(uint256[]) (->N) := _n(uint256[])"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
// Function: 656.sol-Ambix-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 656.sol-Ambix-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_180(bool) = msg.sender == owner
TMP_181(None) = SOLIDITY_CALL require(bool)(TMP_180)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 656.sol-Ambix-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_110 = CONVERT 0 to address
owner(address) := TMP_110(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 656.sol-Ambix-run(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_ix < A.length)

IRs:
REF_131 -> LENGTH A
TMP_136(bool) = _ix < REF_131
TMP_137(None) = SOLIDITY_CALL require(bool)(TMP_136)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
N[_ix][0] > 0

IRs:
REF_132(uint256[]) -> N[_ix]
REF_133(uint256) -> REF_132[0]
TMP_138(bool) = REF_133 > 0
CONDITION TMP_138"];
3->4[label="True"];
3->22[label="False"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
token = StandardBurnableToken(A[_ix][0])

IRs:
REF_134(address[]) -> A[_ix]
REF_135(address) -> REF_134[0]
TMP_139 = CONVERT REF_135 to StandardBurnableToken
token(StandardBurnableToken) := TMP_139(StandardBurnableToken)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
mux = token.allowance(msg.sender,this) / N[_ix][0]

IRs:
TMP_140(uint256) = HIGH_LEVEL_CALL, dest:token(StandardBurnableToken), function:allowance, arguments:['msg.sender', 'this']  
REF_137(uint256[]) -> N[_ix]
REF_138(uint256) -> REF_137[0]
TMP_141(uint256) = TMP_140 / REF_138
mux(uint256) := TMP_141(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(mux > 0)

IRs:
TMP_142(bool) = mux > 0
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->17;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < A[_ix].length

IRs:
REF_139(address[]) -> A[_ix]
REF_140 -> LENGTH REF_139
TMP_144(bool) = i < REF_140
CONDITION TMP_144"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
token = StandardBurnableToken(A[_ix][i])

IRs:
REF_141(address[]) -> A[_ix]
REF_142(address) -> REF_141[i]
TMP_145 = CONVERT REF_142 to StandardBurnableToken
token(StandardBurnableToken) := TMP_145(StandardBurnableToken)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(token.transferFrom(msg.sender,this,mux * N[_ix][i]))

IRs:
REF_144(uint256[]) -> N[_ix]
REF_145(uint256) -> REF_144[i]
TMP_146(uint256) = mux * REF_145
TMP_147(bool) = HIGH_LEVEL_CALL, dest:token(StandardBurnableToken), function:transferFrom, arguments:['msg.sender', 'this', 'TMP_146']  
TMP_148(None) = SOLIDITY_CALL require(bool)(TMP_147)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
token.burn(mux * N[_ix][i])

IRs:
REF_147(uint256[]) -> N[_ix]
REF_148(uint256) -> REF_147[i]
TMP_149(uint256) = mux * REF_148
HIGH_LEVEL_CALL, dest:token(StandardBurnableToken), function:burn, arguments:['TMP_149']  "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
14->10;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->33;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < B.length

IRs:
REF_149 -> LENGTH B
TMP_151(bool) = i < REF_149
CONDITION TMP_151"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
token = StandardBurnableToken(B[i])

IRs:
REF_150(address) -> B[i]
TMP_152 = CONVERT REF_150 to StandardBurnableToken
token(StandardBurnableToken) := TMP_152(StandardBurnableToken)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
require(bool)(token.transfer(msg.sender,M[i] * mux))

IRs:
REF_152(uint256) -> M[i]
TMP_153(uint256) = REF_152 * mux
TMP_154(bool) = HIGH_LEVEL_CALL, dest:token(StandardBurnableToken), function:transfer, arguments:['msg.sender', 'TMP_153']  
TMP_155(None) = SOLIDITY_CALL require(bool)(TMP_154)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
21->18;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
require(bool)(A[_ix].length == 1 && B.length == 1)

IRs:
REF_153(address[]) -> A[_ix]
REF_154 -> LENGTH REF_153
TMP_156(bool) = REF_154 == 1
REF_155 -> LENGTH B
TMP_157(bool) = REF_155 == 1
TMP_158(bool) = TMP_156 && TMP_157
TMP_159(None) = SOLIDITY_CALL require(bool)(TMP_158)"];
22->23;
23[label="Node Type: NEW VARIABLE 23

EXPRESSION:
source = StandardBurnableToken(A[_ix][0])

IRs:
REF_156(address[]) -> A[_ix]
REF_157(address) -> REF_156[0]
TMP_160 = CONVERT REF_157 to StandardBurnableToken
source(StandardBurnableToken) := TMP_160(StandardBurnableToken)"];
23->24;
24[label="Node Type: NEW VARIABLE 24

EXPRESSION:
sink = StandardBurnableToken(B[0])

IRs:
REF_158(address) -> B[0]
TMP_161 = CONVERT REF_158 to StandardBurnableToken
sink(StandardBurnableToken) := TMP_161(StandardBurnableToken)"];
24->25;
25[label="Node Type: NEW VARIABLE 25

EXPRESSION:
scale = 10 ** 18 * sink.balanceOf(this) / source.totalSupply()

IRs:
TMP_162(uint256) = 10 ** 18
TMP_163(uint256) = HIGH_LEVEL_CALL, dest:sink(StandardBurnableToken), function:balanceOf, arguments:['this']  
TMP_164(uint256) = TMP_162 * TMP_163
TMP_165(uint256) = HIGH_LEVEL_CALL, dest:source(StandardBurnableToken), function:totalSupply, arguments:[]  
TMP_166(uint256) = TMP_164 / TMP_165
scale(uint256) := TMP_166(uint256)"];
25->26;
26[label="Node Type: NEW VARIABLE 26

EXPRESSION:
allowance = source.allowance(msg.sender,this)

IRs:
TMP_167(uint256) = HIGH_LEVEL_CALL, dest:source(StandardBurnableToken), function:allowance, arguments:['msg.sender', 'this']  
allowance(uint256) := TMP_167(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
require(bool)(allowance > 0)

IRs:
TMP_168(bool) = allowance > 0
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool)(source.transferFrom(msg.sender,this,allowance))

IRs:
TMP_170(bool) = HIGH_LEVEL_CALL, dest:source(StandardBurnableToken), function:transferFrom, arguments:['msg.sender', 'this', 'allowance']  
TMP_171(None) = SOLIDITY_CALL require(bool)(TMP_170)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
source.burn(allowance)

IRs:
HIGH_LEVEL_CALL, dest:source(StandardBurnableToken), function:burn, arguments:['allowance']  "];
29->30;
30[label="Node Type: NEW VARIABLE 30

EXPRESSION:
reward = scale * allowance / 10 ** 18

IRs:
TMP_173(uint256) = scale * allowance
TMP_174(uint256) = 10 ** 18
TMP_175(uint256) = TMP_173 / TMP_174
reward(uint256) := TMP_175(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
require(bool)(reward > 0)

IRs:
TMP_176(bool) = reward > 0
TMP_177(None) = SOLIDITY_CALL require(bool)(TMP_176)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
require(bool)(sink.transfer(msg.sender,reward))

IRs:
TMP_178(bool) = HIGH_LEVEL_CALL, dest:sink(StandardBurnableToken), function:transfer, arguments:['msg.sender', 'reward']  
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
32->33;
33[label="Node Type: END_IF 33
"];
}
// Function: 656.sol-Ambix-setSink(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_b.length == _m.length)

IRs:
REF_127 -> LENGTH _b
REF_128 -> LENGTH _m
TMP_130(bool) = REF_127 == REF_128
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _b.length

IRs:
REF_129 -> LENGTH _b
TMP_132(bool) = i < REF_129
CONDITION TMP_132"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_b[i] != 0)

IRs:
REF_130(address) -> _b[i]
TMP_133(bool) = REF_130 != 0
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
B = _b

IRs:
B(address[]) := _b(address[])"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
M = _m

IRs:
M(uint256[]) := _m(uint256[])"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
// Function: 656.sol-Ambix-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 656.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
}
// Function: 656.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 656.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_12(bool) = _value <= REF_0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_14 = CONVERT 0 to address
TMP_15(bool) = _to != TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 656.sol-BurnableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_16(uint256) -> balances[_who]
TMP_29(bool) = _value <= REF_16
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_17(uint256) -> balances[_who]
REF_18(uint256) -> balances[_who]
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_18', '_value'] 
REF_17(uint256) (->balances) := TMP_31(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_32(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_34 = CONVERT 0 to address
Emit Transfer(_who,TMP_34,_value)"];
}
// Function: 656.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 656.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 656.sol-BurnableToken-totalSupply()
digraph{
}
// Function: 656.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 656.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 656.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 656.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 656.sol-ERC20-totalSupply()
digraph{
}
// Function: 656.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 656.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 656.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 656.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 656.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 656.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_103 = CONVERT 0 to address
TMP_104(bool) = _newOwner != TMP_103
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 656.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 656.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_107(bool) = msg.sender == owner
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 656.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_99 = CONVERT 0 to address
owner(address) := TMP_99(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 656.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 656.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = _a + _b

IRs:
TMP_9(uint256) = _a + _b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= _a)

IRs:
TMP_10(bool) = c >= _a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 656.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_a / _b

IRs:
TMP_5(uint256) = _a / _b
RETURN TMP_5"];
}
// Function: 656.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_0(bool) = _a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = _a * _b

IRs:
TMP_1(uint256) = _a * _b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / _a == _b)

IRs:
TMP_2(uint256) = c / _a
TMP_3(bool) = TMP_2 == _b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 656.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_b <= _a)

IRs:
TMP_6(bool) = _b <= _a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_a - _b

IRs:
TMP_8(uint256) = _a - _b
RETURN TMP_8"];
}
// Function: 656.sol-StandardBurnableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_105(uint256) -> balances[_who]
TMP_87(bool) = _value <= REF_105
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_106(uint256) -> balances[_who]
REF_107(uint256) -> balances[_who]
TMP_89(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_107', '_value'] 
REF_106(uint256) (->balances) := TMP_89(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_90(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_90(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_92 = CONVERT 0 to address
Emit Transfer(_who,TMP_92,_value)"];
}
// Function: 656.sol-StandardBurnableToken-allowance(address,address)
digraph{
}
// Function: 656.sol-StandardBurnableToken-approve(address,uint256)
digraph{
}
// Function: 656.sol-StandardBurnableToken-balanceOf(address)
digraph{
}
// Function: 656.sol-StandardBurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 656.sol-StandardBurnableToken-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_110(mapping(address => uint256)) -> allowed[_from]
REF_111(uint256) -> REF_110[msg.sender]
TMP_94(bool) = _value <= REF_111
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_112(mapping(address => uint256)) -> allowed[_from]
REF_113(uint256) -> REF_112[msg.sender]
REF_114(mapping(address => uint256)) -> allowed[_from]
REF_115(uint256) -> REF_114[msg.sender]
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_115', '_value'] 
REF_113(uint256) (->allowed) := TMP_96(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(_from,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(_from,_value)"];
}
// Function: 656.sol-StandardBurnableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_88(mapping(address => uint256)) -> allowed[msg.sender]
REF_89(uint256) -> REF_88[_spender]
oldValue(uint256) := REF_89(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_75(bool) = _subtractedValue >= oldValue
CONDITION TMP_75"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_90(mapping(address => uint256)) -> allowed[msg.sender]
REF_91(uint256) -> REF_90[_spender]
REF_91(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_92(mapping(address => uint256)) -> allowed[msg.sender]
REF_93(uint256) -> REF_92[_spender]
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_93(uint256) (->allowed) := TMP_76(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_95(mapping(address => uint256)) -> allowed[msg.sender]
REF_96(uint256) -> REF_95[_spender]
Emit Approval(msg.sender,_spender,REF_96)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 656.sol-StandardBurnableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_81(mapping(address => uint256)) -> allowed[msg.sender]
REF_82(uint256) -> REF_81[_spender]
REF_83(mapping(address => uint256)) -> allowed[msg.sender]
REF_84(uint256) -> REF_83[_spender]
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_84', '_addedValue'] 
REF_82(uint256) (->allowed) := TMP_73(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_86(mapping(address => uint256)) -> allowed[msg.sender]
REF_87(uint256) -> REF_86[_spender]
Emit Approval(msg.sender,_spender,REF_87)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 656.sol-StandardBurnableToken-totalSupply()
digraph{
}
// Function: 656.sol-StandardBurnableToken-transfer(address,uint256)
digraph{
}
// Function: 656.sol-StandardBurnableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 656.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_45(mapping(address => uint256)) -> allowed[_owner]
REF_46(uint256) -> REF_45[_spender]
RETURN REF_46"];
}
// Function: 656.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_43(mapping(address => uint256)) -> allowed[msg.sender]
REF_44(uint256) -> REF_43[_spender]
REF_44(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 656.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 656.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_54(mapping(address => uint256)) -> allowed[msg.sender]
REF_55(uint256) -> REF_54[_spender]
oldValue(uint256) := REF_55(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue >= oldValue

IRs:
TMP_58(bool) = _subtractedValue >= oldValue
CONDITION TMP_58"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_56(mapping(address => uint256)) -> allowed[msg.sender]
REF_57(uint256) -> REF_56[_spender]
REF_57(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_58(mapping(address => uint256)) -> allowed[msg.sender]
REF_59(uint256) -> REF_58[_spender]
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_59(uint256) (->allowed) := TMP_59(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_61(mapping(address => uint256)) -> allowed[msg.sender]
REF_62(uint256) -> REF_61[_spender]
Emit Approval(msg.sender,_spender,REF_62)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 656.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_47(mapping(address => uint256)) -> allowed[msg.sender]
REF_48(uint256) -> REF_47[_spender]
REF_49(mapping(address => uint256)) -> allowed[msg.sender]
REF_50(uint256) -> REF_49[_spender]
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_50', '_addedValue'] 
REF_48(uint256) (->allowed) := TMP_56(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_52(mapping(address => uint256)) -> allowed[msg.sender]
REF_53(uint256) -> REF_52[_spender]
Emit Approval(msg.sender,_spender,REF_53)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 656.sol-StandardToken-totalSupply()
digraph{
}
// Function: 656.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 656.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_29(uint256) -> balances[_from]
TMP_44(bool) = _value <= REF_29
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_30(mapping(address => uint256)) -> allowed[_from]
REF_31(uint256) -> REF_30[msg.sender]
TMP_46(bool) = _value <= REF_31
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_48 = CONVERT 0 to address
TMP_49(bool) = _to != TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_32(uint256) -> balances[_from]
REF_33(uint256) -> balances[_from]
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_33', '_value'] 
REF_32(uint256) (->balances) := TMP_51(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_35(uint256) -> balances[_to]
REF_36(uint256) -> balances[_to]
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_36', '_value'] 
REF_35(uint256) (->balances) := TMP_52(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_38(mapping(address => uint256)) -> allowed[_from]
REF_39(uint256) -> REF_38[msg.sender]
REF_40(mapping(address => uint256)) -> allowed[_from]
REF_41(uint256) -> REF_40[msg.sender]
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_41', '_value'] 
REF_39(uint256) (->allowed) := TMP_53(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
