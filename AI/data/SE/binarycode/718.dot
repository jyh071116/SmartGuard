digraph G {
// Function: 718.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_181(uint256) = a + b
c(uint256) := TMP_181(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_182(bool) = c >= a
TMP_183(None) = SOLIDITY_CALL assert(bool)(TMP_182)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 718.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_177(uint256) = a / b
c(uint256) := TMP_177(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 718.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_172(bool) = a == 0
CONDITION TMP_172"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_173(uint256) = a * b
c(uint256) := TMP_173(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_174(uint256) = c / a
TMP_175(bool) = TMP_174 == b
TMP_176(None) = SOLIDITY_CALL assert(bool)(TMP_175)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 718.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_178(bool) = b <= a
TMP_179(None) = SOLIDITY_CALL assert(bool)(TMP_178)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_180(uint256) = a - b
RETURN TMP_180"];
}
// Function: 718.sol-Whales-Whales()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
administrators[owner] = true

IRs:
REF_0(bool) -> administrators[owner]
REF_0(bool) (->administrators) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAmbassadors = false

IRs:
onlyAmbassadors(bool) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
minimumprice = 1000000000000000000

IRs:
minimumprice(uint256) := 1000000000000000000(uint256)"];
}
// Function: 718.sol-Whales-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenBalanceLedger_[_customerAddress]

IRs:
REF_34(uint256) -> tokenBalanceLedger_[_customerAddress]
RETURN REF_34"];
}
// Function: 718.sol-Whales-buy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= minimumprice)

IRs:
TMP_0(bool) = msg.value >= minimumprice
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
purchaseTokens(msg.value,_referredBy)

IRs:
TMP_2(uint256) = INTERNAL_CALL, Whales.purchaseTokens(uint256,address)(msg.value,_referredBy)"];
}
// Function: 718.sol-Whales-buyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
tokenSupply_ == 0

IRs:
TMP_78(bool) = tokenSupply_ == 0
CONDITION TMP_78"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
tokenPriceInitial_ + tokenPriceIncremental_

IRs:
TMP_79(uint256) = tokenPriceInitial_ + tokenPriceIncremental_
RETURN TMP_79"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_ethereum = tokensToEthereum_(1e18)

IRs:
TMP_80(uint256) = INTERNAL_CALL, Whales.tokensToEthereum_(uint256)(1000000000000000000)
_ethereum(uint256) := TMP_80(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_dividends = SafeMath.div(_ethereum,dividendFee_)

IRs:
TMP_81(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_ethereum', 'dividendFee_'] 
_dividends(uint256) := TMP_81(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_taxedEthereum = SafeMath.add(_ethereum,_dividends)

IRs:
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ethereum', '_dividends'] 
_taxedEthereum(uint256) := TMP_82(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
_taxedEthereum

IRs:
RETURN _taxedEthereum"];
}
// Function: 718.sol-Whales-calculateEthereumReceived(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tokensToSell <= tokenSupply_)

IRs:
TMP_86(bool) = _tokensToSell <= tokenSupply_
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_ethereum = tokensToEthereum_(_tokensToSell)

IRs:
TMP_88(uint256) = INTERNAL_CALL, Whales.tokensToEthereum_(uint256)(_tokensToSell)
_ethereum(uint256) := TMP_88(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_dividends = SafeMath.div(_ethereum,dividendFee_)

IRs:
TMP_89(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_ethereum', 'dividendFee_'] 
_dividends(uint256) := TMP_89(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_taxedEthereum = SafeMath.sub(_ethereum,_dividends)

IRs:
TMP_90(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_ethereum', '_dividends'] 
_taxedEthereum(uint256) := TMP_90(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
_taxedEthereum

IRs:
RETURN _taxedEthereum"];
}
// Function: 718.sol-Whales-calculateTokensReceived(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_dividends = SafeMath.div(_ethereumToSpend,dividendFee_)

IRs:
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_ethereumToSpend', 'dividendFee_'] 
_dividends(uint256) := TMP_83(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_taxedEthereum = SafeMath.sub(_ethereumToSpend,_dividends)

IRs:
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_ethereumToSpend', '_dividends'] 
_taxedEthereum(uint256) := TMP_84(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_amountOfTokens = ethereumToTokens_(_taxedEthereum)

IRs:
TMP_85(uint256) = INTERNAL_CALL, Whales.ethereumToTokens_(uint256)(_taxedEthereum)
_amountOfTokens(uint256) := TMP_85(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_amountOfTokens

IRs:
RETURN _amountOfTokens"];
}
// Function: 718.sol-Whales-disableInitialStage()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
onlyAmbassadors = false

IRs:
onlyAmbassadors(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdministrator()

IRs:
MODIFIER_CALL, Whales.onlyAdministrator()()"];
2->1;
}
// Function: 718.sol-Whales-dividendsOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(int256(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude

IRs:
REF_35(uint256) -> tokenBalanceLedger_[_customerAddress]
TMP_68(uint256) = profitPerShare_ * REF_35
TMP_69 = CONVERT TMP_68 to int256
REF_36(int256) -> payoutsTo_[_customerAddress]
TMP_70(int256) = TMP_69 - REF_36
TMP_71 = CONVERT TMP_70 to uint256
TMP_72(uint256) = TMP_71 / magnitude
RETURN TMP_72"];
}
// Function: 718.sol-Whales-ethereumToTokens_(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_tokenPriceInitial = tokenPriceInitial_ * 1e18

IRs:
TMP_123(uint256) = tokenPriceInitial_ * 1000000000000000000
_tokenPriceInitial(uint256) := TMP_123(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_tokensReceived = ((SafeMath.sub((sqrt((_tokenPriceInitial ** 2) + (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18)) + (((tokenPriceIncremental_) ** 2) * (tokenSupply_ ** 2)) + (2 * (tokenPriceIncremental_) * _tokenPriceInitial * tokenSupply_))),_tokenPriceInitial)) / (tokenPriceIncremental_)) - (tokenSupply_)

IRs:
TMP_124(uint256) = _tokenPriceInitial ** 2
TMP_125(uint256) = tokenPriceIncremental_ * 1000000000000000000
TMP_126(uint256) = 2 * TMP_125
TMP_127(uint256) = _ethereum * 1000000000000000000
TMP_128(uint256) = TMP_126 * TMP_127
TMP_129(uint256) = TMP_124 + TMP_128
TMP_130(uint256) = tokenPriceIncremental_ ** 2
TMP_131(uint256) = tokenSupply_ ** 2
TMP_132(uint256) = TMP_130 * TMP_131
TMP_133(uint256) = TMP_129 + TMP_132
TMP_134(uint256) = 2 * tokenPriceIncremental_
TMP_135(uint256) = TMP_134 * _tokenPriceInitial
TMP_136(uint256) = TMP_135 * tokenSupply_
TMP_137(uint256) = TMP_133 + TMP_136
TMP_138(uint256) = INTERNAL_CALL, Whales.sqrt(uint256)(TMP_137)
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_138', '_tokenPriceInitial'] 
TMP_140(uint256) = TMP_139 / tokenPriceIncremental_
TMP_141(uint256) = TMP_140 - tokenSupply_
_tokensReceived(uint256) := TMP_141(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_tokensReceived

IRs:
RETURN _tokensReceived"];
}
// Function: 718.sol-Whales-exit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_tokens = tokenBalanceLedger_[_customerAddress]

IRs:
REF_4(uint256) -> tokenBalanceLedger_[_customerAddress]
_tokens(uint256) := REF_4(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_tokens > 0

IRs:
TMP_10(bool) = _tokens > 0
CONDITION TMP_10"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
sell(_tokens)

IRs:
INTERNAL_CALL, Whales.sell(uint256)(_tokens)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
withdraw()

IRs:
INTERNAL_CALL, Whales.withdraw()()"];
}
// Function: 718.sol-Whales-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
purchaseTokens(msg.value,0x0)

IRs:
TMP_3(uint256) = INTERNAL_CALL, Whales.purchaseTokens(uint256,address)(msg.value,0)"];
}
// Function: 718.sol-Whales-myDividends(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->3;
3[label="Node Type: IF 3

EXPRESSION:
_includeReferralBonus

IRs:
CONDITION _includeReferralBonus"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
dividendsOf(_customerAddress) + referralBalance_[_customerAddress]

IRs:
TMP_65(uint256) = INTERNAL_CALL, Whales.dividendsOf(address)(_customerAddress)
REF_33(uint256) -> referralBalance_[_customerAddress]
TMP_66(uint256) = TMP_65 + REF_33
RETURN TMP_66"];
5[label="Node Type: RETURN 5

EXPRESSION:
dividendsOf(_customerAddress)

IRs:
TMP_67(uint256) = INTERNAL_CALL, Whales.dividendsOf(address)(_customerAddress)
RETURN TMP_67"];
}
// Function: 718.sol-Whales-myTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
balanceOf(_customerAddress)

IRs:
TMP_64(uint256) = INTERNAL_CALL, Whales.balanceOf(address)(_customerAddress)
RETURN TMP_64"];
}
// Function: 718.sol-Whales-onlyAdministrator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_170(bool) = msg.sender == owner
TMP_171(None) = SOLIDITY_CALL require(bool)(TMP_170)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 718.sol-Whales-onlyBagholders()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(myTokens() > 0)

IRs:
TMP_164(uint256) = INTERNAL_CALL, Whales.myTokens()()
TMP_165(bool) = TMP_164 > 0
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 718.sol-Whales-onlyStronghands()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(myDividends(true) > 0)

IRs:
TMP_167(uint256) = INTERNAL_CALL, Whales.myDividends(bool)(True)
TMP_168(bool) = TMP_167 > 0
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 718.sol-Whales-purchaseTokens(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_undividedDividends = SafeMath.div(_incomingEthereum,dividendFee_)

IRs:
TMP_91(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_incomingEthereum', 'dividendFee_'] 
_undividedDividends(uint256) := TMP_91(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_referralBonus = SafeMath.div(_undividedDividends,3)

IRs:
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_undividedDividends', '3'] 
_referralBonus(uint256) := TMP_92(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_dividends = SafeMath.sub(_undividedDividends,_referralBonus)

IRs:
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_undividedDividends', '_referralBonus'] 
_dividends(uint256) := TMP_93(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_taxedEthereum = SafeMath.sub(_incomingEthereum,_undividedDividends)

IRs:
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_incomingEthereum', '_undividedDividends'] 
_taxedEthereum(uint256) := TMP_94(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_amountOfTokens = ethereumToTokens_(_taxedEthereum)

IRs:
TMP_95(uint256) = INTERNAL_CALL, Whales.ethereumToTokens_(uint256)(_taxedEthereum)
_amountOfTokens(uint256) := TMP_95(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_fee = _dividends * magnitude

IRs:
TMP_96(uint256) = _dividends * magnitude
_fee(uint256) := TMP_96(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_))

IRs:
TMP_97(bool) = _amountOfTokens > 0
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_amountOfTokens', 'tokenSupply_'] 
TMP_99(bool) = TMP_98 > tokenSupply_
TMP_100(bool) = TMP_97 && TMP_99
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_referredBy != 0x0000000000000000000000000000000000000000 && _referredBy != _customerAddress && tokenBalanceLedger_[_referredBy] >= stakingRequirement

IRs:
TMP_102(bool) = _referredBy != 0
TMP_103(bool) = _referredBy != _customerAddress
TMP_104(bool) = TMP_102 && TMP_103
REF_50(uint256) -> tokenBalanceLedger_[_referredBy]
TMP_105(bool) = REF_50 >= stakingRequirement
TMP_106(bool) = TMP_104 && TMP_105
CONDITION TMP_106"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy],_referralBonus)

IRs:
REF_51(uint256) -> referralBalance_[_referredBy]
REF_53(uint256) -> referralBalance_[_referredBy]
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_53', '_referralBonus'] 
REF_51(uint256) (->referralBalance_) := TMP_107(uint256)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
referralBalance_[owner] = SafeMath.add(referralBalance_[owner],_referralBonus)

IRs:
REF_54(uint256) -> referralBalance_[owner]
REF_56(uint256) -> referralBalance_[owner]
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_56', '_referralBonus'] 
REF_54(uint256) (->referralBalance_) := TMP_108(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
tokenSupply_ > 0

IRs:
TMP_109(bool) = tokenSupply_ > 0
CONDITION TMP_109"];
13->14[label="True"];
13->17[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
tokenSupply_ = SafeMath.add(tokenSupply_,_amountOfTokens)

IRs:
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokenSupply_', '_amountOfTokens'] 
tokenSupply_(uint256) := TMP_110(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
profitPerShare_ += (_dividends * magnitude / (tokenSupply_))

IRs:
TMP_111(uint256) = _dividends * magnitude
TMP_112(uint256) = TMP_111 / tokenSupply_
profitPerShare_(uint256) = profitPerShare_ + TMP_112"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / (tokenSupply_))))

IRs:
TMP_113(uint256) = _dividends * magnitude
TMP_114(uint256) = TMP_113 / tokenSupply_
TMP_115(uint256) = _amountOfTokens * TMP_114
TMP_116(uint256) = _fee - TMP_115
TMP_117(uint256) = _fee - TMP_116
_fee(uint256) := TMP_117(uint256)"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tokenSupply_ = _amountOfTokens

IRs:
tokenSupply_(uint256) := _amountOfTokens(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress],_amountOfTokens)

IRs:
REF_58(uint256) -> tokenBalanceLedger_[_customerAddress]
REF_60(uint256) -> tokenBalanceLedger_[_customerAddress]
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_60', '_amountOfTokens'] 
REF_58(uint256) (->tokenBalanceLedger_) := TMP_118(uint256)"];
19->20;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
_updatedPayouts = int256((profitPerShare_ * _amountOfTokens) - _fee)

IRs:
TMP_119(uint256) = profitPerShare_ * _amountOfTokens
TMP_120(uint256) = TMP_119 - _fee
TMP_121 = CONVERT TMP_120 to int256
_updatedPayouts(int256) := TMP_121(int256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
payoutsTo_[_customerAddress] += _updatedPayouts

IRs:
REF_61(int256) -> payoutsTo_[_customerAddress]
REF_61(-> payoutsTo_) = REF_61 + _updatedPayouts"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
onTokenPurchase(_customerAddress,_incomingEthereum,_amountOfTokens,_referredBy)

IRs:
Emit onTokenPurchase(_customerAddress,_incomingEthereum,_amountOfTokens,_referredBy)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
_amountOfTokens

IRs:
RETURN _amountOfTokens"];
}
// Function: 718.sol-Whales-reinvest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_dividends = myDividends(false)

IRs:
TMP_4(uint256) = INTERNAL_CALL, Whales.myDividends(bool)(False)
_dividends(uint256) := TMP_4(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
payoutsTo_[_customerAddress] += int256(_dividends * magnitude)

IRs:
REF_1(int256) -> payoutsTo_[_customerAddress]
TMP_5(uint256) = _dividends * magnitude
TMP_6 = CONVERT TMP_5 to int256
REF_1(-> payoutsTo_) = REF_1 + TMP_6"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_dividends += referralBalance_[_customerAddress]

IRs:
REF_2(uint256) -> referralBalance_[_customerAddress]
_dividends(uint256) = _dividends + REF_2"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
referralBalance_[_customerAddress] = 0

IRs:
REF_3(uint256) -> referralBalance_[_customerAddress]
REF_3(uint256) (->referralBalance_) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_tokens = purchaseTokens(_dividends,0x0)

IRs:
TMP_7(uint256) = INTERNAL_CALL, Whales.purchaseTokens(uint256,address)(_dividends,0)
_tokens(uint256) := TMP_7(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onReinvestment(_customerAddress,_dividends,_tokens)

IRs:
Emit onReinvestment(_customerAddress,_dividends,_tokens)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyStronghands()

IRs:
MODIFIER_CALL, Whales.onlyStronghands()()"];
8->1;
}
// Function: 718.sol-Whales-sell(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amountOfTokens <= tokenBalanceLedger_[_customerAddress])

IRs:
REF_9(uint256) -> tokenBalanceLedger_[_customerAddress]
TMP_19(bool) = _amountOfTokens <= REF_9
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_tokens = _amountOfTokens

IRs:
_tokens(uint256) := _amountOfTokens(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_ethereum = tokensToEthereum_(_tokens)

IRs:
TMP_21(uint256) = INTERNAL_CALL, Whales.tokensToEthereum_(uint256)(_tokens)
_ethereum(uint256) := TMP_21(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_dividends = SafeMath.div(_ethereum,dividendFee_)

IRs:
TMP_22(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_ethereum', 'dividendFee_'] 
_dividends(uint256) := TMP_22(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_taxedEthereum = SafeMath.sub(_ethereum,_dividends)

IRs:
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_ethereum', '_dividends'] 
_taxedEthereum(uint256) := TMP_23(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokenSupply_ = SafeMath.sub(tokenSupply_,_tokens)

IRs:
TMP_24(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokenSupply_', '_tokens'] 
tokenSupply_(uint256) := TMP_24(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress],_tokens)

IRs:
REF_13(uint256) -> tokenBalanceLedger_[_customerAddress]
REF_15(uint256) -> tokenBalanceLedger_[_customerAddress]
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_15', '_tokens'] 
REF_13(uint256) (->tokenBalanceLedger_) := TMP_25(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_updatedPayouts = int256(profitPerShare_ * _tokens + (_taxedEthereum * magnitude))

IRs:
TMP_26(uint256) = profitPerShare_ * _tokens
TMP_27(uint256) = _taxedEthereum * magnitude
TMP_28(uint256) = TMP_26 + TMP_27
TMP_29 = CONVERT TMP_28 to int256
_updatedPayouts(int256) := TMP_29(int256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
payoutsTo_[_customerAddress] -= _updatedPayouts

IRs:
REF_16(int256) -> payoutsTo_[_customerAddress]
REF_16(-> payoutsTo_) = REF_16 - _updatedPayouts"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
tokenSupply_ > 0

IRs:
TMP_30(bool) = tokenSupply_ > 0
CONDITION TMP_30"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
profitPerShare_ = SafeMath.add(profitPerShare_,(_dividends * magnitude) / tokenSupply_)

IRs:
TMP_31(uint256) = _dividends * magnitude
TMP_32(uint256) = TMP_31 / tokenSupply_
TMP_33(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['profitPerShare_', 'TMP_32'] 
profitPerShare_(uint256) := TMP_33(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onTokenSell(_customerAddress,_tokens,_taxedEthereum)

IRs:
Emit onTokenSell(_customerAddress,_tokens,_taxedEthereum)"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyBagholders()

IRs:
MODIFIER_CALL, Whales.onlyBagholders()()"];
15->1;
}
// Function: 718.sol-Whales-sellPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
tokenSupply_ == 0

IRs:
TMP_73(bool) = tokenSupply_ == 0
CONDITION TMP_73"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
tokenPriceInitial_ - tokenPriceIncremental_

IRs:
TMP_74(uint256) = tokenPriceInitial_ - tokenPriceIncremental_
RETURN TMP_74"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_ethereum = tokensToEthereum_(1e18)

IRs:
TMP_75(uint256) = INTERNAL_CALL, Whales.tokensToEthereum_(uint256)(1000000000000000000)
_ethereum(uint256) := TMP_75(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_dividends = SafeMath.div(_ethereum,dividendFee_)

IRs:
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_ethereum', 'dividendFee_'] 
_dividends(uint256) := TMP_76(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_taxedEthereum = SafeMath.sub(_ethereum,_dividends)

IRs:
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_ethereum', '_dividends'] 
_taxedEthereum(uint256) := TMP_77(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
_taxedEthereum

IRs:
RETURN _taxedEthereum"];
}
// Function: 718.sol-Whales-setAdministrator(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
administrators[_identifier] = _status

IRs:
REF_31(bool) -> administrators[_identifier]
REF_31(bool) (->administrators) := _status(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdministrator()

IRs:
MODIFIER_CALL, Whales.onlyAdministrator()()"];
2->1;
}
// Function: 718.sol-Whales-setMinimumprice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minimumprice = _minprice

IRs:
minimumprice(uint256) := _minprice(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdministrator()

IRs:
MODIFIER_CALL, Whales.onlyAdministrator()()"];
2->1;
}
// Function: 718.sol-Whales-setName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdministrator()

IRs:
MODIFIER_CALL, Whales.onlyAdministrator()()"];
2->1;
}
// Function: 718.sol-Whales-setStakingRequirement(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stakingRequirement = _amountOfTokens

IRs:
stakingRequirement(uint256) := _amountOfTokens(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdministrator()

IRs:
MODIFIER_CALL, Whales.onlyAdministrator()()"];
2->1;
}
// Function: 718.sol-Whales-setSymbol(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdministrator()

IRs:
MODIFIER_CALL, Whales.onlyAdministrator()()"];
2->1;
}
// Function: 718.sol-Whales-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
dividendFee_ = 10

IRs:
dividendFee_(uint8) := 10(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
tokenPriceInitial_ = 100000000000

IRs:
tokenPriceInitial_(uint256) := 100000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
tokenPriceIncremental_ = 10000000000

IRs:
tokenPriceIncremental_(uint256) := 10000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
magnitude = 2 ** 64

IRs:
TMP_163(uint256) = 2 ** 64
magnitude(uint256) := TMP_163(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
ambassadorMaxPurchase_ = 1000000000000000000

IRs:
ambassadorMaxPurchase_(uint256) := 1000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
ambassadorQuota_ = 20000000000000000000

IRs:
ambassadorQuota_(uint256) := 20000000000000000000(uint256)"];
}
// Function: 718.sol-Whales-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Whales

IRs:
name(string) := Whales(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = WETH

IRs:
symbol(string) := WETH(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
stakingRequirement = 100e18

IRs:
stakingRequirement(uint256) := 100000000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
tokenSupply_ = 0

IRs:
tokenSupply_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
onlyAmbassadors = true

IRs:
onlyAmbassadors(bool) := True(bool)"];
}
// Function: 718.sol-Whales-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = (x + 1) / 2

IRs:
TMP_157(uint256) = x + 1
TMP_158(uint256) = TMP_157 / 2
z(uint256) := TMP_158(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_159(bool) = z < y
CONDITION TMP_159"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = (x / z + z) / 2

IRs:
TMP_160(uint256) = x / z
TMP_161(uint256) = TMP_160 + z
TMP_162(uint256) = TMP_161 / 2
z(uint256) := TMP_162(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 718.sol-Whales-tokensToEthereum_(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokens_ = (_tokens + 1e18)

IRs:
TMP_142(uint256) = _tokens + 1000000000000000000
tokens_(uint256) := TMP_142(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_tokenSupply = (tokenSupply_ + 1e18)

IRs:
TMP_143(uint256) = tokenSupply_ + 1000000000000000000
_tokenSupply(uint256) := TMP_143(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_etherReceived = (SafeMath.sub((((tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))) - tokenPriceIncremental_) * (tokens_ - 1e18)),(tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2) / 1e18)

IRs:
TMP_144(uint256) = _tokenSupply / 1000000000000000000
TMP_145(uint256) = tokenPriceIncremental_ * TMP_144
TMP_146(uint256) = tokenPriceInitial_ + TMP_145
TMP_147(uint256) = TMP_146 - tokenPriceIncremental_
TMP_148(uint256) = tokens_ - 1000000000000000000
TMP_149(uint256) = TMP_147 * TMP_148
TMP_150(uint256) = tokens_ ** 2
TMP_151(uint256) = TMP_150 - tokens_
TMP_152(uint256) = TMP_151 / 1000000000000000000
TMP_153(uint256) = tokenPriceIncremental_ * TMP_152
TMP_154(uint256) = TMP_153 / 2
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_149', 'TMP_154'] 
TMP_156(uint256) = TMP_155 / 1000000000000000000
_etherReceived(uint256) := TMP_156(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_etherReceived

IRs:
RETURN _etherReceived"];
}
// Function: 718.sol-Whales-totalEthereumBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
this.balance

IRs:
REF_32(uint256) = SOLIDITY_CALL balance(address)(this)
RETURN REF_32"];
}
// Function: 718.sol-Whales-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenSupply_

IRs:
RETURN tokenSupply_"];
}
// Function: 718.sol-Whales-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress])

IRs:
TMP_36 = UnaryType.BANG onlyAmbassadors 
REF_18(uint256) -> tokenBalanceLedger_[_customerAddress]
TMP_37(bool) = _amountOfTokens <= REF_18
TMP_38(bool) = TMP_36 && TMP_37
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
myDividends(true) > 0

IRs:
TMP_40(uint256) = INTERNAL_CALL, Whales.myDividends(bool)(True)
TMP_41(bool) = TMP_40 > 0
CONDITION TMP_41"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
withdraw()

IRs:
INTERNAL_CALL, Whales.withdraw()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_tokenFee = SafeMath.div(_amountOfTokens,dividendFee_)

IRs:
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_amountOfTokens', 'dividendFee_'] 
_tokenFee(uint256) := TMP_43(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_taxedTokens = SafeMath.sub(_amountOfTokens,_tokenFee)

IRs:
TMP_44(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_amountOfTokens', '_tokenFee'] 
_taxedTokens(uint256) := TMP_44(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_dividends = tokensToEthereum_(_tokenFee)

IRs:
TMP_45(uint256) = INTERNAL_CALL, Whales.tokensToEthereum_(uint256)(_tokenFee)
_dividends(uint256) := TMP_45(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
tokenSupply_ = SafeMath.sub(tokenSupply_,_tokenFee)

IRs:
TMP_46(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokenSupply_', '_tokenFee'] 
tokenSupply_(uint256) := TMP_46(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress],_amountOfTokens)

IRs:
REF_22(uint256) -> tokenBalanceLedger_[_customerAddress]
REF_24(uint256) -> tokenBalanceLedger_[_customerAddress]
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_24', '_amountOfTokens'] 
REF_22(uint256) (->tokenBalanceLedger_) := TMP_47(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress],_taxedTokens)

IRs:
REF_25(uint256) -> tokenBalanceLedger_[_toAddress]
REF_27(uint256) -> tokenBalanceLedger_[_toAddress]
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_27', '_taxedTokens'] 
REF_25(uint256) (->tokenBalanceLedger_) := TMP_48(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
payoutsTo_[_customerAddress] -= int256(profitPerShare_ * _amountOfTokens)

IRs:
REF_28(int256) -> payoutsTo_[_customerAddress]
TMP_49(uint256) = profitPerShare_ * _amountOfTokens
TMP_50 = CONVERT TMP_49 to int256
REF_28(-> payoutsTo_) = REF_28 - TMP_50"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
payoutsTo_[_toAddress] += int256(profitPerShare_ * _taxedTokens)

IRs:
REF_29(int256) -> payoutsTo_[_toAddress]
TMP_51(uint256) = profitPerShare_ * _taxedTokens
TMP_52 = CONVERT TMP_51 to int256
REF_29(-> payoutsTo_) = REF_29 + TMP_52"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
profitPerShare_ = SafeMath.add(profitPerShare_,(_dividends * magnitude) / tokenSupply_)

IRs:
TMP_53(uint256) = _dividends * magnitude
TMP_54(uint256) = TMP_53 / tokenSupply_
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['profitPerShare_', 'TMP_54'] 
profitPerShare_(uint256) := TMP_55(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Transfer(_customerAddress,_toAddress,_taxedTokens)

IRs:
Emit Transfer(_customerAddress,_toAddress,_taxedTokens)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
true

IRs:
RETURN True"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
onlyBagholders()

IRs:
MODIFIER_CALL, Whales.onlyBagholders()()"];
17->1;
}
// Function: 718.sol-Whales-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_dividends = myDividends(false)

IRs:
TMP_13(uint256) = INTERNAL_CALL, Whales.myDividends(bool)(False)
_dividends(uint256) := TMP_13(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
payoutsTo_[_customerAddress] += int256(_dividends * magnitude)

IRs:
REF_5(int256) -> payoutsTo_[_customerAddress]
TMP_14(uint256) = _dividends * magnitude
TMP_15 = CONVERT TMP_14 to int256
REF_5(-> payoutsTo_) = REF_5 + TMP_15"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_dividends += referralBalance_[_customerAddress]

IRs:
REF_6(uint256) -> referralBalance_[_customerAddress]
_dividends(uint256) = _dividends + REF_6"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
referralBalance_[_customerAddress] = 0

IRs:
REF_7(uint256) -> referralBalance_[_customerAddress]
REF_7(uint256) (->referralBalance_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_customerAddress.transfer(_dividends)

IRs:
Transfer dest:_customerAddress value:_dividends"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onWithdraw(_customerAddress,_dividends)

IRs:
Emit onWithdraw(_customerAddress,_dividends)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyStronghands()

IRs:
MODIFIER_CALL, Whales.onlyStronghands()()"];
8->1;
}
}
