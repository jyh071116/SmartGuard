digraph G {
// Function: 724.sol-HourglassInterface-buy(address)
digraph{
}
// Function: 724.sol-HourglassInterface-withdraw()
digraph{
}
// Function: 724.sol-StrongHand-buy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
p3dContract.buy.value(msg.value)(_referrer)

IRs:
TMP_9(uint256) = HIGH_LEVEL_CALL, dest:p3dContract(HourglassInterface), function:buy, arguments:['_referrer'] value:msg.value "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, StrongHand.onlyOwner()()"];
2->1;
}
// Function: 724.sol-StrongHand-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buy(_referrer)

IRs:
INTERNAL_CALL, StrongHand.buy(address)(_referrer)"];
}
// Function: 724.sol-StrongHand-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 724.sol-StrongHand-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 724.sol-StrongHand-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
p3dContract = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe)

IRs:
TMP_16 = CONVERT 1024571475019602228541062862604156821122634084286 to HourglassInterface
p3dContract(HourglassInterface) := TMP_16(HourglassInterface)"];
}
// Function: 724.sol-StrongHand-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
p3dContract.withdraw()

IRs:
HIGH_LEVEL_CALL, dest:p3dContract(HourglassInterface), function:withdraw, arguments:[]  "];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_12 = CONVERT this to address
TMP_13(uint256) = SOLIDITY_CALL balance(address)(TMP_12)
Transfer dest:owner value:TMP_13"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, StrongHand.onlyOwner()()"];
3->1;
}
// Function: 724.sol-StrongHandsManager-getStrong(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(strongHands[msg.sender] == address(0),you already became a Stronghand)

IRs:
REF_0(address) -> strongHands[msg.sender]
TMP_0 = CONVERT 0 to address
TMP_1(bool) = REF_0 == TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,you already became a Stronghand)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
strongHands[msg.sender] = (new StrongHand).value(msg.value)(msg.sender,_referrer)

IRs:
REF_1(address) -> strongHands[msg.sender]
TMP_5(StrongHand) = new StrongHand(msg.sender,_referrer) value:msg.value 
REF_1(address) (->strongHands) := TMP_5(StrongHand)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
CreateStrongHand(msg.sender,strongHands[msg.sender])

IRs:
REF_3(address) -> strongHands[msg.sender]
Emit CreateStrongHand(msg.sender,REF_3)"];
}
}
