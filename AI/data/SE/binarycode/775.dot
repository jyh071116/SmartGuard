digraph G {
// Function: 775.sol-ChessLottery-AddTicket()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == ticketPrice)

IRs:
TMP_6(bool) = msg.value == ticketPrice
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(numtickets < maxTickets)

IRs:
TMP_8(bool) = numtickets < maxTickets
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
lastTicketTime = now

IRs:
lastTicketTime(uint256) := now(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
numtickets += 1

IRs:
numtickets(uint256) = numtickets + 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalBounty += ticketPrice

IRs:
totalBounty(uint256) = totalBounty + ticketPrice"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
success = numtickets == maxTickets

IRs:
TMP_10(bool) = numtickets == maxTickets
success(bool) := TMP_10(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
NewTicket(msg.sender,success)

IRs:
Emit NewTicket(msg.sender,success)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
success

IRs:
CONDITION success"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
PayWinner(msg.sender)

IRs:
INTERNAL_CALL, ChessLottery.PayWinner(address)(msg.sender)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 775.sol-ChessLottery-ChessLottery()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
worldOwner = msg.sender

IRs:
worldOwner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ticketPrice = 1 * 10 ** 18

IRs:
TMP_0(uint256) = 10 ** 18
TMP_1(uint256) = 1 * TMP_0
ticketPrice(uint256) := TMP_1(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
maxTickets = 10

IRs:
maxTickets(uint256) := 10(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_direction = 0

IRs:
_direction(uint8) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lottoIndex = 1

IRs:
lottoIndex(uint256) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
lastTicketTime = 0

IRs:
lastTicketTime(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
numtickets = 0

IRs:
numtickets(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalBounty = 0

IRs:
totalBounty(uint256) := 0(uint256)"];
}
// Function: 775.sol-ChessLottery-PayWinner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(numtickets == maxTickets)

IRs:
TMP_13(bool) = numtickets == maxTickets
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
ownerTax = totalBounty / 1000

IRs:
TMP_15(uint256) = totalBounty / 1000
ownerTax(uint256) := TMP_15(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
winnerPrice = totalBounty - ownerTax

IRs:
TMP_16(uint256) = totalBounty - ownerTax
winnerPrice(uint256) := TMP_16(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LottoComplete(msg.sender,lottoIndex,winnerPrice)

IRs:
Emit LottoComplete(msg.sender,lottoIndex,winnerPrice)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lottoIndex += 1

IRs:
lottoIndex(uint256) = lottoIndex + 1"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
numtickets = 0

IRs:
numtickets(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
totalBounty = 0

IRs:
totalBounty(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_direction == 0 && maxTickets < 20

IRs:
TMP_18(bool) = _direction == 0
TMP_19(bool) = maxTickets < 20
TMP_20(bool) = TMP_18 && TMP_19
CONDITION TMP_20"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
maxTickets += 1

IRs:
maxTickets(uint256) = maxTickets + 1"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_direction == 1 && maxTickets > 10

IRs:
TMP_21(bool) = _direction == 1
TMP_22(bool) = maxTickets > 10
TMP_23(bool) = TMP_21 && TMP_22
CONDITION TMP_23"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
maxTickets -= 1

IRs:
maxTickets(uint256) = maxTickets - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_direction == 0 && maxTickets == 20

IRs:
TMP_24(bool) = _direction == 0
TMP_25(bool) = maxTickets == 20
TMP_26(bool) = TMP_24 && TMP_25
CONDITION TMP_26"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_direction = 1

IRs:
_direction(uint8) := 1(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_direction == 1 && maxTickets == 10

IRs:
TMP_27(bool) = _direction == 1
TMP_28(bool) = maxTickets == 10
TMP_29(bool) = TMP_27 && TMP_28
CONDITION TMP_29"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_direction = 0

IRs:
_direction(uint8) := 0(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
worldOwner.transfer(ownerTax)

IRs:
Transfer dest:worldOwner value:ownerTax"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
winner.transfer(winnerPrice)

IRs:
Transfer dest:winner value:winnerPrice"];
}
// Function: 775.sol-ChessLottery-getBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balance = 0

IRs:
balance(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
worldOwner == msg.sender

IRs:
TMP_2(bool) = worldOwner == msg.sender
CONDITION TMP_2"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balance = this.balance

IRs:
REF_0(uint256) = SOLIDITY_CALL balance(address)(this)
balance(uint256) := REF_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fcb041df610>])"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
balance

IRs:
RETURN balance"];
6[label="Node Type: RETURN 6

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 775.sol-ChessLottery-getLastTicketTime()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
time = lastTicketTime

IRs:
time(uint256) := lastTicketTime(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
time

IRs:
RETURN time"];
3[label="Node Type: RETURN 3

EXPRESSION:
time

IRs:
RETURN time"];
}
// Function: 775.sol-ChessLottery-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(worldOwner == msg.sender)

IRs:
TMP_3(bool) = worldOwner == msg.sender
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lottoIndex += 1

IRs:
lottoIndex(uint256) = lottoIndex + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
numtickets = 0

IRs:
numtickets(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalBounty = 0

IRs:
totalBounty(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
worldOwner.transfer(this.balance)

IRs:
REF_2(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:worldOwner value:REF_2"];
}
}
