digraph G {
// Function: 796.sol-lucky9io-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
gameOn == false

IRs:
TMP_4(bool) = gameOn == False
CONDITION TMP_4"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
msg.sender.transfer(msg.value)

IRs:
Transfer dest:msg.sender value:msg.value"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
msg.value * 1000 < 9

IRs:
TMP_6(uint256) = msg.value * 1000
TMP_7(bool) = TMP_6 < 9
CONDITION TMP_7"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
msg.sender.transfer(msg.value)

IRs:
Transfer dest:msg.sender value:msg.value"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
entry_number = entry_number + 1

IRs:
TMP_9(uint256) = entry_number + 1
entry_number(uint256) := TMP_9(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
value = address(this).balance

IRs:
TMP_10 = CONVERT this to address
TMP_11(uint256) = SOLIDITY_CALL balance(address)(TMP_10)
value(uint256) := TMP_11(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
entry_number % 999 == 0

IRs:
TMP_12(uint256) = entry_number % 999
TMP_13(bool) = TMP_12 == 0
CONDITION TMP_13"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
msg.sender.transfer(value * 8 / 10)

IRs:
TMP_14(uint256) = value * 8
TMP_15(uint256) = TMP_14 / 10
Transfer dest:msg.sender value:TMP_15"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
owner.transfer(value * 11 / 100)

IRs:
TMP_17(uint256) = value * 11
TMP_18(uint256) = TMP_17 / 100
Transfer dest:owner value:TMP_18"];
13->14;
14[label="Node Type: RETURN 14
"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
entry_number % 99 == 0

IRs:
TMP_20(uint256) = entry_number % 99
TMP_21(bool) = TMP_20 == 0
CONDITION TMP_21"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
msg.sender.transfer(90000000000000000)

IRs:
Transfer dest:msg.sender value:90000000000000000"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
owner.transfer(30000000000000000)

IRs:
Transfer dest:owner value:30000000000000000"];
18->19;
19[label="Node Type: RETURN 19
"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
entry_number % 9 == 0

IRs:
TMP_24(uint256) = entry_number % 9
TMP_25(bool) = TMP_24 == 0
CONDITION TMP_25"];
21->22[label="True"];
21->25[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
msg.sender.transfer(30000000000000000)

IRs:
Transfer dest:msg.sender value:30000000000000000"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
owner.transfer(10000000000000000)

IRs:
Transfer dest:owner value:10000000000000000"];
23->24;
24[label="Node Type: RETURN 24
"];
25[label="Node Type: END_IF 25
"];
}
// Function: 796.sol-lucky9io-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,Sender not authorized.)

IRs:
TMP_28(bool) = msg.sender == owner
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,Sender not authorized.)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 796.sol-lucky9io-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
gameOn = true

IRs:
gameOn(bool) := True(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
owner = 0x5Bf066c70C2B5e02F1C6723E72e82478Fec41201

IRs:
owner(address) := 524879292178148714565217700643753941818216288769(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
entry_number = 0

IRs:
entry_number(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
value = 0

IRs:
value(uint256) := 0(uint256)"];
}
// Function: 796.sol-lucky9io-stopGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameOn = false

IRs:
gameOn(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_0 = CONVERT this to address
TMP_1(uint256) = SOLIDITY_CALL balance(address)(TMP_0)
Transfer dest:owner value:TMP_1"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, lucky9io.onlyOwner()()"];
3->1;
}
}
