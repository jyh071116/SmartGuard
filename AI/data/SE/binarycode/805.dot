digraph G {
// Function: 805.sol-ERC721Holder-onERC721Received(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC721_RECEIVED

IRs:
RETURN ERC721_RECEIVED"];
}
// Function: 805.sol-ERC721Holder-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0x150b7a02

IRs:
ERC721_RECEIVED(bytes4) := 353073666(uint256)"];
}
// Function: 805.sol-ERC721Receiver-onERC721Received(address,address,uint256,bytes)
digraph{
}
// Function: 805.sol-ERC721Receiver-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0x150b7a02

IRs:
ERC721_RECEIVED(bytes4) := 353073666(uint256)"];
}
// Function: 805.sol-MLBNFT-approve(address,uint256)
digraph{
}
// Function: 805.sol-MLBNFT-checkIsAttached(uint256)
digraph{
}
// Function: 805.sol-MLBNFT-createPromoCollectible(uint8,uint8,uint256,address,uint256,uint256,uint256)
digraph{
}
// Function: 805.sol-MLBNFT-createSeedCollectible(uint8,uint8,uint256,address,uint256,uint256,uint256)
digraph{
}
// Function: 805.sol-MLBNFT-exists(uint256)
digraph{
}
// Function: 805.sol-MLBNFT-getApproved(uint256)
digraph{
}
// Function: 805.sol-MLBNFT-getPlayerId(uint256)
digraph{
}
// Function: 805.sol-MLBNFT-getTeamId(uint256)
digraph{
}
// Function: 805.sol-MLBNFT-isApprovedForAll(address,address)
digraph{
}
// Function: 805.sol-MLBNFT-ownerOf(uint256)
digraph{
}
// Function: 805.sol-MLBNFT-safeTransferFrom(address,address,uint256)
digraph{
}
// Function: 805.sol-MLBNFT-setApprovalForAll(address,bool)
digraph{
}
// Function: 805.sol-MLBNFT-transferFrom(address,address,uint256)
digraph{
}
// Function: 805.sol-OperationalControl-anyOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary || msg.sender == bankManager)

IRs:
TMP_36(bool) = msg.sender == gameManagerPrimary
TMP_37(bool) = msg.sender == gameManagerSecondary
TMP_38(bool) = TMP_36 || TMP_37
TMP_39(bool) = msg.sender == bankManager
TMP_40(bool) = TMP_38 || TMP_39
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-OperationalControl-onlyBanker()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == bankManager)

IRs:
TMP_34(bool) = msg.sender == bankManager
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-OperationalControl-onlyGameManager()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary)

IRs:
TMP_30(bool) = msg.sender == gameManagerPrimary
TMP_31(bool) = msg.sender == gameManagerSecondary
TMP_32(bool) = TMP_30 || TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-OperationalControl-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenNotPaused()()"];
3->1;
}
// Function: 805.sol-OperationalControl-setBanker(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newBK != address(0))

IRs:
TMP_22 = CONVERT 0 to address
TMP_23(bool) = _newBK != TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bankManager = _newBK

IRs:
bankManager(address) := _newBK(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBanker()

IRs:
MODIFIER_CALL, OperationalControl.onlyBanker()()"];
3->1;
}
// Function: 805.sol-OperationalControl-setPrimaryGameManager(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newGM != address(0))

IRs:
TMP_14 = CONVERT 0 to address
TMP_15(bool) = _newGM != TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameManagerPrimary = _newGM

IRs:
gameManagerPrimary(address) := _newGM(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
3->1;
}
// Function: 805.sol-OperationalControl-setSecondaryGameManager(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newGM != address(0))

IRs:
TMP_18 = CONVERT 0 to address
TMP_19(bool) = _newGM != TMP_18
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameManagerSecondary = _newGM

IRs:
gameManagerSecondary(address) := _newGM(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
3->1;
}
// Function: 805.sol-OperationalControl-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 805.sol-OperationalControl-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenPaused()()"];
3->1;
}
// Function: 805.sol-OperationalControl-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_42 = UnaryType.BANG paused 
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-OperationalControl-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_44(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = _a + _b

IRs:
TMP_11(uint256) = _a + _b
c(uint256) := TMP_11(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= _a)

IRs:
TMP_12(bool) = c >= _a
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 805.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_b > 0)

IRs:
TMP_5(bool) = _b > 0
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = _a / _b

IRs:
TMP_7(uint256) = _a / _b
c(uint256) := TMP_7(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 805.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_0(bool) = _a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = _a * _b

IRs:
TMP_1(uint256) = _a * _b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(c / _a == _b)

IRs:
TMP_2(uint256) = c / _a
TMP_3(bool) = TMP_2 == _b
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 805.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_b <= _a)

IRs:
TMP_8(bool) = _b <= _a
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = _a - _b

IRs:
TMP_10(uint256) = _a - _b
c(uint256) := TMP_10(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 805.sol-SaleBase-_addSale(uint256,SaleBase.Sale)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_sale.duration >= 60)

IRs:
REF_3(uint256) -> _sale.duration
TMP_65(bool) = REF_3 >= 60
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenIdToSale[_tokenId] = _sale

IRs:
REF_4(SaleBase.Sale) -> tokenIdToSale[_tokenId]
REF_4(SaleBase.Sale) (->tokenIdToSale) := _sale(SaleBase.Sale)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SaleCreated(uint256(_tokenId),uint256(_sale.startingPrice),uint256(_sale.endingPrice),uint256(_sale.duration),uint256(_sale.startedAt))

IRs:
TMP_67 = CONVERT _tokenId to uint256
REF_5(uint256) -> _sale.startingPrice
TMP_68 = CONVERT REF_5 to uint256
REF_6(uint256) -> _sale.endingPrice
TMP_69 = CONVERT REF_6 to uint256
REF_7(uint256) -> _sale.duration
TMP_70 = CONVERT REF_7 to uint256
REF_8(uint256) -> _sale.startedAt
TMP_71 = CONVERT REF_8 to uint256
Emit SaleCreated(TMP_67,TMP_68,TMP_69,TMP_70,TMP_71)"];
}
// Function: 805.sol-SaleBase-_addTeamSale(uint256[9],SaleBase.Sale)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_sale.duration >= 60)

IRs:
REF_9(uint256) -> _sale.duration
TMP_73(bool) = REF_9 >= 60
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
ii = 0

IRs:
ii(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
ii < 9

IRs:
TMP_75(bool) = ii < 9
CONDITION TMP_75"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_tokenIds[ii] != 0)

IRs:
REF_10(uint256) -> _tokenIds[ii]
TMP_76(bool) = REF_10 != 0
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(nonFungibleContract.exists(_tokenIds[ii]))

IRs:
REF_12(uint256) -> _tokenIds[ii]
TMP_78(bool) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:exists, arguments:['REF_12']  
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tokenIdToSale[_tokenIds[ii]] = _sale

IRs:
REF_13(uint256) -> _tokenIds[ii]
REF_14(SaleBase.Sale) -> tokenIdToSale[REF_13]
REF_14(SaleBase.Sale) (->tokenIdToSale) := _sale(SaleBase.Sale)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ii ++

IRs:
TMP_80(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
TeamSaleCreated(_tokenIds,uint256(_sale.startingPrice),uint256(_sale.endingPrice),uint256(_sale.duration),uint256(_sale.startedAt))

IRs:
REF_15(uint256) -> _sale.startingPrice
TMP_81 = CONVERT REF_15 to uint256
REF_16(uint256) -> _sale.endingPrice
TMP_82 = CONVERT REF_16 to uint256
REF_17(uint256) -> _sale.duration
TMP_83 = CONVERT REF_17 to uint256
REF_18(uint256) -> _sale.startedAt
TMP_84 = CONVERT REF_18 to uint256
Emit TeamSaleCreated(_tokenIds,TMP_81,TMP_82,TMP_83,TMP_84)"];
}
// Function: 805.sol-SaleBase-_bid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_sale = tokenIdToSale[_tokenId]

IRs:
REF_26(SaleBase.Sale) -> tokenIdToSale[_tokenId]
_sale(SaleBase.Sale) := REF_26(SaleBase.Sale)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIdsStore = tokenIdToSale[_tokenId].tokenIds

IRs:
REF_27(SaleBase.Sale) -> tokenIdToSale[_tokenId]
REF_28(uint256[9]) -> REF_27.tokenIds
tokenIdsStore(uint256[9]) = ['REF_28(uint256[9])']"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_isOnSale(_sale))

IRs:
TMP_97(bool) = INTERNAL_CALL, SaleBase._isOnSale(SaleBase.Sale)(_sale)
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
price = _currentPrice(_sale)

IRs:
TMP_99(uint256) = INTERNAL_CALL, SaleBase._currentPrice(SaleBase.Sale)(_sale)
price(uint256) := TMP_99(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_bidAmount >= price)

IRs:
TMP_100(bool) = _bidAmount >= price
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
seller = _sale.seller

IRs:
REF_29(address) -> _sale.seller
seller(address) := REF_29(address)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
tokenIdsStore[1] > 0

IRs:
REF_30(uint256) -> tokenIdsStore[1]
TMP_102(bool) = REF_30 > 0
CONDITION TMP_102"];
7->10[label="True"];
7->14[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->15;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
ii = 0

IRs:
ii(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
ii < 9

IRs:
TMP_103(bool) = ii < 9
CONDITION TMP_103"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_removeSale(tokenIdsStore[ii])

IRs:
REF_31(uint256) -> tokenIdsStore[ii]
INTERNAL_CALL, SaleBase._removeSale(uint256)(REF_31)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ii ++

IRs:
TMP_105(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
13->11;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_removeSale(_tokenId)

IRs:
INTERNAL_CALL, SaleBase._removeSale(uint256)(_tokenId)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
price > 0

IRs:
TMP_107(bool) = price > 0
CONDITION TMP_107"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
marketsCut = _computeCut(price)

IRs:
TMP_108(uint256) = INTERNAL_CALL, SaleBase._computeCut(uint256)(price)
marketsCut(uint256) := TMP_108(uint256)"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
sellerProceeds = price.sub(marketsCut)

IRs:
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['price', 'marketsCut'] 
sellerProceeds(uint256) := TMP_109(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
seller.transfer(sellerProceeds)

IRs:
Transfer dest:seller value:sellerProceeds"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
bidExcess = _bidAmount.sub(price)

IRs:
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_bidAmount', 'price'] 
bidExcess(uint256) := TMP_111(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
msg.sender.transfer(bidExcess)

IRs:
Transfer dest:msg.sender value:bidExcess"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
tokenIdsStore[1] > 0

IRs:
REF_36(uint256) -> tokenIdsStore[1]
TMP_113(bool) = REF_36 > 0
CONDITION TMP_113"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
TeamSaleWinner(tokenIdsStore,price,msg.sender)

IRs:
Emit TeamSaleWinner(tokenIdsStore,price,msg.sender)"];
24->26;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
SaleWinner(_tokenId,price,msg.sender)

IRs:
Emit SaleWinner(_tokenId,price,msg.sender)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
price

IRs:
RETURN price"];
}
// Function: 805.sol-SaleBase-_cancelSale(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
saleItem = tokenIdToSale[_tokenId]

IRs:
REF_19(SaleBase.Sale) -> tokenIdToSale[_tokenId]
saleItem(SaleBase.Sale) := REF_19(SaleBase.Sale)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
saleItem.tokenIds[1] != 0

IRs:
REF_20(uint256[9]) -> saleItem.tokenIds
REF_21(uint256) -> REF_20[1]
TMP_86(bool) = REF_21 != 0
CONDITION TMP_86"];
2->5[label="True"];
2->11[label="False"];
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->10;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
ii = 0

IRs:
ii(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
ii < 9

IRs:
TMP_87(bool) = ii < 9
CONDITION TMP_87"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_removeSale(saleItem.tokenIds[ii])

IRs:
REF_22(uint256[9]) -> saleItem.tokenIds
REF_23(uint256) -> REF_22[ii]
INTERNAL_CALL, SaleBase._removeSale(uint256)(REF_23)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_transfer(address(this),_seller,saleItem.tokenIds[ii])

IRs:
TMP_89 = CONVERT this to address
REF_24(uint256[9]) -> saleItem.tokenIds
REF_25(uint256) -> REF_24[ii]
INTERNAL_CALL, SaleBase._transfer(address,address,uint256)(TMP_89,_seller,REF_25)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ii ++

IRs:
TMP_91(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
9->6;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
SaleCancelled(_tokenId,_seller)

IRs:
Emit SaleCancelled(_tokenId,_seller)"];
10->14;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_removeSale(_tokenId)

IRs:
INTERNAL_CALL, SaleBase._removeSale(uint256)(_tokenId)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_transfer(address(this),_seller,_tokenId)

IRs:
TMP_94 = CONVERT this to address
INTERNAL_CALL, SaleBase._transfer(address,address,uint256)(TMP_94,_seller,_tokenId)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
SaleCancelled(_tokenId,_seller)

IRs:
Emit SaleCancelled(_tokenId,_seller)"];
13->14;
14[label="Node Type: END_IF 14
"];
}
// Function: 805.sol-SaleBase-_computeCurrentPrice(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_secondsPassed >= _duration

IRs:
TMP_120(bool) = _secondsPassed >= _duration
CONDITION TMP_120"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
_endingPrice

IRs:
RETURN _endingPrice"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
totalPriceChange = int256(_endingPrice) - int256(_startingPrice)

IRs:
TMP_121 = CONVERT _endingPrice to int256
TMP_122 = CONVERT _startingPrice to int256
TMP_123(int256) = TMP_121 - TMP_122
totalPriceChange(int256) := TMP_123(int256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration)

IRs:
TMP_124 = CONVERT _secondsPassed to int256
TMP_125(int256) = totalPriceChange * TMP_124
TMP_126 = CONVERT _duration to int256
TMP_127(int256) = TMP_125 / TMP_126
currentPriceChange(int256) := TMP_127(int256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
currentPrice = int256(_startingPrice) + currentPriceChange

IRs:
TMP_128 = CONVERT _startingPrice to int256
TMP_129(int256) = TMP_128 + currentPriceChange
currentPrice(int256) := TMP_129(int256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
uint256(currentPrice)

IRs:
TMP_130 = CONVERT currentPrice to uint256
RETURN TMP_130"];
}
// Function: 805.sol-SaleBase-_computeCut(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_price.mul(ownerCut.div(10000))

IRs:
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['ownerCut', '10000'] 
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_price', 'TMP_131'] 
RETURN TMP_132"];
}
// Function: 805.sol-SaleBase-_currentPrice(SaleBase.Sale)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
secondsPassed = 0

IRs:
secondsPassed(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > _sale.startedAt

IRs:
REF_39(uint256) -> _sale.startedAt
TMP_117(bool) = now > REF_39
CONDITION TMP_117"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
secondsPassed = now - _sale.startedAt

IRs:
REF_40(uint256) -> _sale.startedAt
TMP_118(uint256) = now - REF_40
secondsPassed(uint256) := TMP_118(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
_computeCurrentPrice(_sale.startingPrice,_sale.endingPrice,_sale.duration,secondsPassed)

IRs:
REF_41(uint256) -> _sale.startingPrice
REF_42(uint256) -> _sale.endingPrice
REF_43(uint256) -> _sale.duration
TMP_119(uint256) = INTERNAL_CALL, SaleBase._computeCurrentPrice(uint256,uint256,uint256,uint256)(REF_41,REF_42,REF_43,secondsPassed)
RETURN TMP_119"];
}
// Function: 805.sol-SaleBase-_escrow(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nonFungibleContract.safeTransferFrom(_owner,this,_tokenId)

IRs:
HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:safeTransferFrom, arguments:['_owner', 'this', '_tokenId']  "];
}
// Function: 805.sol-SaleBase-_isOnSale(SaleBase.Sale)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(_sale.startedAt > 0)

IRs:
REF_38(uint256) -> _sale.startedAt
TMP_116(bool) = REF_38 > 0
RETURN TMP_116"];
}
// Function: 805.sol-SaleBase-_owns(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(nonFungibleContract.ownerOf(_tokenId) == _claimant)

IRs:
TMP_61(address) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:ownerOf, arguments:['_tokenId']  
TMP_62(bool) = TMP_61 == _claimant
RETURN TMP_62"];
}
// Function: 805.sol-SaleBase-_removeSale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete tokenIdToSale[_tokenId]

IRs:
REF_37(SaleBase.Sale) -> tokenIdToSale[_tokenId]
tokenIdToSale = delete REF_37 "];
}
// Function: 805.sol-SaleBase-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nonFungibleContract.transferFrom(_owner,_receiver,_tokenId)

IRs:
HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:transferFrom, arguments:['_owner', '_receiver', '_tokenId']  "];
}
// Function: 805.sol-SaleBase-anyOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary || msg.sender == bankManager)

IRs:
TMP_139(bool) = msg.sender == gameManagerPrimary
TMP_140(bool) = msg.sender == gameManagerSecondary
TMP_141(bool) = TMP_139 || TMP_140
TMP_142(bool) = msg.sender == bankManager
TMP_143(bool) = TMP_141 || TMP_142
TMP_144(None) = SOLIDITY_CALL require(bool)(TMP_143)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-SaleBase-onERC721Received(address,address,uint256,bytes)
digraph{
}
// Function: 805.sol-SaleBase-onlyBanker()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == bankManager)

IRs:
TMP_137(bool) = msg.sender == bankManager
TMP_138(None) = SOLIDITY_CALL require(bool)(TMP_137)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-SaleBase-onlyGameManager()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary)

IRs:
TMP_133(bool) = msg.sender == gameManagerPrimary
TMP_134(bool) = msg.sender == gameManagerSecondary
TMP_135(bool) = TMP_133 || TMP_134
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-SaleBase-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenNotPaused()()"];
3->1;
}
// Function: 805.sol-SaleBase-setBanker(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newBK != address(0))

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = _newBK != TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bankManager = _newBK

IRs:
bankManager(address) := _newBK(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBanker()

IRs:
MODIFIER_CALL, OperationalControl.onlyBanker()()"];
3->1;
}
// Function: 805.sol-SaleBase-setPrimaryGameManager(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newGM != address(0))

IRs:
TMP_45 = CONVERT 0 to address
TMP_46(bool) = _newGM != TMP_45
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameManagerPrimary = _newGM

IRs:
gameManagerPrimary(address) := _newGM(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
3->1;
}
// Function: 805.sol-SaleBase-setSecondaryGameManager(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newGM != address(0))

IRs:
TMP_49 = CONVERT 0 to address
TMP_50(bool) = _newGM != TMP_49
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameManagerSecondary = _newGM

IRs:
gameManagerSecondary(address) := _newGM(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
3->1;
}
// Function: 805.sol-SaleBase-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0x150b7a02

IRs:
ERC721_RECEIVED(bytes4) := 353073666(uint256)"];
}
// Function: 805.sol-SaleBase-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ownerCut = 500

IRs:
ownerCut(uint256) := 500(uint256)"];
}
// Function: 805.sol-SaleBase-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenPaused()()"];
3->1;
}
// Function: 805.sol-SaleBase-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_145 = UnaryType.BANG paused 
TMP_146(None) = SOLIDITY_CALL require(bool)(TMP_145)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-SaleBase-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_147(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-SaleManager-_addSale(uint256,SaleBase.Sale)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_sale.duration >= 60)

IRs:
REF_49(uint256) -> _sale.duration
TMP_152(bool) = REF_49 >= 60
TMP_153(None) = SOLIDITY_CALL require(bool)(TMP_152)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenIdToSale[_tokenId] = _sale

IRs:
REF_50(SaleBase.Sale) -> tokenIdToSale[_tokenId]
REF_50(SaleBase.Sale) (->tokenIdToSale) := _sale(SaleBase.Sale)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SaleCreated(uint256(_tokenId),uint256(_sale.startingPrice),uint256(_sale.endingPrice),uint256(_sale.duration),uint256(_sale.startedAt))

IRs:
TMP_154 = CONVERT _tokenId to uint256
REF_51(uint256) -> _sale.startingPrice
TMP_155 = CONVERT REF_51 to uint256
REF_52(uint256) -> _sale.endingPrice
TMP_156 = CONVERT REF_52 to uint256
REF_53(uint256) -> _sale.duration
TMP_157 = CONVERT REF_53 to uint256
REF_54(uint256) -> _sale.startedAt
TMP_158 = CONVERT REF_54 to uint256
Emit SaleCreated(TMP_154,TMP_155,TMP_156,TMP_157,TMP_158)"];
}
// Function: 805.sol-SaleManager-_addTeamSale(uint256[9],SaleBase.Sale)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_sale.duration >= 60)

IRs:
REF_55(uint256) -> _sale.duration
TMP_160(bool) = REF_55 >= 60
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
ii = 0

IRs:
ii(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
ii < 9

IRs:
TMP_162(bool) = ii < 9
CONDITION TMP_162"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_tokenIds[ii] != 0)

IRs:
REF_56(uint256) -> _tokenIds[ii]
TMP_163(bool) = REF_56 != 0
TMP_164(None) = SOLIDITY_CALL require(bool)(TMP_163)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(nonFungibleContract.exists(_tokenIds[ii]))

IRs:
REF_58(uint256) -> _tokenIds[ii]
TMP_165(bool) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:exists, arguments:['REF_58']  
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tokenIdToSale[_tokenIds[ii]] = _sale

IRs:
REF_59(uint256) -> _tokenIds[ii]
REF_60(SaleBase.Sale) -> tokenIdToSale[REF_59]
REF_60(SaleBase.Sale) (->tokenIdToSale) := _sale(SaleBase.Sale)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ii ++

IRs:
TMP_167(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
TeamSaleCreated(_tokenIds,uint256(_sale.startingPrice),uint256(_sale.endingPrice),uint256(_sale.duration),uint256(_sale.startedAt))

IRs:
REF_61(uint256) -> _sale.startingPrice
TMP_168 = CONVERT REF_61 to uint256
REF_62(uint256) -> _sale.endingPrice
TMP_169 = CONVERT REF_62 to uint256
REF_63(uint256) -> _sale.duration
TMP_170 = CONVERT REF_63 to uint256
REF_64(uint256) -> _sale.startedAt
TMP_171 = CONVERT REF_64 to uint256
Emit TeamSaleCreated(_tokenIds,TMP_168,TMP_169,TMP_170,TMP_171)"];
}
// Function: 805.sol-SaleManager-_averageSalePrice(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_price = 0

IRs:
_price(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_saleType == 0

IRs:
TMP_282(bool) = _saleType == 0
CONDITION TMP_282"];
2->5[label="True"];
2->12[label="False"];
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->9;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
ii = 0

IRs:
ii(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
ii < 10

IRs:
TMP_283(bool) = ii < 10
CONDITION TMP_283"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_price = _price.add(lastSingleSalePrices[ii])

IRs:
REF_106(uint256) -> lastSingleSalePrices[ii]
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_price', 'REF_106'] 
_price(uint256) := TMP_284(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ii ++

IRs:
TMP_285(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
8->6;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_price = (_price.div(10)).mul(SINGLE_SALE_MULTIPLIER.div(10))

IRs:
TMP_286(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_price', '10'] 
TMP_287(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['SINGLE_SALE_MULTIPLIER', '10'] 
TMP_288(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_286', 'TMP_287'] 
_price(uint256) := TMP_288(uint256)"];
9->18;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->16;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < 3

IRs:
TMP_289(bool) = i < 3
CONDITION TMP_289"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_price = _price.add(lastTeamSalePrices[_teamId][i])

IRs:
REF_111(uint256[3]) -> lastTeamSalePrices[_teamId]
REF_112(uint256) -> REF_111[i]
TMP_290(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_price', 'REF_112'] 
_price(uint256) := TMP_290(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_291(uint256) := i(uint256)
i(uint256) = i + 1"];
15->13;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_price = (_price.div(3)).mul(TEAM_SALE_MULTIPLIER.div(10))

IRs:
TMP_292(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_price', '3'] 
TMP_293(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TEAM_SALE_MULTIPLIER', '10'] 
TMP_294(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_292', 'TMP_293'] 
_price(uint256) := TMP_294(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_price = _price.mul(9)

IRs:
TMP_295(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_price', '9'] 
_price(uint256) := TMP_295(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
_price

IRs:
RETURN _price"];
}
// Function: 805.sol-SaleManager-_bid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_sale = tokenIdToSale[_tokenId]

IRs:
REF_72(SaleBase.Sale) -> tokenIdToSale[_tokenId]
_sale(SaleBase.Sale) := REF_72(SaleBase.Sale)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIdsStore = tokenIdToSale[_tokenId].tokenIds

IRs:
REF_73(SaleBase.Sale) -> tokenIdToSale[_tokenId]
REF_74(uint256[9]) -> REF_73.tokenIds
tokenIdsStore(uint256[9]) = ['REF_74(uint256[9])']"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_isOnSale(_sale))

IRs:
TMP_184(bool) = INTERNAL_CALL, SaleBase._isOnSale(SaleBase.Sale)(_sale)
TMP_185(None) = SOLIDITY_CALL require(bool)(TMP_184)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
price = _currentPrice(_sale)

IRs:
TMP_186(uint256) = INTERNAL_CALL, SaleBase._currentPrice(SaleBase.Sale)(_sale)
price(uint256) := TMP_186(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_bidAmount >= price)

IRs:
TMP_187(bool) = _bidAmount >= price
TMP_188(None) = SOLIDITY_CALL require(bool)(TMP_187)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
seller = _sale.seller

IRs:
REF_75(address) -> _sale.seller
seller(address) := REF_75(address)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
tokenIdsStore[1] > 0

IRs:
REF_76(uint256) -> tokenIdsStore[1]
TMP_189(bool) = REF_76 > 0
CONDITION TMP_189"];
7->10[label="True"];
7->14[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->15;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
ii = 0

IRs:
ii(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
ii < 9

IRs:
TMP_190(bool) = ii < 9
CONDITION TMP_190"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_removeSale(tokenIdsStore[ii])

IRs:
REF_77(uint256) -> tokenIdsStore[ii]
INTERNAL_CALL, SaleBase._removeSale(uint256)(REF_77)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ii ++

IRs:
TMP_192(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
13->11;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_removeSale(_tokenId)

IRs:
INTERNAL_CALL, SaleBase._removeSale(uint256)(_tokenId)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
price > 0

IRs:
TMP_194(bool) = price > 0
CONDITION TMP_194"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
marketsCut = _computeCut(price)

IRs:
TMP_195(uint256) = INTERNAL_CALL, SaleBase._computeCut(uint256)(price)
marketsCut(uint256) := TMP_195(uint256)"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
sellerProceeds = price.sub(marketsCut)

IRs:
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['price', 'marketsCut'] 
sellerProceeds(uint256) := TMP_196(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
seller.transfer(sellerProceeds)

IRs:
Transfer dest:seller value:sellerProceeds"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
bidExcess = _bidAmount.sub(price)

IRs:
TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_bidAmount', 'price'] 
bidExcess(uint256) := TMP_198(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
msg.sender.transfer(bidExcess)

IRs:
Transfer dest:msg.sender value:bidExcess"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
tokenIdsStore[1] > 0

IRs:
REF_82(uint256) -> tokenIdsStore[1]
TMP_200(bool) = REF_82 > 0
CONDITION TMP_200"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
TeamSaleWinner(tokenIdsStore,price,msg.sender)

IRs:
Emit TeamSaleWinner(tokenIdsStore,price,msg.sender)"];
24->26;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
SaleWinner(_tokenId,price,msg.sender)

IRs:
Emit SaleWinner(_tokenId,price,msg.sender)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
price

IRs:
RETURN price"];
}
// Function: 805.sol-SaleManager-_cancelSale(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
saleItem = tokenIdToSale[_tokenId]

IRs:
REF_65(SaleBase.Sale) -> tokenIdToSale[_tokenId]
saleItem(SaleBase.Sale) := REF_65(SaleBase.Sale)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
saleItem.tokenIds[1] != 0

IRs:
REF_66(uint256[9]) -> saleItem.tokenIds
REF_67(uint256) -> REF_66[1]
TMP_173(bool) = REF_67 != 0
CONDITION TMP_173"];
2->5[label="True"];
2->11[label="False"];
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->10;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
ii = 0

IRs:
ii(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
ii < 9

IRs:
TMP_174(bool) = ii < 9
CONDITION TMP_174"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_removeSale(saleItem.tokenIds[ii])

IRs:
REF_68(uint256[9]) -> saleItem.tokenIds
REF_69(uint256) -> REF_68[ii]
INTERNAL_CALL, SaleBase._removeSale(uint256)(REF_69)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_transfer(address(this),_seller,saleItem.tokenIds[ii])

IRs:
TMP_176 = CONVERT this to address
REF_70(uint256[9]) -> saleItem.tokenIds
REF_71(uint256) -> REF_70[ii]
INTERNAL_CALL, SaleBase._transfer(address,address,uint256)(TMP_176,_seller,REF_71)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ii ++

IRs:
TMP_178(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
9->6;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
SaleCancelled(_tokenId,_seller)

IRs:
Emit SaleCancelled(_tokenId,_seller)"];
10->14;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_removeSale(_tokenId)

IRs:
INTERNAL_CALL, SaleBase._removeSale(uint256)(_tokenId)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_transfer(address(this),_seller,_tokenId)

IRs:
TMP_181 = CONVERT this to address
INTERNAL_CALL, SaleBase._transfer(address,address,uint256)(TMP_181,_seller,_tokenId)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
SaleCancelled(_tokenId,_seller)

IRs:
Emit SaleCancelled(_tokenId,_seller)"];
13->14;
14[label="Node Type: END_IF 14
"];
}
// Function: 805.sol-SaleManager-_computeCurrentPrice(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_secondsPassed >= _duration

IRs:
TMP_207(bool) = _secondsPassed >= _duration
CONDITION TMP_207"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
_endingPrice

IRs:
RETURN _endingPrice"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
totalPriceChange = int256(_endingPrice) - int256(_startingPrice)

IRs:
TMP_208 = CONVERT _endingPrice to int256
TMP_209 = CONVERT _startingPrice to int256
TMP_210(int256) = TMP_208 - TMP_209
totalPriceChange(int256) := TMP_210(int256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration)

IRs:
TMP_211 = CONVERT _secondsPassed to int256
TMP_212(int256) = totalPriceChange * TMP_211
TMP_213 = CONVERT _duration to int256
TMP_214(int256) = TMP_212 / TMP_213
currentPriceChange(int256) := TMP_214(int256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
currentPrice = int256(_startingPrice) + currentPriceChange

IRs:
TMP_215 = CONVERT _startingPrice to int256
TMP_216(int256) = TMP_215 + currentPriceChange
currentPrice(int256) := TMP_216(int256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
uint256(currentPrice)

IRs:
TMP_217 = CONVERT currentPrice to uint256
RETURN TMP_217"];
}
// Function: 805.sol-SaleManager-_computeCut(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_price.mul(ownerCut.div(10000))

IRs:
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['ownerCut', '10000'] 
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_price', 'TMP_218'] 
RETURN TMP_219"];
}
// Function: 805.sol-SaleManager-_computeNextSeedPrice(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
nextPrice = _averageSalePrice(_saleType,_teamId)

IRs:
TMP_369(uint256) = INTERNAL_CALL, SaleManager._averageSalePrice(uint256,uint256)(_saleType,_teamId)
nextPrice(uint256) := TMP_369(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(nextPrice == nextPrice)

IRs:
TMP_370(bool) = nextPrice == nextPrice
TMP_371(None) = SOLIDITY_CALL require(bool)(TMP_370)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
nextPrice < STARTING_PRICE

IRs:
TMP_372(bool) = nextPrice < STARTING_PRICE
CONDITION TMP_372"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nextPrice = STARTING_PRICE

IRs:
nextPrice(uint256) := STARTING_PRICE(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
nextPrice

IRs:
RETURN nextPrice"];
}
// Function: 805.sol-SaleManager-_createSale(uint256,uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sale = Sale(_seller,_startingPrice,_endingPrice,_duration,now,(_tokenId,0,0,0,0,0,0,0,0))

IRs:
TMP_262(SaleBase.Sale) = new Sale(_seller,_startingPrice,_endingPrice,_duration,now,[<slither.core.variables.local_variable.LocalVariable object at 0x7ffbfc1bb9d0>, 0, 0, 0, 0, 0, 0, 0, 0])
sale(SaleBase.Sale) := TMP_262(SaleBase.Sale)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_addSale(_tokenId,sale)

IRs:
INTERNAL_CALL, SaleBase._addSale(uint256,SaleBase.Sale)(_tokenId,sale)"];
}
// Function: 805.sol-SaleManager-_createTeamSale(uint256[9],uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sale = Sale(_seller,_startingPrice,_endingPrice,_duration,now,_tokenIds)

IRs:
TMP_264(SaleBase.Sale) = new Sale(_seller,_startingPrice,_endingPrice,_duration,now,_tokenIds)
sale(SaleBase.Sale) := TMP_264(SaleBase.Sale)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_addTeamSale(_tokenIds,sale)

IRs:
INTERNAL_CALL, SaleBase._addTeamSale(uint256[9],SaleBase.Sale)(_tokenIds,sale)"];
}
// Function: 805.sol-SaleManager-_currentPrice(SaleBase.Sale)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
secondsPassed = 0

IRs:
secondsPassed(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > _sale.startedAt

IRs:
REF_85(uint256) -> _sale.startedAt
TMP_204(bool) = now > REF_85
CONDITION TMP_204"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
secondsPassed = now - _sale.startedAt

IRs:
REF_86(uint256) -> _sale.startedAt
TMP_205(uint256) = now - REF_86
secondsPassed(uint256) := TMP_205(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
_computeCurrentPrice(_sale.startingPrice,_sale.endingPrice,_sale.duration,secondsPassed)

IRs:
REF_87(uint256) -> _sale.startingPrice
REF_88(uint256) -> _sale.endingPrice
REF_89(uint256) -> _sale.duration
TMP_206(uint256) = INTERNAL_CALL, SaleBase._computeCurrentPrice(uint256,uint256,uint256,uint256)(REF_87,REF_88,REF_89,secondsPassed)
RETURN TMP_206"];
}
// Function: 805.sol-SaleManager-_escrow(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nonFungibleContract.safeTransferFrom(_owner,this,_tokenId)

IRs:
HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:safeTransferFrom, arguments:['_owner', 'this', '_tokenId']  "];
}
// Function: 805.sol-SaleManager-_isOnSale(SaleBase.Sale)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(_sale.startedAt > 0)

IRs:
REF_84(uint256) -> _sale.startedAt
TMP_203(bool) = REF_84 > 0
RETURN TMP_203"];
}
// Function: 805.sol-SaleManager-_owns(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(nonFungibleContract.ownerOf(_tokenId) == _claimant)

IRs:
TMP_148(address) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:ownerOf, arguments:['_tokenId']  
TMP_149(bool) = TMP_148 == _claimant
RETURN TMP_149"];
}
// Function: 805.sol-SaleManager-_removeSale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
delete tokenIdToSale[_tokenId]

IRs:
REF_83(SaleBase.Sale) -> tokenIdToSale[_tokenId]
tokenIdToSale = delete REF_83 "];
}
// Function: 805.sol-SaleManager-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
nonFungibleContract.transferFrom(_owner,_receiver,_tokenId)

IRs:
HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:transferFrom, arguments:['_owner', '_receiver', '_tokenId']  "];
}
// Function: 805.sol-SaleManager-_withdrawBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bankManager.transfer(address(this).balance)

IRs:
TMP_247 = CONVERT this to address
TMP_248(uint256) = SOLIDITY_CALL balance(address)(TMP_247)
Transfer dest:bankManager value:TMP_248"];
}
// Function: 805.sol-SaleManager-anyOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary || msg.sender == bankManager)

IRs:
TMP_465(bool) = msg.sender == gameManagerPrimary
TMP_466(bool) = msg.sender == gameManagerSecondary
TMP_467(bool) = TMP_465 || TMP_466
TMP_468(bool) = msg.sender == bankManager
TMP_469(bool) = TMP_467 || TMP_468
TMP_470(None) = SOLIDITY_CALL require(bool)(TMP_469)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-SaleManager-assetTransfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tokenId != 0)

IRs:
TMP_396(bool) = _tokenId != 0
TMP_397(None) = SOLIDITY_CALL require(bool)(TMP_396)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
nonFungibleContract.transferFrom(address(this),_to,_tokenId)

IRs:
TMP_398 = CONVERT this to address
HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:transferFrom, arguments:['TMP_398', '_to', '_tokenId']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
3->1;
}
// Function: 805.sol-SaleManager-batchAssetTransfer(address,uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isBatchSupported)

IRs:
TMP_401(None) = SOLIDITY_CALL require(bool)(isBatchSupported)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_tokenIds.length > 0)

IRs:
REF_143 -> LENGTH _tokenIds
TMP_402(bool) = REF_143 > 0
TMP_403(None) = SOLIDITY_CALL require(bool)(TMP_402)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < _tokenIds.length

IRs:
REF_144 -> LENGTH _tokenIds
TMP_404(bool) = i < REF_144
CONDITION TMP_404"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(_tokenIds[i] != 0)

IRs:
REF_145(uint256) -> _tokenIds[i]
TMP_405(bool) = REF_145 != 0
TMP_406(None) = SOLIDITY_CALL require(bool)(TMP_405)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
nonFungibleContract.transferFrom(address(this),_to,_tokenIds[i])

IRs:
TMP_407 = CONVERT this to address
REF_147(uint256) -> _tokenIds[i]
HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:transferFrom, arguments:['TMP_407', '_to', 'REF_147']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_409(uint256) := i(uint256)
i(uint256) = i + 1"];
9->6;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
10->1;
}
// Function: 805.sol-SaleManager-batchCancelSale(uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isBatchSupported)

IRs:
TMP_421(None) = SOLIDITY_CALL require(bool)(isBatchSupported)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_tokenIds.length > 0)

IRs:
REF_152 -> LENGTH _tokenIds
TMP_422(bool) = REF_152 > 0
TMP_423(None) = SOLIDITY_CALL require(bool)(TMP_422)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
ii = 0

IRs:
ii(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
ii < _tokenIds.length

IRs:
REF_153 -> LENGTH _tokenIds
TMP_424(bool) = ii < REF_153
CONDITION TMP_424"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sale = tokenIdToSale[_tokenIds[ii]]

IRs:
REF_154(uint256) -> _tokenIds[ii]
REF_155(SaleBase.Sale) -> tokenIdToSale[REF_154]
sale(SaleBase.Sale) := REF_155(SaleBase.Sale)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(_isOnSale(sale))

IRs:
TMP_425(bool) = INTERNAL_CALL, SaleBase._isOnSale(SaleBase.Sale)(sale)
TMP_426(None) = SOLIDITY_CALL require(bool)(TMP_425)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
seller = sale.seller

IRs:
REF_156(address) -> sale.seller
seller(address) := REF_156(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(msg.sender == seller)

IRs:
TMP_427(bool) = msg.sender == seller
TMP_428(None) = SOLIDITY_CALL require(bool)(TMP_427)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_cancelSale(_tokenIds[ii],seller)

IRs:
REF_157(uint256) -> _tokenIds[ii]
INTERNAL_CALL, SaleBase._cancelSale(uint256,address)(REF_157,seller)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
ii ++

IRs:
TMP_430(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
12->6;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenNotPaused()()"];
13->1;
}
// Function: 805.sol-SaleManager-batchCreateSingleSeedAuction(uint8[],uint8[],uint256[],uint256[],uint256[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isBatchSupported)

IRs:
TMP_433(None) = SOLIDITY_CALL require(bool)(isBatchSupported)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_teamIds.length > 0 && _posIds.length > 0 && _attributes.length > 0 && _playerOverrideIds.length > 0 && _mlbPlayerIds.length > 0)

IRs:
REF_158 -> LENGTH _teamIds
TMP_434(bool) = REF_158 > 0
REF_159 -> LENGTH _posIds
TMP_435(bool) = REF_159 > 0
TMP_436(bool) = TMP_434 && TMP_435
REF_160 -> LENGTH _attributes
TMP_437(bool) = REF_160 > 0
TMP_438(bool) = TMP_436 && TMP_437
REF_161 -> LENGTH _playerOverrideIds
TMP_439(bool) = REF_161 > 0
TMP_440(bool) = TMP_438 && TMP_439
REF_162 -> LENGTH _mlbPlayerIds
TMP_441(bool) = REF_162 > 0
TMP_442(bool) = TMP_440 && TMP_441
TMP_443(None) = SOLIDITY_CALL require(bool)(TMP_442)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(nonFungibleContract != address(0))

IRs:
TMP_444 = CONVERT 0 to address
TMP_445(bool) = nonFungibleContract != TMP_444
TMP_446(None) = SOLIDITY_CALL require(bool)(TMP_445)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_startPrice != 0)

IRs:
TMP_447(bool) = _startPrice != 0
TMP_448(None) = SOLIDITY_CALL require(bool)(TMP_447)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
ii = 0

IRs:
ii(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
ii < _mlbPlayerIds.length

IRs:
REF_163 -> LENGTH _mlbPlayerIds
TMP_449(bool) = ii < REF_163
CONDITION TMP_449"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(_teamIds[ii] != 0)

IRs:
REF_164(uint8) -> _teamIds[ii]
TMP_450(bool) = REF_164 != 0
TMP_451(None) = SOLIDITY_CALL require(bool)(TMP_450)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
nftId = nonFungibleContract.createSeedCollectible(_teamIds[ii],_posIds[ii],_attributes[ii],address(this),0,_playerOverrideIds[ii],_mlbPlayerIds[ii])

IRs:
REF_166(uint8) -> _teamIds[ii]
REF_167(uint8) -> _posIds[ii]
REF_168(uint256) -> _attributes[ii]
TMP_452 = CONVERT this to address
REF_169(uint256) -> _playerOverrideIds[ii]
REF_170(uint256) -> _mlbPlayerIds[ii]
TMP_453(uint256) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:createSeedCollectible, arguments:['REF_166', 'REF_167', 'REF_168', 'TMP_452', '0', 'REF_169', 'REF_170']  
nftId(uint256) := TMP_453(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_createSale(nftId,_startPrice,0,SALES_DURATION,address(this))

IRs:
TMP_454 = CONVERT this to address
INTERNAL_CALL, SaleManager._createSale(uint256,uint256,uint256,uint256,address)(nftId,_startPrice,0,SALES_DURATION,TMP_454)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ii ++

IRs:
TMP_456(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
13->9;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenNotPaused()()"];
15->1;
}
// Function: 805.sol-SaleManager-bid(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sale = tokenIdToSale[_tokenId]

IRs:
REF_127(SaleBase.Sale) -> tokenIdToSale[_tokenId]
sale(SaleBase.Sale) := REF_127(SaleBase.Sale)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
seller = sale.seller

IRs:
REF_128(address) -> sale.seller
seller(address) := REF_128(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
price = _bid(_tokenId,msg.value)

IRs:
TMP_373(uint256) = INTERNAL_CALL, SaleBase._bid(uint256,uint256)(_tokenId,msg.value)
price(uint256) := TMP_373(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sale.tokenIds[1] > 0

IRs:
REF_129(uint256[9]) -> sale.tokenIds
REF_130(uint256) -> REF_129[1]
TMP_374(bool) = REF_130 > 0
CONDITION TMP_374"];
4->7[label="True"];
4->12[label="False"];
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 9

IRs:
TMP_375(bool) = i < 9
CONDITION TMP_375"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_transfer(address(this),msg.sender,sale.tokenIds[i])

IRs:
TMP_376 = CONVERT this to address
REF_131(uint256[9]) -> sale.tokenIds
REF_132(uint256) -> REF_131[i]
INTERNAL_CALL, SaleBase._transfer(address,address,uint256)(TMP_376,msg.sender,REF_132)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_378(uint256) := i(uint256)
i(uint256) = i + 1"];
10->8;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
price = price.div(9)

IRs:
TMP_379(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['price', '9'] 
price(uint256) := TMP_379(uint256)"];
11->13;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_transfer(address(this),msg.sender,_tokenId)

IRs:
TMP_380 = CONVERT this to address
INTERNAL_CALL, SaleBase._transfer(address,address,uint256)(TMP_380,msg.sender,_tokenId)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
seller == address(this)

IRs:
TMP_382 = CONVERT this to address
TMP_383(bool) = seller == TMP_382
CONDITION TMP_383"];
14->15[label="True"];
14->22[label="False"];
15[label="Node Type: IF 15

EXPRESSION:
sale.tokenIds[1] > 0

IRs:
REF_134(uint256[9]) -> sale.tokenIds
REF_135(uint256) -> REF_134[1]
TMP_384(bool) = REF_135 > 0
CONDITION TMP_384"];
15->16[label="True"];
15->19[label="False"];
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
_teamId = nonFungibleContract.getTeamId(_tokenId)

IRs:
TMP_385(uint256) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:getTeamId, arguments:['_tokenId']  
_teamId(uint256) := TMP_385(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
lastTeamSalePrices[_teamId][seedTeamSaleCount[_teamId] % 3] = price

IRs:
REF_137(uint256[3]) -> lastTeamSalePrices[_teamId]
REF_138(uint256) -> seedTeamSaleCount[_teamId]
TMP_386(uint256) = REF_138 % 3
REF_139(uint256) -> REF_137[TMP_386]
REF_139(uint256) (->lastTeamSalePrices) := price(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
seedTeamSaleCount[_teamId] ++

IRs:
REF_140(uint256) -> seedTeamSaleCount[_teamId]
TMP_387(uint256) := REF_140(uint256)
REF_140(-> seedTeamSaleCount) = REF_140 + 1"];
18->21;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
lastSingleSalePrices[seedSingleSaleCount % 10] = price

IRs:
TMP_388(uint256) = seedSingleSaleCount % 10
REF_141(uint256) -> lastSingleSalePrices[TMP_388]
REF_141(uint256) (->lastSingleSalePrices) := price(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
seedSingleSaleCount ++

IRs:
TMP_389(uint256) := seedSingleSaleCount(uint256)
seedSingleSaleCount(uint256) = seedSingleSaleCount + 1"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenNotPaused()()"];
23->1;
}
// Function: 805.sol-SaleManager-cancelSale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sale = tokenIdToSale[_tokenId]

IRs:
REF_93(SaleBase.Sale) -> tokenIdToSale[_tokenId]
sale(SaleBase.Sale) := REF_93(SaleBase.Sale)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_isOnSale(sale))

IRs:
TMP_266(bool) = INTERNAL_CALL, SaleBase._isOnSale(SaleBase.Sale)(sale)
TMP_267(None) = SOLIDITY_CALL require(bool)(TMP_266)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
seller = sale.seller

IRs:
REF_94(address) -> sale.seller
seller(address) := REF_94(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(msg.sender == seller)

IRs:
TMP_268(bool) = msg.sender == seller
TMP_269(None) = SOLIDITY_CALL require(bool)(TMP_268)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_cancelSale(_tokenId,seller)

IRs:
INTERNAL_CALL, SaleBase._cancelSale(uint256,address)(_tokenId,seller)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenNotPaused()()"];
6->1;
}
// Function: 805.sol-SaleManager-cancelSaleWhenPaused(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sale = tokenIdToSale[_tokenId]

IRs:
REF_95(SaleBase.Sale) -> tokenIdToSale[_tokenId]
sale(SaleBase.Sale) := REF_95(SaleBase.Sale)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_isOnSale(sale))

IRs:
TMP_272(bool) = INTERNAL_CALL, SaleBase._isOnSale(SaleBase.Sale)(sale)
TMP_273(None) = SOLIDITY_CALL require(bool)(TMP_272)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
seller = sale.seller

IRs:
REF_96(address) -> sale.seller
seller(address) := REF_96(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_cancelSale(_tokenId,seller)

IRs:
INTERNAL_CALL, SaleBase._cancelSale(uint256,address)(_tokenId,seller)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenPaused()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
6->1;
}
// Function: 805.sol-SaleManager-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerCut <= 10000)

IRs:
TMP_236(bool) = ownerCut <= 10000
TMP_237(None) = SOLIDITY_CALL require(bool)(TMP_236)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.sender != address(0))

IRs:
TMP_238 = CONVERT 0 to address
TMP_239(bool) = msg.sender != TMP_238
TMP_240(None) = SOLIDITY_CALL require(bool)(TMP_239)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameManagerPrimary = msg.sender

IRs:
gameManagerPrimary(address) := msg.sender(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gameManagerSecondary = msg.sender

IRs:
gameManagerSecondary(address) := msg.sender(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
bankManager = msg.sender

IRs:
bankManager(address) := msg.sender(address)"];
}
// Function: 805.sol-SaleManager-createPromoSeedAuction(uint8,uint8,uint256,uint256,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(nonFungibleContract != address(0))

IRs:
TMP_338 = CONVERT 0 to address
TMP_339(bool) = nonFungibleContract != TMP_338
TMP_340(None) = SOLIDITY_CALL require(bool)(TMP_339)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_teamId != 0)

IRs:
TMP_341(bool) = _teamId != 0
TMP_342(None) = SOLIDITY_CALL require(bool)(TMP_341)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
nftId = nonFungibleContract.createPromoCollectible(_teamId,_posId,_attributes,address(this),0,_playerOverrideId,_mlbPlayerId)

IRs:
TMP_343 = CONVERT this to address
TMP_344(uint256) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:createPromoCollectible, arguments:['_teamId', '_posId', '_attributes', 'TMP_343', '0', '_playerOverrideId', '_mlbPlayerId']  
nftId(uint256) := TMP_344(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
startPrice = 0

IRs:
startPrice(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
endPrice = 0

IRs:
endPrice(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
duration = 0

IRs:
duration(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_startPrice == 0

IRs:
TMP_345(bool) = _startPrice == 0
CONDITION TMP_345"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
startPrice = _computeNextSeedPrice(0,_teamId)

IRs:
TMP_346(uint256) = INTERNAL_CALL, SaleManager._computeNextSeedPrice(uint256,uint256)(0,_teamId)
startPrice(uint256) := TMP_346(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
startPrice = _startPrice

IRs:
startPrice(uint256) := _startPrice(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_endPrice != 0

IRs:
TMP_347(bool) = _endPrice != 0
CONDITION TMP_347"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
endPrice = _endPrice

IRs:
endPrice(uint256) := _endPrice(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
endPrice = 0

IRs:
endPrice(uint256) := 0(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
_saleDuration == 0

IRs:
TMP_348(bool) = _saleDuration == 0
CONDITION TMP_348"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
duration = SALES_DURATION

IRs:
duration(uint256) := SALES_DURATION(uint256)"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
duration = _saleDuration

IRs:
duration(uint256) := _saleDuration(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_createSale(nftId,startPrice,endPrice,duration,address(this))

IRs:
TMP_349 = CONVERT this to address
INTERNAL_CALL, SaleManager._createSale(uint256,uint256,uint256,uint256,address)(nftId,startPrice,endPrice,duration,TMP_349)"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenNotPaused()()"];
21->1;
}
// Function: 805.sol-SaleManager-createSale(uint256,uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(nonFungibleContract))

IRs:
TMP_296 = CONVERT nonFungibleContract to address
TMP_297(bool) = msg.sender == TMP_296
TMP_298(None) = SOLIDITY_CALL require(bool)(TMP_297)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(nonFungibleContract.checkIsAttached(_tokenId) == 0)

IRs:
TMP_299(uint256) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:checkIsAttached, arguments:['_tokenId']  
TMP_300(bool) = TMP_299 == 0
TMP_301(None) = SOLIDITY_CALL require(bool)(TMP_300)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_escrow(_owner,_tokenId)

IRs:
INTERNAL_CALL, SaleBase._escrow(address,uint256)(_owner,_tokenId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_createSale(_tokenId,_startingPrice,_endingPrice,_duration,_owner)

IRs:
INTERNAL_CALL, SaleManager._createSale(uint256,uint256,uint256,uint256,address)(_tokenId,_startingPrice,_endingPrice,_duration,_owner)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenNotPaused()()"];
5->1;
}
// Function: 805.sol-SaleManager-createSeedTeam(uint8,uint256[9],uint256[9])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_teamId != 0)

IRs:
TMP_411(bool) = _teamId != 0
TMP_412(None) = SOLIDITY_CALL require(bool)(TMP_411)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
ii = 0

IRs:
ii(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
ii < 9

IRs:
TMP_413(bool) = ii < 9
CONDITION TMP_413"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
nonFungibleContract.createSeedCollectible(_teamId,uint8(ii.add(1)),_attributes[ii],address(this),0,0,_mlbPlayerId[ii])

IRs:
TMP_414(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['ii', '1'] 
TMP_415 = CONVERT TMP_414 to uint8
REF_150(uint256) -> _attributes[ii]
TMP_416 = CONVERT this to address
REF_151(uint256) -> _mlbPlayerId[ii]
TMP_417(uint256) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:createSeedCollectible, arguments:['_teamId', 'TMP_415', 'REF_150', 'TMP_416', '0', '0', 'REF_151']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ii ++

IRs:
TMP_418(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenNotPaused()()"];
9->1;
}
// Function: 805.sol-SaleManager-createSingleSeedAuction(uint8,uint8,uint256,uint256,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(nonFungibleContract != address(0))

IRs:
TMP_323 = CONVERT 0 to address
TMP_324(bool) = nonFungibleContract != TMP_323
TMP_325(None) = SOLIDITY_CALL require(bool)(TMP_324)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_teamId != 0)

IRs:
TMP_326(bool) = _teamId != 0
TMP_327(None) = SOLIDITY_CALL require(bool)(TMP_326)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
nftId = nonFungibleContract.createSeedCollectible(_teamId,_posId,_attributes,address(this),0,_playerOverrideId,_mlbPlayerId)

IRs:
TMP_328 = CONVERT this to address
TMP_329(uint256) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:createSeedCollectible, arguments:['_teamId', '_posId', '_attributes', 'TMP_328', '0', '_playerOverrideId', '_mlbPlayerId']  
nftId(uint256) := TMP_329(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
startPrice = 0

IRs:
startPrice(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
endPrice = 0

IRs:
endPrice(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
duration = 0

IRs:
duration(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_startPrice == 0

IRs:
TMP_330(bool) = _startPrice == 0
CONDITION TMP_330"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
startPrice = _computeNextSeedPrice(0,_teamId)

IRs:
TMP_331(uint256) = INTERNAL_CALL, SaleManager._computeNextSeedPrice(uint256,uint256)(0,_teamId)
startPrice(uint256) := TMP_331(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
startPrice = _startPrice

IRs:
startPrice(uint256) := _startPrice(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_endPrice != 0

IRs:
TMP_332(bool) = _endPrice != 0
CONDITION TMP_332"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
endPrice = _endPrice

IRs:
endPrice(uint256) := _endPrice(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
endPrice = 0

IRs:
endPrice(uint256) := 0(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
_saleDuration == 0

IRs:
TMP_333(bool) = _saleDuration == 0
CONDITION TMP_333"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
duration = SALES_DURATION

IRs:
duration(uint256) := SALES_DURATION(uint256)"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
duration = _saleDuration

IRs:
duration(uint256) := _saleDuration(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_createSale(nftId,startPrice,endPrice,duration,address(this))

IRs:
TMP_334 = CONVERT this to address
INTERNAL_CALL, SaleManager._createSale(uint256,uint256,uint256,uint256,address)(nftId,startPrice,endPrice,duration,TMP_334)"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenNotPaused()()"];
21->1;
}
// Function: 805.sol-SaleManager-createTeamSaleAuction(uint8,uint256[9],uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->24;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_teamId != 0)

IRs:
TMP_353(bool) = _teamId != 0
TMP_354(None) = SOLIDITY_CALL require(bool)(TMP_353)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
ii = 0

IRs:
ii(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
ii < _tokenIds.length

IRs:
REF_123 -> LENGTH _tokenIds
TMP_355(bool) = ii < REF_123
CONDITION TMP_355"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(nonFungibleContract.getTeamId(_tokenIds[ii]) == _teamId)

IRs:
REF_125(uint256) -> _tokenIds[ii]
TMP_356(uint256) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:getTeamId, arguments:['REF_125']  
TMP_357(bool) = TMP_356 == _teamId
TMP_358(None) = SOLIDITY_CALL require(bool)(TMP_357)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ii ++

IRs:
TMP_359(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
7->5;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
startPrice = 0

IRs:
startPrice(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
endPrice = 0

IRs:
endPrice(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
duration = 0

IRs:
duration(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_startPrice == 0

IRs:
TMP_360(bool) = _startPrice == 0
CONDITION TMP_360"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
startPrice = _computeNextSeedPrice(1,_teamId).mul(9)

IRs:
TMP_361(uint256) = INTERNAL_CALL, SaleManager._computeNextSeedPrice(uint256,uint256)(1,_teamId)
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_361', '9'] 
startPrice(uint256) := TMP_362(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
startPrice = _startPrice

IRs:
startPrice(uint256) := _startPrice(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
_endPrice != 0

IRs:
TMP_363(bool) = _endPrice != 0
CONDITION TMP_363"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
endPrice = _endPrice

IRs:
endPrice(uint256) := _endPrice(uint256)"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
endPrice = 0

IRs:
endPrice(uint256) := 0(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
_saleDuration == 0

IRs:
TMP_364(bool) = _saleDuration == 0
CONDITION TMP_364"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
duration = SALES_DURATION

IRs:
duration(uint256) := SALES_DURATION(uint256)"];
20->22;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
duration = _saleDuration

IRs:
duration(uint256) := _saleDuration(uint256)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_createTeamSale(_tokenIds,startPrice,endPrice,duration,address(this))

IRs:
TMP_365 = CONVERT this to address
INTERNAL_CALL, SaleManager._createTeamSale(uint256[9],uint256,uint256,uint256,address)(_tokenIds,startPrice,endPrice,duration,TMP_365)"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenNotPaused()()"];
25->1;
}
// Function: 805.sol-SaleManager-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
nftAddress = address(nonFungibleContract)

IRs:
TMP_250 = CONVERT nonFungibleContract to address
nftAddress(address) := TMP_250(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.sender == address(this) || msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary || msg.sender == bankManager || msg.sender == nftAddress)

IRs:
TMP_251 = CONVERT this to address
TMP_252(bool) = msg.sender == TMP_251
TMP_253(bool) = msg.sender == gameManagerPrimary
TMP_254(bool) = TMP_252 || TMP_253
TMP_255(bool) = msg.sender == gameManagerSecondary
TMP_256(bool) = TMP_254 || TMP_255
TMP_257(bool) = msg.sender == bankManager
TMP_258(bool) = TMP_256 || TMP_257
TMP_259(bool) = msg.sender == nftAddress
TMP_260(bool) = TMP_258 || TMP_259
TMP_261(None) = SOLIDITY_CALL require(bool)(TMP_260)"];
}
// Function: 805.sol-SaleManager-getCurrentPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sale = tokenIdToSale[_tokenId]

IRs:
REF_104(SaleBase.Sale) -> tokenIdToSale[_tokenId]
sale(SaleBase.Sale) := REF_104(SaleBase.Sale)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_isOnSale(sale))

IRs:
TMP_279(bool) = INTERNAL_CALL, SaleBase._isOnSale(SaleBase.Sale)(sale)
TMP_280(None) = SOLIDITY_CALL require(bool)(TMP_279)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_currentPrice(sale)

IRs:
TMP_281(uint256) = INTERNAL_CALL, SaleBase._currentPrice(SaleBase.Sale)(sale)
RETURN TMP_281"];
}
// Function: 805.sol-SaleManager-getSale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
sale = tokenIdToSale[_tokenId]

IRs:
REF_97(SaleBase.Sale) -> tokenIdToSale[_tokenId]
sale(SaleBase.Sale) := REF_97(SaleBase.Sale)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_isOnSale(sale))

IRs:
TMP_277(bool) = INTERNAL_CALL, SaleBase._isOnSale(SaleBase.Sale)(sale)
TMP_278(None) = SOLIDITY_CALL require(bool)(TMP_277)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(sale.seller,sale.startingPrice,sale.endingPrice,sale.duration,sale.startedAt,sale.tokenIds)

IRs:
REF_98(address) -> sale.seller
REF_99(uint256) -> sale.startingPrice
REF_100(uint256) -> sale.endingPrice
REF_101(uint256) -> sale.duration
REF_102(uint256) -> sale.startedAt
REF_103(uint256[9]) -> sale.tokenIds
RETURN REF_98,REF_99,REF_100,REF_101,REF_102,REF_103"];
4[label="Node Type: RETURN 4

EXPRESSION:
(seller,startingPrice,endingPrice,duration,startedAt,tokenIds)

IRs:
RETURN seller,startingPrice,endingPrice,duration,startedAt,tokenIds"];
}
// Function: 805.sol-SaleManager-onERC721Received(address,address,uint256,bytes)
digraph{
}
// Function: 805.sol-SaleManager-onlyBanker()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == bankManager)

IRs:
TMP_463(bool) = msg.sender == bankManager
TMP_464(None) = SOLIDITY_CALL require(bool)(TMP_463)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-SaleManager-onlyGameManager()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == gameManagerPrimary || msg.sender == gameManagerSecondary)

IRs:
TMP_459(bool) = msg.sender == gameManagerPrimary
TMP_460(bool) = msg.sender == gameManagerSecondary
TMP_461(bool) = TMP_459 || TMP_460
TMP_462(None) = SOLIDITY_CALL require(bool)(TMP_461)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-SaleManager-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenNotPaused()()"];
3->1;
}
// Function: 805.sol-SaleManager-setBanker(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newBK != address(0))

IRs:
TMP_228 = CONVERT 0 to address
TMP_229(bool) = _newBK != TMP_228
TMP_230(None) = SOLIDITY_CALL require(bool)(TMP_229)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bankManager = _newBK

IRs:
bankManager(address) := _newBK(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBanker()

IRs:
MODIFIER_CALL, OperationalControl.onlyBanker()()"];
3->1;
}
// Function: 805.sol-SaleManager-setNFTContractAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_nftAddress != address(0))

IRs:
TMP_391 = CONVERT 0 to address
TMP_392(bool) = _nftAddress != TMP_391
TMP_393(None) = SOLIDITY_CALL require(bool)(TMP_392)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
nonFungibleContract = MLBNFT(_nftAddress)

IRs:
TMP_394 = CONVERT _nftAddress to MLBNFT
nonFungibleContract(MLBNFT) := TMP_394(MLBNFT)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
3->1;
}
// Function: 805.sol-SaleManager-setOwnerCut(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newCut <= 10000)

IRs:
TMP_320(bool) = _newCut <= 10000
TMP_321(None) = SOLIDITY_CALL require(bool)(TMP_320)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerCut = _newCut

IRs:
ownerCut(uint256) := _newCut(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBanker()

IRs:
MODIFIER_CALL, OperationalControl.onlyBanker()()"];
3->1;
}
// Function: 805.sol-SaleManager-setPrimaryGameManager(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newGM != address(0))

IRs:
TMP_220 = CONVERT 0 to address
TMP_221(bool) = _newGM != TMP_220
TMP_222(None) = SOLIDITY_CALL require(bool)(TMP_221)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameManagerPrimary = _newGM

IRs:
gameManagerPrimary(address) := _newGM(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
3->1;
}
// Function: 805.sol-SaleManager-setSecondaryGameManager(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newGM != address(0))

IRs:
TMP_224 = CONVERT 0 to address
TMP_225(bool) = _newGM != TMP_224
TMP_226(None) = SOLIDITY_CALL require(bool)(TMP_225)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameManagerSecondary = _newGM

IRs:
gameManagerSecondary(address) := _newGM(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
3->1;
}
// Function: 805.sol-SaleManager-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ERC721_RECEIVED = 0x150b7a02

IRs:
ERC721_RECEIVED(bytes4) := 353073666(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
SINGLE_SALE_MULTIPLIER = 35

IRs:
SINGLE_SALE_MULTIPLIER(uint256) := 35(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
TEAM_SALE_MULTIPLIER = 12

IRs:
TEAM_SALE_MULTIPLIER(uint256) := 12(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
STARTING_PRICE = 10000000000000000

IRs:
STARTING_PRICE(uint256) := 10000000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
SALES_DURATION = 86400

IRs:
SALES_DURATION(uint256) := 86400(uint256)"];
}
// Function: 805.sol-SaleManager-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ownerCut = 500

IRs:
ownerCut(uint256) := 500(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
seedSingleSaleCount = 0

IRs:
seedSingleSaleCount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
isBatchSupported = true

IRs:
isBatchSupported(bool) := True(bool)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
isSalesManager = true

IRs:
isSalesManager(bool) := True(bool)"];
}
// Function: 805.sol-SaleManager-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(nonFungibleContract != address(0))

IRs:
TMP_241 = CONVERT 0 to address
TMP_242(bool) = nonFungibleContract != TMP_241
TMP_243(None) = SOLIDITY_CALL require(bool)(TMP_242)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
super.unpause()

IRs:
INTERNAL_CALL, OperationalControl.unpause()()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenPaused()()"];
4->1;
}
// Function: 805.sol-SaleManager-updateBatchSupport(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isBatchSupported = _flag

IRs:
isBatchSupported(bool) := _flag(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyGameManager()

IRs:
MODIFIER_CALL, OperationalControl.onlyGameManager()()"];
2->1;
}
// Function: 805.sol-SaleManager-userCreateSaleIfApproved(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(nonFungibleContract.getApproved(_tokenId) == address(this) || nonFungibleContract.isApprovedForAll(msg.sender,address(this)))

IRs:
TMP_305(address) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:getApproved, arguments:['_tokenId']  
TMP_306 = CONVERT this to address
TMP_307(bool) = TMP_305 == TMP_306
TMP_308 = CONVERT this to address
TMP_309(bool) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:isApprovedForAll, arguments:['msg.sender', 'TMP_308']  
TMP_310(bool) = TMP_307 || TMP_309
TMP_311(None) = SOLIDITY_CALL require(bool)(TMP_310)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(nonFungibleContract.checkIsAttached(_tokenId) == 0)

IRs:
TMP_312(uint256) = HIGH_LEVEL_CALL, dest:nonFungibleContract(MLBNFT), function:checkIsAttached, arguments:['_tokenId']  
TMP_313(bool) = TMP_312 == 0
TMP_314(None) = SOLIDITY_CALL require(bool)(TMP_313)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_escrow(msg.sender,_tokenId)

IRs:
INTERNAL_CALL, SaleBase._escrow(address,uint256)(msg.sender,_tokenId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_createSale(_tokenId,_startingPrice,_endingPrice,_duration,msg.sender)

IRs:
INTERNAL_CALL, SaleManager._createSale(uint256,uint256,uint256,uint256,address)(_tokenId,_startingPrice,_endingPrice,_duration,msg.sender)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, OperationalControl.whenNotPaused()()"];
5->1;
}
// Function: 805.sol-SaleManager-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_471 = UnaryType.BANG paused 
TMP_472(None) = SOLIDITY_CALL require(bool)(TMP_471)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-SaleManager-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_473(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 805.sol-SaleManager-withdrawSaleManagerBalances()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_withdrawBalance()

IRs:
INTERNAL_CALL, SaleManager._withdrawBalance()()"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyBanker()

IRs:
MODIFIER_CALL, OperationalControl.onlyBanker()()"];
2->1;
}
}
