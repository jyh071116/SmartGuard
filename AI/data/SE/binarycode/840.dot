digraph G {
// Function: 840.sol-Crowdsale-Crowdsale(uint256,address,ERC20)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_2(bool) = _rate > 0
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_wallet != address(0))

IRs:
TMP_4 = CONVERT 0 to address
TMP_5(bool) = _wallet != TMP_4
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_token != address(0))

IRs:
TMP_7 = CONVERT 0 to address
TMP_8(bool) = _token != TMP_7
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token = _token

IRs:
token(ERC20) := _token(ERC20)"];
}
// Function: 840.sol-Crowdsale-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 840.sol-Crowdsale-TokenDestructible()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 840.sol-Crowdsale-_deliverTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token.transfer(_beneficiary,_tokenAmount)

IRs:
TMP_26(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['_beneficiary', '_tokenAmount']  "];
}
// Function: 840.sol-Crowdsale-_forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(msg.value)

IRs:
Transfer dest:wallet value:msg.value"];
}
// Function: 840.sol-Crowdsale-_getTokenAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_weiAmount.mul(rate)

IRs:
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_weiAmount', 'rate'] 
RETURN TMP_28"];
}
// Function: 840.sol-Crowdsale-_postValidatePurchase(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 840.sol-Crowdsale-_preValidatePurchase(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_21 = CONVERT 0 to address
TMP_22(bool) = _beneficiary != TMP_21
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_weiAmount != 0)

IRs:
TMP_24(bool) = _weiAmount != 0
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
}
// Function: 840.sol-Crowdsale-_processPurchase(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_deliverTokens(_beneficiary,_tokenAmount)

IRs:
INTERNAL_CALL, Crowdsale._deliverTokens(address,uint256)(_beneficiary,_tokenAmount)"];
}
// Function: 840.sol-Crowdsale-_updatePurchasingState(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 840.sol-Crowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= 1000000000000000)

IRs:
TMP_11(bool) = msg.value >= 1000000000000000
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_preValidatePurchase(_beneficiary,weiAmount)

IRs:
INTERNAL_CALL, Crowdsale._preValidatePurchase(address,uint256)(_beneficiary,weiAmount)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokens = _getTokenAmount(weiAmount)

IRs:
TMP_14(uint256) = INTERNAL_CALL, Crowdsale._getTokenAmount(uint256)(weiAmount)
tokens(uint256) := TMP_14(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_15(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_15(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_processPurchase(_beneficiary,tokens)

IRs:
INTERNAL_CALL, Crowdsale._processPurchase(address,uint256)(_beneficiary,tokens)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_updatePurchasingState(_beneficiary,weiAmount)

IRs:
INTERNAL_CALL, Crowdsale._updatePurchasingState(address,uint256)(_beneficiary,weiAmount)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale._forwardFunds()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_postValidatePurchase(_beneficiary,weiAmount)

IRs:
INTERNAL_CALL, Crowdsale._postValidatePurchase(address,uint256)(_beneficiary,weiAmount)"];
}
// Function: 840.sol-Crowdsale-destroy(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < tokens.length

IRs:
REF_4 -> LENGTH tokens
TMP_30(bool) = i < REF_4
CONDITION TMP_30"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
token = ERC20Basic(tokens[i])

IRs:
REF_5(address) -> tokens[i]
TMP_31 = CONVERT REF_5 to ERC20Basic
token(ERC20Basic) := TMP_31(ERC20Basic)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
balance = token.balanceOf(this)

IRs:
TMP_32(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_32(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
token.transfer(owner,balance)

IRs:
TMP_33(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['owner', 'balance']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_34(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_35(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->3;
}
// Function: 840.sol-Crowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 840.sol-Crowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_37(bool) = msg.sender == owner
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 840.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 840.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 840.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 840.sol-ERC20-totalSupply()
digraph{
}
// Function: 840.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 840.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 840.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 840.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 840.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 840.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 840.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_0(bool) = msg.sender == owner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 840.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_48(uint256) = a + b
c(uint256) := TMP_48(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_49(bool) = c >= a
TMP_50(None) = SOLIDITY_CALL assert(bool)(TMP_49)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 840.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_44(uint256) = a / b
c(uint256) := TMP_44(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 840.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_39(bool) = a == 0
CONDITION TMP_39"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_40(uint256) = a * b
c(uint256) := TMP_40(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_41(uint256) = c / a
TMP_42(bool) = TMP_41 == b
TMP_43(None) = SOLIDITY_CALL assert(bool)(TMP_42)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 840.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_45(bool) = b <= a
TMP_46(None) = SOLIDITY_CALL assert(bool)(TMP_45)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_47(uint256) = a - b
RETURN TMP_47"];
}
}
