digraph G {
// Function: 859.sol-CoinIpr-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_49(uint256) = a + b
c(uint256) := TMP_49(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_50(bool) = c >= a
TMP_51(None) = SOLIDITY_CALL assert(bool)(TMP_50)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 859.sol-CoinIpr-admin_only()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin_address)

IRs:
TMP_52(bool) = msg.sender == admin_address
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 859.sol-CoinIpr-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_20(mapping(address => uint256)) -> allowed[_owner]
REF_21(uint256) -> REF_20[_spender]
RETURN REF_21"];
}
// Function: 859.sol-CoinIpr-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_18(mapping(address => uint256)) -> allowed[msg.sender]
REF_19(uint256) -> REF_18[_spender]
REF_19(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 859.sol-CoinIpr-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_addr]

IRs:
REF_1(uint256) -> balances[_addr]
RETURN REF_1"];
}
// Function: 859.sol-CoinIpr-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = mul(initSupply,10 ** uint256(decimals))

IRs:
TMP_0 = CONVERT decimals to uint256
TMP_1(uint256) = 10 ** TMP_0
TMP_2(uint256) = INTERNAL_CALL, CoinIpr.mul(uint256,uint256)(initSupply,TMP_1)
totalSupply(uint256) := TMP_2(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[account_address] = totalSupply

IRs:
REF_0(uint256) -> balances[account_address]
REF_0(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 859.sol-CoinIpr-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_28(mapping(address => uint256)) -> allowed[msg.sender]
REF_29(uint256) -> REF_28[_spender]
oldValue(uint256) := REF_29(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_25(bool) = _subtractedValue > oldValue
CONDITION TMP_25"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_30(mapping(address => uint256)) -> allowed[msg.sender]
REF_31(uint256) -> REF_30[_spender]
REF_31(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = sub(oldValue,_subtractedValue)

IRs:
REF_32(mapping(address => uint256)) -> allowed[msg.sender]
REF_33(uint256) -> REF_32[_spender]
TMP_26(uint256) = INTERNAL_CALL, CoinIpr.sub(uint256,uint256)(oldValue,_subtractedValue)
REF_33(uint256) (->allowed) := TMP_26(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
Emit Approval(msg.sender,_spender,REF_35)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 859.sol-CoinIpr-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_45(uint256) = a / b
RETURN TMP_45"];
}
// Function: 859.sol-CoinIpr-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 859.sol-CoinIpr-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = add(allowed[msg.sender][_spender],_addedValue)

IRs:
REF_22(mapping(address => uint256)) -> allowed[msg.sender]
REF_23(uint256) -> REF_22[_spender]
REF_24(mapping(address => uint256)) -> allowed[msg.sender]
REF_25(uint256) -> REF_24[_spender]
TMP_23(uint256) = INTERNAL_CALL, CoinIpr.add(uint256,uint256)(REF_25,_addedValue)
REF_23(uint256) (->allowed) := TMP_23(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_26(mapping(address => uint256)) -> allowed[msg.sender]
REF_27(uint256) -> REF_26[_spender]
Emit Approval(msg.sender,_spender,REF_27)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 859.sol-CoinIpr-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_40(bool) = a == 0
CONDITION TMP_40"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_41(uint256) = a * b
c(uint256) := TMP_41(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_42(uint256) = c / a
TMP_43(bool) = TMP_42 == b
TMP_44(None) = SOLIDITY_CALL assert(bool)(TMP_43)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 859.sol-CoinIpr-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(new_admin_address != address(0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = new_admin_address != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin_address = new_admin_address

IRs:
admin_address(address) := new_admin_address(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
admin_only()

IRs:
MODIFIER_CALL, CoinIpr.admin_only()()"];
4->1;
}
// Function: 859.sol-CoinIpr-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin_address = 0xE55999b042E92B61198132Dba5a22813cDF4de85

IRs:
admin_address(address) := 1309357040999712346638374230153486048052238409349(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
account_address = 0xE55999b042E92B61198132Dba5a22813cDF4de85

IRs:
account_address(address) := 1309357040999712346638374230153486048052238409349(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = Realize and Relations

IRs:
name(string) := Realize and Relations(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
symbol = IPR

IRs:
symbol(string) := IPR(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
initSupply = 1000000000

IRs:
initSupply(uint256) := 1000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
}
// Function: 859.sol-CoinIpr-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_46(bool) = b <= a
TMP_47(None) = SOLIDITY_CALL assert(bool)(TMP_46)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_48(uint256) = a - b
RETURN TMP_48"];
}
// Function: 859.sol-CoinIpr-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_3 = CONVERT 0 to address
TMP_4(bool) = _to != TMP_3
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_6(bool) = _value <= REF_2
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = sub(balances[msg.sender],_value)

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_4(uint256) -> balances[msg.sender]
TMP_8(uint256) = INTERNAL_CALL, CoinIpr.sub(uint256,uint256)(REF_4,_value)
REF_3(uint256) (->balances) := TMP_8(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = add(balances[_to],_value)

IRs:
REF_5(uint256) -> balances[_to]
REF_6(uint256) -> balances[_to]
TMP_9(uint256) = INTERNAL_CALL, CoinIpr.add(uint256,uint256)(REF_6,_value)
REF_5(uint256) (->balances) := TMP_9(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 859.sol-CoinIpr-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_11 = CONVERT 0 to address
TMP_12(bool) = _to != TMP_11
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_7(uint256) -> balances[_from]
TMP_14(bool) = _value <= REF_7
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
TMP_16(bool) = _value <= REF_9
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = sub(balances[_from],_value)

IRs:
REF_10(uint256) -> balances[_from]
REF_11(uint256) -> balances[_from]
TMP_18(uint256) = INTERNAL_CALL, CoinIpr.sub(uint256,uint256)(REF_11,_value)
REF_10(uint256) (->balances) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = add(balances[_to],_value)

IRs:
REF_12(uint256) -> balances[_to]
REF_13(uint256) -> balances[_to]
TMP_19(uint256) = INTERNAL_CALL, CoinIpr.add(uint256,uint256)(REF_13,_value)
REF_12(uint256) (->balances) := TMP_19(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = sub(allowed[_from][msg.sender],_value)

IRs:
REF_14(mapping(address => uint256)) -> allowed[_from]
REF_15(uint256) -> REF_14[msg.sender]
REF_16(mapping(address => uint256)) -> allowed[_from]
REF_17(uint256) -> REF_16[msg.sender]
TMP_20(uint256) = INTERNAL_CALL, CoinIpr.sub(uint256,uint256)(REF_17,_value)
REF_15(uint256) (->allowed) := TMP_20(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 859.sol-CoinIpr-withDraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(address(this).balance > 0)

IRs:
TMP_32 = CONVERT this to address
TMP_33(uint256) = SOLIDITY_CALL balance(address)(TMP_32)
TMP_34(bool) = TMP_33 > 0
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin_address.transfer(address(this).balance)

IRs:
TMP_36 = CONVERT this to address
TMP_37(uint256) = SOLIDITY_CALL balance(address)(TMP_36)
Transfer dest:admin_address value:TMP_37"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
admin_only()

IRs:
MODIFIER_CALL, CoinIpr.admin_only()()"];
3->1;
}
}
