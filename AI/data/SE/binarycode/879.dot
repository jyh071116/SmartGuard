digraph G {
// Function: 879.sol-MinimalTokenInterface-balanceOf(address)
digraph{
}
// Function: 879.sol-MinimalTokenInterface-decimals()
digraph{
}
// Function: 879.sol-MinimalTokenInterface-transfer(address,uint256)
digraph{
}
// Function: 879.sol-MinimalTokenInterface-transferFrom(address,address,uint256)
digraph{
}
// Function: 879.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_1(bool) = msg.sender == newOwner
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_4 = CONVERT 0 to address
newOwner(address) := TMP_4(address)"];
}
// Function: 879.sol-Owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 879.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 879.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 879.sol-SNcoin_AgentsSale-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_8(bool) = msg.sender == newOwner
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_11 = CONVERT 0 to address
newOwner(address) := TMP_11(address)"];
}
// Function: 879.sol-SNcoin_AgentsSale-buy(uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(fundingEnabled)

IRs:
TMP_40(None) = SOLIDITY_CALL require(bool)(fundingEnabled)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenPrice = tokenPriceProvider.tokenPrice()

IRs:
TMP_41(uint256) = HIGH_LEVEL_CALL, dest:tokenPriceProvider(TokenPriveProviderInterface), function:tokenPrice, arguments:[]  
tokenPrice(uint256) := TMP_41(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(tokenPrice > 10 ** 9)

IRs:
TMP_42(uint256) = 10 ** 9
TMP_43(bool) = tokenPrice > TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(msg.value >= tokenPrice)

IRs:
TMP_45(bool) = msg.value >= tokenPrice
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_discount <= 20)

IRs:
TMP_47(bool) = _discount <= 20
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_promocode.length == 97)

IRs:
REF_3 -> LENGTH _promocode
TMP_49(bool) = REF_3 == 97
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
v < 27

IRs:
TMP_51(bool) = v < 27
CONDITION TMP_51"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
require(bool)((v == 27) || (v == 28))

IRs:
TMP_52(bool) = v == 27
TMP_53(bool) = v == 28
TMP_54(bool) = TMP_52 || TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
agentSigner = ecrecover(bytes32,uint8,bytes32,bytes32)(h,v,r,s)

IRs:
TMP_56(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(h,v,r,s)
agentSigner(address) := TMP_56(address)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
require(bool)(agentSigner != 0)

IRs:
TMP_57(bool) = agentSigner != 0
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool)(agents[agentSigner] != 0)

IRs:
REF_4(address) -> agents[agentSigner]
TMP_59(bool) = REF_4 != 0
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
19->20;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
check_h = keccak256()(abi.encodePacked(_discount,msg.sender))

IRs:
TMP_61(bytes) = SOLIDITY_CALL abi.encodePacked()(_discount,msg.sender)
TMP_62(bytes32) = SOLIDITY_CALL keccak256()(TMP_61)
check_h(bytes32) := TMP_62(bytes32)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool)(check_h == h)

IRs:
TMP_63(bool) = check_h == h
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
remVal = ((20 - _discount) * msg.value) / 100

IRs:
TMP_65(uint256) = 20 - _discount
TMP_66(uint256) = TMP_65 * msg.value
TMP_67(uint256) = TMP_66 / 100
remVal(uint256) := TMP_67(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
totalCollected += msg.value - remVal

IRs:
TMP_68(uint256) = msg.value - remVal
totalCollected(uint256) = totalCollected + TMP_68"];
23->24;
24[label="Node Type: NEW VARIABLE 24

EXPRESSION:
discountedPrice = ((100 - _discount) * tokenPrice) / 100

IRs:
TMP_69(uint256) = 100 - _discount
TMP_70(uint256) = TMP_69 * tokenPrice
TMP_71(uint256) = TMP_70 / 100
discountedPrice(uint256) := TMP_71(uint256)"];
24->25;
25[label="Node Type: NEW VARIABLE 25

EXPRESSION:
tokens = (msg.value * 10 ** uint256(tokenContract.decimals())) / discountedPrice

IRs:
TMP_72(uint8) = HIGH_LEVEL_CALL, dest:tokenContract(MinimalTokenInterface), function:decimals, arguments:[]  
TMP_73 = CONVERT TMP_72 to uint256
TMP_74(uint256) = 10 ** TMP_73
TMP_75(uint256) = msg.value * TMP_74
TMP_76(uint256) = TMP_75 / discountedPrice
tokens(uint256) := TMP_76(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
require(bool)(tokenContract.transferFrom(spenderAddress,msg.sender,tokens))

IRs:
TMP_77(bool) = HIGH_LEVEL_CALL, dest:tokenContract(MinimalTokenInterface), function:transferFrom, arguments:['spenderAddress', 'msg.sender', 'tokens']  
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
vaultAddress.transfer(msg.value - remVal)

IRs:
TMP_79(uint256) = msg.value - remVal
Transfer dest:vaultAddress value:TMP_79"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
agents[agentSigner].transfer(remVal)

IRs:
REF_9(address) -> agents[agentSigner]
Transfer dest:REF_9 value:remVal"];
28->29;
29[label="Node Type: RETURN 29
"];
}
// Function: 879.sol-SNcoin_AgentsSale-claimTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
_token == 0x0

IRs:
TMP_83(bool) = _token == 0
CONDITION TMP_83"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_84 = CONVERT this to address
TMP_85(uint256) = SOLIDITY_CALL balance(address)(TMP_84)
Transfer dest:owner value:TMP_85"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
token = MinimalTokenInterface(_token)

IRs:
TMP_87 = CONVERT _token to MinimalTokenInterface
token(MinimalTokenInterface) := TMP_87(MinimalTokenInterface)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
balance = token.balanceOf(this)

IRs:
TMP_88(uint256) = HIGH_LEVEL_CALL, dest:token(MinimalTokenInterface), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_88(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
token.transfer(owner,balance)

IRs:
TMP_89(bool) = HIGH_LEVEL_CALL, dest:token(MinimalTokenInterface), function:transfer, arguments:['owner', 'balance']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ClaimedTokens(_token,owner,balance)

IRs:
Emit ClaimedTokens(_token,owner,balance)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
9->1;
}
// Function: 879.sol-SNcoin_AgentsSale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 879.sol-SNcoin_AgentsSale-constructor(address,address,address,bool,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tokenAddress != 0)

IRs:
TMP_12(bool) = _tokenAddress != 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_spenderAddress != 0)

IRs:
TMP_14(bool) = _spenderAddress != 0
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_vaultAddress != 0)

IRs:
TMP_16(bool) = _vaultAddress != 0
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_tokenPriceProvider != 0)

IRs:
TMP_18(bool) = _tokenPriceProvider != 0
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenContract = MinimalTokenInterface(_tokenAddress)

IRs:
TMP_20 = CONVERT _tokenAddress to MinimalTokenInterface
tokenContract(MinimalTokenInterface) := TMP_20(MinimalTokenInterface)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
spenderAddress = _spenderAddress

IRs:
spenderAddress(address) := _spenderAddress(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
vaultAddress = _vaultAddress

IRs:
vaultAddress(address) := _vaultAddress(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
fundingEnabled = _fundingEnabled

IRs:
fundingEnabled(bool) := _fundingEnabled(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
tokenPriceProvider = TokenPriveProviderInterface(_tokenPriceProvider)

IRs:
TMP_21 = CONVERT _tokenPriceProvider to TokenPriveProviderInterface
tokenPriceProvider(TokenPriveProviderInterface) := TMP_21(TokenPriveProviderInterface)"];
}
// Function: 879.sol-SNcoin_AgentsSale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_82(None) = SOLIDITY_CALL revert()()"];
}
// Function: 879.sol-SNcoin_AgentsSale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_92(bool) = msg.sender == owner
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 879.sol-SNcoin_AgentsSale-setAgentAddress(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_agentSigner != 0)

IRs:
TMP_37(bool) = _agentSigner != 0
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
agents[_agentSigner] = _agentAddress

IRs:
REF_1(address) -> agents[_agentSigner]
REF_1(address) (->agents) := _agentAddress(address)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 879.sol-SNcoin_AgentsSale-setFundingEnabled(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fundingEnabled = _fundingEnabled

IRs:
fundingEnabled(bool) := _fundingEnabled(bool)"];
1->2;
2[label="Node Type: RETURN 2
"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 879.sol-SNcoin_AgentsSale-setSpenderAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spenderAddress != 0)

IRs:
TMP_22(bool) = _spenderAddress != 0
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
spenderAddress = _spenderAddress

IRs:
spenderAddress(address) := _spenderAddress(address)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 879.sol-SNcoin_AgentsSale-setVaultAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_vaultAddress != 0)

IRs:
TMP_25(bool) = _vaultAddress != 0
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vaultAddress = _vaultAddress

IRs:
vaultAddress(address) := _vaultAddress(address)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 879.sol-SNcoin_AgentsSale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 879.sol-SNcoin_AgentsSale-updateTokenPriceProvider(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newTokenPriceProvider != 0)

IRs:
TMP_29(bool) = _newTokenPriceProvider != 0
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenPriceProvider = TokenPriveProviderInterface(_newTokenPriceProvider)

IRs:
TMP_31 = CONVERT _newTokenPriceProvider to TokenPriveProviderInterface
tokenPriceProvider(TokenPriveProviderInterface) := TMP_31(TokenPriveProviderInterface)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(tokenPriceProvider.tokenPrice() > 10 ** 9)

IRs:
TMP_32(uint256) = HIGH_LEVEL_CALL, dest:tokenPriceProvider(TokenPriveProviderInterface), function:tokenPrice, arguments:[]  
TMP_33(uint256) = 10 ** 9
TMP_34(bool) = TMP_32 > TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
3->4;
4[label="Node Type: RETURN 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 879.sol-TokenPriveProviderInterface-tokenPrice()
digraph{
}
}
