digraph G {
// Function: 933.sol-JIincForwarderInterface-cancelMigration()
digraph{
}
// Function: 933.sol-JIincForwarderInterface-deposit()
digraph{
}
// Function: 933.sol-JIincForwarderInterface-finishMigration()
digraph{
}
// Function: 933.sol-JIincForwarderInterface-setup(address)
digraph{
}
// Function: 933.sol-JIincForwarderInterface-startMigration(address)
digraph{
}
// Function: 933.sol-JIincForwarderInterface-status()
digraph{
}
// Function: 933.sol-MSFun-checkCount(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_82(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_82(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(self.proposal_[_whatProposal].count)

IRs:
REF_81(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_82(MSFun.ProposalData) -> REF_81[_whatProposal]
REF_83(uint256) -> REF_82.count
RETURN REF_83"];
3[label="Node Type: RETURN 3

EXPRESSION:
signature_count

IRs:
RETURN signature_count"];
}
// Function: 933.sol-MSFun-checkMsgData(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_81(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_81(bytes32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(self.proposal_[_whatProposal].msgData)

IRs:
REF_78(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_79(MSFun.ProposalData) -> REF_78[_whatProposal]
REF_80(bytes32) -> REF_79.msgData
RETURN REF_80"];
3[label="Node Type: RETURN 3

EXPRESSION:
msg_data

IRs:
RETURN msg_data"];
}
// Function: 933.sol-MSFun-checkSigner(MSFun.Data,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_signer > 0,MSFun checkSigner failed - 0 not allowed)

IRs:
TMP_83(bool) = _signer > 0
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,MSFun checkSigner failed - 0 not allowed)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_85(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_85(bytes32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(self.proposal_[_whatProposal].log[_signer - 1])

IRs:
REF_84(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_85(MSFun.ProposalData) -> REF_84[_whatProposal]
REF_86(mapping(uint256 => address)) -> REF_85.log
TMP_86(uint256) = _signer - 1
REF_87(address) -> REF_86[TMP_86]
RETURN REF_87"];
4[label="Node Type: RETURN 4

EXPRESSION:
signer

IRs:
RETURN signer"];
}
// Function: 933.sol-MSFun-deleteProposal(MSFun.Data,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_76(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_76(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < self.proposal_[_whatProposal].count

IRs:
REF_60(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_61(MSFun.ProposalData) -> REF_60[_whatProposal]
REF_62(uint256) -> REF_61.count
TMP_77(bool) = i < REF_62
CONDITION TMP_77"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_whichAdmin = self.proposal_[_whatProposal].log[i]

IRs:
REF_63(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_64(MSFun.ProposalData) -> REF_63[_whatProposal]
REF_65(mapping(uint256 => address)) -> REF_64.log
REF_66(address) -> REF_65[i]
_whichAdmin(address) := REF_66(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete self.proposal_[_whatProposal].admin[_whichAdmin]

IRs:
REF_67(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_68(MSFun.ProposalData) -> REF_67[_whatProposal]
REF_69(mapping(address => bool)) -> REF_68.admin
REF_70(bool) -> REF_69[_whichAdmin]
REF_69 = delete REF_70 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
delete self.proposal_[_whatProposal].log[i]

IRs:
REF_71(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_72(MSFun.ProposalData) -> REF_71[_whatProposal]
REF_73(mapping(uint256 => address)) -> REF_72.log
REF_74(address) -> REF_73[i]
REF_73 = delete REF_74 "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_78(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete self.proposal_[_whatProposal]

IRs:
REF_75(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_76(MSFun.ProposalData) -> REF_75[_whatProposal]
REF_75 = delete REF_76 "];
}
// Function: 933.sol-MSFun-multiSig(MSFun.Data,uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_whatProposal = whatProposal(_whatFunction)

IRs:
TMP_69(bytes32) = INTERNAL_CALL, MSFun.whatProposal(bytes32)(_whatFunction)
_whatProposal(bytes32) := TMP_69(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_currentCount = self.proposal_[_whatProposal].count

IRs:
REF_19(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_20(MSFun.ProposalData) -> REF_19[_whatProposal]
REF_21(uint256) -> REF_20.count
_currentCount(uint256) := REF_21(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_whichAdmin = msg.sender

IRs:
_whichAdmin(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_msgData = keccak256()(msg.data)

IRs:
TMP_70(bytes32) = SOLIDITY_CALL keccak256()(msg.data)
_msgData(bytes32) := TMP_70(bytes32)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_currentCount == 0

IRs:
TMP_71(bool) = _currentCount == 0
CONDITION TMP_71"];
5->6[label="True"];
5->13[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
self.proposal_[_whatProposal].msgData = _msgData

IRs:
REF_22(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_23(MSFun.ProposalData) -> REF_22[_whatProposal]
REF_24(bytes32) -> REF_23.msgData
REF_24(bytes32) (->self) := _msgData(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] = true

IRs:
REF_25(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_26(MSFun.ProposalData) -> REF_25[_whatProposal]
REF_27(mapping(address => bool)) -> REF_26.admin
REF_28(bool) -> REF_27[_whichAdmin]
REF_28(bool) (->self) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin

IRs:
REF_29(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_30(MSFun.ProposalData) -> REF_29[_whatProposal]
REF_31(mapping(uint256 => address)) -> REF_30.log
REF_32(address) -> REF_31[_currentCount]
REF_32(address) (->self) := _whichAdmin(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
self.proposal_[_whatProposal].count += 1

IRs:
REF_33(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_34(MSFun.ProposalData) -> REF_33[_whatProposal]
REF_35(uint256) -> REF_34.count
REF_35(-> self) = REF_35 + 1"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
self.proposal_[_whatProposal].count == _requiredSignatures

IRs:
REF_36(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_37(MSFun.ProposalData) -> REF_36[_whatProposal]
REF_38(uint256) -> REF_37.count
TMP_72(bool) = REF_38 == _requiredSignatures
CONDITION TMP_72"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
(true)

IRs:
RETURN True"];
12[label="Node Type: END_IF 12
"];
12->23;
13[label="Node Type: IF 13

EXPRESSION:
self.proposal_[_whatProposal].msgData == _msgData

IRs:
REF_39(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_40(MSFun.ProposalData) -> REF_39[_whatProposal]
REF_41(bytes32) -> REF_40.msgData
TMP_73(bool) = REF_41 == _msgData
CONDITION TMP_73"];
13->14[label="True"];
13->22[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] == false

IRs:
REF_42(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_43(MSFun.ProposalData) -> REF_42[_whatProposal]
REF_44(mapping(address => bool)) -> REF_43.admin
REF_45(bool) -> REF_44[_whichAdmin]
TMP_74(bool) = REF_45 == False
CONDITION TMP_74"];
14->15[label="True"];
14->18[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
self.proposal_[_whatProposal].admin[_whichAdmin] = true

IRs:
REF_46(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_47(MSFun.ProposalData) -> REF_46[_whatProposal]
REF_48(mapping(address => bool)) -> REF_47.admin
REF_49(bool) -> REF_48[_whichAdmin]
REF_49(bool) (->self) := True(bool)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin

IRs:
REF_50(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_51(MSFun.ProposalData) -> REF_50[_whatProposal]
REF_52(mapping(uint256 => address)) -> REF_51.log
REF_53(address) -> REF_52[_currentCount]
REF_53(address) (->self) := _whichAdmin(address)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
self.proposal_[_whatProposal].count += 1

IRs:
REF_54(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_55(MSFun.ProposalData) -> REF_54[_whatProposal]
REF_56(uint256) -> REF_55.count
REF_56(-> self) = REF_56 + 1"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
self.proposal_[_whatProposal].count == _requiredSignatures

IRs:
REF_57(mapping(bytes32 => MSFun.ProposalData)) -> self.proposal_
REF_58(MSFun.ProposalData) -> REF_57[_whatProposal]
REF_59(uint256) -> REF_58.count
TMP_75(bool) = REF_59 == _requiredSignatures
CONDITION TMP_75"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: RETURN 20

EXPRESSION:
(true)

IRs:
RETURN True"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
}
// Function: 933.sol-MSFun-whatProposal(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keccak256()(abi.encodePacked(_whatFunction,this)))

IRs:
TMP_79(bytes) = SOLIDITY_CALL abi.encodePacked()(_whatFunction,this)
TMP_80(bytes32) = SOLIDITY_CALL keccak256()(TMP_79)
RETURN TMP_80"];
}
// Function: 933.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_24 = CONVERT _input to bytes
_temp(bytes) := TMP_24(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_0 -> LENGTH _temp
_length(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_25(bool) = _length <= 32
TMP_26(bool) = _length > 0
TMP_27(bool) = TMP_25 && TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_1(None) -> _temp[0]
TMP_29(bool) = REF_1 != 32
TMP_30(uint256) = _length - 1
REF_2(None) -> _temp[TMP_30]
TMP_31(bool) = REF_2 != 32
TMP_32(bool) = TMP_29 && TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_3(None) -> _temp[0]
TMP_34(bool) = REF_3 == 48
CONDITION TMP_34"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_4(None) -> _temp[1]
TMP_35(bool) = REF_4 != 120
TMP_36(None) = SOLIDITY_CALL require(bool,string)(TMP_35,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_5(None) -> _temp[1]
TMP_37(bool) = REF_5 != 88
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_39(bool) = i < _length
CONDITION TMP_39"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_6(None) -> _temp[i]
TMP_40(bool) = REF_6 > 64
REF_7(None) -> _temp[i]
TMP_41(bool) = REF_7 < 91
TMP_42(bool) = TMP_40 && TMP_41
CONDITION TMP_42"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_8(bytes1) -> _temp[i]
REF_9(None) -> _temp[i]
TMP_43 = CONVERT REF_9 to uint256
TMP_44(uint256) = TMP_43 + 32
TMP_45 = CONVERT TMP_44 to bytes1
REF_8(bytes1) (->_temp) := TMP_45(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_46(bool) = _hasNonNumber == False
CONDITION TMP_46"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_10(None) -> _temp[i]
TMP_47(bool) = REF_10 == 32
REF_11(None) -> _temp[i]
TMP_48(bool) = REF_11 > 96
REF_12(None) -> _temp[i]
TMP_49(bool) = REF_12 < 123
TMP_50(bool) = TMP_48 && TMP_49
TMP_51(bool) = TMP_47 || TMP_50
REF_13(None) -> _temp[i]
TMP_52(bool) = REF_13 > 47
REF_14(None) -> _temp[i]
TMP_53(bool) = REF_14 < 58
TMP_54(bool) = TMP_52 && TMP_53
TMP_55(bool) = TMP_51 || TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_15(None) -> _temp[i]
TMP_57(bool) = REF_15 == 32
CONDITION TMP_57"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_58(uint256) = i + 1
REF_16(None) -> _temp[TMP_58]
TMP_59(bool) = REF_16 != 32
TMP_60(None) = SOLIDITY_CALL require(bool,string)(TMP_59,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_61(bool) = _hasNonNumber == False
REF_17(None) -> _temp[i]
TMP_62(bool) = REF_17 < 48
REF_18(None) -> _temp[i]
TMP_63(bool) = REF_18 > 57
TMP_64(bool) = TMP_62 || TMP_63
TMP_65(bool) = TMP_61 && TMP_64
CONDITION TMP_65"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_66(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_67(bool) = _hasNonNumber == True
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 933.sol-PlayerBook-addGame(address,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(gameIDs_[_gameAddress] == 0,derp, that games already been registered)

IRs:
REF_241(uint256) -> gameIDs_[_gameAddress]
TMP_193(bool) = REF_241 == 0
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,derp, that games already been registered)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gID_ ++

IRs:
TMP_195(uint256) := gID_(uint256)
gID_(uint256) = gID_ + 1"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_name = _gameNameStr.nameFilter()

IRs:
TMP_196(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_gameNameStr'] 
_name(bytes32) := TMP_196(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameIDs_[_gameAddress] = gID_

IRs:
REF_243(uint256) -> gameIDs_[_gameAddress]
REF_243(uint256) (->gameIDs_) := gID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gameNames_[_gameAddress] = _name

IRs:
REF_244(bytes32) -> gameNames_[_gameAddress]
REF_244(bytes32) (->gameNames_) := _name(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[gID_] = PlayerBookReceiverInterface(_gameAddress)

IRs:
REF_245(PlayerBookReceiverInterface) -> games_[gID_]
TMP_197 = CONVERT _gameAddress to PlayerBookReceiverInterface
REF_245(PlayerBookReceiverInterface) (->games_) := TMP_197(PlayerBookReceiverInterface)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
games_[gID_].receivePlayerInfo(1,plyr_[1].addr,plyr_[1].name,0)

IRs:
REF_246(PlayerBookReceiverInterface) -> games_[gID_]
REF_248(PlayerBook.Player) -> plyr_[1]
REF_249(address) -> REF_248.addr
REF_250(PlayerBook.Player) -> plyr_[1]
REF_251(bytes32) -> REF_250.name
HIGH_LEVEL_CALL, dest:REF_246(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['1', 'REF_249', 'REF_251', '0']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
games_[gID_].receivePlayerInfo(2,plyr_[2].addr,plyr_[2].name,0)

IRs:
REF_252(PlayerBookReceiverInterface) -> games_[gID_]
REF_254(PlayerBook.Player) -> plyr_[2]
REF_255(address) -> REF_254.addr
REF_256(PlayerBook.Player) -> plyr_[2]
REF_257(bytes32) -> REF_256.name
HIGH_LEVEL_CALL, dest:REF_252(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['2', 'REF_255', 'REF_257', '0']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
games_[gID_].receivePlayerInfo(3,plyr_[3].addr,plyr_[3].name,0)

IRs:
REF_258(PlayerBookReceiverInterface) -> games_[gID_]
REF_260(PlayerBook.Player) -> plyr_[3]
REF_261(address) -> REF_260.addr
REF_262(PlayerBook.Player) -> plyr_[3]
REF_263(bytes32) -> REF_262.name
HIGH_LEVEL_CALL, dest:REF_258(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['3', 'REF_261', 'REF_263', '0']  "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
games_[gID_].receivePlayerInfo(4,plyr_[4].addr,plyr_[4].name,0)

IRs:
REF_264(PlayerBookReceiverInterface) -> games_[gID_]
REF_266(PlayerBook.Player) -> plyr_[4]
REF_267(address) -> REF_266.addr
REF_268(PlayerBook.Player) -> plyr_[4]
REF_269(bytes32) -> REF_268.name
HIGH_LEVEL_CALL, dest:REF_264(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['4', 'REF_267', 'REF_269', '0']  "];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
11->1;
}
// Function: 933.sol-PlayerBook-addMeToAllGames()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_171(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_171(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_132(bool) = _pID != 0
TMP_133(None) = SOLIDITY_CALL require(bool,string)(TMP_132,hey there buddy, you dont even have an account)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_laff = plyr_[_pID].laff

IRs:
REF_172(PlayerBook.Player) -> plyr_[_pID]
REF_173(uint256) -> REF_172.laff
_laff(uint256) := REF_173(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_174(PlayerBook.Player) -> plyr_[_pID]
REF_175(uint256) -> REF_174.names
_totalNames(uint256) := REF_175(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_name = plyr_[_pID].name

IRs:
REF_176(PlayerBook.Player) -> plyr_[_pID]
REF_177(bytes32) -> REF_176.name
_name(bytes32) := REF_177(bytes32)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i <= gID_

IRs:
TMP_134(bool) = i <= gID_
CONDITION TMP_134"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_laff)

IRs:
REF_178(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_178(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_laff']  "];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_totalNames > 1

IRs:
TMP_136(bool) = _totalNames > 1
CONDITION TMP_136"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
ii <= _totalNames

IRs:
TMP_137(bool) = ii <= _totalNames
CONDITION TMP_137"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_180(PlayerBookReceiverInterface) -> games_[i]
REF_182(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_183(bytes32) -> REF_182[ii]
HIGH_LEVEL_CALL, dest:REF_180(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_183']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ii ++

IRs:
TMP_139(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_140(uint256) := i(uint256)
i(uint256) = i + 1"];
20->10;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
21->1;
}
// Function: 933.sol-PlayerBook-addMeToGame(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_gameID <= gID_,silly player, that game doesn't exist yet)

IRs:
TMP_122(bool) = _gameID <= gID_
TMP_123(None) = SOLIDITY_CALL require(bool,string)(TMP_122,silly player, that game doesn't exist yet)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_158(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_158(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_pID != 0,hey there buddy, you dont even have an account)

IRs:
TMP_124(bool) = _pID != 0
TMP_125(None) = SOLIDITY_CALL require(bool,string)(TMP_124,hey there buddy, you dont even have an account)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_totalNames = plyr_[_pID].names

IRs:
REF_159(PlayerBook.Player) -> plyr_[_pID]
REF_160(uint256) -> REF_159.names
_totalNames(uint256) := REF_160(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games_[_gameID].receivePlayerInfo(_pID,_addr,plyr_[_pID].name,plyr_[_pID].laff)

IRs:
REF_161(PlayerBookReceiverInterface) -> games_[_gameID]
REF_163(PlayerBook.Player) -> plyr_[_pID]
REF_164(bytes32) -> REF_163.name
REF_165(PlayerBook.Player) -> plyr_[_pID]
REF_166(uint256) -> REF_165.laff
HIGH_LEVEL_CALL, dest:REF_161(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', 'REF_164', 'REF_166']  "];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_totalNames > 1

IRs:
TMP_127(bool) = _totalNames > 1
CONDITION TMP_127"];
7->10[label="True"];
7->14[label="False"];
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->14;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
ii = 1

IRs:
ii(uint256) := 1(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
ii <= _totalNames

IRs:
TMP_128(bool) = ii <= _totalNames
CONDITION TMP_128"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
games_[_gameID].receivePlayerNameList(_pID,plyrNameList_[_pID][ii])

IRs:
REF_167(PlayerBookReceiverInterface) -> games_[_gameID]
REF_169(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_170(bytes32) -> REF_169[ii]
HIGH_LEVEL_CALL, dest:REF_167(PlayerBookReceiverInterface), function:receivePlayerNameList, arguments:['_pID', 'REF_170']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ii ++

IRs:
TMP_130(uint256) := ii(uint256)
ii(uint256) = ii + 1"];
13->11;
14[label="Node Type: END_IF 14
"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
15->1;
}
// Function: 933.sol-PlayerBook-checkIfNameValid(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameStr.nameFilter()

IRs:
TMP_87(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameStr'] 
_name(bytes32) := TMP_87(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxName_[_name] == 0

IRs:
REF_137(uint256) -> pIDxName_[_name]
TMP_88(bool) = REF_137 == 0
CONDITION TMP_88"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 933.sol-PlayerBook-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
plyr_[1].addr = 0x326d8d593195a3153f6d55d7791c10af9bcef597

IRs:
REF_88(PlayerBook.Player) -> plyr_[1]
REF_89(address) -> REF_88.addr
REF_89(address) (->plyr_) := 287892632951187980033954118411566022188063454615(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
plyr_[1].name = justo

IRs:
REF_90(PlayerBook.Player) -> plyr_[1]
REF_91(bytes32) -> REF_90.name
REF_91(bytes32) (->plyr_) := justo(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[1].names = 1

IRs:
REF_92(PlayerBook.Player) -> plyr_[1]
REF_93(uint256) -> REF_92.names
REF_93(uint256) (->plyr_) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pIDxAddr_[0x326d8d593195a3153f6d55d7791c10af9bcef597] = 1

IRs:
REF_94(uint256) -> pIDxAddr_[287892632951187980033954118411566022188063454615]
REF_94(uint256) (->pIDxAddr_) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[justo] = 1

IRs:
REF_95(uint256) -> pIDxName_[justo]
REF_95(uint256) (->pIDxName_) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyrNames_[1][justo] = true

IRs:
REF_96(mapping(bytes32 => bool)) -> plyrNames_[1]
REF_97(bool) -> REF_96[justo]
REF_97(bool) (->plyrNames_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNameList_[1][1] = justo

IRs:
REF_98(mapping(uint256 => bytes32)) -> plyrNameList_[1]
REF_99(bytes32) -> REF_98[1]
REF_99(bytes32) (->plyrNameList_) := justo(string)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[2].addr = 0x15B474F7DE7157FA0dB9FaaA8b82761E78E804B9

IRs:
REF_100(PlayerBook.Player) -> plyr_[2]
REF_101(address) -> REF_100.addr
REF_101(address) (->plyr_) := 123913129693625984824973980258711150651234583737(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[2].name = mantso

IRs:
REF_102(PlayerBook.Player) -> plyr_[2]
REF_103(bytes32) -> REF_102.name
REF_103(bytes32) (->plyr_) := mantso(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[2].names = 1

IRs:
REF_104(PlayerBook.Player) -> plyr_[2]
REF_105(uint256) -> REF_104.names
REF_105(uint256) (->plyr_) := 1(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
pIDxAddr_[0x15B474F7DE7157FA0dB9FaaA8b82761E78E804B9] = 2

IRs:
REF_106(uint256) -> pIDxAddr_[123913129693625984824973980258711150651234583737]
REF_106(uint256) (->pIDxAddr_) := 2(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
pIDxName_[mantso] = 2

IRs:
REF_107(uint256) -> pIDxName_[mantso]
REF_107(uint256) (->pIDxName_) := 2(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
plyrNames_[2][mantso] = true

IRs:
REF_108(mapping(bytes32 => bool)) -> plyrNames_[2]
REF_109(bool) -> REF_108[mantso]
REF_109(bool) (->plyrNames_) := True(bool)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyrNameList_[2][1] = mantso

IRs:
REF_110(mapping(uint256 => bytes32)) -> plyrNameList_[2]
REF_111(bytes32) -> REF_110[1]
REF_111(bytes32) (->plyrNameList_) := mantso(string)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[3].addr = 0xD3d96E74aFAE57B5191DC44Bdb08b037355523Ba

IRs:
REF_112(PlayerBook.Player) -> plyr_[3]
REF_113(address) -> REF_112.addr
REF_113(address) (->plyr_) := 1209445936409638479124350881081062817572593148858(address)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[3].name = sumpunk

IRs:
REF_114(PlayerBook.Player) -> plyr_[3]
REF_115(bytes32) -> REF_114.name
REF_115(bytes32) (->plyr_) := sumpunk(string)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
plyr_[3].names = 1

IRs:
REF_116(PlayerBook.Player) -> plyr_[3]
REF_117(uint256) -> REF_116.names
REF_117(uint256) (->plyr_) := 1(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
pIDxAddr_[0xD3d96E74aFAE57B5191DC44Bdb08b037355523Ba] = 3

IRs:
REF_118(uint256) -> pIDxAddr_[1209445936409638479124350881081062817572593148858]
REF_118(uint256) (->pIDxAddr_) := 3(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
pIDxName_[sumpunk] = 3

IRs:
REF_119(uint256) -> pIDxName_[sumpunk]
REF_119(uint256) (->pIDxName_) := 3(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
plyrNames_[3][sumpunk] = true

IRs:
REF_120(mapping(bytes32 => bool)) -> plyrNames_[3]
REF_121(bool) -> REF_120[sumpunk]
REF_121(bool) (->plyrNames_) := True(bool)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
plyrNameList_[3][1] = sumpunk

IRs:
REF_122(mapping(uint256 => bytes32)) -> plyrNameList_[3]
REF_123(bytes32) -> REF_122[1]
REF_123(bytes32) (->plyrNameList_) := sumpunk(string)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
plyr_[4].addr = 0x0c2d482FBc1da4DaCf3CD05b6A5955De1A296fa8

IRs:
REF_124(PlayerBook.Player) -> plyr_[4]
REF_125(address) -> REF_124.addr
REF_125(address) (->plyr_) := 69517711111727067821546211166674614150608023464(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
plyr_[4].name = wang

IRs:
REF_126(PlayerBook.Player) -> plyr_[4]
REF_127(bytes32) -> REF_126.name
REF_127(bytes32) (->plyr_) := wang(string)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
plyr_[4].names = 1

IRs:
REF_128(PlayerBook.Player) -> plyr_[4]
REF_129(uint256) -> REF_128.names
REF_129(uint256) (->plyr_) := 1(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
pIDxAddr_[0x0c2d482FBc1da4DaCf3CD05b6A5955De1A296fa8] = 4

IRs:
REF_130(uint256) -> pIDxAddr_[69517711111727067821546211166674614150608023464]
REF_130(uint256) (->pIDxAddr_) := 4(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
pIDxName_[wang] = 4

IRs:
REF_131(uint256) -> pIDxName_[wang]
REF_131(uint256) (->pIDxName_) := 4(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
plyrNames_[4][wang] = true

IRs:
REF_132(mapping(bytes32 => bool)) -> plyrNames_[4]
REF_133(bool) -> REF_132[wang]
REF_133(bool) (->plyrNames_) := True(bool)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyrNameList_[4][1] = wang

IRs:
REF_134(mapping(uint256 => bytes32)) -> plyrNameList_[4]
REF_135(bytes32) -> REF_134[1]
REF_135(bytes32) (->plyrNameList_) := wang(string)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
pID_ = 4

IRs:
pID_(uint256) := 4(uint256)"];
}
// Function: 933.sol-PlayerBook-determinePID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxAddr_[_addr] == 0

IRs:
REF_213(uint256) -> pIDxAddr_[_addr]
TMP_159(bool) = REF_213 == 0
CONDITION TMP_159"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pID_ ++

IRs:
TMP_160(uint256) := pID_(uint256)
pID_(uint256) = pID_ + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = pID_

IRs:
REF_214(uint256) -> pIDxAddr_[_addr]
REF_214(uint256) (->pIDxAddr_) := pID_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[pID_].addr = _addr

IRs:
REF_215(PlayerBook.Player) -> plyr_[pID_]
REF_216(address) -> REF_215.addr
REF_216(address) (->plyr_) := _addr(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true)

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 933.sol-PlayerBook-getNameFee()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(registrationFee_)

IRs:
RETURN registrationFee_"];
}
// Function: 933.sol-PlayerBook-getPlayerAddr(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].addr)

IRs:
REF_222(PlayerBook.Player) -> plyr_[_pID]
REF_223(address) -> REF_222.addr
RETURN REF_223"];
}
// Function: 933.sol-PlayerBook-getPlayerID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
determinePID(_addr)

IRs:
TMP_161(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(pIDxAddr_[_addr])

IRs:
REF_217(uint256) -> pIDxAddr_[_addr]
RETURN REF_217"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
3->1;
}
// Function: 933.sol-PlayerBook-getPlayerLAff(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].laff)

IRs:
REF_220(PlayerBook.Player) -> plyr_[_pID]
REF_221(uint256) -> REF_220.laff
RETURN REF_221"];
}
// Function: 933.sol-PlayerBook-getPlayerName(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].name)

IRs:
REF_218(PlayerBook.Player) -> plyr_[_pID]
REF_219(bytes32) -> REF_218.name
RETURN REF_219"];
}
// Function: 933.sol-PlayerBook-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_204(bool) = _codeLength == 0
TMP_205(None) = SOLIDITY_CALL require(bool,string)(TMP_204,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 933.sol-PlayerBook-isRegisteredGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameIDs_[msg.sender] != 0)

IRs:
REF_270(uint256) -> gameIDs_[msg.sender]
TMP_210(bool) = REF_270 != 0
TMP_211(None) = SOLIDITY_CALL require(bool)(TMP_210)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 933.sol-PlayerBook-onlyDevs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == 0xE9675cdAf47bab3Eef5B1f1c2b7f8d41cDcf9b29 || msg.sender == 0x01910b43311806Ed713bdbB08113f2153769fFC1,only team just can activate)

IRs:
TMP_206(bool) = msg.sender == 1332499915194238730800561860540191085893243607849
TMP_207(bool) = msg.sender == 8943579923931540369988009549724055111492829121
TMP_208(bool) = TMP_206 || TMP_207
TMP_209(None) = SOLIDITY_CALL require(bool,string)(TMP_208,only team just can activate)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 933.sol-PlayerBook-registerNameCore(uint256,address,uint256,bytes32,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxName_[_name] != 0

IRs:
REF_190(uint256) -> pIDxName_[_name]
TMP_146(bool) = REF_190 != 0
CONDITION TMP_146"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,sorry that names already taken)

IRs:
REF_191(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_192(bool) -> REF_191[_name]
TMP_147(bool) = REF_192 == True
TMP_148(None) = SOLIDITY_CALL require(bool,string)(TMP_147,sorry that names already taken)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_193(PlayerBook.Player) -> plyr_[_pID]
REF_194(bytes32) -> REF_193.name
REF_194(bytes32) (->plyr_) := _name(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_195(uint256) -> pIDxName_[_name]
REF_195(uint256) (->pIDxName_) := _pID(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_196(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_197(bool) -> REF_196[_name]
TMP_149(bool) = REF_197 == False
CONDITION TMP_149"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_198(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_199(bool) -> REF_198[_name]
REF_199(bool) (->plyrNames_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].names ++

IRs:
REF_200(PlayerBook.Player) -> plyr_[_pID]
REF_201(uint256) -> REF_200.names
TMP_150(uint256) := REF_201(uint256)
REF_201(-> plyr_) = REF_201 + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyrNameList_[_pID][plyr_[_pID].names] = _name

IRs:
REF_202(mapping(uint256 => bytes32)) -> plyrNameList_[_pID]
REF_203(PlayerBook.Player) -> plyr_[_pID]
REF_204(uint256) -> REF_203.names
REF_205(bytes32) -> REF_202[REF_204]
REF_205(bytes32) (->plyrNameList_) := _name(bytes32)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
affWallet.transfer(address(this).balance)

IRs:
TMP_151 = CONVERT this to address
TMP_152(uint256) = SOLIDITY_CALL balance(address)(TMP_151)
Transfer dest:affWallet value:TMP_152"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_all == true

IRs:
TMP_154(bool) = _all == True
CONDITION TMP_154"];
12->15[label="True"];
12->19[label="False"];
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
14->19;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i <= gID_

IRs:
TMP_155(bool) = i <= gID_
CONDITION TMP_155"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
games_[i].receivePlayerInfo(_pID,_addr,_name,_affID)

IRs:
REF_207(PlayerBookReceiverInterface) -> games_[i]
HIGH_LEVEL_CALL, dest:REF_207(PlayerBookReceiverInterface), function:receivePlayerInfo, arguments:['_pID', '_addr', '_name', '_affID']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_157(uint256) := i(uint256)
i(uint256) = i + 1"];
18->16;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,msg.value,now)

IRs:
REF_209(PlayerBook.Player) -> plyr_[_affID]
REF_210(address) -> REF_209.addr
REF_211(PlayerBook.Player) -> plyr_[_affID]
REF_212(bytes32) -> REF_211.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_210,REF_212,msg.value,now)"];
}
// Function: 933.sol-PlayerBook-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_89(bool) = msg.value >= registrationFee_
TMP_90(None) = SOLIDITY_CALL require(bool,string)(TMP_89,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_91(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_91(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_92(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_92(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_139(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_139(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID

IRs:
TMP_93(bool) = _affCode != 0
REF_140(PlayerBook.Player) -> plyr_[_pID]
REF_141(uint256) -> REF_140.laff
TMP_94(bool) = _affCode != REF_141
TMP_95(bool) = TMP_93 && TMP_94
TMP_96(bool) = _affCode != _pID
TMP_97(bool) = TMP_95 && TMP_96
CONDITION TMP_97"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_142(PlayerBook.Player) -> plyr_[_pID]
REF_143(uint256) -> REF_142.laff
REF_143(uint256) (->plyr_) := _affCode(uint256)"];
7->11;
8[label="Node Type: IF 8

EXPRESSION:
_affCode == _pID

IRs:
TMP_98(bool) = _affCode == _pID
CONDITION TMP_98"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_affCode = 0

IRs:
_affCode(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
registerNameCore(_pID,_addr,_affCode,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affCode,_name,_isNewPlayer,_all)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
13->1;
}
// Function: 933.sol-PlayerBook-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_163(bool) = msg.value >= registrationFee_
TMP_164(None) = SOLIDITY_CALL require(bool,string)(TMP_163,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_165(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_165(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_224(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_224(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_affID = _affCode

IRs:
_affID(uint256) := _affCode(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != 0 && _affID != plyr_[_pID].laff && _affID != _pID

IRs:
TMP_166(bool) = _affID != 0
REF_225(PlayerBook.Player) -> plyr_[_pID]
REF_226(uint256) -> REF_225.laff
TMP_167(bool) = _affID != REF_226
TMP_168(bool) = TMP_166 && TMP_167
TMP_169(bool) = _affID != _pID
TMP_170(bool) = TMP_168 && TMP_169
CONDITION TMP_170"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_227(PlayerBook.Player) -> plyr_[_pID]
REF_228(uint256) -> REF_227.laff
REF_228(uint256) (->plyr_) := _affID(uint256)"];
6->10;
7[label="Node Type: IF 7

EXPRESSION:
_affID == _pID

IRs:
TMP_171(bool) = _affID == _pID
CONDITION TMP_171"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 933.sol-PlayerBook-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_101(bool) = msg.value >= registrationFee_
TMP_102(None) = SOLIDITY_CALL require(bool,string)(TMP_101,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_103(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_103(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_104(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_104(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_145(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_145(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_105 = CONVERT 0 to address
TMP_106(bool) = _affCode != TMP_105
TMP_107(bool) = _affCode != _addr
TMP_108(bool) = TMP_106 && TMP_107
CONDITION TMP_108"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_146(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_146(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_147(PlayerBook.Player) -> plyr_[_pID]
REF_148(uint256) -> REF_147.laff
TMP_109(bool) = _affID != REF_148
CONDITION TMP_109"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_149(PlayerBook.Player) -> plyr_[_pID]
REF_150(uint256) -> REF_149.laff
REF_150(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 933.sol-PlayerBook-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_174(bool) = msg.value >= registrationFee_
TMP_175(None) = SOLIDITY_CALL require(bool,string)(TMP_174,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_176(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_176(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_229(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_229(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_177 = CONVERT 0 to address
TMP_178(bool) = _affCode != TMP_177
TMP_179(bool) = _affCode != _addr
TMP_180(bool) = TMP_178 && TMP_179
CONDITION TMP_180"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_230(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_230(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_231(PlayerBook.Player) -> plyr_[_pID]
REF_232(uint256) -> REF_231.laff
TMP_181(bool) = _affID != REF_232
CONDITION TMP_181"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_233(PlayerBook.Player) -> plyr_[_pID]
REF_234(uint256) -> REF_233.laff
REF_234(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 933.sol-PlayerBook-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_112(bool) = msg.value >= registrationFee_
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_name = NameFilter.nameFilter(_nameString)

IRs:
TMP_114(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_114(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_115(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_115(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_152(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_152(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_116(bool) = _affCode != 
TMP_117(bool) = _affCode != _name
TMP_118(bool) = TMP_116 && TMP_117
CONDITION TMP_118"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_153(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_153(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_154(PlayerBook.Player) -> plyr_[_pID]
REF_155(uint256) -> REF_154.laff
TMP_119(bool) = _affID != REF_155
CONDITION TMP_119"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_156(PlayerBook.Player) -> plyr_[_pID]
REF_157(uint256) -> REF_156.laff
REF_157(uint256) (->plyr_) := _affID(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
14->1;
}
// Function: 933.sol-PlayerBook-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_184(bool) = msg.value >= registrationFee_
TMP_185(None) = SOLIDITY_CALL require(bool,string)(TMP_184,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_isNewPlayer = determinePID(_addr)

IRs:
TMP_186(bool) = INTERNAL_CALL, PlayerBook.determinePID(address)(_addr)
_isNewPlayer(bool) := TMP_186(bool)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_235(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_235(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_187(bool) = _affCode != 
TMP_188(bool) = _affCode != _name
TMP_189(bool) = TMP_187 && TMP_188
CONDITION TMP_189"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_236(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_236(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_237(PlayerBook.Player) -> plyr_[_pID]
REF_238(uint256) -> REF_237.laff
TMP_190(bool) = _affID != REF_238
CONDITION TMP_190"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_239(PlayerBook.Player) -> plyr_[_pID]
REF_240(uint256) -> REF_239.laff
REF_240(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
registerNameCore(_pID,_addr,_affID,_name,_isNewPlayer,_all)

IRs:
INTERNAL_CALL, PlayerBook.registerNameCore(uint256,address,uint256,bytes32,bool,bool)(_pID,_addr,_affID,_name,_isNewPlayer,_all)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_isNewPlayer,_affID)

IRs:
RETURN _isNewPlayer,_affID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isRegisteredGame()

IRs:
MODIFIER_CALL, PlayerBook.isRegisteredGame()()"];
13->1;
}
// Function: 933.sol-PlayerBook-setRegistrationFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
registrationFee_ = _fee

IRs:
registrationFee_(uint256) := _fee(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, PlayerBook.onlyDevs()()"];
2->1;
}
// Function: 933.sol-PlayerBook-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
affWallet = 0xeCd0D41045030e974C7b94a1C5CcB334D2E6a755

IRs:
affWallet(address) := 1351978850256588505780357935248924763452686640981(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
registrationFee_ = 10000000000000000

IRs:
registrationFee_(uint256) := 10000000000000000(uint256)"];
}
// Function: 933.sol-PlayerBook-useMyOldName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_142(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_142(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_185(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_185(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(plyrNames_[_pID][_name] == true,umm... thats not a name you own)

IRs:
REF_186(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_187(bool) -> REF_186[_name]
TMP_143(bool) = REF_187 == True
TMP_144(None) = SOLIDITY_CALL require(bool,string)(TMP_143,umm... thats not a name you own)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_188(PlayerBook.Player) -> plyr_[_pID]
REF_189(bytes32) -> REF_188.name
REF_189(bytes32) (->plyr_) := _name(bytes32)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, PlayerBook.isHuman()()"];
5->1;
}
// Function: 933.sol-PlayerBookReceiverInterface-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
}
// Function: 933.sol-PlayerBookReceiverInterface-receivePlayerNameList(uint256,bytes32)
digraph{
}
// Function: 933.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 933.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 933.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 933.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_19(bool) = x == 0
CONDITION TMP_19"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_20(bool) = y == 0
CONDITION TMP_20"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_21(bool) = i < y
CONDITION TMP_21"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_22(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_22(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_23(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 933.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_18(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_18"];
}
// Function: 933.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_12(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_13(uint256) = TMP_12 / 2
z(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_14(bool) = z < y
CONDITION TMP_14"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_15(uint256) = x / z
TMP_16(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_15,z)
TMP_17(uint256) = TMP_16 / 2
z(uint256) := TMP_17(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 933.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL require(bool,string)(TMP_6,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 933.sol-TeamJustInterface-adminCount()
digraph{
}
// Function: 933.sol-TeamJustInterface-adminName(address)
digraph{
}
// Function: 933.sol-TeamJustInterface-devCount()
digraph{
}
// Function: 933.sol-TeamJustInterface-isAdmin(address)
digraph{
}
// Function: 933.sol-TeamJustInterface-isDev(address)
digraph{
}
// Function: 933.sol-TeamJustInterface-requiredDevSignatures()
digraph{
}
// Function: 933.sol-TeamJustInterface-requiredSignatures()
digraph{
}
}
