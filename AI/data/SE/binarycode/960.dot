digraph G {
// Function: 960.sol-MultiFundsWallet-clear()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_13(bool) = msg.sender == owner
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_15(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
}
// Function: 960.sol-MultiFundsWallet-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 960.sol-MultiFundsWallet-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 960.sol-MultiFundsWallet-setup(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
keyHash == 0x0

IRs:
TMP_0(bool) = keyHash == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
keyHash = keccak256()(abi.encodePacked(key))

IRs:
TMP_1(bytes) = SOLIDITY_CALL abi.encodePacked()(key)
TMP_2(bytes32) = SOLIDITY_CALL keccak256()(TMP_1)
keyHash(bytes32) := TMP_2(bytes32)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 960.sol-MultiFundsWallet-update(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
keyHash == 0x0

IRs:
TMP_12(bool) = keyHash == 0
CONDITION TMP_12"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
keyHash = _keyHash

IRs:
keyHash(bytes32) := _keyHash(bytes32)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 960.sol-MultiFundsWallet-withdraw(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == tx.origin)

IRs:
TMP_3(bool) = msg.sender == tx.origin
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
keyHash == keccak256()(abi.encodePacked(key))

IRs:
TMP_5(bytes) = SOLIDITY_CALL abi.encodePacked()(key)
TMP_6(bytes32) = SOLIDITY_CALL keccak256()(TMP_5)
TMP_7(bool) = keyHash == TMP_6
CONDITION TMP_7"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
msg.value > 200000000000000000

IRs:
TMP_8(bool) = msg.value > 200000000000000000
CONDITION TMP_8"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
msg.sender.transfer(address(this).balance)

IRs:
TMP_9 = CONVERT this to address
TMP_10(uint256) = SOLIDITY_CALL balance(address)(TMP_9)
Transfer dest:msg.sender value:TMP_10"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
}
}
