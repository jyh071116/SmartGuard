digraph G {
// Function: 964.sol-Lottery-RandomWinner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
players.length < MaxPlayers

IRs:
REF_5 -> LENGTH players
TMP_28(bool) = REF_5 < MaxPlayers
CONDITION TMP_28"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_29(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
fee = SafeMath.div(address(this).balance,100)

IRs:
TMP_30 = CONVERT this to address
TMP_31(uint256) = SOLIDITY_CALL balance(address)(TMP_30)
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_31', '100'] 
fee(uint256) := TMP_32(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lastWinner = players[random() % players.length]

IRs:
TMP_33(uint256) = INTERNAL_CALL, Lottery.random()()
REF_7 -> LENGTH players
TMP_34(uint256) = TMP_33 % REF_7
REF_8(address) -> players[TMP_34]
lastWinner(address) := REF_8(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
lastWinner.transfer(address(this).balance - fee)

IRs:
TMP_35 = CONVERT this to address
TMP_36(uint256) = SOLIDITY_CALL balance(address)(TMP_35)
TMP_37(uint256) = TMP_36 - fee
Transfer dest:lastWinner value:TMP_37"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
owner.transfer(fee)

IRs:
Transfer dest:owner value:fee"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete players

IRs:
players = delete players "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
jackpot = 0

IRs:
jackpot(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
completedGames ++

IRs:
TMP_40(uint256) := completedGames(uint256)
completedGames(uint256) = completedGames + 1"];
}
// Function: 964.sol-Lottery-UpdateNumPlayers(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
owner != msg.sender || num < 3 || num >= 1000

IRs:
TMP_12(bool) = owner != msg.sender
TMP_13(bool) = num < 3
TMP_14(bool) = TMP_12 || TMP_13
TMP_15(bool) = num >= 1000
TMP_16(bool) = TMP_14 || TMP_15
CONDITION TMP_16"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_17(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
MaxPlayers = num

IRs:
MaxPlayers(uint256) := num(uint256)"];
}
// Function: 964.sol-Lottery-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MaxPlayers = 10

IRs:
MaxPlayers(uint256) := 10(uint256)"];
}
// Function: 964.sol-Lottery-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value < 10000000000000000

IRs:
TMP_18(bool) = msg.value < 10000000000000000
CONDITION TMP_18"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_19(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
players.push(msg.sender)

IRs:
REF_1 -> LENGTH players
TMP_21(uint256) := REF_1(uint256)
TMP_22(uint256) = TMP_21 + 1
REF_1(uint256) (->players) := TMP_22(uint256)
REF_2(address) -> players[TMP_21]
REF_2(address) (->players) := msg.sender(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
jackpot += msg.value

IRs:
jackpot(uint256) = jackpot + msg.value"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
players.length >= MaxPlayers

IRs:
REF_3 -> LENGTH players
TMP_23(bool) = REF_3 >= MaxPlayers
CONDITION TMP_23"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
RandomWinner()

IRs:
INTERNAL_CALL, Lottery.RandomWinner()()"];
7->8;
8[label="Node Type: END_IF 8
"];
}
// Function: 964.sol-Lottery-getPlayers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
players

IRs:
RETURN players"];
}
// Function: 964.sol-Lottery-random()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(keccak256()(abi.encodePacked(block.difficulty,now,msg.sender,players)))

IRs:
TMP_25(bytes) = SOLIDITY_CALL abi.encodePacked()(block.difficulty,now,msg.sender,players)
TMP_26(bytes32) = SOLIDITY_CALL keccak256()(TMP_25)
TMP_27 = CONVERT TMP_26 to uint256
RETURN TMP_27"];
}
// Function: 964.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = _a + _b

IRs:
TMP_9(uint256) = _a + _b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= _a)

IRs:
TMP_10(bool) = c >= _a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 964.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_a / _b

IRs:
TMP_5(uint256) = _a / _b
RETURN TMP_5"];
}
// Function: 964.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_0(bool) = _a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = _a * _b

IRs:
TMP_1(uint256) = _a * _b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / _a == _b)

IRs:
TMP_2(uint256) = c / _a
TMP_3(bool) = TMP_2 == _b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 964.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_b <= _a)

IRs:
TMP_6(bool) = _b <= _a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_a - _b

IRs:
TMP_8(uint256) = _a - _b
RETURN TMP_8"];
}
}
