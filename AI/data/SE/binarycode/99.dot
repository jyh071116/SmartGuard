digraph G {
// Function: 99.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 99.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 99.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 99.sol-ERC20-decimals()
digraph{
}
// Function: 99.sol-ERC20-name()
digraph{
}
// Function: 99.sol-ERC20-symbol()
digraph{
}
// Function: 99.sol-ERC20-totalSupply()
digraph{
}
// Function: 99.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 99.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 99.sol-ERC20Sale-bid(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bidId = bidInfos.push(BidInfo({bidder:msg.sender,token:token,amount:amount,price:msg.value})).sub(1)
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Bid(bidId)
"];
}
// Function: 99.sol-ERC20Sale-buy(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
offerInfo = offerInfos[offerId]

IRs:
REF_62(ERC20Sale.OfferInfo) -> offerInfos[offerId]
offerInfo(ERC20Sale.OfferInfo) := REF_62(ERC20Sale.OfferInfo)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
erc20 = ERC20(offerInfo.token)

IRs:
REF_63(address) -> offerInfo.token
TMP_82 = CONVERT REF_63 to ERC20
erc20(ERC20) := TMP_82(ERC20)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(erc20.balanceOf(offerInfo.offeror) >= amount)

IRs:
REF_65(address) -> offerInfo.offeror
TMP_83(uint256) = HIGH_LEVEL_CALL, dest:erc20(ERC20), function:balanceOf, arguments:['REF_65']  
TMP_84(bool) = TMP_83 >= amount
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(erc20.allowance(offerInfo.offeror,this) >= amount)

IRs:
REF_67(address) -> offerInfo.offeror
TMP_86(uint256) = HIGH_LEVEL_CALL, dest:erc20(ERC20), function:allowance, arguments:['REF_67', 'this']  
TMP_87(bool) = TMP_86 >= amount
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(offerInfo.amount >= amount)

IRs:
REF_68(uint256) -> offerInfo.amount
TMP_89(bool) = REF_68 >= amount
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(offerInfo.price.mul(amount) == msg.value.mul(offerInfo.amount))

IRs:
REF_69(uint256) -> offerInfo.price
TMP_91(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_69', 'amount'] 
REF_72(uint256) -> offerInfo.amount
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['msg.value', 'REF_72'] 
TMP_93(bool) = TMP_91 == TMP_92
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
erc20.transferFrom(offerInfo.offeror,msg.sender,amount)

IRs:
REF_74(address) -> offerInfo.offeror
TMP_95(bool) = HIGH_LEVEL_CALL, dest:erc20(ERC20), function:transferFrom, arguments:['REF_74', 'msg.sender', 'amount']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
offerInfo.price = offerInfo.price.sub(msg.value)

IRs:
REF_75(uint256) -> offerInfo.price
REF_76(uint256) -> offerInfo.price
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_76', 'msg.value'] 
REF_75(uint256) (->offerInfo) := TMP_96(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offerInfo.amount = offerInfo.amount.sub(amount)

IRs:
REF_78(uint256) -> offerInfo.amount
REF_79(uint256) -> offerInfo.amount
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_79', 'amount'] 
REF_78(uint256) (->offerInfo) := TMP_97(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
offerInfo.amount == 0

IRs:
REF_81(uint256) -> offerInfo.amount
TMP_98(bool) = REF_81 == 0
CONDITION TMP_98"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
removeOffer(offerId)

IRs:
INTERNAL_CALL, ERC20Sale.removeOffer(uint256)(offerId)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
offerInfo.offeror.transfer(msg.value)

IRs:
REF_82(address) -> offerInfo.offeror
Transfer dest:REF_82 value:msg.value"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Buy(offerId,amount)

IRs:
Emit Buy(offerId,amount)"];
}
// Function: 99.sol-ERC20Sale-cancelBid(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bidInfo = bidInfos[bidId]

IRs:
REF_12(ERC20Sale.BidInfo) -> bidInfos[bidId]
bidInfo(ERC20Sale.BidInfo) := REF_12(ERC20Sale.BidInfo)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(bidInfo.bidder == msg.sender)

IRs:
REF_13(address) -> bidInfo.bidder
TMP_24(bool) = REF_13 == msg.sender
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
removeBid(bidId)

IRs:
INTERNAL_CALL, ERC20Sale.removeBid(uint256)(bidId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bidInfo.bidder.transfer(bidInfo.price)

IRs:
REF_14(address) -> bidInfo.bidder
REF_16(uint256) -> bidInfo.price
Transfer dest:REF_14 value:REF_16"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
CancelBid(bidId)

IRs:
Emit CancelBid(bidId)"];
}
// Function: 99.sol-ERC20Sale-cancelOffer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(offerInfos[offerId].offeror == msg.sender)

IRs:
REF_60(ERC20Sale.OfferInfo) -> offerInfos[offerId]
REF_61(address) -> REF_60.offeror
TMP_78(bool) = REF_61 == msg.sender
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
removeOffer(offerId)

IRs:
INTERNAL_CALL, ERC20Sale.removeOffer(uint256)(offerId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
CancelOffer(offerId)

IRs:
Emit CancelOffer(offerId)"];
}
// Function: 99.sol-ERC20Sale-getBidCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
bidInfos.length

IRs:
REF_0 -> LENGTH bidInfos
RETURN REF_0"];
}
// Function: 99.sol-ERC20Sale-getBidCountByToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bidCount = 0

IRs:
bidCount(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < bidInfos.length

IRs:
REF_40 -> LENGTH bidInfos
TMP_51(bool) = i < REF_40
CONDITION TMP_51"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
bidInfos[i].token == token

IRs:
REF_41(ERC20Sale.BidInfo) -> bidInfos[i]
REF_42(address) -> REF_41.token
TMP_52(bool) = REF_42 == token
CONDITION TMP_52"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
bidCount += 1

IRs:
bidCount(uint256) = bidCount + 1"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i += 1

IRs:
i(uint256) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
bidCount

IRs:
RETURN bidCount"];
}
// Function: 99.sol-ERC20Sale-getBidIdsByToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bidIds = new uint256[](getBidCountByToken(token))

IRs:
TMP_54(uint256) = INTERNAL_CALL, ERC20Sale.getBidCountByToken(address)(token)
TMP_55(uint256[])  = new uint256[](TMP_54)
bidIds(uint256[]) = ['TMP_55(uint256[])']"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < bidInfos.length

IRs:
REF_43 -> LENGTH bidInfos
TMP_56(bool) = i < REF_43
CONDITION TMP_56"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
bidInfos[i].token == token

IRs:
REF_44(ERC20Sale.BidInfo) -> bidInfos[i]
REF_45(address) -> REF_44.token
TMP_57(bool) = REF_45 == token
CONDITION TMP_57"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
bidIds[bidIds.length - 1] = i

IRs:
REF_46 -> LENGTH bidIds
TMP_58(uint256) = REF_46 - 1
REF_47(uint256) -> bidIds[TMP_58]
REF_47(uint256) (->bidIds) := i(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i += 1

IRs:
i(uint256) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
bidIds

IRs:
RETURN bidIds"];
}
// Function: 99.sol-ERC20Sale-getOfferCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
offerInfos.length

IRs:
REF_1 -> LENGTH offerInfos
RETURN REF_1"];
}
// Function: 99.sol-ERC20Sale-getOfferCountByToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
offerCount = 0

IRs:
offerCount(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < offerInfos.length

IRs:
REF_84 -> LENGTH offerInfos
TMP_102(bool) = i < REF_84
CONDITION TMP_102"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
offerInfos[i].token == token

IRs:
REF_85(ERC20Sale.OfferInfo) -> offerInfos[i]
REF_86(address) -> REF_85.token
TMP_103(bool) = REF_86 == token
CONDITION TMP_103"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
offerCount += 1

IRs:
offerCount(uint256) = offerCount + 1"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i += 1

IRs:
i(uint256) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
offerCount

IRs:
RETURN offerCount"];
}
// Function: 99.sol-ERC20Sale-getOfferIdsByToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
offerIds = new uint256[](getOfferCountByToken(token))

IRs:
TMP_105(uint256) = INTERNAL_CALL, ERC20Sale.getOfferCountByToken(address)(token)
TMP_106(uint256[])  = new uint256[](TMP_105)
offerIds(uint256[]) = ['TMP_106(uint256[])']"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < offerInfos.length

IRs:
REF_87 -> LENGTH offerInfos
TMP_107(bool) = i < REF_87
CONDITION TMP_107"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
offerInfos[i].token == token

IRs:
REF_88(ERC20Sale.OfferInfo) -> offerInfos[i]
REF_89(address) -> REF_88.token
TMP_108(bool) = REF_89 == token
CONDITION TMP_108"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
offerIds[offerIds.length - 1] = i

IRs:
REF_90 -> LENGTH offerIds
TMP_109(uint256) = REF_90 - 1
REF_91(uint256) -> offerIds[TMP_109]
REF_91(uint256) (->offerIds) := i(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i += 1

IRs:
i(uint256) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
offerIds

IRs:
RETURN offerIds"];
}
// Function: 99.sol-ERC20Sale-offer(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
erc20 = ERC20(token)

IRs:
TMP_59 = CONVERT token to ERC20
erc20(ERC20) := TMP_59(ERC20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(erc20.balanceOf(msg.sender) >= amount)

IRs:
TMP_60(uint256) = HIGH_LEVEL_CALL, dest:erc20(ERC20), function:balanceOf, arguments:['msg.sender']  
TMP_61(bool) = TMP_60 >= amount
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(erc20.allowance(msg.sender,this) >= amount)

IRs:
TMP_63(uint256) = HIGH_LEVEL_CALL, dest:erc20(ERC20), function:allowance, arguments:['msg.sender', 'this']  
TMP_64(bool) = TMP_63 >= amount
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
offerId = offerInfos.push(OfferInfo({offeror:msg.sender,token:token,amount:amount,price:price})).sub(1)
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Offer(offerId)
"];
}
// Function: 99.sol-ERC20Sale-removeBid(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->8;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = bidId

IRs:
i(uint256) := bidId(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < bidInfos.length - 1

IRs:
REF_6 -> LENGTH bidInfos
TMP_17(uint256) = REF_6 - 1
TMP_18(bool) = i < TMP_17
CONDITION TMP_18"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
bidInfos[i] = bidInfos[i + 1]

IRs:
REF_7(ERC20Sale.BidInfo) -> bidInfos[i]
TMP_19(uint256) = i + 1
REF_8(ERC20Sale.BidInfo) -> bidInfos[TMP_19]
REF_7(ERC20Sale.BidInfo) (->bidInfos) := REF_8(ERC20Sale.BidInfo)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ChangeBidId(i + 1,i)

IRs:
TMP_20(uint256) = i + 1
Emit ChangeBidId(TMP_20,i)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i += 1

IRs:
i(uint256) = i + 1"];
7->4;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete bidInfos[bidInfos.length - 1]

IRs:
REF_9 -> LENGTH bidInfos
TMP_22(uint256) = REF_9 - 1
REF_10(ERC20Sale.BidInfo) -> bidInfos[TMP_22]
bidInfos = delete REF_10 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
bidInfos.length -= 1

IRs:
REF_11 -> LENGTH bidInfos
REF_11(-> bidInfos) = REF_11 - 1"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
RemoveBid(bidId)

IRs:
Emit RemoveBid(bidId)"];
}
// Function: 99.sol-ERC20Sale-removeOffer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->8;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = offerId

IRs:
i(uint256) := offerId(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < offerInfos.length - 1

IRs:
REF_54 -> LENGTH offerInfos
TMP_71(uint256) = REF_54 - 1
TMP_72(bool) = i < TMP_71
CONDITION TMP_72"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
offerInfos[i] = offerInfos[i + 1]

IRs:
REF_55(ERC20Sale.OfferInfo) -> offerInfos[i]
TMP_73(uint256) = i + 1
REF_56(ERC20Sale.OfferInfo) -> offerInfos[TMP_73]
REF_55(ERC20Sale.OfferInfo) (->offerInfos) := REF_56(ERC20Sale.OfferInfo)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ChangeOfferId(i + 1,i)

IRs:
TMP_74(uint256) = i + 1
Emit ChangeOfferId(TMP_74,i)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i += 1

IRs:
i(uint256) = i + 1"];
7->4;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete offerInfos[offerInfos.length - 1]

IRs:
REF_57 -> LENGTH offerInfos
TMP_76(uint256) = REF_57 - 1
REF_58(ERC20Sale.OfferInfo) -> offerInfos[TMP_76]
offerInfos = delete REF_58 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offerInfos.length -= 1

IRs:
REF_59 -> LENGTH offerInfos
REF_59(-> offerInfos) = REF_59 - 1"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
RemoveOffer(offerId)

IRs:
Emit RemoveOffer(offerId)"];
}
// Function: 99.sol-ERC20Sale-sell(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bidInfo = bidInfos[bidId]

IRs:
REF_17(ERC20Sale.BidInfo) -> bidInfos[bidId]
bidInfo(ERC20Sale.BidInfo) := REF_17(ERC20Sale.BidInfo)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
erc20 = ERC20(bidInfo.token)

IRs:
REF_18(address) -> bidInfo.token
TMP_29 = CONVERT REF_18 to ERC20
erc20(ERC20) := TMP_29(ERC20)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(erc20.balanceOf(msg.sender) >= amount)

IRs:
TMP_30(uint256) = HIGH_LEVEL_CALL, dest:erc20(ERC20), function:balanceOf, arguments:['msg.sender']  
TMP_31(bool) = TMP_30 >= amount
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(erc20.allowance(msg.sender,this) >= amount)

IRs:
TMP_33(uint256) = HIGH_LEVEL_CALL, dest:erc20(ERC20), function:allowance, arguments:['msg.sender', 'this']  
TMP_34(bool) = TMP_33 >= amount
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(bidInfo.amount >= amount)

IRs:
REF_21(uint256) -> bidInfo.amount
TMP_36(bool) = REF_21 >= amount
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
realPrice = amount.mul(bidInfo.price).div(bidInfo.amount)

IRs:
REF_23(uint256) -> bidInfo.price
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amount', 'REF_23'] 
REF_25(uint256) -> bidInfo.amount
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_38', 'REF_25'] 
realPrice(uint256) := TMP_39(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(realPrice.mul(bidInfo.amount) == amount.mul(bidInfo.price))

IRs:
REF_27(uint256) -> bidInfo.amount
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['realPrice', 'REF_27'] 
REF_29(uint256) -> bidInfo.price
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amount', 'REF_29'] 
TMP_42(bool) = TMP_40 == TMP_41
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
erc20.transferFrom(msg.sender,bidInfo.bidder,amount)

IRs:
REF_31(address) -> bidInfo.bidder
TMP_44(bool) = HIGH_LEVEL_CALL, dest:erc20(ERC20), function:transferFrom, arguments:['msg.sender', 'REF_31', 'amount']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
bidInfo.price = bidInfo.price.sub(realPrice)

IRs:
REF_32(uint256) -> bidInfo.price
REF_33(uint256) -> bidInfo.price
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_33', 'realPrice'] 
REF_32(uint256) (->bidInfo) := TMP_45(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
bidInfo.amount = bidInfo.amount.sub(amount)

IRs:
REF_35(uint256) -> bidInfo.amount
REF_36(uint256) -> bidInfo.amount
TMP_46(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_36', 'amount'] 
REF_35(uint256) (->bidInfo) := TMP_46(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
bidInfo.amount == 0

IRs:
REF_38(uint256) -> bidInfo.amount
TMP_47(bool) = REF_38 == 0
CONDITION TMP_47"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
removeBid(bidId)

IRs:
INTERNAL_CALL, ERC20Sale.removeBid(uint256)(bidId)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
msg.sender.transfer(realPrice)

IRs:
Transfer dest:msg.sender value:realPrice"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Sell(bidId,amount)

IRs:
Emit Sell(bidId,amount)"];
}
// Function: 99.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_0(uint256) = a + b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_1(bool) = c >= a
TMP_2(None) = SOLIDITY_CALL assert(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 99.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_11(uint256) = a / b
RETURN TMP_11"];
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 99.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_6(bool) = a == 0
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_7(uint256) = a * b
c(uint256) := TMP_7(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_8(uint256) = c / a
TMP_9(bool) = TMP_8 == b
TMP_10(None) = SOLIDITY_CALL assert(bool)(TMP_9)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 99.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_3(bool) = b <= a
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_5(uint256) = a - b
RETURN TMP_5"];
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
}
