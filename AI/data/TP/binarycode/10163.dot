digraph G {
// Function: 10163.sol-BurnableERC20-allowance(address,address)
digraph{
}
// Function: 10163.sol-BurnableERC20-approve(address,uint256)
digraph{
}
// Function: 10163.sol-BurnableERC20-balanceOf(address)
digraph{
}
// Function: 10163.sol-BurnableERC20-burn(uint256)
digraph{
}
// Function: 10163.sol-BurnableERC20-totalSupply()
digraph{
}
// Function: 10163.sol-BurnableERC20-transfer(address,uint256)
digraph{
}
// Function: 10163.sol-BurnableERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 10163.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 10163.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 10163.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 10163.sol-ERC20-totalSupply()
digraph{
}
// Function: 10163.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 10163.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 10163.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 10163.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 10163.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 10163.sol-NokuFlatPlan-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10163.sol-NokuFlatPlan-constructor(uint256,uint256,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_paymentInterval != 0,_paymentInterval is zero)

IRs:
TMP_87(bool) = _paymentInterval != 0
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,_paymentInterval is zero)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_flatFee != 0,_flatFee is zero)

IRs:
TMP_89(bool) = _flatFee != 0
TMP_90(None) = SOLIDITY_CALL require(bool,string)(TMP_89,_flatFee is zero)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_nokuMasterToken != 0,_nokuMasterToken is zero)

IRs:
TMP_91(bool) = _nokuMasterToken != 0
TMP_92(None) = SOLIDITY_CALL require(bool,string)(TMP_91,_nokuMasterToken is zero)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_tokenBurner != 0,_tokenBurner is zero)

IRs:
TMP_93(bool) = _tokenBurner != 0
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,_tokenBurner is zero)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
paymentInterval = _paymentInterval

IRs:
paymentInterval(uint256) := _paymentInterval(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
flatFee = _flatFee

IRs:
flatFee(uint256) := _flatFee(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
nokuMasterToken = _nokuMasterToken

IRs:
nokuMasterToken(address) := _nokuMasterToken(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
tokenBurner = _tokenBurner

IRs:
tokenBurner(address) := _tokenBurner(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
nextPaymentTime = block.timestamp

IRs:
nextPaymentTime(uint256) := block.timestamp(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
LogNokuFlatPlanCreated(msg.sender,_paymentInterval,_flatFee,_nokuMasterToken,_tokenBurner)

IRs:
Emit LogNokuFlatPlanCreated(msg.sender,_paymentInterval,_flatFee,_nokuMasterToken,_tokenBurner)"];
}
// Function: 10163.sol-NokuFlatPlan-isValidService(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_serviceName != 0

IRs:
TMP_108(bool) = _serviceName != 0
RETURN TMP_108"];
2[label="Node Type: RETURN 2

EXPRESSION:
isValid

IRs:
RETURN isValid"];
}
// Function: 10163.sol-NokuFlatPlan-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_129(bool) = msg.sender == owner
TMP_130(None) = SOLIDITY_CALL require(bool)(TMP_129)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10163.sol-NokuFlatPlan-payFee(bytes32,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isValidService(_serviceName),_serviceName in invalid)

IRs:
TMP_109(bool) = INTERNAL_CALL, NokuFlatPlan.isValidService(bytes32)(_serviceName)
TMP_110(None) = SOLIDITY_CALL require(bool,string)(TMP_109,_serviceName in invalid)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_multiplier != 0,_multiplier is zero)

IRs:
TMP_111(bool) = _multiplier != 0
TMP_112(None) = SOLIDITY_CALL require(bool,string)(TMP_111,_multiplier is zero)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_client != 0,_client is zero)

IRs:
TMP_113(bool) = _client != 0
TMP_114(None) = SOLIDITY_CALL require(bool,string)(TMP_113,_client is zero)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(block.timestamp < nextPaymentTime)

IRs:
TMP_115(bool) = block.timestamp < nextPaymentTime
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
paid

IRs:
RETURN paid"];
}
// Function: 10163.sol-NokuFlatPlan-paySubscription(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_client != 0,_client is zero)

IRs:
TMP_121(bool) = _client != 0
TMP_122(None) = SOLIDITY_CALL require(bool,string)(TMP_121,_client is zero)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
nextPaymentTime = nextPaymentTime.add(paymentInterval)

IRs:
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['nextPaymentTime', 'paymentInterval'] 
nextPaymentTime(uint256) := TMP_123(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(ERC20(nokuMasterToken).transferFrom(_client,tokenBurner,flatFee))

IRs:
TMP_124 = CONVERT nokuMasterToken to ERC20
TMP_125(bool) = HIGH_LEVEL_CALL, dest:TMP_124(ERC20), function:transferFrom, arguments:['_client', 'tokenBurner', 'flatFee']  
TMP_126(None) = SOLIDITY_CALL assert(bool)(TMP_125)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
NokuTokenBurner(tokenBurner).tokenReceived(nokuMasterToken,flatFee)

IRs:
TMP_127 = CONVERT tokenBurner to NokuTokenBurner
HIGH_LEVEL_CALL, dest:TMP_127(NokuTokenBurner), function:tokenReceived, arguments:['nokuMasterToken', 'flatFee']  "];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
paid

IRs:
RETURN paid"];
}
// Function: 10163.sol-NokuFlatPlan-setFlatFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_flatFee != 0,_flatFee is zero)

IRs:
TMP_102(bool) = _flatFee != 0
TMP_103(None) = SOLIDITY_CALL require(bool,string)(TMP_102,_flatFee is zero)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_flatFee != flatFee,_flatFee equal to current one)

IRs:
TMP_104(bool) = _flatFee != flatFee
TMP_105(None) = SOLIDITY_CALL require(bool,string)(TMP_104,_flatFee equal to current one)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
flatFee = _flatFee

IRs:
flatFee(uint256) := _flatFee(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogFlatFeeChanged(msg.sender,_flatFee)

IRs:
Emit LogFlatFeeChanged(msg.sender,_flatFee)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 10163.sol-NokuFlatPlan-setPaymentInterval(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_paymentInterval != 0,_paymentInterval is zero)

IRs:
TMP_96(bool) = _paymentInterval != 0
TMP_97(None) = SOLIDITY_CALL require(bool,string)(TMP_96,_paymentInterval is zero)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_paymentInterval != paymentInterval,_paymentInterval equal to current one)

IRs:
TMP_98(bool) = _paymentInterval != paymentInterval
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,_paymentInterval equal to current one)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
paymentInterval = _paymentInterval

IRs:
paymentInterval(uint256) := _paymentInterval(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogPaymentIntervalChanged(msg.sender,_paymentInterval)

IRs:
Emit LogPaymentIntervalChanged(msg.sender,_paymentInterval)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 10163.sol-NokuFlatPlan-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_82 = CONVERT 0 to address
TMP_83(bool) = newOwner != TMP_82
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10163.sol-NokuFlatPlan-usageFee(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isValidService(_serviceName),_serviceName in invalid)

IRs:
TMP_117(bool) = INTERNAL_CALL, NokuFlatPlan.isValidService(bytes32)(_serviceName)
TMP_118(None) = SOLIDITY_CALL require(bool,string)(TMP_117,_serviceName in invalid)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_multiplier != 0,_multiplier is zero)

IRs:
TMP_119(bool) = _multiplier != 0
TMP_120(None) = SOLIDITY_CALL require(bool,string)(TMP_119,_multiplier is zero)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: RETURN 4

EXPRESSION:
fee

IRs:
RETURN fee"];
}
// Function: 10163.sol-NokuPricingPlan-payFee(bytes32,uint256,address)
digraph{
}
// Function: 10163.sol-NokuPricingPlan-usageFee(bytes32,uint256)
digraph{
}
// Function: 10163.sol-NokuTokenBurner-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10163.sol-NokuTokenBurner-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_wallet != address(0),_wallet is zero)

IRs:
TMP_46 = CONVERT 0 to address
TMP_47(bool) = _wallet != TMP_46
TMP_48(None) = SOLIDITY_CALL require(bool,string)(TMP_47,_wallet is zero)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
burningPercentage = 100

IRs:
burningPercentage(uint256) := 100(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogNokuTokenBurnerCreated(msg.sender,_wallet)

IRs:
Emit LogNokuTokenBurnerCreated(msg.sender,_wallet)"];
}
// Function: 10163.sol-NokuTokenBurner-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_80(bool) = msg.sender == owner
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10163.sol-NokuTokenBurner-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 10163.sol-NokuTokenBurner-setBurningPercentage(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(0 <= _burningPercentage && _burningPercentage <= 100,_burningPercentage not in [0, 100])

IRs:
TMP_50(bool) = 0 <= _burningPercentage
TMP_51(bool) = _burningPercentage <= 100
TMP_52(bool) = TMP_50 && TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool,string)(TMP_52,_burningPercentage not in [0, 100])"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_burningPercentage != burningPercentage,_burningPercentage equal to current one)

IRs:
TMP_54(bool) = _burningPercentage != burningPercentage
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,_burningPercentage equal to current one)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
burningPercentage = _burningPercentage

IRs:
burningPercentage(uint256) := _burningPercentage(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogBurningPercentageChanged(msg.sender,_burningPercentage)

IRs:
Emit LogBurningPercentageChanged(msg.sender,_burningPercentage)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 10163.sol-NokuTokenBurner-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 10163.sol-NokuTokenBurner-tokenReceived(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_token != address(0),_token is zero)

IRs:
TMP_58 = CONVERT 0 to address
TMP_59(bool) = _token != TMP_58
TMP_60(None) = SOLIDITY_CALL require(bool,string)(TMP_59,_token is zero)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_amount > 0,_amount is zero)

IRs:
TMP_61(bool) = _amount > 0
TMP_62(None) = SOLIDITY_CALL require(bool,string)(TMP_61,_amount is zero)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountToBurn = _amount.mul(burningPercentage).div(100)

IRs:
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount', 'burningPercentage'] 
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_63', '100'] 
amountToBurn(uint256) := TMP_64(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
amountToBurn > 0

IRs:
TMP_65(bool) = amountToBurn > 0
CONDITION TMP_65"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(BurnableERC20(_token).burn(amountToBurn))

IRs:
TMP_66 = CONVERT _token to BurnableERC20
TMP_67(bool) = HIGH_LEVEL_CALL, dest:TMP_66(BurnableERC20), function:burn, arguments:['amountToBurn']  
TMP_68(None) = SOLIDITY_CALL assert(bool)(TMP_67)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
burnedTokens = burnedTokens.add(amountToBurn)

IRs:
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['burnedTokens', 'amountToBurn'] 
burnedTokens(uint256) := TMP_69(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
amountToTransfer = _amount.sub(amountToBurn)

IRs:
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_amount', 'amountToBurn'] 
amountToTransfer(uint256) := TMP_70(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
amountToTransfer > 0

IRs:
TMP_71(bool) = amountToTransfer > 0
CONDITION TMP_71"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
assert(bool)(BurnableERC20(_token).transfer(wallet,amountToTransfer))

IRs:
TMP_72 = CONVERT _token to BurnableERC20
TMP_73(bool) = HIGH_LEVEL_CALL, dest:TMP_72(BurnableERC20), function:transfer, arguments:['wallet', 'amountToTransfer']  
TMP_74(None) = SOLIDITY_CALL assert(bool)(TMP_73)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
transferredTokens = transferredTokens.add(amountToTransfer)

IRs:
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['transferredTokens', 'amountToTransfer'] 
transferredTokens(uint256) := TMP_75(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
13->1;
}
// Function: 10163.sol-NokuTokenBurner-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_41 = CONVERT 0 to address
TMP_42(bool) = newOwner != TMP_41
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10163.sol-NokuTokenBurner-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 10163.sol-NokuTokenBurner-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_77 = UnaryType.BANG paused 
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10163.sol-NokuTokenBurner-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_79(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10163.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10163.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10163.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10163.sol-Pausable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10163.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_18(bool) = msg.sender == owner
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10163.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 10163.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 10163.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_7 = CONVERT 0 to address
TMP_8(bool) = newOwner != TMP_7
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10163.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 10163.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_20 = UnaryType.BANG paused 
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10163.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_22(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10163.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_32(uint256) = a + b
c(uint256) := TMP_32(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_33(bool) = c >= a
TMP_34(None) = SOLIDITY_CALL assert(bool)(TMP_33)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10163.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_28(uint256) = a / b
RETURN TMP_28"];
}
// Function: 10163.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_23(bool) = a == 0
CONDITION TMP_23"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_24(uint256) = a * b
c(uint256) := TMP_24(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_25(uint256) = c / a
TMP_26(bool) = TMP_25 == b
TMP_27(None) = SOLIDITY_CALL assert(bool)(TMP_26)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10163.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_29(bool) = b <= a
TMP_30(None) = SOLIDITY_CALL assert(bool)(TMP_29)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_31(uint256) = a - b
RETURN TMP_31"];
}
}
