digraph G {
// Function: 10369.sol-MuskToken-MuskToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = 1000000000000000000000000000

IRs:
REF_30(uint256) -> balances[msg.sender]
REF_30(uint256) (->balances) := 1000000000000000000000000000(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = 1000000000000000000000000000

IRs:
totalSupply(uint256) := 1000000000000000000000000000(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = Musk Token

IRs:
name(string) := Musk Token(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = MUSK

IRs:
symbol(string) := MUSK(string)"];
}
// Function: 10369.sol-MuskToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 10369.sol-MuskToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 10369.sol-MuskToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
REF_32(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

IRs:
TMP_35(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_36 = CONVERT TMP_35 to bytes32
TMP_37 = CONVERT TMP_36 to bytes4
TMP_38(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_37', 'msg.sender', '_value', 'this', '_extraData']  
TMP_39 = UnaryType.BANG TMP_38 
CONDITION TMP_39"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 10369.sol-MuskToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 10369.sol-MuskToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: THROW 1
"];
}
// Function: 10369.sol-MuskToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = H1.0

IRs:
version(string) := H1.0(string)"];
}
// Function: 10369.sol-MuskToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 10369.sol-MuskToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 10369.sol-MuskToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 10369.sol-MuskTokenVault-MuskTokenVault(Token)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token = MuskToken(_token)

IRs:
TMP_52 = CONVERT _token to MuskToken
token(MuskToken) := TMP_52(MuskToken)"];
}
// Function: 10369.sol-MuskTokenVault-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10369.sol-MuskTokenVault-allocate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.balanceOf(address(this)) == totalAllocation)

IRs:
TMP_53 = CONVERT this to address
TMP_54(uint256) = HIGH_LEVEL_CALL, dest:token(MuskToken), function:balanceOf, arguments:['TMP_53']  
TMP_55(bool) = TMP_54 == totalAllocation
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allocations[teamReserveWallet] = teamReserveAllocation

IRs:
REF_35(uint256) -> allocations[teamReserveWallet]
REF_35(uint256) (->allocations) := teamReserveAllocation(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allocations[finalReserveWallet] = finalReserveAllocation

IRs:
REF_36(uint256) -> allocations[finalReserveWallet]
REF_36(uint256) (->allocations) := finalReserveAllocation(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Allocated(teamReserveWallet,teamReserveAllocation)

IRs:
Emit Allocated(teamReserveWallet,teamReserveAllocation)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Allocated(finalReserveWallet,finalReserveAllocation)

IRs:
Emit Allocated(finalReserveWallet,finalReserveAllocation)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
lock()

IRs:
INTERNAL_CALL, MuskTokenVault.lock()()"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
notLocked()

IRs:
MODIFIER_CALL, MuskTokenVault.notLocked()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
notAllocated()

IRs:
MODIFIER_CALL, MuskTokenVault.notAllocated()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->1;
}
// Function: 10369.sol-MuskTokenVault-canCollect()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0

IRs:
REF_64(uint256) -> timeLocks[msg.sender]
TMP_106(bool) = block.timestamp > REF_64
REF_65(uint256) -> claimed[msg.sender]
TMP_107(bool) = REF_65 == 0
TMP_108(bool) = TMP_106 && TMP_107
RETURN TMP_108"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyReserveWallets()

IRs:
MODIFIER_CALL, MuskTokenVault.onlyReserveWallets()()"];
2->1;
}
// Function: 10369.sol-MuskTokenVault-claimTeamReserve()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
vestingStage = teamVestingStage()

IRs:
TMP_88(uint256) = INTERNAL_CALL, MuskTokenVault.teamVestingStage()()
vestingStage(uint256) := TMP_88(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalUnlocked = vestingStage.mul(allocations[teamReserveWallet]).div(teamVestingStages)

IRs:
REF_53(uint256) -> allocations[teamReserveWallet]
TMP_89(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['vestingStage', 'REF_53'] 
TMP_90(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_89', 'teamVestingStages'] 
totalUnlocked(uint256) := TMP_90(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(totalUnlocked <= allocations[teamReserveWallet])

IRs:
REF_55(uint256) -> allocations[teamReserveWallet]
TMP_91(bool) = totalUnlocked <= REF_55
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(claimed[teamReserveWallet] < totalUnlocked)

IRs:
REF_56(uint256) -> claimed[teamReserveWallet]
TMP_93(bool) = REF_56 < totalUnlocked
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
payment = totalUnlocked.sub(claimed[teamReserveWallet])

IRs:
REF_58(uint256) -> claimed[teamReserveWallet]
TMP_95(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalUnlocked', 'REF_58'] 
payment(uint256) := TMP_95(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
claimed[teamReserveWallet] = totalUnlocked

IRs:
REF_59(uint256) -> claimed[teamReserveWallet]
REF_59(uint256) (->claimed) := totalUnlocked(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(token.transfer(teamReserveWallet,payment))

IRs:
TMP_96(bool) = HIGH_LEVEL_CALL, dest:token(MuskToken), function:transfer, arguments:['teamReserveWallet', 'payment']  
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Distributed(teamReserveWallet,payment)

IRs:
Emit Distributed(teamReserveWallet,payment)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyTeamReserve()

IRs:
MODIFIER_CALL, MuskTokenVault.onlyTeamReserve()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
locked()

IRs:
MODIFIER_CALL, MuskTokenVault.locked()()"];
10->1;
}
// Function: 10369.sol-MuskTokenVault-claimTokenReserve()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
reserveWallet = msg.sender

IRs:
reserveWallet(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(block.timestamp > timeLocks[reserveWallet])

IRs:
REF_47(uint256) -> timeLocks[reserveWallet]
TMP_79(bool) = block.timestamp > REF_47
TMP_80(None) = SOLIDITY_CALL require(bool)(TMP_79)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(claimed[reserveWallet] == 0)

IRs:
REF_48(uint256) -> claimed[reserveWallet]
TMP_81(bool) = REF_48 == 0
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
amount = allocations[reserveWallet]

IRs:
REF_49(uint256) -> allocations[reserveWallet]
amount(uint256) := REF_49(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
claimed[reserveWallet] = amount

IRs:
REF_50(uint256) -> claimed[reserveWallet]
REF_50(uint256) (->claimed) := amount(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(token.transfer(reserveWallet,amount))

IRs:
TMP_83(bool) = HIGH_LEVEL_CALL, dest:token(MuskToken), function:transfer, arguments:['reserveWallet', 'amount']  
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Distributed(reserveWallet,amount)

IRs:
Emit Distributed(reserveWallet,amount)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyTokenReserve()

IRs:
MODIFIER_CALL, MuskTokenVault.onlyTokenReserve()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
locked()

IRs:
MODIFIER_CALL, MuskTokenVault.locked()()"];
9->1;
}
// Function: 10369.sol-MuskTokenVault-getLockedBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
allocations[msg.sender].sub(claimed[msg.sender])

IRs:
REF_44(uint256) -> allocations[msg.sender]
REF_46(uint256) -> claimed[msg.sender]
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_44', 'REF_46'] 
RETURN TMP_77"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyReserveWallets()

IRs:
MODIFIER_CALL, MuskTokenVault.onlyReserveWallets()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
tokensLocked

IRs:
RETURN tokensLocked"];
}
// Function: 10369.sol-MuskTokenVault-getTotalBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
token.balanceOf(address(this))

IRs:
TMP_75 = CONVERT this to address
TMP_76(uint256) = HIGH_LEVEL_CALL, dest:token(MuskToken), function:balanceOf, arguments:['TMP_75']  
RETURN TMP_76"];
2[label="Node Type: RETURN 2

EXPRESSION:
tokensCurrentlyInVault

IRs:
RETURN tokensCurrentlyInVault"];
}
// Function: 10369.sol-MuskTokenVault-lock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lockedAt = block.timestamp

IRs:
lockedAt(uint256) := block.timestamp(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
timeLocks[teamReserveWallet] = lockedAt.add(teamTimeLock)

IRs:
REF_37(uint256) -> timeLocks[teamReserveWallet]
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lockedAt', 'teamTimeLock'] 
REF_37(uint256) (->timeLocks) := TMP_63(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
timeLocks[finalReserveWallet] = lockedAt.add(finalReserveTimeLock)

IRs:
REF_39(uint256) -> timeLocks[finalReserveWallet]
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lockedAt', 'finalReserveTimeLock'] 
REF_39(uint256) (->timeLocks) := TMP_64(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Locked(lockedAt)

IRs:
Emit Locked(lockedAt)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
notLocked()

IRs:
MODIFIER_CALL, MuskTokenVault.notLocked()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 10369.sol-MuskTokenVault-locked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(lockedAt > 0)

IRs:
TMP_138(bool) = lockedAt > 0
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10369.sol-MuskTokenVault-notAllocated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allocations[teamReserveWallet] == 0)

IRs:
REF_69(uint256) -> allocations[teamReserveWallet]
TMP_140(bool) = REF_69 == 0
TMP_141(None) = SOLIDITY_CALL require(bool)(TMP_140)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(allocations[finalReserveWallet] == 0)

IRs:
REF_70(uint256) -> allocations[finalReserveWallet]
TMP_142(bool) = REF_70 == 0
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 10369.sol-MuskTokenVault-notLocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(lockedAt == 0)

IRs:
TMP_136(bool) = lockedAt == 0
TMP_137(None) = SOLIDITY_CALL require(bool)(TMP_136)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10369.sol-MuskTokenVault-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_124(bool) = msg.sender == owner
TMP_125(None) = SOLIDITY_CALL require(bool)(TMP_124)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10369.sol-MuskTokenVault-onlyReserveWallets()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allocations[msg.sender] > 0)

IRs:
REF_66(uint256) -> allocations[msg.sender]
TMP_126(bool) = REF_66 > 0
TMP_127(None) = SOLIDITY_CALL require(bool)(TMP_126)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10369.sol-MuskTokenVault-onlyTeamReserve()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == teamReserveWallet)

IRs:
TMP_128(bool) = msg.sender == teamReserveWallet
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(allocations[msg.sender] > 0)

IRs:
REF_67(uint256) -> allocations[msg.sender]
TMP_130(bool) = REF_67 > 0
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 10369.sol-MuskTokenVault-onlyTokenReserve()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == finalReserveWallet)

IRs:
TMP_132(bool) = msg.sender == finalReserveWallet
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(allocations[msg.sender] > 0)

IRs:
REF_68(uint256) -> allocations[msg.sender]
TMP_134(bool) = REF_68 > 0
TMP_135(None) = SOLIDITY_CALL require(bool)(TMP_134)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 10369.sol-MuskTokenVault-recoverFailedLock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.transfer(owner,token.balanceOf(address(this))))

IRs:
TMP_68 = CONVERT this to address
TMP_69(uint256) = HIGH_LEVEL_CALL, dest:token(MuskToken), function:balanceOf, arguments:['TMP_68']  
TMP_70(bool) = HIGH_LEVEL_CALL, dest:token(MuskToken), function:transfer, arguments:['owner', 'TMP_69']  
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
notLocked()

IRs:
MODIFIER_CALL, MuskTokenVault.notLocked()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
notAllocated()

IRs:
MODIFIER_CALL, MuskTokenVault.notAllocated()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10369.sol-MuskTokenVault-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
teamReserveWallet = 0xBf7E6DC9317dF0e9Fde7847577154e6C5114370d

IRs:
teamReserveWallet(address) := 1093236694824076615837703687623812040258753935117(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
finalReserveWallet = 0xBf7E6DC9317dF0e9Fde7847577154e6C5114370d

IRs:
finalReserveWallet(address) := 1093236694824076615837703687623812040258753935117(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
teamReserveAllocation = 240 * (10 ** 6) * (10 ** 18)

IRs:
TMP_110(uint256) = 10 ** 6
TMP_111(uint256) = 240 * TMP_110
TMP_112(uint256) = 10 ** 18
TMP_113(uint256) = TMP_111 * TMP_112
teamReserveAllocation(uint256) := TMP_113(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
finalReserveAllocation = 10 * (10 ** 6) * (10 ** 18)

IRs:
TMP_114(uint256) = 10 ** 6
TMP_115(uint256) = 10 * TMP_114
TMP_116(uint256) = 10 ** 18
TMP_117(uint256) = TMP_115 * TMP_116
finalReserveAllocation(uint256) := TMP_117(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
totalAllocation = 250 * (10 ** 6) * (10 ** 18)

IRs:
TMP_118(uint256) = 10 ** 6
TMP_119(uint256) = 250 * TMP_118
TMP_120(uint256) = 10 ** 18
TMP_121(uint256) = TMP_119 * TMP_120
totalAllocation(uint256) := TMP_121(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
teamTimeLock = 2 * 31536000

IRs:
TMP_122(uint256) = 2 * 31536000
teamTimeLock(uint256) := TMP_122(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
teamVestingStages = 8

IRs:
teamVestingStages(uint256) := 8(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
finalReserveTimeLock = 2 * 31536000

IRs:
TMP_123(uint256) = 2 * 31536000
finalReserveTimeLock(uint256) := TMP_123(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
lockedAt = 0

IRs:
lockedAt(uint256) := 0(uint256)"];
}
// Function: 10369.sol-MuskTokenVault-teamVestingStage()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
vestingMonths = teamTimeLock.div(teamVestingStages)

IRs:
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['teamTimeLock', 'teamVestingStages'] 
vestingMonths(uint256) := TMP_101(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
stage = (block.timestamp.sub(lockedAt)).div(vestingMonths)

IRs:
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['block.timestamp', 'lockedAt'] 
TMP_103(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_102', 'vestingMonths'] 
stage(uint256) := TMP_103(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
stage > teamVestingStages

IRs:
TMP_104(bool) = stage > teamVestingStages
CONDITION TMP_104"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stage = teamVestingStages

IRs:
stage(uint256) := teamVestingStages(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
stage

IRs:
RETURN stage"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyTeamReserve()

IRs:
MODIFIER_CALL, MuskTokenVault.onlyTeamReserve()()"];
7->1;
}
// Function: 10369.sol-MuskTokenVault-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_47 = CONVERT 0 to address
TMP_48(bool) = newOwner != TMP_47
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10369.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10369.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_45(bool) = msg.sender == owner
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10369.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_40 = CONVERT 0 to address
TMP_41(bool) = newOwner != TMP_40
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10369.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10369.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10369.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10369.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 10369.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_13(mapping(address => uint256)) -> allowed[_owner]
REF_14(uint256) -> REF_13[_spender]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 10369.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_11(mapping(address => uint256)) -> allowed[msg.sender]
REF_12(uint256) -> REF_11[_spender]
REF_12(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 10369.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_10(uint256) -> balances[_owner]
RETURN REF_10"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 10369.sol-StandardToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 10369.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && _value > 0

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_12(bool) = REF_0 >= _value
TMP_13(bool) = _value > 0
TMP_14(bool) = TMP_12 && TMP_13
CONDITION TMP_14"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_1(-> balances) = REF_1 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_2(uint256) -> balances[_to]
REF_2(-> balances) = REF_2 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 10369.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0

IRs:
REF_3(uint256) -> balances[_from]
TMP_16(bool) = REF_3 >= _value
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
TMP_17(bool) = REF_5 >= _value
TMP_18(bool) = TMP_16 && TMP_17
TMP_19(bool) = _value > 0
TMP_20(bool) = TMP_18 && TMP_19
CONDITION TMP_20"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_6(uint256) -> balances[_to]
REF_6(-> balances) = REF_6 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_7(uint256) -> balances[_from]
REF_7(-> balances) = REF_7 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
REF_9(-> allowed) = REF_9 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 10369.sol-Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 10369.sol-Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 10369.sol-Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 10369.sol-Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 10369.sol-Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 10369.sol-Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
}
