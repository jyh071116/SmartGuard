digraph G {
// Function: 10431.sol-EthTeamContract-EthTeamContract(string,string,address,uint64,uint64,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _teamName

IRs:
name(string) := _teamName(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _teamSymbol

IRs:
symbol(string) := _teamSymbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 3

IRs:
decimals(uint8) := 3(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = 0

IRs:
totalSupply_(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
price = 1000000000000

IRs:
price(uint256) := 1000000000000(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
gameOpponent = _gameOpponent

IRs:
gameOpponent(address) := _gameOpponent(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
gameTime = _gameTime

IRs:
gameTime(uint64) := _gameTime(uint64)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
finishTime = _finishTime

IRs:
finishTime(uint64) := _finishTime(uint64)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
feeOwner = _feeOwner

IRs:
feeOwner(address) := _feeOwner(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10431.sol-EthTeamContract-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed_[_owner][_spender]

IRs:
REF_27(mapping(address => uint256)) -> allowed_[_owner]
REF_28(uint256) -> REF_27[_spender]
RETURN REF_28"];
}
// Function: 10431.sol-EthTeamContract-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed_[msg.sender][_spender] = _value

IRs:
REF_50(mapping(address => uint256)) -> allowed_[msg.sender]
REF_51(uint256) -> REF_50[_spender]
REF_51(uint256) (->allowed_) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10431.sol-EthTeamContract-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances_[_owner]

IRs:
REF_26(uint256) -> balances_[_owner]
RETURN REF_26"];
}
// Function: 10431.sol-EthTeamContract-beginGame(address,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_gameOpponent != address(0) && _gameOpponent != address(this) && gameOpponent == address(0))

IRs:
TMP_107 = CONVERT 0 to address
TMP_108(bool) = _gameOpponent != TMP_107
TMP_109 = CONVERT this to address
TMP_110(bool) = _gameOpponent != TMP_109
TMP_111(bool) = TMP_108 && TMP_110
TMP_112 = CONVERT 0 to address
TMP_113(bool) = gameOpponent == TMP_112
TMP_114(bool) = TMP_111 && TMP_113
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_gameTime == 0 || (_gameTime > 1514764800))

IRs:
TMP_116(bool) = _gameTime == 0
TMP_117(bool) = _gameTime > 1514764800
TMP_118(bool) = TMP_116 || TMP_117
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
gameOpponent = _gameOpponent

IRs:
gameOpponent(address) := _gameOpponent(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameTime = _gameTime

IRs:
gameTime(uint64) := _gameTime(uint64)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
status = 0

IRs:
status(uint8) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
BeginGame(address(this),_gameOpponent,_gameTime)

IRs:
TMP_120 = CONVERT this to address
Emit BeginGame(TMP_120,_gameOpponent,_gameTime)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 10431.sol-EthTeamContract-changeStatus(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(status != _status)

IRs:
TMP_96(bool) = status != _status
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
status = _status

IRs:
status(uint8) := _status(uint8)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ChangeStatus(address(this),_status)

IRs:
TMP_98 = CONVERT this to address
Emit ChangeStatus(TMP_98,_status)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10431.sol-EthTeamContract-endGame(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->46;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameOpponent != address(0) && gameOpponent == _gameOpponent)

IRs:
TMP_123 = CONVERT 0 to address
TMP_124(bool) = gameOpponent != TMP_123
TMP_125(bool) = gameOpponent == _gameOpponent
TMP_126(bool) = TMP_124 && TMP_125
TMP_127(None) = SOLIDITY_CALL require(bool)(TMP_126)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = address(this).balance

IRs:
TMP_128 = CONVERT this to address
TMP_129(uint256) = SOLIDITY_CALL balance(address)(TMP_128)
amount(uint256) := TMP_129(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
opAmount = gameOpponent.balance

IRs:
TMP_130(uint256) = SOLIDITY_CALL balance(address)(gameOpponent)
opAmount(uint256) := TMP_130(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_gameResult == 1 || (_gameResult == 2 && amount >= opAmount) || _gameResult == 3)

IRs:
TMP_131(bool) = _gameResult == 1
TMP_132(bool) = _gameResult == 2
TMP_133(bool) = amount >= opAmount
TMP_134(bool) = TMP_132 && TMP_133
TMP_135(bool) = TMP_131 || TMP_134
TMP_136(bool) = _gameResult == 3
TMP_137(bool) = TMP_135 || TMP_136
TMP_138(None) = SOLIDITY_CALL require(bool)(TMP_137)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
op = EthTeamContract(gameOpponent)

IRs:
TMP_139 = CONVERT gameOpponent to EthTeamContract
op(EthTeamContract) := TMP_139(EthTeamContract)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_gameResult == 1

IRs:
TMP_140(bool) = _gameResult == 1
CONDITION TMP_140"];
6->7[label="True"];
6->19[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
amount > 0 && totalSupply_ > 0

IRs:
TMP_141(bool) = amount > 0
TMP_142(bool) = totalSupply_ > 0
TMP_143(bool) = TMP_141 && TMP_142
CONDITION TMP_143"];
7->8[label="True"];
7->17[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
lostAmount = amount

IRs:
lostAmount(uint256) := amount(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
op.totalSupply() > 0

IRs:
TMP_144(uint256) = HIGH_LEVEL_CALL, dest:op(EthTeamContract), function:totalSupply, arguments:[]  
TMP_145(bool) = TMP_144 > 0
CONDITION TMP_145"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
feeAmount = lostAmount.div(20)

IRs:
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['lostAmount', '20'] 
feeAmount(uint256) := TMP_146(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
lostAmount = lostAmount.sub(feeAmount)

IRs:
TMP_147(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['lostAmount', 'feeAmount'] 
lostAmount(uint256) := TMP_147(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
feeOwner.transfer(feeAmount)

IRs:
Transfer dest:feeOwner value:feeAmount"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
op.transferFundAndEndGame.value(lostAmount)()

IRs:
HIGH_LEVEL_CALL, dest:op(EthTeamContract), function:transferFundAndEndGame, arguments:[] value:lostAmount "];
13->16;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
feeOwner.transfer(lostAmount)

IRs:
Transfer dest:feeOwner value:lostAmount"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
op.transferFundAndEndGame()

IRs:
HIGH_LEVEL_CALL, dest:op(EthTeamContract), function:transferFundAndEndGame, arguments:[]  "];
15->16;
16[label="Node Type: END_IF 16
"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
op.transferFundAndEndGame()

IRs:
HIGH_LEVEL_CALL, dest:op(EthTeamContract), function:transferFundAndEndGame, arguments:[]  "];
17->18;
18[label="Node Type: END_IF 18
"];
18->40;
19[label="Node Type: IF 19

EXPRESSION:
_gameResult == 2

IRs:
TMP_154(bool) = _gameResult == 2
CONDITION TMP_154"];
19->20[label="True"];
19->35[label="False"];
20[label="Node Type: IF 20

EXPRESSION:
amount > opAmount

IRs:
TMP_155(bool) = amount > opAmount
CONDITION TMP_155"];
20->21[label="True"];
20->30[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
lostAmount = amount.sub(opAmount).div(2)

IRs:
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['amount', 'opAmount'] 
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_156', '2'] 
lostAmount(uint256) := TMP_157(uint256)"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
op.totalSupply() > 0

IRs:
TMP_158(uint256) = HIGH_LEVEL_CALL, dest:op(EthTeamContract), function:totalSupply, arguments:[]  
TMP_159(bool) = TMP_158 > 0
CONDITION TMP_159"];
22->23[label="True"];
22->27[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
feeAmount = lostAmount.div(20)

IRs:
TMP_160(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['lostAmount', '20'] 
feeAmount(uint256) := TMP_160(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
lostAmount = lostAmount.sub(feeAmount)

IRs:
TMP_161(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['lostAmount', 'feeAmount'] 
lostAmount(uint256) := TMP_161(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
feeOwner.transfer(feeAmount)

IRs:
Transfer dest:feeOwner value:feeAmount"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
op.transferFundAndEndGame.value(lostAmount)()

IRs:
HIGH_LEVEL_CALL, dest:op(EthTeamContract), function:transferFundAndEndGame, arguments:[] value:lostAmount "];
26->29;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
feeOwner.transfer(lostAmount)

IRs:
Transfer dest:feeOwner value:lostAmount"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
op.transferFundAndEndGame()

IRs:
HIGH_LEVEL_CALL, dest:op(EthTeamContract), function:transferFundAndEndGame, arguments:[]  "];
28->29;
29[label="Node Type: END_IF 29
"];
29->34;
30[label="Node Type: IF 30

EXPRESSION:
amount == opAmount

IRs:
TMP_167(bool) = amount == opAmount
CONDITION TMP_167"];
30->31[label="True"];
30->32[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
op.transferFundAndEndGame()

IRs:
HIGH_LEVEL_CALL, dest:op(EthTeamContract), function:transferFundAndEndGame, arguments:[]  "];
31->33;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
revert()()

IRs:
TMP_169(None) = SOLIDITY_CALL revert()()"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: END_IF 34
"];
34->39;
35[label="Node Type: IF 35

EXPRESSION:
_gameResult == 3

IRs:
TMP_170(bool) = _gameResult == 3
CONDITION TMP_170"];
35->36[label="True"];
35->37[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
op.transferFundAndEndGame()

IRs:
HIGH_LEVEL_CALL, dest:op(EthTeamContract), function:transferFundAndEndGame, arguments:[]  "];
36->38;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
revert()()

IRs:
TMP_172(None) = SOLIDITY_CALL revert()()"];
37->38;
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: END_IF 40
"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
endGameInternal()

IRs:
INTERNAL_CALL, EthTeamContract.endGameInternal()()"];
41->42;
42[label="Node Type: IF 42

EXPRESSION:
totalSupply_ > 0

IRs:
TMP_174(bool) = totalSupply_ > 0
CONDITION TMP_174"];
42->43[label="True"];
42->44[label="False"];
43[label="Node Type: EXPRESSION 43

EXPRESSION:
price = address(this).balance.div(totalSupply_)

IRs:
TMP_175 = CONVERT this to address
TMP_176(uint256) = SOLIDITY_CALL balance(address)(TMP_175)
TMP_177(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_176', 'totalSupply_'] 
price(uint256) := TMP_177(uint256)"];
43->44;
44[label="Node Type: END_IF 44
"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
EndGame(address(this),_gameOpponent,_gameResult)

IRs:
TMP_178 = CONVERT this to address
Emit EndGame(TMP_178,_gameOpponent,_gameResult)"];
46[label="Node Type: EXPRESSION 46

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
46->1;
}
// Function: 10431.sol-EthTeamContract-endGameInternal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameOpponent = address(0)

IRs:
TMP_181 = CONVERT 0 to address
gameOpponent(address) := TMP_181(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameTime = 0

IRs:
gameTime(uint64) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
status = 0

IRs:
status(uint8) := 0(uint256)"];
}
// Function: 10431.sol-EthTeamContract-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(status == 0 && price > 0)

IRs:
TMP_81(bool) = status == 0
TMP_82(bool) = price > 0
TMP_83(bool) = TMP_81 && TMP_82
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
gameTime > 1514764800

IRs:
TMP_85(bool) = gameTime > 1514764800
CONDITION TMP_85"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(gameTime - 300 > block.timestamp)

IRs:
TMP_86(uint64) = gameTime - 300
TMP_87(bool) = TMP_86 > block.timestamp
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
amount = msg.value.div(price)

IRs:
TMP_89(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['msg.value', 'price'] 
amount(uint256) := TMP_89(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances_[msg.sender] = balances_[msg.sender].add(amount)

IRs:
REF_60(uint256) -> balances_[msg.sender]
REF_61(uint256) -> balances_[msg.sender]
TMP_90(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_61', 'amount'] 
REF_60(uint256) (->balances_) := TMP_90(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
totalSupply_ = totalSupply_.add(amount)

IRs:
TMP_91(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', 'amount'] 
totalSupply_(uint256) := TMP_91(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(address(this),msg.sender,amount)

IRs:
TMP_92 = CONVERT this to address
Emit Transfer(TMP_92,msg.sender,amount)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Buy(address(this),msg.sender,amount,msg.value)

IRs:
TMP_94 = CONVERT this to address
Emit Buy(TMP_94,msg.sender,amount,msg.value)"];
}
// Function: 10431.sol-EthTeamContract-finish()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp >= finishTime)

IRs:
TMP_101(bool) = block.timestamp >= finishTime
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
feeOwner.transfer(address(this).balance)

IRs:
TMP_103 = CONVERT this to address
TMP_104(uint256) = SOLIDITY_CALL balance(address)(TMP_103)
Transfer dest:feeOwner value:TMP_104"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 10431.sol-EthTeamContract-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_194(bool) = msg.sender == owner
TMP_195(None) = SOLIDITY_CALL require(bool)(TMP_194)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10431.sol-EthTeamContract-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 10431.sol-EthTeamContract-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_to != address(this)

IRs:
TMP_64 = CONVERT this to address
TMP_65(bool) = _to != TMP_64
CONDITION TMP_65"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_66(bool) = INTERNAL_CALL, StandardToken.transfer(address,uint256)(_to,_value)
RETURN TMP_66"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value <= balances_[msg.sender] && status == 0)

IRs:
REF_52(uint256) -> balances_[msg.sender]
TMP_67(bool) = _value <= REF_52
TMP_68(bool) = status == 0
TMP_69(bool) = TMP_67 && TMP_68
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
gameTime > 1514764800

IRs:
TMP_71(bool) = gameTime > 1514764800
CONDITION TMP_71"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(gameTime - 300 > block.timestamp)

IRs:
TMP_72(uint64) = gameTime - 300
TMP_73(bool) = TMP_72 > block.timestamp
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances_[msg.sender] = balances_[msg.sender].sub(_value)

IRs:
REF_53(uint256) -> balances_[msg.sender]
REF_54(uint256) -> balances_[msg.sender]
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_54', '_value'] 
REF_53(uint256) (->balances_) := TMP_75(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_76(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
weiAmount = price.mul(_value)

IRs:
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['price', '_value'] 
weiAmount(uint256) := TMP_77(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
msg.sender.transfer(weiAmount)

IRs:
Transfer dest:msg.sender value:weiAmount"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Sell(_to,msg.sender,_value,weiAmount)

IRs:
Emit Sell(_to,msg.sender,_value,weiAmount)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10431.sol-EthTeamContract-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_52 = CONVERT 0 to address
TMP_53(bool) = _to != TMP_52
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances_[_from])

IRs:
REF_36(uint256) -> balances_[_from]
TMP_55(bool) = _value <= REF_36
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed_[_from][msg.sender])

IRs:
REF_37(mapping(address => uint256)) -> allowed_[_from]
REF_38(uint256) -> REF_37[msg.sender]
TMP_57(bool) = _value <= REF_38
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances_[_from] = balances_[_from].sub(_value)

IRs:
REF_39(uint256) -> balances_[_from]
REF_40(uint256) -> balances_[_from]
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_40', '_value'] 
REF_39(uint256) (->balances_) := TMP_59(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances_[_to] = balances_[_to].add(_value)

IRs:
REF_42(uint256) -> balances_[_to]
REF_43(uint256) -> balances_[_to]
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_43', '_value'] 
REF_42(uint256) (->balances_) := TMP_60(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value)

IRs:
REF_45(mapping(address => uint256)) -> allowed_[_from]
REF_46(uint256) -> REF_45[msg.sender]
REF_47(mapping(address => uint256)) -> allowed_[_from]
REF_48(uint256) -> REF_47[msg.sender]
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_48', '_value'] 
REF_46(uint256) (->allowed_) := TMP_61(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10431.sol-EthTeamContract-transferFundAndEndGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameOpponent != address(0) && gameOpponent == msg.sender)

IRs:
TMP_182 = CONVERT 0 to address
TMP_183(bool) = gameOpponent != TMP_182
TMP_184(bool) = gameOpponent == msg.sender
TMP_185(bool) = TMP_183 && TMP_184
TMP_186(None) = SOLIDITY_CALL require(bool)(TMP_185)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
msg.value > 0 && totalSupply_ > 0

IRs:
TMP_187(bool) = msg.value > 0
TMP_188(bool) = totalSupply_ > 0
TMP_189(bool) = TMP_187 && TMP_188
CONDITION TMP_189"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
price = address(this).balance.div(totalSupply_)

IRs:
TMP_190 = CONVERT this to address
TMP_191(uint256) = SOLIDITY_CALL balance(address)(TMP_190)
TMP_192(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_191', 'totalSupply_'] 
price(uint256) := TMP_192(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
endGameInternal()

IRs:
INTERNAL_CALL, EthTeamContract.endGameInternal()()"];
}
// Function: 10431.sol-EthTeamContract-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_39 = CONVERT 0 to address
TMP_40(bool) = newOwner != TMP_39
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10431.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10431.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10431.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10431.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 10431.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10431.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 10431.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed_[_owner][_spender]

IRs:
REF_1(mapping(address => uint256)) -> allowed_[_owner]
REF_2(uint256) -> REF_1[_spender]
RETURN REF_2"];
}
// Function: 10431.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed_[msg.sender][_spender] = _value

IRs:
REF_24(mapping(address => uint256)) -> allowed_[msg.sender]
REF_25(uint256) -> REF_24[_spender]
REF_25(uint256) (->allowed_) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10431.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances_[_owner]

IRs:
REF_0(uint256) -> balances_[_owner]
RETURN REF_0"];
}
// Function: 10431.sol-StandardToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 10431.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = _to != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances_[msg.sender])

IRs:
REF_3(uint256) -> balances_[msg.sender]
TMP_22(bool) = _value <= REF_3
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances_[msg.sender] = balances_[msg.sender].sub(_value)

IRs:
REF_4(uint256) -> balances_[msg.sender]
REF_5(uint256) -> balances_[msg.sender]
TMP_24(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances_) := TMP_24(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances_[_to] = balances_[_to].add(_value)

IRs:
REF_7(uint256) -> balances_[_to]
REF_8(uint256) -> balances_[_to]
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', '_value'] 
REF_7(uint256) (->balances_) := TMP_25(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10431.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_27 = CONVERT 0 to address
TMP_28(bool) = _to != TMP_27
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances_[_from])

IRs:
REF_10(uint256) -> balances_[_from]
TMP_30(bool) = _value <= REF_10
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed_[_from][msg.sender])

IRs:
REF_11(mapping(address => uint256)) -> allowed_[_from]
REF_12(uint256) -> REF_11[msg.sender]
TMP_32(bool) = _value <= REF_12
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances_[_from] = balances_[_from].sub(_value)

IRs:
REF_13(uint256) -> balances_[_from]
REF_14(uint256) -> balances_[_from]
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_14', '_value'] 
REF_13(uint256) (->balances_) := TMP_34(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances_[_to] = balances_[_to].add(_value)

IRs:
REF_16(uint256) -> balances_[_to]
REF_17(uint256) -> balances_[_to]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_17', '_value'] 
REF_16(uint256) (->balances_) := TMP_35(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value)

IRs:
REF_19(mapping(address => uint256)) -> allowed_[_from]
REF_20(uint256) -> REF_19[msg.sender]
REF_21(mapping(address => uint256)) -> allowed_[_from]
REF_22(uint256) -> REF_21[msg.sender]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_22', '_value'] 
REF_20(uint256) (->allowed_) := TMP_36(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
