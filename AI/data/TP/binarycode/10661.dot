digraph G {
// Function: 10661.sol-JungleScratch-JungleScratch(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Drawer = drawer_

IRs:
Drawer(address) := drawer_(address)"];
}
// Function: 10661.sol-JungleScratch-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10661.sol-JungleScratch-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_23(bool) = msg.sender == newOwner
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_26 = CONVERT 0 to address
newOwner(address) := TMP_26(address)"];
}
// Function: 10661.sol-JungleScratch-award(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(Drawer == msg.sender)

IRs:
TMP_56(bool) = Drawer == msg.sender
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
secretKey_D_hash = keccak256()(secretKey_D)

IRs:
TMP_58(bytes32) = SOLIDITY_CALL keccak256()(secretKey_D)
secretKey_D_hash(bytes32) := TMP_58(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
local_ = TicketPool[secretKey_D_hash]

IRs:
REF_4(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
local_(JungleScratch.Game) := REF_4(JungleScratch.Game)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(local_.Time != 0 && ! local_.isPlay)

IRs:
REF_5(uint256) -> local_.Time
TMP_59(bool) = REF_5 != 0
REF_6(bool) -> local_.isPlay
TMP_60 = UnaryType.BANG REF_6 
TMP_61(bool) = TMP_59 && TMP_60
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
game_result = 0

IRs:
game_result(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
RandomResult = new uint256[](9)

IRs:
TMP_64(uint256[])  = new uint256[](9)
RandomResult(uint256[]) = ['TMP_64(uint256[])']"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
RandomResult[0] = uint256(keccak256()(Pig World is an AWESOME team,secretKey_D,a,local_.SecretKey_P)) % 1000 + 1

IRs:
REF_7(uint256) -> RandomResult[0]
REF_8(bytes32) -> local_.SecretKey_P
TMP_65(bytes32) = SOLIDITY_CALL keccak256()(Pig World is an AWESOME team,secretKey_D,a,REF_8)
TMP_66 = CONVERT TMP_65 to uint256
TMP_67(uint256) = TMP_66 % 1000
TMP_68(uint256) = TMP_67 + 1
REF_7(uint256) (->RandomResult) := TMP_68(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
RandomResult[1] = uint256(keccak256()(local_.SecretKey_P,Every Game in our world is provably fair,secretKey_D,b)) % 1000 + 1

IRs:
REF_9(uint256) -> RandomResult[1]
REF_10(bytes32) -> local_.SecretKey_P
TMP_69(bytes32) = SOLIDITY_CALL keccak256()(REF_10,Every Game in our world is provably fair,secretKey_D,b)
TMP_70 = CONVERT TMP_69 to uint256
TMP_71(uint256) = TMP_70 % 1000
TMP_72(uint256) = TMP_71 + 1
REF_9(uint256) (->RandomResult) := TMP_72(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
RandomResult[2] = uint256(keccak256()(c,secretKey_D,OMG it is a revolution dapp,local_.SecretKey_P)) % 1000 + 1

IRs:
REF_11(uint256) -> RandomResult[2]
REF_12(bytes32) -> local_.SecretKey_P
TMP_73(bytes32) = SOLIDITY_CALL keccak256()(c,secretKey_D,OMG it is a revolution dapp,REF_12)
TMP_74 = CONVERT TMP_73 to uint256
TMP_75(uint256) = TMP_74 % 1000
TMP_76(uint256) = TMP_75 + 1
REF_11(uint256) (->RandomResult) := TMP_76(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
RandomResult[3] = uint256(keccak256()(secretKey_D,hahahaha,local_.SecretKey_P,d,thanks for our team member and all player support.)) % 1000 + 1

IRs:
REF_13(uint256) -> RandomResult[3]
REF_14(bytes32) -> local_.SecretKey_P
TMP_77(bytes32) = SOLIDITY_CALL keccak256()(secretKey_D,hahahaha,REF_14,d,thanks for our team member and all player support.)
TMP_78 = CONVERT TMP_77 to uint256
TMP_79(uint256) = TMP_78 % 1000
TMP_80(uint256) = TMP_79 + 1
REF_13(uint256) (->RandomResult) := TMP_80(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
RandomResult[4] = uint256(keccak256()(CC is our CEO,secretKey_D,he can eat Betel nut,local_.SecretKey_P,e)) % 1000 + 1

IRs:
REF_15(uint256) -> RandomResult[4]
REF_16(bytes32) -> local_.SecretKey_P
TMP_81(bytes32) = SOLIDITY_CALL keccak256()(CC is our CEO,secretKey_D,he can eat Betel nut,REF_16,e)
TMP_82 = CONVERT TMP_81 to uint256
TMP_83(uint256) = TMP_82 % 1000
TMP_84(uint256) = TMP_83 + 1
REF_15(uint256) (->RandomResult) := TMP_84(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
RandomResult[5] = uint256(keccak256()(20180612,justin is our researcher,secretKey_D,and he love little girl(at least 18, so it is ok),local_.SecretKey_P,f)) % 1000 + 1

IRs:
REF_17(uint256) -> RandomResult[5]
REF_18(bytes32) -> local_.SecretKey_P
TMP_85(bytes32) = SOLIDITY_CALL keccak256()(20180612,justin is our researcher,secretKey_D,and he love little girl(at least 18, so it is ok),REF_18,f)
TMP_86 = CONVERT TMP_85 to uint256
TMP_87(uint256) = TMP_86 % 1000
TMP_88(uint256) = TMP_87 + 1
REF_17(uint256) (->RandomResult) := TMP_88(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
RandomResult[6] = uint256(keccak256()(jeremy is our marketing,secretKey_D,g,local_.SecretKey_P,he is very humble and serious)) % 1000 + 1

IRs:
REF_19(uint256) -> RandomResult[6]
REF_20(bytes32) -> local_.SecretKey_P
TMP_89(bytes32) = SOLIDITY_CALL keccak256()(jeremy is our marketing,secretKey_D,g,REF_20,he is very humble and serious)
TMP_90 = CONVERT TMP_89 to uint256
TMP_91(uint256) = TMP_90 % 1000
TMP_92(uint256) = TMP_91 + 1
REF_19(uint256) (->RandomResult) := TMP_92(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
RandomResult[7] = uint256(keccak256()(h,secretKey_D,We are a geek team,local_.SecretKey_P,we love blockchain)) % 1000 + 1

IRs:
REF_21(uint256) -> RandomResult[7]
REF_22(bytes32) -> local_.SecretKey_P
TMP_93(bytes32) = SOLIDITY_CALL keccak256()(h,secretKey_D,We are a geek team,REF_22,we love blockchain)
TMP_94 = CONVERT TMP_93 to uint256
TMP_95(uint256) = TMP_94 % 1000
TMP_96(uint256) = TMP_95 + 1
REF_21(uint256) (->RandomResult) := TMP_96(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
RandomResult[8] = uint256(keccak256()(secretKey_D,hope you win a big prize,local_.SecretKey_P,love you all!!!,i)) % 1000 + 1

IRs:
REF_23(uint256) -> RandomResult[8]
REF_24(bytes32) -> local_.SecretKey_P
TMP_97(bytes32) = SOLIDITY_CALL keccak256()(secretKey_D,hope you win a big prize,REF_24,love you all!!!,i)
TMP_98 = CONVERT TMP_97 to uint256
TMP_99(uint256) = TMP_98 % 1000
TMP_100(uint256) = TMP_99 + 1
REF_23(uint256) (->RandomResult) := TMP_100(uint256)"];
15->18;
16[label="Node Type: BEGIN_LOOP 16
"];
16->19;
17[label="Node Type: END_LOOP 17
"];
17->44;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
n = 0

IRs:
n(uint256) := 0(uint256)"];
18->16;
19[label="Node Type: IF_LOOP 19

EXPRESSION:
n < 9

IRs:
TMP_101(bool) = n < 9
CONDITION TMP_101"];
19->20[label="True"];
19->17[label="False"];
20[label="Node Type: IF 20

EXPRESSION:
RandomResult[n] < 81

IRs:
REF_25(uint256) -> RandomResult[n]
TMP_102(bool) = REF_25 < 81
CONDITION TMP_102"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
RandomResult[n] = 0

IRs:
REF_26(uint256) -> RandomResult[n]
REF_26(uint256) (->RandomResult) := 0(uint256)"];
21->40;
22[label="Node Type: IF 22

EXPRESSION:
RandomResult[n] < 168

IRs:
REF_27(uint256) -> RandomResult[n]
TMP_103(bool) = REF_27 < 168
CONDITION TMP_103"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
RandomResult[n] = 1

IRs:
REF_28(uint256) -> RandomResult[n]
REF_28(uint256) (->RandomResult) := 1(uint256)"];
23->39;
24[label="Node Type: IF 24

EXPRESSION:
RandomResult[n] < 266

IRs:
REF_29(uint256) -> RandomResult[n]
TMP_104(bool) = REF_29 < 266
CONDITION TMP_104"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
RandomResult[n] = 2

IRs:
REF_30(uint256) -> RandomResult[n]
REF_30(uint256) (->RandomResult) := 2(uint256)"];
25->38;
26[label="Node Type: IF 26

EXPRESSION:
RandomResult[n] < 381

IRs:
REF_31(uint256) -> RandomResult[n]
TMP_105(bool) = REF_31 < 381
CONDITION TMP_105"];
26->27[label="True"];
26->28[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
RandomResult[n] = 3

IRs:
REF_32(uint256) -> RandomResult[n]
REF_32(uint256) (->RandomResult) := 3(uint256)"];
27->37;
28[label="Node Type: IF 28

EXPRESSION:
RandomResult[n] < 535

IRs:
REF_33(uint256) -> RandomResult[n]
TMP_106(bool) = REF_33 < 535
CONDITION TMP_106"];
28->29[label="True"];
28->30[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
RandomResult[n] = 4

IRs:
REF_34(uint256) -> RandomResult[n]
REF_34(uint256) (->RandomResult) := 4(uint256)"];
29->36;
30[label="Node Type: IF 30

EXPRESSION:
RandomResult[n] < 749

IRs:
REF_35(uint256) -> RandomResult[n]
TMP_107(bool) = REF_35 < 749
CONDITION TMP_107"];
30->31[label="True"];
30->32[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
RandomResult[n] = 5

IRs:
REF_36(uint256) -> RandomResult[n]
REF_36(uint256) (->RandomResult) := 5(uint256)"];
31->35;
32[label="Node Type: IF 32

EXPRESSION:
RandomResult[n] < 1001

IRs:
REF_37(uint256) -> RandomResult[n]
TMP_108(bool) = REF_37 < 1001
CONDITION TMP_108"];
32->33[label="True"];
32->34[label="False"];
33[label="Node Type: EXPRESSION 33

EXPRESSION:
RandomResult[n] = 6

IRs:
REF_38(uint256) -> RandomResult[n]
REF_38(uint256) (->RandomResult) := 6(uint256)"];
33->34;
34[label="Node Type: END_IF 34
"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: END_IF 36
"];
36->37;
37[label="Node Type: END_IF 37
"];
37->38;
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: END_IF 40
"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
n ++

IRs:
TMP_109(uint256) := n(uint256)
n(uint256) = n + 1"];
41->19;
42[label="Node Type: BEGIN_LOOP 42
"];
42->45;
43[label="Node Type: END_LOOP 43
"];
43->74;
44[label="Node Type: NEW VARIABLE 44

EXPRESSION:
nn = 0

IRs:
nn(uint256) := 0(uint256)"];
44->42;
45[label="Node Type: IF_LOOP 45

EXPRESSION:
nn < 6

IRs:
TMP_110(bool) = nn < 6
CONDITION TMP_110"];
45->46[label="True"];
45->43[label="False"];
46[label="Node Type: NEW VARIABLE 46

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
46->49;
47[label="Node Type: BEGIN_LOOP 47
"];
47->50;
48[label="Node Type: END_LOOP 48
"];
48->55;
49[label="Node Type: NEW VARIABLE 49

EXPRESSION:
p = 0

IRs:
p(uint256) := 0(uint256)"];
49->47;
50[label="Node Type: IF_LOOP 50

EXPRESSION:
p < 9

IRs:
TMP_111(bool) = p < 9
CONDITION TMP_111"];
50->51[label="True"];
50->48[label="False"];
51[label="Node Type: IF 51

EXPRESSION:
RandomResult[p] == nn

IRs:
REF_39(uint256) -> RandomResult[p]
TMP_112(bool) = REF_39 == nn
CONDITION TMP_112"];
51->52[label="True"];
51->53[label="False"];
52[label="Node Type: EXPRESSION 52

EXPRESSION:
count ++

IRs:
TMP_113(uint256) := count(uint256)
count(uint256) = count + 1"];
52->53;
53[label="Node Type: END_IF 53
"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
p ++

IRs:
TMP_114(uint256) := p(uint256)
p(uint256) = p + 1"];
54->50;
55[label="Node Type: IF 55

EXPRESSION:
count >= 3 && nn == 0

IRs:
TMP_115(bool) = count >= 3
TMP_116(bool) = nn == 0
TMP_117(bool) = TMP_115 && TMP_116
CONDITION TMP_117"];
55->56[label="True"];
55->57[label="False"];
56[label="Node Type: EXPRESSION 56

EXPRESSION:
game_result = game_result.add(TicketPool[secretKey_D_hash].value.div(20000000000000000).mul(100000000000000000))

IRs:
REF_41(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_42(uint256) -> REF_41.value
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['REF_42', '20000000000000000'] 
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_118', '100000000000000000'] 
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['game_result', 'TMP_119'] 
game_result(uint256) := TMP_120(uint256)"];
56->57;
57[label="Node Type: END_IF 57
"];
57->58;
58[label="Node Type: IF 58

EXPRESSION:
count >= 3 && nn == 1

IRs:
TMP_121(bool) = count >= 3
TMP_122(bool) = nn == 1
TMP_123(bool) = TMP_121 && TMP_122
CONDITION TMP_123"];
58->59[label="True"];
58->60[label="False"];
59[label="Node Type: EXPRESSION 59

EXPRESSION:
game_result = game_result.add(TicketPool[secretKey_D_hash].value.div(20000000000000000).mul(80000000000000000))

IRs:
REF_46(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_47(uint256) -> REF_46.value
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['REF_47', '20000000000000000'] 
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_124', '80000000000000000'] 
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['game_result', 'TMP_125'] 
game_result(uint256) := TMP_126(uint256)"];
59->60;
60[label="Node Type: END_IF 60
"];
60->61;
61[label="Node Type: IF 61

EXPRESSION:
count >= 3 && nn == 2

IRs:
TMP_127(bool) = count >= 3
TMP_128(bool) = nn == 2
TMP_129(bool) = TMP_127 && TMP_128
CONDITION TMP_129"];
61->62[label="True"];
61->63[label="False"];
62[label="Node Type: EXPRESSION 62

EXPRESSION:
game_result = game_result.add(TicketPool[secretKey_D_hash].value.div(20000000000000000).mul(60000000000000000))

IRs:
REF_51(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_52(uint256) -> REF_51.value
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['REF_52', '20000000000000000'] 
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_130', '60000000000000000'] 
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['game_result', 'TMP_131'] 
game_result(uint256) := TMP_132(uint256)"];
62->63;
63[label="Node Type: END_IF 63
"];
63->64;
64[label="Node Type: IF 64

EXPRESSION:
count >= 3 && nn == 3

IRs:
TMP_133(bool) = count >= 3
TMP_134(bool) = nn == 3
TMP_135(bool) = TMP_133 && TMP_134
CONDITION TMP_135"];
64->65[label="True"];
64->66[label="False"];
65[label="Node Type: EXPRESSION 65

EXPRESSION:
game_result = game_result.add(TicketPool[secretKey_D_hash].value.div(20000000000000000).mul(40000000000000000))

IRs:
REF_56(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_57(uint256) -> REF_56.value
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['REF_57', '20000000000000000'] 
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_136', '40000000000000000'] 
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['game_result', 'TMP_137'] 
game_result(uint256) := TMP_138(uint256)"];
65->66;
66[label="Node Type: END_IF 66
"];
66->67;
67[label="Node Type: IF 67

EXPRESSION:
count >= 3 && nn == 4

IRs:
TMP_139(bool) = count >= 3
TMP_140(bool) = nn == 4
TMP_141(bool) = TMP_139 && TMP_140
CONDITION TMP_141"];
67->68[label="True"];
67->69[label="False"];
68[label="Node Type: EXPRESSION 68

EXPRESSION:
game_result = game_result.add(TicketPool[secretKey_D_hash].value.div(20000000000000000).mul(20000000000000000))

IRs:
REF_61(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_62(uint256) -> REF_61.value
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['REF_62', '20000000000000000'] 
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_142', '20000000000000000'] 
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['game_result', 'TMP_143'] 
game_result(uint256) := TMP_144(uint256)"];
68->69;
69[label="Node Type: END_IF 69
"];
69->70;
70[label="Node Type: IF 70

EXPRESSION:
count >= 3 && nn == 5

IRs:
TMP_145(bool) = count >= 3
TMP_146(bool) = nn == 5
TMP_147(bool) = TMP_145 && TMP_146
CONDITION TMP_147"];
70->71[label="True"];
70->72[label="False"];
71[label="Node Type: EXPRESSION 71

EXPRESSION:
game_result = game_result.add(TicketPool[secretKey_D_hash].value.div(20000000000000000).mul(10000000000000000))

IRs:
REF_66(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_67(uint256) -> REF_66.value
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['REF_67', '20000000000000000'] 
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_148', '10000000000000000'] 
TMP_150(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['game_result', 'TMP_149'] 
game_result(uint256) := TMP_150(uint256)"];
71->72;
72[label="Node Type: END_IF 72
"];
72->73;
73[label="Node Type: EXPRESSION 73

EXPRESSION:
nn ++

IRs:
TMP_151(uint256) := nn(uint256)
nn(uint256) = nn + 1"];
73->45;
74[label="Node Type: IF 74

EXPRESSION:
game_result != 0

IRs:
TMP_152(bool) = game_result != 0
CONDITION TMP_152"];
74->75[label="True"];
74->82[label="False"];
75[label="Node Type: EXPRESSION 75

EXPRESSION:
TicketPool[secretKey_D_hash].Result = game_result

IRs:
REF_70(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_71(uint256) -> REF_70.Result
REF_71(uint256) (->TicketPool) := game_result(uint256)"];
75->76;
76[label="Node Type: IF 76

EXPRESSION:
address(this).balance >= game_result && TicketPool[secretKey_D_hash].Buyer.send(game_result)

IRs:
TMP_153 = CONVERT this to address
TMP_154(uint256) = SOLIDITY_CALL balance(address)(TMP_153)
TMP_155(bool) = TMP_154 >= game_result
REF_72(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_73(address) -> REF_72.Buyer
TMP_156 = SEND dest:REF_73 value:game_result
TMP_157(bool) = TMP_155 && TMP_156
CONDITION TMP_157"];
76->77[label="True"];
76->79[label="False"];
77[label="Node Type: EXPRESSION 77

EXPRESSION:
TicketPool[secretKey_D_hash].isPay = true

IRs:
REF_75(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_76(bool) -> REF_75.isPay
REF_76(bool) (->TicketPool) := True(bool)"];
77->78;
78[label="Node Type: EXPRESSION 78

EXPRESSION:
Pay(secretKey_D_hash,TicketPool[secretKey_D_hash].Buyer,game_result)

IRs:
REF_77(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_78(address) -> REF_77.Buyer
Emit Pay(secretKey_D_hash,REF_78,game_result)"];
78->81;
79[label="Node Type: EXPRESSION 79

EXPRESSION:
Owe(secretKey_D_hash,TicketPool[secretKey_D_hash].Buyer,game_result)

IRs:
REF_79(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_80(address) -> REF_79.Buyer
Emit Owe(secretKey_D_hash,REF_80,game_result)"];
79->80;
80[label="Node Type: EXPRESSION 80

EXPRESSION:
TicketPool[secretKey_D_hash].isPay = false

IRs:
REF_81(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_82(bool) -> REF_81.isPay
REF_82(bool) (->TicketPool) := False(bool)"];
80->81;
81[label="Node Type: END_IF 81
"];
81->83;
82[label="Node Type: EXPRESSION 82

EXPRESSION:
TicketPool[secretKey_D_hash].isPay = true

IRs:
REF_83(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_84(bool) -> REF_83.isPay
REF_84(bool) (->TicketPool) := True(bool)"];
82->83;
83[label="Node Type: END_IF 83
"];
83->84;
84[label="Node Type: EXPRESSION 84

EXPRESSION:
Result(secretKey_D_hash,secretKey_D,TicketPool[secretKey_D_hash].Buyer,RandomResult,game_result,block.timestamp)

IRs:
REF_85(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_86(address) -> REF_85.Buyer
Emit Result(secretKey_D_hash,secretKey_D,REF_86,RandomResult,game_result,block.timestamp)"];
84->85;
85[label="Node Type: EXPRESSION 85

EXPRESSION:
TicketPool[secretKey_D_hash].isPlay = true

IRs:
REF_87(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_88(bool) -> REF_87.isPlay
REF_88(bool) (->TicketPool) := True(bool)"];
}
// Function: 10661.sol-JungleScratch-changeDrawer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Drawer = drawer_

IRs:
Drawer(address) := drawer_(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 10661.sol-JungleScratch-changeLimit(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
LimitBottom = _bottom

IRs:
LimitBottom(uint256) := _bottom(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LimitTop = _top

IRs:
LimitTop(uint256) := _top(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 10661.sol-JungleScratch-chargeOwe(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! TicketPool[secretKey_D_hash].isPay)

IRs:
REF_94(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_95(bool) -> REF_94.isPay
TMP_165 = UnaryType.BANG REF_95 
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(TicketPool[secretKey_D_hash].isPlay)

IRs:
REF_96(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_97(bool) -> REF_96.isPlay
TMP_167(None) = SOLIDITY_CALL require(bool)(REF_97)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(TicketPool[secretKey_D_hash].Result != 0)

IRs:
REF_98(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_99(uint256) -> REF_98.Result
TMP_168(bool) = REF_99 != 0
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(this).balance >= TicketPool[secretKey_D_hash].Result

IRs:
TMP_170 = CONVERT this to address
TMP_171(uint256) = SOLIDITY_CALL balance(address)(TMP_170)
REF_100(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_101(uint256) -> REF_100.Result
TMP_172(bool) = TMP_171 >= REF_101
CONDITION TMP_172"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
TicketPool[secretKey_D_hash].Buyer.send(TicketPool[secretKey_D_hash].Result)

IRs:
REF_102(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_103(address) -> REF_102.Buyer
REF_105(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_106(uint256) -> REF_105.Result
TMP_173 = SEND dest:REF_103 value:REF_106
CONDITION TMP_173"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
TicketPool[secretKey_D_hash].isPay = true

IRs:
REF_107(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_108(bool) -> REF_107.isPay
REF_108(bool) (->TicketPool) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OwePay(secretKey_D_hash,TicketPool[secretKey_D_hash].Buyer,TicketPool[secretKey_D_hash].Result)

IRs:
REF_109(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_110(address) -> REF_109.Buyer
REF_111(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_112(uint256) -> REF_111.Result
Emit OwePay(secretKey_D_hash,REF_110,REF_112)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
}
// Function: 10661.sol-JungleScratch-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 10661.sol-JungleScratch-getTicketTime(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
TicketPool[secretKey_D_hash].Time

IRs:
REF_92(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_93(uint256) -> REF_92.Time
RETURN REF_93"];
2[label="Node Type: RETURN 2

EXPRESSION:
Time

IRs:
RETURN Time"];
}
// Function: 10661.sol-JungleScratch-getisPlay(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
TicketPool[secretKey_D_hash].isPlay

IRs:
REF_90(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_91(bool) -> REF_90.isPlay
RETURN REF_91"];
2[label="Node Type: RETURN 2

EXPRESSION:
isplay

IRs:
RETURN isplay"];
}
// Function: 10661.sol-JungleScratch-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_175(bool) = msg.sender == owner
TMP_176(None) = SOLIDITY_CALL require(bool)(TMP_175)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10661.sol-JungleScratch-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
LimitBottom = 20000000000000000

IRs:
LimitBottom(uint256) := 20000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
LimitTop = 100000000000000000

IRs:
LimitTop(uint256) := 100000000000000000(uint256)"];
}
// Function: 10661.sol-JungleScratch-submit(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == 20000000000000000 || msg.value == 40000000000000000 || msg.value == 60000000000000000 || msg.value == 80000000000000000 || msg.value == 100000000000000000)

IRs:
TMP_27(bool) = msg.value == 20000000000000000
TMP_28(bool) = msg.value == 40000000000000000
TMP_29(bool) = TMP_27 || TMP_28
TMP_30(bool) = msg.value == 60000000000000000
TMP_31(bool) = TMP_29 || TMP_30
TMP_32(bool) = msg.value == 80000000000000000
TMP_33(bool) = TMP_31 || TMP_32
TMP_34(bool) = msg.value == 100000000000000000
TMP_35(bool) = TMP_33 || TMP_34
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(TicketPool[secretKey_D_hash].Time == 0)

IRs:
REF_0(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
REF_1(uint256) -> REF_0.Time
TMP_37(bool) = REF_1 == 0
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value >= LimitBottom && msg.value <= LimitTop)

IRs:
TMP_39(bool) = msg.value >= LimitBottom
TMP_40(bool) = msg.value <= LimitTop
TMP_41(bool) = TMP_39 && TMP_40
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
check = msg.value.div(20000000000000000)

IRs:
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['msg.value', '20000000000000000'] 
check(uint256) := TMP_43(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(check == 1 || check == 2 || check == 3 || check == 4 || check == 5)

IRs:
TMP_44(bool) = check == 1
TMP_45(bool) = check == 2
TMP_46(bool) = TMP_44 || TMP_45
TMP_47(bool) = check == 3
TMP_48(bool) = TMP_46 || TMP_47
TMP_49(bool) = check == 4
TMP_50(bool) = TMP_48 || TMP_49
TMP_51(bool) = check == 5
TMP_52(bool) = TMP_50 || TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
SubmitTicket(secretKey_D_hash,msg.value,secretKey_P,msg.sender)

IRs:
Emit SubmitTicket(secretKey_D_hash,msg.value,secretKey_P,msg.sender)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
TicketPool[secretKey_D_hash] = Game(secretKey_P,false,false,0,block.timestamp,msg.sender,msg.value)

IRs:
REF_3(JungleScratch.Game) -> TicketPool[secretKey_D_hash]
TMP_55(JungleScratch.Game) = new Game(secretKey_P,False,False,0,block.timestamp,msg.sender,msg.value)
REF_3(JungleScratch.Game) (->TicketPool) := TMP_55(JungleScratch.Game)"];
}
// Function: 10661.sol-JungleScratch-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 10661.sol-JungleScratch-withdraw(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
msg.sender.transfer(withdrawEther_)

IRs:
Transfer dest:msg.sender value:withdrawEther_"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 10661.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10661.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_16(bool) = msg.sender == newOwner
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_19 = CONVERT 0 to address
newOwner(address) := TMP_19(address)"];
}
// Function: 10661.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_20(bool) = msg.sender == owner
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10661.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 10661.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_0(uint256) = a + b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_1(bool) = c >= a
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10661.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_12(bool) = b > 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_14(uint256) = a / b
c(uint256) := TMP_14(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10661.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_6(uint256) = a * b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_7(bool) = a == 0
TMP_8(uint256) = c / a
TMP_9(bool) = TMP_8 == b
TMP_10(bool) = TMP_7 || TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10661.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_3(bool) = b <= a
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_5(uint256) = a - b
c(uint256) := TMP_5(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
}
