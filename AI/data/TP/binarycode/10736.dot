digraph G {
// Function: 10736.sol-LescovexERC20-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_58(mapping(address => uint256)) -> allowed[_owner]
REF_59(uint256) -> REF_58[_spender]
RETURN REF_59"];
}
// Function: 10736.sol-LescovexERC20-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_56(mapping(address => uint256)) -> allowed[msg.sender]
REF_57(uint256) -> REF_56[_spender]
REF_57(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10736.sol-LescovexERC20-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = tokenRecipient(_spender)

IRs:
TMP_76 = CONVERT _spender to tokenRecipient
spender(tokenRecipient) := TMP_76(tokenRecipient)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_77(bool) = INTERNAL_CALL, LescovexERC20.approve(address,uint256)(_spender,_value)
CONDITION TMP_77"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spender.receiveApproval(msg.sender,_value,this,_extraData)

IRs:
HIGH_LEVEL_CALL, dest:spender(tokenRecipient), function:receiveApproval, arguments:['msg.sender', '_value', 'this', '_extraData']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 10736.sol-LescovexERC20-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
}
// Function: 10736.sol-LescovexERC20-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10736.sol-LescovexERC20-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_67(mapping(address => uint256)) -> allowed[msg.sender]
REF_68(uint256) -> REF_67[_spender]
oldValue(uint256) := REF_68(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_73(bool) = _subtractedValue > oldValue
CONDITION TMP_73"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_69(mapping(address => uint256)) -> allowed[msg.sender]
REF_70(uint256) -> REF_69[_spender]
REF_70(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_71(mapping(address => uint256)) -> allowed[msg.sender]
REF_72(uint256) -> REF_71[_spender]
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_72(uint256) (->allowed) := TMP_74(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_74(mapping(address => uint256)) -> allowed[msg.sender]
REF_75(uint256) -> REF_74[_spender]
Emit Approval(msg.sender,_spender,REF_75)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10736.sol-LescovexERC20-hold(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(holded[_to].length < holdMax)

IRs:
REF_12(LescovexERC20.timeHold) -> holded[_to]
REF_13(uint256) -> REF_12.length
TMP_33(bool) = REF_13 < holdMax
TMP_34(None) = SOLIDITY_CALL assert(bool)(TMP_33)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
len = holded[_to].length

IRs:
REF_14(LescovexERC20.timeHold) -> holded[_to]
REF_15(uint256) -> REF_14.length
len(uint256) := REF_15(uint256)"];
2->7;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
holded[_to].amount.push(accumulatedValue)

IRs:
REF_16(LescovexERC20.timeHold) -> holded[_to]
REF_17(uint256[]) -> REF_16.amount
REF_19 -> LENGTH REF_17
TMP_36(uint256) := REF_19(uint256)
TMP_37(uint256) = TMP_36 + 1
REF_19(uint256) (->holded) := TMP_37(uint256)
REF_20(uint256) -> REF_17[TMP_36]
REF_20(uint256) (->holded) := accumulatedValue(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
holded[_to].time.push(block.timestamp)

IRs:
REF_21(LescovexERC20.timeHold) -> holded[_to]
REF_22(uint256[]) -> REF_21.time
REF_24 -> LENGTH REF_22
TMP_39(uint256) := REF_24(uint256)
TMP_40(uint256) = TMP_39 + 1
REF_24(uint256) (->holded) := TMP_40(uint256)
REF_25(uint256) -> REF_22[TMP_39]
REF_25(uint256) (->holded) := block.timestamp(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
holded[_to].length ++

IRs:
REF_26(LescovexERC20.timeHold) -> holded[_to]
REF_27(uint256) -> REF_26.length
TMP_41(uint256) := REF_27(uint256)
REF_27(-> holded) = REF_27 + 1"];
7[label="Node Type: IF 7

EXPRESSION:
(len == 0)

IRs:
TMP_42(bool) = len == 0
CONDITION TMP_42"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
accumulatedValue = _value

IRs:
accumulatedValue(uint256) := _value(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
accumulatedValue = _value + holded[_to].amount[len - 1]

IRs:
REF_28(LescovexERC20.timeHold) -> holded[_to]
REF_29(uint256[]) -> REF_28.amount
TMP_43(uint256) = len - 1
REF_30(uint256) -> REF_29[TMP_43]
TMP_44(uint256) = _value + REF_30
accumulatedValue(uint256) := TMP_44(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->4;
}
// Function: 10736.sol-LescovexERC20-holdedOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
requiredTime = block.timestamp - holdTime

IRs:
TMP_24(uint256) = block.timestamp - holdTime
requiredTime(uint256) := TMP_24(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iValid = 0

IRs:
iValid(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
iNotValid = holded[_owner].length

IRs:
REF_1(LescovexERC20.timeHold) -> holded[_owner]
REF_2(uint256) -> REF_1.length
iNotValid(uint256) := REF_2(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
iNotValid == 0 || holded[_owner].time[iValid] >= requiredTime

IRs:
TMP_25(bool) = iNotValid == 0
REF_3(LescovexERC20.timeHold) -> holded[_owner]
REF_4(uint256[]) -> REF_3.time
REF_5(uint256) -> REF_4[iValid]
TMP_26(bool) = REF_5 >= requiredTime
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
0

IRs:
RETURN 0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = iNotValid / 2

IRs:
TMP_28(uint256) = iNotValid / 2
i(uint256) := TMP_28(uint256)"];
7->8;
8[label="Node Type: BEGIN_LOOP 8
"];
8->9;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i > iValid

IRs:
TMP_29(bool) = i > iValid
CONDITION TMP_29"];
9->10[label="True"];
9->15[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
holded[_owner].time[i] < requiredTime

IRs:
REF_6(LescovexERC20.timeHold) -> holded[_owner]
REF_7(uint256[]) -> REF_6.time
REF_8(uint256) -> REF_7[i]
TMP_30(bool) = REF_8 < requiredTime
CONDITION TMP_30"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
iValid = i

IRs:
iValid(uint256) := i(uint256)"];
11->13;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
iNotValid = i

IRs:
iNotValid(uint256) := i(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i = (iNotValid + iValid) / 2

IRs:
TMP_31(uint256) = iNotValid + iValid
TMP_32(uint256) = TMP_31 / 2
i(uint256) := TMP_32(uint256)"];
14->9;
15[label="Node Type: END_LOOP 15
"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
holded[_owner].amount[iValid]

IRs:
REF_9(LescovexERC20.timeHold) -> holded[_owner]
REF_10(uint256[]) -> REF_9.amount
REF_11(uint256) -> REF_10[iValid]
RETURN REF_11"];
}
// Function: 10736.sol-LescovexERC20-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_60(mapping(address => uint256)) -> allowed[msg.sender]
REF_61(uint256) -> REF_60[_spender]
REF_62(mapping(address => uint256)) -> allowed[msg.sender]
REF_63(uint256) -> REF_62[_spender]
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_63', '_addedValue'] 
REF_61(uint256) (->allowed) := TMP_71(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_65(mapping(address => uint256)) -> allowed[msg.sender]
REF_66(uint256) -> REF_65[_spender]
Emit Approval(msg.sender,_spender,REF_66)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10736.sol-LescovexERC20-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_79(bool) = msg.sender == owner
TMP_80(None) = SOLIDITY_CALL require(bool)(TMP_79)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10736.sol-LescovexERC20-setHoldMax(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
holdMax = _value

IRs:
holdMax(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 10736.sol-LescovexERC20-setHoldTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
holdTime = _value

IRs:
holdTime(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 10736.sol-LescovexERC20-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
standard = ERC20 Lescovex ISC Income Smart Contract

IRs:
standard(string) := ERC20 Lescovex ISC Income Smart Contract(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
}
// Function: 10736.sol-LescovexERC20-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
holdMax = 100

IRs:
holdMax(uint256) := 100(uint256)"];
}
// Function: 10736.sol-LescovexERC20-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_47 = CONVERT 0 to address
TMP_48(bool) = _to != TMP_47
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_31(uint256) -> balances[msg.sender]
TMP_50(bool) = _value <= REF_31
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_32(uint256) -> balances[msg.sender]
REF_33(uint256) -> balances[msg.sender]
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_33', '_value'] 
REF_32(uint256) (->balances) := TMP_52(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete holded[msg.sender]

IRs:
REF_35(LescovexERC20.timeHold) -> holded[msg.sender]
holded = delete REF_35 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
hold(msg.sender,balances[msg.sender])

IRs:
REF_36(uint256) -> balances[msg.sender]
INTERNAL_CALL, LescovexERC20.hold(address,uint256)(msg.sender,REF_36)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
hold(_to,_value)

IRs:
INTERNAL_CALL, LescovexERC20.hold(address,uint256)(_to,_value)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_37(uint256) -> balances[_to]
REF_38(uint256) -> balances[_to]
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_38', '_value'] 
REF_37(uint256) (->balances) := TMP_55(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10736.sol-LescovexERC20-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_57 = CONVERT 0 to address
TMP_58(bool) = _to != TMP_57
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_40(uint256) -> balances[_from]
TMP_60(bool) = _value <= REF_40
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_41(mapping(address => uint256)) -> allowed[_from]
REF_42(uint256) -> REF_41[msg.sender]
TMP_62(bool) = _value <= REF_42
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_43(uint256) -> balances[_from]
REF_44(uint256) -> balances[_from]
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_44', '_value'] 
REF_43(uint256) (->balances) := TMP_64(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_46(mapping(address => uint256)) -> allowed[_from]
REF_47(uint256) -> REF_46[msg.sender]
REF_48(mapping(address => uint256)) -> allowed[_from]
REF_49(uint256) -> REF_48[msg.sender]
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_49', '_value'] 
REF_47(uint256) (->allowed) := TMP_65(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
delete holded[_from]

IRs:
REF_51(LescovexERC20.timeHold) -> holded[_from]
holded = delete REF_51 "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
hold(_from,balances[_from])

IRs:
REF_52(uint256) -> balances[_from]
INTERNAL_CALL, LescovexERC20.hold(address,uint256)(_from,REF_52)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
hold(_to,_value)

IRs:
INTERNAL_CALL, LescovexERC20.hold(address,uint256)(_to,_value)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_53(uint256) -> balances[_to]
REF_54(uint256) -> balances[_to]
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_54', '_value'] 
REF_53(uint256) (->balances) := TMP_68(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10736.sol-LescovexERC20-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = newOwner != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10736.sol-Lescovex_ISC-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_135(mapping(address => uint256)) -> allowed[_owner]
REF_136(uint256) -> REF_135[_spender]
RETURN REF_136"];
}
// Function: 10736.sol-Lescovex_ISC-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_133(mapping(address => uint256)) -> allowed[msg.sender]
REF_134(uint256) -> REF_133[_spender]
REF_134(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10736.sol-Lescovex_ISC-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = tokenRecipient(_spender)

IRs:
TMP_133 = CONVERT _spender to tokenRecipient
spender(tokenRecipient) := TMP_133(tokenRecipient)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_134(bool) = INTERNAL_CALL, LescovexERC20.approve(address,uint256)(_spender,_value)
CONDITION TMP_134"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spender.receiveApproval(msg.sender,_value,this,_extraData)

IRs:
HIGH_LEVEL_CALL, dest:spender(tokenRecipient), function:receiveApproval, arguments:['msg.sender', '_value', 'this', '_extraData']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 10736.sol-Lescovex_ISC-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_77(uint256) -> balances[_owner]
RETURN REF_77"];
}
// Function: 10736.sol-Lescovex_ISC-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10736.sol-Lescovex_ISC-constructor(uint256,string,string,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = initialSupply

IRs:
totalSupply(uint256) := initialSupply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = contractName

IRs:
name(string) := contractName(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = tokenSymbol

IRs:
symbol(string) := tokenSymbol(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
holdTime = contractHoldTime

IRs:
holdTime(uint256) := contractHoldTime(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[contractOwner] = totalSupply

IRs:
REF_154(uint256) -> balances[contractOwner]
REF_154(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 10736.sol-Lescovex_ISC-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_144(mapping(address => uint256)) -> allowed[msg.sender]
REF_145(uint256) -> REF_144[_spender]
oldValue(uint256) := REF_145(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_130(bool) = _subtractedValue > oldValue
CONDITION TMP_130"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_146(mapping(address => uint256)) -> allowed[msg.sender]
REF_147(uint256) -> REF_146[_spender]
REF_147(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_148(mapping(address => uint256)) -> allowed[msg.sender]
REF_149(uint256) -> REF_148[_spender]
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_149(uint256) (->allowed) := TMP_131(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_151(mapping(address => uint256)) -> allowed[msg.sender]
REF_152(uint256) -> REF_151[_spender]
Emit Approval(msg.sender,_spender,REF_152)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10736.sol-Lescovex_ISC-deposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractBalance = contractAddr.balance

IRs:
TMP_141(uint256) = SOLIDITY_CALL balance(address)(contractAddr)
contractBalance(uint256) := TMP_141(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogDeposit(msg.sender,msg.value)

IRs:
Emit LogDeposit(msg.sender,msg.value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 10736.sol-Lescovex_ISC-hold(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(holded[_to].length < holdMax)

IRs:
REF_89(LescovexERC20.timeHold) -> holded[_to]
REF_90(uint256) -> REF_89.length
TMP_90(bool) = REF_90 < holdMax
TMP_91(None) = SOLIDITY_CALL assert(bool)(TMP_90)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
len = holded[_to].length

IRs:
REF_91(LescovexERC20.timeHold) -> holded[_to]
REF_92(uint256) -> REF_91.length
len(uint256) := REF_92(uint256)"];
2->7;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
holded[_to].amount.push(accumulatedValue)

IRs:
REF_93(LescovexERC20.timeHold) -> holded[_to]
REF_94(uint256[]) -> REF_93.amount
REF_96 -> LENGTH REF_94
TMP_93(uint256) := REF_96(uint256)
TMP_94(uint256) = TMP_93 + 1
REF_96(uint256) (->holded) := TMP_94(uint256)
REF_97(uint256) -> REF_94[TMP_93]
REF_97(uint256) (->holded) := accumulatedValue(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
holded[_to].time.push(block.timestamp)

IRs:
REF_98(LescovexERC20.timeHold) -> holded[_to]
REF_99(uint256[]) -> REF_98.time
REF_101 -> LENGTH REF_99
TMP_96(uint256) := REF_101(uint256)
TMP_97(uint256) = TMP_96 + 1
REF_101(uint256) (->holded) := TMP_97(uint256)
REF_102(uint256) -> REF_99[TMP_96]
REF_102(uint256) (->holded) := block.timestamp(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
holded[_to].length ++

IRs:
REF_103(LescovexERC20.timeHold) -> holded[_to]
REF_104(uint256) -> REF_103.length
TMP_98(uint256) := REF_104(uint256)
REF_104(-> holded) = REF_104 + 1"];
7[label="Node Type: IF 7

EXPRESSION:
(len == 0)

IRs:
TMP_99(bool) = len == 0
CONDITION TMP_99"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
accumulatedValue = _value

IRs:
accumulatedValue(uint256) := _value(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
accumulatedValue = _value + holded[_to].amount[len - 1]

IRs:
REF_105(LescovexERC20.timeHold) -> holded[_to]
REF_106(uint256[]) -> REF_105.amount
TMP_100(uint256) = len - 1
REF_107(uint256) -> REF_106[TMP_100]
TMP_101(uint256) = _value + REF_107
accumulatedValue(uint256) := TMP_101(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->4;
}
// Function: 10736.sol-Lescovex_ISC-holdedOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
requiredTime = block.timestamp - holdTime

IRs:
TMP_81(uint256) = block.timestamp - holdTime
requiredTime(uint256) := TMP_81(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iValid = 0

IRs:
iValid(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
iNotValid = holded[_owner].length

IRs:
REF_78(LescovexERC20.timeHold) -> holded[_owner]
REF_79(uint256) -> REF_78.length
iNotValid(uint256) := REF_79(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
iNotValid == 0 || holded[_owner].time[iValid] >= requiredTime

IRs:
TMP_82(bool) = iNotValid == 0
REF_80(LescovexERC20.timeHold) -> holded[_owner]
REF_81(uint256[]) -> REF_80.time
REF_82(uint256) -> REF_81[iValid]
TMP_83(bool) = REF_82 >= requiredTime
TMP_84(bool) = TMP_82 || TMP_83
CONDITION TMP_84"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
0

IRs:
RETURN 0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = iNotValid / 2

IRs:
TMP_85(uint256) = iNotValid / 2
i(uint256) := TMP_85(uint256)"];
7->8;
8[label="Node Type: BEGIN_LOOP 8
"];
8->9;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i > iValid

IRs:
TMP_86(bool) = i > iValid
CONDITION TMP_86"];
9->10[label="True"];
9->15[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
holded[_owner].time[i] < requiredTime

IRs:
REF_83(LescovexERC20.timeHold) -> holded[_owner]
REF_84(uint256[]) -> REF_83.time
REF_85(uint256) -> REF_84[i]
TMP_87(bool) = REF_85 < requiredTime
CONDITION TMP_87"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
iValid = i

IRs:
iValid(uint256) := i(uint256)"];
11->13;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
iNotValid = i

IRs:
iNotValid(uint256) := i(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i = (iNotValid + iValid) / 2

IRs:
TMP_88(uint256) = iNotValid + iValid
TMP_89(uint256) = TMP_88 / 2
i(uint256) := TMP_89(uint256)"];
14->9;
15[label="Node Type: END_LOOP 15
"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
holded[_owner].amount[iValid]

IRs:
REF_86(LescovexERC20.timeHold) -> holded[_owner]
REF_87(uint256[]) -> REF_86.amount
REF_88(uint256) -> REF_87[iValid]
RETURN REF_88"];
}
// Function: 10736.sol-Lescovex_ISC-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_137(mapping(address => uint256)) -> allowed[msg.sender]
REF_138(uint256) -> REF_137[_spender]
REF_139(mapping(address => uint256)) -> allowed[msg.sender]
REF_140(uint256) -> REF_139[_spender]
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_140', '_addedValue'] 
REF_138(uint256) (->allowed) := TMP_128(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_142(mapping(address => uint256)) -> allowed[msg.sender]
REF_143(uint256) -> REF_142[_spender]
Emit Approval(msg.sender,_spender,REF_143)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10736.sol-Lescovex_ISC-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_155(bool) = msg.sender == owner
TMP_156(None) = SOLIDITY_CALL require(bool)(TMP_155)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10736.sol-Lescovex_ISC-setHoldMax(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
holdMax = _value

IRs:
holdMax(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 10736.sol-Lescovex_ISC-setHoldTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
holdTime = _value

IRs:
holdTime(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 10736.sol-Lescovex_ISC-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
standard = ERC20 Lescovex ISC Income Smart Contract

IRs:
standard(string) := ERC20 Lescovex ISC Income Smart Contract(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
}
// Function: 10736.sol-Lescovex_ISC-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
holdMax = 100

IRs:
holdMax(uint256) := 100(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
contractBalance = 0

IRs:
contractBalance(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
contractAddr = this

IRs:
contractAddr(address) := this(address)"];
}
// Function: 10736.sol-Lescovex_ISC-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_104 = CONVERT 0 to address
TMP_105(bool) = _to != TMP_104
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_108(uint256) -> balances[msg.sender]
TMP_107(bool) = _value <= REF_108
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_109(uint256) -> balances[msg.sender]
REF_110(uint256) -> balances[msg.sender]
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_110', '_value'] 
REF_109(uint256) (->balances) := TMP_109(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete holded[msg.sender]

IRs:
REF_112(LescovexERC20.timeHold) -> holded[msg.sender]
holded = delete REF_112 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
hold(msg.sender,balances[msg.sender])

IRs:
REF_113(uint256) -> balances[msg.sender]
INTERNAL_CALL, LescovexERC20.hold(address,uint256)(msg.sender,REF_113)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
hold(_to,_value)

IRs:
INTERNAL_CALL, LescovexERC20.hold(address,uint256)(_to,_value)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_114(uint256) -> balances[_to]
REF_115(uint256) -> balances[_to]
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_115', '_value'] 
REF_114(uint256) (->balances) := TMP_112(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10736.sol-Lescovex_ISC-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_114 = CONVERT 0 to address
TMP_115(bool) = _to != TMP_114
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_117(uint256) -> balances[_from]
TMP_117(bool) = _value <= REF_117
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_118(mapping(address => uint256)) -> allowed[_from]
REF_119(uint256) -> REF_118[msg.sender]
TMP_119(bool) = _value <= REF_119
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_120(uint256) -> balances[_from]
REF_121(uint256) -> balances[_from]
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_121', '_value'] 
REF_120(uint256) (->balances) := TMP_121(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_123(mapping(address => uint256)) -> allowed[_from]
REF_124(uint256) -> REF_123[msg.sender]
REF_125(mapping(address => uint256)) -> allowed[_from]
REF_126(uint256) -> REF_125[msg.sender]
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_126', '_value'] 
REF_124(uint256) (->allowed) := TMP_122(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
delete holded[_from]

IRs:
REF_128(LescovexERC20.timeHold) -> holded[_from]
holded = delete REF_128 "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
hold(_from,balances[_from])

IRs:
REF_129(uint256) -> balances[_from]
INTERNAL_CALL, LescovexERC20.hold(address,uint256)(_from,REF_129)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
hold(_to,_value)

IRs:
INTERNAL_CALL, LescovexERC20.hold(address,uint256)(_to,_value)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_130(uint256) -> balances[_to]
REF_131(uint256) -> balances[_to]
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_131', '_value'] 
REF_130(uint256) (->balances) := TMP_125(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10736.sol-Lescovex_ISC-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_136 = CONVERT 0 to address
TMP_137(bool) = newOwner != TMP_136
TMP_138(None) = SOLIDITY_CALL require(bool)(TMP_137)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10736.sol-Lescovex_ISC-withdraw(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
msg.sender.transfer(value)

IRs:
Transfer dest:msg.sender value:value"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogWithdrawal(msg.sender,value)

IRs:
Emit LogWithdrawal(msg.sender,value)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 10736.sol-Lescovex_ISC-withdrawReward()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ethAmount = (holdedOf(msg.sender) * contractBalance) / totalSupply

IRs:
TMP_144(uint256) = INTERNAL_CALL, LescovexERC20.holdedOf(address)(msg.sender)
TMP_145(uint256) = TMP_144 * contractBalance
TMP_146(uint256) = TMP_145 / totalSupply
ethAmount(uint256) := TMP_146(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(ethAmount > 0)

IRs:
TMP_147(bool) = ethAmount > 0
TMP_148(None) = SOLIDITY_CALL require(bool)(TMP_147)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LogWithdrawal(msg.sender,ethAmount)

IRs:
Emit LogWithdrawal(msg.sender,ethAmount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete holded[msg.sender]

IRs:
REF_155(LescovexERC20.timeHold) -> holded[msg.sender]
holded = delete REF_155 "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
hold(msg.sender,balances[msg.sender])

IRs:
REF_156(uint256) -> balances[msg.sender]
INTERNAL_CALL, LescovexERC20.hold(address,uint256)(msg.sender,REF_156)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
msg.sender.transfer(ethAmount)

IRs:
Transfer dest:msg.sender value:ethAmount"];
}
// Function: 10736.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10736.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10736.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10736.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10736.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10736.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10736.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 10736.sol-tokenRecipient-receiveApproval(address,uint256,address,bytes)
digraph{
}
}
