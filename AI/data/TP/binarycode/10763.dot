digraph G {
// Function: 10763.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_35(uint256) -> balances[_owner]
RETURN REF_35"];
}
// Function: 10763.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 10763.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_121 = CONVERT 0 to address
TMP_122(bool) = _to != TMP_121
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_28(uint256) -> balances[msg.sender]
TMP_124(bool) = _value <= REF_28
TMP_125(None) = SOLIDITY_CALL require(bool)(TMP_124)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_29(uint256) -> balances[msg.sender]
REF_30(uint256) -> balances[msg.sender]
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_30', '_value'] 
REF_29(uint256) (->balances) := TMP_126(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_32(uint256) -> balances[_to]
REF_33(uint256) -> balances[_to]
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_33', '_value'] 
REF_32(uint256) (->balances) := TMP_127(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-Claimable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10763.sol-Claimable-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_103 = CONVERT 0 to address
pendingOwner(address) := TMP_103(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 10763.sol-Claimable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_105(bool) = msg.sender == owner
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-Claimable-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_107(bool) = msg.sender == pendingOwner
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-Claimable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pendingOwner = newOwner

IRs:
pendingOwner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 10763.sol-CoinCool-CoinCool()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Releaseable(0x4068D7c2e286Cb1E72Cef90B74C823E990FaB9C2,mulDecimals.mul(3000000))

IRs:
TMP_556(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['mulDecimals', '3000000'] 
INTERNAL_CALL, Releaseable.Releaseable(address,uint256)(367713482290732840040692435727060128212685863362,TMP_556)"];
}
// Function: 10763.sol-CoinCool-Frozenable(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Operational(_operator)

IRs:
INTERNAL_CALL, Operational.Operational(address)(_operator)"];
}
// Function: 10763.sol-CoinCool-Operational(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operator = _operator

IRs:
operator(address) := _operator(address)"];
}
// Function: 10763.sol-CoinCool-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10763.sol-CoinCool-Releaseable(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
createTime = 1528732800

IRs:
createTime(uint256) := 1528732800(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
releasedSupply = _initialSupply

IRs:
releasedSupply(uint256) := _initialSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[owner] = _initialSupply

IRs:
REF_311(uint256) -> balances[owner]
REF_311(uint256) (->balances) := _initialSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = mulDecimals.mul(187140000)

IRs:
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['mulDecimals', '187140000'] 
totalSupply_(uint256) := TMP_426(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Frozenable(_operator)

IRs:
INTERNAL_CALL, Frozenable.Frozenable(address)(_operator)"];
5->1;
}
// Function: 10763.sol-CoinCool-allowance(address,address)
digraph{
}
// Function: 10763.sol-CoinCool-approve(address,uint256)
digraph{
}
// Function: 10763.sol-CoinCool-balanceOf(address)
digraph{
}
// Function: 10763.sol-CoinCool-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_372(uint256) -> balances[msg.sender]
TMP_513(bool) = _value <= REF_372
TMP_514(None) = SOLIDITY_CALL require(bool)(TMP_513)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_373(uint256) -> balances[burner]
REF_374(uint256) -> balances[burner]
TMP_515(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_374', '_value'] 
REF_373(uint256) (->balances) := TMP_515(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_516(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_516(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-CoinCool-checkIsReleaseRecordExist(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
exist = false

IRs:
exist(bool) := False(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
releaseIndex = uint256(timestamp.parseTimestamp().year) * 10000 + uint256(timestamp.parseTimestamp().month) * 100 + uint256(timestamp.parseTimestamp().day)

IRs:
TMP_465(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_333(uint16) -> TMP_465.year
TMP_466 = CONVERT REF_333 to uint256
TMP_467(uint256) = TMP_466 * 10000
TMP_468(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_335(uint8) -> TMP_468.month
TMP_469 = CONVERT REF_335 to uint256
TMP_470(uint256) = TMP_469 * 100
TMP_471(uint256) = TMP_467 + TMP_470
TMP_472(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_337(uint8) -> TMP_472.day
TMP_473 = CONVERT REF_337 to uint256
TMP_474(uint256) = TMP_471 + TMP_473
releaseIndex(uint256) := TMP_474(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
releaseRecords[releaseIndex].releaseIndex == releaseIndex

IRs:
REF_338(Releaseable.ReleaseRecord) -> releaseRecords[releaseIndex]
REF_339(uint256) -> REF_338.releaseIndex
TMP_475(bool) = REF_339 == releaseIndex
CONDITION TMP_475"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
exist = true

IRs:
exist(bool) := True(bool)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
exist

IRs:
RETURN exist"];
7[label="Node Type: RETURN 7

EXPRESSION:
_exist

IRs:
RETURN _exist"];
}
// Function: 10763.sol-CoinCool-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_549 = CONVERT 0 to address
pendingOwner(address) := TMP_549(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 10763.sol-CoinCool-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_402(mapping(address => uint256)) -> allowed[msg.sender]
REF_403(uint256) -> REF_402[_spender]
oldValue(uint256) := REF_403(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_532(bool) = _subtractedValue > oldValue
CONDITION TMP_532"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_404(mapping(address => uint256)) -> allowed[msg.sender]
REF_405(uint256) -> REF_404[_spender]
REF_405(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_406(mapping(address => uint256)) -> allowed[msg.sender]
REF_407(uint256) -> REF_406[_spender]
TMP_533(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_407(uint256) (->allowed) := TMP_533(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_409(mapping(address => uint256)) -> allowed[msg.sender]
REF_410(uint256) -> REF_409[_spender]
Emit Approval(msg.sender,_spender,REF_410)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-CoinCool-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_395(mapping(address => uint256)) -> allowed[msg.sender]
REF_396(uint256) -> REF_395[_spender]
REF_397(mapping(address => uint256)) -> allowed[msg.sender]
REF_398(uint256) -> REF_397[_spender]
TMP_530(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_398', '_addedValue'] 
REF_396(uint256) (->allowed) := TMP_530(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_400(mapping(address => uint256)) -> allowed[msg.sender]
REF_401(uint256) -> REF_400[_spender]
Emit Approval(msg.sender,_spender,REF_401)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-CoinCool-nonReentrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! reentrancyLock)

IRs:
TMP_560 = UnaryType.BANG reentrancyLock 
TMP_561(None) = SOLIDITY_CALL require(bool)(TMP_560)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reentrancyLock = true

IRs:
reentrancyLock(bool) := True(bool)"];
2->3;
3[label="Node Type: _ 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reentrancyLock = false

IRs:
reentrancyLock(bool) := False(bool)"];
}
// Function: 10763.sol-CoinCool-onlyOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == operator)

IRs:
TMP_562(bool) = msg.sender == operator
TMP_563(None) = SOLIDITY_CALL require(bool)(TMP_562)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-CoinCool-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_566(bool) = msg.sender == owner
TMP_567(None) = SOLIDITY_CALL require(bool)(TMP_566)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-CoinCool-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_564(bool) = msg.sender == pendingOwner
TMP_565(None) = SOLIDITY_CALL require(bool)(TMP_564)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-CoinCool-release(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(timestamp >= createTime && timestamp <= block.timestamp)

IRs:
TMP_428(bool) = timestamp >= createTime
TMP_429(bool) = timestamp <= block.timestamp
TMP_430(bool) = TMP_428 && TMP_429
TMP_431(None) = SOLIDITY_CALL require(bool)(TMP_430)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! checkIsReleaseRecordExist(timestamp))

IRs:
TMP_432(bool) = INTERNAL_CALL, Releaseable.checkIsReleaseRecordExist(uint256)(timestamp)
TMP_433 = UnaryType.BANG TMP_432 
TMP_434(None) = SOLIDITY_CALL require(bool)(TMP_433)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
updateReleaseAmount(timestamp)

IRs:
INTERNAL_CALL, Releaseable.updateReleaseAmount(uint256)(timestamp)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(sysAmount <= releaseAmountPerDay.mul(4).div(5))

IRs:
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['releaseAmountPerDay', '4'] 
TMP_437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_436', '5'] 
TMP_438(bool) = sysAmount <= TMP_437
TMP_439(None) = SOLIDITY_CALL require(bool)(TMP_438)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(totalSupply_ >= releasedSupply.add(releaseAmountPerDay))

IRs:
TMP_440(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['releasedSupply', 'releaseAmountPerDay'] 
TMP_441(bool) = totalSupply_ >= TMP_440
TMP_442(None) = SOLIDITY_CALL require(bool)(TMP_441)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[owner] = balances[owner].add(releaseAmountPerDay)

IRs:
REF_316(uint256) -> balances[owner]
REF_317(uint256) -> balances[owner]
TMP_443(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_317', 'releaseAmountPerDay'] 
REF_316(uint256) (->balances) := TMP_443(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
releasedSupply = releasedSupply.add(releaseAmountPerDay)

IRs:
TMP_444(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['releasedSupply', 'releaseAmountPerDay'] 
releasedSupply(uint256) := TMP_444(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_releaseIndex = uint256(timestamp.parseTimestamp().year) * 10000 + uint256(timestamp.parseTimestamp().month) * 100 + uint256(timestamp.parseTimestamp().day)

IRs:
TMP_445(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_321(uint16) -> TMP_445.year
TMP_446 = CONVERT REF_321 to uint256
TMP_447(uint256) = TMP_446 * 10000
TMP_448(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_323(uint8) -> TMP_448.month
TMP_449 = CONVERT REF_323 to uint256
TMP_450(uint256) = TMP_449 * 100
TMP_451(uint256) = TMP_447 + TMP_450
TMP_452(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_325(uint8) -> TMP_452.day
TMP_453 = CONVERT REF_325 to uint256
TMP_454(uint256) = TMP_451 + TMP_453
_releaseIndex(uint256) := TMP_454(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
releaseRecords[_releaseIndex] = ReleaseRecord(releaseAmountPerDay,_releaseIndex)

IRs:
REF_326(Releaseable.ReleaseRecord) -> releaseRecords[_releaseIndex]
TMP_455(Releaseable.ReleaseRecord) = new ReleaseRecord(releaseAmountPerDay,_releaseIndex)
REF_326(Releaseable.ReleaseRecord) (->releaseRecords) := TMP_455(Releaseable.ReleaseRecord)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Release(owner,releaseAmountPerDay,sysAmount,timestamp)

IRs:
Emit Release(owner,releaseAmountPerDay,sysAmount,timestamp)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
systemFreeze(sysAmount.div(5),timestamp.add(15552000))

IRs:
TMP_457(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['sysAmount', '5'] 
TMP_458(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['timestamp', '15552000'] 
INTERNAL_CALL, Frozenable.systemFreeze(uint256,uint256)(TMP_457,TMP_458)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
systemFreeze(sysAmount.mul(6).div(10),timestamp.add(44150400000))

IRs:
TMP_460(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['sysAmount', '6'] 
TMP_461(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_460', '10'] 
TMP_462(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['timestamp', '44150400000'] 
INTERNAL_CALL, Frozenable.systemFreeze(uint256,uint256)(TMP_461,TMP_462)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
releaseAmountPerDay

IRs:
RETURN releaseAmountPerDay"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyOperator()

IRs:
MODIFIER_CALL, Operational.onlyOperator()()"];
14->1;
15[label="Node Type: RETURN 15

EXPRESSION:
_actualRelease

IRs:
RETURN _actualRelease"];
}
// Function: 10763.sol-CoinCool-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mulDecimals = 100000000

IRs:
mulDecimals(uint256) := 100000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
standardReleaseAmount = mulDecimals.mul(512000)

IRs:
TMP_558(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['mulDecimals', '512000'] 
standardReleaseAmount(uint256) := TMP_558(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
releaseAmountPerDay = mulDecimals.mul(512000)

IRs:
TMP_559(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['mulDecimals', '512000'] 
releaseAmountPerDay(uint256) := TMP_559(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
releasedSupply = 0

IRs:
releasedSupply(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
standard = 2018061200

IRs:
standard(string) := 2018061200(string)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
name = CoolToken

IRs:
name(string) := CoolToken(string)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
symbol = CT

IRs:
symbol(string) := CT(string)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
}
// Function: 10763.sol-CoinCool-systemFreeze(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
unfreezeIndex = uint256(_unfreezeTime.parseTimestamp().year) * 10000 + uint256(_unfreezeTime.parseTimestamp().month) * 100 + uint256(_unfreezeTime.parseTimestamp().day)

IRs:
TMP_484(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['_unfreezeTime'] 
REF_344(uint16) -> TMP_484.year
TMP_485 = CONVERT REF_344 to uint256
TMP_486(uint256) = TMP_485 * 10000
TMP_487(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['_unfreezeTime'] 
REF_346(uint8) -> TMP_487.month
TMP_488 = CONVERT REF_346 to uint256
TMP_489(uint256) = TMP_488 * 100
TMP_490(uint256) = TMP_486 + TMP_489
TMP_491(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['_unfreezeTime'] 
REF_348(uint8) -> TMP_491.day
TMP_492 = CONVERT REF_348 to uint256
TMP_493(uint256) = TMP_490 + TMP_492
unfreezeIndex(uint256) := TMP_493(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[owner] = balances[owner].sub(_value)

IRs:
REF_349(uint256) -> balances[owner]
REF_350(uint256) -> balances[owner]
TMP_494(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_350', '_value'] 
REF_349(uint256) (->balances) := TMP_494(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
frozenRecords[unfreezeIndex] = FrozenRecord({value:_value,unfreezeIndex:unfreezeIndex})

IRs:
REF_352(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
TMP_495(Frozenable.FrozenRecord) = new FrozenRecord(_value,unfreezeIndex)
REF_352(Frozenable.FrozenRecord) (->frozenRecords) := TMP_495(Frozenable.FrozenRecord)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
frozenBalance = frozenBalance.add(_value)

IRs:
TMP_496(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['frozenBalance', '_value'] 
frozenBalance(uint256) := TMP_496(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
SystemFreeze(owner,_value,_unfreezeTime)

IRs:
Emit SystemFreeze(owner,_value,_unfreezeTime)"];
}
// Function: 10763.sol-CoinCool-totalSupply()
digraph{
}
// Function: 10763.sol-CoinCool-transfer(address,uint256)
digraph{
}
// Function: 10763.sol-CoinCool-transferFrom(address,address,uint256)
digraph{
}
// Function: 10763.sol-CoinCool-transferOperator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOperator != address(0))

IRs:
TMP_543 = CONVERT 0 to address
TMP_544(bool) = newOperator != TMP_543
TMP_545(None) = SOLIDITY_CALL require(bool)(TMP_544)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operator = newOperator

IRs:
operator(address) := newOperator(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 10763.sol-CoinCool-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_551 = CONVERT 0 to address
TMP_552(bool) = newOwner != TMP_551
TMP_553(None) = SOLIDITY_CALL require(bool)(TMP_552)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10763.sol-CoinCool-unfreeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(timestamp <= block.timestamp)

IRs:
TMP_498(bool) = timestamp <= block.timestamp
TMP_499(None) = SOLIDITY_CALL require(bool)(TMP_498)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
unfreezeIndex = uint256(timestamp.parseTimestamp().year) * 10000 + uint256(timestamp.parseTimestamp().month) * 100 + uint256(timestamp.parseTimestamp().day)

IRs:
TMP_500(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_355(uint16) -> TMP_500.year
TMP_501 = CONVERT REF_355 to uint256
TMP_502(uint256) = TMP_501 * 10000
TMP_503(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_357(uint8) -> TMP_503.month
TMP_504 = CONVERT REF_357 to uint256
TMP_505(uint256) = TMP_504 * 100
TMP_506(uint256) = TMP_502 + TMP_505
TMP_507(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_359(uint8) -> TMP_507.day
TMP_508 = CONVERT REF_359 to uint256
TMP_509(uint256) = TMP_506 + TMP_508
unfreezeIndex(uint256) := TMP_509(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
frozenBalance = frozenBalance.sub(frozenRecords[unfreezeIndex].value)

IRs:
REF_361(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
REF_362(uint256) -> REF_361.value
TMP_510(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['frozenBalance', 'REF_362'] 
frozenBalance(uint256) := TMP_510(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[owner] = balances[owner].add(frozenRecords[unfreezeIndex].value)

IRs:
REF_363(uint256) -> balances[owner]
REF_364(uint256) -> balances[owner]
REF_366(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
REF_367(uint256) -> REF_366.value
TMP_511(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_364', 'REF_367'] 
REF_363(uint256) (->balances) := TMP_511(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
unfreezeAmount = frozenRecords[unfreezeIndex].value

IRs:
REF_368(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
REF_369(uint256) -> REF_368.value
unfreezeAmount(uint256) := REF_369(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Unfreeze(owner,unfreezeAmount,timestamp)

IRs:
Emit Unfreeze(owner,unfreezeAmount,timestamp)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
frozenRecords[unfreezeIndex].value = 0

IRs:
REF_370(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
REF_371(uint256) -> REF_370.value
REF_371(uint256) (->frozenRecords) := 0(uint256)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
unfreezeAmount

IRs:
RETURN unfreezeAmount"];
9[label="Node Type: RETURN 9

EXPRESSION:
unfreezeAmount

IRs:
RETURN unfreezeAmount"];
}
// Function: 10763.sol-CoinCool-updateReleaseAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
timeElapse = timestamp.sub(createTime)

IRs:
TMP_476(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['timestamp', 'createTime'] 
timeElapse(uint256) := TMP_476(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
cycles = timeElapse.div(15552000)

IRs:
TMP_477(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['timeElapse', '15552000'] 
cycles(uint256) := TMP_477(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
cycles > 0

IRs:
TMP_478(bool) = cycles > 0
CONDITION TMP_478"];
3->4[label="True"];
3->14[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
cycles <= 10

IRs:
TMP_479(bool) = cycles <= 10
CONDITION TMP_479"];
4->5[label="True"];
4->12[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
releaseAmountPerDay = standardReleaseAmount

IRs:
releaseAmountPerDay(uint256) := standardReleaseAmount(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->13;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
index = 0

IRs:
index(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
index < cycles

IRs:
TMP_480(bool) = index < cycles
CONDITION TMP_480"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
releaseAmountPerDay = releaseAmountPerDay.div(2)

IRs:
TMP_481(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['releaseAmountPerDay', '2'] 
releaseAmountPerDay(uint256) := TMP_481(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
index ++

IRs:
TMP_482(uint256) := index(uint256)
index(uint256) = index + 1"];
11->9;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
releaseAmountPerDay = 0

IRs:
releaseAmountPerDay(uint256) := 0(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
}
// Function: 10763.sol-DateTime-getDay(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseTimestamp(timestamp).day

IRs:
TMP_66(DateTime.MyDateTime) = INTERNAL_CALL, DateTime.parseTimestamp(uint256)(timestamp)
REF_13(uint8) -> TMP_66.day
RETURN REF_13"];
}
// Function: 10763.sol-DateTime-getDaysInMonth(uint8,uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12

IRs:
TMP_11(bool) = month == 1
TMP_12(bool) = month == 3
TMP_13(bool) = TMP_11 || TMP_12
TMP_14(bool) = month == 5
TMP_15(bool) = TMP_13 || TMP_14
TMP_16(bool) = month == 7
TMP_17(bool) = TMP_15 || TMP_16
TMP_18(bool) = month == 8
TMP_19(bool) = TMP_17 || TMP_18
TMP_20(bool) = month == 10
TMP_21(bool) = TMP_19 || TMP_20
TMP_22(bool) = month == 12
TMP_23(bool) = TMP_21 || TMP_22
CONDITION TMP_23"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
31

IRs:
RETURN 31"];
3[label="Node Type: IF 3

EXPRESSION:
month == 4 || month == 6 || month == 9 || month == 11

IRs:
TMP_24(bool) = month == 4
TMP_25(bool) = month == 6
TMP_26(bool) = TMP_24 || TMP_25
TMP_27(bool) = month == 9
TMP_28(bool) = TMP_26 || TMP_27
TMP_29(bool) = month == 11
TMP_30(bool) = TMP_28 || TMP_29
CONDITION TMP_30"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
30

IRs:
RETURN 30"];
5[label="Node Type: IF 5

EXPRESSION:
isLeapYear(year)

IRs:
TMP_31(bool) = INTERNAL_CALL, DateTime.isLeapYear(uint16)(year)
CONDITION TMP_31"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
29

IRs:
RETURN 29"];
7[label="Node Type: RETURN 7

EXPRESSION:
28

IRs:
RETURN 28"];
}
// Function: 10763.sol-DateTime-getHour(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint8((timestamp / 60 / 60) % 24)

IRs:
TMP_67(uint256) = timestamp / 60
TMP_68(uint256) = TMP_67 / 60
TMP_69(uint256) = TMP_68 % 24
TMP_70 = CONVERT TMP_69 to uint8
RETURN TMP_70"];
}
// Function: 10763.sol-DateTime-getMinute(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint8((timestamp / 60) % 60)

IRs:
TMP_71(uint256) = timestamp / 60
TMP_72(uint256) = TMP_71 % 60
TMP_73 = CONVERT TMP_72 to uint8
RETURN TMP_73"];
}
// Function: 10763.sol-DateTime-getMonth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseTimestamp(timestamp).month

IRs:
TMP_65(DateTime.MyDateTime) = INTERNAL_CALL, DateTime.parseTimestamp(uint256)(timestamp)
REF_12(uint8) -> TMP_65.month
RETURN REF_12"];
}
// Function: 10763.sol-DateTime-getSecond(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint8(timestamp % 60)

IRs:
TMP_74(uint256) = timestamp % 60
TMP_75 = CONVERT TMP_74 to uint8
RETURN TMP_75"];
}
// Function: 10763.sol-DateTime-getYear(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
secondsAccountedFor = 0

IRs:
secondsAccountedFor(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS)

IRs:
TMP_51(uint256) = timestamp / YEAR_IN_SECONDS
TMP_52(uint16) = ORIGIN_YEAR + TMP_51
TMP_53 = CONVERT TMP_52 to uint16
year(uint16) := TMP_53(uint16)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR)

IRs:
TMP_54(uint256) = INTERNAL_CALL, DateTime.leapYearsBefore(uint256)(year)
TMP_55(uint256) = INTERNAL_CALL, DateTime.leapYearsBefore(uint256)(ORIGIN_YEAR)
TMP_56(uint256) = TMP_54 - TMP_55
numLeapYears(uint256) := TMP_56(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears

IRs:
TMP_57(uint256) = LEAP_YEAR_IN_SECONDS * numLeapYears
secondsAccountedFor(uint256) = secondsAccountedFor + TMP_57"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears)

IRs:
TMP_58(uint16) = year - ORIGIN_YEAR
TMP_59(uint16) = TMP_58 - numLeapYears
TMP_60(uint256) = YEAR_IN_SECONDS * TMP_59
secondsAccountedFor(uint256) = secondsAccountedFor + TMP_60"];
7->8;
8[label="Node Type: BEGIN_LOOP 8
"];
8->9;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
secondsAccountedFor > timestamp

IRs:
TMP_61(bool) = secondsAccountedFor > timestamp
CONDITION TMP_61"];
9->10[label="True"];
9->15[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
isLeapYear(uint16(year - 1))

IRs:
TMP_62(uint16) = year - 1
TMP_63 = CONVERT TMP_62 to uint16
TMP_64(bool) = INTERNAL_CALL, DateTime.isLeapYear(uint16)(TMP_63)
CONDITION TMP_64"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
secondsAccountedFor -= LEAP_YEAR_IN_SECONDS

IRs:
secondsAccountedFor(uint256) = secondsAccountedFor - LEAP_YEAR_IN_SECONDS"];
11->13;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
secondsAccountedFor -= YEAR_IN_SECONDS

IRs:
secondsAccountedFor(uint256) = secondsAccountedFor - YEAR_IN_SECONDS"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
year -= 1

IRs:
year(uint16) = year - 1"];
14->9;
15[label="Node Type: END_LOOP 15
"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
year

IRs:
RETURN year"];
}
// Function: 10763.sol-DateTime-isLeapYear(uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
year % 4 != 0

IRs:
TMP_0(uint16) = year % 4
TMP_1(bool) = TMP_0 != 0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
year % 100 != 0

IRs:
TMP_2(uint16) = year % 100
TMP_3(bool) = TMP_2 != 0
CONDITION TMP_3"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
year % 400 != 0

IRs:
TMP_4(uint16) = year % 400
TMP_5(bool) = TMP_4 != 0
CONDITION TMP_5"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-DateTime-leapYearsBefore(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
year -= 1

IRs:
year(uint256) = year - 1"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
year / 4 - year / 100 + year / 400

IRs:
TMP_6(uint256) = year / 4
TMP_7(uint256) = year / 100
TMP_8(uint256) = TMP_6 - TMP_7
TMP_9(uint256) = year / 400
TMP_10(uint256) = TMP_8 + TMP_9
RETURN TMP_10"];
}
// Function: 10763.sol-DateTime-parseTimestamp(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
secondsAccountedFor = 0

IRs:
secondsAccountedFor(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dt.year = getYear(timestamp)

IRs:
REF_0(uint16) -> dt.year
TMP_32(uint16) = INTERNAL_CALL, DateTime.getYear(uint256)(timestamp)
REF_0(uint16) (->dt) := TMP_32(uint16)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR)

IRs:
REF_1(uint16) -> dt.year
TMP_33(uint256) = INTERNAL_CALL, DateTime.leapYearsBefore(uint256)(REF_1)
TMP_34(uint256) = INTERNAL_CALL, DateTime.leapYearsBefore(uint256)(ORIGIN_YEAR)
TMP_35(uint256) = TMP_33 - TMP_34
buf(uint256) := TMP_35(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf

IRs:
TMP_36(uint256) = LEAP_YEAR_IN_SECONDS * buf
secondsAccountedFor(uint256) = secondsAccountedFor + TMP_36"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf)

IRs:
REF_2(uint16) -> dt.year
TMP_37(uint16) = REF_2 - ORIGIN_YEAR
TMP_38(uint16) = TMP_37 - buf
TMP_39(uint256) = YEAR_IN_SECONDS * TMP_38
secondsAccountedFor(uint256) = secondsAccountedFor + TMP_39"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->22;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i = 1

IRs:
i(uint8) := 1(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i <= 12

IRs:
TMP_40(bool) = i <= 12
CONDITION TMP_40"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i,dt.year)

IRs:
REF_3(uint16) -> dt.year
TMP_41(uint8) = INTERNAL_CALL, DateTime.getDaysInMonth(uint8,uint16)(i,REF_3)
TMP_42(uint256) = DAY_IN_SECONDS * TMP_41
secondsInMonth(uint256) := TMP_42(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
secondsInMonth + secondsAccountedFor > timestamp

IRs:
TMP_43(uint256) = secondsInMonth + secondsAccountedFor
TMP_44(bool) = TMP_43 > timestamp
CONDITION TMP_44"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
dt.month = i

IRs:
REF_4(uint8) -> dt.month
REF_4(uint8) (->dt) := i(uint8)"];
15->16;
16[label="Node Type: BREAK 16
"];
16->10;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
secondsAccountedFor += secondsInMonth

IRs:
secondsAccountedFor(uint256) = secondsAccountedFor + secondsInMonth"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i ++

IRs:
TMP_45(uint8) := i(uint8)
i(uint8) = i + 1"];
19->12;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->30;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 1

IRs:
i(uint8) := 1(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i <= getDaysInMonth(dt.month,dt.year)

IRs:
REF_5(uint8) -> dt.month
REF_6(uint16) -> dt.year
TMP_46(uint8) = INTERNAL_CALL, DateTime.getDaysInMonth(uint8,uint16)(REF_5,REF_6)
TMP_47(bool) = i <= TMP_46
CONDITION TMP_47"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: IF 24

EXPRESSION:
DAY_IN_SECONDS + secondsAccountedFor > timestamp

IRs:
TMP_48(uint256) = DAY_IN_SECONDS + secondsAccountedFor
TMP_49(bool) = TMP_48 > timestamp
CONDITION TMP_49"];
24->25[label="True"];
24->27[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
dt.day = i

IRs:
REF_7(uint8) -> dt.day
REF_7(uint8) (->dt) := i(uint8)"];
25->26;
26[label="Node Type: BREAK 26
"];
26->21;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
secondsAccountedFor += DAY_IN_SECONDS

IRs:
secondsAccountedFor(uint256) = secondsAccountedFor + DAY_IN_SECONDS"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i ++

IRs:
TMP_50(uint8) := i(uint8)
i(uint8) = i + 1"];
29->23;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
dt.hour = 0

IRs:
REF_8(uint8) -> dt.hour
REF_8(uint8) (->dt) := 0(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
dt.minute = 0

IRs:
REF_9(uint8) -> dt.minute
REF_9(uint8) (->dt) := 0(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
dt.second = 0

IRs:
REF_10(uint8) -> dt.second
REF_10(uint8) (->dt) := 0(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
dt.weekday = 0

IRs:
REF_11(uint8) -> dt.weekday
REF_11(uint8) (->dt) := 0(uint256)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
dt

IRs:
RETURN dt"];
}
// Function: 10763.sol-DateTime-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
DAY_IN_SECONDS = 86400

IRs:
DAY_IN_SECONDS(uint256) := 86400(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
YEAR_IN_SECONDS = 31536000

IRs:
YEAR_IN_SECONDS(uint256) := 31536000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
LEAP_YEAR_IN_SECONDS = 31622400

IRs:
LEAP_YEAR_IN_SECONDS(uint256) := 31622400(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
HOUR_IN_SECONDS = 3600

IRs:
HOUR_IN_SECONDS(uint256) := 3600(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MINUTE_IN_SECONDS = 60

IRs:
MINUTE_IN_SECONDS(uint256) := 60(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
ORIGIN_YEAR = 1970

IRs:
ORIGIN_YEAR(uint16) := 1970(uint256)"];
}
// Function: 10763.sol-DateTime-toTimestamp(uint16,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
toTimestamp(year,month,day,0,0,0)

IRs:
TMP_76(uint256) = INTERNAL_CALL, DateTime.toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)(year,month,day,0,0,0)
RETURN TMP_76"];
2[label="Node Type: RETURN 2

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
}
// Function: 10763.sol-DateTime-toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->11;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
i = ORIGIN_YEAR

IRs:
i(uint16) := ORIGIN_YEAR(uint16)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < year

IRs:
TMP_77(bool) = i < year
CONDITION TMP_77"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
isLeapYear(i)

IRs:
TMP_78(bool) = INTERNAL_CALL, DateTime.isLeapYear(uint16)(i)
CONDITION TMP_78"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
timestamp += LEAP_YEAR_IN_SECONDS

IRs:
timestamp(uint256) = timestamp + LEAP_YEAR_IN_SECONDS"];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
timestamp += YEAR_IN_SECONDS

IRs:
timestamp(uint256) = timestamp + YEAR_IN_SECONDS"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_79(uint16) := i(uint16)
i(uint16) = i + 1"];
10->5;
11[label="Node Type: NEW VARIABLE 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
monthDayCounts[0] = 31

IRs:
REF_14(uint8) -> monthDayCounts[0]
REF_14(uint8) (->monthDayCounts) := 31(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
isLeapYear(year)

IRs:
TMP_80(bool) = INTERNAL_CALL, DateTime.isLeapYear(uint16)(year)
CONDITION TMP_80"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
monthDayCounts[1] = 29

IRs:
REF_15(uint8) -> monthDayCounts[1]
REF_15(uint8) (->monthDayCounts) := 29(uint256)"];
14->16;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
monthDayCounts[1] = 28

IRs:
REF_16(uint8) -> monthDayCounts[1]
REF_16(uint8) (->monthDayCounts) := 28(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
monthDayCounts[2] = 31

IRs:
REF_17(uint8) -> monthDayCounts[2]
REF_17(uint8) (->monthDayCounts) := 31(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
monthDayCounts[3] = 30

IRs:
REF_18(uint8) -> monthDayCounts[3]
REF_18(uint8) (->monthDayCounts) := 30(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
monthDayCounts[4] = 31

IRs:
REF_19(uint8) -> monthDayCounts[4]
REF_19(uint8) (->monthDayCounts) := 31(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
monthDayCounts[5] = 30

IRs:
REF_20(uint8) -> monthDayCounts[5]
REF_20(uint8) (->monthDayCounts) := 30(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
monthDayCounts[6] = 31

IRs:
REF_21(uint8) -> monthDayCounts[6]
REF_21(uint8) (->monthDayCounts) := 31(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
monthDayCounts[7] = 31

IRs:
REF_22(uint8) -> monthDayCounts[7]
REF_22(uint8) (->monthDayCounts) := 31(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
monthDayCounts[8] = 30

IRs:
REF_23(uint8) -> monthDayCounts[8]
REF_23(uint8) (->monthDayCounts) := 30(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
monthDayCounts[9] = 31

IRs:
REF_24(uint8) -> monthDayCounts[9]
REF_24(uint8) (->monthDayCounts) := 31(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
monthDayCounts[10] = 30

IRs:
REF_25(uint8) -> monthDayCounts[10]
REF_25(uint8) (->monthDayCounts) := 30(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
monthDayCounts[11] = 31

IRs:
REF_26(uint8) -> monthDayCounts[11]
REF_26(uint8) (->monthDayCounts) := 31(uint256)"];
26->29;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->33;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 1

IRs:
i(uint16) := 1(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < month

IRs:
TMP_81(bool) = i < month
CONDITION TMP_81"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1]

IRs:
TMP_82(uint16) = i - 1
REF_27(uint8) -> monthDayCounts[TMP_82]
TMP_83(uint256) = DAY_IN_SECONDS * REF_27
timestamp(uint256) = timestamp + TMP_83"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_84(uint16) := i(uint16)
i(uint16) = i + 1"];
32->30;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
timestamp += DAY_IN_SECONDS * (day - 1)

IRs:
TMP_85(uint8) = day - 1
TMP_86(uint256) = DAY_IN_SECONDS * TMP_85
timestamp(uint256) = timestamp + TMP_86"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
timestamp += HOUR_IN_SECONDS * (hour)

IRs:
TMP_87(uint256) = HOUR_IN_SECONDS * hour
timestamp(uint256) = timestamp + TMP_87"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
timestamp += MINUTE_IN_SECONDS * (minute)

IRs:
TMP_88(uint256) = MINUTE_IN_SECONDS * minute
timestamp(uint256) = timestamp + TMP_88"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
timestamp += second

IRs:
timestamp(uint256) = timestamp + second"];
36->37;
37[label="Node Type: RETURN 37

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
38[label="Node Type: RETURN 38

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
}
// Function: 10763.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 10763.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 10763.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 10763.sol-ERC20-totalSupply()
digraph{
}
// Function: 10763.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 10763.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 10763.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 10763.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 10763.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 10763.sol-Frozenable-Frozenable(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Operational(_operator)

IRs:
INTERNAL_CALL, Operational.Operational(address)(_operator)"];
}
// Function: 10763.sol-Frozenable-Operational(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operator = _operator

IRs:
operator(address) := _operator(address)"];
}
// Function: 10763.sol-Frozenable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10763.sol-Frozenable-allowance(address,address)
digraph{
}
// Function: 10763.sol-Frozenable-approve(address,uint256)
digraph{
}
// Function: 10763.sol-Frozenable-balanceOf(address)
digraph{
}
// Function: 10763.sol-Frozenable-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_125(uint256) -> balances[msg.sender]
TMP_205(bool) = _value <= REF_125
TMP_206(None) = SOLIDITY_CALL require(bool)(TMP_205)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_126(uint256) -> balances[burner]
REF_127(uint256) -> balances[burner]
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_127', '_value'] 
REF_126(uint256) (->balances) := TMP_207(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_208(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-Frozenable-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_241 = CONVERT 0 to address
pendingOwner(address) := TMP_241(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 10763.sol-Frozenable-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_155(mapping(address => uint256)) -> allowed[msg.sender]
REF_156(uint256) -> REF_155[_spender]
oldValue(uint256) := REF_156(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_224(bool) = _subtractedValue > oldValue
CONDITION TMP_224"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_157(mapping(address => uint256)) -> allowed[msg.sender]
REF_158(uint256) -> REF_157[_spender]
REF_158(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_159(mapping(address => uint256)) -> allowed[msg.sender]
REF_160(uint256) -> REF_159[_spender]
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_160(uint256) (->allowed) := TMP_225(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_162(mapping(address => uint256)) -> allowed[msg.sender]
REF_163(uint256) -> REF_162[_spender]
Emit Approval(msg.sender,_spender,REF_163)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-Frozenable-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_148(mapping(address => uint256)) -> allowed[msg.sender]
REF_149(uint256) -> REF_148[_spender]
REF_150(mapping(address => uint256)) -> allowed[msg.sender]
REF_151(uint256) -> REF_150[_spender]
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_151', '_addedValue'] 
REF_149(uint256) (->allowed) := TMP_222(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_153(mapping(address => uint256)) -> allowed[msg.sender]
REF_154(uint256) -> REF_153[_spender]
Emit Approval(msg.sender,_spender,REF_154)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-Frozenable-nonReentrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! reentrancyLock)

IRs:
TMP_278 = UnaryType.BANG reentrancyLock 
TMP_279(None) = SOLIDITY_CALL require(bool)(TMP_278)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reentrancyLock = true

IRs:
reentrancyLock(bool) := True(bool)"];
2->3;
3[label="Node Type: _ 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reentrancyLock = false

IRs:
reentrancyLock(bool) := False(bool)"];
}
// Function: 10763.sol-Frozenable-onlyOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == operator)

IRs:
TMP_280(bool) = msg.sender == operator
TMP_281(None) = SOLIDITY_CALL require(bool)(TMP_280)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-Frozenable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_284(bool) = msg.sender == owner
TMP_285(None) = SOLIDITY_CALL require(bool)(TMP_284)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-Frozenable-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_282(bool) = msg.sender == pendingOwner
TMP_283(None) = SOLIDITY_CALL require(bool)(TMP_282)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-Frozenable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mulDecimals = 100000000

IRs:
mulDecimals(uint256) := 100000000(uint256)"];
}
// Function: 10763.sol-Frozenable-systemFreeze(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
unfreezeIndex = uint256(_unfreezeTime.parseTimestamp().year) * 10000 + uint256(_unfreezeTime.parseTimestamp().month) * 100 + uint256(_unfreezeTime.parseTimestamp().day)

IRs:
TMP_249(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['_unfreezeTime'] 
REF_173(uint16) -> TMP_249.year
TMP_250 = CONVERT REF_173 to uint256
TMP_251(uint256) = TMP_250 * 10000
TMP_252(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['_unfreezeTime'] 
REF_175(uint8) -> TMP_252.month
TMP_253 = CONVERT REF_175 to uint256
TMP_254(uint256) = TMP_253 * 100
TMP_255(uint256) = TMP_251 + TMP_254
TMP_256(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['_unfreezeTime'] 
REF_177(uint8) -> TMP_256.day
TMP_257 = CONVERT REF_177 to uint256
TMP_258(uint256) = TMP_255 + TMP_257
unfreezeIndex(uint256) := TMP_258(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[owner] = balances[owner].sub(_value)

IRs:
REF_178(uint256) -> balances[owner]
REF_179(uint256) -> balances[owner]
TMP_259(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_179', '_value'] 
REF_178(uint256) (->balances) := TMP_259(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
frozenRecords[unfreezeIndex] = FrozenRecord({value:_value,unfreezeIndex:unfreezeIndex})

IRs:
REF_181(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
TMP_260(Frozenable.FrozenRecord) = new FrozenRecord(_value,unfreezeIndex)
REF_181(Frozenable.FrozenRecord) (->frozenRecords) := TMP_260(Frozenable.FrozenRecord)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
frozenBalance = frozenBalance.add(_value)

IRs:
TMP_261(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['frozenBalance', '_value'] 
frozenBalance(uint256) := TMP_261(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
SystemFreeze(owner,_value,_unfreezeTime)

IRs:
Emit SystemFreeze(owner,_value,_unfreezeTime)"];
}
// Function: 10763.sol-Frozenable-totalSupply()
digraph{
}
// Function: 10763.sol-Frozenable-transfer(address,uint256)
digraph{
}
// Function: 10763.sol-Frozenable-transferFrom(address,address,uint256)
digraph{
}
// Function: 10763.sol-Frozenable-transferOperator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOperator != address(0))

IRs:
TMP_235 = CONVERT 0 to address
TMP_236(bool) = newOperator != TMP_235
TMP_237(None) = SOLIDITY_CALL require(bool)(TMP_236)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operator = newOperator

IRs:
operator(address) := newOperator(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 10763.sol-Frozenable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_243 = CONVERT 0 to address
TMP_244(bool) = newOwner != TMP_243
TMP_245(None) = SOLIDITY_CALL require(bool)(TMP_244)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10763.sol-Frozenable-unfreeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(timestamp <= block.timestamp)

IRs:
TMP_263(bool) = timestamp <= block.timestamp
TMP_264(None) = SOLIDITY_CALL require(bool)(TMP_263)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
unfreezeIndex = uint256(timestamp.parseTimestamp().year) * 10000 + uint256(timestamp.parseTimestamp().month) * 100 + uint256(timestamp.parseTimestamp().day)

IRs:
TMP_265(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_184(uint16) -> TMP_265.year
TMP_266 = CONVERT REF_184 to uint256
TMP_267(uint256) = TMP_266 * 10000
TMP_268(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_186(uint8) -> TMP_268.month
TMP_269 = CONVERT REF_186 to uint256
TMP_270(uint256) = TMP_269 * 100
TMP_271(uint256) = TMP_267 + TMP_270
TMP_272(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_188(uint8) -> TMP_272.day
TMP_273 = CONVERT REF_188 to uint256
TMP_274(uint256) = TMP_271 + TMP_273
unfreezeIndex(uint256) := TMP_274(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
frozenBalance = frozenBalance.sub(frozenRecords[unfreezeIndex].value)

IRs:
REF_190(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
REF_191(uint256) -> REF_190.value
TMP_275(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['frozenBalance', 'REF_191'] 
frozenBalance(uint256) := TMP_275(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[owner] = balances[owner].add(frozenRecords[unfreezeIndex].value)

IRs:
REF_192(uint256) -> balances[owner]
REF_193(uint256) -> balances[owner]
REF_195(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
REF_196(uint256) -> REF_195.value
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_193', 'REF_196'] 
REF_192(uint256) (->balances) := TMP_276(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
unfreezeAmount = frozenRecords[unfreezeIndex].value

IRs:
REF_197(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
REF_198(uint256) -> REF_197.value
unfreezeAmount(uint256) := REF_198(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Unfreeze(owner,unfreezeAmount,timestamp)

IRs:
Emit Unfreeze(owner,unfreezeAmount,timestamp)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
frozenRecords[unfreezeIndex].value = 0

IRs:
REF_199(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
REF_200(uint256) -> REF_199.value
REF_200(uint256) (->frozenRecords) := 0(uint256)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
unfreezeAmount

IRs:
RETURN unfreezeAmount"];
9[label="Node Type: RETURN 9

EXPRESSION:
unfreezeAmount

IRs:
RETURN unfreezeAmount"];
}
// Function: 10763.sol-Operational-Operational(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operator = _operator

IRs:
operator(address) := _operator(address)"];
}
// Function: 10763.sol-Operational-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10763.sol-Operational-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_188 = CONVERT 0 to address
pendingOwner(address) := TMP_188(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 10763.sol-Operational-onlyOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == operator)

IRs:
TMP_203(bool) = msg.sender == operator
TMP_204(None) = SOLIDITY_CALL require(bool)(TMP_203)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-Operational-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_201(bool) = msg.sender == owner
TMP_202(None) = SOLIDITY_CALL require(bool)(TMP_201)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-Operational-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_199(bool) = msg.sender == pendingOwner
TMP_200(None) = SOLIDITY_CALL require(bool)(TMP_199)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-Operational-transferOperator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOperator != address(0))

IRs:
TMP_195 = CONVERT 0 to address
TMP_196(bool) = newOperator != TMP_195
TMP_197(None) = SOLIDITY_CALL require(bool)(TMP_196)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operator = newOperator

IRs:
operator(address) := newOperator(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 10763.sol-Operational-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_190 = CONVERT 0 to address
TMP_191(bool) = newOwner != TMP_190
TMP_192(None) = SOLIDITY_CALL require(bool)(TMP_191)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10763.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10763.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_94(bool) = msg.sender == owner
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_89 = CONVERT 0 to address
TMP_90(bool) = newOwner != TMP_89
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10763.sol-ReentrancyGuard-nonReentrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! reentrancyLock)

IRs:
TMP_154 = UnaryType.BANG reentrancyLock 
TMP_155(None) = SOLIDITY_CALL require(bool)(TMP_154)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reentrancyLock = true

IRs:
reentrancyLock(bool) := True(bool)"];
2->3;
3[label="Node Type: _ 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reentrancyLock = false

IRs:
reentrancyLock(bool) := False(bool)"];
}
// Function: 10763.sol-ReentrancyGuard-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
reentrancyLock = false

IRs:
reentrancyLock(bool) := False(bool)"];
}
// Function: 10763.sol-Releaseable-Frozenable(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Operational(_operator)

IRs:
INTERNAL_CALL, Operational.Operational(address)(_operator)"];
}
// Function: 10763.sol-Releaseable-Operational(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operator = _operator

IRs:
operator(address) := _operator(address)"];
}
// Function: 10763.sol-Releaseable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10763.sol-Releaseable-Releaseable(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
createTime = 1528732800

IRs:
createTime(uint256) := 1528732800(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
releasedSupply = _initialSupply

IRs:
releasedSupply(uint256) := _initialSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[owner] = _initialSupply

IRs:
REF_277(uint256) -> balances[owner]
REF_277(uint256) (->balances) := _initialSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = mulDecimals.mul(187140000)

IRs:
TMP_359(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['mulDecimals', '187140000'] 
totalSupply_(uint256) := TMP_359(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Frozenable(_operator)

IRs:
INTERNAL_CALL, Frozenable.Frozenable(address)(_operator)"];
5->1;
}
// Function: 10763.sol-Releaseable-allowance(address,address)
digraph{
}
// Function: 10763.sol-Releaseable-approve(address,uint256)
digraph{
}
// Function: 10763.sol-Releaseable-balanceOf(address)
digraph{
}
// Function: 10763.sol-Releaseable-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_230(uint256) -> balances[msg.sender]
TMP_316(bool) = _value <= REF_230
TMP_317(None) = SOLIDITY_CALL require(bool)(TMP_316)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_231(uint256) -> balances[burner]
REF_232(uint256) -> balances[burner]
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_232', '_value'] 
REF_231(uint256) (->balances) := TMP_318(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_319(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-Releaseable-checkIsReleaseRecordExist(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
exist = false

IRs:
exist(bool) := False(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
releaseIndex = uint256(timestamp.parseTimestamp().year) * 10000 + uint256(timestamp.parseTimestamp().month) * 100 + uint256(timestamp.parseTimestamp().day)

IRs:
TMP_398(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_299(uint16) -> TMP_398.year
TMP_399 = CONVERT REF_299 to uint256
TMP_400(uint256) = TMP_399 * 10000
TMP_401(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_301(uint8) -> TMP_401.month
TMP_402 = CONVERT REF_301 to uint256
TMP_403(uint256) = TMP_402 * 100
TMP_404(uint256) = TMP_400 + TMP_403
TMP_405(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_303(uint8) -> TMP_405.day
TMP_406 = CONVERT REF_303 to uint256
TMP_407(uint256) = TMP_404 + TMP_406
releaseIndex(uint256) := TMP_407(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
releaseRecords[releaseIndex].releaseIndex == releaseIndex

IRs:
REF_304(Releaseable.ReleaseRecord) -> releaseRecords[releaseIndex]
REF_305(uint256) -> REF_304.releaseIndex
TMP_408(bool) = REF_305 == releaseIndex
CONDITION TMP_408"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
exist = true

IRs:
exist(bool) := True(bool)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
exist

IRs:
RETURN exist"];
7[label="Node Type: RETURN 7

EXPRESSION:
_exist

IRs:
RETURN _exist"];
}
// Function: 10763.sol-Releaseable-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_352 = CONVERT 0 to address
pendingOwner(address) := TMP_352(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 10763.sol-Releaseable-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_260(mapping(address => uint256)) -> allowed[msg.sender]
REF_261(uint256) -> REF_260[_spender]
oldValue(uint256) := REF_261(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_335(bool) = _subtractedValue > oldValue
CONDITION TMP_335"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_262(mapping(address => uint256)) -> allowed[msg.sender]
REF_263(uint256) -> REF_262[_spender]
REF_263(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_264(mapping(address => uint256)) -> allowed[msg.sender]
REF_265(uint256) -> REF_264[_spender]
TMP_336(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_265(uint256) (->allowed) := TMP_336(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_267(mapping(address => uint256)) -> allowed[msg.sender]
REF_268(uint256) -> REF_267[_spender]
Emit Approval(msg.sender,_spender,REF_268)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-Releaseable-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_253(mapping(address => uint256)) -> allowed[msg.sender]
REF_254(uint256) -> REF_253[_spender]
REF_255(mapping(address => uint256)) -> allowed[msg.sender]
REF_256(uint256) -> REF_255[_spender]
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_256', '_addedValue'] 
REF_254(uint256) (->allowed) := TMP_333(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_258(mapping(address => uint256)) -> allowed[msg.sender]
REF_259(uint256) -> REF_258[_spender]
Emit Approval(msg.sender,_spender,REF_259)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-Releaseable-nonReentrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! reentrancyLock)

IRs:
TMP_418 = UnaryType.BANG reentrancyLock 
TMP_419(None) = SOLIDITY_CALL require(bool)(TMP_418)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reentrancyLock = true

IRs:
reentrancyLock(bool) := True(bool)"];
2->3;
3[label="Node Type: _ 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reentrancyLock = false

IRs:
reentrancyLock(bool) := False(bool)"];
}
// Function: 10763.sol-Releaseable-onlyOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == operator)

IRs:
TMP_420(bool) = msg.sender == operator
TMP_421(None) = SOLIDITY_CALL require(bool)(TMP_420)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-Releaseable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_424(bool) = msg.sender == owner
TMP_425(None) = SOLIDITY_CALL require(bool)(TMP_424)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-Releaseable-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_422(bool) = msg.sender == pendingOwner
TMP_423(None) = SOLIDITY_CALL require(bool)(TMP_422)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10763.sol-Releaseable-release(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(timestamp >= createTime && timestamp <= block.timestamp)

IRs:
TMP_361(bool) = timestamp >= createTime
TMP_362(bool) = timestamp <= block.timestamp
TMP_363(bool) = TMP_361 && TMP_362
TMP_364(None) = SOLIDITY_CALL require(bool)(TMP_363)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! checkIsReleaseRecordExist(timestamp))

IRs:
TMP_365(bool) = INTERNAL_CALL, Releaseable.checkIsReleaseRecordExist(uint256)(timestamp)
TMP_366 = UnaryType.BANG TMP_365 
TMP_367(None) = SOLIDITY_CALL require(bool)(TMP_366)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
updateReleaseAmount(timestamp)

IRs:
INTERNAL_CALL, Releaseable.updateReleaseAmount(uint256)(timestamp)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(sysAmount <= releaseAmountPerDay.mul(4).div(5))

IRs:
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['releaseAmountPerDay', '4'] 
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_369', '5'] 
TMP_371(bool) = sysAmount <= TMP_370
TMP_372(None) = SOLIDITY_CALL require(bool)(TMP_371)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(totalSupply_ >= releasedSupply.add(releaseAmountPerDay))

IRs:
TMP_373(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['releasedSupply', 'releaseAmountPerDay'] 
TMP_374(bool) = totalSupply_ >= TMP_373
TMP_375(None) = SOLIDITY_CALL require(bool)(TMP_374)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[owner] = balances[owner].add(releaseAmountPerDay)

IRs:
REF_282(uint256) -> balances[owner]
REF_283(uint256) -> balances[owner]
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_283', 'releaseAmountPerDay'] 
REF_282(uint256) (->balances) := TMP_376(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
releasedSupply = releasedSupply.add(releaseAmountPerDay)

IRs:
TMP_377(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['releasedSupply', 'releaseAmountPerDay'] 
releasedSupply(uint256) := TMP_377(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_releaseIndex = uint256(timestamp.parseTimestamp().year) * 10000 + uint256(timestamp.parseTimestamp().month) * 100 + uint256(timestamp.parseTimestamp().day)

IRs:
TMP_378(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_287(uint16) -> TMP_378.year
TMP_379 = CONVERT REF_287 to uint256
TMP_380(uint256) = TMP_379 * 10000
TMP_381(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_289(uint8) -> TMP_381.month
TMP_382 = CONVERT REF_289 to uint256
TMP_383(uint256) = TMP_382 * 100
TMP_384(uint256) = TMP_380 + TMP_383
TMP_385(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_291(uint8) -> TMP_385.day
TMP_386 = CONVERT REF_291 to uint256
TMP_387(uint256) = TMP_384 + TMP_386
_releaseIndex(uint256) := TMP_387(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
releaseRecords[_releaseIndex] = ReleaseRecord(releaseAmountPerDay,_releaseIndex)

IRs:
REF_292(Releaseable.ReleaseRecord) -> releaseRecords[_releaseIndex]
TMP_388(Releaseable.ReleaseRecord) = new ReleaseRecord(releaseAmountPerDay,_releaseIndex)
REF_292(Releaseable.ReleaseRecord) (->releaseRecords) := TMP_388(Releaseable.ReleaseRecord)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Release(owner,releaseAmountPerDay,sysAmount,timestamp)

IRs:
Emit Release(owner,releaseAmountPerDay,sysAmount,timestamp)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
systemFreeze(sysAmount.div(5),timestamp.add(15552000))

IRs:
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['sysAmount', '5'] 
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['timestamp', '15552000'] 
INTERNAL_CALL, Frozenable.systemFreeze(uint256,uint256)(TMP_390,TMP_391)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
systemFreeze(sysAmount.mul(6).div(10),timestamp.add(44150400000))

IRs:
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['sysAmount', '6'] 
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_393', '10'] 
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['timestamp', '44150400000'] 
INTERNAL_CALL, Frozenable.systemFreeze(uint256,uint256)(TMP_394,TMP_395)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
releaseAmountPerDay

IRs:
RETURN releaseAmountPerDay"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyOperator()

IRs:
MODIFIER_CALL, Operational.onlyOperator()()"];
14->1;
15[label="Node Type: RETURN 15

EXPRESSION:
_actualRelease

IRs:
RETURN _actualRelease"];
}
// Function: 10763.sol-Releaseable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mulDecimals = 100000000

IRs:
mulDecimals(uint256) := 100000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
standardReleaseAmount = mulDecimals.mul(512000)

IRs:
TMP_416(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['mulDecimals', '512000'] 
standardReleaseAmount(uint256) := TMP_416(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
releaseAmountPerDay = mulDecimals.mul(512000)

IRs:
TMP_417(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['mulDecimals', '512000'] 
releaseAmountPerDay(uint256) := TMP_417(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
releasedSupply = 0

IRs:
releasedSupply(uint256) := 0(uint256)"];
}
// Function: 10763.sol-Releaseable-systemFreeze(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
unfreezeIndex = uint256(_unfreezeTime.parseTimestamp().year) * 10000 + uint256(_unfreezeTime.parseTimestamp().month) * 100 + uint256(_unfreezeTime.parseTimestamp().day)

IRs:
TMP_287(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['_unfreezeTime'] 
REF_202(uint16) -> TMP_287.year
TMP_288 = CONVERT REF_202 to uint256
TMP_289(uint256) = TMP_288 * 10000
TMP_290(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['_unfreezeTime'] 
REF_204(uint8) -> TMP_290.month
TMP_291 = CONVERT REF_204 to uint256
TMP_292(uint256) = TMP_291 * 100
TMP_293(uint256) = TMP_289 + TMP_292
TMP_294(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['_unfreezeTime'] 
REF_206(uint8) -> TMP_294.day
TMP_295 = CONVERT REF_206 to uint256
TMP_296(uint256) = TMP_293 + TMP_295
unfreezeIndex(uint256) := TMP_296(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[owner] = balances[owner].sub(_value)

IRs:
REF_207(uint256) -> balances[owner]
REF_208(uint256) -> balances[owner]
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_208', '_value'] 
REF_207(uint256) (->balances) := TMP_297(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
frozenRecords[unfreezeIndex] = FrozenRecord({value:_value,unfreezeIndex:unfreezeIndex})

IRs:
REF_210(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
TMP_298(Frozenable.FrozenRecord) = new FrozenRecord(_value,unfreezeIndex)
REF_210(Frozenable.FrozenRecord) (->frozenRecords) := TMP_298(Frozenable.FrozenRecord)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
frozenBalance = frozenBalance.add(_value)

IRs:
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['frozenBalance', '_value'] 
frozenBalance(uint256) := TMP_299(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
SystemFreeze(owner,_value,_unfreezeTime)

IRs:
Emit SystemFreeze(owner,_value,_unfreezeTime)"];
}
// Function: 10763.sol-Releaseable-totalSupply()
digraph{
}
// Function: 10763.sol-Releaseable-transfer(address,uint256)
digraph{
}
// Function: 10763.sol-Releaseable-transferFrom(address,address,uint256)
digraph{
}
// Function: 10763.sol-Releaseable-transferOperator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOperator != address(0))

IRs:
TMP_346 = CONVERT 0 to address
TMP_347(bool) = newOperator != TMP_346
TMP_348(None) = SOLIDITY_CALL require(bool)(TMP_347)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operator = newOperator

IRs:
operator(address) := newOperator(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 10763.sol-Releaseable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_354 = CONVERT 0 to address
TMP_355(bool) = newOwner != TMP_354
TMP_356(None) = SOLIDITY_CALL require(bool)(TMP_355)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10763.sol-Releaseable-unfreeze(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(timestamp <= block.timestamp)

IRs:
TMP_301(bool) = timestamp <= block.timestamp
TMP_302(None) = SOLIDITY_CALL require(bool)(TMP_301)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
unfreezeIndex = uint256(timestamp.parseTimestamp().year) * 10000 + uint256(timestamp.parseTimestamp().month) * 100 + uint256(timestamp.parseTimestamp().day)

IRs:
TMP_303(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_213(uint16) -> TMP_303.year
TMP_304 = CONVERT REF_213 to uint256
TMP_305(uint256) = TMP_304 * 10000
TMP_306(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_215(uint8) -> TMP_306.month
TMP_307 = CONVERT REF_215 to uint256
TMP_308(uint256) = TMP_307 * 100
TMP_309(uint256) = TMP_305 + TMP_308
TMP_310(DateTime.MyDateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_217(uint8) -> TMP_310.day
TMP_311 = CONVERT REF_217 to uint256
TMP_312(uint256) = TMP_309 + TMP_311
unfreezeIndex(uint256) := TMP_312(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
frozenBalance = frozenBalance.sub(frozenRecords[unfreezeIndex].value)

IRs:
REF_219(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
REF_220(uint256) -> REF_219.value
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['frozenBalance', 'REF_220'] 
frozenBalance(uint256) := TMP_313(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[owner] = balances[owner].add(frozenRecords[unfreezeIndex].value)

IRs:
REF_221(uint256) -> balances[owner]
REF_222(uint256) -> balances[owner]
REF_224(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
REF_225(uint256) -> REF_224.value
TMP_314(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_222', 'REF_225'] 
REF_221(uint256) (->balances) := TMP_314(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
unfreezeAmount = frozenRecords[unfreezeIndex].value

IRs:
REF_226(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
REF_227(uint256) -> REF_226.value
unfreezeAmount(uint256) := REF_227(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Unfreeze(owner,unfreezeAmount,timestamp)

IRs:
Emit Unfreeze(owner,unfreezeAmount,timestamp)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
frozenRecords[unfreezeIndex].value = 0

IRs:
REF_228(Frozenable.FrozenRecord) -> frozenRecords[unfreezeIndex]
REF_229(uint256) -> REF_228.value
REF_229(uint256) (->frozenRecords) := 0(uint256)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
unfreezeAmount

IRs:
RETURN unfreezeAmount"];
9[label="Node Type: RETURN 9

EXPRESSION:
unfreezeAmount

IRs:
RETURN unfreezeAmount"];
}
// Function: 10763.sol-Releaseable-updateReleaseAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
timeElapse = timestamp.sub(createTime)

IRs:
TMP_409(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['timestamp', 'createTime'] 
timeElapse(uint256) := TMP_409(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
cycles = timeElapse.div(15552000)

IRs:
TMP_410(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['timeElapse', '15552000'] 
cycles(uint256) := TMP_410(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
cycles > 0

IRs:
TMP_411(bool) = cycles > 0
CONDITION TMP_411"];
3->4[label="True"];
3->14[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
cycles <= 10

IRs:
TMP_412(bool) = cycles <= 10
CONDITION TMP_412"];
4->5[label="True"];
4->12[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
releaseAmountPerDay = standardReleaseAmount

IRs:
releaseAmountPerDay(uint256) := standardReleaseAmount(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->13;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
index = 0

IRs:
index(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
index < cycles

IRs:
TMP_413(bool) = index < cycles
CONDITION TMP_413"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
releaseAmountPerDay = releaseAmountPerDay.div(2)

IRs:
TMP_414(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['releaseAmountPerDay', '2'] 
releaseAmountPerDay(uint256) := TMP_414(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
index ++

IRs:
TMP_415(uint256) := index(uint256)
index(uint256) = index + 1"];
11->9;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
releaseAmountPerDay = 0

IRs:
releaseAmountPerDay(uint256) := 0(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
}
// Function: 10763.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_118(uint256) = a + b
c(uint256) := TMP_118(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_119(bool) = c >= a
TMP_120(None) = SOLIDITY_CALL assert(bool)(TMP_119)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10763.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_114(uint256) = a / b
RETURN TMP_114"];
}
// Function: 10763.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_109(bool) = a == 0
CONDITION TMP_109"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_110(uint256) = a * b
c(uint256) := TMP_110(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_111(uint256) = c / a
TMP_112(bool) = TMP_111 == b
TMP_113(None) = SOLIDITY_CALL assert(bool)(TMP_112)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10763.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_115(bool) = b <= a
TMP_116(None) = SOLIDITY_CALL assert(bool)(TMP_115)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_117(uint256) = a - b
RETURN TMP_117"];
}
// Function: 10763.sol-StandardBurnableToken-allowance(address,address)
digraph{
}
// Function: 10763.sol-StandardBurnableToken-approve(address,uint256)
digraph{
}
// Function: 10763.sol-StandardBurnableToken-balanceOf(address)
digraph{
}
// Function: 10763.sol-StandardBurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_120(uint256) -> balances[msg.sender]
TMP_181(bool) = _value <= REF_120
TMP_182(None) = SOLIDITY_CALL require(bool)(TMP_181)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_121(uint256) -> balances[burner]
REF_122(uint256) -> balances[burner]
TMP_183(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_122', '_value'] 
REF_121(uint256) (->balances) := TMP_183(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_184(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_184(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-StandardBurnableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_103(mapping(address => uint256)) -> allowed[msg.sender]
REF_104(uint256) -> REF_103[_spender]
oldValue(uint256) := REF_104(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_170(bool) = _subtractedValue > oldValue
CONDITION TMP_170"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_105(mapping(address => uint256)) -> allowed[msg.sender]
REF_106(uint256) -> REF_105[_spender]
REF_106(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_107(mapping(address => uint256)) -> allowed[msg.sender]
REF_108(uint256) -> REF_107[_spender]
TMP_171(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_108(uint256) (->allowed) := TMP_171(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_110(mapping(address => uint256)) -> allowed[msg.sender]
REF_111(uint256) -> REF_110[_spender]
Emit Approval(msg.sender,_spender,REF_111)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-StandardBurnableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_96(mapping(address => uint256)) -> allowed[msg.sender]
REF_97(uint256) -> REF_96[_spender]
REF_98(mapping(address => uint256)) -> allowed[msg.sender]
REF_99(uint256) -> REF_98[_spender]
TMP_168(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_99', '_addedValue'] 
REF_97(uint256) (->allowed) := TMP_168(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_101(mapping(address => uint256)) -> allowed[msg.sender]
REF_102(uint256) -> REF_101[_spender]
Emit Approval(msg.sender,_spender,REF_102)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-StandardBurnableToken-totalSupply()
digraph{
}
// Function: 10763.sol-StandardBurnableToken-transfer(address,uint256)
digraph{
}
// Function: 10763.sol-StandardBurnableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 10763.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_60(mapping(address => uint256)) -> allowed[_owner]
REF_61(uint256) -> REF_60[_spender]
RETURN REF_61"];
}
// Function: 10763.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_58(mapping(address => uint256)) -> allowed[msg.sender]
REF_59(uint256) -> REF_58[_spender]
REF_59(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 10763.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_69(mapping(address => uint256)) -> allowed[msg.sender]
REF_70(uint256) -> REF_69[_spender]
oldValue(uint256) := REF_70(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_151(bool) = _subtractedValue > oldValue
CONDITION TMP_151"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_71(mapping(address => uint256)) -> allowed[msg.sender]
REF_72(uint256) -> REF_71[_spender]
REF_72(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_74(uint256) (->allowed) := TMP_152(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_76(mapping(address => uint256)) -> allowed[msg.sender]
REF_77(uint256) -> REF_76[_spender]
Emit Approval(msg.sender,_spender,REF_77)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_62(mapping(address => uint256)) -> allowed[msg.sender]
REF_63(uint256) -> REF_62[_spender]
REF_64(mapping(address => uint256)) -> allowed[msg.sender]
REF_65(uint256) -> REF_64[_spender]
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_65', '_addedValue'] 
REF_63(uint256) (->allowed) := TMP_149(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_67(mapping(address => uint256)) -> allowed[msg.sender]
REF_68(uint256) -> REF_67[_spender]
Emit Approval(msg.sender,_spender,REF_68)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10763.sol-StandardToken-totalSupply()
digraph{
}
// Function: 10763.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 10763.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_137 = CONVERT 0 to address
TMP_138(bool) = _to != TMP_137
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_44(uint256) -> balances[_from]
TMP_140(bool) = _value <= REF_44
TMP_141(None) = SOLIDITY_CALL require(bool)(TMP_140)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_45(mapping(address => uint256)) -> allowed[_from]
REF_46(uint256) -> REF_45[msg.sender]
TMP_142(bool) = _value <= REF_46
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_47(uint256) -> balances[_from]
REF_48(uint256) -> balances[_from]
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_48', '_value'] 
REF_47(uint256) (->balances) := TMP_144(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_50(uint256) -> balances[_to]
REF_51(uint256) -> balances[_to]
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_51', '_value'] 
REF_50(uint256) (->balances) := TMP_145(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_53(mapping(address => uint256)) -> allowed[_from]
REF_54(uint256) -> REF_53[msg.sender]
REF_55(mapping(address => uint256)) -> allowed[_from]
REF_56(uint256) -> REF_55[msg.sender]
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_56', '_value'] 
REF_54(uint256) (->allowed) := TMP_146(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
