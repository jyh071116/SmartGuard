digraph G {
// Function: 10782.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 10782.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 10782.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 10782.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10782.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10782.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10782.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10782.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 10782.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 10782.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 10782.sol-TokenDistributor-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10782.sol-TokenDistributor-_setStakeHolder(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(countStakeHolders() < maxStakeHolders,Max StakeHolders set)

IRs:
TMP_45(uint256) = INTERNAL_CALL, TokenDistributor.countStakeHolders()()
TMP_46(bool) = TMP_45 < maxStakeHolders
TMP_47(None) = SOLIDITY_CALL require(bool,string)(TMP_46,Max StakeHolders set)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
stakeHolders.push(_stakeHolder)

IRs:
REF_9 -> LENGTH stakeHolders
TMP_49(uint256) := REF_9(uint256)
TMP_50(uint256) = TMP_49 + 1
REF_9(uint256) (->stakeHolders) := TMP_50(uint256)
REF_10(address) -> stakeHolders[TMP_49]
REF_10(address) (->stakeHolders) := _stakeHolder(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10782.sol-TokenDistributor-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
token = ERC20Basic(_token)

IRs:
TMP_52 = CONVERT _token to ERC20Basic
token(ERC20Basic) := TMP_52(ERC20Basic)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.transfer(_recipient,_value)

IRs:
TMP_53(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['_recipient', '_value']  "];
}
// Function: 10782.sol-TokenDistributor-constructor(address,uint256,address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setTargetToken(_targetToken)

IRs:
TMP_24(bool) = INTERNAL_CALL, TokenDistributor.setTargetToken(address)(_targetToken)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
maxStakeHolders = _totalStakeHolders

IRs:
maxStakeHolders(uint256) := _totalStakeHolders(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_stakeHolders.length > 0

IRs:
REF_0 -> LENGTH _stakeHolders
TMP_25(bool) = REF_0 > 0
CONDITION TMP_25"];
3->6[label="True"];
3->12[label="False"];
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->12;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
count < _stakeHolders.length && count < _totalStakeHolders

IRs:
REF_1 -> LENGTH _stakeHolders
TMP_26(bool) = count < REF_1
TMP_27(bool) = count < _totalStakeHolders
TMP_28(bool) = TMP_26 && TMP_27
CONDITION TMP_28"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
_stakeHolders[count] != 0x0

IRs:
REF_2(address) -> _stakeHolders[count]
TMP_29(bool) = REF_2 != 0
CONDITION TMP_29"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_setStakeHolder(_stakeHolders[count])

IRs:
REF_3(address) -> _stakeHolders[count]
TMP_30(bool) = INTERNAL_CALL, TokenDistributor._setStakeHolder(address)(REF_3)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
count ++

IRs:
TMP_31(uint256) := count(uint256)
count(uint256) = count + 1"];
11->7;
12[label="Node Type: END_IF 12
"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Ownable()

IRs:
INTERNAL_CALL, Ownable.Ownable()()"];
13->1;
}
// Function: 10782.sol-TokenDistributor-countStakeHolders()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
stakeHolders.length

IRs:
REF_4 -> LENGTH stakeHolders
RETURN REF_4"];
}
// Function: 10782.sol-TokenDistributor-distribute(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balance = getTokenBalance(_token)

IRs:
TMP_54(uint256) = INTERNAL_CALL, TokenDistributor.getTokenBalance(address)(_token)
balance(uint256) := TMP_54(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
perStakeHolder = getPortion(balance)

IRs:
TMP_55(uint256) = INTERNAL_CALL, TokenDistributor.getPortion(uint256)(balance)
perStakeHolder(uint256) := TMP_55(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
balance < 1

IRs:
TMP_56(bool) = balance < 1
CONDITION TMP_56"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
InsufficientTokenBalance(_token,block.timestamp)

IRs:
Emit InsufficientTokenBalance(_token,block.timestamp)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
count < stakeHolders.length

IRs:
REF_12 -> LENGTH stakeHolders
TMP_58(bool) = count < REF_12
CONDITION TMP_58"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_transfer(_token,stakeHolders[count],perStakeHolder)

IRs:
REF_13(address) -> stakeHolders[count]
INTERNAL_CALL, TokenDistributor._transfer(address,address,uint256)(_token,REF_13,perStakeHolder)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
count ++

IRs:
TMP_60(uint256) := count(uint256)
count(uint256) = count + 1"];
11->9;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
newBalance = getTokenBalance(_token)

IRs:
TMP_61(uint256) = INTERNAL_CALL, TokenDistributor.getTokenBalance(address)(_token)
newBalance(uint256) := TMP_61(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
newBalance > 0 && getPortion(newBalance) == 0

IRs:
TMP_62(bool) = newBalance > 0
TMP_63(uint256) = INTERNAL_CALL, TokenDistributor.getPortion(uint256)(newBalance)
TMP_64(bool) = TMP_63 == 0
TMP_65(bool) = TMP_62 && TMP_64
CONDITION TMP_65"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_transfer(_token,owner,newBalance)

IRs:
INTERNAL_CALL, TokenDistributor._transfer(address,address,uint256)(_token,owner,newBalance)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
TokensDistributed(_token,balance,block.timestamp)

IRs:
Emit TokensDistributed(_token,balance,block.timestamp)"];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10782.sol-TokenDistributor-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
distribute(targetToken)

IRs:
TMP_68(bool) = INTERNAL_CALL, TokenDistributor.distribute(address)(targetToken)"];
}
// Function: 10782.sol-TokenDistributor-getPortion(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_total.div(stakeHolders.length)

IRs:
REF_7 -> LENGTH stakeHolders
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_total', 'REF_7'] 
RETURN TMP_40"];
}
// Function: 10782.sol-TokenDistributor-getTokenBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
token = ERC20Basic(_token)

IRs:
TMP_37 = CONVERT _token to ERC20Basic
token(ERC20Basic) := TMP_37(ERC20Basic)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
token.balanceOf(address(this))

IRs:
TMP_38 = CONVERT this to address
TMP_39(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:balanceOf, arguments:['TMP_38']  
RETURN TMP_39"];
}
// Function: 10782.sol-TokenDistributor-isDistributionDue()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
getTokenBalance(targetToken) > 1

IRs:
TMP_35(uint256) = INTERNAL_CALL, TokenDistributor.getTokenBalance(address)(targetToken)
TMP_36(bool) = TMP_35 > 1
RETURN TMP_36"];
}
// Function: 10782.sol-TokenDistributor-isDistributionDue(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
getTokenBalance(_token) > 1

IRs:
TMP_33(uint256) = INTERNAL_CALL, TokenDistributor.getTokenBalance(address)(_token)
TMP_34(bool) = TMP_33 > 1
RETURN TMP_34"];
}
// Function: 10782.sol-TokenDistributor-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_69(bool) = msg.sender == owner
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10782.sol-TokenDistributor-setTargetToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_targetToken != 0x0 && targetToken == 0x0

IRs:
TMP_41(bool) = _targetToken != 0
TMP_42(bool) = targetToken == 0
TMP_43(bool) = TMP_41 && TMP_42
CONDITION TMP_43"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
targetToken = _targetToken

IRs:
targetToken(address) := _targetToken(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 10782.sol-TokenDistributor-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = newOwner != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10782.sol-WeightedTokenDistributor-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 10782.sol-WeightedTokenDistributor-_setStakeHolder(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert(string)(Kindly set Weights for stakeHolder)

IRs:
TMP_138(None) = SOLIDITY_CALL revert(string)(Kindly set Weights for stakeHolder)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 10782.sol-WeightedTokenDistributor-_setStakeHolder(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stakeHoldersWeight[_stakeHolder] = _weight

IRs:
REF_40(uint256) -> stakeHoldersWeight[_stakeHolder]
REF_40(uint256) (->stakeHoldersWeight) := _weight(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(super._setStakeHolder(_stakeHolder))

IRs:
TMP_135(bool) = INTERNAL_CALL, TokenDistributor._setStakeHolder(address)(_stakeHolder)
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 10782.sol-WeightedTokenDistributor-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
token = ERC20Basic(_token)

IRs:
TMP_99 = CONVERT _token to ERC20Basic
token(ERC20Basic) := TMP_99(ERC20Basic)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.transfer(_recipient,_value)

IRs:
TMP_100(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['_recipient', '_value']  "];
}
// Function: 10782.sol-WeightedTokenDistributor-constructor(address,uint256,address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setTargetToken(_targetToken)

IRs:
TMP_71(bool) = INTERNAL_CALL, TokenDistributor.setTargetToken(address)(_targetToken)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
maxStakeHolders = _totalStakeHolders

IRs:
maxStakeHolders(uint256) := _totalStakeHolders(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_stakeHolders.length > 0

IRs:
REF_14 -> LENGTH _stakeHolders
TMP_72(bool) = REF_14 > 0
CONDITION TMP_72"];
3->6[label="True"];
3->12[label="False"];
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->12;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
count < _stakeHolders.length && count < _totalStakeHolders

IRs:
REF_15 -> LENGTH _stakeHolders
TMP_73(bool) = count < REF_15
TMP_74(bool) = count < _totalStakeHolders
TMP_75(bool) = TMP_73 && TMP_74
CONDITION TMP_75"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
_stakeHolders[count] != 0x0

IRs:
REF_16(address) -> _stakeHolders[count]
TMP_76(bool) = REF_16 != 0
CONDITION TMP_76"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_setStakeHolder(_stakeHolders[count])

IRs:
REF_17(address) -> _stakeHolders[count]
TMP_77(bool) = INTERNAL_CALL, WeightedTokenDistributor._setStakeHolder(address)(REF_17)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
count ++

IRs:
TMP_78(uint256) := count(uint256)
count(uint256) = count + 1"];
11->7;
12[label="Node Type: END_IF 12
"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Ownable()

IRs:
INTERNAL_CALL, Ownable.Ownable()()"];
13->1;
}
// Function: 10782.sol-WeightedTokenDistributor-constructor(address,uint256,address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: IF 1

EXPRESSION:
_stakeHolders.length > 0

IRs:
REF_28 -> LENGTH _stakeHolders
TMP_121(bool) = REF_28 > 0
CONDITION TMP_121"];
1->4[label="True"];
1->10[label="False"];
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
count < _stakeHolders.length && count < _totalStakeHolders

IRs:
REF_29 -> LENGTH _stakeHolders
TMP_122(bool) = count < REF_29
TMP_123(bool) = count < _totalStakeHolders
TMP_124(bool) = TMP_122 && TMP_123
CONDITION TMP_124"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
_stakeHolders[count] != 0x0

IRs:
REF_30(address) -> _stakeHolders[count]
TMP_125(bool) = REF_30 != 0
CONDITION TMP_125"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_setStakeHolder(_stakeHolders[count],_weights[count])

IRs:
REF_31(address) -> _stakeHolders[count]
REF_32(uint256) -> _weights[count]
TMP_126(bool) = INTERNAL_CALL, WeightedTokenDistributor._setStakeHolder(address,uint256)(REF_31,REF_32)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
count ++

IRs:
TMP_127(uint256) := count(uint256)
count(uint256) = count + 1"];
9->5;
10[label="Node Type: END_IF 10
"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
TokenDistributor(_targetToken,_totalStakeHolders,stakeHolders)

IRs:
INTERNAL_CALL, TokenDistributor.constructor(address,uint256,address[])(_targetToken,_totalStakeHolders,stakeHolders)"];
11->1;
}
// Function: 10782.sol-WeightedTokenDistributor-countStakeHolders()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
stakeHolders.length

IRs:
REF_18 -> LENGTH stakeHolders
RETURN REF_18"];
}
// Function: 10782.sol-WeightedTokenDistributor-distribute(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balance = getTokenBalance(_token)

IRs:
TMP_140(uint256) = INTERNAL_CALL, TokenDistributor.getTokenBalance(address)(_token)
balance(uint256) := TMP_140(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalWeight = getTotalWeight()

IRs:
TMP_141(uint256) = INTERNAL_CALL, WeightedTokenDistributor.getTotalWeight()()
totalWeight(uint256) := TMP_141(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
balance < 1

IRs:
TMP_142(bool) = balance < 1
CONDITION TMP_142"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
InsufficientTokenBalance(_token,block.timestamp)

IRs:
Emit InsufficientTokenBalance(_token,block.timestamp)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->13;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
count < stakeHolders.length

IRs:
REF_41 -> LENGTH stakeHolders
TMP_144(bool) = count < REF_41
CONDITION TMP_144"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
perStakeHolder = getPortion(balance,totalWeight,stakeHolders[count])

IRs:
REF_42(address) -> stakeHolders[count]
TMP_145(uint256) = INTERNAL_CALL, WeightedTokenDistributor.getPortion(uint256,uint256,address)(balance,totalWeight,REF_42)
perStakeHolder(uint256) := TMP_145(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_transfer(_token,stakeHolders[count],perStakeHolder)

IRs:
REF_43(address) -> stakeHolders[count]
INTERNAL_CALL, TokenDistributor._transfer(address,address,uint256)(_token,REF_43,perStakeHolder)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
count ++

IRs:
TMP_147(uint256) := count(uint256)
count(uint256) = count + 1"];
12->9;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
newBalance = getTokenBalance(_token)

IRs:
TMP_148(uint256) = INTERNAL_CALL, TokenDistributor.getTokenBalance(address)(_token)
newBalance(uint256) := TMP_148(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
newBalance > 0

IRs:
TMP_149(bool) = newBalance > 0
CONDITION TMP_149"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_transfer(_token,owner,newBalance)

IRs:
INTERNAL_CALL, TokenDistributor._transfer(address,address,uint256)(_token,owner,newBalance)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
TokensDistributed(_token,balance,block.timestamp)

IRs:
Emit TokensDistributed(_token,balance,block.timestamp)"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 10782.sol-WeightedTokenDistributor-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
distribute(targetToken)

IRs:
TMP_115(bool) = INTERNAL_CALL, WeightedTokenDistributor.distribute(address)(targetToken)"];
}
// Function: 10782.sol-WeightedTokenDistributor-getPortion(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert(string)(Kindly indicate stakeHolder and totalWeight)

IRs:
TMP_134(None) = SOLIDITY_CALL revert(string)(Kindly indicate stakeHolder and totalWeight)"];
}
// Function: 10782.sol-WeightedTokenDistributor-getPortion(uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
weight = stakeHoldersWeight[_stakeHolder]

IRs:
REF_37(uint256) -> stakeHoldersWeight[_stakeHolder]
weight(uint256) := REF_37(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_total.mul(weight)).div(_totalWeight)

IRs:
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_total', 'weight'] 
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_132', '_totalWeight'] 
RETURN TMP_133"];
}
// Function: 10782.sol-WeightedTokenDistributor-getTokenBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
token = ERC20Basic(_token)

IRs:
TMP_84 = CONVERT _token to ERC20Basic
token(ERC20Basic) := TMP_84(ERC20Basic)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
token.balanceOf(address(this))

IRs:
TMP_85 = CONVERT this to address
TMP_86(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:balanceOf, arguments:['TMP_85']  
RETURN TMP_86"];
}
// Function: 10782.sol-WeightedTokenDistributor-getTotalWeight()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
count < stakeHolders.length

IRs:
REF_33 -> LENGTH stakeHolders
TMP_129(bool) = count < REF_33
CONDITION TMP_129"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_total = _total.add(stakeHoldersWeight[stakeHolders[count]])

IRs:
REF_35(address) -> stakeHolders[count]
REF_36(uint256) -> stakeHoldersWeight[REF_35]
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_total', 'REF_36'] 
_total(uint256) := TMP_130(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count ++

IRs:
TMP_131(uint256) := count(uint256)
count(uint256) = count + 1"];
6->4;
7[label="Node Type: RETURN 7

EXPRESSION:
_total

IRs:
RETURN _total"];
}
// Function: 10782.sol-WeightedTokenDistributor-isDistributionDue()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
getTokenBalance(targetToken) > 1

IRs:
TMP_82(uint256) = INTERNAL_CALL, TokenDistributor.getTokenBalance(address)(targetToken)
TMP_83(bool) = TMP_82 > 1
RETURN TMP_83"];
}
// Function: 10782.sol-WeightedTokenDistributor-isDistributionDue(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
getTokenBalance(_token) > 1

IRs:
TMP_80(uint256) = INTERNAL_CALL, TokenDistributor.getTokenBalance(address)(_token)
TMP_81(bool) = TMP_80 > 1
RETURN TMP_81"];
}
// Function: 10782.sol-WeightedTokenDistributor-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_152(bool) = msg.sender == owner
TMP_153(None) = SOLIDITY_CALL require(bool)(TMP_152)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 10782.sol-WeightedTokenDistributor-setTargetToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_targetToken != 0x0 && targetToken == 0x0

IRs:
TMP_88(bool) = _targetToken != 0
TMP_89(bool) = targetToken == 0
TMP_90(bool) = TMP_88 && TMP_89
CONDITION TMP_90"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
targetToken = _targetToken

IRs:
targetToken(address) := _targetToken(address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 10782.sol-WeightedTokenDistributor-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_116 = CONVERT 0 to address
TMP_117(bool) = newOwner != TMP_116
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
}
