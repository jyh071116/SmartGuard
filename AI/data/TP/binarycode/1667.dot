digraph G {
// Function: 1667.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1667.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1667.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1667.sol-ERC20-decimals()
digraph{
}
// Function: 1667.sol-ERC20-totalSupply()
digraph{
}
// Function: 1667.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1667.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1667.sol-JobsBounty-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_30 = CONVERT 0 to address
TMP_31(bool) = _newOwner != TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1667.sol-JobsBounty-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1667.sol-JobsBounty-constructor(string,string,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
companyName = _companyName

IRs:
companyName(string) := _companyName(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
jobPost = _jobPost

IRs:
jobPost(string) := _jobPost(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
endDate = _endDate

IRs:
endDate(uint256) := _endDate(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
INDToken = _INDToken

IRs:
INDToken(address) := _INDToken(address)"];
}
// Function: 1667.sol-JobsBounty-nonReentrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(reentrancyLock == REENTRANCY_GUARD_FREE)

IRs:
TMP_74(bool) = reentrancyLock == REENTRANCY_GUARD_FREE
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reentrancyLock = REENTRANCY_GUARD_LOCKED

IRs:
reentrancyLock(uint256) := REENTRANCY_GUARD_LOCKED(uint256)"];
2->3;
3[label="Node Type: _ 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reentrancyLock = REENTRANCY_GUARD_FREE

IRs:
reentrancyLock(uint256) := REENTRANCY_GUARD_FREE(uint256)"];
}
// Function: 1667.sol-JobsBounty-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_76(bool) = msg.sender == owner
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1667.sol-JobsBounty-ownBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
SafeMath.div(ERC20(INDToken).balanceOf(this),1000000000000000000)

IRs:
TMP_34 = CONVERT INDToken to ERC20
TMP_35(uint256) = HIGH_LEVEL_CALL, dest:TMP_34(ERC20), function:balanceOf, arguments:['this']  
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_35', '1000000000000000000'] 
RETURN TMP_36"];
}
// Function: 1667.sol-JobsBounty-payOutBounty(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(block.timestamp >= endDate)

IRs:
TMP_37(bool) = block.timestamp >= endDate
TMP_38(None) = SOLIDITY_CALL assert(bool)(TMP_37)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_referrerAddress != address(0x0))

IRs:
TMP_39 = CONVERT 0 to address
TMP_40(bool) = _referrerAddress != TMP_39
TMP_41(None) = SOLIDITY_CALL assert(bool)(TMP_40)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(_candidateAddress != address(0x0))

IRs:
TMP_42 = CONVERT 0 to address
TMP_43(bool) = _candidateAddress != TMP_42
TMP_44(None) = SOLIDITY_CALL assert(bool)(TMP_43)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
individualAmounts = SafeMath.mul(SafeMath.div((ERC20(INDToken).balanceOf(this)),100),50)

IRs:
TMP_45 = CONVERT INDToken to ERC20
TMP_46(uint256) = HIGH_LEVEL_CALL, dest:TMP_45(ERC20), function:balanceOf, arguments:['this']  
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_46', '100'] 
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_47', '50'] 
individualAmounts(uint256) := TMP_48(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(ERC20(INDToken).transfer(_candidateAddress,individualAmounts))

IRs:
TMP_49 = CONVERT INDToken to ERC20
TMP_50(bool) = HIGH_LEVEL_CALL, dest:TMP_49(ERC20), function:transfer, arguments:['_candidateAddress', 'individualAmounts']  
TMP_51(None) = SOLIDITY_CALL assert(bool)(TMP_50)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(ERC20(INDToken).transfer(_referrerAddress,individualAmounts))

IRs:
TMP_52 = CONVERT INDToken to ERC20
TMP_53(bool) = HIGH_LEVEL_CALL, dest:TMP_52(ERC20), function:transfer, arguments:['_referrerAddress', 'individualAmounts']  
TMP_54(None) = SOLIDITY_CALL assert(bool)(TMP_53)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
9->1;
}
// Function: 1667.sol-JobsBounty-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_26 = CONVERT 0 to address
owner(address) := TMP_26(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1667.sol-JobsBounty-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1667.sol-JobsBounty-withdrawERC20Token(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(block.timestamp >= endDate)

IRs:
TMP_57(bool) = block.timestamp >= endDate
TMP_58(None) = SOLIDITY_CALL assert(bool)(TMP_57)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(ERC20(anyToken).transfer(owner,ERC20(anyToken).balanceOf(this)))

IRs:
TMP_59 = CONVERT anyToken to ERC20
TMP_60 = CONVERT anyToken to ERC20
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:TMP_60(ERC20), function:balanceOf, arguments:['this']  
TMP_62(bool) = HIGH_LEVEL_CALL, dest:TMP_59(ERC20), function:transfer, arguments:['owner', 'TMP_61']  
TMP_63(None) = SOLIDITY_CALL assert(bool)(TMP_62)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
5->1;
}
// Function: 1667.sol-JobsBounty-withdrawEther()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
address(this).balance > 0

IRs:
TMP_66 = CONVERT this to address
TMP_67(uint256) = SOLIDITY_CALL balance(address)(TMP_66)
TMP_68(bool) = TMP_67 > 0
CONDITION TMP_68"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_69 = CONVERT this to address
TMP_70(uint256) = SOLIDITY_CALL balance(address)(TMP_69)
Transfer dest:owner value:TMP_70"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
6->1;
}
// Function: 1667.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = _newOwner != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1667.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1667.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_23(bool) = msg.sender == owner
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1667.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_15 = CONVERT 0 to address
owner(address) := TMP_15(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1667.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1667.sol-ReentrancyGuard-nonReentrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(reentrancyLock == REENTRANCY_GUARD_FREE)

IRs:
TMP_0(bool) = reentrancyLock == REENTRANCY_GUARD_FREE
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reentrancyLock = REENTRANCY_GUARD_LOCKED

IRs:
reentrancyLock(uint256) := REENTRANCY_GUARD_LOCKED(uint256)"];
2->3;
3[label="Node Type: _ 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reentrancyLock = REENTRANCY_GUARD_FREE

IRs:
reentrancyLock(uint256) := REENTRANCY_GUARD_FREE(uint256)"];
}
// Function: 1667.sol-ReentrancyGuard-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
REENTRANCY_GUARD_FREE = 1

IRs:
REENTRANCY_GUARD_FREE(uint256) := 1(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
REENTRANCY_GUARD_LOCKED = 2

IRs:
REENTRANCY_GUARD_LOCKED(uint256) := 2(uint256)"];
}
// Function: 1667.sol-ReentrancyGuard-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
reentrancyLock = REENTRANCY_GUARD_FREE

IRs:
reentrancyLock(uint256) := REENTRANCY_GUARD_FREE(uint256)"];
}
// Function: 1667.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = _a + _b

IRs:
TMP_11(uint256) = _a + _b
c(uint256) := TMP_11(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= _a)

IRs:
TMP_12(bool) = c >= _a
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1667.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_a / _b

IRs:
TMP_7(uint256) = _a / _b
RETURN TMP_7"];
}
// Function: 1667.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a == 0

IRs:
TMP_2(bool) = _a == 0
CONDITION TMP_2"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = _a * _b

IRs:
TMP_3(uint256) = _a * _b
c(uint256) := TMP_3(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / _a == _b)

IRs:
TMP_4(uint256) = c / _a
TMP_5(bool) = TMP_4 == _b
TMP_6(None) = SOLIDITY_CALL assert(bool)(TMP_5)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1667.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_b <= _a)

IRs:
TMP_8(bool) = _b <= _a
TMP_9(None) = SOLIDITY_CALL assert(bool)(TMP_8)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_a - _b

IRs:
TMP_10(uint256) = _a - _b
RETURN TMP_10"];
}
}
