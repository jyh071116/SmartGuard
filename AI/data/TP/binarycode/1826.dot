digraph G {
// Function: 1826.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 1826.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 1826.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 1826.sol-ERC20-decimals()
digraph{
}
// Function: 1826.sol-ERC20-totalSupply()
digraph{
}
// Function: 1826.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 1826.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 1826.sol-JobsBounty-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_30 = CONVERT 0 to address
TMP_31(bool) = _newOwner != TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1826.sol-JobsBounty-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1826.sol-JobsBounty-constructor(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
companyName = _companyName

IRs:
companyName(string) := _companyName(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
jobPost = _jobPost

IRs:
jobPost(string) := _jobPost(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
endDate = _endDate

IRs:
endDate(uint256) := _endDate(uint256)"];
}
// Function: 1826.sol-JobsBounty-nonReentrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! reentrancyLock)

IRs:
TMP_66 = UnaryType.BANG reentrancyLock 
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reentrancyLock = true

IRs:
reentrancyLock(bool) := True(bool)"];
2->3;
3[label="Node Type: _ 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reentrancyLock = false

IRs:
reentrancyLock(bool) := False(bool)"];
}
// Function: 1826.sol-JobsBounty-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_68(bool) = msg.sender == owner
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1826.sol-JobsBounty-ownBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20(INDToken).balanceOf(this)

IRs:
TMP_34 = CONVERT INDToken to ERC20
TMP_35(uint256) = HIGH_LEVEL_CALL, dest:TMP_34(ERC20), function:balanceOf, arguments:['this']  
RETURN TMP_35"];
}
// Function: 1826.sol-JobsBounty-payOutBounty(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
individualAmounts = (ERC20(INDToken).balanceOf(this) / 100) * 50

IRs:
TMP_36 = CONVERT INDToken to ERC20
TMP_37(uint256) = HIGH_LEVEL_CALL, dest:TMP_36(ERC20), function:balanceOf, arguments:['this']  
TMP_38(uint256) = TMP_37 / 100
TMP_39(uint256) = TMP_38 * 50
individualAmounts(uint256) := TMP_39(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(block.timestamp >= endDate)

IRs:
TMP_40(bool) = block.timestamp >= endDate
TMP_41(None) = SOLIDITY_CALL assert(bool)(TMP_40)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(ERC20(INDToken).transfer(_candidateAddress,individualAmounts))

IRs:
TMP_42 = CONVERT INDToken to ERC20
TMP_43(bool) = HIGH_LEVEL_CALL, dest:TMP_42(ERC20), function:transfer, arguments:['_candidateAddress', 'individualAmounts']  
TMP_44(None) = SOLIDITY_CALL assert(bool)(TMP_43)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(ERC20(INDToken).transfer(_referrerAddress,individualAmounts))

IRs:
TMP_45 = CONVERT INDToken to ERC20
TMP_46(bool) = HIGH_LEVEL_CALL, dest:TMP_45(ERC20), function:transfer, arguments:['_referrerAddress', 'individualAmounts']  
TMP_47(None) = SOLIDITY_CALL assert(bool)(TMP_46)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
7->1;
}
// Function: 1826.sol-JobsBounty-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_26 = CONVERT 0 to address
owner(address) := TMP_26(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1826.sol-JobsBounty-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
INDToken = 0xf8e386eda857484f5a12e4b5daa9984e06e73705

IRs:
INDToken(address) := 1420903734241377969337365967965629770822274463493(uint256)"];
}
// Function: 1826.sol-JobsBounty-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1826.sol-JobsBounty-withdrawERC20Token(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(block.timestamp >= endDate)

IRs:
TMP_50(bool) = block.timestamp >= endDate
TMP_51(None) = SOLIDITY_CALL assert(bool)(TMP_50)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(ERC20(anyToken).transfer(owner,ERC20(anyToken).balanceOf(this)))

IRs:
TMP_52 = CONVERT anyToken to ERC20
TMP_53 = CONVERT anyToken to ERC20
TMP_54(uint256) = HIGH_LEVEL_CALL, dest:TMP_53(ERC20), function:balanceOf, arguments:['this']  
TMP_55(bool) = HIGH_LEVEL_CALL, dest:TMP_52(ERC20), function:transfer, arguments:['owner', 'TMP_54']  
TMP_56(None) = SOLIDITY_CALL assert(bool)(TMP_55)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
5->1;
}
// Function: 1826.sol-JobsBounty-withdrawEther()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
address(this).balance > 0

IRs:
TMP_59 = CONVERT this to address
TMP_60(uint256) = SOLIDITY_CALL balance(address)(TMP_59)
TMP_61(bool) = TMP_60 > 0
CONDITION TMP_61"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_62 = CONVERT this to address
TMP_63(uint256) = SOLIDITY_CALL balance(address)(TMP_62)
Transfer dest:owner value:TMP_63"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
5->1;
}
// Function: 1826.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = _newOwner != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 1826.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1826.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_23(bool) = msg.sender == owner
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1826.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_15 = CONVERT 0 to address
owner(address) := TMP_15(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 1826.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 1826.sol-ReentrancyGuard-nonReentrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! reentrancyLock)

IRs:
TMP_0 = UnaryType.BANG reentrancyLock 
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reentrancyLock = true

IRs:
reentrancyLock(bool) := True(bool)"];
2->3;
3[label="Node Type: _ 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reentrancyLock = false

IRs:
reentrancyLock(bool) := False(bool)"];
}
// Function: 1826.sol-ReentrancyGuard-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
reentrancyLock = false

IRs:
reentrancyLock(bool) := False(bool)"];
}
// Function: 1826.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_11(uint256) = a + b
c(uint256) := TMP_11(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_12(bool) = c >= a
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1826.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_7(uint256) = a / b
RETURN TMP_7"];
}
// Function: 1826.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_2(bool) = a == 0
CONDITION TMP_2"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_3(uint256) = a * b
c(uint256) := TMP_3(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_4(uint256) = c / a
TMP_5(bool) = TMP_4 == b
TMP_6(None) = SOLIDITY_CALL assert(bool)(TMP_5)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1826.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_8(bool) = b <= a
TMP_9(None) = SOLIDITY_CALL assert(bool)(TMP_8)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_10(uint256) = a - b
RETURN TMP_10"];
}
}
