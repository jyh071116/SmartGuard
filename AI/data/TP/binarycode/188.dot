digraph G {
// Function: 188.sol-Duang8-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only admin can activate)

IRs:
TMP_455(bool) = msg.sender == admin
TMP_456(None) = SOLIDITY_CALL require(bool,string)(TMP_455,only admin can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,FOMO Short already activated)

IRs:
TMP_457(bool) = activated_ == False
TMP_458(None) = SOLIDITY_CALL require(bool,string)(TMP_457,FOMO Short already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_720(F3Ddatasets.Round) -> round_[1]
REF_721(uint256) -> REF_720.strt
TMP_459(uint256) = now + rndExtra_
TMP_460(uint256) = TMP_459 - rndGap_
REF_721(uint256) (->round_) := TMP_460(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_722(F3Ddatasets.Round) -> round_[1]
REF_723(uint256) -> REF_722.end
TMP_461(uint256) = now + rndInit_
TMP_462(uint256) = TMP_461 + rndExtra_
REF_723(uint256) (->round_) := TMP_462(uint256)"];
}
// Function: 188.sol-Duang8-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_348(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_349(bytes32) = SOLIDITY_CALL keccak256()(TMP_348)
TMP_350 = CONVERT TMP_349 to uint256
TMP_351(uint256) = TMP_350 / now
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_347', 'TMP_351'] 
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_352', 'block.gaslimit'] 
TMP_354(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_355(bytes32) = SOLIDITY_CALL keccak256()(TMP_354)
TMP_356 = CONVERT TMP_355 to uint256
TMP_357(uint256) = TMP_356 / now
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_353', 'TMP_357'] 
TMP_359(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_358', 'block.number'] 
TMP_360(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_359)
TMP_361(bytes32) = SOLIDITY_CALL keccak256()(TMP_360)
TMP_362 = CONVERT TMP_361 to uint256
seed(uint256) := TMP_362(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_363(uint256) = seed / 1000
TMP_364(uint256) = TMP_363 * 1000
TMP_365(uint256) = seed - TMP_364
TMP_366(bool) = TMP_365 < airDropTracker_
CONDITION TMP_366"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 188.sol-Duang8-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_265(F3Ddatasets.Round) -> round_[_rID]
REF_266(uint256) -> REF_265.strt
TMP_164(uint256) = REF_266 + rndGap_
TMP_165(bool) = _now > TMP_164
REF_267(F3Ddatasets.Round) -> round_[_rID]
REF_268(uint256) -> REF_267.end
TMP_166(bool) = _now <= REF_268
REF_269(F3Ddatasets.Round) -> round_[_rID]
REF_270(uint256) -> REF_269.end
TMP_167(bool) = _now > REF_270
REF_271(F3Ddatasets.Round) -> round_[_rID]
REF_272(uint256) -> REF_271.plyr
TMP_168(bool) = REF_272 == 0
TMP_169(bool) = TMP_167 && TMP_168
TMP_170(bool) = TMP_166 || TMP_169
TMP_171(bool) = TMP_165 && TMP_170
CONDITION TMP_171"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, Duang8.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_273(F3Ddatasets.Round) -> round_[_rID]
REF_274(uint256) -> REF_273.end
TMP_173(bool) = _now > REF_274
REF_275(F3Ddatasets.Round) -> round_[_rID]
REF_276(bool) -> REF_275.ended
TMP_174(bool) = REF_276 == False
TMP_175(bool) = TMP_173 && TMP_174
CONDITION TMP_175"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_277(F3Ddatasets.Round) -> round_[_rID]
REF_278(bool) -> REF_277.ended
REF_278(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_176(F3Ddatasets.EventReturns) = INTERNAL_CALL, Duang8.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_176(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_279(uint256) -> _eventData_.compressedData
REF_280(uint256) -> _eventData_.compressedData
TMP_177(uint256) = _now * 1000000000000000000
TMP_178(uint256) = REF_280 + TMP_177
REF_279(uint256) (->_eventData_) := TMP_178(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_281(uint256) -> _eventData_.compressedIDs
REF_282(uint256) -> _eventData_.compressedIDs
TMP_179(uint256) = REF_282 + _pID
REF_281(uint256) (->_eventData_) := TMP_179(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_284(F3Ddatasets.Player) -> plyr_[_pID]
REF_285(bytes32) -> REF_284.name
REF_286(uint256) -> _eventData_.compressedData
REF_287(uint256) -> _eventData_.compressedIDs
REF_288(address) -> _eventData_.winnerAddr
REF_289(bytes32) -> _eventData_.winnerName
REF_290(uint256) -> _eventData_.amountWon
REF_291(uint256) -> _eventData_.newPot
REF_292(uint256) -> _eventData_.P3DAmount
REF_293(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_285,msg.value,REF_286,REF_287,REF_288,REF_289,REF_290,REF_291,REF_292,REF_293)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_294(F3Ddatasets.Player) -> plyr_[_pID]
REF_295(uint256) -> REF_294.gen
REF_296(F3Ddatasets.Player) -> plyr_[_pID]
REF_297(uint256) -> REF_296.gen
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_297', 'msg.value'] 
REF_295(uint256) (->plyr_) := TMP_181(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 188.sol-Duang8-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_23(F3Ddatasets.EventReturns) = INTERNAL_CALL, Duang8.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_23(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_26(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_26(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _affCode == TMP_24
TMP_26(bool) = _affCode == msg.sender
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_27(F3Ddatasets.Player) -> plyr_[_pID]
REF_28(uint256) -> REF_27.laff
_affID(uint256) := REF_28(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_29(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_29(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_30(F3Ddatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_28(bool) = _affID != REF_31
CONDITION TMP_28"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_32(F3Ddatasets.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_29(uint256) = INTERNAL_CALL, Duang8.verifyTeam(uint256)(_team)
_team(uint256) := TMP_29(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, Duang8.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Duang8.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Duang8.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, Duang8.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 188.sol-Duang8-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_13(F3Ddatasets.EventReturns) = INTERNAL_CALL, Duang8.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_13(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_19(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_19(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_14(bool) = _affCode == 0
TMP_15(bool) = _affCode == _pID
TMP_16(bool) = TMP_14 || TMP_15
CONDITION TMP_16"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_20(F3Ddatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
_affCode(uint256) := REF_21(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_22(F3Ddatasets.Player) -> plyr_[_pID]
REF_23(uint256) -> REF_22.laff
TMP_17(bool) = _affCode != REF_23
CONDITION TMP_17"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_24(F3Ddatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
REF_25(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_18(uint256) = INTERNAL_CALL, Duang8.verifyTeam(uint256)(_team)
_team(uint256) := TMP_18(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, Duang8.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Duang8.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Duang8.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, Duang8.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 188.sol-Duang8-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_34(F3Ddatasets.EventReturns) = INTERNAL_CALL, Duang8.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_34(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_34(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_34(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_35(bool) = _affCode == 
REF_35(F3Ddatasets.Player) -> plyr_[_pID]
REF_36(bytes32) -> REF_35.name
TMP_36(bool) = _affCode == REF_36
TMP_37(bool) = TMP_35 || TMP_36
CONDITION TMP_37"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_37(F3Ddatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
_affID(uint256) := REF_38(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_39(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_39(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_40(F3Ddatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
TMP_38(bool) = _affID != REF_41
CONDITION TMP_38"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_42(F3Ddatasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
REF_43(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_39(uint256) = INTERNAL_CALL, Duang8.verifyTeam(uint256)(_team)
_team(uint256) := TMP_39(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, Duang8.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Duang8.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Duang8.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, Duang8.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 188.sol-Duang8-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_414(F3Ddatasets.Round) -> round_[_rID]
REF_415(uint256) -> REF_414.strt
TMP_247(uint256) = REF_415 + rndGap_
TMP_248(bool) = _now > TMP_247
REF_416(F3Ddatasets.Round) -> round_[_rID]
REF_417(uint256) -> REF_416.end
TMP_249(bool) = _now <= REF_417
REF_418(F3Ddatasets.Round) -> round_[_rID]
REF_419(uint256) -> REF_418.end
TMP_250(bool) = _now > REF_419
REF_420(F3Ddatasets.Round) -> round_[_rID]
REF_421(uint256) -> REF_420.plyr
TMP_251(bool) = REF_421 == 0
TMP_252(bool) = TMP_250 && TMP_251
TMP_253(bool) = TMP_249 || TMP_252
TMP_254(bool) = TMP_248 && TMP_253
CONDITION TMP_254"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_422(F3Ddatasets.Round) -> round_[_rID]
REF_423(uint256) -> REF_422.eth
TMP_255(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_423', '_eth'] 
RETURN TMP_255"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_256(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keys(uint256), arguments:['_eth'] 
RETURN TMP_256"];
}
// Function: 188.sol-Duang8-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_404(F3Ddatasets.Round) -> round_[_rIDlast]
REF_405(uint256) -> REF_404.mask
REF_407(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_408(F3Ddatasets.PlayerRounds) -> REF_407[_rIDlast]
REF_409(uint256) -> REF_408.keys
TMP_244(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_405', 'REF_409'] 
TMP_245(uint256) = TMP_244 / 1000000000000000000
REF_411(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_412(F3Ddatasets.PlayerRounds) -> REF_411[_rIDlast]
REF_413(uint256) -> REF_412.mask
TMP_246(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_245', 'REF_413'] 
RETURN TMP_246"];
}
// Function: 188.sol-Duang8-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(23,0)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_0(F3Ddatasets.TeamFee) = new TeamFee(23,0)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_0(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(33,0)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(33,0)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(53,0)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(53,0)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(43,0)

IRs:
REF_6(F3Ddatasets.TeamFee) -> fees_[3]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(43,0)
REF_6(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(42,0)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_4(F3Ddatasets.PotSplit) = new PotSplit(42,0)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_4(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(34,0)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(34,0)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(18,0)

IRs:
REF_12(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_6(F3Ddatasets.PotSplit) = new PotSplit(18,0)
REF_12(F3Ddatasets.PotSplit) (->potSplit_) := TMP_6(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(26,0)

IRs:
REF_14(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(26,0)
REF_14(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
}
// Function: 188.sol-Duang8-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_331(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_332(F3Ddatasets.PlayerRounds) -> REF_331[_rID]
REF_333(uint256) -> REF_332.keys
TMP_201(bool) = REF_333 == 0
CONDITION TMP_201"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_202(F3Ddatasets.EventReturns) = INTERNAL_CALL, Duang8.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_202(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_eth > 1000000000

IRs:
TMP_203(bool) = _eth > 1000000000
CONDITION TMP_203"];
4->5[label="True"];
4->52[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_334(F3Ddatasets.Round) -> round_[_rID]
REF_335(uint256) -> REF_334.eth
TMP_204(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_335', '_eth'] 
_keys(uint256) := TMP_204(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_205(bool) = _keys >= 1000000000000000000
CONDITION TMP_205"];
6->7[label="True"];
6->15[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, Duang8.updateTimer(uint256,uint256)(_keys,_rID)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_337(F3Ddatasets.Round) -> round_[_rID]
REF_338(uint256) -> REF_337.plyr
TMP_207(bool) = REF_338 != _pID
CONDITION TMP_207"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_339(F3Ddatasets.Round) -> round_[_rID]
REF_340(uint256) -> REF_339.plyr
REF_340(uint256) (->round_) := _pID(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_341(F3Ddatasets.Round) -> round_[_rID]
REF_342(uint256) -> REF_341.team
TMP_208(bool) = REF_342 != _team
CONDITION TMP_208"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_343(F3Ddatasets.Round) -> round_[_rID]
REF_344(uint256) -> REF_343.team
REF_344(uint256) (->round_) := _team(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_345(uint256) -> _eventData_.compressedData
REF_346(uint256) -> _eventData_.compressedData
TMP_209(uint256) = REF_346 + 100
REF_345(uint256) (->_eventData_) := TMP_209(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_210(bool) = _eth >= 100000000000000000
CONDITION TMP_210"];
16->17[label="True"];
16->42[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_211(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
airdrop() == true

IRs:
TMP_212(bool) = INTERNAL_CALL, Duang8.airdrop()()
TMP_213(bool) = TMP_212 == True
CONDITION TMP_213"];
18->19[label="True"];
18->41[label="False"];
19[label="Node Type: NEW VARIABLE 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_214(bool) = _eth >= 10000000000000000000
CONDITION TMP_214"];
20->21[label="True"];
20->25[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_216(uint256) = TMP_215 / 100
_prize(uint256) := TMP_216(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_348(F3Ddatasets.Player) -> plyr_[_pID]
REF_349(uint256) -> REF_348.win
REF_350(F3Ddatasets.Player) -> plyr_[_pID]
REF_351(uint256) -> REF_350.win
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_351', '_prize'] 
REF_349(uint256) (->plyr_) := TMP_217(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_218(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_354(uint256) -> _eventData_.compressedData
REF_354(-> _eventData_) = REF_354 + 300000000000000000000000000000000"];
24->37;
25[label="Node Type: IF 25

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_219(bool) = _eth >= 1000000000000000000
TMP_220(bool) = _eth < 10000000000000000000
TMP_221(bool) = TMP_219 && TMP_220
CONDITION TMP_221"];
25->26[label="True"];
25->30[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_223(uint256) = TMP_222 / 100
_prize(uint256) := TMP_223(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_356(F3Ddatasets.Player) -> plyr_[_pID]
REF_357(uint256) -> REF_356.win
REF_358(F3Ddatasets.Player) -> plyr_[_pID]
REF_359(uint256) -> REF_358.win
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_359', '_prize'] 
REF_357(uint256) (->plyr_) := TMP_224(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_225(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_362(uint256) -> _eventData_.compressedData
REF_362(-> _eventData_) = REF_362 + 200000000000000000000000000000000"];
29->36;
30[label="Node Type: IF 30

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_226(bool) = _eth >= 100000000000000000
TMP_227(bool) = _eth < 1000000000000000000
TMP_228(bool) = TMP_226 && TMP_227
CONDITION TMP_228"];
30->31[label="True"];
30->35[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_230(uint256) = TMP_229 / 100
_prize(uint256) := TMP_230(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_364(F3Ddatasets.Player) -> plyr_[_pID]
REF_365(uint256) -> REF_364.win
REF_366(F3Ddatasets.Player) -> plyr_[_pID]
REF_367(uint256) -> REF_366.win
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_367', '_prize'] 
REF_365(uint256) (->plyr_) := TMP_231(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_232(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_370(uint256) -> _eventData_.compressedData
REF_370(-> _eventData_) = REF_370 + 300000000000000000000000000000000"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: END_IF 36
"];
36->37;
37[label="Node Type: END_IF 37
"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_371(uint256) -> _eventData_.compressedData
REF_371(-> _eventData_) = REF_371 + 10000000000000000000000000000000"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_372(uint256) -> _eventData_.compressedData
TMP_233(uint256) = _prize * 1000000000000000000000000000000000
REF_372(-> _eventData_) = REF_372 + TMP_233"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_373(uint256) -> _eventData_.compressedData
REF_374(uint256) -> _eventData_.compressedData
TMP_234(uint256) = airDropTracker_ * 1000
TMP_235(uint256) = REF_374 + TMP_234
REF_373(uint256) (->_eventData_) := TMP_235(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_375(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_376(F3Ddatasets.PlayerRounds) -> REF_375[_rID]
REF_377(uint256) -> REF_376.keys
REF_379(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_380(F3Ddatasets.PlayerRounds) -> REF_379[_rID]
REF_381(uint256) -> REF_380.keys
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_381'] 
REF_377(uint256) (->plyrRnds_) := TMP_236(uint256)"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_382(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_383(F3Ddatasets.PlayerRounds) -> REF_382[_rID]
REF_384(uint256) -> REF_383.eth
REF_386(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_387(F3Ddatasets.PlayerRounds) -> REF_386[_rID]
REF_388(uint256) -> REF_387.eth
TMP_237(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_388'] 
REF_384(uint256) (->plyrRnds_) := TMP_237(uint256)"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_389(F3Ddatasets.Round) -> round_[_rID]
REF_390(uint256) -> REF_389.keys
REF_392(F3Ddatasets.Round) -> round_[_rID]
REF_393(uint256) -> REF_392.keys
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_393'] 
REF_390(uint256) (->round_) := TMP_238(uint256)"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_394(F3Ddatasets.Round) -> round_[_rID]
REF_395(uint256) -> REF_394.eth
REF_397(F3Ddatasets.Round) -> round_[_rID]
REF_398(uint256) -> REF_397.eth
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_398'] 
REF_395(uint256) (->round_) := TMP_239(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_399(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_400(uint256) -> REF_399[_team]
REF_402(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_403(uint256) -> REF_402[_team]
TMP_240(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_403'] 
REF_400(uint256) (->rndTmEth_) := TMP_240(uint256)"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_241(F3Ddatasets.EventReturns) = INTERNAL_CALL, Duang8.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_241(F3Ddatasets.EventReturns)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_242(F3Ddatasets.EventReturns) = INTERNAL_CALL, Duang8.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_242(F3Ddatasets.EventReturns)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, Duang8.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
51->52;
52[label="Node Type: END_IF 52
"];
}
// Function: 188.sol-Duang8-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_463(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_463(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_281(bool) = _pID == 0
CONDITION TMP_281"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_282(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_282(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_283(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_283(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_284(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_284(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_467(uint256) -> pIDxAddr_[msg.sender]
REF_467(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_468(F3Ddatasets.Player) -> plyr_[_pID]
REF_469(address) -> REF_468.addr
REF_469(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_285(bool) = _name != 
CONDITION TMP_285"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_470(uint256) -> pIDxName_[_name]
REF_470(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_471(F3Ddatasets.Player) -> plyr_[_pID]
REF_472(bytes32) -> REF_471.name
REF_472(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_473(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_474(bool) -> REF_473[_name]
REF_474(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_286(bool) = _laff != 0
TMP_287(bool) = _laff != _pID
TMP_288(bool) = TMP_286 && TMP_287
CONDITION TMP_288"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_475(F3Ddatasets.Player) -> plyr_[_pID]
REF_476(uint256) -> REF_475.laff
REF_476(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_477(uint256) -> _eventData_.compressedData
REF_478(uint256) -> _eventData_.compressedData
TMP_289(uint256) = REF_478 + 1
REF_477(uint256) (->_eventData_) := TMP_289(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 188.sol-Duang8-distributeAff(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addP3d = 0

IRs:
_addP3d(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_aff1 = _eth / 10

IRs:
TMP_394(uint256) = _eth / 10
_aff1(uint256) := TMP_394(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_aff2 = _eth / 20

IRs:
TMP_395(uint256) = _eth / 20
_aff2(uint256) := TMP_395(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_aff3 = _eth / 34

IRs:
TMP_396(uint256) = _eth / 34
_aff3(uint256) := TMP_396(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
groupCut.transfer(_aff1)

IRs:
Transfer dest:groupCut value:_aff1"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
(_affID != 0) && (_affID != _pID) && (plyr_[_affID].name != )

IRs:
TMP_398(bool) = _affID != 0
TMP_399(bool) = _affID != _pID
TMP_400(bool) = TMP_398 && TMP_399
REF_606(F3Ddatasets.Player) -> plyr_[_affID]
REF_607(bytes32) -> REF_606.name
TMP_401(bool) = REF_607 != 
TMP_402(bool) = TMP_400 && TMP_401
CONDITION TMP_402"];
6->7[label="True"];
6->16[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].laffID = _affID

IRs:
REF_608(F3Ddatasets.Player) -> plyr_[_pID]
REF_609(uint256) -> REF_608.laffID
REF_609(uint256) (->plyr_) := _affID(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_affID].aff = _aff2.add(plyr_[_affID].aff)

IRs:
REF_610(F3Ddatasets.Player) -> plyr_[_affID]
REF_611(uint256) -> REF_610.aff
REF_613(F3Ddatasets.Player) -> plyr_[_affID]
REF_614(uint256) -> REF_613.aff
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff2', 'REF_614'] 
REF_611(uint256) (->plyr_) := TMP_403(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff2,now)

IRs:
REF_616(F3Ddatasets.Player) -> plyr_[_affID]
REF_617(address) -> REF_616.addr
REF_618(F3Ddatasets.Player) -> plyr_[_affID]
REF_619(bytes32) -> REF_618.name
Emit onAffiliatePayout(_affID,REF_617,REF_619,_rID,_pID,_aff2,now)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_secLaff = plyr_[_affID].laffID

IRs:
REF_620(F3Ddatasets.Player) -> plyr_[_affID]
REF_621(uint256) -> REF_620.laffID
_secLaff(uint256) := REF_621(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
(_secLaff != 0) && (_secLaff != _pID)

IRs:
TMP_405(bool) = _secLaff != 0
TMP_406(bool) = _secLaff != _pID
TMP_407(bool) = TMP_405 && TMP_406
CONDITION TMP_407"];
11->12[label="True"];
11->14[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_secLaff].aff = _aff3.add(plyr_[_secLaff].aff)

IRs:
REF_622(F3Ddatasets.Player) -> plyr_[_secLaff]
REF_623(uint256) -> REF_622.aff
REF_625(F3Ddatasets.Player) -> plyr_[_secLaff]
REF_626(uint256) -> REF_625.aff
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff3', 'REF_626'] 
REF_623(uint256) (->plyr_) := TMP_408(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
F3Devents.onAffiliatePayout(_secLaff,plyr_[_secLaff].addr,plyr_[_secLaff].name,_rID,_pID,_aff3,now)

IRs:
REF_628(F3Ddatasets.Player) -> plyr_[_secLaff]
REF_629(address) -> REF_628.addr
REF_630(F3Ddatasets.Player) -> plyr_[_secLaff]
REF_631(bytes32) -> REF_630.name
Emit onAffiliatePayout(_secLaff,REF_629,REF_631,_rID,_pID,_aff3,now)"];
13->15;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_addP3d = _addP3d.add(_aff3)

IRs:
TMP_410(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_addP3d', '_aff3'] 
_addP3d(uint256) := TMP_410(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->17;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_addP3d = _addP3d.add(_aff2)

IRs:
TMP_411(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_addP3d', '_aff2'] 
_addP3d(uint256) := TMP_411(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_addP3d)

IRs:
RETURN _addP3d"];
}
// Function: 188.sol-Duang8-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 10

IRs:
TMP_367(uint256) = _eth / 10
_com(uint256) := TMP_367(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
address(admin).call.value((_com / 2))() == false

IRs:
TMP_368 = CONVERT admin to address
TMP_369(uint256) = _com / 2
TMP_371(bool) = LOW_LEVEL_CALL, dest:TMP_368, function:call, arguments:[] value:TMP_369 
TMP_372(bool) = TMP_371 == False
CONDITION TMP_372"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_p3d = _com / 2

IRs:
TMP_373(uint256) = _com / 2
_p3d(uint256) := TMP_373(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_com = _com / 2

IRs:
TMP_374(uint256) = _com / 2
_com(uint256) := TMP_374(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
address(shareCom).call.value((_com / 2))() == false

IRs:
TMP_375 = CONVERT shareCom to address
TMP_376(uint256) = _com / 2
TMP_378(bool) = LOW_LEVEL_CALL, dest:TMP_375, function:call, arguments:[] value:TMP_376 
TMP_379(bool) = TMP_378 == False
CONDITION TMP_379"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_p3d += (_com / 2)

IRs:
TMP_380(uint256) = _com / 2
_p3d(uint256) = _p3d + TMP_380"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_com = _com.sub(_com / 2)

IRs:
TMP_381(uint256) = _com / 2
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_com', 'TMP_381'] 
_com(uint256) := TMP_382(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_p3d = _p3d.add(distributeAff(_rID,_pID,_eth,_affID))

IRs:
TMP_383(uint256) = INTERNAL_CALL, Duang8.distributeAff(uint256,uint256,uint256,uint256)(_rID,_pID,_eth,_affID)
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_383'] 
_p3d(uint256) := TMP_384(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_p3d > 0

IRs:
TMP_385(bool) = _p3d > 0
CONDITION TMP_385"];
12->13[label="True"];
12->19[label="False"];
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
_potAmount = _p3d / 2

IRs:
TMP_386(uint256) = _p3d / 2
_potAmount(uint256) := TMP_386(uint256)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
_amount = _p3d.sub(_potAmount)

IRs:
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', '_potAmount'] 
_amount(uint256) := TMP_387(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
shareCom.transfer((_amount / 2))

IRs:
TMP_388(uint256) = _amount / 2
Transfer dest:shareCom value:TMP_388"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
admin.transfer((_amount / 2))

IRs:
TMP_390(uint256) = _amount / 2
Transfer dest:admin value:TMP_390"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_potAmount)

IRs:
REF_597(F3Ddatasets.Round) -> round_[_rID]
REF_598(uint256) -> REF_597.pot
REF_599(F3Ddatasets.Round) -> round_[_rID]
REF_600(uint256) -> REF_599.pot
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_600', '_potAmount'] 
REF_598(uint256) (->round_) := TMP_392(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_602(uint256) -> _eventData_.P3DAmount
REF_604(uint256) -> _eventData_.P3DAmount
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_604'] 
REF_602(uint256) (->_eventData_) := TMP_393(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 188.sol-Duang8-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_647(F3Ddatasets.TeamFee) -> fees_[_team]
REF_648(uint256) -> REF_647.gen
TMP_417(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_648'] 
TMP_418(uint256) = TMP_417 / 100
_gen(uint256) := TMP_418(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_419(uint256) = _eth / 100
_air(uint256) := TMP_419(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_420(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_420(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(_eth.mul(29) / 100)

IRs:
TMP_421(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '29'] 
TMP_422(uint256) = TMP_421 / 100
TMP_423(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_422'] 
_eth(uint256) := TMP_423(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_424(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_424(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_425(uint256) = INTERNAL_CALL, Duang8.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_425(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_426(bool) = _dust > 0
CONDITION TMP_426"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_427(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_427(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_654(F3Ddatasets.Round) -> round_[_rID]
REF_655(uint256) -> REF_654.pot
TMP_428(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_658(F3Ddatasets.Round) -> round_[_rID]
REF_659(uint256) -> REF_658.pot
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_428', 'REF_659'] 
REF_655(uint256) (->round_) := TMP_429(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_660(uint256) -> _eventData_.genAmount
REF_662(uint256) -> _eventData_.genAmount
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_662'] 
REF_660(uint256) (->_eventData_) := TMP_430(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_663(uint256) -> _eventData_.potAmount
REF_663(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 188.sol-Duang8-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_487(F3Ddatasets.Round) -> round_[_rID]
REF_488(uint256) -> REF_487.plyr
_winPID(uint256) := REF_488(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_489(F3Ddatasets.Round) -> round_[_rID]
REF_490(uint256) -> REF_489.team
_winTID(uint256) := REF_490(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_491(F3Ddatasets.Round) -> round_[_rID]
REF_492(uint256) -> REF_491.pot
_pot(uint256) := REF_492(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_297(uint256) = TMP_296 / 100
_win(uint256) := TMP_297(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 10)

IRs:
TMP_298(uint256) = _pot / 10
_com(uint256) := TMP_298(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_495(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_496(uint256) -> REF_495.gen
TMP_299(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_496'] 
TMP_300(uint256) = TMP_299 / 100
_gen(uint256) := TMP_300(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen))

IRs:
TMP_301(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_301', '_com'] 
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_302', '_gen'] 
_res(uint256) := TMP_303(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_501(F3Ddatasets.Round) -> round_[_rID]
REF_502(uint256) -> REF_501.keys
TMP_305(uint256) = TMP_304 / REF_502
_ppt(uint256) := TMP_305(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_505(F3Ddatasets.Round) -> round_[_rID]
REF_506(uint256) -> REF_505.keys
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_506'] 
TMP_307(uint256) = TMP_306 / 1000000000000000000
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_307'] 
_dust(uint256) := TMP_308(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_dust > 0

IRs:
TMP_309(bool) = _dust > 0
CONDITION TMP_309"];
11->12[label="True"];
11->14[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_310(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_311(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_311(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_509(F3Ddatasets.Player) -> plyr_[_winPID]
REF_510(uint256) -> REF_509.win
REF_512(F3Ddatasets.Player) -> plyr_[_winPID]
REF_513(uint256) -> REF_512.win
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_513'] 
REF_510(uint256) (->plyr_) := TMP_312(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
shareCom.transfer((_com / 2))

IRs:
TMP_313(uint256) = _com / 2
Transfer dest:shareCom value:TMP_313"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer((_com / 2))

IRs:
TMP_315(uint256) = _com / 2
Transfer dest:admin value:TMP_315"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_516(F3Ddatasets.Round) -> round_[_rID]
REF_517(uint256) -> REF_516.mask
REF_519(F3Ddatasets.Round) -> round_[_rID]
REF_520(uint256) -> REF_519.mask
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_520'] 
REF_517(uint256) (->round_) := TMP_317(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_521(uint256) -> _eventData_.compressedData
REF_522(uint256) -> _eventData_.compressedData
REF_523(F3Ddatasets.Round) -> round_[_rID]
REF_524(uint256) -> REF_523.end
TMP_318(uint256) = REF_524 * 1000000
TMP_319(uint256) = REF_522 + TMP_318
REF_521(uint256) (->_eventData_) := TMP_319(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_525(uint256) -> _eventData_.compressedIDs
REF_526(uint256) -> _eventData_.compressedIDs
TMP_320(uint256) = _winPID * 100000000000000000000000000
TMP_321(uint256) = REF_526 + TMP_320
TMP_322(uint256) = _winTID * 100000000000000000
TMP_323(uint256) = TMP_321 + TMP_322
REF_525(uint256) (->_eventData_) := TMP_323(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_527(address) -> _eventData_.winnerAddr
REF_528(F3Ddatasets.Player) -> plyr_[_winPID]
REF_529(address) -> REF_528.addr
REF_527(address) (->_eventData_) := REF_529(address)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_530(bytes32) -> _eventData_.winnerName
REF_531(F3Ddatasets.Player) -> plyr_[_winPID]
REF_532(bytes32) -> REF_531.name
REF_530(bytes32) (->_eventData_) := REF_532(bytes32)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_533(uint256) -> _eventData_.amountWon
REF_533(uint256) (->_eventData_) := _win(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_534(uint256) -> _eventData_.genAmount
REF_534(uint256) (->_eventData_) := _gen(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.P3DAmount = 0

IRs:
REF_535(uint256) -> _eventData_.P3DAmount
REF_535(uint256) (->_eventData_) := 0(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_536(uint256) -> _eventData_.newPot
REF_536(uint256) (->_eventData_) := _res(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
F3Devents.onEndRound(_rID,plyr_[_winPID].addr,plyr_[_winPID].name,_win,_res)

IRs:
REF_538(F3Ddatasets.Player) -> plyr_[_winPID]
REF_539(address) -> REF_538.addr
REF_540(F3Ddatasets.Player) -> plyr_[_winPID]
REF_541(bytes32) -> REF_540.name
Emit onEndRound(_rID,REF_539,REF_541,_win,_res)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
rID_ ++

IRs:
TMP_325(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_rID ++

IRs:
TMP_326(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_542(F3Ddatasets.Round) -> round_[_rID]
REF_543(uint256) -> REF_542.strt
REF_543(uint256) (->round_) := now(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_544(F3Ddatasets.Round) -> round_[_rID]
REF_545(uint256) -> REF_544.end
TMP_327(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_327', 'rndGap_'] 
REF_545(uint256) (->round_) := TMP_328(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_548(F3Ddatasets.Round) -> round_[_rID]
REF_549(uint256) -> REF_548.pot
REF_549(uint256) (->round_) := _res(uint256)"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 188.sol-Duang8-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_704(uint256) -> _eventData_.compressedData
REF_705(uint256) -> _eventData_.compressedData
TMP_447(uint256) = now * 1000000000000000000
TMP_448(uint256) = REF_705 + TMP_447
TMP_449(uint256) = _team * 100000000000000000000000000000
TMP_450(uint256) = TMP_448 + TMP_449
REF_704(uint256) (->_eventData_) := TMP_450(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_706(uint256) -> _eventData_.compressedIDs
REF_707(uint256) -> _eventData_.compressedIDs
TMP_451(uint256) = REF_707 + _pID
TMP_452(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_453(uint256) = TMP_451 + TMP_452
REF_706(uint256) (->_eventData_) := TMP_453(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_709(uint256) -> _eventData_.compressedData
REF_710(uint256) -> _eventData_.compressedIDs
REF_711(F3Ddatasets.Player) -> plyr_[_pID]
REF_712(bytes32) -> REF_711.name
REF_713(address) -> _eventData_.winnerAddr
REF_714(bytes32) -> _eventData_.winnerName
REF_715(uint256) -> _eventData_.amountWon
REF_716(uint256) -> _eventData_.newPot
REF_717(uint256) -> _eventData_.P3DAmount
REF_718(uint256) -> _eventData_.genAmount
REF_719(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_709,REF_710,REF_712,msg.sender,_eth,_keys,REF_713,REF_714,REF_715,REF_716,REF_717,REF_718,REF_719,airDropPot_)"];
}
// Function: 188.sol-Duang8-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(F3Ddatasets.EventReturns) = INTERNAL_CALL, Duang8.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_8(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_17(F3Ddatasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.laff
INTERNAL_CALL, Duang8.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_18,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Duang8.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Duang8.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, Duang8.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 188.sol-Duang8-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_135(F3Ddatasets.Round) -> round_[_rID]
REF_136(uint256) -> REF_135.strt
TMP_115(uint256) = REF_136 + rndGap_
TMP_116(bool) = _now > TMP_115
REF_137(F3Ddatasets.Round) -> round_[_rID]
REF_138(uint256) -> REF_137.end
TMP_117(bool) = _now <= REF_138
REF_139(F3Ddatasets.Round) -> round_[_rID]
REF_140(uint256) -> REF_139.end
TMP_118(bool) = _now > REF_140
REF_141(F3Ddatasets.Round) -> round_[_rID]
REF_142(uint256) -> REF_141.plyr
TMP_119(bool) = REF_142 == 0
TMP_120(bool) = TMP_118 && TMP_119
TMP_121(bool) = TMP_117 || TMP_120
TMP_122(bool) = TMP_116 && TMP_121
CONDITION TMP_122"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_143(F3Ddatasets.Round) -> round_[_rID]
REF_144(uint256) -> REF_143.keys
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_144', '1000000000000000000'] 
TMP_124(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_123', '1000000000000000000'] 
RETURN TMP_124"];
5[label="Node Type: RETURN 5

EXPRESSION:
(100000000000000)

IRs:
RETURN 100000000000000"];
}
// Function: 188.sol-Duang8-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_217(F3Ddatasets.Round) -> round_[_rID]
REF_218(uint256) -> REF_217.ico
REF_219(F3Ddatasets.Round) -> round_[_rID]
REF_220(uint256) -> REF_219.keys
REF_221(F3Ddatasets.Round) -> round_[_rID]
REF_222(uint256) -> REF_221.end
REF_223(F3Ddatasets.Round) -> round_[_rID]
REF_224(uint256) -> REF_223.strt
REF_225(F3Ddatasets.Round) -> round_[_rID]
REF_226(uint256) -> REF_225.pot
REF_227(F3Ddatasets.Round) -> round_[_rID]
REF_228(uint256) -> REF_227.team
REF_229(F3Ddatasets.Round) -> round_[_rID]
REF_230(uint256) -> REF_229.plyr
TMP_155(uint256) = REF_230 * 10
TMP_156(uint256) = REF_228 + TMP_155
REF_231(F3Ddatasets.Round) -> round_[_rID]
REF_232(uint256) -> REF_231.plyr
REF_233(F3Ddatasets.Player) -> plyr_[REF_232]
REF_234(address) -> REF_233.addr
REF_235(F3Ddatasets.Round) -> round_[_rID]
REF_236(uint256) -> REF_235.plyr
REF_237(F3Ddatasets.Player) -> plyr_[REF_236]
REF_238(bytes32) -> REF_237.name
REF_239(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_240(uint256) -> REF_239[0]
REF_241(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_242(uint256) -> REF_241[1]
REF_243(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_244(uint256) -> REF_243[2]
REF_245(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_246(uint256) -> REF_245[3]
TMP_157(uint256) = airDropPot_ * 1000
TMP_158(uint256) = airDropTracker_ + TMP_157
RETURN REF_218,_rID,REF_220,REF_222,REF_224,REF_226,TMP_156,REF_234,REF_238,REF_240,REF_242,REF_244,REF_246,TMP_158"];
}
// Function: 188.sol-Duang8-getPlayerAff(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_affID = plyr_[_pID].laffID

IRs:
REF_634(F3Ddatasets.Player) -> plyr_[_pID]
REF_635(uint256) -> REF_634.laffID
_affID(uint256) := REF_635(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_affID != 0

IRs:
TMP_412(bool) = _affID != 0
CONDITION TMP_412"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_secondLaff = plyr_[_affID].laffID

IRs:
REF_636(F3Ddatasets.Player) -> plyr_[_affID]
REF_637(uint256) -> REF_636.laffID
_secondLaff(uint256) := REF_637(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_secondLaff != 0

IRs:
TMP_413(bool) = _secondLaff != 0
CONDITION TMP_413"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_thirdAff = plyr_[_secondLaff].laffID

IRs:
REF_638(F3Ddatasets.Player) -> plyr_[_secondLaff]
REF_639(uint256) -> REF_638.laffID
_thirdAff(uint256) := REF_639(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_affID,_secondLaff,_thirdAff)

IRs:
RETURN _affID,_secondLaff,_thirdAff"];
}
// Function: 188.sol-Duang8-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_159 = CONVERT 0 to address
TMP_160(bool) = _addr == TMP_159
CONDITION TMP_160"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_161(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_247(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_247(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_248(F3Ddatasets.Player) -> plyr_[_pID]
REF_249(bytes32) -> REF_248.name
REF_250(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_251(F3Ddatasets.PlayerRounds) -> REF_250[_rID]
REF_252(uint256) -> REF_251.keys
REF_253(F3Ddatasets.Player) -> plyr_[_pID]
REF_254(uint256) -> REF_253.win
REF_255(F3Ddatasets.Player) -> plyr_[_pID]
REF_256(uint256) -> REF_255.gen
REF_258(F3Ddatasets.Player) -> plyr_[_pID]
REF_259(uint256) -> REF_258.lrnd
TMP_162(uint256) = INTERNAL_CALL, Duang8.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_259)
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_256', 'TMP_162'] 
REF_260(F3Ddatasets.Player) -> plyr_[_pID]
REF_261(uint256) -> REF_260.aff
REF_262(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_263(F3Ddatasets.PlayerRounds) -> REF_262[_rID]
REF_264(uint256) -> REF_263.eth
RETURN _pID,REF_249,REF_252,REF_254,TMP_163,REF_261,REF_264"];
}
// Function: 188.sol-Duang8-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_157(F3Ddatasets.Round) -> round_[_rID]
REF_158(uint256) -> REF_157.end
TMP_131(bool) = now > REF_158
REF_159(F3Ddatasets.Round) -> round_[_rID]
REF_160(bool) -> REF_159.ended
TMP_132(bool) = REF_160 == False
TMP_133(bool) = TMP_131 && TMP_132
REF_161(F3Ddatasets.Round) -> round_[_rID]
REF_162(uint256) -> REF_161.plyr
TMP_134(bool) = REF_162 != 0
TMP_135(bool) = TMP_133 && TMP_134
CONDITION TMP_135"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_163(F3Ddatasets.Round) -> round_[_rID]
REF_164(uint256) -> REF_163.plyr
TMP_136(bool) = REF_164 == _pID
CONDITION TMP_136"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_165(F3Ddatasets.Player) -> plyr_[_pID]
REF_166(uint256) -> REF_165.win
REF_168(F3Ddatasets.Round) -> round_[_rID]
REF_169(uint256) -> REF_168.pot
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_169', '48'] 
TMP_138(uint256) = TMP_137 / 100
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_166', 'TMP_138'] 
REF_171(F3Ddatasets.Player) -> plyr_[_pID]
REF_172(uint256) -> REF_171.gen
TMP_140(uint256) = INTERNAL_CALL, Duang8.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_175(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_176(F3Ddatasets.PlayerRounds) -> REF_175[_rID]
REF_177(uint256) -> REF_176.mask
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_140', 'REF_177'] 
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_172', 'TMP_141'] 
REF_178(F3Ddatasets.Player) -> plyr_[_pID]
REF_179(uint256) -> REF_178.aff
RETURN TMP_139,TMP_142,REF_179"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_180(F3Ddatasets.Player) -> plyr_[_pID]
REF_181(uint256) -> REF_180.win
REF_182(F3Ddatasets.Player) -> plyr_[_pID]
REF_183(uint256) -> REF_182.gen
TMP_143(uint256) = INTERNAL_CALL, Duang8.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_186(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_187(F3Ddatasets.PlayerRounds) -> REF_186[_rID]
REF_188(uint256) -> REF_187.mask
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_143', 'REF_188'] 
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_183', 'TMP_144'] 
REF_189(F3Ddatasets.Player) -> plyr_[_pID]
REF_190(uint256) -> REF_189.aff
RETURN REF_181,TMP_145,REF_190"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_191(F3Ddatasets.Player) -> plyr_[_pID]
REF_192(uint256) -> REF_191.win
REF_193(F3Ddatasets.Player) -> plyr_[_pID]
REF_194(uint256) -> REF_193.gen
REF_196(F3Ddatasets.Player) -> plyr_[_pID]
REF_197(uint256) -> REF_196.lrnd
TMP_146(uint256) = INTERNAL_CALL, Duang8.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_197)
TMP_147(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_194', 'TMP_146'] 
REF_198(F3Ddatasets.Player) -> plyr_[_pID]
REF_199(uint256) -> REF_198.aff
RETURN REF_192,TMP_147,REF_199"];
}
// Function: 188.sol-Duang8-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_200(F3Ddatasets.Round) -> round_[_rID]
REF_201(uint256) -> REF_200.mask
REF_203(F3Ddatasets.Round) -> round_[_rID]
REF_204(uint256) -> REF_203.pot
REF_206(F3Ddatasets.Round) -> round_[_rID]
REF_207(uint256) -> REF_206.team
REF_208(F3Ddatasets.PotSplit) -> potSplit_[REF_207]
REF_209(uint256) -> REF_208.gen
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_204', 'REF_209'] 
TMP_149(uint256) = TMP_148 / 100
TMP_150(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_149', '1000000000000000000'] 
REF_211(F3Ddatasets.Round) -> round_[_rID]
REF_212(uint256) -> REF_211.keys
TMP_151(uint256) = TMP_150 / REF_212
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_201', 'TMP_151'] 
REF_214(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_215(F3Ddatasets.PlayerRounds) -> REF_214[_rID]
REF_216(uint256) -> REF_215.keys
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_152', 'REF_216'] 
TMP_154(uint256) = TMP_153 / 1000000000000000000
RETURN TMP_154"];
}
// Function: 188.sol-Duang8-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_147(F3Ddatasets.Round) -> round_[_rID]
REF_148(uint256) -> REF_147.end
TMP_125(bool) = _now < REF_148
CONDITION TMP_125"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_149(F3Ddatasets.Round) -> round_[_rID]
REF_150(uint256) -> REF_149.strt
TMP_126(uint256) = REF_150 + rndGap_
TMP_127(bool) = _now > TMP_126
CONDITION TMP_127"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_151(F3Ddatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.end
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_152', '_now'] 
RETURN TMP_128"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_154(F3Ddatasets.Round) -> round_[_rID]
REF_155(uint256) -> REF_154.strt
TMP_129(uint256) = REF_155 + rndGap_
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_129', '_now'] 
RETURN TMP_130"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 188.sol-Duang8-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_426(F3Ddatasets.Round) -> round_[_rID]
REF_427(uint256) -> REF_426.strt
TMP_257(uint256) = REF_427 + rndGap_
TMP_258(bool) = _now > TMP_257
REF_428(F3Ddatasets.Round) -> round_[_rID]
REF_429(uint256) -> REF_428.end
TMP_259(bool) = _now <= REF_429
REF_430(F3Ddatasets.Round) -> round_[_rID]
REF_431(uint256) -> REF_430.end
TMP_260(bool) = _now > REF_431
REF_432(F3Ddatasets.Round) -> round_[_rID]
REF_433(uint256) -> REF_432.plyr
TMP_261(bool) = REF_433 == 0
TMP_262(bool) = TMP_260 && TMP_261
TMP_263(bool) = TMP_259 || TMP_262
TMP_264(bool) = TMP_258 && TMP_263
CONDITION TMP_264"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_434(F3Ddatasets.Round) -> round_[_rID]
REF_435(uint256) -> REF_434.keys
TMP_265(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_435', '_keys'] 
TMP_266(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_265', '_keys'] 
RETURN TMP_266"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_267(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.eth(uint256), arguments:['_keys'] 
RETURN TMP_267"];
}
// Function: 188.sol-Duang8-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_464(bool) = activated_ == True
TMP_465(None) = SOLIDITY_CALL require(bool,string)(TMP_464,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 188.sol-Duang8-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_466(bool) = _codeLength == 0
TMP_467(None) = SOLIDITY_CALL require(bool,string)(TMP_466,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 188.sol-Duang8-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_468(bool) = _eth >= 1000000000
TMP_469(None) = SOLIDITY_CALL require(bool,string)(TMP_468,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_470(bool) = _eth <= 100000000000000000000000
TMP_471(None) = SOLIDITY_CALL require(bool,string)(TMP_470,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 188.sol-Duang8-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_479(F3Ddatasets.Player) -> plyr_[_pID]
REF_480(uint256) -> REF_479.lrnd
TMP_293(bool) = REF_480 != 0
CONDITION TMP_293"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_481(F3Ddatasets.Player) -> plyr_[_pID]
REF_482(uint256) -> REF_481.lrnd
INTERNAL_CALL, Duang8.updateGenVault(uint256,uint256)(_pID,REF_482)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_483(F3Ddatasets.Player) -> plyr_[_pID]
REF_484(uint256) -> REF_483.lrnd
REF_484(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_485(uint256) -> _eventData_.compressedData
REF_486(uint256) -> _eventData_.compressedData
TMP_295(uint256) = REF_486 + 10
REF_485(uint256) (->_eventData_) := TMP_295(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 188.sol-Duang8-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_414(uint256) = rID_ + 1
_rID(uint256) := TMP_414(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_640(F3Ddatasets.Round) -> round_[_rID]
REF_641(uint256) -> REF_640.pot
REF_642(F3Ddatasets.Round) -> round_[_rID]
REF_643(uint256) -> REF_642.pot
TMP_415(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_643', 'msg.value'] 
REF_641(uint256) (->round_) := TMP_415(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 188.sol-Duang8-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_299(F3Ddatasets.Round) -> round_[_rID]
REF_300(uint256) -> REF_299.strt
TMP_182(uint256) = REF_300 + rndGap_
TMP_183(bool) = _now > TMP_182
REF_301(F3Ddatasets.Round) -> round_[_rID]
REF_302(uint256) -> REF_301.end
TMP_184(bool) = _now <= REF_302
REF_303(F3Ddatasets.Round) -> round_[_rID]
REF_304(uint256) -> REF_303.end
TMP_185(bool) = _now > REF_304
REF_305(F3Ddatasets.Round) -> round_[_rID]
REF_306(uint256) -> REF_305.plyr
TMP_186(bool) = REF_306 == 0
TMP_187(bool) = TMP_185 && TMP_186
TMP_188(bool) = TMP_184 || TMP_187
TMP_189(bool) = TMP_183 && TMP_188
CONDITION TMP_189"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_307(F3Ddatasets.Player) -> plyr_[_pID]
REF_308(uint256) -> REF_307.gen
TMP_190(uint256) = INTERNAL_CALL, Duang8.withdrawEarnings(uint256)(_pID)
TMP_191(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_190', '_eth'] 
REF_308(uint256) (->plyr_) := TMP_191(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, Duang8.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_310(F3Ddatasets.Round) -> round_[_rID]
REF_311(uint256) -> REF_310.end
TMP_193(bool) = _now > REF_311
REF_312(F3Ddatasets.Round) -> round_[_rID]
REF_313(bool) -> REF_312.ended
TMP_194(bool) = REF_313 == False
TMP_195(bool) = TMP_193 && TMP_194
CONDITION TMP_195"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_314(F3Ddatasets.Round) -> round_[_rID]
REF_315(bool) -> REF_314.ended
REF_315(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_196(F3Ddatasets.EventReturns) = INTERNAL_CALL, Duang8.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_196(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_316(uint256) -> _eventData_.compressedData
REF_317(uint256) -> _eventData_.compressedData
TMP_197(uint256) = _now * 1000000000000000000
TMP_198(uint256) = REF_317 + TMP_197
REF_316(uint256) (->_eventData_) := TMP_198(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_318(uint256) -> _eventData_.compressedIDs
REF_319(uint256) -> _eventData_.compressedIDs
TMP_199(uint256) = REF_319 + _pID
REF_318(uint256) (->_eventData_) := TMP_199(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_321(F3Ddatasets.Player) -> plyr_[_pID]
REF_322(bytes32) -> REF_321.name
REF_323(uint256) -> _eventData_.compressedData
REF_324(uint256) -> _eventData_.compressedIDs
REF_325(address) -> _eventData_.winnerAddr
REF_326(bytes32) -> _eventData_.winnerName
REF_327(uint256) -> _eventData_.amountWon
REF_328(uint256) -> _eventData_.newPot
REF_329(uint256) -> _eventData_.P3DAmount
REF_330(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_322,REF_323,REF_324,REF_325,REF_326,REF_327,REF_328,REF_329,REF_330)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 188.sol-Duang8-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_51(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = _affCode == TMP_53
TMP_55(bool) = _affCode == msg.sender
TMP_56(bool) = TMP_54 || TMP_55
CONDITION TMP_56"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_52(F3Ddatasets.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
_affID(uint256) := REF_53(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_54(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_54(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_55(F3Ddatasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
TMP_57(bool) = _affID != REF_56
CONDITION TMP_57"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_57(F3Ddatasets.Player) -> plyr_[_pID]
REF_58(uint256) -> REF_57.laff
REF_58(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_58(uint256) = INTERNAL_CALL, Duang8.verifyTeam(uint256)(_team)
_team(uint256) := TMP_58(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, Duang8.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Duang8.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Duang8.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, Duang8.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 188.sol-Duang8-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_44(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_44(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_44(bool) = _affCode == 0
TMP_45(bool) = _affCode == _pID
TMP_46(bool) = TMP_44 || TMP_45
CONDITION TMP_46"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_45(F3Ddatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
_affCode(uint256) := REF_46(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_47(F3Ddatasets.Player) -> plyr_[_pID]
REF_48(uint256) -> REF_47.laff
TMP_47(bool) = _affCode != REF_48
CONDITION TMP_47"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_49(F3Ddatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
REF_50(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_48(uint256) = INTERNAL_CALL, Duang8.verifyTeam(uint256)(_team)
_team(uint256) := TMP_48(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, Duang8.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Duang8.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Duang8.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, Duang8.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 188.sol-Duang8-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_59(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_59(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_63(bool) = _affCode == 
REF_60(F3Ddatasets.Player) -> plyr_[_pID]
REF_61(bytes32) -> REF_60.name
TMP_64(bool) = _affCode == REF_61
TMP_65(bool) = TMP_63 || TMP_64
CONDITION TMP_65"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_62(F3Ddatasets.Player) -> plyr_[_pID]
REF_63(uint256) -> REF_62.laff
_affID(uint256) := REF_63(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_64(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_64(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_65(F3Ddatasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
TMP_66(bool) = _affID != REF_66
CONDITION TMP_66"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_67(F3Ddatasets.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
REF_68(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_67(uint256) = INTERNAL_CALL, Duang8.verifyTeam(uint256)(_team)
_team(uint256) := TMP_67(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, Duang8.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Duang8.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Duang8.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, Duang8.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 188.sol-Duang8-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_268 = CONVERT PlayerBook to address
TMP_269(bool) = msg.sender == TMP_268
TMP_270(None) = SOLIDITY_CALL require(bool,string)(TMP_269,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_439(uint256) -> pIDxAddr_[_addr]
TMP_271(bool) = REF_439 != _pID
CONDITION TMP_271"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_440(uint256) -> pIDxAddr_[_addr]
REF_440(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_441(uint256) -> pIDxName_[_name]
TMP_272(bool) = REF_441 != _pID
CONDITION TMP_272"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_442(uint256) -> pIDxName_[_name]
REF_442(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_443(F3Ddatasets.Player) -> plyr_[_pID]
REF_444(address) -> REF_443.addr
TMP_273(bool) = REF_444 != _addr
CONDITION TMP_273"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_445(F3Ddatasets.Player) -> plyr_[_pID]
REF_446(address) -> REF_445.addr
REF_446(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_447(F3Ddatasets.Player) -> plyr_[_pID]
REF_448(bytes32) -> REF_447.name
TMP_274(bool) = REF_448 != _name
CONDITION TMP_274"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_449(F3Ddatasets.Player) -> plyr_[_pID]
REF_450(bytes32) -> REF_449.name
REF_450(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_451(F3Ddatasets.Player) -> plyr_[_pID]
REF_452(uint256) -> REF_451.laff
TMP_275(bool) = REF_452 != _laff
CONDITION TMP_275"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_453(F3Ddatasets.Player) -> plyr_[_pID]
REF_454(uint256) -> REF_453.laff
REF_454(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_455(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_456(bool) -> REF_455[_name]
TMP_276(bool) = REF_456 == False
CONDITION TMP_276"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_457(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_458(bool) -> REF_457[_name]
REF_458(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 188.sol-Duang8-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_277 = CONVERT PlayerBook to address
TMP_278(bool) = msg.sender == TMP_277
TMP_279(None) = SOLIDITY_CALL require(bool,string)(TMP_278,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_459(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_460(bool) -> REF_459[_name]
TMP_280(bool) = REF_460 == False
CONDITION TMP_280"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_461(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_462(bool) -> REF_461[_name]
REF_462(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 188.sol-Duang8-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_103(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_103(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_111(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_111(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_113(F3Ddatasets.Player) -> plyr_[_affID]
REF_114(address) -> REF_113.addr
REF_115(F3Ddatasets.Player) -> plyr_[_affID]
REF_116(bytes32) -> REF_115.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_114,REF_116,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Duang8.isHuman()()"];
9->1;
}
// Function: 188.sol-Duang8-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_107(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_107(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_120(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_120(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_122(F3Ddatasets.Player) -> plyr_[_affID]
REF_123(address) -> REF_122.addr
REF_124(F3Ddatasets.Player) -> plyr_[_affID]
REF_125(bytes32) -> REF_124.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_123,REF_125,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Duang8.isHuman()()"];
9->1;
}
// Function: 188.sol-Duang8-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_111(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_111(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_129(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_129(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_131(F3Ddatasets.Player) -> plyr_[_affID]
REF_132(address) -> REF_131.addr
REF_133(F3Ddatasets.Player) -> plyr_[_affID]
REF_134(bytes32) -> REF_133.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_132,REF_134,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Duang8.isHuman()()"];
9->1;
}
// Function: 188.sol-Duang8-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0xE840E25BaB3F1F02eb1244a3aDC8965F5864f22E)

IRs:
TMP_463 = CONVERT 1325932825093778428091503386537449774226830848558 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_463(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = duang8

IRs:
name(string) := duang8(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = duang8

IRs:
symbol(string) := duang8(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 86400

IRs:
rndInit_(uint256) := 86400(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndLimit_ = 5000

IRs:
rndLimit_(uint256) := 5000(uint256)"];
}
// Function: 188.sol-Duang8-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
shareCom = 0x2F0839f736197117796967452310F025a330DA45

IRs:
shareCom(address) := 268506021712261855395906270391384616368625211973(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
groupCut = 0x2924C3BfA7A20eB7AEcB6c38F4576eDcf7a72Df3

IRs:
groupCut(address) := 234888500543435823967744896813503283963592388083(address)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndExtra_ = 0

IRs:
rndExtra_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndGap_ = 120

IRs:
rndGap_(uint256) := 120(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 188.sol-Duang8-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_329(uint256) = INTERNAL_CALL, Duang8.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_329(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_330(bool) = _earnings > 0
CONDITION TMP_330"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_550(F3Ddatasets.Player) -> plyr_[_pID]
REF_551(uint256) -> REF_550.gen
REF_553(F3Ddatasets.Player) -> plyr_[_pID]
REF_554(uint256) -> REF_553.gen
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_554'] 
REF_551(uint256) (->plyr_) := TMP_331(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_555(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_556(F3Ddatasets.PlayerRounds) -> REF_555[_rIDlast]
REF_557(uint256) -> REF_556.mask
REF_559(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_560(F3Ddatasets.PlayerRounds) -> REF_559[_rIDlast]
REF_561(uint256) -> REF_560.mask
TMP_332(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_561'] 
REF_557(uint256) (->plyrRnds_) := TMP_332(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 188.sol-Duang8-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_431(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_665(F3Ddatasets.Round) -> round_[_rID]
REF_666(uint256) -> REF_665.keys
TMP_432(uint256) = TMP_431 / REF_666
_ppt(uint256) := TMP_432(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_667(F3Ddatasets.Round) -> round_[_rID]
REF_668(uint256) -> REF_667.mask
REF_670(F3Ddatasets.Round) -> round_[_rID]
REF_671(uint256) -> REF_670.mask
TMP_433(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_671'] 
REF_668(uint256) (->round_) := TMP_433(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_434(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_435(uint256) = TMP_434 / 1000000000000000000
_pearn(uint256) := TMP_435(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_673(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_674(F3Ddatasets.PlayerRounds) -> REF_673[_rID]
REF_675(uint256) -> REF_674.mask
REF_676(F3Ddatasets.Round) -> round_[_rID]
REF_677(uint256) -> REF_676.mask
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_677', '_keys'] 
TMP_437(uint256) = TMP_436 / 1000000000000000000
TMP_438(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_437', '_pearn'] 
REF_681(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_682(F3Ddatasets.PlayerRounds) -> REF_681[_rID]
REF_683(uint256) -> REF_682.mask
TMP_439(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_438', 'REF_683'] 
REF_675(uint256) (->plyrRnds_) := TMP_439(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_686(F3Ddatasets.Round) -> round_[_rID]
REF_687(uint256) -> REF_686.keys
TMP_440(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_687'] 
TMP_441(uint256) = TMP_440 / 1000000000000000000
TMP_442(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_441'] 
RETURN TMP_442"];
}
// Function: 188.sol-Duang8-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_rndInc = rndInc_

IRs:
_rndInc(uint256) := rndInc_(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].pot > rndLimit_

IRs:
REF_562(F3Ddatasets.Round) -> round_[_rID]
REF_563(uint256) -> REF_562.pot
TMP_333(bool) = REF_563 > rndLimit_
CONDITION TMP_333"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_rndInc = _rndInc / 2

IRs:
TMP_334(uint256) = _rndInc / 2
_rndInc(uint256) := TMP_334(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_564(F3Ddatasets.Round) -> round_[_rID]
REF_565(uint256) -> REF_564.end
TMP_335(bool) = _now > REF_565
REF_566(F3Ddatasets.Round) -> round_[_rID]
REF_567(uint256) -> REF_566.plyr
TMP_336(bool) = REF_567 == 0
TMP_337(bool) = TMP_335 && TMP_336
CONDITION TMP_337"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(_rndInc)).add(_now)

IRs:
TMP_338(uint256) = _keys / 1000000000000000000
TMP_339(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_338', '_rndInc'] 
TMP_340(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_339', '_now'] 
_newTime(uint256) := TMP_340(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(_rndInc)).add(round_[_rID].end)

IRs:
TMP_341(uint256) = _keys / 1000000000000000000
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_341', '_rndInc'] 
REF_572(F3Ddatasets.Round) -> round_[_rID]
REF_573(uint256) -> REF_572.end
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_342', 'REF_573'] 
_newTime(uint256) := TMP_343(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_345(bool) = _newTime < TMP_344
CONDITION TMP_345"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_575(F3Ddatasets.Round) -> round_[_rID]
REF_576(uint256) -> REF_575.end
REF_576(uint256) (->round_) := _newTime(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_577(F3Ddatasets.Round) -> round_[_rID]
REF_578(uint256) -> REF_577.end
TMP_346(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_578(uint256) (->round_) := TMP_346(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
}
// Function: 188.sol-Duang8-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_290(bool) = _team < 0
TMP_291(bool) = _team > 3
TMP_292(bool) = TMP_290 || TMP_291
CONDITION TMP_292"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 188.sol-Duang8-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->33;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_69(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_69(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_70(F3Ddatasets.Round) -> round_[_rID]
REF_71(uint256) -> REF_70.end
TMP_72(bool) = _now > REF_71
REF_72(F3Ddatasets.Round) -> round_[_rID]
REF_73(bool) -> REF_72.ended
TMP_73(bool) = REF_73 == False
TMP_74(bool) = TMP_72 && TMP_73
REF_74(F3Ddatasets.Round) -> round_[_rID]
REF_75(uint256) -> REF_74.plyr
TMP_75(bool) = REF_75 != 0
TMP_76(bool) = TMP_74 && TMP_75
CONDITION TMP_76"];
6->7[label="True"];
6->22[label="False"];
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_76(F3Ddatasets.Round) -> round_[_rID]
REF_77(bool) -> REF_76.ended
REF_77(bool) (->round_) := True(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_77(F3Ddatasets.EventReturns) = INTERNAL_CALL, Duang8.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_77(F3Ddatasets.EventReturns)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_78(uint256) = INTERNAL_CALL, Duang8.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_78(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_eth > 0

IRs:
TMP_79(bool) = _eth > 0
CONDITION TMP_79"];
11->12[label="True"];
11->18[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_withdrawFee = _eth / 10

IRs:
TMP_80(uint256) = _eth / 10
_withdrawFee(uint256) := TMP_80(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
_p1 = _withdrawFee / 2

IRs:
TMP_81(uint256) = _withdrawFee / 2
_p1(uint256) := TMP_81(uint256)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
_p2 = _withdrawFee / 2

IRs:
TMP_82(uint256) = _withdrawFee / 2
_p2(uint256) := TMP_82(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
shareCom.transfer(_p1)

IRs:
Transfer dest:shareCom value:_p1"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
admin.transfer(_p2)

IRs:
Transfer dest:admin value:_p2"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
plyr_[_pID].addr.transfer(_eth.sub(_withdrawFee))

IRs:
REF_80(F3Ddatasets.Player) -> plyr_[_pID]
REF_81(address) -> REF_80.addr
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_withdrawFee'] 
Transfer dest:REF_81 value:TMP_85"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_84(uint256) -> _eventData_.compressedData
REF_85(uint256) -> _eventData_.compressedData
TMP_87(uint256) = _now * 1000000000000000000
TMP_88(uint256) = REF_85 + TMP_87
REF_84(uint256) (->_eventData_) := TMP_88(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_86(uint256) -> _eventData_.compressedIDs
REF_87(uint256) -> _eventData_.compressedIDs
TMP_89(uint256) = REF_87 + _pID
REF_86(uint256) (->_eventData_) := TMP_89(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_89(F3Ddatasets.Player) -> plyr_[_pID]
REF_90(bytes32) -> REF_89.name
REF_91(uint256) -> _eventData_.compressedData
REF_92(uint256) -> _eventData_.compressedIDs
REF_93(address) -> _eventData_.winnerAddr
REF_94(bytes32) -> _eventData_.winnerName
REF_95(uint256) -> _eventData_.amountWon
REF_96(uint256) -> _eventData_.newPot
REF_97(uint256) -> _eventData_.P3DAmount
REF_98(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_90,_eth,REF_91,REF_92,REF_93,REF_94,REF_95,REF_96,REF_97,REF_98)"];
21->32;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_91(uint256) = INTERNAL_CALL, Duang8.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_91(uint256)"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_eth > 0

IRs:
TMP_92(bool) = _eth > 0
CONDITION TMP_92"];
23->24[label="True"];
23->30[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_withdrawFee = _eth / 10

IRs:
TMP_93(uint256) = _eth / 10
_withdrawFee(uint256) := TMP_93(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_p1 = _withdrawFee / 2

IRs:
TMP_94(uint256) = _withdrawFee / 2
_p1(uint256) := TMP_94(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_p2 = _withdrawFee / 2

IRs:
TMP_95(uint256) = _withdrawFee / 2
_p2(uint256) := TMP_95(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
shareCom.transfer(_p1)

IRs:
Transfer dest:shareCom value:_p1"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
admin.transfer(_p2)

IRs:
Transfer dest:admin value:_p2"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
plyr_[_pID].addr.transfer(_eth.sub(_withdrawFee))

IRs:
REF_101(F3Ddatasets.Player) -> plyr_[_pID]
REF_102(address) -> REF_101.addr
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_withdrawFee'] 
Transfer dest:REF_102 value:TMP_98"];
29->30;
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_106(F3Ddatasets.Player) -> plyr_[_pID]
REF_107(bytes32) -> REF_106.name
Emit onWithdraw(_pID,msg.sender,REF_107,_eth,_now)"];
31->32;
32[label="Node Type: END_IF 32
"];
33[label="Node Type: EXPRESSION 33

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, Duang8.isActivated()()"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, Duang8.isHuman()()"];
34->1;
}
// Function: 188.sol-Duang8-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_688(F3Ddatasets.Player) -> plyr_[_pID]
REF_689(uint256) -> REF_688.lrnd
INTERNAL_CALL, Duang8.updateGenVault(uint256,uint256)(_pID,REF_689)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_690(F3Ddatasets.Player) -> plyr_[_pID]
REF_691(uint256) -> REF_690.win
REF_693(F3Ddatasets.Player) -> plyr_[_pID]
REF_694(uint256) -> REF_693.gen
TMP_444(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_691', 'REF_694'] 
REF_696(F3Ddatasets.Player) -> plyr_[_pID]
REF_697(uint256) -> REF_696.aff
TMP_445(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_444', 'REF_697'] 
_earnings(uint256) := TMP_445(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_446(bool) = _earnings > 0
CONDITION TMP_446"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_698(F3Ddatasets.Player) -> plyr_[_pID]
REF_699(uint256) -> REF_698.win
REF_699(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_700(F3Ddatasets.Player) -> plyr_[_pID]
REF_701(uint256) -> REF_700.gen
REF_701(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_702(F3Ddatasets.Player) -> plyr_[_pID]
REF_703(uint256) -> REF_702.aff
REF_703(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 188.sol-F3DKeysCalcShort-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_486(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_486'] 
TMP_488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_489(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_488'] 
TMP_490(uint256) = TMP_489 / 2
TMP_491(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_487', 'TMP_490'] 
TMP_492(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_493(uint256) = TMP_491 / TMP_492
RETURN TMP_493"];
}
// Function: 188.sol-F3DKeysCalcShort-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_476(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(_curKeys)
TMP_477(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_478(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(TMP_477)
TMP_479(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_476', 'TMP_478'] 
RETURN TMP_479"];
}
// Function: 188.sol-F3DKeysCalcShort-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_480(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_481(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_480', '312500000000000000000000000'] 
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_481', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_482'] 
TMP_484(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_483', '74999921875000000000000000000000'] 
TMP_485(uint256) = TMP_484 / 156250000
RETURN TMP_485"];
}
// Function: 188.sol-F3DKeysCalcShort-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_472(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_473(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(TMP_472)
TMP_474(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(_curEth)
TMP_475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_473', 'TMP_474'] 
RETURN TMP_475"];
}
// Function: 188.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_494 = CONVERT _input to bytes
_temp(bytes) := TMP_494(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_739 -> LENGTH _temp
_length(uint256) := REF_739(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_495(bool) = _length <= 32
TMP_496(bool) = _length > 0
TMP_497(bool) = TMP_495 && TMP_496
TMP_498(None) = SOLIDITY_CALL require(bool,string)(TMP_497,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_740(None) -> _temp[0]
TMP_499(bool) = REF_740 != 32
TMP_500(uint256) = _length - 1
REF_741(None) -> _temp[TMP_500]
TMP_501(bool) = REF_741 != 32
TMP_502(bool) = TMP_499 && TMP_501
TMP_503(None) = SOLIDITY_CALL require(bool,string)(TMP_502,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_742(None) -> _temp[0]
TMP_504(bool) = REF_742 == 48
CONDITION TMP_504"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_743(None) -> _temp[1]
TMP_505(bool) = REF_743 != 120
TMP_506(None) = SOLIDITY_CALL require(bool,string)(TMP_505,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_744(None) -> _temp[1]
TMP_507(bool) = REF_744 != 88
TMP_508(None) = SOLIDITY_CALL require(bool,string)(TMP_507,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_509(bool) = i < _length
CONDITION TMP_509"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_745(None) -> _temp[i]
TMP_510(bool) = REF_745 > 64
REF_746(None) -> _temp[i]
TMP_511(bool) = REF_746 < 91
TMP_512(bool) = TMP_510 && TMP_511
CONDITION TMP_512"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_747(bytes1) -> _temp[i]
REF_748(None) -> _temp[i]
TMP_513 = CONVERT REF_748 to uint256
TMP_514(uint256) = TMP_513 + 32
TMP_515 = CONVERT TMP_514 to bytes1
REF_747(bytes1) (->_temp) := TMP_515(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_516(bool) = _hasNonNumber == False
CONDITION TMP_516"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_749(None) -> _temp[i]
TMP_517(bool) = REF_749 == 32
REF_750(None) -> _temp[i]
TMP_518(bool) = REF_750 > 96
REF_751(None) -> _temp[i]
TMP_519(bool) = REF_751 < 123
TMP_520(bool) = TMP_518 && TMP_519
TMP_521(bool) = TMP_517 || TMP_520
REF_752(None) -> _temp[i]
TMP_522(bool) = REF_752 > 47
REF_753(None) -> _temp[i]
TMP_523(bool) = REF_753 < 58
TMP_524(bool) = TMP_522 && TMP_523
TMP_525(bool) = TMP_521 || TMP_524
TMP_526(None) = SOLIDITY_CALL require(bool,string)(TMP_525,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_754(None) -> _temp[i]
TMP_527(bool) = REF_754 == 32
CONDITION TMP_527"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_528(uint256) = i + 1
REF_755(None) -> _temp[TMP_528]
TMP_529(bool) = REF_755 != 32
TMP_530(None) = SOLIDITY_CALL require(bool,string)(TMP_529,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_531(bool) = _hasNonNumber == False
REF_756(None) -> _temp[i]
TMP_532(bool) = REF_756 < 48
REF_757(None) -> _temp[i]
TMP_533(bool) = REF_757 > 57
TMP_534(bool) = TMP_532 || TMP_533
TMP_535(bool) = TMP_531 && TMP_534
CONDITION TMP_535"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_536(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_537(bool) = _hasNonNumber == True
TMP_538(None) = SOLIDITY_CALL require(bool,string)(TMP_537,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 188.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 188.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 188.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 188.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 188.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 188.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 188.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 188.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 188.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_547(uint256) = a + b
c(uint256) := TMP_547(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_548(bool) = c >= a
TMP_549(None) = SOLIDITY_CALL require(bool,string)(TMP_548,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 188.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_539(bool) = a == 0
CONDITION TMP_539"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_540(uint256) = a * b
c(uint256) := TMP_540(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_541(uint256) = c / a
TMP_542(bool) = TMP_541 == b
TMP_543(None) = SOLIDITY_CALL require(bool,string)(TMP_542,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 188.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_557(bool) = x == 0
CONDITION TMP_557"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_558(bool) = y == 0
CONDITION TMP_558"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_559(bool) = i < y
CONDITION TMP_559"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_560(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_560(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_561(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 188.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_556(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_556"];
}
// Function: 188.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_550(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_551(uint256) = TMP_550 / 2
z(uint256) := TMP_551(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_552(bool) = z < y
CONDITION TMP_552"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_553(uint256) = x / z
TMP_554(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_553,z)
TMP_555(uint256) = TMP_554 / 2
z(uint256) := TMP_555(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 188.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_544(bool) = b <= a
TMP_545(None) = SOLIDITY_CALL require(bool,string)(TMP_544,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_546(uint256) = a - b
RETURN TMP_546"];
}
}
