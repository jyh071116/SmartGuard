digraph G {
// Function: 2293.sol-IMintableToken-mint(address,uint256)
digraph{
}
// Function: 2293.sol-RBACMixin-_setMinter(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(minters[_who] != _flag)

IRs:
REF_4(bool) -> minters[_who]
TMP_13(bool) = REF_4 != _flag
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
minters[_who] = _flag

IRs:
REF_5(bool) -> minters[_who]
REF_5(bool) (->minters) := _flag(bool)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_flag

IRs:
CONDITION _flag"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
AddMinter(_who)

IRs:
Emit AddMinter(_who)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
DeleteMinter(_who)

IRs:
Emit DeleteMinter(_who)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2293.sol-RBACMixin-_setOwner(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owners[_who] != _flag)

IRs:
REF_2(bool) -> owners[_who]
TMP_9(bool) = REF_2 != _flag
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owners[_who] = _flag

IRs:
REF_3(bool) -> owners[_who]
REF_3(bool) (->owners) := _flag(bool)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_flag

IRs:
CONDITION _flag"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
AddOwner(_who)

IRs:
Emit AddOwner(_who)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
DeleteOwner(_who)

IRs:
Emit DeleteOwner(_who)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2293.sol-RBACMixin-addMinter(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_setMinter(_who,true)

IRs:
TMP_5(bool) = INTERNAL_CALL, RBACMixin._setMinter(address,bool)(_who,True)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RBACMixin.onlyOwner()()"];
2->1;
}
// Function: 2293.sol-RBACMixin-addOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_setOwner(_who,true)

IRs:
TMP_1(bool) = INTERNAL_CALL, RBACMixin._setOwner(address,bool)(_who,True)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RBACMixin.onlyOwner()()"];
2->1;
}
// Function: 2293.sol-RBACMixin-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_setOwner(msg.sender,true)

IRs:
TMP_0(bool) = INTERNAL_CALL, RBACMixin._setOwner(address,bool)(msg.sender,True)"];
}
// Function: 2293.sol-RBACMixin-deleteMinter(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_setMinter(_who,false)

IRs:
TMP_7(bool) = INTERNAL_CALL, RBACMixin._setMinter(address,bool)(_who,False)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RBACMixin.onlyOwner()()"];
2->1;
}
// Function: 2293.sol-RBACMixin-deleteOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_setOwner(_who,false)

IRs:
TMP_3(bool) = INTERNAL_CALL, RBACMixin._setOwner(address,bool)(_who,False)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RBACMixin.onlyOwner()()"];
2->1;
}
// Function: 2293.sol-RBACMixin-isMinter(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
minters[_who]

IRs:
REF_1(bool) -> minters[_who]
RETURN REF_1"];
}
// Function: 2293.sol-RBACMixin-isOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owners[_who]

IRs:
REF_0(bool) -> owners[_who]
RETURN REF_0"];
}
// Function: 2293.sol-RBACMixin-onlyMinter()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isMinter(msg.sender),FORBIDDEN)

IRs:
TMP_19(bool) = INTERNAL_CALL, RBACMixin.isMinter(address)(msg.sender)
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,FORBIDDEN)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2293.sol-RBACMixin-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isOwner(msg.sender),FORBIDDEN)

IRs:
TMP_17(bool) = INTERNAL_CALL, RBACMixin.isOwner(address)(msg.sender)
TMP_18(None) = SOLIDITY_CALL require(bool,string)(TMP_17,FORBIDDEN)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2293.sol-RBACMixin-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
FORBIDDEN = Haven't enough right to access

IRs:
FORBIDDEN(string) := Haven't enough right to access(string)"];
}
// Function: 2293.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_30(uint256) = a + b
c(uint256) := TMP_30(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_31(bool) = c >= a
TMP_32(None) = SOLIDITY_CALL assert(bool)(TMP_31)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2293.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_26(uint256) = a / b
RETURN TMP_26"];
}
// Function: 2293.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_21(bool) = a == 0
CONDITION TMP_21"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_22(uint256) = a * b
c(uint256) := TMP_22(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_23(uint256) = c / a
TMP_24(bool) = TMP_23 == b
TMP_25(None) = SOLIDITY_CALL assert(bool)(TMP_24)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2293.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_27(bool) = b <= a
TMP_28(None) = SOLIDITY_CALL assert(bool)(TMP_27)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_29(uint256) = a - b
RETURN TMP_29"];
}
// Function: 2293.sol-TokenBucket-_setMinter(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(minters[_who] != _flag)

IRs:
REF_10(bool) -> minters[_who]
TMP_46(bool) = REF_10 != _flag
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
minters[_who] = _flag

IRs:
REF_11(bool) -> minters[_who]
REF_11(bool) (->minters) := _flag(bool)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_flag

IRs:
CONDITION _flag"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
AddMinter(_who)

IRs:
Emit AddMinter(_who)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
DeleteMinter(_who)

IRs:
Emit DeleteMinter(_who)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2293.sol-TokenBucket-_setOwner(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owners[_who] != _flag)

IRs:
REF_8(bool) -> owners[_who]
TMP_42(bool) = REF_8 != _flag
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owners[_who] = _flag

IRs:
REF_9(bool) -> owners[_who]
REF_9(bool) (->owners) := _flag(bool)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_flag

IRs:
CONDITION _flag"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
AddOwner(_who)

IRs:
Emit AddOwner(_who)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
DeleteOwner(_who)

IRs:
Emit DeleteOwner(_who)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2293.sol-TokenBucket-addMinter(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_setMinter(_who,true)

IRs:
TMP_38(bool) = INTERNAL_CALL, RBACMixin._setMinter(address,bool)(_who,True)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RBACMixin.onlyOwner()()"];
2->1;
}
// Function: 2293.sol-TokenBucket-addOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_setOwner(_who,true)

IRs:
TMP_34(bool) = INTERNAL_CALL, RBACMixin._setOwner(address,bool)(_who,True)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RBACMixin.onlyOwner()()"];
2->1;
}
// Function: 2293.sol-TokenBucket-availableTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
timeAfterMint = now.sub(lastMintTime)

IRs:
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['now', 'lastMintTime'] 
timeAfterMint(uint256) := TMP_64(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
refillAmount = rate.mul(timeAfterMint).add(leftOnLastMint)

IRs:
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['rate', 'timeAfterMint'] 
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_65', 'leftOnLastMint'] 
refillAmount(uint256) := TMP_66(uint256)"];
2->4;
4[label="Node Type: IF 4

EXPRESSION:
size < refillAmount

IRs:
TMP_67(bool) = size < refillAmount
CONDITION TMP_67"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
size

IRs:
RETURN size"];
6[label="Node Type: RETURN 6

EXPRESSION:
refillAmount

IRs:
RETURN refillAmount"];
}
// Function: 2293.sol-TokenBucket-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_setOwner(msg.sender,true)

IRs:
TMP_33(bool) = INTERNAL_CALL, RBACMixin._setOwner(address,bool)(msg.sender,True)"];
}
// Function: 2293.sol-TokenBucket-constructor(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = IMintableToken(_token)

IRs:
TMP_50 = CONVERT _token to IMintableToken
token(IMintableToken) := TMP_50(IMintableToken)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
size = _size

IRs:
size(uint256) := _size(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
leftOnLastMint = _size

IRs:
leftOnLastMint(uint256) := _size(uint256)"];
}
// Function: 2293.sol-TokenBucket-deleteMinter(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_setMinter(_who,false)

IRs:
TMP_40(bool) = INTERNAL_CALL, RBACMixin._setMinter(address,bool)(_who,False)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RBACMixin.onlyOwner()()"];
2->1;
}
// Function: 2293.sol-TokenBucket-deleteOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_setOwner(_who,false)

IRs:
TMP_36(bool) = INTERNAL_CALL, RBACMixin._setOwner(address,bool)(_who,False)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RBACMixin.onlyOwner()()"];
2->1;
}
// Function: 2293.sol-TokenBucket-isMinter(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
minters[_who]

IRs:
REF_7(bool) -> minters[_who]
RETURN REF_7"];
}
// Function: 2293.sol-TokenBucket-isOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owners[_who]

IRs:
REF_6(bool) -> owners[_who]
RETURN REF_6"];
}
// Function: 2293.sol-TokenBucket-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
available = availableTokens()

IRs:
TMP_57(uint256) = INTERNAL_CALL, TokenBucket.availableTokens()()
available(uint256) := TMP_57(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= available)

IRs:
TMP_58(bool) = _amount <= available
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
leftOnLastMint = available.sub(_amount)

IRs:
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['available', '_amount'] 
leftOnLastMint(uint256) := TMP_60(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
lastMintTime = now

IRs:
lastMintTime(uint256) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(token.mint(_to,_amount))

IRs:
TMP_61(bool) = HIGH_LEVEL_CALL, dest:token(IMintableToken), function:mint, arguments:['_to', '_amount']  
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyMinter()

IRs:
MODIFIER_CALL, RBACMixin.onlyMinter()()"];
7->1;
}
// Function: 2293.sol-TokenBucket-onlyMinter()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isMinter(msg.sender),FORBIDDEN)

IRs:
TMP_70(bool) = INTERNAL_CALL, RBACMixin.isMinter(address)(msg.sender)
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,FORBIDDEN)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2293.sol-TokenBucket-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isOwner(msg.sender),FORBIDDEN)

IRs:
TMP_68(bool) = INTERNAL_CALL, RBACMixin.isOwner(address)(msg.sender)
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,FORBIDDEN)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2293.sol-TokenBucket-setRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RBACMixin.onlyOwner()()"];
3->1;
}
// Function: 2293.sol-TokenBucket-setSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
size = _size

IRs:
size(uint256) := _size(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RBACMixin.onlyOwner()()"];
3->1;
}
// Function: 2293.sol-TokenBucket-setSizeAndRate(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
setSize(_size) && setRate(_rate)

IRs:
TMP_53(bool) = INTERNAL_CALL, TokenBucket.setSize(uint256)(_size)
TMP_54(bool) = INTERNAL_CALL, TokenBucket.setRate(uint256)(_rate)
TMP_55(bool) = TMP_53 && TMP_54
RETURN TMP_55"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, RBACMixin.onlyOwner()()"];
2->1;
}
// Function: 2293.sol-TokenBucket-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
FORBIDDEN = Haven't enough right to access

IRs:
FORBIDDEN(string) := Haven't enough right to access(string)"];
}
}
