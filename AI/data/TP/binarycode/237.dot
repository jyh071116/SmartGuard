digraph G {
// Function: 237.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_112(uint256) = a + b
c(uint256) := TMP_112(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_113(bool) = c >= a
TMP_114(None) = SOLIDITY_CALL assert(bool)(TMP_113)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 237.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_108(uint256) = a / b
c(uint256) := TMP_108(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 237.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_103(bool) = a == 0
CONDITION TMP_103"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_104(uint256) = a * b
c(uint256) := TMP_104(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_105(uint256) = c / a
TMP_106(bool) = TMP_105 == b
TMP_107(None) = SOLIDITY_CALL assert(bool)(TMP_106)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 237.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_109(bool) = b <= a
TMP_110(None) = SOLIDITY_CALL assert(bool)(TMP_109)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_111(uint256) = a - b
RETURN TMP_111"];
}
// Function: 237.sol-braggerContract-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_80(bool) = _to != 0
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_83(uint256) -> balanceOf[_from]
TMP_82(bool) = REF_83 >= _value
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value > balanceOf[_to])

IRs:
REF_84(uint256) -> balanceOf[_to]
TMP_84(uint256) = REF_84 + _value
REF_85(uint256) -> balanceOf[_to]
TMP_85(bool) = TMP_84 > REF_85
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balanceOf[_from] + balanceOf[_to]

IRs:
REF_86(uint256) -> balanceOf[_from]
REF_87(uint256) -> balanceOf[_to]
TMP_87(uint256) = REF_86 + REF_87
previousBalances(uint256) := TMP_87(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_88(uint256) -> balanceOf[_from]
REF_88(-> balanceOf) = REF_88 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_89(uint256) -> balanceOf[_to]
REF_89(-> balanceOf) = REF_89 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances)

IRs:
REF_90(uint256) -> balanceOf[_from]
REF_91(uint256) -> balanceOf[_to]
TMP_89(uint256) = REF_90 + REF_91
TMP_90(bool) = TMP_89 == previousBalances
TMP_91(None) = SOLIDITY_CALL assert(bool)(TMP_90)"];
}
// Function: 237.sol-braggerContract-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_96(mapping(address => uint256)) -> allowance[msg.sender]
REF_97(uint256) -> REF_96[_spender]
REF_97(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 237.sol-braggerContract-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = tokenRecipient(_spender)

IRs:
TMP_96 = CONVERT _spender to tokenRecipient
spender(tokenRecipient) := TMP_96(tokenRecipient)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_97(bool) = INTERNAL_CALL, braggerContract.approve(address,uint256)(_spender,_value)
CONDITION TMP_97"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spender.receiveApproval(msg.sender,_value,this,_extraData)

IRs:
HIGH_LEVEL_CALL, dest:spender(tokenRecipient), function:receiveApproval, arguments:['msg.sender', '_value', 'this', '_extraData']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 237.sol-braggerContract-arrayLength()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
length = braggers.length

IRs:
REF_12 -> LENGTH braggers
length(uint256) := REF_12(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
length

IRs:
RETURN length"];
3[label="Node Type: RETURN 3

EXPRESSION:
length

IRs:
RETURN length"];
}
// Function: 237.sol-braggerContract-brag()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
shortage = SafeMath.mul(30,SafeMath.div(msg.value,100))

IRs:
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['msg.value', '100'] 
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['30', 'TMP_27'] 
shortage(uint256) := TMP_28(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
braggers.length != 0

IRs:
REF_28 -> LENGTH braggers
TMP_29(bool) = REF_28 != 0
CONDITION TMP_29"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(braggers[braggers.length - 1].braggedAmount < msg.value)

IRs:
REF_29 -> LENGTH braggers
TMP_30(uint256) = REF_29 - 1
REF_30(braggerContract.Bragger) -> braggers[TMP_30]
REF_31(uint256) -> REF_30.braggedAmount
TMP_31(bool) = REF_31 < msg.value
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_bragger = Bragger({braggerAddress:msg.sender,braggedAmount:msg.value,braggerQuote:initialQuote})

IRs:
TMP_33(braggerContract.Bragger) = new Bragger(msg.sender,msg.value,initialQuote)
_bragger(braggerContract.Bragger) := TMP_33(braggerContract.Bragger)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
braggers.push(_bragger)

IRs:
REF_33 -> LENGTH braggers
TMP_35(uint256) := REF_33(uint256)
TMP_36(uint256) = TMP_35 + 1
REF_33(uint256) (->braggers) := TMP_36(uint256)
REF_34(braggerContract.Bragger) -> braggers[TMP_35]
REF_34(braggerContract.Bragger) (->braggers) := _bragger(braggerContract.Bragger)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
totalBraggedValue = totalBraggedValue + msg.value

IRs:
TMP_37(uint256) = totalBraggedValue + msg.value
totalBraggedValue(uint256) := TMP_37(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
winningpot = winningpot + SafeMath.sub(msg.value,shortage)

IRs:
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['msg.value', 'shortage'] 
TMP_39(uint256) = winningpot + TMP_38
winningpot(uint256) := TMP_39(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
bragAddress.transfer(shortage)

IRs:
Transfer dest:bragAddress value:shortage"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
random() == random2()

IRs:
TMP_41(uint8) = INTERNAL_CALL, braggerContract.random()()
TMP_42(uint8) = INTERNAL_CALL, braggerContract.random2()()
TMP_43(bool) = TMP_41 == TMP_42
CONDITION TMP_43"];
10->11[label="True"];
10->16[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
sender = msg.sender

IRs:
sender(address) := msg.sender(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
sender.transfer(SafeMath.mul(SafeMath.div(address(this).balance,100),70))

IRs:
TMP_44 = CONVERT this to address
TMP_45(uint256) = SOLIDITY_CALL balance(address)(TMP_44)
TMP_46(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_45', '100'] 
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_46', '70'] 
Transfer dest:sender value:TMP_47"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
luckyIndex = random3()

IRs:
TMP_49(uint8) = INTERNAL_CALL, braggerContract.random3()()
luckyIndex(uint256) := TMP_49(uint8)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
luckyGuy = braggers[luckyIndex].braggerAddress

IRs:
REF_40(braggerContract.Bragger) -> braggers[luckyIndex]
REF_41(address) -> REF_40.braggerAddress
luckyGuy(address) := REF_41(address)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
luckyGuy.transfer(address(this).balance)

IRs:
TMP_50 = CONVERT this to address
TMP_51(uint256) = SOLIDITY_CALL balance(address)(TMP_50)
Transfer dest:luckyGuy value:TMP_51"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
blocks = SafeMath.add(blocks,random())

IRs:
TMP_53(uint8) = INTERNAL_CALL, braggerContract.random()()
TMP_54(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['blocks', 'TMP_53'] 
blocks(uint256) := TMP_54(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
totalbrags += 1

IRs:
totalbrags(uint256) = totalbrags + 1"];
}
// Function: 237.sol-braggerContract-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
blocks = 0

IRs:
blocks(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerAddress = msg.sender

IRs:
ownerAddress(address) := msg.sender(address)"];
}
// Function: 237.sol-braggerContract-createNewUser(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isAlreadyUser(msg.sender))

IRs:
TMP_63(bool) = INTERNAL_CALL, braggerContract.isAlreadyUser(address)(msg.sender)
TMP_64 = UnaryType.BANG TMP_63 
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_user = User({userAddress:msg.sender,userName:_username})

IRs:
TMP_66(braggerContract.User) = new User(msg.sender,_username)
_user(braggerContract.User) := TMP_66(braggerContract.User)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
userWalletToUserName[msg.sender] = _username

IRs:
REF_54(string) -> userWalletToUserName[msg.sender]
REF_54(string) (->userWalletToUserName) := _username(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
userNameToUserWallet[_username] = msg.sender

IRs:
REF_55(address) -> userNameToUserWallet[_username]
REF_55(address) (->userNameToUserWallet) := msg.sender(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
userNameToPicture[_username] = _pictureUrl

IRs:
REF_56(string) -> userNameToPicture[_username]
REF_56(string) (->userNameToPicture) := _pictureUrl(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
userWalletToPicture[msg.sender] = _pictureUrl

IRs:
REF_57(string) -> userWalletToPicture[msg.sender]
REF_57(string) (->userWalletToPicture) := _pictureUrl(string)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
fineLevel[msg.sender] = 0

IRs:
REF_58(uint256) -> fineLevel[msg.sender]
REF_58(uint256) (->fineLevel) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
users.push(_user) - 1

IRs:
REF_60 -> LENGTH users
TMP_69(uint256) := REF_60(uint256)
TMP_70(uint256) = TMP_69 + 1
REF_60(uint256) (->users) := TMP_70(uint256)
REF_61(braggerContract.User) -> users[TMP_69]
REF_61(braggerContract.User) (->users) := _user(braggerContract.User)
TMP_68(None) = TMP_67 - 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isUser[msg.sender] = true

IRs:
REF_62(bool) -> isUser[msg.sender]
REF_62(bool) (->isUser) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
hasPicture[msg.sender] = true

IRs:
REF_63(bool) -> hasPicture[msg.sender]
REF_63(bool) (->hasPicture) := True(bool)"];
}
// Function: 237.sol-braggerContract-getBraggerAtIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_bragger = braggers[_index].braggerAddress

IRs:
REF_13(braggerContract.Bragger) -> braggers[_index]
REF_14(address) -> REF_13.braggerAddress
_bragger(address) := REF_14(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_brag = braggers[_index].braggedAmount

IRs:
REF_15(braggerContract.Bragger) -> braggers[_index]
REF_16(uint256) -> REF_15.braggedAmount
_brag(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
isAlreadyUser(_bragger)

IRs:
TMP_17(bool) = INTERNAL_CALL, braggerContract.isAlreadyUser(address)(_bragger)
CONDITION TMP_17"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_username = getUserNameByWallet(_bragger)

IRs:
TMP_18(string) = INTERNAL_CALL, braggerContract.getUserNameByWallet(address)(_bragger)
_username(string) := TMP_18(string)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_username = 

IRs:
_username(string) := (string)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
hasPicture[_bragger]

IRs:
REF_17(bool) -> hasPicture[_bragger]
CONDITION REF_17"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_picture = userWalletToPicture[_bragger]

IRs:
REF_18(string) -> userWalletToPicture[_bragger]
_picture(string) := REF_18(string)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_picture = initialPicture

IRs:
_picture(string) := initialPicture(string)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_bragger,_brag,_username,_picture)

IRs:
RETURN _bragger,_brag,_username,_picture"];
12[label="Node Type: RETURN 12

EXPRESSION:
(_bragger,_brag,_username,_picture)

IRs:
RETURN _bragger,_brag,_username,_picture"];
}
// Function: 237.sol-braggerContract-getCurrentBragKing()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_bragger = braggers[braggers.length - 1].braggerAddress

IRs:
REF_1 -> LENGTH braggers
TMP_12(uint256) = REF_1 - 1
REF_2(braggerContract.Bragger) -> braggers[TMP_12]
REF_3(address) -> REF_2.braggerAddress
_bragger(address) := REF_3(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_amount = braggers[braggers.length - 1].braggedAmount

IRs:
REF_4 -> LENGTH braggers
TMP_13(uint256) = REF_4 - 1
REF_5(braggerContract.Bragger) -> braggers[TMP_13]
REF_6(uint256) -> REF_5.braggedAmount
_amount(uint256) := REF_6(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_quote = braggers[braggers.length - 1].braggerQuote

IRs:
REF_7 -> LENGTH braggers
TMP_14(uint256) = REF_7 - 1
REF_8(braggerContract.Bragger) -> braggers[TMP_14]
REF_9(string) -> REF_8.braggerQuote
_quote(string) := REF_9(string)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
isAlreadyUser(_bragger)

IRs:
TMP_15(bool) = INTERNAL_CALL, braggerContract.isAlreadyUser(address)(_bragger)
CONDITION TMP_15"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_username = getUserNameByWallet(_bragger)

IRs:
TMP_16(string) = INTERNAL_CALL, braggerContract.getUserNameByWallet(address)(_bragger)
_username(string) := TMP_16(string)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_username = 

IRs:
_username(string) := (string)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
hasPicture[_bragger]

IRs:
REF_10(bool) -> hasPicture[_bragger]
CONDITION REF_10"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_picture = userWalletToPicture[_bragger]

IRs:
REF_11(string) -> userWalletToPicture[_bragger]
_picture(string) := REF_11(string)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_picture = initialPicture

IRs:
_picture(string) := initialPicture(string)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_bragger,_amount,_quote,_username,_picture)

IRs:
RETURN _bragger,_amount,_quote,_username,_picture"];
13[label="Node Type: RETURN 13

EXPRESSION:
(_bragger,_amount,_quote,_username,_picture)

IRs:
RETURN _bragger,_amount,_quote,_username,_picture"];
}
// Function: 237.sol-braggerContract-getCurrentPot()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
address(this).balance

IRs:
TMP_25 = CONVERT this to address
TMP_26(uint256) = SOLIDITY_CALL balance(address)(TMP_25)
RETURN TMP_26"];
2[label="Node Type: RETURN 2

EXPRESSION:
_amount

IRs:
RETURN _amount"];
}
// Function: 237.sol-braggerContract-getFineLevelOfAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_fineLevel = fineLevel[_user]

IRs:
REF_23(uint256) -> fineLevel[_user]
_fineLevel(uint256) := REF_23(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_fineAmount = _fineLevel * basicFine

IRs:
TMP_23(uint256) = _fineLevel * basicFine
_fineAmount(uint256) := TMP_23(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(_fineLevel,_fineAmount)

IRs:
RETURN _fineLevel,_fineAmount"];
4[label="Node Type: RETURN 4

EXPRESSION:
(_fineLevel,_fineAmount)

IRs:
RETURN _fineLevel,_fineAmount"];
}
// Function: 237.sol-braggerContract-getFineLevelOfUsername(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_user = userNameToUserWallet[_username]

IRs:
REF_24(address) -> userNameToUserWallet[_username]
_user(address) := REF_24(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_fineLevel = fineLevel[_user]

IRs:
REF_25(uint256) -> fineLevel[_user]
_fineLevel(uint256) := REF_25(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_fineAmount = _fineLevel * basicFine

IRs:
TMP_24(uint256) = _fineLevel * basicFine
_fineAmount(uint256) := TMP_24(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(_fineLevel,_fineAmount)

IRs:
RETURN _fineLevel,_fineAmount"];
5[label="Node Type: RETURN 5

EXPRESSION:
(_fineLevel,_fineAmount)

IRs:
RETURN _fineLevel,_fineAmount"];
}
// Function: 237.sol-braggerContract-getTotalBraggedVolume()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalBraggedValue

IRs:
RETURN totalBraggedValue"];
2[label="Node Type: RETURN 2

EXPRESSION:
_amount

IRs:
RETURN _amount"];
}
// Function: 237.sol-braggerContract-getTotalBrags()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalbrags

IRs:
RETURN totalbrags"];
}
// Function: 237.sol-braggerContract-getUserNameByWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAlreadyUser(_wallet))

IRs:
TMP_19(bool) = INTERNAL_CALL, braggerContract.isAlreadyUser(address)(_wallet)
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_username = userWalletToUserName[_wallet]

IRs:
REF_19(string) -> userWalletToUserName[_wallet]
_username(string) := REF_19(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_username

IRs:
RETURN _username"];
4[label="Node Type: RETURN 4

EXPRESSION:
_username

IRs:
RETURN _username"];
}
// Function: 237.sol-braggerContract-getUserPictureByUsername(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_url = userNameToPicture[_username]

IRs:
REF_22(string) -> userNameToPicture[_username]
_url(string) := REF_22(string)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_url)

IRs:
RETURN _url"];
3[label="Node Type: RETURN 3

EXPRESSION:
_url

IRs:
RETURN _url"];
}
// Function: 237.sol-braggerContract-getUserPictureByWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAlreadyUser(_wallet))

IRs:
TMP_21(bool) = INTERNAL_CALL, braggerContract.isAlreadyUser(address)(_wallet)
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_url = userWalletToPicture[_wallet]

IRs:
REF_20(string) -> userWalletToPicture[_wallet]
_url(string) := REF_20(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_url

IRs:
RETURN _url"];
4[label="Node Type: RETURN 4

EXPRESSION:
_url

IRs:
RETURN _url"];
}
// Function: 237.sol-braggerContract-getUserWalletByUsername(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_user = userNameToUserWallet[_username]

IRs:
REF_21(address) -> userNameToUserWallet[_username]
_user(address) := REF_21(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(_user)

IRs:
RETURN _user"];
3[label="Node Type: RETURN 3

EXPRESSION:
_address

IRs:
RETURN _address"];
}
// Function: 237.sol-braggerContract-getWinnerPot()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
winningpot

IRs:
RETURN winningpot"];
}
// Function: 237.sol-braggerContract-hasProfilePicture(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isUser[_address]

IRs:
REF_53(bool) -> isUser[_address]
CONDITION REF_53"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
5[label="Node Type: RETURN 5

EXPRESSION:
status

IRs:
RETURN status"];
}
// Function: 237.sol-braggerContract-isAlreadyUser(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isUser[_address]

IRs:
REF_52(bool) -> isUser[_address]
CONDITION REF_52"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
5[label="Node Type: RETURN 5

EXPRESSION:
status

IRs:
RETURN status"];
}
// Function: 237.sol-braggerContract-onlyCreator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == ownerAddress)

IRs:
TMP_101(bool) = msg.sender == ownerAddress
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 237.sol-braggerContract-random()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint8(uint256(keccak256()(block.timestamp,block.difficulty)) % 251)

IRs:
TMP_0(bytes32) = SOLIDITY_CALL keccak256()(block.timestamp,block.difficulty)
TMP_1 = CONVERT TMP_0 to uint256
TMP_2(uint256) = TMP_1 % 251
TMP_3 = CONVERT TMP_2 to uint8
RETURN TMP_3"];
}
// Function: 237.sol-braggerContract-random2()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint8(uint256(keccak256()(blocks,block.difficulty)) % 251)

IRs:
TMP_4(bytes32) = SOLIDITY_CALL keccak256()(blocks,block.difficulty)
TMP_5 = CONVERT TMP_4 to uint256
TMP_6(uint256) = TMP_5 % 251
TMP_7 = CONVERT TMP_6 to uint8
RETURN TMP_7"];
}
// Function: 237.sol-braggerContract-random3()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint8(uint256(keccak256()(blocks,block.difficulty)) % braggers.length)

IRs:
TMP_8(bytes32) = SOLIDITY_CALL keccak256()(blocks,block.difficulty)
TMP_9 = CONVERT TMP_8 to uint256
REF_0 -> LENGTH braggers
TMP_10(uint256) = TMP_9 % REF_0
TMP_11 = CONVERT TMP_10 to uint8
RETURN TMP_11"];
}
// Function: 237.sol-braggerContract-reset()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(ownerAddress)

IRs:
TMP_99(None) = SOLIDITY_CALL selfdestruct(address)(ownerAddress)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCreator()

IRs:
MODIFIER_CALL, braggerContract.onlyCreator()()"];
2->1;
}
// Function: 237.sol-braggerContract-resetQuote()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
braggers[braggers.length - 1].braggerQuote = initialQuote

IRs:
REF_64 -> LENGTH braggers
TMP_71(uint256) = REF_64 - 1
REF_65(braggerContract.Bragger) -> braggers[TMP_71]
REF_66(string) -> REF_65.braggerQuote
REF_66(string) (->braggers) := initialQuote(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fineLevel[braggers[braggers.length - 1].braggerAddress] = fineLevel[braggers[braggers.length - 1].braggerAddress] + 1

IRs:
REF_67 -> LENGTH braggers
TMP_72(uint256) = REF_67 - 1
REF_68(braggerContract.Bragger) -> braggers[TMP_72]
REF_69(address) -> REF_68.braggerAddress
REF_70(uint256) -> fineLevel[REF_69]
REF_71 -> LENGTH braggers
TMP_73(uint256) = REF_71 - 1
REF_72(braggerContract.Bragger) -> braggers[TMP_73]
REF_73(address) -> REF_72.braggerAddress
REF_74(uint256) -> fineLevel[REF_73]
TMP_74(uint256) = REF_74 + 1
REF_70(uint256) (->fineLevel) := TMP_74(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCreator()

IRs:
MODIFIER_CALL, braggerContract.onlyCreator()()"];
3->1;
}
// Function: 237.sol-braggerContract-resetUserPicture(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
user = userNameToUserWallet[_username]

IRs:
REF_79(address) -> userNameToUserWallet[_username]
user(address) := REF_79(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
userWalletToPicture[user] = initialPicture

IRs:
REF_80(string) -> userWalletToPicture[user]
REF_80(string) (->userWalletToPicture) := initialPicture(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fineLevel[user] = fineLevel[user] + 1

IRs:
REF_81(uint256) -> fineLevel[user]
REF_82(uint256) -> fineLevel[user]
TMP_78(uint256) = REF_82 + 1
REF_81(uint256) (->fineLevel) := TMP_78(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyCreator()

IRs:
MODIFIER_CALL, braggerContract.onlyCreator()()"];
4->1;
}
// Function: 237.sol-braggerContract-resetUsername(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
user = userNameToUserWallet[_username]

IRs:
REF_75(address) -> userNameToUserWallet[_username]
user(address) := REF_75(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
userWalletToUserName[user] = Mick

IRs:
REF_76(string) -> userWalletToUserName[user]
REF_76(string) (->userWalletToUserName) := Mick(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fineLevel[user] = fineLevel[user] + 1

IRs:
REF_77(uint256) -> fineLevel[user]
REF_78(uint256) -> fineLevel[user]
TMP_76(uint256) = REF_78 + 1
REF_77(uint256) (->fineLevel) := TMP_76(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyCreator()

IRs:
MODIFIER_CALL, braggerContract.onlyCreator()()"];
4->1;
}
// Function: 237.sol-braggerContract-setTheKingsQuote(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
fineLevel[msg.sender] > 0

IRs:
REF_44(uint256) -> fineLevel[msg.sender]
TMP_55(bool) = REF_44 > 0
CONDITION TMP_55"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value > (basicFine * fineLevel[msg.sender]))

IRs:
REF_45(uint256) -> fineLevel[msg.sender]
TMP_56(uint256) = basicFine * REF_45
TMP_57(bool) = msg.value > TMP_56
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
currentKing = braggers[braggers.length - 1].braggerAddress

IRs:
REF_46 -> LENGTH braggers
TMP_59(uint256) = REF_46 - 1
REF_47(braggerContract.Bragger) -> braggers[TMP_59]
REF_48(address) -> REF_47.braggerAddress
currentKing(address) := REF_48(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(msg.sender == currentKing)

IRs:
TMP_60(bool) = msg.sender == currentKing
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
braggers[braggers.length - 1].braggerQuote = _message

IRs:
REF_49 -> LENGTH braggers
TMP_62(uint256) = REF_49 - 1
REF_50(braggerContract.Bragger) -> braggers[TMP_62]
REF_51(string) -> REF_50.braggerQuote
REF_51(string) (->braggers) := _message(string)"];
}
// Function: 237.sol-braggerContract-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ownerAddress = 0x000

IRs:
ownerAddress(address) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
bragAddress = 0x845EC9f9C0650b98f70E05fc259F4A04f6AC366e

IRs:
bragAddress(address) := 755700646352926775296394681346075875500926711406(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
initialQuote = Teach your people with your wisdom.

IRs:
initialQuote(string) := Teach your people with your wisdom.(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
initialPicture = https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male2-512.png

IRs:
initialPicture(string) := https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male2-512.png(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
basicFine = 25000000000000000

IRs:
basicFine(uint256) := 25000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
totalBraggedValue = 0

IRs:
totalBraggedValue(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
winningpot = 0

IRs:
winningpot(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
totalbrags = 0

IRs:
totalbrags(uint256) := 0(uint256)"];
}
// Function: 237.sol-braggerContract-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, braggerContract._transfer(address,address,uint256)(msg.sender,_to,_value)"];
}
// Function: 237.sol-braggerContract-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_92(mapping(address => uint256)) -> allowance[_from]
REF_93(uint256) -> REF_92[msg.sender]
TMP_93(bool) = _value <= REF_93
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_94(mapping(address => uint256)) -> allowance[_from]
REF_95(uint256) -> REF_94[msg.sender]
REF_95(-> allowance) = REF_95 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, braggerContract._transfer(address,address,uint256)(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 237.sol-tokenRecipient-receiveApproval(address,uint256,address,bytes)
digraph{
}
}
