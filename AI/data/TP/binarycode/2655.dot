digraph G {
// Function: 2655.sol-F3DKeysCalcShort-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_396'] 
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_398'] 
TMP_400(uint256) = TMP_399 / 2
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_397', 'TMP_400'] 
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_403(uint256) = TMP_401 / TMP_402
RETURN TMP_403"];
}
// Function: 2655.sol-F3DKeysCalcShort-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_386(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(_curKeys)
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_388(uint256) = INTERNAL_CALL, F3DKeysCalcShort.eth(uint256)(TMP_387)
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_386', 'TMP_388'] 
RETURN TMP_389"];
}
// Function: 2655.sol-F3DKeysCalcShort-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_390', '312500000000000000000000000'] 
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_391', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_392'] 
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_393', '74999921875000000000000000000000'] 
TMP_395(uint256) = TMP_394 / 156250000
RETURN TMP_395"];
}
// Function: 2655.sol-F3DKeysCalcShort-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_383(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(TMP_382)
TMP_384(uint256) = INTERNAL_CALL, F3DKeysCalcShort.keys(uint256)(_curEth)
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_383', 'TMP_384'] 
RETURN TMP_385"];
}
// Function: 2655.sol-FOMO3TEST1-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == admin,only admin can activate)

IRs:
TMP_366(bool) = msg.sender == admin
TMP_367(None) = SOLIDITY_CALL require(bool,string)(TMP_366,only admin can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,FOMO Short already activated)

IRs:
TMP_368(bool) = activated_ == False
TMP_369(None) = SOLIDITY_CALL require(bool,string)(TMP_368,FOMO Short already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_600(F3Ddatasets.Round) -> round_[1]
REF_601(uint256) -> REF_600.strt
TMP_370(uint256) = now + rndExtra_
TMP_371(uint256) = TMP_370 - rndGap_
REF_601(uint256) (->round_) := TMP_371(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_602(F3Ddatasets.Round) -> round_[1]
REF_603(uint256) -> REF_602.end
TMP_372(uint256) = now + rndInit_
TMP_373(uint256) = TMP_372 + rndExtra_
REF_603(uint256) (->round_) := TMP_373(uint256)"];
}
// Function: 2655.sol-FOMO3TEST1-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_285(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_286(bytes32) = SOLIDITY_CALL keccak256()(TMP_285)
TMP_287 = CONVERT TMP_286 to uint256
TMP_288(uint256) = TMP_287 / now
TMP_289(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_284', 'TMP_288'] 
TMP_290(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_289', 'block.gaslimit'] 
TMP_291(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_292(bytes32) = SOLIDITY_CALL keccak256()(TMP_291)
TMP_293 = CONVERT TMP_292 to uint256
TMP_294(uint256) = TMP_293 / now
TMP_295(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_290', 'TMP_294'] 
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_295', 'block.number'] 
TMP_297(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_296)
TMP_298(bytes32) = SOLIDITY_CALL keccak256()(TMP_297)
TMP_299 = CONVERT TMP_298 to uint256
seed(uint256) := TMP_299(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_300(uint256) = seed / 1000
TMP_301(uint256) = TMP_300 * 1000
TMP_302(uint256) = seed - TMP_301
TMP_303(bool) = TMP_302 < airDropTracker_
CONDITION TMP_303"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2655.sol-FOMO3TEST1-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_194(F3Ddatasets.Round) -> round_[_rID]
REF_195(uint256) -> REF_194.strt
TMP_111(uint256) = REF_195 + rndGap_
TMP_112(bool) = _now > TMP_111
REF_196(F3Ddatasets.Round) -> round_[_rID]
REF_197(uint256) -> REF_196.end
TMP_113(bool) = _now <= REF_197
REF_198(F3Ddatasets.Round) -> round_[_rID]
REF_199(uint256) -> REF_198.end
TMP_114(bool) = _now > REF_199
REF_200(F3Ddatasets.Round) -> round_[_rID]
REF_201(uint256) -> REF_200.plyr
TMP_115(bool) = REF_201 == 0
TMP_116(bool) = TMP_114 && TMP_115
TMP_117(bool) = TMP_113 || TMP_116
TMP_118(bool) = TMP_112 && TMP_117
CONDITION TMP_118"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FOMO3TEST1.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_202(F3Ddatasets.Round) -> round_[_rID]
REF_203(uint256) -> REF_202.end
TMP_120(bool) = _now > REF_203
REF_204(F3Ddatasets.Round) -> round_[_rID]
REF_205(bool) -> REF_204.ended
TMP_121(bool) = REF_205 == False
TMP_122(bool) = TMP_120 && TMP_121
CONDITION TMP_122"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_206(F3Ddatasets.Round) -> round_[_rID]
REF_207(bool) -> REF_206.ended
REF_207(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_123(F3Ddatasets.EventReturns) = INTERNAL_CALL, FOMO3TEST1.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_123(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_208(uint256) -> _eventData_.compressedData
REF_209(uint256) -> _eventData_.compressedData
TMP_124(uint256) = _now * 1000000000000000000
TMP_125(uint256) = REF_209 + TMP_124
REF_208(uint256) (->_eventData_) := TMP_125(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_210(uint256) -> _eventData_.compressedIDs
REF_211(uint256) -> _eventData_.compressedIDs
TMP_126(uint256) = REF_211 + _pID
REF_210(uint256) (->_eventData_) := TMP_126(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_213(F3Ddatasets.Player) -> plyr_[_pID]
REF_214(bytes32) -> REF_213.name
REF_215(uint256) -> _eventData_.compressedData
REF_216(uint256) -> _eventData_.compressedIDs
REF_217(address) -> _eventData_.winnerAddr
REF_218(bytes32) -> _eventData_.winnerName
REF_219(uint256) -> _eventData_.amountWon
REF_220(uint256) -> _eventData_.newPot
REF_221(uint256) -> _eventData_.P3DAmount
REF_222(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_214,msg.value,REF_215,REF_216,REF_217,REF_218,REF_219,REF_220,REF_221,REF_222)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_223(F3Ddatasets.Player) -> plyr_[_pID]
REF_224(uint256) -> REF_223.gen
REF_225(F3Ddatasets.Player) -> plyr_[_pID]
REF_226(uint256) -> REF_225.gen
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_226', 'msg.value'] 
REF_224(uint256) (->plyr_) := TMP_128(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2655.sol-FOMO3TEST1-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_22(F3Ddatasets.EventReturns) = INTERNAL_CALL, FOMO3TEST1.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_22(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_27(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_27(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_23(uint256) = INTERNAL_CALL, FOMO3TEST1.verifyTeam(uint256)(_team)
_team(uint256) := TMP_23(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FOMO3TEST1.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FOMO3TEST1.isActivated()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FOMO3TEST1.isHuman()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FOMO3TEST1.isWithinLimits(uint256)(msg.value)"];
8->1;
}
// Function: 2655.sol-FOMO3TEST1-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_16(F3Ddatasets.EventReturns) = INTERNAL_CALL, FOMO3TEST1.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_16(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_26(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_26(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_17(uint256) = INTERNAL_CALL, FOMO3TEST1.verifyTeam(uint256)(_team)
_team(uint256) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FOMO3TEST1.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FOMO3TEST1.isActivated()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FOMO3TEST1.isHuman()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FOMO3TEST1.isWithinLimits(uint256)(msg.value)"];
7->1;
}
// Function: 2655.sol-FOMO3TEST1-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_359(F3Ddatasets.Round) -> round_[_rID]
REF_360(uint256) -> REF_359.strt
TMP_201(uint256) = REF_360 + rndGap_
TMP_202(bool) = _now > TMP_201
REF_361(F3Ddatasets.Round) -> round_[_rID]
REF_362(uint256) -> REF_361.end
TMP_203(bool) = _now <= REF_362
REF_363(F3Ddatasets.Round) -> round_[_rID]
REF_364(uint256) -> REF_363.end
TMP_204(bool) = _now > REF_364
REF_365(F3Ddatasets.Round) -> round_[_rID]
REF_366(uint256) -> REF_365.plyr
TMP_205(bool) = REF_366 == 0
TMP_206(bool) = TMP_204 && TMP_205
TMP_207(bool) = TMP_203 || TMP_206
TMP_208(bool) = TMP_202 && TMP_207
CONDITION TMP_208"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_367(F3Ddatasets.Round) -> round_[_rID]
REF_368(uint256) -> REF_367.eth
TMP_209(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_368', '_eth'] 
RETURN TMP_209"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_210(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keys(uint256), arguments:['_eth'] 
RETURN TMP_210"];
}
// Function: 2655.sol-FOMO3TEST1-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_349(F3Ddatasets.Round) -> round_[_rIDlast]
REF_350(uint256) -> REF_349.mask
REF_352(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_353(F3Ddatasets.PlayerRounds) -> REF_352[_rIDlast]
REF_354(uint256) -> REF_353.keys
TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_350', 'REF_354'] 
TMP_199(uint256) = TMP_198 / 1000000000000000000
REF_356(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_357(F3Ddatasets.PlayerRounds) -> REF_356[_rIDlast]
REF_358(uint256) -> REF_357.mask
TMP_200(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_199', 'REF_358'] 
RETURN TMP_200"];
}
// Function: 2655.sol-FOMO3TEST1-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(36,0)

IRs:
REF_7(F3Ddatasets.TeamFee) -> fees_[0]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(36,0)
REF_7(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(43,0)

IRs:
REF_9(F3Ddatasets.TeamFee) -> fees_[1]
TMP_4(F3Ddatasets.TeamFee) = new TeamFee(43,0)
REF_9(F3Ddatasets.TeamFee) (->fees_) := TMP_4(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(66,0)

IRs:
REF_11(F3Ddatasets.TeamFee) -> fees_[2]
TMP_5(F3Ddatasets.TeamFee) = new TeamFee(66,0)
REF_11(F3Ddatasets.TeamFee) (->fees_) := TMP_5(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(51,0)

IRs:
REF_13(F3Ddatasets.TeamFee) -> fees_[3]
TMP_6(F3Ddatasets.TeamFee) = new TeamFee(51,0)
REF_13(F3Ddatasets.TeamFee) (->fees_) := TMP_6(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_15(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_15(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_17(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_8(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_17(F3Ddatasets.PotSplit) (->potSplit_) := TMP_8(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(40,0)

IRs:
REF_19(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_9(F3Ddatasets.PotSplit) = new PotSplit(40,0)
REF_19(F3Ddatasets.PotSplit) (->potSplit_) := TMP_9(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(40,0)

IRs:
REF_21(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_10(F3Ddatasets.PotSplit) = new PotSplit(40,0)
REF_21(F3Ddatasets.PotSplit) (->potSplit_) := TMP_10(F3Ddatasets.PotSplit)"];
}
// Function: 2655.sol-FOMO3TEST1-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_260(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_261(F3Ddatasets.PlayerRounds) -> REF_260[_rID]
REF_262(uint256) -> REF_261.keys
TMP_148(bool) = REF_262 == 0
CONDITION TMP_148"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_149(F3Ddatasets.EventReturns) = INTERNAL_CALL, FOMO3TEST1.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_149(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_263(F3Ddatasets.Round) -> round_[_rID]
REF_264(uint256) -> REF_263.eth
TMP_150(bool) = REF_264 < 100000000000000000000
REF_265(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_266(F3Ddatasets.PlayerRounds) -> REF_265[_rID]
REF_267(uint256) -> REF_266.eth
TMP_151(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_267', '_eth'] 
TMP_152(bool) = TMP_151 > 1000000000000000000
TMP_153(bool) = TMP_150 && TMP_152
CONDITION TMP_153"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_270(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_271(F3Ddatasets.PlayerRounds) -> REF_270[_rID]
REF_272(uint256) -> REF_271.eth
TMP_154(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_272'] 
_availableLimit(uint256) := TMP_154(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_155(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_274(F3Ddatasets.Player) -> plyr_[_pID]
REF_275(uint256) -> REF_274.gen
REF_276(F3Ddatasets.Player) -> plyr_[_pID]
REF_277(uint256) -> REF_276.gen
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_277', '_refund'] 
REF_275(uint256) (->plyr_) := TMP_156(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_157(bool) = _eth > 1000000000
CONDITION TMP_157"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_279(F3Ddatasets.Round) -> round_[_rID]
REF_280(uint256) -> REF_279.eth
TMP_158(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.keysRec(uint256,uint256), arguments:['REF_280', '_eth'] 
_keys(uint256) := TMP_158(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_159(bool) = _keys >= 1000000000000000000
CONDITION TMP_159"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FOMO3TEST1.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_282(F3Ddatasets.Round) -> round_[_rID]
REF_283(uint256) -> REF_282.plyr
TMP_161(bool) = REF_283 != _pID
CONDITION TMP_161"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_284(F3Ddatasets.Round) -> round_[_rID]
REF_285(uint256) -> REF_284.plyr
REF_285(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_286(F3Ddatasets.Round) -> round_[_rID]
REF_287(uint256) -> REF_286.team
TMP_162(bool) = REF_287 != _team
CONDITION TMP_162"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_288(F3Ddatasets.Round) -> round_[_rID]
REF_289(uint256) -> REF_288.team
REF_289(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_290(uint256) -> _eventData_.compressedData
REF_291(uint256) -> _eventData_.compressedData
TMP_163(uint256) = REF_291 + 100
REF_290(uint256) (->_eventData_) := TMP_163(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_164(bool) = _eth >= 100000000000000000
CONDITION TMP_164"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_165(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_166(bool) = INTERNAL_CALL, FOMO3TEST1.airdrop()()
TMP_167(bool) = TMP_166 == True
CONDITION TMP_167"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_168(bool) = _eth >= 10000000000000000000
CONDITION TMP_168"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_169(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_170(uint256) = TMP_169 / 100
_prize(uint256) := TMP_170(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_293(F3Ddatasets.Player) -> plyr_[_pID]
REF_294(uint256) -> REF_293.win
REF_295(F3Ddatasets.Player) -> plyr_[_pID]
REF_296(uint256) -> REF_295.win
TMP_171(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_296', '_prize'] 
REF_294(uint256) (->plyr_) := TMP_171(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_172(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_172(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_299(uint256) -> _eventData_.compressedData
REF_299(-> _eventData_) = REF_299 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_173(bool) = _eth >= 1000000000000000000
TMP_174(bool) = _eth < 10000000000000000000
TMP_175(bool) = TMP_173 && TMP_174
CONDITION TMP_175"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_176(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_177(uint256) = TMP_176 / 100
_prize(uint256) := TMP_177(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_301(F3Ddatasets.Player) -> plyr_[_pID]
REF_302(uint256) -> REF_301.win
REF_303(F3Ddatasets.Player) -> plyr_[_pID]
REF_304(uint256) -> REF_303.win
TMP_178(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_304', '_prize'] 
REF_302(uint256) (->plyr_) := TMP_178(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_179(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_307(uint256) -> _eventData_.compressedData
REF_307(-> _eventData_) = REF_307 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_180(bool) = _eth >= 100000000000000000
TMP_181(bool) = _eth < 1000000000000000000
TMP_182(bool) = TMP_180 && TMP_181
CONDITION TMP_182"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_183(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_184(uint256) = TMP_183 / 100
_prize(uint256) := TMP_184(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_309(F3Ddatasets.Player) -> plyr_[_pID]
REF_310(uint256) -> REF_309.win
REF_311(F3Ddatasets.Player) -> plyr_[_pID]
REF_312(uint256) -> REF_311.win
TMP_185(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_312', '_prize'] 
REF_310(uint256) (->plyr_) := TMP_185(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_186(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_186(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_315(uint256) -> _eventData_.compressedData
REF_315(-> _eventData_) = REF_315 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_316(uint256) -> _eventData_.compressedData
REF_316(-> _eventData_) = REF_316 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_317(uint256) -> _eventData_.compressedData
TMP_187(uint256) = _prize * 1000000000000000000000000000000000
REF_317(-> _eventData_) = REF_317 + TMP_187"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_318(uint256) -> _eventData_.compressedData
REF_319(uint256) -> _eventData_.compressedData
TMP_188(uint256) = airDropTracker_ * 1000
TMP_189(uint256) = REF_319 + TMP_188
REF_318(uint256) (->_eventData_) := TMP_189(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_320(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_321(F3Ddatasets.PlayerRounds) -> REF_320[_rID]
REF_322(uint256) -> REF_321.keys
REF_324(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_325(F3Ddatasets.PlayerRounds) -> REF_324[_rID]
REF_326(uint256) -> REF_325.keys
TMP_190(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_326'] 
REF_322(uint256) (->plyrRnds_) := TMP_190(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_327(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_328(F3Ddatasets.PlayerRounds) -> REF_327[_rID]
REF_329(uint256) -> REF_328.eth
REF_331(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_332(F3Ddatasets.PlayerRounds) -> REF_331[_rID]
REF_333(uint256) -> REF_332.eth
TMP_191(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_333'] 
REF_329(uint256) (->plyrRnds_) := TMP_191(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_334(F3Ddatasets.Round) -> round_[_rID]
REF_335(uint256) -> REF_334.keys
REF_337(F3Ddatasets.Round) -> round_[_rID]
REF_338(uint256) -> REF_337.keys
TMP_192(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_338'] 
REF_335(uint256) (->round_) := TMP_192(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_339(F3Ddatasets.Round) -> round_[_rID]
REF_340(uint256) -> REF_339.eth
REF_342(F3Ddatasets.Round) -> round_[_rID]
REF_343(uint256) -> REF_342.eth
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_343'] 
REF_340(uint256) (->round_) := TMP_193(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_344(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_345(uint256) -> REF_344[_team]
REF_347(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_348(uint256) -> REF_347[_team]
TMP_194(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_348'] 
REF_345(uint256) (->rndTmEth_) := TMP_194(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_195(F3Ddatasets.EventReturns) = INTERNAL_CALL, FOMO3TEST1.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_195(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_196(F3Ddatasets.EventReturns) = INTERNAL_CALL, FOMO3TEST1.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_196(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FOMO3TEST1.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 2655.sol-FOMO3TEST1-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_384(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_384(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_222(bool) = _pID == 0
CONDITION TMP_222"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = getPlayerID(msg.sender)

IRs:
TMP_223(uint256) = INTERNAL_CALL, FOMO3TEST1.getPlayerID(address)(msg.sender)
_pID(uint256) := TMP_223(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_385(uint256) -> pIDxAddr_[msg.sender]
REF_385(uint256) (->pIDxAddr_) := _pID(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_386(F3Ddatasets.Player) -> plyr_[_pID]
REF_387(address) -> REF_386.addr
REF_387(address) (->plyr_) := msg.sender(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_388(uint256) -> _eventData_.compressedData
REF_389(uint256) -> _eventData_.compressedData
TMP_224(uint256) = REF_389 + 1
REF_388(uint256) (->_eventData_) := TMP_224(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2655.sol-FOMO3TEST1-determinePID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
pIDxAddr_[_addr] == 0

IRs:
REF_0(uint256) -> pIDxAddr_[_addr]
TMP_0(bool) = REF_0 == 0
CONDITION TMP_0"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pID_ ++

IRs:
TMP_1(uint256) := pID_(uint256)
pID_(uint256) = pID_ + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = pID_

IRs:
REF_1(uint256) -> pIDxAddr_[_addr]
REF_1(uint256) (->pIDxAddr_) := pID_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[pID_].addr = _addr

IRs:
REF_2(F3Ddatasets.Player) -> plyr_[pID_]
REF_3(address) -> REF_2.addr
REF_3(address) (->plyr_) := _addr(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true)

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2655.sol-FOMO3TEST1-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_p1 = _eth / 100

IRs:
TMP_304(uint256) = _eth / 100
_p1(uint256) := TMP_304(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_com = _eth / 50

IRs:
TMP_305(uint256) = _eth / 50
_com(uint256) := TMP_305(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_com = _com.add(_p1)

IRs:
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_p1'] 
_com(uint256) := TMP_306(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! address(admin).call.value(_com)()

IRs:
TMP_307 = CONVERT admin to address
TMP_309(bool) = LOW_LEVEL_CALL, dest:TMP_307, function:call, arguments:[] value:_com 
TMP_310 = UnaryType.BANG TMP_309 
CONDITION TMP_310"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_p3d = _com

IRs:
_p3d(uint256) := _com(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_311(uint256) = _eth / 10
_aff(uint256) := TMP_311(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_p3d = _p3d.add(_aff)

IRs:
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', '_aff'] 
_p3d(uint256) := TMP_312(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_504(F3Ddatasets.TeamFee) -> fees_[_team]
REF_505(uint256) -> REF_504.p3d
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_505'] 
TMP_314(uint256) = TMP_313 / 100
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_314'] 
_p3d(uint256) := TMP_315(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_p3d > 0

IRs:
TMP_316(bool) = _p3d > 0
CONDITION TMP_316"];
12->13[label="True"];
12->17[label="False"];
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
_potAmount = _p3d / 2

IRs:
TMP_317(uint256) = _p3d / 2
_potAmount(uint256) := TMP_317(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
admin.transfer(_p3d.sub(_potAmount))

IRs:
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', '_potAmount'] 
Transfer dest:admin value:TMP_318"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(_potAmount)

IRs:
REF_508(F3Ddatasets.Round) -> round_[_rID]
REF_509(uint256) -> REF_508.pot
REF_510(F3Ddatasets.Round) -> round_[_rID]
REF_511(uint256) -> REF_510.pot
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_511', '_potAmount'] 
REF_509(uint256) (->round_) := TMP_320(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_513(uint256) -> _eventData_.P3DAmount
REF_515(uint256) -> _eventData_.P3DAmount
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_515'] 
REF_513(uint256) (->_eventData_) := TMP_321(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2655.sol-FOMO3TEST1-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_523(F3Ddatasets.TeamFee) -> fees_[_team]
REF_524(uint256) -> REF_523.gen
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_524'] 
TMP_326(uint256) = TMP_325 / 100
_gen(uint256) := TMP_326(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_327(uint256) = _eth / 100
_air(uint256) := TMP_327(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_328(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_329(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_330(uint256) = TMP_329 / 100
REF_530(F3Ddatasets.TeamFee) -> fees_[_team]
REF_531(uint256) -> REF_530.p3d
TMP_331(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_531'] 
TMP_332(uint256) = TMP_331 / 100
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_330', 'TMP_332'] 
TMP_334(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_333'] 
_eth(uint256) := TMP_334(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_335(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_336(uint256) = INTERNAL_CALL, FOMO3TEST1.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_336(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_337(bool) = _dust > 0
CONDITION TMP_337"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_338(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_338(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_534(F3Ddatasets.Round) -> round_[_rID]
REF_535(uint256) -> REF_534.pot
TMP_339(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_538(F3Ddatasets.Round) -> round_[_rID]
REF_539(uint256) -> REF_538.pot
TMP_340(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_339', 'REF_539'] 
REF_535(uint256) (->round_) := TMP_340(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_540(uint256) -> _eventData_.genAmount
REF_542(uint256) -> _eventData_.genAmount
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_542'] 
REF_540(uint256) (->_eventData_) := TMP_341(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_543(uint256) -> _eventData_.potAmount
REF_543(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2655.sol-FOMO3TEST1-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_398(F3Ddatasets.Round) -> round_[_rID]
REF_399(uint256) -> REF_398.plyr
_winPID(uint256) := REF_399(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_400(F3Ddatasets.Round) -> round_[_rID]
REF_401(uint256) -> REF_400.team
_winTID(uint256) := REF_401(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_402(F3Ddatasets.Round) -> round_[_rID]
REF_403(uint256) -> REF_402.pot
_pot(uint256) := REF_403(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_232(uint256) = TMP_231 / 100
_win(uint256) := TMP_232(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_233(uint256) = _pot / 50
_com(uint256) := TMP_233(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_406(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_407(uint256) -> REF_406.gen
TMP_234(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_407'] 
TMP_235(uint256) = TMP_234 / 100
_gen(uint256) := TMP_235(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_409(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_410(uint256) -> REF_409.p3d
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_410'] 
TMP_237(uint256) = TMP_236 / 100
_p3d(uint256) := TMP_237(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_238', '_com'] 
TMP_240(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_239', '_gen'] 
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_240', '_p3d'] 
_res(uint256) := TMP_241(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_242(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_416(F3Ddatasets.Round) -> round_[_rID]
REF_417(uint256) -> REF_416.keys
TMP_243(uint256) = TMP_242 / REF_417
_ppt(uint256) := TMP_243(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_420(F3Ddatasets.Round) -> round_[_rID]
REF_421(uint256) -> REF_420.keys
TMP_244(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_421'] 
TMP_245(uint256) = TMP_244 / 1000000000000000000
TMP_246(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_245'] 
_dust(uint256) := TMP_246(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_247(bool) = _dust > 0
CONDITION TMP_247"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_248(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_248(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_249(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_249(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_424(F3Ddatasets.Player) -> plyr_[_winPID]
REF_425(uint256) -> REF_424.win
REF_427(F3Ddatasets.Player) -> plyr_[_winPID]
REF_428(uint256) -> REF_427.win
TMP_250(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_428'] 
REF_425(uint256) (->plyr_) := TMP_250(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_com = _com.add(_p3d.sub(_p3d / 2))

IRs:
TMP_251(uint256) = _p3d / 2
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_p3d', 'TMP_251'] 
TMP_253(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', 'TMP_252'] 
_com(uint256) := TMP_253(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
admin.transfer(_com)

IRs:
Transfer dest:admin value:_com"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_res = _res.add(_p3d / 2)

IRs:
TMP_255(uint256) = _p3d / 2
TMP_256(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', 'TMP_255'] 
_res(uint256) := TMP_256(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_433(F3Ddatasets.Round) -> round_[_rID]
REF_434(uint256) -> REF_433.mask
REF_436(F3Ddatasets.Round) -> round_[_rID]
REF_437(uint256) -> REF_436.mask
TMP_257(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_437'] 
REF_434(uint256) (->round_) := TMP_257(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_438(uint256) -> _eventData_.compressedData
REF_439(uint256) -> _eventData_.compressedData
REF_440(F3Ddatasets.Round) -> round_[_rID]
REF_441(uint256) -> REF_440.end
TMP_258(uint256) = REF_441 * 1000000
TMP_259(uint256) = REF_439 + TMP_258
REF_438(uint256) (->_eventData_) := TMP_259(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_442(uint256) -> _eventData_.compressedIDs
REF_443(uint256) -> _eventData_.compressedIDs
TMP_260(uint256) = _winPID * 100000000000000000000000000
TMP_261(uint256) = REF_443 + TMP_260
TMP_262(uint256) = _winTID * 100000000000000000
TMP_263(uint256) = TMP_261 + TMP_262
REF_442(uint256) (->_eventData_) := TMP_263(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_444(address) -> _eventData_.winnerAddr
REF_445(F3Ddatasets.Player) -> plyr_[_winPID]
REF_446(address) -> REF_445.addr
REF_444(address) (->_eventData_) := REF_446(address)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_447(bytes32) -> _eventData_.winnerName
REF_448(F3Ddatasets.Player) -> plyr_[_winPID]
REF_449(bytes32) -> REF_448.name
REF_447(bytes32) (->_eventData_) := REF_449(bytes32)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_450(uint256) -> _eventData_.amountWon
REF_450(uint256) (->_eventData_) := _win(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_451(uint256) -> _eventData_.genAmount
REF_451(uint256) (->_eventData_) := _gen(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_452(uint256) -> _eventData_.P3DAmount
REF_452(uint256) (->_eventData_) := _p3d(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_453(uint256) -> _eventData_.newPot
REF_453(uint256) (->_eventData_) := _res(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
rID_ ++

IRs:
TMP_264(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_rID ++

IRs:
TMP_265(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_454(F3Ddatasets.Round) -> round_[_rID]
REF_455(uint256) -> REF_454.strt
REF_455(uint256) (->round_) := now(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_456(F3Ddatasets.Round) -> round_[_rID]
REF_457(uint256) -> REF_456.end
TMP_266(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_266', 'rndGap_'] 
REF_457(uint256) (->round_) := TMP_267(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_460(F3Ddatasets.Round) -> round_[_rID]
REF_461(uint256) -> REF_460.pot
REF_461(uint256) (->round_) := _res(uint256)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2655.sol-FOMO3TEST1-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_584(uint256) -> _eventData_.compressedData
REF_585(uint256) -> _eventData_.compressedData
TMP_358(uint256) = now * 1000000000000000000
TMP_359(uint256) = REF_585 + TMP_358
TMP_360(uint256) = _team * 100000000000000000000000000000
TMP_361(uint256) = TMP_359 + TMP_360
REF_584(uint256) (->_eventData_) := TMP_361(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_586(uint256) -> _eventData_.compressedIDs
REF_587(uint256) -> _eventData_.compressedIDs
TMP_362(uint256) = REF_587 + _pID
TMP_363(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_364(uint256) = TMP_362 + TMP_363
REF_586(uint256) (->_eventData_) := TMP_364(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_589(uint256) -> _eventData_.compressedData
REF_590(uint256) -> _eventData_.compressedIDs
REF_591(F3Ddatasets.Player) -> plyr_[_pID]
REF_592(bytes32) -> REF_591.name
REF_593(address) -> _eventData_.winnerAddr
REF_594(bytes32) -> _eventData_.winnerName
REF_595(uint256) -> _eventData_.amountWon
REF_596(uint256) -> _eventData_.newPot
REF_597(uint256) -> _eventData_.P3DAmount
REF_598(uint256) -> _eventData_.genAmount
REF_599(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_589,REF_590,REF_592,msg.sender,_eth,_keys,REF_593,REF_594,REF_595,REF_596,REF_597,REF_598,REF_599,airDropPot_)"];
}
// Function: 2655.sol-FOMO3TEST1-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_11(F3Ddatasets.EventReturns) = INTERNAL_CALL, FOMO3TEST1.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_11(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_23(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_23(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_24(F3Ddatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
INTERNAL_CALL, FOMO3TEST1.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_25,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FOMO3TEST1.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FOMO3TEST1.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FOMO3TEST1.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 2655.sol-FOMO3TEST1-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_64(F3Ddatasets.Round) -> round_[_rID]
REF_65(uint256) -> REF_64.strt
TMP_62(uint256) = REF_65 + rndGap_
TMP_63(bool) = _now > TMP_62
REF_66(F3Ddatasets.Round) -> round_[_rID]
REF_67(uint256) -> REF_66.end
TMP_64(bool) = _now <= REF_67
REF_68(F3Ddatasets.Round) -> round_[_rID]
REF_69(uint256) -> REF_68.end
TMP_65(bool) = _now > REF_69
REF_70(F3Ddatasets.Round) -> round_[_rID]
REF_71(uint256) -> REF_70.plyr
TMP_66(bool) = REF_71 == 0
TMP_67(bool) = TMP_65 && TMP_66
TMP_68(bool) = TMP_64 || TMP_67
TMP_69(bool) = TMP_63 && TMP_68
CONDITION TMP_69"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_72(F3Ddatasets.Round) -> round_[_rID]
REF_73(uint256) -> REF_72.keys
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_73', '1000000000000000000'] 
TMP_71(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_70', '1000000000000000000'] 
RETURN TMP_71"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 2655.sol-FOMO3TEST1-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_146(F3Ddatasets.Round) -> round_[_rID]
REF_147(uint256) -> REF_146.ico
REF_148(F3Ddatasets.Round) -> round_[_rID]
REF_149(uint256) -> REF_148.keys
REF_150(F3Ddatasets.Round) -> round_[_rID]
REF_151(uint256) -> REF_150.end
REF_152(F3Ddatasets.Round) -> round_[_rID]
REF_153(uint256) -> REF_152.strt
REF_154(F3Ddatasets.Round) -> round_[_rID]
REF_155(uint256) -> REF_154.pot
REF_156(F3Ddatasets.Round) -> round_[_rID]
REF_157(uint256) -> REF_156.team
REF_158(F3Ddatasets.Round) -> round_[_rID]
REF_159(uint256) -> REF_158.plyr
TMP_102(uint256) = REF_159 * 10
TMP_103(uint256) = REF_157 + TMP_102
REF_160(F3Ddatasets.Round) -> round_[_rID]
REF_161(uint256) -> REF_160.plyr
REF_162(F3Ddatasets.Player) -> plyr_[REF_161]
REF_163(address) -> REF_162.addr
REF_164(F3Ddatasets.Round) -> round_[_rID]
REF_165(uint256) -> REF_164.plyr
REF_166(F3Ddatasets.Player) -> plyr_[REF_165]
REF_167(bytes32) -> REF_166.name
REF_168(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_169(uint256) -> REF_168[0]
REF_170(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_171(uint256) -> REF_170[1]
REF_172(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_173(uint256) -> REF_172[2]
REF_174(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_175(uint256) -> REF_174[3]
TMP_104(uint256) = airDropPot_ * 1000
TMP_105(uint256) = airDropTracker_ + TMP_104
RETURN REF_147,_rID,REF_149,REF_151,REF_153,REF_155,TMP_103,REF_163,REF_167,REF_169,REF_171,REF_173,REF_175,TMP_105"];
}
// Function: 2655.sol-FOMO3TEST1-getPlayerAddr(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(plyr_[_pID].addr)

IRs:
REF_5(F3Ddatasets.Player) -> plyr_[_pID]
REF_6(address) -> REF_5.addr
RETURN REF_6"];
}
// Function: 2655.sol-FOMO3TEST1-getPlayerID(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
determinePID(_addr)

IRs:
TMP_2(bool) = INTERNAL_CALL, FOMO3TEST1.determinePID(address)(_addr)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(pIDxAddr_[_addr])

IRs:
REF_4(uint256) -> pIDxAddr_[_addr]
RETURN REF_4"];
}
// Function: 2655.sol-FOMO3TEST1-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_106 = CONVERT 0 to address
TMP_107(bool) = _addr == TMP_106
CONDITION TMP_107"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_108(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_176(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_176(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_177(F3Ddatasets.Player) -> plyr_[_pID]
REF_178(bytes32) -> REF_177.name
REF_179(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_180(F3Ddatasets.PlayerRounds) -> REF_179[_rID]
REF_181(uint256) -> REF_180.keys
REF_182(F3Ddatasets.Player) -> plyr_[_pID]
REF_183(uint256) -> REF_182.win
REF_184(F3Ddatasets.Player) -> plyr_[_pID]
REF_185(uint256) -> REF_184.gen
REF_187(F3Ddatasets.Player) -> plyr_[_pID]
REF_188(uint256) -> REF_187.lrnd
TMP_109(uint256) = INTERNAL_CALL, FOMO3TEST1.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_188)
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_185', 'TMP_109'] 
REF_189(F3Ddatasets.Player) -> plyr_[_pID]
REF_190(uint256) -> REF_189.aff
REF_191(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_192(F3Ddatasets.PlayerRounds) -> REF_191[_rID]
REF_193(uint256) -> REF_192.eth
RETURN _pID,REF_178,REF_181,REF_183,TMP_110,REF_190,REF_193"];
}
// Function: 2655.sol-FOMO3TEST1-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_86(F3Ddatasets.Round) -> round_[_rID]
REF_87(uint256) -> REF_86.end
TMP_78(bool) = now > REF_87
REF_88(F3Ddatasets.Round) -> round_[_rID]
REF_89(bool) -> REF_88.ended
TMP_79(bool) = REF_89 == False
TMP_80(bool) = TMP_78 && TMP_79
REF_90(F3Ddatasets.Round) -> round_[_rID]
REF_91(uint256) -> REF_90.plyr
TMP_81(bool) = REF_91 != 0
TMP_82(bool) = TMP_80 && TMP_81
CONDITION TMP_82"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_92(F3Ddatasets.Round) -> round_[_rID]
REF_93(uint256) -> REF_92.plyr
TMP_83(bool) = REF_93 == _pID
CONDITION TMP_83"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_94(F3Ddatasets.Player) -> plyr_[_pID]
REF_95(uint256) -> REF_94.win
REF_97(F3Ddatasets.Round) -> round_[_rID]
REF_98(uint256) -> REF_97.pot
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_98', '48'] 
TMP_85(uint256) = TMP_84 / 100
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_95', 'TMP_85'] 
REF_100(F3Ddatasets.Player) -> plyr_[_pID]
REF_101(uint256) -> REF_100.gen
TMP_87(uint256) = INTERNAL_CALL, FOMO3TEST1.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_104(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_105(F3Ddatasets.PlayerRounds) -> REF_104[_rID]
REF_106(uint256) -> REF_105.mask
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_87', 'REF_106'] 
TMP_89(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_101', 'TMP_88'] 
REF_107(F3Ddatasets.Player) -> plyr_[_pID]
REF_108(uint256) -> REF_107.aff
RETURN TMP_86,TMP_89,REF_108"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_109(F3Ddatasets.Player) -> plyr_[_pID]
REF_110(uint256) -> REF_109.win
REF_111(F3Ddatasets.Player) -> plyr_[_pID]
REF_112(uint256) -> REF_111.gen
TMP_90(uint256) = INTERNAL_CALL, FOMO3TEST1.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_115(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_116(F3Ddatasets.PlayerRounds) -> REF_115[_rID]
REF_117(uint256) -> REF_116.mask
TMP_91(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_90', 'REF_117'] 
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_112', 'TMP_91'] 
REF_118(F3Ddatasets.Player) -> plyr_[_pID]
REF_119(uint256) -> REF_118.aff
RETURN REF_110,TMP_92,REF_119"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_120(F3Ddatasets.Player) -> plyr_[_pID]
REF_121(uint256) -> REF_120.win
REF_122(F3Ddatasets.Player) -> plyr_[_pID]
REF_123(uint256) -> REF_122.gen
REF_125(F3Ddatasets.Player) -> plyr_[_pID]
REF_126(uint256) -> REF_125.lrnd
TMP_93(uint256) = INTERNAL_CALL, FOMO3TEST1.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_126)
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_123', 'TMP_93'] 
REF_127(F3Ddatasets.Player) -> plyr_[_pID]
REF_128(uint256) -> REF_127.aff
RETURN REF_121,TMP_94,REF_128"];
}
// Function: 2655.sol-FOMO3TEST1-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_129(F3Ddatasets.Round) -> round_[_rID]
REF_130(uint256) -> REF_129.mask
REF_132(F3Ddatasets.Round) -> round_[_rID]
REF_133(uint256) -> REF_132.pot
REF_135(F3Ddatasets.Round) -> round_[_rID]
REF_136(uint256) -> REF_135.team
REF_137(F3Ddatasets.PotSplit) -> potSplit_[REF_136]
REF_138(uint256) -> REF_137.gen
TMP_95(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_133', 'REF_138'] 
TMP_96(uint256) = TMP_95 / 100
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_96', '1000000000000000000'] 
REF_140(F3Ddatasets.Round) -> round_[_rID]
REF_141(uint256) -> REF_140.keys
TMP_98(uint256) = TMP_97 / REF_141
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_130', 'TMP_98'] 
REF_143(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_144(F3Ddatasets.PlayerRounds) -> REF_143[_rID]
REF_145(uint256) -> REF_144.keys
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_99', 'REF_145'] 
TMP_101(uint256) = TMP_100 / 1000000000000000000
RETURN TMP_101"];
}
// Function: 2655.sol-FOMO3TEST1-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_76(F3Ddatasets.Round) -> round_[_rID]
REF_77(uint256) -> REF_76.end
TMP_72(bool) = _now < REF_77
CONDITION TMP_72"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_78(F3Ddatasets.Round) -> round_[_rID]
REF_79(uint256) -> REF_78.strt
TMP_73(uint256) = REF_79 + rndGap_
TMP_74(bool) = _now > TMP_73
CONDITION TMP_74"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_80(F3Ddatasets.Round) -> round_[_rID]
REF_81(uint256) -> REF_80.end
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_81', '_now'] 
RETURN TMP_75"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_83(F3Ddatasets.Round) -> round_[_rID]
REF_84(uint256) -> REF_83.strt
TMP_76(uint256) = REF_84 + rndGap_
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_76', '_now'] 
RETURN TMP_77"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 2655.sol-FOMO3TEST1-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_371(F3Ddatasets.Round) -> round_[_rID]
REF_372(uint256) -> REF_371.strt
TMP_211(uint256) = REF_372 + rndGap_
TMP_212(bool) = _now > TMP_211
REF_373(F3Ddatasets.Round) -> round_[_rID]
REF_374(uint256) -> REF_373.end
TMP_213(bool) = _now <= REF_374
REF_375(F3Ddatasets.Round) -> round_[_rID]
REF_376(uint256) -> REF_375.end
TMP_214(bool) = _now > REF_376
REF_377(F3Ddatasets.Round) -> round_[_rID]
REF_378(uint256) -> REF_377.plyr
TMP_215(bool) = REF_378 == 0
TMP_216(bool) = TMP_214 && TMP_215
TMP_217(bool) = TMP_213 || TMP_216
TMP_218(bool) = TMP_212 && TMP_217
CONDITION TMP_218"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_379(F3Ddatasets.Round) -> round_[_rID]
REF_380(uint256) -> REF_379.keys
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_380', '_keys'] 
TMP_220(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.ethRec(uint256,uint256), arguments:['TMP_219', '_keys'] 
RETURN TMP_220"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_221(uint256) = LIBRARY_CALL, dest:F3DKeysCalcShort, function:F3DKeysCalcShort.eth(uint256), arguments:['_keys'] 
RETURN TMP_221"];
}
// Function: 2655.sol-FOMO3TEST1-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_374(bool) = activated_ == True
TMP_375(None) = SOLIDITY_CALL require(bool,string)(TMP_374,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2655.sol-FOMO3TEST1-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_376(bool) = _codeLength == 0
TMP_377(None) = SOLIDITY_CALL require(bool,string)(TMP_376,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 2655.sol-FOMO3TEST1-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_378(bool) = _eth >= 1000000000
TMP_379(None) = SOLIDITY_CALL require(bool,string)(TMP_378,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_380(bool) = _eth <= 100000000000000000000000
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 2655.sol-FOMO3TEST1-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_390(F3Ddatasets.Player) -> plyr_[_pID]
REF_391(uint256) -> REF_390.lrnd
TMP_228(bool) = REF_391 != 0
CONDITION TMP_228"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_392(F3Ddatasets.Player) -> plyr_[_pID]
REF_393(uint256) -> REF_392.lrnd
INTERNAL_CALL, FOMO3TEST1.updateGenVault(uint256,uint256)(_pID,REF_393)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_394(F3Ddatasets.Player) -> plyr_[_pID]
REF_395(uint256) -> REF_394.lrnd
REF_395(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_396(uint256) -> _eventData_.compressedData
REF_397(uint256) -> _eventData_.compressedData
TMP_230(uint256) = REF_397 + 10
REF_396(uint256) (->_eventData_) := TMP_230(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2655.sol-FOMO3TEST1-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_322(uint256) = rID_ + 1
_rID(uint256) := TMP_322(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_516(F3Ddatasets.Round) -> round_[_rID]
REF_517(uint256) -> REF_516.pot
REF_518(F3Ddatasets.Round) -> round_[_rID]
REF_519(uint256) -> REF_518.pot
TMP_323(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_519', 'msg.value'] 
REF_517(uint256) (->round_) := TMP_323(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 2655.sol-FOMO3TEST1-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_228(F3Ddatasets.Round) -> round_[_rID]
REF_229(uint256) -> REF_228.strt
TMP_129(uint256) = REF_229 + rndGap_
TMP_130(bool) = _now > TMP_129
REF_230(F3Ddatasets.Round) -> round_[_rID]
REF_231(uint256) -> REF_230.end
TMP_131(bool) = _now <= REF_231
REF_232(F3Ddatasets.Round) -> round_[_rID]
REF_233(uint256) -> REF_232.end
TMP_132(bool) = _now > REF_233
REF_234(F3Ddatasets.Round) -> round_[_rID]
REF_235(uint256) -> REF_234.plyr
TMP_133(bool) = REF_235 == 0
TMP_134(bool) = TMP_132 && TMP_133
TMP_135(bool) = TMP_131 || TMP_134
TMP_136(bool) = TMP_130 && TMP_135
CONDITION TMP_136"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_236(F3Ddatasets.Player) -> plyr_[_pID]
REF_237(uint256) -> REF_236.gen
TMP_137(uint256) = INTERNAL_CALL, FOMO3TEST1.withdrawEarnings(uint256)(_pID)
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_137', '_eth'] 
REF_237(uint256) (->plyr_) := TMP_138(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FOMO3TEST1.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_239(F3Ddatasets.Round) -> round_[_rID]
REF_240(uint256) -> REF_239.end
TMP_140(bool) = _now > REF_240
REF_241(F3Ddatasets.Round) -> round_[_rID]
REF_242(bool) -> REF_241.ended
TMP_141(bool) = REF_242 == False
TMP_142(bool) = TMP_140 && TMP_141
CONDITION TMP_142"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_243(F3Ddatasets.Round) -> round_[_rID]
REF_244(bool) -> REF_243.ended
REF_244(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_143(F3Ddatasets.EventReturns) = INTERNAL_CALL, FOMO3TEST1.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_143(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_245(uint256) -> _eventData_.compressedData
REF_246(uint256) -> _eventData_.compressedData
TMP_144(uint256) = _now * 1000000000000000000
TMP_145(uint256) = REF_246 + TMP_144
REF_245(uint256) (->_eventData_) := TMP_145(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_247(uint256) -> _eventData_.compressedIDs
REF_248(uint256) -> _eventData_.compressedIDs
TMP_146(uint256) = REF_248 + _pID
REF_247(uint256) (->_eventData_) := TMP_146(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_250(F3Ddatasets.Player) -> plyr_[_pID]
REF_251(bytes32) -> REF_250.name
REF_252(uint256) -> _eventData_.compressedData
REF_253(uint256) -> _eventData_.compressedIDs
REF_254(address) -> _eventData_.winnerAddr
REF_255(bytes32) -> _eventData_.winnerName
REF_256(uint256) -> _eventData_.amountWon
REF_257(uint256) -> _eventData_.newPot
REF_258(uint256) -> _eventData_.P3DAmount
REF_259(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_251,REF_252,REF_253,REF_254,REF_255,REF_256,REF_257,REF_258,REF_259)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2655.sol-FOMO3TEST1-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_29(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_29(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_33(uint256) = INTERNAL_CALL, FOMO3TEST1.verifyTeam(uint256)(_team)
_team(uint256) := TMP_33(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FOMO3TEST1.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FOMO3TEST1.isActivated()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FOMO3TEST1.isHuman()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FOMO3TEST1.isWithinLimits(uint256)(_eth)"];
8->1;
}
// Function: 2655.sol-FOMO3TEST1-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_28(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_28(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_28(uint256) = INTERNAL_CALL, FOMO3TEST1.verifyTeam(uint256)(_team)
_team(uint256) := TMP_28(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FOMO3TEST1.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FOMO3TEST1.isActivated()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FOMO3TEST1.isHuman()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FOMO3TEST1.isWithinLimits(uint256)(_eth)"];
7->1;
}
// Function: 2655.sol-FOMO3TEST1-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_30(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_30(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_38(uint256) = INTERNAL_CALL, FOMO3TEST1.verifyTeam(uint256)(_team)
_team(uint256) := TMP_38(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FOMO3TEST1.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FOMO3TEST1.isActivated()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FOMO3TEST1.isHuman()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FOMO3TEST1.isWithinLimits(uint256)(_eth)"];
8->1;
}
// Function: 2655.sol-FOMO3TEST1-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = FOMO3TEST1

IRs:
name(string) := FOMO3TEST1(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = FOMO3TEST1

IRs:
symbol(string) := FOMO3TEST1(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInc_ = 60

IRs:
rndInc_(uint256) := 60(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndMax_ = 28800

IRs:
rndMax_(uint256) := 28800(uint256)"];
}
// Function: 2655.sol-FOMO3TEST1-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 0

IRs:
rndExtra_(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 120

IRs:
rndGap_(uint256) := 120(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 2655.sol-FOMO3TEST1-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_268(uint256) = INTERNAL_CALL, FOMO3TEST1.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_268(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_269(bool) = _earnings > 0
CONDITION TMP_269"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_462(F3Ddatasets.Player) -> plyr_[_pID]
REF_463(uint256) -> REF_462.gen
REF_465(F3Ddatasets.Player) -> plyr_[_pID]
REF_466(uint256) -> REF_465.gen
TMP_270(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_466'] 
REF_463(uint256) (->plyr_) := TMP_270(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_467(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_468(F3Ddatasets.PlayerRounds) -> REF_467[_rIDlast]
REF_469(uint256) -> REF_468.mask
REF_471(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_472(F3Ddatasets.PlayerRounds) -> REF_471[_rIDlast]
REF_473(uint256) -> REF_472.mask
TMP_271(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_473'] 
REF_469(uint256) (->plyrRnds_) := TMP_271(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 2655.sol-FOMO3TEST1-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_545(F3Ddatasets.Round) -> round_[_rID]
REF_546(uint256) -> REF_545.keys
TMP_343(uint256) = TMP_342 / REF_546
_ppt(uint256) := TMP_343(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_547(F3Ddatasets.Round) -> round_[_rID]
REF_548(uint256) -> REF_547.mask
REF_550(F3Ddatasets.Round) -> round_[_rID]
REF_551(uint256) -> REF_550.mask
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_551'] 
REF_548(uint256) (->round_) := TMP_344(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_346(uint256) = TMP_345 / 1000000000000000000
_pearn(uint256) := TMP_346(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_553(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_554(F3Ddatasets.PlayerRounds) -> REF_553[_rID]
REF_555(uint256) -> REF_554.mask
REF_556(F3Ddatasets.Round) -> round_[_rID]
REF_557(uint256) -> REF_556.mask
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_557', '_keys'] 
TMP_348(uint256) = TMP_347 / 1000000000000000000
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_348', '_pearn'] 
REF_561(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_562(F3Ddatasets.PlayerRounds) -> REF_561[_rID]
REF_563(uint256) -> REF_562.mask
TMP_350(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_349', 'REF_563'] 
REF_555(uint256) (->plyrRnds_) := TMP_350(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_566(F3Ddatasets.Round) -> round_[_rID]
REF_567(uint256) -> REF_566.keys
TMP_351(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_567'] 
TMP_352(uint256) = TMP_351 / 1000000000000000000
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_352'] 
RETURN TMP_353"];
}
// Function: 2655.sol-FOMO3TEST1-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_474(F3Ddatasets.Round) -> round_[_rID]
REF_475(uint256) -> REF_474.end
TMP_272(bool) = _now > REF_475
REF_476(F3Ddatasets.Round) -> round_[_rID]
REF_477(uint256) -> REF_476.plyr
TMP_273(bool) = REF_477 == 0
TMP_274(bool) = TMP_272 && TMP_273
CONDITION TMP_274"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_275(uint256) = _keys / 1000000000000000000
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_275', 'rndInc_'] 
TMP_277(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_276', '_now'] 
_newTime(uint256) := TMP_277(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_278(uint256) = _keys / 1000000000000000000
TMP_279(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_278', 'rndInc_'] 
REF_482(F3Ddatasets.Round) -> round_[_rID]
REF_483(uint256) -> REF_482.end
TMP_280(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_279', 'REF_483'] 
_newTime(uint256) := TMP_280(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_281(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_282(bool) = _newTime < TMP_281
CONDITION TMP_282"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_485(F3Ddatasets.Round) -> round_[_rID]
REF_486(uint256) -> REF_485.end
REF_486(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_487(F3Ddatasets.Round) -> round_[_rID]
REF_488(uint256) -> REF_487.end
TMP_283(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_488(uint256) (->round_) := TMP_283(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 2655.sol-FOMO3TEST1-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_225(bool) = _team < 0
TMP_226(bool) = _team > 3
TMP_227(bool) = TMP_225 || TMP_226
CONDITION TMP_227"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 2655.sol-FOMO3TEST1-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_31(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_31(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_32(F3Ddatasets.Round) -> round_[_rID]
REF_33(uint256) -> REF_32.end
TMP_43(bool) = _now > REF_33
REF_34(F3Ddatasets.Round) -> round_[_rID]
REF_35(bool) -> REF_34.ended
TMP_44(bool) = REF_35 == False
TMP_45(bool) = TMP_43 && TMP_44
REF_36(F3Ddatasets.Round) -> round_[_rID]
REF_37(uint256) -> REF_36.plyr
TMP_46(bool) = REF_37 != 0
TMP_47(bool) = TMP_45 && TMP_46
CONDITION TMP_47"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_38(F3Ddatasets.Round) -> round_[_rID]
REF_39(bool) -> REF_38.ended
REF_39(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_48(F3Ddatasets.EventReturns) = INTERNAL_CALL, FOMO3TEST1.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_48(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_49(uint256) = INTERNAL_CALL, FOMO3TEST1.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_49(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_50(bool) = _eth > 0
CONDITION TMP_50"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_40(F3Ddatasets.Player) -> plyr_[_pID]
REF_41(address) -> REF_40.addr
Transfer dest:REF_41 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_43(uint256) -> _eventData_.compressedData
REF_44(uint256) -> _eventData_.compressedData
TMP_52(uint256) = _now * 1000000000000000000
TMP_53(uint256) = REF_44 + TMP_52
REF_43(uint256) (->_eventData_) := TMP_53(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_45(uint256) -> _eventData_.compressedIDs
REF_46(uint256) -> _eventData_.compressedIDs
TMP_54(uint256) = REF_46 + _pID
REF_45(uint256) (->_eventData_) := TMP_54(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_48(F3Ddatasets.Player) -> plyr_[_pID]
REF_49(bytes32) -> REF_48.name
REF_50(uint256) -> _eventData_.compressedData
REF_51(uint256) -> _eventData_.compressedIDs
REF_52(address) -> _eventData_.winnerAddr
REF_53(bytes32) -> _eventData_.winnerName
REF_54(uint256) -> _eventData_.amountWon
REF_55(uint256) -> _eventData_.newPot
REF_56(uint256) -> _eventData_.P3DAmount
REF_57(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_49,_eth,REF_50,REF_51,REF_52,REF_53,REF_54,REF_55,REF_56,REF_57)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_56(uint256) = INTERNAL_CALL, FOMO3TEST1.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_56(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_57(bool) = _eth > 0
CONDITION TMP_57"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_58(F3Ddatasets.Player) -> plyr_[_pID]
REF_59(address) -> REF_58.addr
Transfer dest:REF_59 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_62(F3Ddatasets.Player) -> plyr_[_pID]
REF_63(bytes32) -> REF_62.name
Emit onWithdraw(_pID,msg.sender,REF_63,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FOMO3TEST1.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FOMO3TEST1.isHuman()()"];
23->1;
}
// Function: 2655.sol-FOMO3TEST1-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_568(F3Ddatasets.Player) -> plyr_[_pID]
REF_569(uint256) -> REF_568.lrnd
INTERNAL_CALL, FOMO3TEST1.updateGenVault(uint256,uint256)(_pID,REF_569)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_570(F3Ddatasets.Player) -> plyr_[_pID]
REF_571(uint256) -> REF_570.win
REF_573(F3Ddatasets.Player) -> plyr_[_pID]
REF_574(uint256) -> REF_573.gen
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_571', 'REF_574'] 
REF_576(F3Ddatasets.Player) -> plyr_[_pID]
REF_577(uint256) -> REF_576.aff
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_355', 'REF_577'] 
_earnings(uint256) := TMP_356(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_357(bool) = _earnings > 0
CONDITION TMP_357"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_578(F3Ddatasets.Player) -> plyr_[_pID]
REF_579(uint256) -> REF_578.win
REF_579(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_580(F3Ddatasets.Player) -> plyr_[_pID]
REF_581(uint256) -> REF_580.gen
REF_581(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_582(F3Ddatasets.Player) -> plyr_[_pID]
REF_583(uint256) -> REF_582.aff
REF_583(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 2655.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_404 = CONVERT _input to bytes
_temp(bytes) := TMP_404(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_619 -> LENGTH _temp
_length(uint256) := REF_619(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_405(bool) = _length <= 32
TMP_406(bool) = _length > 0
TMP_407(bool) = TMP_405 && TMP_406
TMP_408(None) = SOLIDITY_CALL require(bool,string)(TMP_407,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_620(None) -> _temp[0]
TMP_409(bool) = REF_620 != 32
TMP_410(uint256) = _length - 1
REF_621(None) -> _temp[TMP_410]
TMP_411(bool) = REF_621 != 32
TMP_412(bool) = TMP_409 && TMP_411
TMP_413(None) = SOLIDITY_CALL require(bool,string)(TMP_412,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_622(None) -> _temp[0]
TMP_414(bool) = REF_622 == 48
CONDITION TMP_414"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_623(None) -> _temp[1]
TMP_415(bool) = REF_623 != 120
TMP_416(None) = SOLIDITY_CALL require(bool,string)(TMP_415,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_624(None) -> _temp[1]
TMP_417(bool) = REF_624 != 88
TMP_418(None) = SOLIDITY_CALL require(bool,string)(TMP_417,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_419(bool) = i < _length
CONDITION TMP_419"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_625(None) -> _temp[i]
TMP_420(bool) = REF_625 > 64
REF_626(None) -> _temp[i]
TMP_421(bool) = REF_626 < 91
TMP_422(bool) = TMP_420 && TMP_421
CONDITION TMP_422"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_627(bytes1) -> _temp[i]
REF_628(None) -> _temp[i]
TMP_423 = CONVERT REF_628 to uint256
TMP_424(uint256) = TMP_423 + 32
TMP_425 = CONVERT TMP_424 to bytes1
REF_627(bytes1) (->_temp) := TMP_425(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_426(bool) = _hasNonNumber == False
CONDITION TMP_426"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_629(None) -> _temp[i]
TMP_427(bool) = REF_629 == 32
REF_630(None) -> _temp[i]
TMP_428(bool) = REF_630 > 96
REF_631(None) -> _temp[i]
TMP_429(bool) = REF_631 < 123
TMP_430(bool) = TMP_428 && TMP_429
TMP_431(bool) = TMP_427 || TMP_430
REF_632(None) -> _temp[i]
TMP_432(bool) = REF_632 > 47
REF_633(None) -> _temp[i]
TMP_433(bool) = REF_633 < 58
TMP_434(bool) = TMP_432 && TMP_433
TMP_435(bool) = TMP_431 || TMP_434
TMP_436(None) = SOLIDITY_CALL require(bool,string)(TMP_435,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_634(None) -> _temp[i]
TMP_437(bool) = REF_634 == 32
CONDITION TMP_437"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_438(uint256) = i + 1
REF_635(None) -> _temp[TMP_438]
TMP_439(bool) = REF_635 != 32
TMP_440(None) = SOLIDITY_CALL require(bool,string)(TMP_439,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_441(bool) = _hasNonNumber == False
REF_636(None) -> _temp[i]
TMP_442(bool) = REF_636 < 48
REF_637(None) -> _temp[i]
TMP_443(bool) = REF_637 > 57
TMP_444(bool) = TMP_442 || TMP_443
TMP_445(bool) = TMP_441 && TMP_444
CONDITION TMP_445"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_446(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_447(bool) = _hasNonNumber == True
TMP_448(None) = SOLIDITY_CALL require(bool,string)(TMP_447,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 2655.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_457(uint256) = a + b
c(uint256) := TMP_457(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_458(bool) = c >= a
TMP_459(None) = SOLIDITY_CALL require(bool,string)(TMP_458,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2655.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_449(bool) = a == 0
CONDITION TMP_449"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_450(uint256) = a * b
c(uint256) := TMP_450(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_451(uint256) = c / a
TMP_452(bool) = TMP_451 == b
TMP_453(None) = SOLIDITY_CALL require(bool,string)(TMP_452,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2655.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_467(bool) = x == 0
CONDITION TMP_467"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_468(bool) = y == 0
CONDITION TMP_468"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_469(bool) = i < y
CONDITION TMP_469"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_470(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_470(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_471(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 2655.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_466(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_466"];
}
// Function: 2655.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_460(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_461(uint256) = TMP_460 / 2
z(uint256) := TMP_461(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_462(bool) = z < y
CONDITION TMP_462"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_463(uint256) = x / z
TMP_464(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_463,z)
TMP_465(uint256) = TMP_464 / 2
z(uint256) := TMP_465(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 2655.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_454(bool) = b <= a
TMP_455(None) = SOLIDITY_CALL require(bool,string)(TMP_454,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_456(uint256) = a - b
RETURN TMP_456"];
}
}
