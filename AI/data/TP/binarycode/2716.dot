digraph G {
// Function: 2716.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 2716.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = _to != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_22(bool) = _value <= REF_0
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_24(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_24(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_25(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2716.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 2716.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 2716.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 2716.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 2716.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 2716.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 2716.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 2716.sol-HasNoEther-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == 0)

IRs:
TMP_94(bool) = msg.value == 0
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
}
// Function: 2716.sol-HasNoEther-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2716.sol-HasNoEther-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_101(bool) = msg.sender == owner
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2716.sol-HasNoEther-reclaimEther()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(owner.send(address(this).balance))

IRs:
TMP_96 = CONVERT this to address
TMP_97(uint256) = SOLIDITY_CALL balance(address)(TMP_96)
TMP_98 = SEND dest:owner value:TMP_97
TMP_99(None) = SOLIDITY_CALL assert(bool)(TMP_98)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2716.sol-HasNoEther-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_89 = CONVERT 0 to address
TMP_90(bool) = newOwner != TMP_89
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2716.sol-MintableToken-allowance(address,address)
digraph{
}
// Function: 2716.sol-MintableToken-approve(address,uint256)
digraph{
}
// Function: 2716.sol-MintableToken-balanceOf(address)
digraph{
}
// Function: 2716.sol-MintableToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2716.sol-MintableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
oldValue(uint256) := REF_76(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_71(bool) = _subtractedValue > oldValue
CONDITION TMP_71"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
REF_78(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_79(mapping(address => uint256)) -> allowed[msg.sender]
REF_80(uint256) -> REF_79[_spender]
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_80(uint256) (->allowed) := TMP_72(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(uint256) -> REF_82[_spender]
Emit Approval(msg.sender,_spender,REF_83)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2716.sol-MintableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', '_addedValue'] 
REF_69(uint256) (->allowed) := TMP_69(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
Emit Approval(msg.sender,_spender,REF_74)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2716.sol-MintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_82(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_93(uint256) -> balances[_to]
REF_94(uint256) -> balances[_to]
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_94', '_amount'] 
REF_93(uint256) (->balances) := TMP_83(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_85 = CONVERT 0 to address
Emit Transfer(TMP_85,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2716.sol-MintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_87(bool) = msg.sender == owner
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2716.sol-MintableToken-transfer(address,uint256)
digraph{
}
// Function: 2716.sol-MintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 2716.sol-MintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_52 = CONVERT 0 to address
TMP_53(bool) = newOwner != TMP_52
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2716.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2716.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2716.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2716.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_16(uint256) = a + b
c(uint256) := TMP_16(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_17(bool) = c >= a
TMP_18(None) = SOLIDITY_CALL assert(bool)(TMP_17)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2716.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_12(uint256) = a / b
c(uint256) := TMP_12(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2716.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_7(bool) = a == 0
CONDITION TMP_7"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_8(uint256) = a * b
c(uint256) := TMP_8(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_9(uint256) = c / a
TMP_10(bool) = TMP_9 == b
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2716.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_13(bool) = b <= a
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_15(uint256) = a - b
RETURN TMP_15"];
}
// Function: 2716.sol-Scale-adjustInflationRate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lastInflationUpdate = now

IRs:
lastInflationUpdate(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
inflationRate > 100

IRs:
TMP_156(bool) = inflationRate > 100
CONDITION TMP_156"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inflationRate = inflationRate.sub(300)

IRs:
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['inflationRate', '300'] 
inflationRate(uint256) := TMP_157(uint256)"];
3->7;
4[label="Node Type: IF 4

EXPRESSION:
inflationRate > 10

IRs:
TMP_158(bool) = inflationRate > 10
CONDITION TMP_158"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
inflationRate = inflationRate.sub(5)

IRs:
TMP_159(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['inflationRate', '5'] 
inflationRate(uint256) := TMP_159(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
poolMintAmount = totalSupply.mul(inflationRate).div(1000).mul(poolPercentage).div(100)

IRs:
TMP_160(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['totalSupply', 'inflationRate'] 
TMP_161(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_160', '1000'] 
TMP_162(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_161', 'poolPercentage'] 
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_162', '100'] 
poolMintAmount(uint256) := TMP_163(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownerMintAmount = totalSupply.mul(inflationRate).div(1000).mul(ownerPercentage).div(100)

IRs:
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['totalSupply', 'inflationRate'] 
TMP_165(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_164', '1000'] 
TMP_166(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_165', 'ownerPercentage'] 
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_166', '100'] 
ownerMintAmount(uint256) := TMP_167(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
stakingMintAmount = totalSupply.mul(inflationRate).div(1000).mul(stakingPercentage).div(100)

IRs:
TMP_168(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['totalSupply', 'inflationRate'] 
TMP_169(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_168', '1000'] 
TMP_170(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_169', 'stakingPercentage'] 
TMP_171(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_170', '100'] 
stakingMintAmount(uint256) := TMP_171(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
poolMintRate = calculateFraction(poolMintAmount,31536000000000000000000000,decimals)

IRs:
TMP_172(uint256) = INTERNAL_CALL, Scale.calculateFraction(uint256,uint256,uint256)(poolMintAmount,31536000000000000000000000,decimals)
poolMintRate(uint256) := TMP_172(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
ownerMintRate = calculateFraction(ownerMintAmount,31536000000000000000000000,decimals)

IRs:
TMP_173(uint256) = INTERNAL_CALL, Scale.calculateFraction(uint256,uint256,uint256)(ownerMintAmount,31536000000000000000000000,decimals)
ownerMintRate(uint256) := TMP_173(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
stakingMintRate = calculateFraction(stakingMintAmount,31536000000000000000000000,decimals)

IRs:
TMP_174(uint256) = INTERNAL_CALL, Scale.calculateFraction(uint256,uint256,uint256)(stakingMintAmount,31536000000000000000000000,decimals)
stakingMintRate(uint256) := TMP_174(uint256)"];
}
// Function: 2716.sol-Scale-allowance(address,address)
digraph{
}
// Function: 2716.sol-Scale-approve(address,uint256)
digraph{
}
// Function: 2716.sol-Scale-balanceOf(address)
digraph{
}
// Function: 2716.sol-Scale-calculateFraction(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_numerator = _numerator.mul(10 ** (_precision + 1))

IRs:
TMP_250(uint256) = _precision + 1
TMP_251(uint256) = 10 ** TMP_250
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_numerator', 'TMP_251'] 
_numerator(uint256) := TMP_252(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_quotient = ((_numerator.div(_denominator)) + 5) / 10

IRs:
TMP_253(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_numerator', '_denominator'] 
TMP_254(uint256) = TMP_253 + 5
TMP_255(uint256) = TMP_254 / 10
_quotient(uint256) := TMP_255(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(_quotient)

IRs:
RETURN _quotient"];
4[label="Node Type: RETURN 4

EXPRESSION:
quotient

IRs:
RETURN quotient"];
}
// Function: 2716.sol-Scale-calculateMintTotal(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(_timeInSeconds.mul(_mintRate))

IRs:
TMP_256(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_timeInSeconds', '_mintRate'] 
RETURN TMP_256"];
2[label="Node Type: RETURN 2

EXPRESSION:
mintAmount

IRs:
RETURN mintAmount"];
}
// Function: 2716.sol-Scale-calculateStakeGains(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_nowAsTimingVariable = _now.div(timingVariable)

IRs:
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_now', 'timingVariable'] 
_nowAsTimingVariable(uint256) := TMP_208(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_initialStakeTimeInVariable = stakeBalances[msg.sender].initialStakeTime

IRs:
REF_202(Scale.AddressStakeData) -> stakeBalances[msg.sender]
REF_203(uint256) -> REF_202.initialStakeTime
_initialStakeTimeInVariable(uint256) := REF_203(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_timePassedSinceStakeInVariable = _nowAsTimingVariable.sub(_initialStakeTimeInVariable)

IRs:
TMP_209(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_nowAsTimingVariable', '_initialStakeTimeInVariable'] 
_timePassedSinceStakeInVariable(uint256) := TMP_209(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_stakePercentages = 0

IRs:
_stakePercentages(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_tokensToMint = 0

IRs:
_tokensToMint(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->17;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = _initialStakeTimeInVariable

IRs:
i(uint256) := _initialStakeTimeInVariable(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < _nowAsTimingVariable

IRs:
TMP_210(bool) = i < _nowAsTimingVariable
CONDITION TMP_210"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
totalStakingHistory[i] != 0

IRs:
REF_205(uint256) -> totalStakingHistory[i]
TMP_211(bool) = REF_205 != 0
CONDITION TMP_211"];
11->12[label="True"];
11->14[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_stakePercentages = _stakePercentages.add(calculateFraction(stakeBalances[msg.sender].stakeBalance,totalStakingHistory[i],decimals))

IRs:
REF_207(Scale.AddressStakeData) -> stakeBalances[msg.sender]
REF_208(uint256) -> REF_207.stakeBalance
REF_209(uint256) -> totalStakingHistory[i]
TMP_212(uint256) = INTERNAL_CALL, Scale.calculateFraction(uint256,uint256,uint256)(REF_208,REF_209,decimals)
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_stakePercentages', 'TMP_212'] 
_stakePercentages(uint256) := TMP_213(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_lastUsedVariable = totalStakingHistory[i]

IRs:
REF_210(uint256) -> totalStakingHistory[i]
_lastUsedVariable(uint256) := REF_210(uint256)"];
13->15;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_stakePercentages = _stakePercentages.add(calculateFraction(stakeBalances[msg.sender].stakeBalance,_lastUsedVariable,decimals))

IRs:
REF_212(Scale.AddressStakeData) -> stakeBalances[msg.sender]
REF_213(uint256) -> REF_212.stakeBalance
TMP_214(uint256) = INTERNAL_CALL, Scale.calculateFraction(uint256,uint256,uint256)(REF_213,_lastUsedVariable,decimals)
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_stakePercentages', 'TMP_214'] 
_stakePercentages(uint256) := TMP_215(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_216(uint256) := i(uint256)
i(uint256) = i + 1"];
16->10;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
_stakePercentageAverage = calculateFraction(_stakePercentages,_timePassedSinceStakeInVariable,0)

IRs:
TMP_217(uint256) = INTERNAL_CALL, Scale.calculateFraction(uint256,uint256,uint256)(_stakePercentages,_timePassedSinceStakeInVariable,0)
_stakePercentageAverage(uint256) := TMP_217(uint256)"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
_finalMintRate = stakingMintRate.mul(_stakePercentageAverage)

IRs:
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['stakingMintRate', '_stakePercentageAverage'] 
_finalMintRate(uint256) := TMP_218(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_finalMintRate = _finalMintRate.div(1000000000000000000)

IRs:
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_finalMintRate', '1000000000000000000'] 
_finalMintRate(uint256) := TMP_219(uint256)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_timePassedSinceStakeInVariable >= 365

IRs:
TMP_220(bool) = _timePassedSinceStakeInVariable >= 365
CONDITION TMP_220"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_tokensToMint = calculateMintTotal(timingVariable.mul(365),_finalMintRate)

IRs:
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['timingVariable', '365'] 
TMP_222(uint256) = INTERNAL_CALL, Scale.calculateMintTotal(uint256,uint256)(TMP_221,_finalMintRate)
_tokensToMint(uint256) := TMP_222(uint256)"];
21->23;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_tokensToMint = calculateMintTotal(_timePassedSinceStakeInVariable.mul(timingVariable),_finalMintRate)

IRs:
TMP_223(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_timePassedSinceStakeInVariable', 'timingVariable'] 
TMP_224(uint256) = INTERNAL_CALL, Scale.calculateMintTotal(uint256,uint256)(TMP_223,_finalMintRate)
_tokensToMint(uint256) := TMP_224(uint256)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: RETURN 24

EXPRESSION:
_tokensToMint

IRs:
RETURN _tokensToMint"];
25[label="Node Type: RETURN 25

EXPRESSION:
mintTotal

IRs:
RETURN mintTotal"];
}
// Function: 2716.sol-Scale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_initOwnerSupply = 10000000000000000000000000

IRs:
_initOwnerSupply(uint256) := 10000000000000000000000000(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_success = mint(msg.sender,_initOwnerSupply)

IRs:
TMP_145(bool) = INTERNAL_CALL, MintableToken.mint(address,uint256)(msg.sender,_initOwnerSupply)
_success(bool) := TMP_145(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_success)

IRs:
TMP_146(None) = SOLIDITY_CALL require(bool)(_success)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownerTimeLastMinted = now

IRs:
ownerTimeLastMinted(uint256) := now(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
poolTimeLastMinted = now

IRs:
poolTimeLastMinted(uint256) := now(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
poolMintAmount = _initOwnerSupply.mul(poolPercentage).div(100)

IRs:
TMP_147(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_initOwnerSupply', 'poolPercentage'] 
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_147', '100'] 
poolMintAmount(uint256) := TMP_148(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownerMintAmount = _initOwnerSupply.mul(ownerPercentage).div(100)

IRs:
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_initOwnerSupply', 'ownerPercentage'] 
TMP_150(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_149', '100'] 
ownerMintAmount(uint256) := TMP_150(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
stakingMintAmount = _initOwnerSupply.mul(stakingPercentage).div(100)

IRs:
TMP_151(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_initOwnerSupply', 'stakingPercentage'] 
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_151', '100'] 
stakingMintAmount(uint256) := TMP_152(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_oneYearInSeconds = 31536000000000000000000000

IRs:
_oneYearInSeconds(uint256) := 31536000000000000000000000(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
poolMintRate = calculateFraction(poolMintAmount,_oneYearInSeconds,decimals)

IRs:
TMP_153(uint256) = INTERNAL_CALL, Scale.calculateFraction(uint256,uint256,uint256)(poolMintAmount,_oneYearInSeconds,decimals)
poolMintRate(uint256) := TMP_153(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
ownerMintRate = calculateFraction(ownerMintAmount,_oneYearInSeconds,decimals)

IRs:
TMP_154(uint256) = INTERNAL_CALL, Scale.calculateFraction(uint256,uint256,uint256)(ownerMintAmount,_oneYearInSeconds,decimals)
ownerMintRate(uint256) := TMP_154(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
stakingMintRate = calculateFraction(stakingMintAmount,_oneYearInSeconds,decimals)

IRs:
TMP_155(uint256) = INTERNAL_CALL, Scale.calculateFraction(uint256,uint256,uint256)(stakingMintAmount,_oneYearInSeconds,decimals)
stakingMintRate(uint256) := TMP_155(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
lastInflationUpdate = now

IRs:
lastInflationUpdate(uint256) := now(uint256)"];
}
// Function: 2716.sol-Scale-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_127(mapping(address => uint256)) -> allowed[msg.sender]
REF_128(uint256) -> REF_127[_spender]
oldValue(uint256) := REF_128(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_134(bool) = _subtractedValue > oldValue
CONDITION TMP_134"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_129(mapping(address => uint256)) -> allowed[msg.sender]
REF_130(uint256) -> REF_129[_spender]
REF_130(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_131(mapping(address => uint256)) -> allowed[msg.sender]
REF_132(uint256) -> REF_131[_spender]
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_132(uint256) (->allowed) := TMP_135(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_134(mapping(address => uint256)) -> allowed[msg.sender]
REF_135(uint256) -> REF_134[_spender]
Emit Approval(msg.sender,_spender,REF_135)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2716.sol-Scale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2716.sol-Scale-getStakedBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
stakeBalances[msg.sender].stakeBalance

IRs:
REF_220(Scale.AddressStakeData) -> stakeBalances[msg.sender]
REF_221(uint256) -> REF_220.stakeBalance
RETURN REF_221"];
2[label="Node Type: RETURN 2

EXPRESSION:
stakedBalance

IRs:
RETURN stakedBalance"];
}
// Function: 2716.sol-Scale-getStakingGains(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
stakeBalances[msg.sender].stakeBalance == 0

IRs:
REF_179(Scale.AddressStakeData) -> stakeBalances[msg.sender]
REF_180(uint256) -> REF_179.stakeBalance
TMP_194(bool) = REF_180 == 0
CONDITION TMP_194"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
calculateStakeGains(_now)

IRs:
TMP_195(uint256) = INTERNAL_CALL, Scale.calculateStakeGains(uint256)(_now)
RETURN TMP_195"];
}
// Function: 2716.sol-Scale-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_120(mapping(address => uint256)) -> allowed[msg.sender]
REF_121(uint256) -> REF_120[_spender]
REF_122(mapping(address => uint256)) -> allowed[msg.sender]
REF_123(uint256) -> REF_122[_spender]
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_123', '_addedValue'] 
REF_121(uint256) (->allowed) := TMP_132(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_125(mapping(address => uint256)) -> allowed[msg.sender]
REF_126(uint256) -> REF_125[_spender]
Emit Approval(msg.sender,_spender,REF_126)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2716.sol-Scale-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_115(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_99(uint256) -> balances[_to]
REF_100(uint256) -> balances[_to]
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_100', '_amount'] 
REF_99(uint256) (->balances) := TMP_116(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_118 = CONVERT 0 to address
Emit Transfer(TMP_118,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2716.sol-Scale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_258(bool) = msg.sender == owner
TMP_259(None) = SOLIDITY_CALL require(bool)(TMP_258)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2716.sol-Scale-ownerClaim()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > ownerTimeLastMinted)

IRs:
TMP_226(bool) = now > ownerTimeLastMinted
TMP_227(None) = SOLIDITY_CALL require(bool)(TMP_226)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_timePassedSinceLastMint = now.sub(ownerTimeLastMinted)

IRs:
TMP_228(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['now', 'ownerTimeLastMinted'] 
_timePassedSinceLastMint(uint256) := TMP_228(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(_timePassedSinceLastMint > 0)

IRs:
TMP_229(bool) = _timePassedSinceLastMint > 0
TMP_230(None) = SOLIDITY_CALL assert(bool)(TMP_229)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_tokenMintCount = calculateMintTotal(_timePassedSinceLastMint,ownerMintRate)

IRs:
TMP_231(uint256) = INTERNAL_CALL, Scale.calculateMintTotal(uint256,uint256)(_timePassedSinceLastMint,ownerMintRate)
_tokenMintCount(uint256) := TMP_231(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_mintingSuccess = mint(msg.sender,_tokenMintCount)

IRs:
TMP_232(bool) = INTERNAL_CALL, MintableToken.mint(address,uint256)(msg.sender,_tokenMintCount)
_mintingSuccess(bool) := TMP_232(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(_mintingSuccess)

IRs:
TMP_233(None) = SOLIDITY_CALL require(bool)(_mintingSuccess)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ownerTimeLastMinted = now

IRs:
ownerTimeLastMinted(uint256) := now(uint256)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
11->1;
}
// Function: 2716.sol-Scale-poolIssue()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(pool != address(0))

IRs:
TMP_235 = CONVERT 0 to address
TMP_236(bool) = pool != TMP_235
TMP_237(None) = SOLIDITY_CALL require(bool)(TMP_236)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now > poolTimeLastMinted)

IRs:
TMP_238(bool) = now > poolTimeLastMinted
TMP_239(None) = SOLIDITY_CALL require(bool)(TMP_238)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(pool != address(0))

IRs:
TMP_240 = CONVERT 0 to address
TMP_241(bool) = pool != TMP_240
TMP_242(None) = SOLIDITY_CALL require(bool)(TMP_241)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_timePassedSinceLastMint = now.sub(poolTimeLastMinted)

IRs:
TMP_243(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['now', 'poolTimeLastMinted'] 
_timePassedSinceLastMint(uint256) := TMP_243(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(_timePassedSinceLastMint > 0)

IRs:
TMP_244(bool) = _timePassedSinceLastMint > 0
TMP_245(None) = SOLIDITY_CALL assert(bool)(TMP_244)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_tokenMintCount = calculateMintTotal(_timePassedSinceLastMint,poolMintRate)

IRs:
TMP_246(uint256) = INTERNAL_CALL, Scale.calculateMintTotal(uint256,uint256)(_timePassedSinceLastMint,poolMintRate)
_tokenMintCount(uint256) := TMP_246(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_mintingSuccess = mint(pool,_tokenMintCount)

IRs:
TMP_247(bool) = INTERNAL_CALL, MintableToken.mint(address,uint256)(pool,_tokenMintCount)
_mintingSuccess(bool) := TMP_247(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(_mintingSuccess)

IRs:
TMP_248(None) = SOLIDITY_CALL require(bool)(_mintingSuccess)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
poolTimeLastMinted = now

IRs:
poolTimeLastMinted(uint256) := now(uint256)"];
}
// Function: 2716.sol-Scale-reclaimEther()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(owner.send(address(this).balance))

IRs:
TMP_105 = CONVERT this to address
TMP_106(uint256) = SOLIDITY_CALL balance(address)(TMP_105)
TMP_107 = SEND dest:owner value:TMP_106
TMP_108(None) = SOLIDITY_CALL assert(bool)(TMP_107)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2716.sol-Scale-setPool(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pool = _newAddress

IRs:
pool(address) := _newAddress(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2716.sol-Scale-setTotalStakingHistory()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_nowAsTimingVariable = now.div(timingVariable)

IRs:
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['now', 'timingVariable'] 
_nowAsTimingVariable(uint256) := TMP_225(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalStakingHistory[_nowAsTimingVariable] = totalScaleStaked

IRs:
REF_219(uint256) -> totalStakingHistory[_nowAsTimingVariable]
REF_219(uint256) (->totalStakingHistory) := totalScaleStaked(uint256)"];
}
// Function: 2716.sol-Scale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = SCALE

IRs:
name(string) := SCALE(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = SCALE

IRs:
symbol(string) := SCALE(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 2716.sol-Scale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
pool = address(0)

IRs:
TMP_257 = CONVERT 0 to address
pool(address) := TMP_257(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
poolPercentage = 70

IRs:
poolPercentage(uint256) := 70(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
ownerPercentage = 5

IRs:
ownerPercentage(uint256) := 5(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
stakingPercentage = 25

IRs:
stakingPercentage(uint256) := 25(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
timingVariable = 86400

IRs:
timingVariable(uint256) := 86400(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
inflationRate = 1000

IRs:
inflationRate(uint256) := 1000(uint256)"];
}
// Function: 2716.sol-Scale-stake(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_user])

IRs:
REF_167(uint256) -> balances[_user]
TMP_185(bool) = _value <= REF_167
TMP_186(None) = SOLIDITY_CALL require(bool)(TMP_185)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(stakeBalances[_user].stakeBalance == 0)

IRs:
REF_168(Scale.AddressStakeData) -> stakeBalances[_user]
REF_169(uint256) -> REF_168.stakeBalance
TMP_187(bool) = REF_169 == 0
TMP_188(None) = SOLIDITY_CALL require(bool)(TMP_187)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_user] = balances[_user].sub(_value)

IRs:
REF_170(uint256) -> balances[_user]
REF_171(uint256) -> balances[_user]
TMP_189(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_171', '_value'] 
REF_170(uint256) (->balances) := TMP_189(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stakeBalances[_user].stakeBalance = _value

IRs:
REF_173(Scale.AddressStakeData) -> stakeBalances[_user]
REF_174(uint256) -> REF_173.stakeBalance
REF_174(uint256) (->stakeBalances) := _value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalScaleStaked = totalScaleStaked.add(_value)

IRs:
TMP_190(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalScaleStaked', '_value'] 
totalScaleStaked(uint256) := TMP_190(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
stakeBalances[_user].initialStakeTime = now.div(timingVariable)

IRs:
REF_176(Scale.AddressStakeData) -> stakeBalances[_user]
REF_177(uint256) -> REF_176.initialStakeTime
TMP_191(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['now', 'timingVariable'] 
REF_177(uint256) (->stakeBalances) := TMP_191(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
setTotalStakingHistory()

IRs:
INTERNAL_CALL, Scale.setTotalStakingHistory()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Stake(_user,_value)

IRs:
Emit Stake(_user,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 2716.sol-Scale-stakeFor(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(stakeBalances[_user].stakeBalance == 0)

IRs:
REF_165(Scale.AddressStakeData) -> stakeBalances[_user]
REF_166(uint256) -> REF_165.stakeBalance
TMP_181(bool) = REF_166 == 0
TMP_182(None) = SOLIDITY_CALL require(bool)(TMP_181)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transfer(_user,_stakeAmount)

IRs:
TMP_183(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(_user,_stakeAmount)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
stake(_user,_stakeAmount)

IRs:
TMP_184(bool) = INTERNAL_CALL, Scale.stake(address,uint256)(_user,_stakeAmount)"];
}
// Function: 2716.sol-Scale-stakeScale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(stake(msg.sender,_stakeAmount))

IRs:
TMP_179(bool) = INTERNAL_CALL, Scale.stake(address,uint256)(msg.sender,_stakeAmount)
TMP_180(None) = SOLIDITY_CALL require(bool)(TMP_179)"];
}
// Function: 2716.sol-Scale-transfer(address,uint256)
digraph{
}
// Function: 2716.sol-Scale-transferFrom(address,address,uint256)
digraph{
}
// Function: 2716.sol-Scale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_110 = CONVERT 0 to address
TMP_111(bool) = newOwner != TMP_110
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 2716.sol-Scale-unstake()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(stakeBalances[msg.sender].stakeBalance > 0)

IRs:
REF_181(Scale.AddressStakeData) -> stakeBalances[msg.sender]
REF_182(uint256) -> REF_181.stakeBalance
TMP_196(bool) = REF_182 > 0
TMP_197(None) = SOLIDITY_CALL require(bool)(TMP_196)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now.div(timingVariable).sub(stakeBalances[msg.sender].initialStakeTime) >= 7)

IRs:
TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['now', 'timingVariable'] 
REF_185(Scale.AddressStakeData) -> stakeBalances[msg.sender]
REF_186(uint256) -> REF_185.initialStakeTime
TMP_199(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_198', 'REF_186'] 
TMP_200(bool) = TMP_199 >= 7
TMP_201(None) = SOLIDITY_CALL require(bool)(TMP_200)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_tokensToMint = calculateStakeGains(now)

IRs:
TMP_202(uint256) = INTERNAL_CALL, Scale.calculateStakeGains(uint256)(now)
_tokensToMint(uint256) := TMP_202(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(stakeBalances[msg.sender].stakeBalance)

IRs:
REF_187(uint256) -> balances[msg.sender]
REF_188(uint256) -> balances[msg.sender]
REF_190(Scale.AddressStakeData) -> stakeBalances[msg.sender]
REF_191(uint256) -> REF_190.stakeBalance
TMP_203(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_188', 'REF_191'] 
REF_187(uint256) (->balances) := TMP_203(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalScaleStaked = totalScaleStaked.sub(stakeBalances[msg.sender].stakeBalance)

IRs:
REF_193(Scale.AddressStakeData) -> stakeBalances[msg.sender]
REF_194(uint256) -> REF_193.stakeBalance
TMP_204(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalScaleStaked', 'REF_194'] 
totalScaleStaked(uint256) := TMP_204(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
mint(msg.sender,_tokensToMint)

IRs:
TMP_205(bool) = INTERNAL_CALL, MintableToken.mint(address,uint256)(msg.sender,_tokensToMint)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Unstake(msg.sender,stakeBalances[msg.sender].stakeBalance,_tokensToMint)

IRs:
REF_195(Scale.AddressStakeData) -> stakeBalances[msg.sender]
REF_196(uint256) -> REF_195.stakeBalance
Emit Unstake(msg.sender,REF_196,_tokensToMint)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
stakeBalances[msg.sender].stakeBalance = 0

IRs:
REF_197(Scale.AddressStakeData) -> stakeBalances[msg.sender]
REF_198(uint256) -> REF_197.stakeBalance
REF_198(uint256) (->stakeBalances) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
stakeBalances[msg.sender].initialStakeTime = 0

IRs:
REF_199(Scale.AddressStakeData) -> stakeBalances[msg.sender]
REF_200(uint256) -> REF_199.initialStakeTime
REF_200(uint256) (->stakeBalances) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
setTotalStakingHistory()

IRs:
INTERNAL_CALL, Scale.setTotalStakingHistory()()"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2716.sol-Scale-updateInflationRate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now.sub(lastInflationUpdate) >= 31536000)

IRs:
TMP_175(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['now', 'lastInflationUpdate'] 
TMP_176(bool) = TMP_175 >= 31536000
TMP_177(None) = SOLIDITY_CALL require(bool)(TMP_176)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
adjustInflationRate()

IRs:
INTERNAL_CALL, Scale.adjustInflationRate()()"];
}
// Function: 2716.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_32(mapping(address => uint256)) -> allowed[_owner]
REF_33(uint256) -> REF_32[_spender]
RETURN REF_33"];
}
// Function: 2716.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_30(mapping(address => uint256)) -> allowed[msg.sender]
REF_31(uint256) -> REF_30[_spender]
REF_31(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2716.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 2716.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_41(mapping(address => uint256)) -> allowed[msg.sender]
REF_42(uint256) -> REF_41[_spender]
oldValue(uint256) := REF_42(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_49(bool) = _subtractedValue > oldValue
CONDITION TMP_49"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_43(mapping(address => uint256)) -> allowed[msg.sender]
REF_44(uint256) -> REF_43[_spender]
REF_44(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_45(mapping(address => uint256)) -> allowed[msg.sender]
REF_46(uint256) -> REF_45[_spender]
TMP_50(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_46(uint256) (->allowed) := TMP_50(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_48(mapping(address => uint256)) -> allowed[msg.sender]
REF_49(uint256) -> REF_48[_spender]
Emit Approval(msg.sender,_spender,REF_49)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2716.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_37', '_addedValue'] 
REF_35(uint256) (->allowed) := TMP_47(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_39(mapping(address => uint256)) -> allowed[msg.sender]
REF_40(uint256) -> REF_39[_spender]
Emit Approval(msg.sender,_spender,REF_40)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 2716.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 2716.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_35 = CONVERT 0 to address
TMP_36(bool) = _to != TMP_35
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_16(uint256) -> balances[_from]
TMP_38(bool) = _value <= REF_16
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_17(mapping(address => uint256)) -> allowed[_from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_40(bool) = _value <= REF_18
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_19(uint256) -> balances[_from]
REF_20(uint256) -> balances[_from]
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_20', '_value'] 
REF_19(uint256) (->balances) := TMP_42(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_22(uint256) -> balances[_to]
REF_23(uint256) -> balances[_to]
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_23', '_value'] 
REF_22(uint256) (->balances) := TMP_43(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
REF_27(mapping(address => uint256)) -> allowed[_from]
REF_28(uint256) -> REF_27[msg.sender]
TMP_44(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_28', '_value'] 
REF_26(uint256) (->allowed) := TMP_44(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
