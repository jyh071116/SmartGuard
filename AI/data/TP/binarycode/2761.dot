digraph G {
// Function: 2761.sol-EthKillerLong-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == false,fomo3d already activated)

IRs:
TMP_488(bool) = activated_ == False
TMP_489(None) = SOLIDITY_CALL require(bool,string)(TMP_488,fomo3d already activated)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_787(F3Ddatasets.Round) -> round_[1]
REF_788(uint256) -> REF_787.strt
TMP_490(uint256) = now + rndExtra_
TMP_491(uint256) = TMP_490 - rndGap_
REF_788(uint256) (->round_) := TMP_491(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_789(F3Ddatasets.Round) -> round_[1]
REF_790(uint256) -> REF_789.end
TMP_492(uint256) = now + rndInit_
TMP_493(uint256) = TMP_492 + rndExtra_
REF_790(uint256) (->round_) := TMP_493(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, EthKillerLong.isOwner()()"];
6->1;
}
// Function: 2761.sol-EthKillerLong-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_407(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_408(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_409(bytes32) = SOLIDITY_CALL keccak256()(TMP_408)
TMP_410 = CONVERT TMP_409 to uint256
TMP_411(uint256) = TMP_410 / now
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_407', 'TMP_411'] 
TMP_413(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_412', 'block.gaslimit'] 
TMP_414(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_415(bytes32) = SOLIDITY_CALL keccak256()(TMP_414)
TMP_416 = CONVERT TMP_415 to uint256
TMP_417(uint256) = TMP_416 / now
TMP_418(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_413', 'TMP_417'] 
TMP_419(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_418', 'block.number'] 
TMP_420(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_419)
TMP_421(bytes32) = SOLIDITY_CALL keccak256()(TMP_420)
TMP_422 = CONVERT TMP_421 to uint256
seed(uint256) := TMP_422(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_423(uint256) = seed / 1000
TMP_424(uint256) = TMP_423 * 1000
TMP_425(uint256) = seed - TMP_424
TMP_426(bool) = TMP_425 < airDropTracker_
CONDITION TMP_426"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2761.sol-EthKillerLong-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && hasPlayersInRound(_rID) == false))

IRs:
REF_277(F3Ddatasets.Round) -> round_[_rID]
REF_278(uint256) -> REF_277.strt
TMP_193(uint256) = REF_278 + rndGap_
TMP_194(bool) = _now > TMP_193
REF_279(F3Ddatasets.Round) -> round_[_rID]
REF_280(uint256) -> REF_279.end
TMP_195(bool) = _now <= REF_280
REF_281(F3Ddatasets.Round) -> round_[_rID]
REF_282(uint256) -> REF_281.end
TMP_196(bool) = _now > REF_282
TMP_197(bool) = INTERNAL_CALL, EthKillerLong.hasPlayersInRound(uint256)(_rID)
TMP_198(bool) = TMP_197 == False
TMP_199(bool) = TMP_196 && TMP_198
TMP_200(bool) = TMP_195 || TMP_199
TMP_201(bool) = TMP_194 && TMP_200
CONDITION TMP_201"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, EthKillerLong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_283(F3Ddatasets.Round) -> round_[_rID]
REF_284(uint256) -> REF_283.end
TMP_203(bool) = _now > REF_284
REF_285(F3Ddatasets.Round) -> round_[_rID]
REF_286(bool) -> REF_285.ended
TMP_204(bool) = REF_286 == False
TMP_205(bool) = TMP_203 && TMP_204
CONDITION TMP_205"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_287(F3Ddatasets.Round) -> round_[_rID]
REF_288(bool) -> REF_287.ended
REF_288(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_206(F3Ddatasets.EventReturns) = INTERNAL_CALL, EthKillerLong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_206(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_289(uint256) -> _eventData_.compressedData
REF_290(uint256) -> _eventData_.compressedData
TMP_207(uint256) = _now * 1000000000000000000
TMP_208(uint256) = REF_290 + TMP_207
REF_289(uint256) (->_eventData_) := TMP_208(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_291(uint256) -> _eventData_.compressedIDs
REF_292(uint256) -> _eventData_.compressedIDs
TMP_209(uint256) = REF_292 + _pID
REF_291(uint256) (->_eventData_) := TMP_209(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_294(F3Ddatasets.Player) -> plyr_[_pID]
REF_295(bytes32) -> REF_294.name
REF_296(uint256) -> _eventData_.compressedData
REF_297(uint256) -> _eventData_.compressedIDs
REF_298(address) -> _eventData_.winnerAddr
REF_299(bytes32) -> _eventData_.winnerName
REF_300(uint256) -> _eventData_.amountWon
REF_301(uint256) -> _eventData_.newPot
REF_302(uint256) -> _eventData_.P3DAmount
REF_303(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_295,msg.value,REF_296,REF_297,REF_298,REF_299,REF_300,REF_301,REF_302,REF_303)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_304(F3Ddatasets.Player) -> plyr_[_pID]
REF_305(uint256) -> REF_304.gen
REF_306(F3Ddatasets.Player) -> plyr_[_pID]
REF_307(uint256) -> REF_306.gen
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_307', 'msg.value'] 
REF_305(uint256) (->plyr_) := TMP_211(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2761.sol-EthKillerLong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_52(F3Ddatasets.EventReturns) = INTERNAL_CALL, EthKillerLong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_52(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_42(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_42(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = _affCode == TMP_53
TMP_55(bool) = _affCode == msg.sender
TMP_56(bool) = TMP_54 || TMP_55
CONDITION TMP_56"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_43(F3Ddatasets.Player) -> plyr_[_pID]
REF_44(uint256) -> REF_43.laff
_affID(uint256) := REF_44(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_45(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_45(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_46(F3Ddatasets.Player) -> plyr_[_pID]
REF_47(uint256) -> REF_46.laff
TMP_57(bool) = _affID != REF_47
CONDITION TMP_57"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_48(F3Ddatasets.Player) -> plyr_[_pID]
REF_49(uint256) -> REF_48.laff
REF_49(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_58(uint256) = INTERNAL_CALL, EthKillerLong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_58(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, EthKillerLong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, EthKillerLong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, EthKillerLong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, EthKillerLong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 2761.sol-EthKillerLong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_42(F3Ddatasets.EventReturns) = INTERNAL_CALL, EthKillerLong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_42(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_35(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_35(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_43(bool) = _affCode == 0
TMP_44(bool) = _affCode == _pID
TMP_45(bool) = TMP_43 || TMP_44
CONDITION TMP_45"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_36(F3Ddatasets.Player) -> plyr_[_pID]
REF_37(uint256) -> REF_36.laff
_affCode(uint256) := REF_37(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_38(F3Ddatasets.Player) -> plyr_[_pID]
REF_39(uint256) -> REF_38.laff
TMP_46(bool) = _affCode != REF_39
CONDITION TMP_46"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_40(F3Ddatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
REF_41(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_47(uint256) = INTERNAL_CALL, EthKillerLong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_47(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, EthKillerLong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, EthKillerLong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, EthKillerLong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, EthKillerLong.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 2761.sol-EthKillerLong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_63(F3Ddatasets.EventReturns) = INTERNAL_CALL, EthKillerLong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_63(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_50(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_50(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_64(bool) = _affCode == 
REF_51(F3Ddatasets.Player) -> plyr_[_pID]
REF_52(bytes32) -> REF_51.name
TMP_65(bool) = _affCode == REF_52
TMP_66(bool) = TMP_64 || TMP_65
CONDITION TMP_66"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_53(F3Ddatasets.Player) -> plyr_[_pID]
REF_54(uint256) -> REF_53.laff
_affID(uint256) := REF_54(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_55(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_55(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_56(F3Ddatasets.Player) -> plyr_[_pID]
REF_57(uint256) -> REF_56.laff
TMP_67(bool) = _affID != REF_57
CONDITION TMP_67"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_58(F3Ddatasets.Player) -> plyr_[_pID]
REF_59(uint256) -> REF_58.laff
REF_59(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_68(uint256) = INTERNAL_CALL, EthKillerLong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_68(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, EthKillerLong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, EthKillerLong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, EthKillerLong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, EthKillerLong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 2761.sol-EthKillerLong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && hasPlayersInRound(_rID) == false))

IRs:
REF_477(F3Ddatasets.Round) -> round_[_rID]
REF_478(uint256) -> REF_477.strt
TMP_292(uint256) = REF_478 + rndGap_
TMP_293(bool) = _now > TMP_292
REF_479(F3Ddatasets.Round) -> round_[_rID]
REF_480(uint256) -> REF_479.end
TMP_294(bool) = _now <= REF_480
REF_481(F3Ddatasets.Round) -> round_[_rID]
REF_482(uint256) -> REF_481.end
TMP_295(bool) = _now > REF_482
TMP_296(bool) = INTERNAL_CALL, EthKillerLong.hasPlayersInRound(uint256)(_rID)
TMP_297(bool) = TMP_296 == False
TMP_298(bool) = TMP_295 && TMP_297
TMP_299(bool) = TMP_294 || TMP_298
TMP_300(bool) = TMP_293 && TMP_299
CONDITION TMP_300"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_483(F3Ddatasets.Round) -> round_[_rID]
REF_484(uint256) -> REF_483.eth
TMP_301(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_484', '_eth'] 
RETURN TMP_301"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_302(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_302"];
}
// Function: 2761.sol-EthKillerLong-calcTotalWinnerKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalWinnersKeys_ = 0

IRs:
totalWinnersKeys_(uint256) := 0(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < winnerNum_

IRs:
TMP_235(bool) = i < winnerNum_
CONDITION TMP_235"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
! contains(round_[_rID].plyrs[i],winnerPIDs)

IRs:
REF_341(F3Ddatasets.Round) -> round_[_rID]
REF_342(uint256[5]) -> REF_341.plyrs
REF_343(uint256) -> REF_342[i]
TMP_236(bool) = INTERNAL_CALL, EthKillerLong.contains(uint256,uint256[5])(REF_343,winnerPIDs)
TMP_237 = UnaryType.BANG TMP_236 
CONDITION TMP_237"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
winnerPIDs[i] = round_[_rID].plyrs[i]

IRs:
REF_344(uint256) -> winnerPIDs[i]
REF_345(F3Ddatasets.Round) -> round_[_rID]
REF_346(uint256[5]) -> REF_345.plyrs
REF_347(uint256) -> REF_346[i]
REF_344(uint256) (->winnerPIDs) := REF_347(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalWinnersKeys_ = totalWinnersKeys_.add(plyrRnds_[round_[_rID].plyrs[i]][_rID].keys)

IRs:
REF_349(F3Ddatasets.Round) -> round_[_rID]
REF_350(uint256[5]) -> REF_349.plyrs
REF_351(uint256) -> REF_350[i]
REF_352(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[REF_351]
REF_353(F3Ddatasets.PlayerRounds) -> REF_352[_rID]
REF_354(uint256) -> REF_353.keys
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalWinnersKeys_', 'REF_354'] 
totalWinnersKeys_(uint256) := TMP_238(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_239(uint8) := i(uint8)
i(uint8) = i + 1"];
11->6;
}
// Function: 2761.sol-EthKillerLong-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_467(F3Ddatasets.Round) -> round_[_rIDlast]
REF_468(uint256) -> REF_467.mask
REF_470(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_471(F3Ddatasets.PlayerRounds) -> REF_470[_rIDlast]
REF_472(uint256) -> REF_471.keys
TMP_289(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_468', 'REF_472'] 
TMP_290(uint256) = TMP_289 / 1000000000000000000
REF_474(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_475(F3Ddatasets.PlayerRounds) -> REF_474[_rIDlast]
REF_476(uint256) -> REF_475.mask
TMP_291(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_290', 'REF_476'] 
RETURN TMP_291"];
}
// Function: 2761.sol-EthKillerLong-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(30,12)

IRs:
REF_12(F3Ddatasets.TeamFee) -> fees_[0]
TMP_21(F3Ddatasets.TeamFee) = new TeamFee(30,12)
REF_12(F3Ddatasets.TeamFee) (->fees_) := TMP_21(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(43,7)

IRs:
REF_14(F3Ddatasets.TeamFee) -> fees_[1]
TMP_22(F3Ddatasets.TeamFee) = new TeamFee(43,7)
REF_14(F3Ddatasets.TeamFee) (->fees_) := TMP_22(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(52,16)

IRs:
REF_16(F3Ddatasets.TeamFee) -> fees_[2]
TMP_23(F3Ddatasets.TeamFee) = new TeamFee(52,16)
REF_16(F3Ddatasets.TeamFee) (->fees_) := TMP_23(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(43,15)

IRs:
REF_18(F3Ddatasets.TeamFee) -> fees_[3]
TMP_24(F3Ddatasets.TeamFee) = new TeamFee(43,15)
REF_18(F3Ddatasets.TeamFee) (->fees_) := TMP_24(F3Ddatasets.TeamFee)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(15,15)

IRs:
REF_20(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_25(F3Ddatasets.PotSplit) = new PotSplit(15,15)
REF_20(F3Ddatasets.PotSplit) (->potSplit_) := TMP_25(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(25,10)

IRs:
REF_22(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_26(F3Ddatasets.PotSplit) = new PotSplit(25,10)
REF_22(F3Ddatasets.PotSplit) (->potSplit_) := TMP_26(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(20,24)

IRs:
REF_24(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_27(F3Ddatasets.PotSplit) = new PotSplit(20,24)
REF_24(F3Ddatasets.PotSplit) (->potSplit_) := TMP_27(F3Ddatasets.PotSplit)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(30,14)

IRs:
REF_26(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_28(F3Ddatasets.PotSplit) = new PotSplit(30,14)
REF_26(F3Ddatasets.PotSplit) (->potSplit_) := TMP_28(F3Ddatasets.PotSplit)"];
}
// Function: 2761.sol-EthKillerLong-contains(uint256,uint256[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < array.length

IRs:
REF_339 -> LENGTH array
TMP_232(bool) = i < REF_339
CONDITION TMP_232"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
array[i] == _pID

IRs:
REF_340(uint256) -> array[i]
TMP_233(bool) = REF_340 == _pID
CONDITION TMP_233"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
(true)

IRs:
RETURN True"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_234(uint8) := i(uint8)
i(uint8) = i + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2761.sol-EthKillerLong-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_355(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_356(F3Ddatasets.PlayerRounds) -> REF_355[_rID]
REF_357(uint256) -> REF_356.keys
TMP_240(bool) = REF_357 == 0
CONDITION TMP_240"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_241(F3Ddatasets.EventReturns) = INTERNAL_CALL, EthKillerLong.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_241(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < (100000000000000000000) && plyrRnds_[_pID][_rID].eth.add(_eth) > (1000000000000000000)

IRs:
REF_358(F3Ddatasets.Round) -> round_[_rID]
REF_359(uint256) -> REF_358.eth
TMP_242(bool) = REF_359 < 100000000000000000000
REF_360(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_361(F3Ddatasets.PlayerRounds) -> REF_360[_rID]
REF_362(uint256) -> REF_361.eth
TMP_243(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_362', '_eth'] 
TMP_244(bool) = TMP_243 > 1000000000000000000
TMP_245(bool) = TMP_242 && TMP_244
CONDITION TMP_245"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_365(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_366(F3Ddatasets.PlayerRounds) -> REF_365[_rID]
REF_367(uint256) -> REF_366.eth
TMP_246(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_367'] 
_availableLimit(uint256) := TMP_246(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_247(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_247(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_369(F3Ddatasets.Player) -> plyr_[_pID]
REF_370(uint256) -> REF_369.gen
REF_371(F3Ddatasets.Player) -> plyr_[_pID]
REF_372(uint256) -> REF_371.gen
TMP_248(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_372', '_refund'] 
REF_370(uint256) (->plyr_) := TMP_248(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_249(bool) = _eth > 1000000000
CONDITION TMP_249"];
10->11[label="True"];
10->60[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_374(F3Ddatasets.Round) -> round_[_rID]
REF_375(uint256) -> REF_374.eth
TMP_250(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_375', '_eth'] 
_keys(uint256) := TMP_250(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_251(bool) = _keys >= 1000000000000000000
CONDITION TMP_251"];
12->13[label="True"];
12->23[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, EthKillerLong.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
round_[_rID].plyrs[0] = round_[_rID].plyrs[1]

IRs:
REF_377(F3Ddatasets.Round) -> round_[_rID]
REF_378(uint256[5]) -> REF_377.plyrs
REF_379(uint256) -> REF_378[0]
REF_380(F3Ddatasets.Round) -> round_[_rID]
REF_381(uint256[5]) -> REF_380.plyrs
REF_382(uint256) -> REF_381[1]
REF_379(uint256) (->round_) := REF_382(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyrs[1] = round_[_rID].plyrs[2]

IRs:
REF_383(F3Ddatasets.Round) -> round_[_rID]
REF_384(uint256[5]) -> REF_383.plyrs
REF_385(uint256) -> REF_384[1]
REF_386(F3Ddatasets.Round) -> round_[_rID]
REF_387(uint256[5]) -> REF_386.plyrs
REF_388(uint256) -> REF_387[2]
REF_385(uint256) (->round_) := REF_388(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
round_[_rID].plyrs[2] = round_[_rID].plyrs[3]

IRs:
REF_389(F3Ddatasets.Round) -> round_[_rID]
REF_390(uint256[5]) -> REF_389.plyrs
REF_391(uint256) -> REF_390[2]
REF_392(F3Ddatasets.Round) -> round_[_rID]
REF_393(uint256[5]) -> REF_392.plyrs
REF_394(uint256) -> REF_393[3]
REF_391(uint256) (->round_) := REF_394(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
round_[_rID].plyrs[3] = round_[_rID].plyrs[4]

IRs:
REF_395(F3Ddatasets.Round) -> round_[_rID]
REF_396(uint256[5]) -> REF_395.plyrs
REF_397(uint256) -> REF_396[3]
REF_398(F3Ddatasets.Round) -> round_[_rID]
REF_399(uint256[5]) -> REF_398.plyrs
REF_400(uint256) -> REF_399[4]
REF_397(uint256) (->round_) := REF_400(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].plyrs[4] = _pID

IRs:
REF_401(F3Ddatasets.Round) -> round_[_rID]
REF_402(uint256[5]) -> REF_401.plyrs
REF_403(uint256) -> REF_402[4]
REF_403(uint256) (->round_) := _pID(uint256)"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_404(F3Ddatasets.Round) -> round_[_rID]
REF_405(uint256) -> REF_404.team
TMP_253(bool) = REF_405 != _team
CONDITION TMP_253"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_406(F3Ddatasets.Round) -> round_[_rID]
REF_407(uint256) -> REF_406.team
REF_407(uint256) (->round_) := _team(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_408(uint256) -> _eventData_.compressedData
REF_409(uint256) -> _eventData_.compressedData
TMP_254(uint256) = REF_409 + 100
REF_408(uint256) (->_eventData_) := TMP_254(uint256)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_255(bool) = _eth >= 100000000000000000
CONDITION TMP_255"];
24->25[label="True"];
24->50[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_256(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
airdrop() == true

IRs:
TMP_257(bool) = INTERNAL_CALL, EthKillerLong.airdrop()()
TMP_258(bool) = TMP_257 == True
CONDITION TMP_258"];
26->27[label="True"];
26->49[label="False"];
27[label="Node Type: NEW VARIABLE 27
"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_259(bool) = _eth >= 10000000000000000000
CONDITION TMP_259"];
28->29[label="True"];
28->33[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_261(uint256) = TMP_260 / 100
_prize(uint256) := TMP_261(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_411(F3Ddatasets.Player) -> plyr_[_pID]
REF_412(uint256) -> REF_411.win
REF_413(F3Ddatasets.Player) -> plyr_[_pID]
REF_414(uint256) -> REF_413.win
TMP_262(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_414', '_prize'] 
REF_412(uint256) (->plyr_) := TMP_262(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_263(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_263(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_417(uint256) -> _eventData_.compressedData
REF_417(-> _eventData_) = REF_417 + 300000000000000000000000000000000"];
32->45;
33[label="Node Type: IF 33

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_264(bool) = _eth >= 1000000000000000000
TMP_265(bool) = _eth < 10000000000000000000
TMP_266(bool) = TMP_264 && TMP_265
CONDITION TMP_266"];
33->34[label="True"];
33->38[label="False"];
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_268(uint256) = TMP_267 / 100
_prize(uint256) := TMP_268(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_419(F3Ddatasets.Player) -> plyr_[_pID]
REF_420(uint256) -> REF_419.win
REF_421(F3Ddatasets.Player) -> plyr_[_pID]
REF_422(uint256) -> REF_421.win
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_422', '_prize'] 
REF_420(uint256) (->plyr_) := TMP_269(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_270(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_270(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_425(uint256) -> _eventData_.compressedData
REF_425(-> _eventData_) = REF_425 + 200000000000000000000000000000000"];
37->44;
38[label="Node Type: IF 38

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_271(bool) = _eth >= 100000000000000000
TMP_272(bool) = _eth < 1000000000000000000
TMP_273(bool) = TMP_271 && TMP_272
CONDITION TMP_273"];
38->39[label="True"];
38->43[label="False"];
39[label="Node Type: EXPRESSION 39

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_274(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_275(uint256) = TMP_274 / 100
_prize(uint256) := TMP_275(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_427(F3Ddatasets.Player) -> plyr_[_pID]
REF_428(uint256) -> REF_427.win
REF_429(F3Ddatasets.Player) -> plyr_[_pID]
REF_430(uint256) -> REF_429.win
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_430', '_prize'] 
REF_428(uint256) (->plyr_) := TMP_276(uint256)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_277(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_277(uint256)"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_433(uint256) -> _eventData_.compressedData
REF_433(-> _eventData_) = REF_433 + 300000000000000000000000000000000"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: END_IF 44
"];
44->45;
45[label="Node Type: END_IF 45
"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_434(uint256) -> _eventData_.compressedData
REF_434(-> _eventData_) = REF_434 + 10000000000000000000000000000000"];
46->47;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_435(uint256) -> _eventData_.compressedData
TMP_278(uint256) = _prize * 1000000000000000000000000000000000
REF_435(-> _eventData_) = REF_435 + TMP_278"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
48->49;
49[label="Node Type: END_IF 49
"];
49->50;
50[label="Node Type: END_IF 50
"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_436(uint256) -> _eventData_.compressedData
REF_437(uint256) -> _eventData_.compressedData
TMP_279(uint256) = airDropTracker_ * 1000
TMP_280(uint256) = REF_437 + TMP_279
REF_436(uint256) (->_eventData_) := TMP_280(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_438(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_439(F3Ddatasets.PlayerRounds) -> REF_438[_rID]
REF_440(uint256) -> REF_439.keys
REF_442(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_443(F3Ddatasets.PlayerRounds) -> REF_442[_rID]
REF_444(uint256) -> REF_443.keys
TMP_281(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_444'] 
REF_440(uint256) (->plyrRnds_) := TMP_281(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_445(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_446(F3Ddatasets.PlayerRounds) -> REF_445[_rID]
REF_447(uint256) -> REF_446.eth
REF_449(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_450(F3Ddatasets.PlayerRounds) -> REF_449[_rID]
REF_451(uint256) -> REF_450.eth
TMP_282(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_451'] 
REF_447(uint256) (->plyrRnds_) := TMP_282(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_452(F3Ddatasets.Round) -> round_[_rID]
REF_453(uint256) -> REF_452.keys
REF_455(F3Ddatasets.Round) -> round_[_rID]
REF_456(uint256) -> REF_455.keys
TMP_283(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_456'] 
REF_453(uint256) (->round_) := TMP_283(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_457(F3Ddatasets.Round) -> round_[_rID]
REF_458(uint256) -> REF_457.eth
REF_460(F3Ddatasets.Round) -> round_[_rID]
REF_461(uint256) -> REF_460.eth
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_461'] 
REF_458(uint256) (->round_) := TMP_284(uint256)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_462(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_463(uint256) -> REF_462[_team]
REF_465(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_466(uint256) -> REF_465[_team]
TMP_285(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_466'] 
REF_463(uint256) (->rndTmEth_) := TMP_285(uint256)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_286(F3Ddatasets.EventReturns) = INTERNAL_CALL, EthKillerLong.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_286(F3Ddatasets.EventReturns)"];
57->58;
58[label="Node Type: EXPRESSION 58

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_287(F3Ddatasets.EventReturns) = INTERNAL_CALL, EthKillerLong.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_287(F3Ddatasets.EventReturns)"];
58->59;
59[label="Node Type: EXPRESSION 59

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, EthKillerLong.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
59->60;
60[label="Node Type: END_IF 60
"];
}
// Function: 2761.sol-EthKillerLong-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_498(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_498(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_315(bool) = _pID == 0
CONDITION TMP_315"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
playerCount ++

IRs:
TMP_316(uint256) := playerCount(uint256)
playerCount(uint256) = playerCount + 1"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_pID = playerCount

IRs:
_pID(uint256) := playerCount(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_name = plyr_[_pID].name

IRs:
REF_499(F3Ddatasets.Player) -> plyr_[_pID]
REF_500(bytes32) -> REF_499.name
_name(bytes32) := REF_500(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_laff = plyr_[_pID].laff

IRs:
REF_501(F3Ddatasets.Player) -> plyr_[_pID]
REF_502(uint256) -> REF_501.laff
_laff(uint256) := REF_502(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_503(uint256) -> pIDxAddr_[msg.sender]
REF_503(uint256) (->pIDxAddr_) := _pID(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_504(F3Ddatasets.Player) -> plyr_[_pID]
REF_505(address) -> REF_504.addr
REF_505(address) (->plyr_) := msg.sender(address)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_name != 

IRs:
TMP_317(bool) = _name != 
CONDITION TMP_317"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_506(uint256) -> pIDxName_[_name]
REF_506(uint256) (->pIDxName_) := _pID(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_507(F3Ddatasets.Player) -> plyr_[_pID]
REF_508(bytes32) -> REF_507.name
REF_508(bytes32) (->plyr_) := _name(bytes32)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_318(bool) = _laff != 0
TMP_319(bool) = _laff != _pID
TMP_320(bool) = TMP_318 && TMP_319
CONDITION TMP_320"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_509(F3Ddatasets.Player) -> plyr_[_pID]
REF_510(uint256) -> REF_509.laff
REF_510(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_511(uint256) -> _eventData_.compressedData
REF_512(uint256) -> _eventData_.compressedData
TMP_321(uint256) = REF_512 + 1
REF_511(uint256) (->_eventData_) := TMP_321(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2761.sol-EthKillerLong-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 50

IRs:
TMP_427(uint256) = _eth / 50
_com(uint256) := TMP_427(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_long = _eth / 100

IRs:
TMP_428(uint256) = _eth / 100
_long(uint256) := TMP_428(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_429(uint256) = _eth / 10
_aff(uint256) := TMP_429(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_430(bool) = _affID != _pID
REF_681(F3Ddatasets.Player) -> plyr_[_affID]
REF_682(bytes32) -> REF_681.name
TMP_431(bool) = REF_682 != 
TMP_432(bool) = TMP_430 && TMP_431
CONDITION TMP_432"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_683(F3Ddatasets.Player) -> plyr_[_affID]
REF_684(uint256) -> REF_683.aff
REF_686(F3Ddatasets.Player) -> plyr_[_affID]
REF_687(uint256) -> REF_686.aff
TMP_433(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_687'] 
REF_684(uint256) (->plyr_) := TMP_433(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_689(F3Ddatasets.Player) -> plyr_[_affID]
REF_690(address) -> REF_689.addr
REF_691(F3Ddatasets.Player) -> plyr_[_affID]
REF_692(bytes32) -> REF_691.name
Emit onAffiliatePayout(_affID,REF_690,REF_692,_rID,_pID,_aff,now)"];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_695(F3Ddatasets.TeamFee) -> fees_[_team]
REF_696(uint256) -> REF_695.p3d
TMP_435(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_696'] 
TMP_436(uint256) = TMP_435 / 100
TMP_437(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_436'] 
_p3d(uint256) := TMP_437(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
_p3d > 0

IRs:
TMP_438(bool) = _p3d > 0
CONDITION TMP_438"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_697(uint256) -> _eventData_.P3DAmount
REF_699(uint256) -> _eventData_.P3DAmount
TMP_439(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_699'] 
REF_697(uint256) (->_eventData_) := TMP_439(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! teamAddress.send(_p3d.add(_com).add(_long))

IRs:
TMP_440(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', '_com'] 
TMP_441(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_440', '_long'] 
TMP_442 = SEND dest:teamAddress value:TMP_441
TMP_443 = UnaryType.BANG TMP_442 
CONDITION TMP_443"];
14->15[label="True"];
14->15[label="False"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2761.sol-EthKillerLong-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_710(F3Ddatasets.TeamFee) -> fees_[_team]
REF_711(uint256) -> REF_710.gen
TMP_447(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_711'] 
TMP_448(uint256) = TMP_447 / 100
_gen(uint256) := TMP_448(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_449(uint256) = _eth / 100
_air(uint256) := TMP_449(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_450(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_450(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_451(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_452(uint256) = TMP_451 / 100
REF_717(F3Ddatasets.TeamFee) -> fees_[_team]
REF_718(uint256) -> REF_717.p3d
TMP_453(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_718'] 
TMP_454(uint256) = TMP_453 / 100
TMP_455(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_452', 'TMP_454'] 
TMP_456(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_455'] 
_eth(uint256) := TMP_456(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_457(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_457(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_458(uint256) = INTERNAL_CALL, EthKillerLong.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_458(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_459(bool) = _dust > 0
CONDITION TMP_459"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_460(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_460(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_721(F3Ddatasets.Round) -> round_[_rID]
REF_722(uint256) -> REF_721.pot
TMP_461(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_725(F3Ddatasets.Round) -> round_[_rID]
REF_726(uint256) -> REF_725.pot
TMP_462(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_461', 'REF_726'] 
REF_722(uint256) (->round_) := TMP_462(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_727(uint256) -> _eventData_.genAmount
REF_729(uint256) -> _eventData_.genAmount
TMP_463(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_729'] 
REF_727(uint256) (->_eventData_) := TMP_463(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_730(uint256) -> _eventData_.potAmount
REF_730(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2761.sol-EthKillerLong-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_win = ((round_[_rID].pot).mul(48)) / 100

IRs:
REF_521(F3Ddatasets.Round) -> round_[_rID]
REF_522(uint256) -> REF_521.pot
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_522', '48'] 
TMP_329(uint256) = TMP_328 / 100
_win(uint256) := TMP_329(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_gen = ((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100

IRs:
REF_524(F3Ddatasets.Round) -> round_[_rID]
REF_525(uint256) -> REF_524.pot
REF_527(F3Ddatasets.Round) -> round_[_rID]
REF_528(uint256) -> REF_527.team
REF_529(F3Ddatasets.PotSplit) -> potSplit_[REF_528]
REF_530(uint256) -> REF_529.gen
TMP_330(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_525', 'REF_530'] 
TMP_331(uint256) = TMP_330 / 100
_gen(uint256) := TMP_331(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_fee = ((round_[_rID].pot) / 50).add(((round_[_rID].pot).mul(potSplit_[round_[_rID].team].p3d)) / 100)

IRs:
REF_531(F3Ddatasets.Round) -> round_[_rID]
REF_532(uint256) -> REF_531.pot
TMP_332(uint256) = REF_532 / 50
REF_534(F3Ddatasets.Round) -> round_[_rID]
REF_535(uint256) -> REF_534.pot
REF_537(F3Ddatasets.Round) -> round_[_rID]
REF_538(uint256) -> REF_537.team
REF_539(F3Ddatasets.PotSplit) -> potSplit_[REF_538]
REF_540(uint256) -> REF_539.p3d
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_535', 'REF_540'] 
TMP_334(uint256) = TMP_333 / 100
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_332', 'TMP_334'] 
_fee(uint256) := TMP_335(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_res = ((((round_[_rID].pot).sub(_win)).sub(_fee)).sub(_gen))

IRs:
REF_541(F3Ddatasets.Round) -> round_[_rID]
REF_542(uint256) -> REF_541.pot
TMP_336(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_542', '_win'] 
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_336', '_fee'] 
TMP_338(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_337', '_gen'] 
_res(uint256) := TMP_338(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_339(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_547(F3Ddatasets.Round) -> round_[_rID]
REF_548(uint256) -> REF_547.keys
TMP_340(uint256) = TMP_339 / REF_548
_ppt(uint256) := TMP_340(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_551(F3Ddatasets.Round) -> round_[_rID]
REF_552(uint256) -> REF_551.keys
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_552'] 
TMP_342(uint256) = TMP_341 / 1000000000000000000
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_342'] 
_dust(uint256) := TMP_343(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_dust > 0

IRs:
TMP_344(bool) = _dust > 0
CONDITION TMP_344"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_345(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_346(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_346(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
calcTotalWinnerKeys(_rID)

IRs:
INTERNAL_CALL, EthKillerLong.calcTotalWinnerKeys(uint256)(_rID)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
plyr_[round_[_rID].plyrs[winnerNum_ - 1]].win = (_win.mul(plyrRnds_[round_[_rID].plyrs[winnerNum_ - 1]][_rID].keys) / totalWinnersKeys_).add(plyr_[round_[_rID].plyrs[winnerNum_ - 1]].win)

IRs:
REF_555(F3Ddatasets.Round) -> round_[_rID]
REF_556(uint256[5]) -> REF_555.plyrs
TMP_348(uint256) = winnerNum_ - 1
REF_557(uint256) -> REF_556[TMP_348]
REF_558(F3Ddatasets.Player) -> plyr_[REF_557]
REF_559(uint256) -> REF_558.win
REF_561(F3Ddatasets.Round) -> round_[_rID]
REF_562(uint256[5]) -> REF_561.plyrs
TMP_349(uint256) = winnerNum_ - 1
REF_563(uint256) -> REF_562[TMP_349]
REF_564(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[REF_563]
REF_565(F3Ddatasets.PlayerRounds) -> REF_564[_rID]
REF_566(uint256) -> REF_565.keys
TMP_350(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_win', 'REF_566'] 
TMP_351(uint256) = TMP_350 / totalWinnersKeys_
REF_568(F3Ddatasets.Round) -> round_[_rID]
REF_569(uint256[5]) -> REF_568.plyrs
TMP_352(uint256) = winnerNum_ - 1
REF_570(uint256) -> REF_569[TMP_352]
REF_571(F3Ddatasets.Player) -> plyr_[REF_570]
REF_572(uint256) -> REF_571.win
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_351', 'REF_572'] 
REF_559(uint256) (->plyr_) := TMP_353(uint256)"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
i < winnerNum_ - 1

IRs:
TMP_354(uint256) = winnerNum_ - 1
TMP_355(bool) = i < TMP_354
CONDITION TMP_355"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[round_[_rID].plyrs[i]].win = (_win.mul(plyrRnds_[round_[_rID].plyrs[i]][_rID].keys) / totalWinnersKeys_).add(plyr_[round_[_rID].plyrs[i]].win)

IRs:
REF_573(F3Ddatasets.Round) -> round_[_rID]
REF_574(uint256[5]) -> REF_573.plyrs
REF_575(uint256) -> REF_574[i]
REF_576(F3Ddatasets.Player) -> plyr_[REF_575]
REF_577(uint256) -> REF_576.win
REF_579(F3Ddatasets.Round) -> round_[_rID]
REF_580(uint256[5]) -> REF_579.plyrs
REF_581(uint256) -> REF_580[i]
REF_582(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[REF_581]
REF_583(F3Ddatasets.PlayerRounds) -> REF_582[_rID]
REF_584(uint256) -> REF_583.keys
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_win', 'REF_584'] 
TMP_357(uint256) = TMP_356 / totalWinnersKeys_
REF_586(F3Ddatasets.Round) -> round_[_rID]
REF_587(uint256[5]) -> REF_586.plyrs
REF_588(uint256) -> REF_587[i]
REF_589(F3Ddatasets.Player) -> plyr_[REF_588]
REF_590(uint256) -> REF_589.win
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_357', 'REF_590'] 
REF_577(uint256) (->plyr_) := TMP_358(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i ++

IRs:
TMP_359(uint8) := i(uint8)
i(uint8) = i + 1"];
19->17;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_591(F3Ddatasets.Round) -> round_[_rID]
REF_592(uint256) -> REF_591.mask
REF_594(F3Ddatasets.Round) -> round_[_rID]
REF_595(uint256) -> REF_594.mask
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_595'] 
REF_592(uint256) (->round_) := TMP_360(uint256)"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
! teamAddress.send(_fee)

IRs:
TMP_361 = SEND dest:teamAddress value:_fee
TMP_362 = UnaryType.BANG TMP_361 
CONDITION TMP_362"];
21->22[label="True"];
21->22[label="False"];
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_597(uint256) -> _eventData_.compressedData
REF_598(uint256) -> _eventData_.compressedData
REF_599(F3Ddatasets.Round) -> round_[_rID]
REF_600(uint256) -> REF_599.end
TMP_363(uint256) = REF_600 * 1000000
TMP_364(uint256) = REF_598 + TMP_363
REF_597(uint256) (->_eventData_) := TMP_364(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (round_[_rID].plyrs[winnerNum_ - 1] * 100000000000000000000000000) + (round_[_rID].team * 100000000000000000)

IRs:
REF_601(uint256) -> _eventData_.compressedIDs
REF_602(uint256) -> _eventData_.compressedIDs
REF_603(F3Ddatasets.Round) -> round_[_rID]
REF_604(uint256[5]) -> REF_603.plyrs
TMP_365(uint256) = winnerNum_ - 1
REF_605(uint256) -> REF_604[TMP_365]
TMP_366(uint256) = REF_605 * 100000000000000000000000000
TMP_367(uint256) = REF_602 + TMP_366
REF_606(F3Ddatasets.Round) -> round_[_rID]
REF_607(uint256) -> REF_606.team
TMP_368(uint256) = REF_607 * 100000000000000000
TMP_369(uint256) = TMP_367 + TMP_368
REF_601(uint256) (->_eventData_) := TMP_369(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.winnerAddr = plyr_[round_[_rID].plyrs[winnerNum_ - 1]].addr

IRs:
REF_608(address) -> _eventData_.winnerAddr
REF_609(F3Ddatasets.Round) -> round_[_rID]
REF_610(uint256[5]) -> REF_609.plyrs
TMP_370(uint256) = winnerNum_ - 1
REF_611(uint256) -> REF_610[TMP_370]
REF_612(F3Ddatasets.Player) -> plyr_[REF_611]
REF_613(address) -> REF_612.addr
REF_608(address) (->_eventData_) := REF_613(address)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.winnerName = plyr_[round_[_rID].plyrs[winnerNum_ - 1]].name

IRs:
REF_614(bytes32) -> _eventData_.winnerName
REF_615(F3Ddatasets.Round) -> round_[_rID]
REF_616(uint256[5]) -> REF_615.plyrs
TMP_371(uint256) = winnerNum_ - 1
REF_617(uint256) -> REF_616[TMP_371]
REF_618(F3Ddatasets.Player) -> plyr_[REF_617]
REF_619(bytes32) -> REF_618.name
REF_614(bytes32) (->_eventData_) := REF_619(bytes32)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_620(uint256) -> _eventData_.amountWon
REF_620(uint256) (->_eventData_) := _win(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_621(uint256) -> _eventData_.genAmount
REF_621(uint256) (->_eventData_) := _gen(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.P3DAmount = ((round_[_rID].pot).mul(potSplit_[round_[_rID].team].p3d)) / 100

IRs:
REF_622(uint256) -> _eventData_.P3DAmount
REF_623(F3Ddatasets.Round) -> round_[_rID]
REF_624(uint256) -> REF_623.pot
REF_626(F3Ddatasets.Round) -> round_[_rID]
REF_627(uint256) -> REF_626.team
REF_628(F3Ddatasets.PotSplit) -> potSplit_[REF_627]
REF_629(uint256) -> REF_628.p3d
TMP_372(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_624', 'REF_629'] 
TMP_373(uint256) = TMP_372 / 100
REF_622(uint256) (->_eventData_) := TMP_373(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_630(uint256) -> _eventData_.newPot
REF_630(uint256) (->_eventData_) := _res(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
rID_ ++

IRs:
TMP_374(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_rID ++

IRs:
TMP_375(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_631(F3Ddatasets.Round) -> round_[_rID]
REF_632(uint256) -> REF_631.strt
REF_632(uint256) (->round_) := now(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_633(F3Ddatasets.Round) -> round_[_rID]
REF_634(uint256) -> REF_633.end
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_377(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_376', 'rndGap_'] 
REF_634(uint256) (->round_) := TMP_377(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_637(F3Ddatasets.Round) -> round_[_rID]
REF_638(uint256) -> REF_637.pot
REF_638(uint256) (->round_) := _res(uint256)"];
35->36;
36[label="Node Type: RETURN 36

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2761.sol-EthKillerLong-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_771(uint256) -> _eventData_.compressedData
REF_772(uint256) -> _eventData_.compressedData
TMP_480(uint256) = now * 1000000000000000000
TMP_481(uint256) = REF_772 + TMP_480
TMP_482(uint256) = _team * 100000000000000000000000000000
TMP_483(uint256) = TMP_481 + TMP_482
REF_771(uint256) (->_eventData_) := TMP_483(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_773(uint256) -> _eventData_.compressedIDs
REF_774(uint256) -> _eventData_.compressedIDs
TMP_484(uint256) = REF_774 + _pID
TMP_485(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_486(uint256) = TMP_484 + TMP_485
REF_773(uint256) (->_eventData_) := TMP_486(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_776(uint256) -> _eventData_.compressedData
REF_777(uint256) -> _eventData_.compressedIDs
REF_778(F3Ddatasets.Player) -> plyr_[_pID]
REF_779(bytes32) -> REF_778.name
REF_780(address) -> _eventData_.winnerAddr
REF_781(bytes32) -> _eventData_.winnerName
REF_782(uint256) -> _eventData_.amountWon
REF_783(uint256) -> _eventData_.newPot
REF_784(uint256) -> _eventData_.P3DAmount
REF_785(uint256) -> _eventData_.genAmount
REF_786(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_776,REF_777,REF_779,msg.sender,_eth,_keys,REF_780,REF_781,REF_782,REF_783,REF_784,REF_785,REF_786,airDropPot_)"];
}
// Function: 2761.sol-EthKillerLong-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_29(F3Ddatasets.EventReturns) = INTERNAL_CALL, EthKillerLong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_29(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_28(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_28(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_29(F3Ddatasets.Player) -> plyr_[_pID]
REF_30(uint256) -> REF_29.laff
INTERNAL_CALL, EthKillerLong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_30,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, EthKillerLong.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, EthKillerLong.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, EthKillerLong.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 2761.sol-EthKillerLong-gameSettings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rndExtra_ = rndExtra

IRs:
rndExtra_(uint256) := rndExtra(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rndGap_ = rndGap

IRs:
rndGap_(uint256) := rndGap(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, EthKillerLong.isOwner()()"];
3->1;
}
// Function: 2761.sol-EthKillerLong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && hasPlayersInRound(_rID) == false))

IRs:
REF_137(F3Ddatasets.Round) -> round_[_rID]
REF_138(uint256) -> REF_137.strt
TMP_130(uint256) = REF_138 + rndGap_
TMP_131(bool) = _now > TMP_130
REF_139(F3Ddatasets.Round) -> round_[_rID]
REF_140(uint256) -> REF_139.end
TMP_132(bool) = _now <= REF_140
REF_141(F3Ddatasets.Round) -> round_[_rID]
REF_142(uint256) -> REF_141.end
TMP_133(bool) = _now > REF_142
TMP_134(bool) = INTERNAL_CALL, EthKillerLong.hasPlayersInRound(uint256)(_rID)
TMP_135(bool) = TMP_134 == False
TMP_136(bool) = TMP_133 && TMP_135
TMP_137(bool) = TMP_132 || TMP_136
TMP_138(bool) = TMP_131 && TMP_137
CONDITION TMP_138"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_143(F3Ddatasets.Round) -> round_[_rID]
REF_144(uint256) -> REF_143.keys
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_144', '1000000000000000000'] 
TMP_140(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_139', '1000000000000000000'] 
RETURN TMP_140"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 2761.sol-EthKillerLong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(round_[rID_].ico,rID_,round_[rID_].keys,round_[rID_].end,round_[rID_].strt,round_[rID_].pot,(round_[rID_].team + (round_[rID_].plyrs[winnerNum_ - 1] * 10)),plyr_[round_[rID_].plyrs[winnerNum_ - 1]].addr,plyr_[round_[rID_].plyrs[winnerNum_ - 1]].name,rndTmEth_[rID_][0],rndTmEth_[rID_][1],rndTmEth_[rID_][2],rndTmEth_[rID_][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_220(F3Ddatasets.Round) -> round_[rID_]
REF_221(uint256) -> REF_220.ico
REF_222(F3Ddatasets.Round) -> round_[rID_]
REF_223(uint256) -> REF_222.keys
REF_224(F3Ddatasets.Round) -> round_[rID_]
REF_225(uint256) -> REF_224.end
REF_226(F3Ddatasets.Round) -> round_[rID_]
REF_227(uint256) -> REF_226.strt
REF_228(F3Ddatasets.Round) -> round_[rID_]
REF_229(uint256) -> REF_228.pot
REF_230(F3Ddatasets.Round) -> round_[rID_]
REF_231(uint256) -> REF_230.team
REF_232(F3Ddatasets.Round) -> round_[rID_]
REF_233(uint256[5]) -> REF_232.plyrs
TMP_178(uint256) = winnerNum_ - 1
REF_234(uint256) -> REF_233[TMP_178]
TMP_179(uint256) = REF_234 * 10
TMP_180(uint256) = REF_231 + TMP_179
REF_235(F3Ddatasets.Round) -> round_[rID_]
REF_236(uint256[5]) -> REF_235.plyrs
TMP_181(uint256) = winnerNum_ - 1
REF_237(uint256) -> REF_236[TMP_181]
REF_238(F3Ddatasets.Player) -> plyr_[REF_237]
REF_239(address) -> REF_238.addr
REF_240(F3Ddatasets.Round) -> round_[rID_]
REF_241(uint256[5]) -> REF_240.plyrs
TMP_182(uint256) = winnerNum_ - 1
REF_242(uint256) -> REF_241[TMP_182]
REF_243(F3Ddatasets.Player) -> plyr_[REF_242]
REF_244(bytes32) -> REF_243.name
REF_245(mapping(uint256 => uint256)) -> rndTmEth_[rID_]
REF_246(uint256) -> REF_245[0]
REF_247(mapping(uint256 => uint256)) -> rndTmEth_[rID_]
REF_248(uint256) -> REF_247[1]
REF_249(mapping(uint256 => uint256)) -> rndTmEth_[rID_]
REF_250(uint256) -> REF_249[2]
REF_251(mapping(uint256 => uint256)) -> rndTmEth_[rID_]
REF_252(uint256) -> REF_251[3]
TMP_183(uint256) = airDropPot_ * 1000
TMP_184(uint256) = airDropTracker_ + TMP_183
RETURN REF_221,rID_,REF_223,REF_225,REF_227,REF_229,TMP_180,REF_239,REF_244,REF_246,REF_248,REF_250,REF_252,TMP_184"];
}
// Function: 2761.sol-EthKillerLong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_185 = CONVERT 0 to address
TMP_186(bool) = _addr == TMP_185
CONDITION TMP_186"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_187(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_253(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_253(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_254(F3Ddatasets.Player) -> plyr_[_pID]
REF_255(bytes32) -> REF_254.name
REF_256(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_257(F3Ddatasets.PlayerRounds) -> REF_256[_rID]
REF_258(uint256) -> REF_257.keys
REF_259(F3Ddatasets.Player) -> plyr_[_pID]
REF_260(uint256) -> REF_259.win
REF_261(F3Ddatasets.Player) -> plyr_[_pID]
REF_262(uint256) -> REF_261.gen
REF_264(F3Ddatasets.Player) -> plyr_[_pID]
REF_265(uint256) -> REF_264.lrnd
TMP_188(uint256) = INTERNAL_CALL, EthKillerLong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_265)
TMP_189(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_262', 'TMP_188'] 
REF_266(F3Ddatasets.Player) -> plyr_[_pID]
REF_267(uint256) -> REF_266.aff
REF_268(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_269(F3Ddatasets.PlayerRounds) -> REF_268[_rID]
REF_270(uint256) -> REF_269.eth
RETURN _pID,REF_255,REF_258,REF_260,TMP_189,REF_267,REF_270"];
}
// Function: 2761.sol-EthKillerLong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && hasPlayersInRound(_rID) == true

IRs:
REF_160(F3Ddatasets.Round) -> round_[_rID]
REF_161(uint256) -> REF_160.end
TMP_150(bool) = now > REF_161
REF_162(F3Ddatasets.Round) -> round_[_rID]
REF_163(bool) -> REF_162.ended
TMP_151(bool) = REF_163 == False
TMP_152(bool) = TMP_150 && TMP_151
TMP_153(bool) = INTERNAL_CALL, EthKillerLong.hasPlayersInRound(uint256)(_rID)
TMP_154(bool) = TMP_153 == True
TMP_155(bool) = TMP_152 && TMP_154
CONDITION TMP_155"];
2->3[label="True"];
2->8[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
isWinner(_pID,_rID)

IRs:
TMP_156(bool) = INTERNAL_CALL, EthKillerLong.isWinner(uint256,uint256)(_pID,_rID)
CONDITION TMP_156"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
calcTotalWinnerKeys(_rID)

IRs:
INTERNAL_CALL, EthKillerLong.calcTotalWinnerKeys(uint256)(_rID)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
((plyr_[_pID].win).add((((round_[_rID].pot).mul(48)) / 100).mul(plyrRnds_[_pID][_rID].keys) / totalWinnersKeys_),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_164(F3Ddatasets.Player) -> plyr_[_pID]
REF_165(uint256) -> REF_164.win
REF_167(F3Ddatasets.Round) -> round_[_rID]
REF_168(uint256) -> REF_167.pot
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_168', '48'] 
TMP_159(uint256) = TMP_158 / 100
REF_171(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_172(F3Ddatasets.PlayerRounds) -> REF_171[_rID]
REF_173(uint256) -> REF_172.keys
TMP_160(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_159', 'REF_173'] 
TMP_161(uint256) = TMP_160 / totalWinnersKeys_
TMP_162(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_165', 'TMP_161'] 
REF_174(F3Ddatasets.Player) -> plyr_[_pID]
REF_175(uint256) -> REF_174.gen
TMP_163(uint256) = INTERNAL_CALL, EthKillerLong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_178(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_179(F3Ddatasets.PlayerRounds) -> REF_178[_rID]
REF_180(uint256) -> REF_179.mask
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_163', 'REF_180'] 
TMP_165(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_175', 'TMP_164'] 
REF_181(F3Ddatasets.Player) -> plyr_[_pID]
REF_182(uint256) -> REF_181.aff
RETURN TMP_162,TMP_165,REF_182"];
6[label="Node Type: RETURN 6

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_183(F3Ddatasets.Player) -> plyr_[_pID]
REF_184(uint256) -> REF_183.win
REF_185(F3Ddatasets.Player) -> plyr_[_pID]
REF_186(uint256) -> REF_185.gen
TMP_166(uint256) = INTERNAL_CALL, EthKillerLong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_189(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_190(F3Ddatasets.PlayerRounds) -> REF_189[_rID]
REF_191(uint256) -> REF_190.mask
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_166', 'REF_191'] 
TMP_168(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_186', 'TMP_167'] 
REF_192(F3Ddatasets.Player) -> plyr_[_pID]
REF_193(uint256) -> REF_192.aff
RETURN REF_184,TMP_168,REF_193"];
8[label="Node Type: RETURN 8

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_194(F3Ddatasets.Player) -> plyr_[_pID]
REF_195(uint256) -> REF_194.win
REF_196(F3Ddatasets.Player) -> plyr_[_pID]
REF_197(uint256) -> REF_196.gen
REF_199(F3Ddatasets.Player) -> plyr_[_pID]
REF_200(uint256) -> REF_199.lrnd
TMP_169(uint256) = INTERNAL_CALL, EthKillerLong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_200)
TMP_170(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_197', 'TMP_169'] 
REF_201(F3Ddatasets.Player) -> plyr_[_pID]
REF_202(uint256) -> REF_201.aff
RETURN REF_195,TMP_170,REF_202"];
}
// Function: 2761.sol-EthKillerLong-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_203(F3Ddatasets.Round) -> round_[_rID]
REF_204(uint256) -> REF_203.mask
REF_206(F3Ddatasets.Round) -> round_[_rID]
REF_207(uint256) -> REF_206.pot
REF_209(F3Ddatasets.Round) -> round_[_rID]
REF_210(uint256) -> REF_209.team
REF_211(F3Ddatasets.PotSplit) -> potSplit_[REF_210]
REF_212(uint256) -> REF_211.gen
TMP_171(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_207', 'REF_212'] 
TMP_172(uint256) = TMP_171 / 100
TMP_173(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_172', '1000000000000000000'] 
REF_214(F3Ddatasets.Round) -> round_[_rID]
REF_215(uint256) -> REF_214.keys
TMP_174(uint256) = TMP_173 / REF_215
TMP_175(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_204', 'TMP_174'] 
REF_217(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_218(F3Ddatasets.PlayerRounds) -> REF_217[_rID]
REF_219(uint256) -> REF_218.keys
TMP_176(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_175', 'REF_219'] 
TMP_177(uint256) = TMP_176 / 1000000000000000000
RETURN TMP_177"];
}
// Function: 2761.sol-EthKillerLong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_147(F3Ddatasets.Round) -> round_[_rID]
REF_148(uint256) -> REF_147.end
TMP_141(bool) = _now < REF_148
CONDITION TMP_141"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_149(F3Ddatasets.Round) -> round_[_rID]
REF_150(uint256) -> REF_149.strt
TMP_142(uint256) = REF_150 + rndGap_
TMP_143(bool) = _now > TMP_142
CONDITION TMP_143"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_151(F3Ddatasets.Round) -> round_[_rID]
REF_152(uint256) -> REF_151.end
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_152', '_now'] 
RETURN TMP_144"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_154(F3Ddatasets.Round) -> round_[_rID]
REF_155(uint256) -> REF_154.strt
TMP_145(uint256) = REF_155 + rndGap_
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_145', '_now'] 
RETURN TMP_146"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 2761.sol-EthKillerLong-hasPlayersInRound(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < round_[_rID].plyrs.length

IRs:
REF_271(F3Ddatasets.Round) -> round_[_rID]
REF_272(uint256[5]) -> REF_271.plyrs
REF_273 -> LENGTH REF_272
TMP_190(bool) = i < REF_273
CONDITION TMP_190"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
round_[_rID].plyrs[i] != 0

IRs:
REF_274(F3Ddatasets.Round) -> round_[_rID]
REF_275(uint256[5]) -> REF_274.plyrs
REF_276(uint256) -> REF_275[i]
TMP_191(bool) = REF_276 != 0
CONDITION TMP_191"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
(true)

IRs:
RETURN True"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_192(uint8) := i(uint8)
i(uint8) = i + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2761.sol-EthKillerLong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && hasPlayersInRound(_rID) == false))

IRs:
REF_487(F3Ddatasets.Round) -> round_[_rID]
REF_488(uint256) -> REF_487.strt
TMP_303(uint256) = REF_488 + rndGap_
TMP_304(bool) = _now > TMP_303
REF_489(F3Ddatasets.Round) -> round_[_rID]
REF_490(uint256) -> REF_489.end
TMP_305(bool) = _now <= REF_490
REF_491(F3Ddatasets.Round) -> round_[_rID]
REF_492(uint256) -> REF_491.end
TMP_306(bool) = _now > REF_492
TMP_307(bool) = INTERNAL_CALL, EthKillerLong.hasPlayersInRound(uint256)(_rID)
TMP_308(bool) = TMP_307 == False
TMP_309(bool) = TMP_306 && TMP_308
TMP_310(bool) = TMP_305 || TMP_309
TMP_311(bool) = TMP_304 && TMP_310
CONDITION TMP_311"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_493(F3Ddatasets.Round) -> round_[_rID]
REF_494(uint256) -> REF_493.keys
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_494', '_keys'] 
TMP_313(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_312', '_keys'] 
RETURN TMP_313"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_314(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_314"];
}
// Function: 2761.sol-EthKillerLong-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_495(bool) = activated_ == True
TMP_496(None) = SOLIDITY_CALL require(bool,string)(TMP_495,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2761.sol-EthKillerLong-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_499(bool) = _codeLength == 0
TMP_500(None) = SOLIDITY_CALL require(bool,string)(TMP_499,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 2761.sol-EthKillerLong-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(owner == msg.sender,sorry owner only)

IRs:
TMP_497(bool) = owner == msg.sender
TMP_498(None) = SOLIDITY_CALL require(bool,string)(TMP_497,sorry owner only)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2761.sol-EthKillerLong-isWinner(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < winnerNum_

IRs:
TMP_147(bool) = i < winnerNum_
CONDITION TMP_147"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
round_[_rID].plyrs[i] == _pID

IRs:
REF_157(F3Ddatasets.Round) -> round_[_rID]
REF_158(uint256[5]) -> REF_157.plyrs
REF_159(uint256) -> REF_158[i]
TMP_148(bool) = REF_159 == _pID
CONDITION TMP_148"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
(true)

IRs:
RETURN True"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_149(uint8) := i(uint8)
i(uint8) = i + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2761.sol-EthKillerLong-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_501(bool) = _eth >= 1000000000
TMP_502(None) = SOLIDITY_CALL require(bool,string)(TMP_501,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_503(bool) = _eth <= 100000000000000000000000
TMP_504(None) = SOLIDITY_CALL require(bool,string)(TMP_503,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 2761.sol-EthKillerLong-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_513(F3Ddatasets.Player) -> plyr_[_pID]
REF_514(uint256) -> REF_513.lrnd
TMP_325(bool) = REF_514 != 0
CONDITION TMP_325"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_515(F3Ddatasets.Player) -> plyr_[_pID]
REF_516(uint256) -> REF_515.lrnd
INTERNAL_CALL, EthKillerLong.updateGenVault(uint256,uint256)(_pID,REF_516)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_517(F3Ddatasets.Player) -> plyr_[_pID]
REF_518(uint256) -> REF_517.lrnd
REF_518(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_519(uint256) -> _eventData_.compressedData
REF_520(uint256) -> _eventData_.compressedData
TMP_327(uint256) = REF_520 + 10
REF_519(uint256) (->_eventData_) := TMP_327(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2761.sol-EthKillerLong-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_444(uint256) = rID_ + 1
_rID(uint256) := TMP_444(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_703(F3Ddatasets.Round) -> round_[_rID]
REF_704(uint256) -> REF_703.pot
REF_705(F3Ddatasets.Round) -> round_[_rID]
REF_706(uint256) -> REF_705.pot
TMP_445(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_706', 'msg.value'] 
REF_704(uint256) (->round_) := TMP_445(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 2761.sol-EthKillerLong-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && hasPlayersInRound(_rID) == false))

IRs:
REF_309(F3Ddatasets.Round) -> round_[_rID]
REF_310(uint256) -> REF_309.strt
TMP_212(uint256) = REF_310 + rndGap_
TMP_213(bool) = _now > TMP_212
REF_311(F3Ddatasets.Round) -> round_[_rID]
REF_312(uint256) -> REF_311.end
TMP_214(bool) = _now <= REF_312
REF_313(F3Ddatasets.Round) -> round_[_rID]
REF_314(uint256) -> REF_313.end
TMP_215(bool) = _now > REF_314
TMP_216(bool) = INTERNAL_CALL, EthKillerLong.hasPlayersInRound(uint256)(_rID)
TMP_217(bool) = TMP_216 == False
TMP_218(bool) = TMP_215 && TMP_217
TMP_219(bool) = TMP_214 || TMP_218
TMP_220(bool) = TMP_213 && TMP_219
CONDITION TMP_220"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_315(F3Ddatasets.Player) -> plyr_[_pID]
REF_316(uint256) -> REF_315.gen
TMP_221(uint256) = INTERNAL_CALL, EthKillerLong.withdrawEarnings(uint256)(_pID)
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_221', '_eth'] 
REF_316(uint256) (->plyr_) := TMP_222(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, EthKillerLong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_318(F3Ddatasets.Round) -> round_[_rID]
REF_319(uint256) -> REF_318.end
TMP_224(bool) = _now > REF_319
REF_320(F3Ddatasets.Round) -> round_[_rID]
REF_321(bool) -> REF_320.ended
TMP_225(bool) = REF_321 == False
TMP_226(bool) = TMP_224 && TMP_225
CONDITION TMP_226"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_322(F3Ddatasets.Round) -> round_[_rID]
REF_323(bool) -> REF_322.ended
REF_323(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_227(F3Ddatasets.EventReturns) = INTERNAL_CALL, EthKillerLong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_227(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_324(uint256) -> _eventData_.compressedData
REF_325(uint256) -> _eventData_.compressedData
TMP_228(uint256) = _now * 1000000000000000000
TMP_229(uint256) = REF_325 + TMP_228
REF_324(uint256) (->_eventData_) := TMP_229(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_326(uint256) -> _eventData_.compressedIDs
REF_327(uint256) -> _eventData_.compressedIDs
TMP_230(uint256) = REF_327 + _pID
REF_326(uint256) (->_eventData_) := TMP_230(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_329(F3Ddatasets.Player) -> plyr_[_pID]
REF_330(bytes32) -> REF_329.name
REF_331(uint256) -> _eventData_.compressedData
REF_332(uint256) -> _eventData_.compressedIDs
REF_333(address) -> _eventData_.winnerAddr
REF_334(bytes32) -> _eventData_.winnerName
REF_335(uint256) -> _eventData_.amountWon
REF_336(uint256) -> _eventData_.newPot
REF_337(uint256) -> _eventData_.P3DAmount
REF_338(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_330,REF_331,REF_332,REF_333,REF_334,REF_335,REF_336,REF_337,REF_338)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2761.sol-EthKillerLong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_67(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_67(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_82 = CONVERT 0 to address
TMP_83(bool) = _affCode == TMP_82
TMP_84(bool) = _affCode == msg.sender
TMP_85(bool) = TMP_83 || TMP_84
CONDITION TMP_85"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_68(F3Ddatasets.Player) -> plyr_[_pID]
REF_69(uint256) -> REF_68.laff
_affID(uint256) := REF_69(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_70(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_70(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_71(F3Ddatasets.Player) -> plyr_[_pID]
REF_72(uint256) -> REF_71.laff
TMP_86(bool) = _affID != REF_72
CONDITION TMP_86"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_73(F3Ddatasets.Player) -> plyr_[_pID]
REF_74(uint256) -> REF_73.laff
REF_74(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_87(uint256) = INTERNAL_CALL, EthKillerLong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_87(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, EthKillerLong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, EthKillerLong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, EthKillerLong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, EthKillerLong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 2761.sol-EthKillerLong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_60(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_60(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_73(bool) = _affCode == 0
TMP_74(bool) = _affCode == _pID
TMP_75(bool) = TMP_73 || TMP_74
CONDITION TMP_75"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_61(F3Ddatasets.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.laff
_affCode(uint256) := REF_62(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_63(F3Ddatasets.Player) -> plyr_[_pID]
REF_64(uint256) -> REF_63.laff
TMP_76(bool) = _affCode != REF_64
CONDITION TMP_76"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_65(F3Ddatasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
REF_66(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_77(uint256) = INTERNAL_CALL, EthKillerLong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_77(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, EthKillerLong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, EthKillerLong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, EthKillerLong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, EthKillerLong.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 2761.sol-EthKillerLong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_75(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_75(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_92(bool) = _affCode == 
REF_76(F3Ddatasets.Player) -> plyr_[_pID]
REF_77(bytes32) -> REF_76.name
TMP_93(bool) = _affCode == REF_77
TMP_94(bool) = TMP_92 || TMP_93
CONDITION TMP_94"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_78(F3Ddatasets.Player) -> plyr_[_pID]
REF_79(uint256) -> REF_78.laff
_affID(uint256) := REF_79(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_80(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_80(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_81(F3Ddatasets.Player) -> plyr_[_pID]
REF_82(uint256) -> REF_81.laff
TMP_95(bool) = _affID != REF_82
CONDITION TMP_95"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_83(F3Ddatasets.Player) -> plyr_[_pID]
REF_84(uint256) -> REF_83.laff
REF_84(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_96(uint256) = INTERNAL_CALL, EthKillerLong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_96(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, EthKillerLong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, EthKillerLong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, EthKillerLong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, EthKillerLong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 2761.sol-EthKillerLong-registerName(address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value >= registrationFee_,umm.....  you have to pay the name fee)

IRs:
TMP_2(bool) = msg.value >= registrationFee_
TMP_3(None) = SOLIDITY_CALL require(bool,string)(TMP_2,umm.....  you have to pay the name fee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(pIDxName_[_name] == 0,sorry that names already taken)

IRs:
REF_0(uint256) -> pIDxName_[_name]
TMP_4(bool) = REF_0 == 0
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,sorry that names already taken)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_1(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_1(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
isNew = false

IRs:
isNew(bool) := False(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_pID == 0

IRs:
TMP_6(bool) = _pID == 0
CONDITION TMP_6"];
5->6[label="True"];
5->12[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isNew = true

IRs:
isNew(bool) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
playerCount ++

IRs:
TMP_7(uint256) := playerCount(uint256)
playerCount(uint256) = playerCount + 1"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_pID = playerCount

IRs:
_pID(uint256) := playerCount(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_2(uint256) -> pIDxAddr_[_addr]
REF_2(uint256) (->pIDxAddr_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_3(F3Ddatasets.Player) -> plyr_[_pID]
REF_4(bytes32) -> REF_3.name
REF_4(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_5(uint256) -> pIDxName_[_name]
REF_5(uint256) (->pIDxName_) := _pID(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID

IRs:
TMP_8(bool) = _affCode != 0
REF_6(F3Ddatasets.Player) -> plyr_[_pID]
REF_7(uint256) -> REF_6.laff
TMP_9(bool) = _affCode != REF_7
TMP_10(bool) = TMP_8 && TMP_9
TMP_11(bool) = _affCode != _pID
TMP_12(bool) = TMP_10 && TMP_11
CONDITION TMP_12"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_8(F3Ddatasets.Player) -> plyr_[_pID]
REF_9(uint256) -> REF_8.laff
REF_9(uint256) (->plyr_) := _affCode(uint256)"];
14->18;
15[label="Node Type: IF 15

EXPRESSION:
_affCode == _pID

IRs:
TMP_13(bool) = _affCode == _pID
CONDITION TMP_13"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_affCode = 0

IRs:
_affCode(uint256) := 0(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
(isNew,_affCode)

IRs:
RETURN isNew,_affCode"];
}
// Function: 2761.sol-EthKillerLong-registerNameXID(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_121(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_121(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = registerName(_addr,_name,_affCode)

IRs:
TUPLE_2(bool,uint256) = INTERNAL_CALL, EthKillerLong.registerName(address,bytes32,uint256)(_addr,_name,_affCode)
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_117(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_117(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_119(F3Ddatasets.Player) -> plyr_[_affID]
REF_120(address) -> REF_119.addr
REF_121(F3Ddatasets.Player) -> plyr_[_affID]
REF_122(bytes32) -> REF_121.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_120,REF_122,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, EthKillerLong.isHuman()()"];
9->1;
}
// Function: 2761.sol-EthKillerLong-registerNameXaddr(string,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_124(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_124(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = registerNameXaddrFromDapp(msg.sender,_name,_affCode)

IRs:
TUPLE_3(bool,uint256) = INTERNAL_CALL, EthKillerLong.registerNameXaddrFromDapp(address,bytes32,address)(msg.sender,_name,_affCode)
_isNewPlayer(bool)= UNPACK TUPLE_3 index: 0 
_affID(uint256)= UNPACK TUPLE_3 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_124(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_124(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_126(F3Ddatasets.Player) -> plyr_[_affID]
REF_127(address) -> REF_126.addr
REF_128(F3Ddatasets.Player) -> plyr_[_affID]
REF_129(bytes32) -> REF_128.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_127,REF_129,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, EthKillerLong.isHuman()()"];
9->1;
}
// Function: 2761.sol-EthKillerLong-registerNameXaddrFromDapp(address,bytes32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_affCode != address(0) && _affCode != _addr

IRs:
TMP_14 = CONVERT 0 to address
TMP_15(bool) = _affCode != TMP_14
TMP_16(bool) = _affCode != _addr
TMP_17(bool) = TMP_15 && TMP_16
CONDITION TMP_17"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_10(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_10(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
registerName(_addr,_name,_affID)

IRs:
TUPLE_0(bool,uint256) = INTERNAL_CALL, EthKillerLong.registerName(address,bytes32,uint256)(_addr,_name,_affID)
RETURN TUPLE_0"];
}
// Function: 2761.sol-EthKillerLong-registerNameXname(string,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_127(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_127(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = registerNameXnameFromDapp(msg.sender,_name,_affCode)

IRs:
TUPLE_4(bool,uint256) = INTERNAL_CALL, EthKillerLong.registerNameXnameFromDapp(address,bytes32,bytes32)(msg.sender,_name,_affCode)
_isNewPlayer(bool)= UNPACK TUPLE_4 index: 0 
_affID(uint256)= UNPACK TUPLE_4 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_131(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_131(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_133(F3Ddatasets.Player) -> plyr_[_affID]
REF_134(address) -> REF_133.addr
REF_135(F3Ddatasets.Player) -> plyr_[_affID]
REF_136(bytes32) -> REF_135.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_134,REF_136,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, EthKillerLong.isHuman()()"];
9->1;
}
// Function: 2761.sol-EthKillerLong-registerNameXnameFromDapp(address,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_affID = 0

IRs:
_affID(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_affCode !=  && _affCode != _name

IRs:
TMP_18(bool) = _affCode != 
TMP_19(bool) = _affCode != _name
TMP_20(bool) = TMP_18 && TMP_19
CONDITION TMP_20"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_11(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_11(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
registerName(_addr,_name,_affID)

IRs:
TUPLE_1(bool,uint256) = INTERNAL_CALL, EthKillerLong.registerName(address,bytes32,uint256)(_addr,_name,_affID)
RETURN TUPLE_1"];
}
// Function: 2761.sol-EthKillerLong-setTeamAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
teamAddress = addr

IRs:
teamAddress(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, EthKillerLong.isOwner()()"];
2->1;
}
// Function: 2761.sol-EthKillerLong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Eth Killer Long Official

IRs:
name(string) := Eth Killer Long Official(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = EKL

IRs:
symbol(string) := EKL(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndInit_ = 43200

IRs:
rndInit_(uint256) := 43200(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
winnerNum_ = 5

IRs:
winnerNum_(uint256) := 5(uint256)"];
}
// Function: 2761.sol-EthKillerLong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
teamAddress = 0xc2daaf4e63af76b394dea9a98a1fa650fc626b91

IRs:
teamAddress(address) := 1112421043317671852507645559597675810223777016721(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 0

IRs:
rndExtra_(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 0

IRs:
rndGap_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
registrationFee_ = 10000000000000000

IRs:
registrationFee_(uint256) := 10000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
playerCount = 0

IRs:
playerCount(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 2761.sol-EthKillerLong-updateContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
round_[rID_].end < now

IRs:
REF_31(F3Ddatasets.Round) -> round_[rID_]
REF_32(uint256) -> REF_31.end
TMP_34(bool) = REF_32 < now
CONDITION TMP_34"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
nc = Fomo3dContract(newContract)

IRs:
TMP_35 = CONVERT newContract to Fomo3dContract
nc(Fomo3dContract) := TMP_35(Fomo3dContract)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newContract.transfer(address(this).balance)

IRs:
TMP_36 = CONVERT this to address
TMP_37(uint256) = SOLIDITY_CALL balance(address)(TMP_36)
Transfer dest:newContract value:TMP_37"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nc.setOldContractData(address(this))

IRs:
TMP_39 = CONVERT this to address
HIGH_LEVEL_CALL, dest:nc(Fomo3dContract), function:setOldContractData, arguments:['TMP_39']  "];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true)

IRs:
RETURN True"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
(false)

IRs:
RETURN False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isOwner()

IRs:
MODIFIER_CALL, EthKillerLong.isOwner()()"];
8->1;
}
// Function: 2761.sol-EthKillerLong-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_378(uint256) = INTERNAL_CALL, EthKillerLong.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_378(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_379(bool) = _earnings > 0
CONDITION TMP_379"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_639(F3Ddatasets.Player) -> plyr_[_pID]
REF_640(uint256) -> REF_639.gen
REF_642(F3Ddatasets.Player) -> plyr_[_pID]
REF_643(uint256) -> REF_642.gen
TMP_380(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_643'] 
REF_640(uint256) (->plyr_) := TMP_380(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_644(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_645(F3Ddatasets.PlayerRounds) -> REF_644[_rIDlast]
REF_646(uint256) -> REF_645.mask
REF_648(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_649(F3Ddatasets.PlayerRounds) -> REF_648[_rIDlast]
REF_650(uint256) -> REF_649.mask
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_650'] 
REF_646(uint256) (->plyrRnds_) := TMP_381(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 2761.sol-EthKillerLong-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_464(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_732(F3Ddatasets.Round) -> round_[_rID]
REF_733(uint256) -> REF_732.keys
TMP_465(uint256) = TMP_464 / REF_733
_ppt(uint256) := TMP_465(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_734(F3Ddatasets.Round) -> round_[_rID]
REF_735(uint256) -> REF_734.mask
REF_737(F3Ddatasets.Round) -> round_[_rID]
REF_738(uint256) -> REF_737.mask
TMP_466(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_738'] 
REF_735(uint256) (->round_) := TMP_466(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_467(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_468(uint256) = TMP_467 / 1000000000000000000
_pearn(uint256) := TMP_468(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_740(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_741(F3Ddatasets.PlayerRounds) -> REF_740[_rID]
REF_742(uint256) -> REF_741.mask
REF_743(F3Ddatasets.Round) -> round_[_rID]
REF_744(uint256) -> REF_743.mask
TMP_469(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_744', '_keys'] 
TMP_470(uint256) = TMP_469 / 1000000000000000000
TMP_471(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_470', '_pearn'] 
REF_748(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_749(F3Ddatasets.PlayerRounds) -> REF_748[_rID]
REF_750(uint256) -> REF_749.mask
TMP_472(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_471', 'REF_750'] 
REF_742(uint256) (->plyrRnds_) := TMP_472(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_753(F3Ddatasets.Round) -> round_[_rID]
REF_754(uint256) -> REF_753.keys
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_754'] 
TMP_474(uint256) = TMP_473 / 1000000000000000000
TMP_475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_474'] 
RETURN TMP_475"];
}
// Function: 2761.sol-EthKillerLong-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && hasPlayersInRound(_rID) == false

IRs:
REF_651(F3Ddatasets.Round) -> round_[_rID]
REF_652(uint256) -> REF_651.end
TMP_382(bool) = _now > REF_652
TMP_383(bool) = INTERNAL_CALL, EthKillerLong.hasPlayersInRound(uint256)(_rID)
TMP_384(bool) = TMP_383 == False
TMP_385(bool) = TMP_382 && TMP_384
CONDITION TMP_385"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_386(uint256) = _keys / 1000000000000000000
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_386', 'rndInc_'] 
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_387', '_now'] 
_newTime(uint256) := TMP_388(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_389(uint256) = _keys / 1000000000000000000
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_389', 'rndInc_'] 
REF_657(F3Ddatasets.Round) -> round_[_rID]
REF_658(uint256) -> REF_657.end
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_390', 'REF_658'] 
_newTime(uint256) := TMP_391(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_rndEth = round_[_rID].eth

IRs:
REF_659(F3Ddatasets.Round) -> round_[_rID]
REF_660(uint256) -> REF_659.eth
_rndEth(uint256) := REF_660(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_rndNeedSub = 0

IRs:
_rndNeedSub(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_rndEth >= (2000000000000000000000)

IRs:
TMP_392(bool) = _rndEth >= 2000000000000000000000
CONDITION TMP_392"];
9->10[label="True"];
9->19[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_rndEth <= (46000000000000000000000)

IRs:
TMP_393(bool) = _rndEth <= 46000000000000000000000
CONDITION TMP_393"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_rndNeedSub = (3600).mul(_rndEth / (2000000000000000000000))

IRs:
TMP_394(uint256) = _rndEth / 2000000000000000000000
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['3600', 'TMP_394'] 
_rndNeedSub(uint256) := TMP_395(uint256)"];
11->18;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_rndNeedSub = (3600).mul(23)

IRs:
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['3600', '23'] 
_rndNeedSub(uint256) := TMP_396(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
_ethLeft = _rndEth.sub(46000000000000000000000)

IRs:
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_rndEth', '46000000000000000000000'] 
_ethLeft(uint256) := TMP_397(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_ethLeft <= (12000000000000000000000)

IRs:
TMP_398(bool) = _ethLeft <= 12000000000000000000000
CONDITION TMP_398"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_rndNeedSub = _rndNeedSub.add((590).mul(_ethLeft / (2000000000000000000000)))

IRs:
TMP_399(uint256) = _ethLeft / 2000000000000000000000
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['590', 'TMP_399'] 
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_rndNeedSub', 'TMP_400'] 
_rndNeedSub(uint256) := TMP_401(uint256)"];
15->17;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_rndNeedSub = 999

IRs:
_rndNeedSub(uint256) := 999(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_rndNeedSub != 999

IRs:
TMP_402(bool) = _rndNeedSub != 999
CONDITION TMP_402"];
20->21[label="True"];
20->26[label="False"];
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
_rndMax = rndMax_.sub(_rndNeedSub)

IRs:
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['rndMax_', '_rndNeedSub'] 
_rndMax(uint256) := TMP_403(uint256)"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_newTime < (_rndMax).add(_now)

IRs:
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_rndMax', '_now'] 
TMP_405(bool) = _newTime < TMP_404
CONDITION TMP_405"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_668(F3Ddatasets.Round) -> round_[_rID]
REF_669(uint256) -> REF_668.end
REF_669(uint256) (->round_) := _newTime(uint256)"];
23->25;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
round_[_rID].end = _rndMax.add(_now)

IRs:
REF_670(F3Ddatasets.Round) -> round_[_rID]
REF_671(uint256) -> REF_670.end
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_rndMax', '_now'] 
REF_671(uint256) (->round_) := TMP_406(uint256)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
}
// Function: 2761.sol-EthKillerLong-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_322(bool) = _team < 0
TMP_323(bool) = _team > 3
TMP_324(bool) = TMP_322 || TMP_323
CONDITION TMP_324"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 2761.sol-EthKillerLong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_85(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_85(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && hasPlayersInRound(_rID) == true

IRs:
REF_86(F3Ddatasets.Round) -> round_[_rID]
REF_87(uint256) -> REF_86.end
TMP_101(bool) = _now > REF_87
REF_88(F3Ddatasets.Round) -> round_[_rID]
REF_89(bool) -> REF_88.ended
TMP_102(bool) = REF_89 == False
TMP_103(bool) = TMP_101 && TMP_102
TMP_104(bool) = INTERNAL_CALL, EthKillerLong.hasPlayersInRound(uint256)(_rID)
TMP_105(bool) = TMP_104 == True
TMP_106(bool) = TMP_103 && TMP_105
CONDITION TMP_106"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_90(F3Ddatasets.Round) -> round_[_rID]
REF_91(bool) -> REF_90.ended
REF_91(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_107(F3Ddatasets.EventReturns) = INTERNAL_CALL, EthKillerLong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_107(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_108(uint256) = INTERNAL_CALL, EthKillerLong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_108(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_109(bool) = _eth > 0
CONDITION TMP_109"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_92(F3Ddatasets.Player) -> plyr_[_pID]
REF_93(address) -> REF_92.addr
Transfer dest:REF_93 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_95(uint256) -> _eventData_.compressedData
REF_96(uint256) -> _eventData_.compressedData
TMP_111(uint256) = _now * 1000000000000000000
TMP_112(uint256) = REF_96 + TMP_111
REF_95(uint256) (->_eventData_) := TMP_112(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_97(uint256) -> _eventData_.compressedIDs
REF_98(uint256) -> _eventData_.compressedIDs
TMP_113(uint256) = REF_98 + _pID
REF_97(uint256) (->_eventData_) := TMP_113(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_100(F3Ddatasets.Player) -> plyr_[_pID]
REF_101(bytes32) -> REF_100.name
REF_102(uint256) -> _eventData_.compressedData
REF_103(uint256) -> _eventData_.compressedIDs
REF_104(address) -> _eventData_.winnerAddr
REF_105(bytes32) -> _eventData_.winnerName
REF_106(uint256) -> _eventData_.amountWon
REF_107(uint256) -> _eventData_.newPot
REF_108(uint256) -> _eventData_.P3DAmount
REF_109(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_101,_eth,REF_102,REF_103,REF_104,REF_105,REF_106,REF_107,REF_108,REF_109)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_115(uint256) = INTERNAL_CALL, EthKillerLong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_115(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_116(bool) = _eth > 0
CONDITION TMP_116"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_110(F3Ddatasets.Player) -> plyr_[_pID]
REF_111(address) -> REF_110.addr
Transfer dest:REF_111 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_114(F3Ddatasets.Player) -> plyr_[_pID]
REF_115(bytes32) -> REF_114.name
Emit onWithdraw(_pID,msg.sender,REF_115,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, EthKillerLong.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, EthKillerLong.isHuman()()"];
23->1;
}
// Function: 2761.sol-EthKillerLong-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_755(F3Ddatasets.Player) -> plyr_[_pID]
REF_756(uint256) -> REF_755.lrnd
INTERNAL_CALL, EthKillerLong.updateGenVault(uint256,uint256)(_pID,REF_756)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_757(F3Ddatasets.Player) -> plyr_[_pID]
REF_758(uint256) -> REF_757.win
REF_760(F3Ddatasets.Player) -> plyr_[_pID]
REF_761(uint256) -> REF_760.gen
TMP_477(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_758', 'REF_761'] 
REF_763(F3Ddatasets.Player) -> plyr_[_pID]
REF_764(uint256) -> REF_763.aff
TMP_478(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_477', 'REF_764'] 
_earnings(uint256) := TMP_478(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_479(bool) = _earnings > 0
CONDITION TMP_479"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_765(F3Ddatasets.Player) -> plyr_[_pID]
REF_766(uint256) -> REF_765.win
REF_766(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_767(F3Ddatasets.Player) -> plyr_[_pID]
REF_768(uint256) -> REF_767.gen
REF_768(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_769(F3Ddatasets.Player) -> plyr_[_pID]
REF_770(uint256) -> REF_769.aff
REF_770(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 2761.sol-F3DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_519(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_520(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_519'] 
TMP_521(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_522(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_521'] 
TMP_523(uint256) = TMP_522 / 2
TMP_524(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_520', 'TMP_523'] 
TMP_525(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_526(uint256) = TMP_524 / TMP_525
RETURN TMP_526"];
}
// Function: 2761.sol-F3DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_509(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(_curKeys)
TMP_510(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_511(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(TMP_510)
TMP_512(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_509', 'TMP_511'] 
RETURN TMP_512"];
}
// Function: 2761.sol-F3DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_513(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_514(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_513', '312500000000000000000000000'] 
TMP_515(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_514', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_516(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_515'] 
TMP_517(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_516', '74999921875000000000000000000000'] 
TMP_518(uint256) = TMP_517 / 156250000
RETURN TMP_518"];
}
// Function: 2761.sol-F3DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_505(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_506(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(TMP_505)
TMP_507(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(_curEth)
TMP_508(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_506', 'TMP_507'] 
RETURN TMP_508"];
}
// Function: 2761.sol-Fomo3dContract-setOldContractData(address)
digraph{
}
// Function: 2761.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_527 = CONVERT _input to bytes
_temp(bytes) := TMP_527(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_806 -> LENGTH _temp
_length(uint256) := REF_806(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_528(bool) = _length <= 32
TMP_529(bool) = _length > 0
TMP_530(bool) = TMP_528 && TMP_529
TMP_531(None) = SOLIDITY_CALL require(bool,string)(TMP_530,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_807(None) -> _temp[0]
TMP_532(bool) = REF_807 != 32
TMP_533(uint256) = _length - 1
REF_808(None) -> _temp[TMP_533]
TMP_534(bool) = REF_808 != 32
TMP_535(bool) = TMP_532 && TMP_534
TMP_536(None) = SOLIDITY_CALL require(bool,string)(TMP_535,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_809(None) -> _temp[0]
TMP_537(bool) = REF_809 == 48
CONDITION TMP_537"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_810(None) -> _temp[1]
TMP_538(bool) = REF_810 != 120
TMP_539(None) = SOLIDITY_CALL require(bool,string)(TMP_538,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_811(None) -> _temp[1]
TMP_540(bool) = REF_811 != 88
TMP_541(None) = SOLIDITY_CALL require(bool,string)(TMP_540,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_542(bool) = i < _length
CONDITION TMP_542"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_812(None) -> _temp[i]
TMP_543(bool) = REF_812 > 64
REF_813(None) -> _temp[i]
TMP_544(bool) = REF_813 < 91
TMP_545(bool) = TMP_543 && TMP_544
CONDITION TMP_545"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_814(bytes1) -> _temp[i]
REF_815(None) -> _temp[i]
TMP_546 = CONVERT REF_815 to uint256
TMP_547(uint256) = TMP_546 + 32
TMP_548 = CONVERT TMP_547 to bytes1
REF_814(bytes1) (->_temp) := TMP_548(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_549(bool) = _hasNonNumber == False
CONDITION TMP_549"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_816(None) -> _temp[i]
TMP_550(bool) = REF_816 == 32
REF_817(None) -> _temp[i]
TMP_551(bool) = REF_817 > 96
REF_818(None) -> _temp[i]
TMP_552(bool) = REF_818 < 123
TMP_553(bool) = TMP_551 && TMP_552
TMP_554(bool) = TMP_550 || TMP_553
REF_819(None) -> _temp[i]
TMP_555(bool) = REF_819 > 47
REF_820(None) -> _temp[i]
TMP_556(bool) = REF_820 < 58
TMP_557(bool) = TMP_555 && TMP_556
TMP_558(bool) = TMP_554 || TMP_557
TMP_559(None) = SOLIDITY_CALL require(bool,string)(TMP_558,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_821(None) -> _temp[i]
TMP_560(bool) = REF_821 == 32
CONDITION TMP_560"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_561(uint256) = i + 1
REF_822(None) -> _temp[TMP_561]
TMP_562(bool) = REF_822 != 32
TMP_563(None) = SOLIDITY_CALL require(bool,string)(TMP_562,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_564(bool) = _hasNonNumber == False
REF_823(None) -> _temp[i]
TMP_565(bool) = REF_823 < 48
REF_824(None) -> _temp[i]
TMP_566(bool) = REF_824 > 57
TMP_567(bool) = TMP_565 || TMP_566
TMP_568(bool) = TMP_564 && TMP_567
CONDITION TMP_568"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_569(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_570(bool) = _hasNonNumber == True
TMP_571(None) = SOLIDITY_CALL require(bool,string)(TMP_570,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 2761.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_580(uint256) = a + b
c(uint256) := TMP_580(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_581(bool) = c >= a
TMP_582(None) = SOLIDITY_CALL require(bool,string)(TMP_581,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2761.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_572(bool) = a == 0
CONDITION TMP_572"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_573(uint256) = a * b
c(uint256) := TMP_573(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_574(uint256) = c / a
TMP_575(bool) = TMP_574 == b
TMP_576(None) = SOLIDITY_CALL require(bool,string)(TMP_575,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2761.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_590(bool) = x == 0
CONDITION TMP_590"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_591(bool) = y == 0
CONDITION TMP_591"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_592(bool) = i < y
CONDITION TMP_592"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_593(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_593(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_594(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 2761.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_589(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_589"];
}
// Function: 2761.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_583(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_584(uint256) = TMP_583 / 2
z(uint256) := TMP_584(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_585(bool) = z < y
CONDITION TMP_585"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_586(uint256) = x / z
TMP_587(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_586,z)
TMP_588(uint256) = TMP_587 / 2
z(uint256) := TMP_588(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 2761.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_577(bool) = b <= a
TMP_578(None) = SOLIDITY_CALL require(bool,string)(TMP_577,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_579(uint256) = a - b
RETURN TMP_579"];
}
}
