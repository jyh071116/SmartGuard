digraph G {
// Function: 2777.sol-F3DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_533(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_534(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_533'] 
TMP_535(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_536(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_535'] 
TMP_537(uint256) = TMP_536 / 2
TMP_538(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_534', 'TMP_537'] 
TMP_539(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_540(uint256) = TMP_538 / TMP_539
RETURN TMP_540"];
}
// Function: 2777.sol-F3DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_523(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(_curKeys)
TMP_524(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_525(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(TMP_524)
TMP_526(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_523', 'TMP_525'] 
RETURN TMP_526"];
}
// Function: 2777.sol-F3DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_527(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_528(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_527', '312500000000000000000000000'] 
TMP_529(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_528', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_530(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_529'] 
TMP_531(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_530', '74999921875000000000000000000000'] 
TMP_532(uint256) = TMP_531 / 156250000
RETURN TMP_532"];
}
// Function: 2777.sol-F3DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_519(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_520(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(TMP_519)
TMP_521(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(_curEth)
TMP_522(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_520', 'TMP_521'] 
RETURN TMP_522"];
}
// Function: 2777.sol-FoMo3DWorld-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_84 = CONVERT 0 to address
TMP_85(bool) = _newOwner != TMP_84
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 2777.sol-FoMo3DWorld-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == false,fomo3d already activated)

IRs:
TMP_504(bool) = activated_ == False
TMP_505(None) = SOLIDITY_CALL require(bool,string)(TMP_504,fomo3d already activated)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
round_[1].strt = now

IRs:
REF_717(F3Ddatasets.Round) -> round_[1]
REF_718(uint256) -> REF_717.strt
REF_718(uint256) (->round_) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].end = now + rndInit_

IRs:
REF_719(F3Ddatasets.Round) -> round_[1]
REF_720(uint256) -> REF_719.end
TMP_506(uint256) = now + rndInit_
REF_720(uint256) (->round_) := TMP_506(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 2777.sol-FoMo3DWorld-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_431(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_432(bytes32) = SOLIDITY_CALL keccak256()(TMP_431)
TMP_433 = CONVERT TMP_432 to uint256
TMP_434(uint256) = TMP_433 / now
TMP_435(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_430', 'TMP_434'] 
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_435', 'block.gaslimit'] 
TMP_437(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_438(bytes32) = SOLIDITY_CALL keccak256()(TMP_437)
TMP_439 = CONVERT TMP_438 to uint256
TMP_440(uint256) = TMP_439 / now
TMP_441(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_436', 'TMP_440'] 
TMP_442(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_441', 'block.number'] 
TMP_443(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_442)
TMP_444(bytes32) = SOLIDITY_CALL keccak256()(TMP_443)
TMP_445 = CONVERT TMP_444 to uint256
seed(uint256) := TMP_445(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_446(uint256) = seed / 1000
TMP_447(uint256) = TMP_446 * 1000
TMP_448(uint256) = seed - TMP_447
TMP_449(bool) = TMP_448 < airDropTracker_
CONDITION TMP_449"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 2777.sol-FoMo3DWorld-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_278(F3Ddatasets.Round) -> round_[_rID]
REF_279(uint256) -> REF_278.strt
TMP_240(uint256) = REF_279 + rndGap_
TMP_241(bool) = _now > TMP_240
REF_280(F3Ddatasets.Round) -> round_[_rID]
REF_281(uint256) -> REF_280.end
TMP_242(bool) = _now <= REF_281
REF_282(F3Ddatasets.Round) -> round_[_rID]
REF_283(uint256) -> REF_282.end
TMP_243(bool) = _now > REF_283
REF_284(F3Ddatasets.Round) -> round_[_rID]
REF_285(uint256) -> REF_284.plyr
TMP_244(bool) = REF_285 == 0
TMP_245(bool) = TMP_243 && TMP_244
TMP_246(bool) = TMP_242 || TMP_245
TMP_247(bool) = TMP_241 && TMP_246
CONDITION TMP_247"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DWorld.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_286(F3Ddatasets.Round) -> round_[_rID]
REF_287(uint256) -> REF_286.end
TMP_249(bool) = _now > REF_287
REF_288(F3Ddatasets.Round) -> round_[_rID]
REF_289(bool) -> REF_288.ended
TMP_250(bool) = REF_289 == False
TMP_251(bool) = TMP_249 && TMP_250
CONDITION TMP_251"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_290(F3Ddatasets.Round) -> round_[_rID]
REF_291(bool) -> REF_290.ended
REF_291(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_252(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DWorld.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_252(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_292(uint256) -> _eventData_.compressedData
REF_293(uint256) -> _eventData_.compressedData
TMP_253(uint256) = _now * 1000000000000000000
TMP_254(uint256) = REF_293 + TMP_253
REF_292(uint256) (->_eventData_) := TMP_254(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_294(uint256) -> _eventData_.compressedIDs
REF_295(uint256) -> _eventData_.compressedIDs
TMP_255(uint256) = REF_295 + _pID
REF_294(uint256) (->_eventData_) := TMP_255(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.mktAmount,_eventData_.genAmount)

IRs:
REF_297(F3Ddatasets.Player) -> plyr_[_pID]
REF_298(bytes32) -> REF_297.name
REF_299(uint256) -> _eventData_.compressedData
REF_300(uint256) -> _eventData_.compressedIDs
REF_301(address) -> _eventData_.winnerAddr
REF_302(bytes32) -> _eventData_.winnerName
REF_303(uint256) -> _eventData_.amountWon
REF_304(uint256) -> _eventData_.newPot
REF_305(uint256) -> _eventData_.mktAmount
REF_306(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_298,msg.value,REF_299,REF_300,REF_301,REF_302,REF_303,REF_304,REF_305,REF_306)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_307(F3Ddatasets.Player) -> plyr_[_pID]
REF_308(uint256) -> REF_307.gen
REF_309(F3Ddatasets.Player) -> plyr_[_pID]
REF_310(uint256) -> REF_309.gen
TMP_257(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_310', 'msg.value'] 
REF_308(uint256) (->plyr_) := TMP_257(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2777.sol-FoMo3DWorld-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_111(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DWorld.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_111(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_45(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_45(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_112 = CONVERT 0 to address
TMP_113(bool) = _affCode == TMP_112
TMP_114(bool) = _affCode == msg.sender
TMP_115(bool) = TMP_113 || TMP_114
CONDITION TMP_115"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_46(F3Ddatasets.Player) -> plyr_[_pID]
REF_47(uint256) -> REF_46.laff
_affID(uint256) := REF_47(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_48(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_48(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_49(F3Ddatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
TMP_116(bool) = _affID != REF_50
CONDITION TMP_116"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_51(F3Ddatasets.Player) -> plyr_[_pID]
REF_52(uint256) -> REF_51.laff
REF_52(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_117(uint256) = INTERNAL_CALL, FoMo3DWorld.verifyTeam(uint256)(_team)
_team(uint256) := TMP_117(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DWorld.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DWorld.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DWorld.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DWorld.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 2777.sol-FoMo3DWorld-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_101(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DWorld.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_101(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_38(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_38(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_102(bool) = _affCode == 0
TMP_103(bool) = _affCode == _pID
TMP_104(bool) = TMP_102 || TMP_103
CONDITION TMP_104"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_39(F3Ddatasets.Player) -> plyr_[_pID]
REF_40(uint256) -> REF_39.laff
_affCode(uint256) := REF_40(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_41(F3Ddatasets.Player) -> plyr_[_pID]
REF_42(uint256) -> REF_41.laff
TMP_105(bool) = _affCode != REF_42
CONDITION TMP_105"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_43(F3Ddatasets.Player) -> plyr_[_pID]
REF_44(uint256) -> REF_43.laff
REF_44(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_106(uint256) = INTERNAL_CALL, FoMo3DWorld.verifyTeam(uint256)(_team)
_team(uint256) := TMP_106(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DWorld.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DWorld.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DWorld.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DWorld.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 2777.sol-FoMo3DWorld-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_122(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DWorld.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_122(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_53(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_53(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_123(bool) = _affCode == 
REF_54(F3Ddatasets.Player) -> plyr_[_pID]
REF_55(bytes32) -> REF_54.name
TMP_124(bool) = _affCode == REF_55
TMP_125(bool) = TMP_123 || TMP_124
CONDITION TMP_125"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_56(F3Ddatasets.Player) -> plyr_[_pID]
REF_57(uint256) -> REF_56.laff
_affID(uint256) := REF_57(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_58(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_58(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_59(F3Ddatasets.Player) -> plyr_[_pID]
REF_60(uint256) -> REF_59.laff
TMP_126(bool) = _affID != REF_60
CONDITION TMP_126"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_61(F3Ddatasets.Player) -> plyr_[_pID]
REF_62(uint256) -> REF_61.laff
REF_62(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_127(uint256) = INTERNAL_CALL, FoMo3DWorld.verifyTeam(uint256)(_team)
_team(uint256) := TMP_127(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DWorld.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DWorld.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DWorld.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DWorld.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 2777.sol-FoMo3DWorld-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_443(F3Ddatasets.Round) -> round_[_rID]
REF_444(uint256) -> REF_443.strt
TMP_330(uint256) = REF_444 + rndGap_
TMP_331(bool) = _now > TMP_330
REF_445(F3Ddatasets.Round) -> round_[_rID]
REF_446(uint256) -> REF_445.end
TMP_332(bool) = _now <= REF_446
REF_447(F3Ddatasets.Round) -> round_[_rID]
REF_448(uint256) -> REF_447.end
TMP_333(bool) = _now > REF_448
REF_449(F3Ddatasets.Round) -> round_[_rID]
REF_450(uint256) -> REF_449.plyr
TMP_334(bool) = REF_450 == 0
TMP_335(bool) = TMP_333 && TMP_334
TMP_336(bool) = TMP_332 || TMP_335
TMP_337(bool) = TMP_331 && TMP_336
CONDITION TMP_337"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_451(F3Ddatasets.Round) -> round_[_rID]
REF_452(uint256) -> REF_451.eth
TMP_338(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_452', '_eth'] 
RETURN TMP_338"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_339(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_339"];
}
// Function: 2777.sol-FoMo3DWorld-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_433(F3Ddatasets.Round) -> round_[_rIDlast]
REF_434(uint256) -> REF_433.mask
REF_436(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_437(F3Ddatasets.PlayerRounds) -> REF_436[_rIDlast]
REF_438(uint256) -> REF_437.keys
TMP_327(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_434', 'REF_438'] 
TMP_328(uint256) = TMP_327 / 1000000000000000000
REF_440(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_441(F3Ddatasets.PlayerRounds) -> REF_440[_rIDlast]
REF_442(uint256) -> REF_441.mask
TMP_329(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_328', 'REF_442'] 
RETURN TMP_329"];
}
// Function: 2777.sol-FoMo3DWorld-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(30,6)

IRs:
REF_19(F3Ddatasets.TeamFee) -> fees_[0]
TMP_88(F3Ddatasets.TeamFee) = new TeamFee(30,6)
REF_19(F3Ddatasets.TeamFee) (->fees_) := TMP_88(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(43,0)

IRs:
REF_21(F3Ddatasets.TeamFee) -> fees_[1]
TMP_89(F3Ddatasets.TeamFee) = new TeamFee(43,0)
REF_21(F3Ddatasets.TeamFee) (->fees_) := TMP_89(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(56,10)

IRs:
REF_23(F3Ddatasets.TeamFee) -> fees_[2]
TMP_90(F3Ddatasets.TeamFee) = new TeamFee(56,10)
REF_23(F3Ddatasets.TeamFee) (->fees_) := TMP_90(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(43,8)

IRs:
REF_25(F3Ddatasets.TeamFee) -> fees_[3]
TMP_91(F3Ddatasets.TeamFee) = new TeamFee(43,8)
REF_25(F3Ddatasets.TeamFee) (->fees_) := TMP_91(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(15,10)

IRs:
REF_27(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_92(F3Ddatasets.PotSplit) = new PotSplit(15,10)
REF_27(F3Ddatasets.PotSplit) (->potSplit_) := TMP_92(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_29(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_93(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_29(F3Ddatasets.PotSplit) (->potSplit_) := TMP_93(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(20,20)

IRs:
REF_31(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_94(F3Ddatasets.PotSplit) = new PotSplit(20,20)
REF_31(F3Ddatasets.PotSplit) (->potSplit_) := TMP_94(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(30,10)

IRs:
REF_33(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_95(F3Ddatasets.PotSplit) = new PotSplit(30,10)
REF_33(F3Ddatasets.PotSplit) (->potSplit_) := TMP_95(F3Ddatasets.PotSplit)"];
}
// Function: 2777.sol-FoMo3DWorld-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_344(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_345(F3Ddatasets.PlayerRounds) -> REF_344[_rID]
REF_346(uint256) -> REF_345.keys
TMP_277(bool) = REF_346 == 0
CONDITION TMP_277"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_278(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DWorld.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_278(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_347(F3Ddatasets.Round) -> round_[_rID]
REF_348(uint256) -> REF_347.eth
TMP_279(bool) = REF_348 < 100000000000000000000
REF_349(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_350(F3Ddatasets.PlayerRounds) -> REF_349[_rID]
REF_351(uint256) -> REF_350.eth
TMP_280(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_351', '_eth'] 
TMP_281(bool) = TMP_280 > 1000000000000000000
TMP_282(bool) = TMP_279 && TMP_281
CONDITION TMP_282"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_354(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_355(F3Ddatasets.PlayerRounds) -> REF_354[_rID]
REF_356(uint256) -> REF_355.eth
TMP_283(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_356'] 
_availableLimit(uint256) := TMP_283(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_284(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_358(F3Ddatasets.Player) -> plyr_[_pID]
REF_359(uint256) -> REF_358.gen
REF_360(F3Ddatasets.Player) -> plyr_[_pID]
REF_361(uint256) -> REF_360.gen
TMP_285(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_361', '_refund'] 
REF_359(uint256) (->plyr_) := TMP_285(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_286(bool) = _eth > 1000000000
CONDITION TMP_286"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_363(F3Ddatasets.Round) -> round_[_rID]
REF_364(uint256) -> REF_363.eth
TMP_287(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_364', '_eth'] 
_keys(uint256) := TMP_287(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_288(bool) = _keys >= 1000000000000000000
CONDITION TMP_288"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3DWorld.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_366(F3Ddatasets.Round) -> round_[_rID]
REF_367(uint256) -> REF_366.plyr
TMP_290(bool) = REF_367 != _pID
CONDITION TMP_290"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_368(F3Ddatasets.Round) -> round_[_rID]
REF_369(uint256) -> REF_368.plyr
REF_369(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_370(F3Ddatasets.Round) -> round_[_rID]
REF_371(uint256) -> REF_370.team
TMP_291(bool) = REF_371 != _team
CONDITION TMP_291"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_372(F3Ddatasets.Round) -> round_[_rID]
REF_373(uint256) -> REF_372.team
REF_373(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_374(uint256) -> _eventData_.compressedData
REF_375(uint256) -> _eventData_.compressedData
TMP_292(uint256) = REF_375 + 100
REF_374(uint256) (->_eventData_) := TMP_292(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_293(bool) = _eth >= 100000000000000000
CONDITION TMP_293"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_294(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_295(bool) = INTERNAL_CALL, FoMo3DWorld.airdrop()()
TMP_296(bool) = TMP_295 == True
CONDITION TMP_296"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_297(bool) = _eth >= 10000000000000000000
CONDITION TMP_297"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_299(uint256) = TMP_298 / 100
_prize(uint256) := TMP_299(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_377(F3Ddatasets.Player) -> plyr_[_pID]
REF_378(uint256) -> REF_377.win
REF_379(F3Ddatasets.Player) -> plyr_[_pID]
REF_380(uint256) -> REF_379.win
TMP_300(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_380', '_prize'] 
REF_378(uint256) (->plyr_) := TMP_300(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_301(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_301(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_383(uint256) -> _eventData_.compressedData
REF_383(-> _eventData_) = REF_383 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_302(bool) = _eth >= 1000000000000000000
TMP_303(bool) = _eth < 10000000000000000000
TMP_304(bool) = TMP_302 && TMP_303
CONDITION TMP_304"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_305(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_306(uint256) = TMP_305 / 100
_prize(uint256) := TMP_306(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_385(F3Ddatasets.Player) -> plyr_[_pID]
REF_386(uint256) -> REF_385.win
REF_387(F3Ddatasets.Player) -> plyr_[_pID]
REF_388(uint256) -> REF_387.win
TMP_307(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_388', '_prize'] 
REF_386(uint256) (->plyr_) := TMP_307(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_308(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_391(uint256) -> _eventData_.compressedData
REF_391(-> _eventData_) = REF_391 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_309(bool) = _eth >= 100000000000000000
TMP_310(bool) = _eth < 1000000000000000000
TMP_311(bool) = TMP_309 && TMP_310
CONDITION TMP_311"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_313(uint256) = TMP_312 / 100
_prize(uint256) := TMP_313(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_393(F3Ddatasets.Player) -> plyr_[_pID]
REF_394(uint256) -> REF_393.win
REF_395(F3Ddatasets.Player) -> plyr_[_pID]
REF_396(uint256) -> REF_395.win
TMP_314(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_396', '_prize'] 
REF_394(uint256) (->plyr_) := TMP_314(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_315(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_315(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_399(uint256) -> _eventData_.compressedData
REF_399(-> _eventData_) = REF_399 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_400(uint256) -> _eventData_.compressedData
REF_400(-> _eventData_) = REF_400 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_401(uint256) -> _eventData_.compressedData
TMP_316(uint256) = _prize * 1000000000000000000000000000000000
REF_401(-> _eventData_) = REF_401 + TMP_316"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_402(uint256) -> _eventData_.compressedData
REF_403(uint256) -> _eventData_.compressedData
TMP_317(uint256) = airDropTracker_ * 1000
TMP_318(uint256) = REF_403 + TMP_317
REF_402(uint256) (->_eventData_) := TMP_318(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_404(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_405(F3Ddatasets.PlayerRounds) -> REF_404[_rID]
REF_406(uint256) -> REF_405.keys
REF_408(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_409(F3Ddatasets.PlayerRounds) -> REF_408[_rID]
REF_410(uint256) -> REF_409.keys
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_410'] 
REF_406(uint256) (->plyrRnds_) := TMP_319(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_411(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_412(F3Ddatasets.PlayerRounds) -> REF_411[_rID]
REF_413(uint256) -> REF_412.eth
REF_415(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_416(F3Ddatasets.PlayerRounds) -> REF_415[_rID]
REF_417(uint256) -> REF_416.eth
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_417'] 
REF_413(uint256) (->plyrRnds_) := TMP_320(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_418(F3Ddatasets.Round) -> round_[_rID]
REF_419(uint256) -> REF_418.keys
REF_421(F3Ddatasets.Round) -> round_[_rID]
REF_422(uint256) -> REF_421.keys
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_422'] 
REF_419(uint256) (->round_) := TMP_321(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_423(F3Ddatasets.Round) -> round_[_rID]
REF_424(uint256) -> REF_423.eth
REF_426(F3Ddatasets.Round) -> round_[_rID]
REF_427(uint256) -> REF_426.eth
TMP_322(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_427'] 
REF_424(uint256) (->round_) := TMP_322(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_428(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_429(uint256) -> REF_428[_team]
REF_431(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_432(uint256) -> REF_431[_team]
TMP_323(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_432'] 
REF_429(uint256) (->rndTmEth_) := TMP_323(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_324(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DWorld.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_324(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_325(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DWorld.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_325(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DWorld.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 2777.sol-FoMo3DWorld-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_492(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_492(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_364(bool) = _pID == 0
CONDITION TMP_364"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_365(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_365(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_366(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_366(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_367(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_367(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_496(uint256) -> pIDxAddr_[msg.sender]
REF_496(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_497(F3Ddatasets.Player) -> plyr_[_pID]
REF_498(address) -> REF_497.addr
REF_498(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_368(bool) = _name != 
CONDITION TMP_368"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_499(uint256) -> pIDxName_[_name]
REF_499(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_500(F3Ddatasets.Player) -> plyr_[_pID]
REF_501(bytes32) -> REF_500.name
REF_501(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_502(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_503(bool) -> REF_502[_name]
REF_503(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_369(bool) = _laff != 0
TMP_370(bool) = _laff != _pID
TMP_371(bool) = TMP_369 && TMP_370
CONDITION TMP_371"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_504(F3Ddatasets.Player) -> plyr_[_pID]
REF_505(uint256) -> REF_504.laff
REF_505(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_506(uint256) -> _eventData_.compressedData
REF_507(uint256) -> _eventData_.compressedData
TMP_372(uint256) = REF_507 + 1
REF_506(uint256) (->_eventData_) := TMP_372(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2777.sol-FoMo3DWorld-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 50

IRs:
TMP_450(uint256) = _eth / 50
_com(uint256) := TMP_450(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_451(uint256) = _eth / 10
_aff(uint256) := TMP_451(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_452(bool) = _affID != _pID
REF_615(F3Ddatasets.Player) -> plyr_[_affID]
REF_616(bytes32) -> REF_615.name
TMP_453(bool) = REF_616 != 
TMP_454(bool) = TMP_452 && TMP_453
CONDITION TMP_454"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_617(F3Ddatasets.Player) -> plyr_[_affID]
REF_618(uint256) -> REF_617.aff
REF_620(F3Ddatasets.Player) -> plyr_[_affID]
REF_621(uint256) -> REF_620.aff
TMP_455(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_621'] 
REF_618(uint256) (->plyr_) := TMP_455(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_623(F3Ddatasets.Player) -> plyr_[_affID]
REF_624(address) -> REF_623.addr
REF_625(F3Ddatasets.Player) -> plyr_[_affID]
REF_626(bytes32) -> REF_625.name
Emit onAffiliatePayout(_affID,REF_624,REF_626,_rID,_pID,_aff,now)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_com = _com.add(_aff)

IRs:
TMP_457(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_aff'] 
_com(uint256) := TMP_457(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_mkt = _eth.mul(fees_[_team].marketing) / 100

IRs:
REF_629(F3Ddatasets.TeamFee) -> fees_[_team]
REF_630(uint256) -> REF_629.marketing
TMP_458(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_630'] 
TMP_459(uint256) = TMP_458 / 100
_mkt(uint256) := TMP_459(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_com = _com.add(_mkt)

IRs:
TMP_460(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_mkt'] 
_com(uint256) := TMP_460(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owner.transfer(_com)

IRs:
Transfer dest:owner value:_com"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.mktAmount = _mkt

IRs:
REF_633(uint256) -> _eventData_.mktAmount
REF_633(uint256) (->_eventData_) := _mkt(uint256)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2777.sol-FoMo3DWorld-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_641(F3Ddatasets.TeamFee) -> fees_[_team]
REF_642(uint256) -> REF_641.gen
TMP_465(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_642'] 
TMP_466(uint256) = TMP_465 / 100
_gen(uint256) := TMP_466(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_467(uint256) = _eth / 100
_air(uint256) := TMP_467(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_468(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_468(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
cut = (fees_[_team].marketing).add(13)

IRs:
REF_644(F3Ddatasets.TeamFee) -> fees_[_team]
REF_645(uint256) -> REF_644.marketing
TMP_469(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_645', '13'] 
cut(uint256) := TMP_469(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eth = _eth.sub(_eth.mul(cut) / 100)

IRs:
TMP_470(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'cut'] 
TMP_471(uint256) = TMP_470 / 100
TMP_472(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_471'] 
_eth(uint256) := TMP_472(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_473(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_474(uint256) = INTERNAL_CALL, FoMo3DWorld.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_474(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_dust > 0

IRs:
TMP_475(bool) = _dust > 0
CONDITION TMP_475"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_476(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_476(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_651(F3Ddatasets.Round) -> round_[_rID]
REF_652(uint256) -> REF_651.pot
TMP_477(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_655(F3Ddatasets.Round) -> round_[_rID]
REF_656(uint256) -> REF_655.pot
TMP_478(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_477', 'REF_656'] 
REF_652(uint256) (->round_) := TMP_478(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_657(uint256) -> _eventData_.genAmount
REF_659(uint256) -> _eventData_.genAmount
TMP_479(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_659'] 
REF_657(uint256) (->_eventData_) := TMP_479(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_660(uint256) -> _eventData_.potAmount
REF_660(uint256) (->_eventData_) := _pot(uint256)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2777.sol-FoMo3DWorld-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_516(F3Ddatasets.Round) -> round_[_rID]
REF_517(uint256) -> REF_516.plyr
_winPID(uint256) := REF_517(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_518(F3Ddatasets.Round) -> round_[_rID]
REF_519(uint256) -> REF_518.team
_winTID(uint256) := REF_519(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_520(F3Ddatasets.Round) -> round_[_rID]
REF_521(uint256) -> REF_520.pot
_pot(uint256) := REF_521(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_379(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_380(uint256) = TMP_379 / 100
_win(uint256) := TMP_380(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_381(uint256) = _pot / 50
_com(uint256) := TMP_381(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_524(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_525(uint256) -> REF_524.gen
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_525'] 
TMP_383(uint256) = TMP_382 / 100
_gen(uint256) := TMP_383(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_mkt = (_pot.mul(potSplit_[_winTID].marketing)) / 100

IRs:
REF_527(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_528(uint256) -> REF_527.marketing
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_528'] 
TMP_385(uint256) = TMP_384 / 100
_mkt(uint256) := TMP_385(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = ((_pot.sub(_win)).sub(_com)).sub(_gen).sub(_mkt)

IRs:
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_386', '_com'] 
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_387', '_gen'] 
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_388', '_mkt'] 
_res(uint256) := TMP_389(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_534(F3Ddatasets.Round) -> round_[_rID]
REF_535(uint256) -> REF_534.keys
TMP_391(uint256) = TMP_390 / REF_535
_ppt(uint256) := TMP_391(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_538(F3Ddatasets.Round) -> round_[_rID]
REF_539(uint256) -> REF_538.keys
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_539'] 
TMP_393(uint256) = TMP_392 / 1000000000000000000
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_393'] 
_dust(uint256) := TMP_394(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_395(bool) = _dust > 0
CONDITION TMP_395"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_396(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_397(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_542(F3Ddatasets.Player) -> plyr_[_winPID]
REF_543(uint256) -> REF_542.win
REF_545(F3Ddatasets.Player) -> plyr_[_winPID]
REF_546(uint256) -> REF_545.win
TMP_398(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_546'] 
REF_543(uint256) (->plyr_) := TMP_398(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_com = _com.add(_mkt)

IRs:
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_com', '_mkt'] 
_com(uint256) := TMP_399(uint256)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
! owner.send(_com)

IRs:
TMP_400 = SEND dest:owner value:_com
TMP_401 = UnaryType.BANG TMP_400 
CONDITION TMP_401"];
18->19[label="True"];
18->21[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_com = 0

IRs:
_com(uint256) := 0(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_res = _res.add(_com)

IRs:
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_com'] 
_res(uint256) := TMP_402(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_550(F3Ddatasets.Round) -> round_[_rID]
REF_551(uint256) -> REF_550.mask
REF_553(F3Ddatasets.Round) -> round_[_rID]
REF_554(uint256) -> REF_553.mask
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_554'] 
REF_551(uint256) (->round_) := TMP_403(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_555(uint256) -> _eventData_.compressedData
REF_556(uint256) -> _eventData_.compressedData
REF_557(F3Ddatasets.Round) -> round_[_rID]
REF_558(uint256) -> REF_557.end
TMP_404(uint256) = REF_558 * 1000000
TMP_405(uint256) = REF_556 + TMP_404
REF_555(uint256) (->_eventData_) := TMP_405(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_559(uint256) -> _eventData_.compressedIDs
REF_560(uint256) -> _eventData_.compressedIDs
TMP_406(uint256) = _winPID * 100000000000000000000000000
TMP_407(uint256) = REF_560 + TMP_406
TMP_408(uint256) = _winTID * 100000000000000000
TMP_409(uint256) = TMP_407 + TMP_408
REF_559(uint256) (->_eventData_) := TMP_409(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_561(address) -> _eventData_.winnerAddr
REF_562(F3Ddatasets.Player) -> plyr_[_winPID]
REF_563(address) -> REF_562.addr
REF_561(address) (->_eventData_) := REF_563(address)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_564(bytes32) -> _eventData_.winnerName
REF_565(F3Ddatasets.Player) -> plyr_[_winPID]
REF_566(bytes32) -> REF_565.name
REF_564(bytes32) (->_eventData_) := REF_566(bytes32)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_567(uint256) -> _eventData_.amountWon
REF_567(uint256) (->_eventData_) := _win(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_568(uint256) -> _eventData_.genAmount
REF_568(uint256) (->_eventData_) := _gen(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.mktAmount = _mkt

IRs:
REF_569(uint256) -> _eventData_.mktAmount
REF_569(uint256) (->_eventData_) := _mkt(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_570(uint256) -> _eventData_.newPot
REF_570(uint256) (->_eventData_) := _res(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
rID_ ++

IRs:
TMP_410(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_rID ++

IRs:
TMP_411(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_571(F3Ddatasets.Round) -> round_[_rID]
REF_572(uint256) -> REF_571.strt
REF_572(uint256) (->round_) := now(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_573(F3Ddatasets.Round) -> round_[_rID]
REF_574(uint256) -> REF_573.end
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_413(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_412', 'rndGap_'] 
REF_574(uint256) (->round_) := TMP_413(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_577(F3Ddatasets.Round) -> round_[_rID]
REF_578(uint256) -> REF_577.pot
REF_578(uint256) (->round_) := _res(uint256)"];
35->36;
36[label="Node Type: RETURN 36

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2777.sol-FoMo3DWorld-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_701(uint256) -> _eventData_.compressedData
REF_702(uint256) -> _eventData_.compressedData
TMP_496(uint256) = now * 1000000000000000000
TMP_497(uint256) = REF_702 + TMP_496
TMP_498(uint256) = _team * 100000000000000000000000000000
TMP_499(uint256) = TMP_497 + TMP_498
REF_701(uint256) (->_eventData_) := TMP_499(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_703(uint256) -> _eventData_.compressedIDs
REF_704(uint256) -> _eventData_.compressedIDs
TMP_500(uint256) = REF_704 + _pID
TMP_501(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_502(uint256) = TMP_500 + TMP_501
REF_703(uint256) (->_eventData_) := TMP_502(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.mktAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_706(uint256) -> _eventData_.compressedData
REF_707(uint256) -> _eventData_.compressedIDs
REF_708(F3Ddatasets.Player) -> plyr_[_pID]
REF_709(bytes32) -> REF_708.name
REF_710(address) -> _eventData_.winnerAddr
REF_711(bytes32) -> _eventData_.winnerName
REF_712(uint256) -> _eventData_.amountWon
REF_713(uint256) -> _eventData_.newPot
REF_714(uint256) -> _eventData_.mktAmount
REF_715(uint256) -> _eventData_.genAmount
REF_716(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_706,REF_707,REF_709,msg.sender,_eth,_keys,REF_710,REF_711,REF_712,REF_713,REF_714,REF_715,REF_716,airDropPot_)"];
}
// Function: 2777.sol-FoMo3DWorld-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_96(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DWorld.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_96(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_35(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_35(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_36(F3Ddatasets.Player) -> plyr_[_pID]
REF_37(uint256) -> REF_36.laff
INTERNAL_CALL, FoMo3DWorld.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_37,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DWorld.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DWorld.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3DWorld.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 2777.sol-FoMo3DWorld-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_148(F3Ddatasets.Round) -> round_[_rID]
REF_149(uint256) -> REF_148.strt
TMP_191(uint256) = REF_149 + rndGap_
TMP_192(bool) = _now > TMP_191
REF_150(F3Ddatasets.Round) -> round_[_rID]
REF_151(uint256) -> REF_150.end
TMP_193(bool) = _now <= REF_151
REF_152(F3Ddatasets.Round) -> round_[_rID]
REF_153(uint256) -> REF_152.end
TMP_194(bool) = _now > REF_153
REF_154(F3Ddatasets.Round) -> round_[_rID]
REF_155(uint256) -> REF_154.plyr
TMP_195(bool) = REF_155 == 0
TMP_196(bool) = TMP_194 && TMP_195
TMP_197(bool) = TMP_193 || TMP_196
TMP_198(bool) = TMP_192 && TMP_197
CONDITION TMP_198"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_156(F3Ddatasets.Round) -> round_[_rID]
REF_157(uint256) -> REF_156.keys
TMP_199(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_157', '1000000000000000000'] 
TMP_200(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_199', '1000000000000000000'] 
RETURN TMP_200"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 2777.sol-FoMo3DWorld-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_230(F3Ddatasets.Round) -> round_[_rID]
REF_231(uint256) -> REF_230.ico
REF_232(F3Ddatasets.Round) -> round_[_rID]
REF_233(uint256) -> REF_232.keys
REF_234(F3Ddatasets.Round) -> round_[_rID]
REF_235(uint256) -> REF_234.end
REF_236(F3Ddatasets.Round) -> round_[_rID]
REF_237(uint256) -> REF_236.strt
REF_238(F3Ddatasets.Round) -> round_[_rID]
REF_239(uint256) -> REF_238.pot
REF_240(F3Ddatasets.Round) -> round_[_rID]
REF_241(uint256) -> REF_240.team
REF_242(F3Ddatasets.Round) -> round_[_rID]
REF_243(uint256) -> REF_242.plyr
TMP_231(uint256) = REF_243 * 10
TMP_232(uint256) = REF_241 + TMP_231
REF_244(F3Ddatasets.Round) -> round_[_rID]
REF_245(uint256) -> REF_244.plyr
REF_246(F3Ddatasets.Player) -> plyr_[REF_245]
REF_247(address) -> REF_246.addr
REF_248(F3Ddatasets.Round) -> round_[_rID]
REF_249(uint256) -> REF_248.plyr
REF_250(F3Ddatasets.Player) -> plyr_[REF_249]
REF_251(bytes32) -> REF_250.name
REF_252(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_253(uint256) -> REF_252[0]
REF_254(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_255(uint256) -> REF_254[1]
REF_256(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_257(uint256) -> REF_256[2]
REF_258(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_259(uint256) -> REF_258[3]
TMP_233(uint256) = airDropPot_ * 1000
TMP_234(uint256) = airDropTracker_ + TMP_233
RETURN REF_231,_rID,REF_233,REF_235,REF_237,REF_239,TMP_232,REF_247,REF_251,REF_253,REF_255,REF_257,REF_259,TMP_234"];
}
// Function: 2777.sol-FoMo3DWorld-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_235 = CONVERT 0 to address
TMP_236(bool) = _addr == TMP_235
CONDITION TMP_236"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_237(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_260(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_260(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_261(F3Ddatasets.Player) -> plyr_[_pID]
REF_262(bytes32) -> REF_261.name
REF_263(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_264(F3Ddatasets.PlayerRounds) -> REF_263[_rID]
REF_265(uint256) -> REF_264.keys
REF_266(F3Ddatasets.Player) -> plyr_[_pID]
REF_267(uint256) -> REF_266.win
REF_268(F3Ddatasets.Player) -> plyr_[_pID]
REF_269(uint256) -> REF_268.gen
REF_271(F3Ddatasets.Player) -> plyr_[_pID]
REF_272(uint256) -> REF_271.lrnd
TMP_238(uint256) = INTERNAL_CALL, FoMo3DWorld.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_272)
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_269', 'TMP_238'] 
REF_273(F3Ddatasets.Player) -> plyr_[_pID]
REF_274(uint256) -> REF_273.aff
REF_275(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_276(F3Ddatasets.PlayerRounds) -> REF_275[_rID]
REF_277(uint256) -> REF_276.eth
RETURN _pID,REF_262,REF_265,REF_267,TMP_239,REF_274,REF_277"];
}
// Function: 2777.sol-FoMo3DWorld-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_170(F3Ddatasets.Round) -> round_[_rID]
REF_171(uint256) -> REF_170.end
TMP_207(bool) = now > REF_171
REF_172(F3Ddatasets.Round) -> round_[_rID]
REF_173(bool) -> REF_172.ended
TMP_208(bool) = REF_173 == False
TMP_209(bool) = TMP_207 && TMP_208
REF_174(F3Ddatasets.Round) -> round_[_rID]
REF_175(uint256) -> REF_174.plyr
TMP_210(bool) = REF_175 != 0
TMP_211(bool) = TMP_209 && TMP_210
CONDITION TMP_211"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_176(F3Ddatasets.Round) -> round_[_rID]
REF_177(uint256) -> REF_176.plyr
TMP_212(bool) = REF_177 == _pID
CONDITION TMP_212"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_178(F3Ddatasets.Player) -> plyr_[_pID]
REF_179(uint256) -> REF_178.win
REF_181(F3Ddatasets.Round) -> round_[_rID]
REF_182(uint256) -> REF_181.pot
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_182', '48'] 
TMP_214(uint256) = TMP_213 / 100
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_179', 'TMP_214'] 
REF_184(F3Ddatasets.Player) -> plyr_[_pID]
REF_185(uint256) -> REF_184.gen
TMP_216(uint256) = INTERNAL_CALL, FoMo3DWorld.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_188(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_189(F3Ddatasets.PlayerRounds) -> REF_188[_rID]
REF_190(uint256) -> REF_189.mask
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_216', 'REF_190'] 
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_185', 'TMP_217'] 
REF_191(F3Ddatasets.Player) -> plyr_[_pID]
REF_192(uint256) -> REF_191.aff
RETURN TMP_215,TMP_218,REF_192"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_193(F3Ddatasets.Player) -> plyr_[_pID]
REF_194(uint256) -> REF_193.win
REF_195(F3Ddatasets.Player) -> plyr_[_pID]
REF_196(uint256) -> REF_195.gen
TMP_219(uint256) = INTERNAL_CALL, FoMo3DWorld.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_199(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_200(F3Ddatasets.PlayerRounds) -> REF_199[_rID]
REF_201(uint256) -> REF_200.mask
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_219', 'REF_201'] 
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_196', 'TMP_220'] 
REF_202(F3Ddatasets.Player) -> plyr_[_pID]
REF_203(uint256) -> REF_202.aff
RETURN REF_194,TMP_221,REF_203"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_204(F3Ddatasets.Player) -> plyr_[_pID]
REF_205(uint256) -> REF_204.win
REF_206(F3Ddatasets.Player) -> plyr_[_pID]
REF_207(uint256) -> REF_206.gen
REF_209(F3Ddatasets.Player) -> plyr_[_pID]
REF_210(uint256) -> REF_209.lrnd
TMP_222(uint256) = INTERNAL_CALL, FoMo3DWorld.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_210)
TMP_223(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_207', 'TMP_222'] 
REF_211(F3Ddatasets.Player) -> plyr_[_pID]
REF_212(uint256) -> REF_211.aff
RETURN REF_205,TMP_223,REF_212"];
}
// Function: 2777.sol-FoMo3DWorld-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_213(F3Ddatasets.Round) -> round_[_rID]
REF_214(uint256) -> REF_213.mask
REF_216(F3Ddatasets.Round) -> round_[_rID]
REF_217(uint256) -> REF_216.pot
REF_219(F3Ddatasets.Round) -> round_[_rID]
REF_220(uint256) -> REF_219.team
REF_221(F3Ddatasets.PotSplit) -> potSplit_[REF_220]
REF_222(uint256) -> REF_221.gen
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_217', 'REF_222'] 
TMP_225(uint256) = TMP_224 / 100
TMP_226(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_225', '1000000000000000000'] 
REF_224(F3Ddatasets.Round) -> round_[_rID]
REF_225(uint256) -> REF_224.keys
TMP_227(uint256) = TMP_226 / REF_225
TMP_228(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_214', 'TMP_227'] 
REF_227(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_228(F3Ddatasets.PlayerRounds) -> REF_227[_rID]
REF_229(uint256) -> REF_228.keys
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_228', 'REF_229'] 
TMP_230(uint256) = TMP_229 / 1000000000000000000
RETURN TMP_230"];
}
// Function: 2777.sol-FoMo3DWorld-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_160(F3Ddatasets.Round) -> round_[_rID]
REF_161(uint256) -> REF_160.end
TMP_201(bool) = _now < REF_161
CONDITION TMP_201"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_162(F3Ddatasets.Round) -> round_[_rID]
REF_163(uint256) -> REF_162.strt
TMP_202(uint256) = REF_163 + rndGap_
TMP_203(bool) = _now > TMP_202
CONDITION TMP_203"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_164(F3Ddatasets.Round) -> round_[_rID]
REF_165(uint256) -> REF_164.end
TMP_204(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_165', '_now'] 
RETURN TMP_204"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_167(F3Ddatasets.Round) -> round_[_rID]
REF_168(uint256) -> REF_167.strt
TMP_205(uint256) = REF_168 + rndGap_
TMP_206(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_205', '_now'] 
RETURN TMP_206"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 2777.sol-FoMo3DWorld-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_455(F3Ddatasets.Round) -> round_[_rID]
REF_456(uint256) -> REF_455.strt
TMP_340(uint256) = REF_456 + rndGap_
TMP_341(bool) = _now > TMP_340
REF_457(F3Ddatasets.Round) -> round_[_rID]
REF_458(uint256) -> REF_457.end
TMP_342(bool) = _now <= REF_458
REF_459(F3Ddatasets.Round) -> round_[_rID]
REF_460(uint256) -> REF_459.end
TMP_343(bool) = _now > REF_460
REF_461(F3Ddatasets.Round) -> round_[_rID]
REF_462(uint256) -> REF_461.plyr
TMP_344(bool) = REF_462 == 0
TMP_345(bool) = TMP_343 && TMP_344
TMP_346(bool) = TMP_342 || TMP_345
TMP_347(bool) = TMP_341 && TMP_346
CONDITION TMP_347"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_463(F3Ddatasets.Round) -> round_[_rID]
REF_464(uint256) -> REF_463.keys
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_464', '_keys'] 
TMP_349(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_348', '_keys'] 
RETURN TMP_349"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_350(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_350"];
}
// Function: 2777.sol-FoMo3DWorld-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_511(bool) = activated_ == True
TMP_512(None) = SOLIDITY_CALL require(bool,string)(TMP_511,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2777.sol-FoMo3DWorld-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_513(bool) = _codeLength == 0
TMP_514(None) = SOLIDITY_CALL require(bool,string)(TMP_513,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 2777.sol-FoMo3DWorld-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_515(bool) = _eth >= 1000000000
TMP_516(None) = SOLIDITY_CALL require(bool,string)(TMP_515,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_517(bool) = _eth <= 100000000000000000000000
TMP_518(None) = SOLIDITY_CALL require(bool,string)(TMP_517,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 2777.sol-FoMo3DWorld-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_508(F3Ddatasets.Player) -> plyr_[_pID]
REF_509(uint256) -> REF_508.lrnd
TMP_376(bool) = REF_509 != 0
CONDITION TMP_376"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_510(F3Ddatasets.Player) -> plyr_[_pID]
REF_511(uint256) -> REF_510.lrnd
INTERNAL_CALL, FoMo3DWorld.updateGenVault(uint256,uint256)(_pID,REF_511)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_512(F3Ddatasets.Player) -> plyr_[_pID]
REF_513(uint256) -> REF_512.lrnd
REF_513(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_514(uint256) -> _eventData_.compressedData
REF_515(uint256) -> _eventData_.compressedData
TMP_378(uint256) = REF_515 + 10
REF_514(uint256) (->_eventData_) := TMP_378(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 2777.sol-FoMo3DWorld-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_509(bool) = msg.sender == owner
TMP_510(None) = SOLIDITY_CALL require(bool)(TMP_509)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2777.sol-FoMo3DWorld-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_462(uint256) = rID_ + 1
_rID(uint256) := TMP_462(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_634(F3Ddatasets.Round) -> round_[_rID]
REF_635(uint256) -> REF_634.pot
REF_636(F3Ddatasets.Round) -> round_[_rID]
REF_637(uint256) -> REF_636.pot
TMP_463(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_637', 'msg.value'] 
REF_635(uint256) (->round_) := TMP_463(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 2777.sol-FoMo3DWorld-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_312(F3Ddatasets.Round) -> round_[_rID]
REF_313(uint256) -> REF_312.strt
TMP_258(uint256) = REF_313 + rndGap_
TMP_259(bool) = _now > TMP_258
REF_314(F3Ddatasets.Round) -> round_[_rID]
REF_315(uint256) -> REF_314.end
TMP_260(bool) = _now <= REF_315
REF_316(F3Ddatasets.Round) -> round_[_rID]
REF_317(uint256) -> REF_316.end
TMP_261(bool) = _now > REF_317
REF_318(F3Ddatasets.Round) -> round_[_rID]
REF_319(uint256) -> REF_318.plyr
TMP_262(bool) = REF_319 == 0
TMP_263(bool) = TMP_261 && TMP_262
TMP_264(bool) = TMP_260 || TMP_263
TMP_265(bool) = TMP_259 && TMP_264
CONDITION TMP_265"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_320(F3Ddatasets.Player) -> plyr_[_pID]
REF_321(uint256) -> REF_320.gen
TMP_266(uint256) = INTERNAL_CALL, FoMo3DWorld.withdrawEarnings(uint256)(_pID)
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_266', '_eth'] 
REF_321(uint256) (->plyr_) := TMP_267(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DWorld.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_323(F3Ddatasets.Round) -> round_[_rID]
REF_324(uint256) -> REF_323.end
TMP_269(bool) = _now > REF_324
REF_325(F3Ddatasets.Round) -> round_[_rID]
REF_326(bool) -> REF_325.ended
TMP_270(bool) = REF_326 == False
TMP_271(bool) = TMP_269 && TMP_270
CONDITION TMP_271"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_327(F3Ddatasets.Round) -> round_[_rID]
REF_328(bool) -> REF_327.ended
REF_328(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_272(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DWorld.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_272(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_329(uint256) -> _eventData_.compressedData
REF_330(uint256) -> _eventData_.compressedData
TMP_273(uint256) = _now * 1000000000000000000
TMP_274(uint256) = REF_330 + TMP_273
REF_329(uint256) (->_eventData_) := TMP_274(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_331(uint256) -> _eventData_.compressedIDs
REF_332(uint256) -> _eventData_.compressedIDs
TMP_275(uint256) = REF_332 + _pID
REF_331(uint256) (->_eventData_) := TMP_275(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.mktAmount,_eventData_.genAmount)

IRs:
REF_334(F3Ddatasets.Player) -> plyr_[_pID]
REF_335(bytes32) -> REF_334.name
REF_336(uint256) -> _eventData_.compressedData
REF_337(uint256) -> _eventData_.compressedIDs
REF_338(address) -> _eventData_.winnerAddr
REF_339(bytes32) -> _eventData_.winnerName
REF_340(uint256) -> _eventData_.amountWon
REF_341(uint256) -> _eventData_.newPot
REF_342(uint256) -> _eventData_.mktAmount
REF_343(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_335,REF_336,REF_337,REF_338,REF_339,REF_340,REF_341,REF_342,REF_343)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 2777.sol-FoMo3DWorld-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_70(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_70(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_141 = CONVERT 0 to address
TMP_142(bool) = _affCode == TMP_141
TMP_143(bool) = _affCode == msg.sender
TMP_144(bool) = TMP_142 || TMP_143
CONDITION TMP_144"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_71(F3Ddatasets.Player) -> plyr_[_pID]
REF_72(uint256) -> REF_71.laff
_affID(uint256) := REF_72(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_73(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_73(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_74(F3Ddatasets.Player) -> plyr_[_pID]
REF_75(uint256) -> REF_74.laff
TMP_145(bool) = _affID != REF_75
CONDITION TMP_145"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_76(F3Ddatasets.Player) -> plyr_[_pID]
REF_77(uint256) -> REF_76.laff
REF_77(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_146(uint256) = INTERNAL_CALL, FoMo3DWorld.verifyTeam(uint256)(_team)
_team(uint256) := TMP_146(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DWorld.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DWorld.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DWorld.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DWorld.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 2777.sol-FoMo3DWorld-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_63(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_63(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_132(bool) = _affCode == 0
TMP_133(bool) = _affCode == _pID
TMP_134(bool) = TMP_132 || TMP_133
CONDITION TMP_134"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_64(F3Ddatasets.Player) -> plyr_[_pID]
REF_65(uint256) -> REF_64.laff
_affCode(uint256) := REF_65(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_66(F3Ddatasets.Player) -> plyr_[_pID]
REF_67(uint256) -> REF_66.laff
TMP_135(bool) = _affCode != REF_67
CONDITION TMP_135"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_68(F3Ddatasets.Player) -> plyr_[_pID]
REF_69(uint256) -> REF_68.laff
REF_69(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_136(uint256) = INTERNAL_CALL, FoMo3DWorld.verifyTeam(uint256)(_team)
_team(uint256) := TMP_136(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DWorld.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DWorld.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DWorld.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DWorld.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 2777.sol-FoMo3DWorld-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_78(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_78(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_151(bool) = _affCode == 
REF_79(F3Ddatasets.Player) -> plyr_[_pID]
REF_80(bytes32) -> REF_79.name
TMP_152(bool) = _affCode == REF_80
TMP_153(bool) = TMP_151 || TMP_152
CONDITION TMP_153"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_81(F3Ddatasets.Player) -> plyr_[_pID]
REF_82(uint256) -> REF_81.laff
_affID(uint256) := REF_82(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_83(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_83(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_84(F3Ddatasets.Player) -> plyr_[_pID]
REF_85(uint256) -> REF_84.laff
TMP_154(bool) = _affID != REF_85
CONDITION TMP_154"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_86(F3Ddatasets.Player) -> plyr_[_pID]
REF_87(uint256) -> REF_86.laff
REF_87(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_155(uint256) = INTERNAL_CALL, FoMo3DWorld.verifyTeam(uint256)(_team)
_team(uint256) := TMP_155(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3DWorld.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DWorld.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DWorld.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3DWorld.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 2777.sol-FoMo3DWorld-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_351 = CONVERT PlayerBook to address
TMP_352(bool) = msg.sender == TMP_351
TMP_353(None) = SOLIDITY_CALL require(bool,string)(TMP_352,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_468(uint256) -> pIDxAddr_[_addr]
TMP_354(bool) = REF_468 != _pID
CONDITION TMP_354"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_469(uint256) -> pIDxAddr_[_addr]
REF_469(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_470(uint256) -> pIDxName_[_name]
TMP_355(bool) = REF_470 != _pID
CONDITION TMP_355"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_471(uint256) -> pIDxName_[_name]
REF_471(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_472(F3Ddatasets.Player) -> plyr_[_pID]
REF_473(address) -> REF_472.addr
TMP_356(bool) = REF_473 != _addr
CONDITION TMP_356"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_474(F3Ddatasets.Player) -> plyr_[_pID]
REF_475(address) -> REF_474.addr
REF_475(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_476(F3Ddatasets.Player) -> plyr_[_pID]
REF_477(bytes32) -> REF_476.name
TMP_357(bool) = REF_477 != _name
CONDITION TMP_357"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_478(F3Ddatasets.Player) -> plyr_[_pID]
REF_479(bytes32) -> REF_478.name
REF_479(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_480(F3Ddatasets.Player) -> plyr_[_pID]
REF_481(uint256) -> REF_480.laff
TMP_358(bool) = REF_481 != _laff
CONDITION TMP_358"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_482(F3Ddatasets.Player) -> plyr_[_pID]
REF_483(uint256) -> REF_482.laff
REF_483(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_484(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_485(bool) -> REF_484[_name]
TMP_359(bool) = REF_485 == False
CONDITION TMP_359"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_486(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_487(bool) -> REF_486[_name]
REF_487(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 2777.sol-FoMo3DWorld-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_360 = CONVERT PlayerBook to address
TMP_361(bool) = msg.sender == TMP_360
TMP_362(None) = SOLIDITY_CALL require(bool,string)(TMP_361,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_488(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_489(bool) -> REF_488[_name]
TMP_363(bool) = REF_489 == False
CONDITION TMP_363"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_490(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_491(bool) -> REF_490[_name]
REF_491(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 2777.sol-FoMo3DWorld-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_179(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_179(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_124(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_124(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_126(F3Ddatasets.Player) -> plyr_[_affID]
REF_127(address) -> REF_126.addr
REF_128(F3Ddatasets.Player) -> plyr_[_affID]
REF_129(bytes32) -> REF_128.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_127,REF_129,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DWorld.isHuman()()"];
9->1;
}
// Function: 2777.sol-FoMo3DWorld-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_183(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_183(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_133(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_133(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_135(F3Ddatasets.Player) -> plyr_[_affID]
REF_136(address) -> REF_135.addr
REF_137(F3Ddatasets.Player) -> plyr_[_affID]
REF_138(bytes32) -> REF_137.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_136,REF_138,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DWorld.isHuman()()"];
9->1;
}
// Function: 2777.sol-FoMo3DWorld-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_187(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_187(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_142(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_142(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_144(F3Ddatasets.Player) -> plyr_[_affID]
REF_145(address) -> REF_144.addr
REF_146(F3Ddatasets.Player) -> plyr_[_affID]
REF_147(bytes32) -> REF_146.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_145,REF_147,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DWorld.isHuman()()"];
9->1;
}
// Function: 2777.sol-FoMo3DWorld-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_80 = CONVERT 0 to address
owner(address) := TMP_80(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2777.sol-FoMo3DWorld-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PlayerBook = PlayerBookInterface(0x789C537cE585595596D3905f401235f5A85B11d7)

IRs:
TMP_508 = CONVERT 688565081569662952847355898908075120374566293975 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_508(PlayerBookInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = FoMo3D World

IRs:
name(string) := FoMo3D World(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = F3DW

IRs:
symbol(string) := F3DW(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndGap_ = 0

IRs:
rndGap_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
}
// Function: 2777.sol-FoMo3DWorld-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 2777.sol-FoMo3DWorld-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2777.sol-FoMo3DWorld-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_414(uint256) = INTERNAL_CALL, FoMo3DWorld.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_414(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_415(bool) = _earnings > 0
CONDITION TMP_415"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_579(F3Ddatasets.Player) -> plyr_[_pID]
REF_580(uint256) -> REF_579.gen
REF_582(F3Ddatasets.Player) -> plyr_[_pID]
REF_583(uint256) -> REF_582.gen
TMP_416(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_583'] 
REF_580(uint256) (->plyr_) := TMP_416(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_584(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_585(F3Ddatasets.PlayerRounds) -> REF_584[_rIDlast]
REF_586(uint256) -> REF_585.mask
REF_588(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_589(F3Ddatasets.PlayerRounds) -> REF_588[_rIDlast]
REF_590(uint256) -> REF_589.mask
TMP_417(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_590'] 
REF_586(uint256) (->plyrRnds_) := TMP_417(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 2777.sol-FoMo3DWorld-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_480(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_662(F3Ddatasets.Round) -> round_[_rID]
REF_663(uint256) -> REF_662.keys
TMP_481(uint256) = TMP_480 / REF_663
_ppt(uint256) := TMP_481(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_664(F3Ddatasets.Round) -> round_[_rID]
REF_665(uint256) -> REF_664.mask
REF_667(F3Ddatasets.Round) -> round_[_rID]
REF_668(uint256) -> REF_667.mask
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_668'] 
REF_665(uint256) (->round_) := TMP_482(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_484(uint256) = TMP_483 / 1000000000000000000
_pearn(uint256) := TMP_484(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_670(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_671(F3Ddatasets.PlayerRounds) -> REF_670[_rID]
REF_672(uint256) -> REF_671.mask
REF_673(F3Ddatasets.Round) -> round_[_rID]
REF_674(uint256) -> REF_673.mask
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_674', '_keys'] 
TMP_486(uint256) = TMP_485 / 1000000000000000000
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_486', '_pearn'] 
REF_678(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_679(F3Ddatasets.PlayerRounds) -> REF_678[_rID]
REF_680(uint256) -> REF_679.mask
TMP_488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_487', 'REF_680'] 
REF_672(uint256) (->plyrRnds_) := TMP_488(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_683(F3Ddatasets.Round) -> round_[_rID]
REF_684(uint256) -> REF_683.keys
TMP_489(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_684'] 
TMP_490(uint256) = TMP_489 / 1000000000000000000
TMP_491(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_490'] 
RETURN TMP_491"];
}
// Function: 2777.sol-FoMo3DWorld-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_591(F3Ddatasets.Round) -> round_[_rID]
REF_592(uint256) -> REF_591.end
TMP_418(bool) = _now > REF_592
REF_593(F3Ddatasets.Round) -> round_[_rID]
REF_594(uint256) -> REF_593.plyr
TMP_419(bool) = REF_594 == 0
TMP_420(bool) = TMP_418 && TMP_419
CONDITION TMP_420"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_421(uint256) = _keys / 1000000000000000000
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_421', 'rndInc_'] 
TMP_423(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_422', '_now'] 
_newTime(uint256) := TMP_423(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_424(uint256) = _keys / 1000000000000000000
TMP_425(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_424', 'rndInc_'] 
REF_599(F3Ddatasets.Round) -> round_[_rID]
REF_600(uint256) -> REF_599.end
TMP_426(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_425', 'REF_600'] 
_newTime(uint256) := TMP_426(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_427(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_428(bool) = _newTime < TMP_427
CONDITION TMP_428"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_602(F3Ddatasets.Round) -> round_[_rID]
REF_603(uint256) -> REF_602.end
REF_603(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_604(F3Ddatasets.Round) -> round_[_rID]
REF_605(uint256) -> REF_604.end
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_605(uint256) (->round_) := TMP_429(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 2777.sol-FoMo3DWorld-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_373(bool) = _team < 0
TMP_374(bool) = _team > 3
TMP_375(bool) = TMP_373 || TMP_374
CONDITION TMP_375"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 2777.sol-FoMo3DWorld-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_88(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_88(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_89(F3Ddatasets.Round) -> round_[_rID]
REF_90(uint256) -> REF_89.end
TMP_160(bool) = _now > REF_90
REF_91(F3Ddatasets.Round) -> round_[_rID]
REF_92(bool) -> REF_91.ended
TMP_161(bool) = REF_92 == False
TMP_162(bool) = TMP_160 && TMP_161
REF_93(F3Ddatasets.Round) -> round_[_rID]
REF_94(uint256) -> REF_93.plyr
TMP_163(bool) = REF_94 != 0
TMP_164(bool) = TMP_162 && TMP_163
CONDITION TMP_164"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_95(F3Ddatasets.Round) -> round_[_rID]
REF_96(bool) -> REF_95.ended
REF_96(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_165(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3DWorld.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_165(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_166(uint256) = INTERNAL_CALL, FoMo3DWorld.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_166(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_167(bool) = _eth > 0
CONDITION TMP_167"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_97(F3Ddatasets.Player) -> plyr_[_pID]
REF_98(address) -> REF_97.addr
Transfer dest:REF_98 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_100(uint256) -> _eventData_.compressedData
REF_101(uint256) -> _eventData_.compressedData
TMP_169(uint256) = _now * 1000000000000000000
TMP_170(uint256) = REF_101 + TMP_169
REF_100(uint256) (->_eventData_) := TMP_170(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_102(uint256) -> _eventData_.compressedIDs
REF_103(uint256) -> _eventData_.compressedIDs
TMP_171(uint256) = REF_103 + _pID
REF_102(uint256) (->_eventData_) := TMP_171(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.mktAmount,_eventData_.genAmount)

IRs:
REF_105(F3Ddatasets.Player) -> plyr_[_pID]
REF_106(bytes32) -> REF_105.name
REF_107(uint256) -> _eventData_.compressedData
REF_108(uint256) -> _eventData_.compressedIDs
REF_109(address) -> _eventData_.winnerAddr
REF_110(bytes32) -> _eventData_.winnerName
REF_111(uint256) -> _eventData_.amountWon
REF_112(uint256) -> _eventData_.newPot
REF_113(uint256) -> _eventData_.mktAmount
REF_114(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_106,_eth,REF_107,REF_108,REF_109,REF_110,REF_111,REF_112,REF_113,REF_114)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_173(uint256) = INTERNAL_CALL, FoMo3DWorld.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_173(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_174(bool) = _eth > 0
CONDITION TMP_174"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_115(F3Ddatasets.Player) -> plyr_[_pID]
REF_116(address) -> REF_115.addr
Transfer dest:REF_116 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_119(F3Ddatasets.Player) -> plyr_[_pID]
REF_120(bytes32) -> REF_119.name
Emit onWithdraw(_pID,msg.sender,REF_120,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3DWorld.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3DWorld.isHuman()()"];
23->1;
}
// Function: 2777.sol-FoMo3DWorld-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_685(F3Ddatasets.Player) -> plyr_[_pID]
REF_686(uint256) -> REF_685.lrnd
INTERNAL_CALL, FoMo3DWorld.updateGenVault(uint256,uint256)(_pID,REF_686)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_687(F3Ddatasets.Player) -> plyr_[_pID]
REF_688(uint256) -> REF_687.win
REF_690(F3Ddatasets.Player) -> plyr_[_pID]
REF_691(uint256) -> REF_690.gen
TMP_493(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_688', 'REF_691'] 
REF_693(F3Ddatasets.Player) -> plyr_[_pID]
REF_694(uint256) -> REF_693.aff
TMP_494(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_493', 'REF_694'] 
_earnings(uint256) := TMP_494(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_495(bool) = _earnings > 0
CONDITION TMP_495"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_695(F3Ddatasets.Player) -> plyr_[_pID]
REF_696(uint256) -> REF_695.win
REF_696(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_697(F3Ddatasets.Player) -> plyr_[_pID]
REF_698(uint256) -> REF_697.gen
REF_698(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_699(F3Ddatasets.Player) -> plyr_[_pID]
REF_700(uint256) -> REF_699.aff
REF_700(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 2777.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_23 = CONVERT _input to bytes
_temp(bytes) := TMP_23(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_0 -> LENGTH _temp
_length(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_24(bool) = _length <= 32
TMP_25(bool) = _length > 0
TMP_26(bool) = TMP_24 && TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_1(None) -> _temp[0]
TMP_28(bool) = REF_1 != 32
TMP_29(uint256) = _length - 1
REF_2(None) -> _temp[TMP_29]
TMP_30(bool) = REF_2 != 32
TMP_31(bool) = TMP_28 && TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_3(None) -> _temp[0]
TMP_33(bool) = REF_3 == 48
CONDITION TMP_33"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_4(None) -> _temp[1]
TMP_34(bool) = REF_4 != 120
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_5(None) -> _temp[1]
TMP_36(bool) = REF_5 != 88
TMP_37(None) = SOLIDITY_CALL require(bool,string)(TMP_36,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_38(bool) = i < _length
CONDITION TMP_38"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_6(None) -> _temp[i]
TMP_39(bool) = REF_6 > 64
REF_7(None) -> _temp[i]
TMP_40(bool) = REF_7 < 91
TMP_41(bool) = TMP_39 && TMP_40
CONDITION TMP_41"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_8(bytes1) -> _temp[i]
REF_9(None) -> _temp[i]
TMP_42 = CONVERT REF_9 to uint256
TMP_43(uint256) = TMP_42 + 32
TMP_44 = CONVERT TMP_43 to bytes1
REF_8(bytes1) (->_temp) := TMP_44(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_45(bool) = _hasNonNumber == False
CONDITION TMP_45"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_10(None) -> _temp[i]
TMP_46(bool) = REF_10 == 32
REF_11(None) -> _temp[i]
TMP_47(bool) = REF_11 > 96
REF_12(None) -> _temp[i]
TMP_48(bool) = REF_12 < 123
TMP_49(bool) = TMP_47 && TMP_48
TMP_50(bool) = TMP_46 || TMP_49
REF_13(None) -> _temp[i]
TMP_51(bool) = REF_13 > 47
REF_14(None) -> _temp[i]
TMP_52(bool) = REF_14 < 58
TMP_53(bool) = TMP_51 && TMP_52
TMP_54(bool) = TMP_50 || TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_15(None) -> _temp[i]
TMP_56(bool) = REF_15 == 32
CONDITION TMP_56"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_57(uint256) = i + 1
REF_16(None) -> _temp[TMP_57]
TMP_58(bool) = REF_16 != 32
TMP_59(None) = SOLIDITY_CALL require(bool,string)(TMP_58,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_60(bool) = _hasNonNumber == False
REF_17(None) -> _temp[i]
TMP_61(bool) = REF_17 < 48
REF_18(None) -> _temp[i]
TMP_62(bool) = REF_18 > 57
TMP_63(bool) = TMP_61 || TMP_62
TMP_64(bool) = TMP_60 && TMP_63
CONDITION TMP_64"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_65(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_66(bool) = _hasNonNumber == True
TMP_67(None) = SOLIDITY_CALL require(bool,string)(TMP_66,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 2777.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_73 = CONVERT 0 to address
TMP_74(bool) = _newOwner != TMP_73
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 2777.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 2777.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_77(bool) = msg.sender == owner
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2777.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_69 = CONVERT 0 to address
owner(address) := TMP_69(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 2777.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 2777.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 2777.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 2777.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 2777.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 2777.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 2777.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 2777.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 2777.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 2777.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_8(uint256) = a + b
c(uint256) := TMP_8(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_9(bool) = c >= a
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2777.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2777.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_18(bool) = x == 0
CONDITION TMP_18"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_19(bool) = y == 0
CONDITION TMP_19"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_20(bool) = i < y
CONDITION TMP_20"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_21(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_21(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_22(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 2777.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_17(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_17"];
}
// Function: 2777.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_11(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_12(uint256) = TMP_11 / 2
z(uint256) := TMP_12(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_13(bool) = z < y
CONDITION TMP_13"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_14(uint256) = x / z
TMP_15(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_14,z)
TMP_16(uint256) = TMP_15 / 2
z(uint256) := TMP_16(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 2777.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_5(bool) = b <= a
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_7(uint256) = a - b
RETURN TMP_7"];
}
}
