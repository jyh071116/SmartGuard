digraph G {
// Function: 2814.sol-EthertoteToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2814.sol-EthertoteToken-thisContractAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2814.sol-EthertoteToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2814.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2814.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 2814.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 2814.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 2814.sol-TokenSale-amountRaised()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
weiRaised

IRs:
RETURN weiRaised"];
}
// Function: 2814.sol-TokenSale-burnUnsoldTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenSaleIsPaused == false)

IRs:
TMP_28(bool) = tokenSaleIsPaused == False
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(tokenSaleHasFinished() == true)

IRs:
TMP_30(bool) = INTERNAL_CALL, TokenSale.tokenSaleHasFinished()()
TMP_31(bool) = TMP_30 == True
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token.transfer(tokenBurnAddress,tokenSaleTokenBalance())

IRs:
TMP_33(uint256) = INTERNAL_CALL, TokenSale.tokenSaleTokenBalance()()
HIGH_LEVEL_CALL, dest:token(EthertoteToken), function:transfer, arguments:['tokenBurnAddress', 'TMP_33']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
TokensBurned(tokens sent to TokenBurn contract,now)

IRs:
Emit TokensBurned(tokens sent to TokenBurn contract,now)"];
}
// Function: 2814.sol-TokenSale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(openingTime <= block.timestamp)

IRs:
TMP_51(bool) = openingTime <= block.timestamp
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(block.timestamp < closingTime)

IRs:
TMP_53(bool) = block.timestamp < closingTime
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value >= minSpend)

IRs:
TMP_55(bool) = msg.value >= minSpend
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(msg.value <= maxSpend)

IRs:
TMP_57(bool) = msg.value <= maxSpend
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(tokenSaleTokenBalance() > 0)

IRs:
TMP_59(uint256) = INTERNAL_CALL, TokenSale.tokenSaleTokenBalance()()
TMP_60(bool) = TMP_59 > 0
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(tokenSaleIsPaused == false)

IRs:
TMP_62(bool) = tokenSaleIsPaused == False
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
preValidatePurchase(buyer,weiAmount)

IRs:
INTERNAL_CALL, TokenSale.preValidatePurchase(address,uint256)(buyer,weiAmount)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
tokens = getTokenAmount(weiAmount)

IRs:
TMP_65(uint256) = INTERNAL_CALL, TokenSale.getTokenAmount(uint256)(weiAmount)
tokens(uint256) := TMP_65(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(tokens <= tokenSaleTokenBalance())

IRs:
TMP_66(uint256) = INTERNAL_CALL, TokenSale.tokenSaleTokenBalance()()
TMP_67(bool) = tokens <= TMP_66
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_69(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
processPurchase(buyer,tokens)

IRs:
INTERNAL_CALL, TokenSale.processPurchase(address,uint256)(buyer,tokens)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
TokenPurchase(msg.sender,buyer,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,buyer,weiAmount,tokens)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
updatePurchasingState(buyer,weiAmount)

IRs:
INTERNAL_CALL, TokenSale.updatePurchasingState(address,uint256)(buyer,weiAmount)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, TokenSale.forwardFunds()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
postValidatePurchase(buyer,weiAmount)

IRs:
INTERNAL_CALL, TokenSale.postValidatePurchase(address,uint256)(buyer,weiAmount)"];
}
// Function: 2814.sol-TokenSale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
thisContractAddress = address(this)

IRs:
TMP_12 = CONVERT this to address
thisContractAddress(address) := TMP_12(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token = EthertoteToken(tokenContractAddress)

IRs:
TMP_13 = CONVERT tokenContractAddress to EthertoteToken
token(EthertoteToken) := TMP_13(EthertoteToken)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(ethRaisedAddress != address(0))

IRs:
TMP_14 = CONVERT 0 to address
TMP_15(bool) = ethRaisedAddress != TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(tokenContractAddress != address(0))

IRs:
TMP_17 = CONVERT 0 to address
TMP_18(bool) = tokenContractAddress != TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(tokenBurnAddress != address(0))

IRs:
TMP_20 = CONVERT 0 to address
TMP_21(bool) = tokenBurnAddress != TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
preIcoPhaseCountdown = openingTime

IRs:
preIcoPhaseCountdown(uint256) := openingTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
icoPhaseCountdown = closingTime

IRs:
icoPhaseCountdown(uint256) := closingTime(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
postIcoPhaseCountdown = closingTime.add(1209600)

IRs:
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['closingTime', '1209600'] 
postIcoPhaseCountdown(uint256) := TMP_23(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Deployed(Ethertote Token Sale contract deployed,now)

IRs:
Emit Deployed(Ethertote Token Sale contract deployed,now)"];
}
// Function: 2814.sol-TokenSale-delayOpeningTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
openingTime = _openingTime

IRs:
openingTime(uint256) := _openingTime(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
closingTime = openingTime.add(604800)

IRs:
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['openingTime', '604800'] 
closingTime(uint256) := TMP_84(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
preIcoPhaseCountdown = openingTime

IRs:
preIcoPhaseCountdown(uint256) := openingTime(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
icoPhaseCountdown = closingTime

IRs:
icoPhaseCountdown(uint256) := closingTime(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
postIcoPhaseCountdown = closingTime.add(1209600)

IRs:
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['closingTime', '1209600'] 
postIcoPhaseCountdown(uint256) := TMP_85(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, TokenSale.onlyAdmin()()"];
6->1;
}
// Function: 2814.sol-TokenSale-deliverTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token.transfer(buyer,tokenAmount)

IRs:
HIGH_LEVEL_CALL, dest:token(EthertoteToken), function:transfer, arguments:['buyer', 'tokenAmount']  "];
}
// Function: 2814.sol-TokenSale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, TokenSale.buyTokens(address)(msg.sender)"];
}
// Function: 2814.sol-TokenSale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ethRaisedAddress.transfer(msg.value)

IRs:
Transfer dest:ethRaisedAddress value:msg.value"];
}
// Function: 2814.sol-TokenSale-getAnyAddressTokenBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
token.balanceOf(_address)

IRs:
TMP_26(uint256) = HIGH_LEVEL_CALL, dest:token(EthertoteToken), function:balanceOf, arguments:['_address']  
RETURN TMP_26"];
}
// Function: 2814.sol-TokenSale-getTokenAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
weiAmount.div(rate)

IRs:
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['weiAmount', 'rate'] 
RETURN TMP_82"];
}
// Function: 2814.sol-TokenSale-maximumRaised()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
maxWeiRaised

IRs:
RETURN maxWeiRaised"];
}
// Function: 2814.sol-TokenSale-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_89(bool) = msg.sender == admin
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 2814.sol-TokenSale-pauseTokenSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenSaleHasFinished() == false)

IRs:
TMP_36(bool) = INTERNAL_CALL, TokenSale.tokenSaleHasFinished()()
TMP_37(bool) = TMP_36 == False
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(tokenSaleIsPaused == false)

IRs:
TMP_39(bool) = tokenSaleIsPaused == False
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenSaleIsPaused = true

IRs:
tokenSaleIsPaused(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenSalePausedTime = now

IRs:
tokenSalePausedTime(uint256) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
SalePaused(token sale has been paused,now)

IRs:
Emit SalePaused(token sale has been paused,now)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, TokenSale.onlyAdmin()()"];
6->1;
}
// Function: 2814.sol-TokenSale-postValidatePurchase(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 2814.sol-TokenSale-preValidatePurchase(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(buyer != address(0))

IRs:
TMP_75 = CONVERT 0 to address
TMP_76(bool) = buyer != TMP_75
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(weiAmount != 0)

IRs:
TMP_78(bool) = weiAmount != 0
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
}
// Function: 2814.sol-TokenSale-processPurchase(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
deliverTokens(buyer,tokenAmount)

IRs:
INTERNAL_CALL, TokenSale.deliverTokens(address,uint256)(buyer,tokenAmount)"];
}
// Function: 2814.sol-TokenSale-resumeTokenSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenSaleIsPaused == true)

IRs:
TMP_43(bool) = tokenSaleIsPaused == True
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenSaleResumedTime = now

IRs:
tokenSaleResumedTime(uint256) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenSalePausedDuration = tokenSaleResumedTime.sub(tokenSalePausedTime)

IRs:
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokenSaleResumedTime', 'tokenSalePausedTime'] 
tokenSalePausedDuration(uint256) := TMP_45(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
closingTime = closingTime.add(tokenSalePausedDuration)

IRs:
TMP_46(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['closingTime', 'tokenSalePausedDuration'] 
closingTime(uint256) := TMP_46(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
postIcoPhaseCountdown = closingTime.add(1209600)

IRs:
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['closingTime', '1209600'] 
postIcoPhaseCountdown(uint256) := TMP_47(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenSaleIsPaused = false

IRs:
tokenSaleIsPaused(bool) := False(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
SaleResumed(token sale has now resumed,now)

IRs:
Emit SaleResumed(token sale has now resumed,now)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, TokenSale.onlyAdmin()()"];
8->1;
}
// Function: 2814.sol-TokenSale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
tokenContractAddress = 0x42be9831FFF77972c1D0E1eC0aA9bdb3CaA04D47

IRs:
tokenContractAddress(address) := 381043790543629933192521627790181712047877672263(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
tokenBurnAddress = 0xadCa18DC9489C5FE5BdDf1A8a8C2623B66029198

IRs:
tokenBurnAddress(address) := 992162319637051612252169055144627688681601405336(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
ethRaisedAddress = 0x9F73D808807c71Af185FEA0c1cE205002c74123C

IRs:
ethRaisedAddress(address) := 910312937405629035650814659078939768270663979580(address)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
maxEthRaised = 9000

IRs:
maxEthRaised(uint256) := 9000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
maxWeiRaised = maxEthRaised.mul(1000000000000000000)

IRs:
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['maxEthRaised', '1000000000000000000'] 
maxWeiRaised(uint256) := TMP_87(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
openingTime = 1535385600

IRs:
openingTime(uint256) := 1535385600(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
closingTime = openingTime.add(604800)

IRs:
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['openingTime', '604800'] 
closingTime(uint256) := TMP_88(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
rate = 1000000000000000

IRs:
rate(uint256) := 1000000000000000(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
minSpend = 100000000000000000

IRs:
minSpend(uint256) := 100000000000000000(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
maxSpend = 100000000000000000000

IRs:
maxSpend(uint256) := 100000000000000000000(uint256)"];
}
// Function: 2814.sol-TokenSale-timeComplete()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
closingTime

IRs:
RETURN closingTime"];
}
// Function: 2814.sol-TokenSale-tokenSaleHasFinished()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > closingTime

IRs:
TMP_27(bool) = now > closingTime
RETURN TMP_27"];
}
// Function: 2814.sol-TokenSale-tokenSaleTokenBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
token.balanceOf(thisContractAddress)

IRs:
TMP_25(uint256) = HIGH_LEVEL_CALL, dest:token(EthertoteToken), function:balanceOf, arguments:['thisContractAddress']  
RETURN TMP_25"];
}
// Function: 2814.sol-TokenSale-updatePurchasingState(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
}
