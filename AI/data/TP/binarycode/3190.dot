digraph G {
// Function: 3190.sol-wordbot-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
toBytes = new bytes(6 * 1024)

IRs:
TMP_20(uint256) = 6 * 1024
TMP_21 = new bytes(TMP_20)
toBytes(bytes) := TMP_21(bytes)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
wordlist = toBytes

IRs:
wordlist(bytes) := toBytes(bytes)"];
}
// Function: 3190.sol-wordbot-getWords(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
ret = new bytes6[](_wordcount)

IRs:
TMP_1(bytes6[])  = new bytes6[](_wordcount)
ret(bytes6[]) = ['TMP_1(bytes6[])']"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->21;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < _wordcount

IRs:
TMP_2(bool) = i < _wordcount
CONDITION TMP_2"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
index = random(entropy) * 6

IRs:
TMP_3(uint16) = INTERNAL_CALL, wordbot.random(bytes32)(entropy)
TMP_4(uint16) = TMP_3 * 6
index(uint256) := TMP_4(uint16)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
word = new bytes(6)

IRs:
TMP_6 = new bytes(6)
word(bytes) := TMP_6(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
word[0] = wordlist[index]

IRs:
REF_0(None) -> word[0]
REF_1(None) -> wordlist[index]
REF_0(None) (->word) := REF_1(None)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
word[1] = wordlist[index + 1]

IRs:
REF_2(None) -> word[1]
TMP_7(uint256) = index + 1
REF_3(None) -> wordlist[TMP_7]
REF_2(None) (->word) := REF_3(None)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
word[2] = wordlist[index + 2]

IRs:
REF_4(None) -> word[2]
TMP_8(uint256) = index + 2
REF_5(None) -> wordlist[TMP_8]
REF_4(None) (->word) := REF_5(None)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
word[3] = wordlist[index + 3]

IRs:
REF_6(None) -> word[3]
TMP_9(uint256) = index + 3
REF_7(None) -> wordlist[TMP_9]
REF_6(None) (->word) := REF_7(None)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
word[4] = wordlist[index + 4]

IRs:
REF_8(None) -> word[4]
TMP_10(uint256) = index + 4
REF_9(None) -> wordlist[TMP_10]
REF_8(None) (->word) := REF_9(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
word[5] = wordlist[index + 5]

IRs:
REF_10(None) -> word[5]
TMP_11(uint256) = index + 5
REF_11(None) -> wordlist[TMP_11]
REF_10(None) (->word) := REF_11(None)"];
14->15;
15[label="Node Type: NEW VARIABLE 15
"];
15->16;
16[label="Node Type: INLINE ASM 16
"];
16->17;
17[label="Node Type: END INLINE ASM 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ret[i] = toBytes6

IRs:
REF_12(bytes6) -> ret[i]
REF_12(bytes6) (->ret) := toBytes6(bytes6)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
entropy = keccak256()(word)

IRs:
TMP_12(bytes32) = SOLIDITY_CALL keccak256()(word)
entropy(bytes32) := TMP_12(bytes32)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_13(uint256) := i(uint256)
i(uint256) = i + 1"];
20->6;
21[label="Node Type: RETURN 21

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 3190.sol-wordbot-random(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint16(uint256(keccak256()(abi.encodePacked(block.timestamp,block.difficulty,_entropy))) % 1024)

IRs:
TMP_14(bytes) = SOLIDITY_CALL abi.encodePacked()(block.timestamp,block.difficulty,_entropy)
TMP_15(bytes32) = SOLIDITY_CALL keccak256()(TMP_14)
TMP_16 = CONVERT TMP_15 to uint256
TMP_17(uint256) = TMP_16 % 1024
TMP_18 = CONVERT TMP_17 to uint16
RETURN TMP_18"];
}
// Function: 3190.sol-wordbot-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
wordlist = new bytes(6 * 1024)

IRs:
TMP_23(uint256) = 6 * 1024
TMP_24 = new bytes(TMP_23)
wordlist(bytes) := TMP_24(bytes)"];
}
}
