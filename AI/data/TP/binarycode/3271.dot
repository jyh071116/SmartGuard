digraph G {
// Function: 3271.sol-hodlEthereum-hodl()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
hodlers[msg.sender] += msg.value

IRs:
REF_0(uint256) -> hodlers[msg.sender]
REF_0(-> hodlers) = REF_0 + msg.value"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Hodl(msg.sender,msg.value)

IRs:
Emit Hodl(msg.sender,msg.value)"];
}
// Function: 3271.sol-hodlEthereum-party()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp > partyTime && hodlers[msg.sender] > 0)

IRs:
TMP_1(bool) = block.timestamp > partyTime
REF_1(uint256) -> hodlers[msg.sender]
TMP_2(bool) = REF_1 > 0
TMP_3(bool) = TMP_1 && TMP_2
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
value = hodlers[msg.sender]

IRs:
REF_2(uint256) -> hodlers[msg.sender]
value(uint256) := REF_2(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
hodlers[msg.sender] = 0

IRs:
REF_3(uint256) -> hodlers[msg.sender]
REF_3(uint256) (->hodlers) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
msg.sender.transfer(value)

IRs:
Transfer dest:msg.sender value:value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Party(msg.sender,value)

IRs:
Emit Party(msg.sender,value)"];
}
// Function: 3271.sol-hodlEthereum-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
partyTime = 1535760000

IRs:
partyTime(uint256) := 1535760000(uint256)"];
}
}
