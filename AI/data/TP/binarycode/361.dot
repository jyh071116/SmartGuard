digraph G {
// Function: 361.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
}
// Function: 361.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 361.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _to != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_15(bool) = _value <= REF_0
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 361.sol-BurnableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_180(uint256) -> balances[_who]
TMP_193(bool) = _value <= REF_180
TMP_194(None) = SOLIDITY_CALL require(bool)(TMP_193)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_181(uint256) -> balances[_who]
REF_182(uint256) -> balances[_who]
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_182', '_value'] 
REF_181(uint256) (->balances) := TMP_195(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_196(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_198 = CONVERT 0 to address
Emit Transfer(_who,TMP_198,_value)"];
}
// Function: 361.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 361.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 361.sol-BurnableToken-totalSupply()
digraph{
}
// Function: 361.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 361.sol-Consts-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
TOKEN_DECIMALS = 0

IRs:
TOKEN_DECIMALS(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
TOKEN_DECIMALS_UINT8 = 0

IRs:
TOKEN_DECIMALS_UINT8(uint8) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS

IRs:
TMP_333(uint256) = 10 ** TOKEN_DECIMALS
TOKEN_DECIMAL_MULTIPLIER(uint256) := TMP_333(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TOKEN_NAME = MissYou

IRs:
TOKEN_NAME(string) := MissYou(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
TOKEN_SYMBOL = MIS

IRs:
TOKEN_SYMBOL(string) := MIS(string)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
PAUSED = false

IRs:
PAUSED(bool) := False(bool)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
TARGET_USER = 0x210d60d0ec127f0fff477a1b1b9424bb1c32876d

IRs:
TARGET_USER(address) := 188695038996743216421553150826265181014337947501(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
CONTINUE_MINTING = false

IRs:
CONTINUE_MINTING(bool) := False(bool)"];
}
// Function: 361.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 361.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 361.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 361.sol-ERC20-totalSupply()
digraph{
}
// Function: 361.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 361.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 361.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 361.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 361.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 361.sol-FreezableMintableToken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_235 = CONVERT 0 to address
TMP_236(bool) = _newOwner != TMP_235
TMP_237(None) = SOLIDITY_CALL require(bool)(TMP_236)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 361.sol-FreezableMintableToken-actualBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
super.balanceOf(_owner)

IRs:
TMP_266(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_owner)
RETURN TMP_266"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 361.sol-FreezableMintableToken-allowance(address,address)
digraph{
}
// Function: 361.sol-FreezableMintableToken-approve(address,uint256)
digraph{
}
// Function: 361.sol-FreezableMintableToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
super.balanceOf(_owner) + freezingBalance[_owner]

IRs:
TMP_264(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_owner)
REF_231(uint256) -> freezingBalance[_owner]
TMP_265(uint256) = TMP_264 + REF_231
RETURN TMP_265"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 361.sol-FreezableMintableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_327 = UnaryType.BANG mintingFinished 
TMP_328(None) = SOLIDITY_CALL require(bool)(TMP_327)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-FreezableMintableToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 361.sol-FreezableMintableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_214(mapping(address => uint256)) -> allowed[msg.sender]
REF_215(uint256) -> REF_214[_spender]
oldValue(uint256) := REF_215(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_253(bool) = _subtractedValue > oldValue
CONDITION TMP_253"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_216(mapping(address => uint256)) -> allowed[msg.sender]
REF_217(uint256) -> REF_216[_spender]
REF_217(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_218(mapping(address => uint256)) -> allowed[msg.sender]
REF_219(uint256) -> REF_218[_spender]
TMP_254(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_219(uint256) (->allowed) := TMP_254(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_221(mapping(address => uint256)) -> allowed[msg.sender]
REF_222(uint256) -> REF_221[_spender]
Emit Approval(msg.sender,_spender,REF_222)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 361.sol-FreezableMintableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 361.sol-FreezableMintableToken-freeze(address,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_until > block.timestamp)

IRs:
TMP_304(bool) = _until > block.timestamp
TMP_305(None) = SOLIDITY_CALL require(bool)(TMP_304)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
key = toKey(_to,_until)

IRs:
TMP_306(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
key(bytes32) := TMP_306(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
parentKey = toKey(_to,uint64(0))

IRs:
TMP_307 = CONVERT 0 to uint64
TMP_308(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,TMP_307)
parentKey(bytes32) := TMP_308(bytes32)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
next = chains[parentKey]

IRs:
REF_260(uint64) -> chains[parentKey]
next(uint64) := REF_260(uint64)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
next == 0

IRs:
TMP_309(bool) = next == 0
CONDITION TMP_309"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
chains[parentKey] = _until

IRs:
REF_261(uint64) -> chains[parentKey]
REF_261(uint64) (->chains) := _until(uint64)"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
nextKey = toKey(_to,next)

IRs:
TMP_310(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,next)
nextKey(bytes32) := TMP_310(bytes32)"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: BEGIN_LOOP 11
"];
11->12;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
next != 0 && _until > next

IRs:
TMP_311(bool) = next != 0
TMP_312(bool) = _until > next
TMP_313(bool) = TMP_311 && TMP_312
CONDITION TMP_313"];
12->13[label="True"];
12->17[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
parent = next

IRs:
parent(uint256) := next(uint64)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
parentKey = nextKey

IRs:
parentKey(bytes32) := nextKey(bytes32)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
next = chains[nextKey]

IRs:
REF_262(uint64) -> chains[nextKey]
next(uint64) := REF_262(uint64)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
nextKey = toKey(_to,next)

IRs:
TMP_314(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,next)
nextKey(bytes32) := TMP_314(bytes32)"];
16->12;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
_until == next

IRs:
TMP_315(bool) = _until == next
CONDITION TMP_315"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19
"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
next != 0

IRs:
TMP_316(bool) = next != 0
CONDITION TMP_316"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
chains[key] = next

IRs:
REF_263(uint64) -> chains[key]
REF_263(uint64) (->chains) := next(uint64)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
chains[parentKey] = _until

IRs:
REF_264(uint64) -> chains[parentKey]
REF_264(uint64) (->chains) := _until(uint64)"];
}
// Function: 361.sol-FreezableMintableToken-freezeTo(address,uint256,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_277 = CONVERT 0 to address
TMP_278(bool) = _to != TMP_277
TMP_279(None) = SOLIDITY_CALL require(bool)(TMP_278)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[msg.sender])

IRs:
REF_237(uint256) -> balances[msg.sender]
TMP_280(bool) = _amount <= REF_237
TMP_281(None) = SOLIDITY_CALL require(bool)(TMP_280)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_amount)

IRs:
REF_238(uint256) -> balances[msg.sender]
REF_239(uint256) -> balances[msg.sender]
TMP_282(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_239', '_amount'] 
REF_238(uint256) (->balances) := TMP_282(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
currentKey = toKey(_to,_until)

IRs:
TMP_283(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
currentKey(bytes32) := TMP_283(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
freezings[currentKey] = freezings[currentKey].add(_amount)

IRs:
REF_241(uint256) -> freezings[currentKey]
REF_242(uint256) -> freezings[currentKey]
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_242', '_amount'] 
REF_241(uint256) (->freezings) := TMP_284(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
freezingBalance[_to] = freezingBalance[_to].add(_amount)

IRs:
REF_244(uint256) -> freezingBalance[_to]
REF_245(uint256) -> freezingBalance[_to]
TMP_285(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_245', '_amount'] 
REF_244(uint256) (->freezingBalance) := TMP_285(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
freeze(_to,_until)

IRs:
INTERNAL_CALL, FreezableToken.freeze(address,uint64)(_to,_until)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Freezed(_to,_until,_amount)

IRs:
Emit Freezed(_to,_until,_amount)"];
}
// Function: 361.sol-FreezableMintableToken-freezingBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
freezingBalance[_owner]

IRs:
REF_232(uint256) -> freezingBalance[_owner]
RETURN REF_232"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 361.sol-FreezableMintableToken-freezingCount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
release = chains[toKey(_addr,0)]

IRs:
TMP_267(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,0)
REF_233(uint64) -> chains[TMP_267]
release(uint64) := REF_233(uint64)"];
1->2;
2[label="Node Type: BEGIN_LOOP 2
"];
2->3;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
release != 0

IRs:
TMP_268(bool) = release != 0
CONDITION TMP_268"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
count ++

IRs:
TMP_269(uint256) := count(uint256)
count(uint256) = count + 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
release = chains[toKey(_addr,release)]

IRs:
TMP_270(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,release)
REF_234(uint64) -> chains[TMP_270]
release(uint64) := REF_234(uint64)"];
5->3;
6[label="Node Type: END_LOOP 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 361.sol-FreezableMintableToken-getFreezing(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _index + 1

IRs:
TMP_271(uint256) = _index + 1
TMP_272(bool) = i < TMP_271
CONDITION TMP_272"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_release = chains[toKey(_addr,_release)]

IRs:
TMP_273(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,_release)
REF_235(uint64) -> chains[TMP_273]
_release(uint64) := REF_235(uint64)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_release == 0

IRs:
TMP_274(bool) = _release == 0
CONDITION TMP_274"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_275(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_balance = freezings[toKey(_addr,_release)]

IRs:
TMP_276(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,_release)
REF_236(uint256) -> freezings[TMP_276]
_balance(uint256) := REF_236(uint256)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_release,_balance)

IRs:
RETURN _release,_balance"];
}
// Function: 361.sol-FreezableMintableToken-hasMintPermission()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_329(bool) = msg.sender == owner
TMP_330(None) = SOLIDITY_CALL require(bool)(TMP_329)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-FreezableMintableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_207(mapping(address => uint256)) -> allowed[msg.sender]
REF_208(uint256) -> REF_207[_spender]
REF_209(mapping(address => uint256)) -> allowed[msg.sender]
REF_210(uint256) -> REF_209[_spender]
TMP_251(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_210', '_addedValue'] 
REF_208(uint256) (->allowed) := TMP_251(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_212(mapping(address => uint256)) -> allowed[msg.sender]
REF_213(uint256) -> REF_212[_spender]
Emit Approval(msg.sender,_spender,REF_213)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 361.sol-FreezableMintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_220(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_220(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_186(uint256) -> balances[_to]
REF_187(uint256) -> balances[_to]
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_187', '_amount'] 
REF_186(uint256) (->balances) := TMP_221(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_223 = CONVERT 0 to address
Emit Transfer(TMP_223,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
hasMintPermission()

IRs:
MODIFIER_CALL, MintableToken.hasMintPermission()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 361.sol-FreezableMintableToken-mintAndFreeze(address,uint256,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_317(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
currentKey = toKey(_to,_until)

IRs:
TMP_318(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
currentKey(bytes32) := TMP_318(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
freezings[currentKey] = freezings[currentKey].add(_amount)

IRs:
REF_266(uint256) -> freezings[currentKey]
REF_267(uint256) -> freezings[currentKey]
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_267', '_amount'] 
REF_266(uint256) (->freezings) := TMP_319(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
freezingBalance[_to] = freezingBalance[_to].add(_amount)

IRs:
REF_269(uint256) -> freezingBalance[_to]
REF_270(uint256) -> freezingBalance[_to]
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_270', '_amount'] 
REF_269(uint256) (->freezingBalance) := TMP_320(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
freeze(_to,_until)

IRs:
INTERNAL_CALL, FreezableToken.freeze(address,uint64)(_to,_until)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Freezed(_to,_until,_amount)

IRs:
Emit Freezed(_to,_until,_amount)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
11->1;
}
// Function: 361.sol-FreezableMintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_331(bool) = msg.sender == owner
TMP_332(None) = SOLIDITY_CALL require(bool)(TMP_331)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-FreezableMintableToken-releaseAll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(release,balance) = getFreezing(msg.sender,0)

IRs:
TUPLE_2(uint64,uint256) = INTERNAL_CALL, FreezableToken.getFreezing(address,uint256)(msg.sender,0)
release(uint256)= UNPACK TUPLE_2 index: 0 
balance(uint256)= UNPACK TUPLE_2 index: 1 "];
3->4;
4[label="Node Type: BEGIN_LOOP 4
"];
4->5;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
release != 0 && block.timestamp > release

IRs:
TMP_300(bool) = release != 0
TMP_301(bool) = block.timestamp > release
TMP_302(bool) = TMP_300 && TMP_301
CONDITION TMP_302"];
5->6[label="True"];
5->9[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
releaseOnce()

IRs:
INTERNAL_CALL, FreezableToken.releaseOnce()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokens += balance

IRs:
tokens(uint256) = tokens + balance"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
(release,balance) = getFreezing(msg.sender,0)

IRs:
TUPLE_3(uint64,uint256) = INTERNAL_CALL, FreezableToken.getFreezing(address,uint256)(msg.sender,0)
release(uint256)= UNPACK TUPLE_3 index: 0 
balance(uint256)= UNPACK TUPLE_3 index: 1 "];
8->5;
9[label="Node Type: END_LOOP 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
tokens

IRs:
RETURN tokens"];
}
// Function: 361.sol-FreezableMintableToken-releaseOnce()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
headKey = toKey(msg.sender,0)

IRs:
TMP_289(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(msg.sender,0)
headKey(bytes32) := TMP_289(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
head = chains[headKey]

IRs:
REF_247(uint64) -> chains[headKey]
head(uint64) := REF_247(uint64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(head != 0)

IRs:
TMP_290(bool) = head != 0
TMP_291(None) = SOLIDITY_CALL require(bool)(TMP_290)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(uint64(block.timestamp) > head)

IRs:
TMP_292 = CONVERT block.timestamp to uint64
TMP_293(bool) = TMP_292 > head
TMP_294(None) = SOLIDITY_CALL require(bool)(TMP_293)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
currentKey = toKey(msg.sender,head)

IRs:
TMP_295(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(msg.sender,head)
currentKey(bytes32) := TMP_295(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
next = chains[currentKey]

IRs:
REF_248(uint64) -> chains[currentKey]
next(uint64) := REF_248(uint64)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
amount = freezings[currentKey]

IRs:
REF_249(uint256) -> freezings[currentKey]
amount(uint256) := REF_249(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete freezings[currentKey]

IRs:
REF_250(uint256) -> freezings[currentKey]
freezings = delete REF_250 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(amount)

IRs:
REF_251(uint256) -> balances[msg.sender]
REF_252(uint256) -> balances[msg.sender]
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_252', 'amount'] 
REF_251(uint256) (->balances) := TMP_296(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount)

IRs:
REF_254(uint256) -> freezingBalance[msg.sender]
REF_255(uint256) -> freezingBalance[msg.sender]
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_255', 'amount'] 
REF_254(uint256) (->freezingBalance) := TMP_297(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
next == 0

IRs:
TMP_298(bool) = next == 0
CONDITION TMP_298"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
delete chains[headKey]

IRs:
REF_257(uint64) -> chains[headKey]
chains = delete REF_257 "];
12->15;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
chains[headKey] = next

IRs:
REF_258(uint64) -> chains[headKey]
REF_258(uint64) (->chains) := next(uint64)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
delete chains[currentKey]

IRs:
REF_259(uint64) -> chains[currentKey]
chains = delete REF_259 "];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Released(msg.sender,amount)

IRs:
Emit Released(msg.sender,amount)"];
}
// Function: 361.sol-FreezableMintableToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_231 = CONVERT 0 to address
owner(address) := TMP_231(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 361.sol-FreezableMintableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 361.sol-FreezableMintableToken-toKey(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
result = 0x5749534800000000000000000000000000000000000000000000000000000000

IRs:
result(bytes32) := 39480772448535941496179204954862169494691089619604794184232587696854102179840(uint256)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 361.sol-FreezableMintableToken-totalSupply()
digraph{
}
// Function: 361.sol-FreezableMintableToken-transfer(address,uint256)
digraph{
}
// Function: 361.sol-FreezableMintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 361.sol-FreezableMintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 361.sol-FreezableToken-actualBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
super.balanceOf(_owner)

IRs:
TMP_133(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_owner)
RETURN TMP_133"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 361.sol-FreezableToken-allowance(address,address)
digraph{
}
// Function: 361.sol-FreezableToken-approve(address,uint256)
digraph{
}
// Function: 361.sol-FreezableToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
super.balanceOf(_owner) + freezingBalance[_owner]

IRs:
TMP_131(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_owner)
REF_138(uint256) -> freezingBalance[_owner]
TMP_132(uint256) = TMP_131 + REF_138
RETURN TMP_132"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 361.sol-FreezableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_121(mapping(address => uint256)) -> allowed[msg.sender]
REF_122(uint256) -> REF_121[_spender]
oldValue(uint256) := REF_122(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_120(bool) = _subtractedValue > oldValue
CONDITION TMP_120"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_123(mapping(address => uint256)) -> allowed[msg.sender]
REF_124(uint256) -> REF_123[_spender]
REF_124(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_125(mapping(address => uint256)) -> allowed[msg.sender]
REF_126(uint256) -> REF_125[_spender]
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_126(uint256) (->allowed) := TMP_121(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_128(mapping(address => uint256)) -> allowed[msg.sender]
REF_129(uint256) -> REF_128[_spender]
Emit Approval(msg.sender,_spender,REF_129)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 361.sol-FreezableToken-freeze(address,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_until > block.timestamp)

IRs:
TMP_171(bool) = _until > block.timestamp
TMP_172(None) = SOLIDITY_CALL require(bool)(TMP_171)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
key = toKey(_to,_until)

IRs:
TMP_173(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
key(bytes32) := TMP_173(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
parentKey = toKey(_to,uint64(0))

IRs:
TMP_174 = CONVERT 0 to uint64
TMP_175(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,TMP_174)
parentKey(bytes32) := TMP_175(bytes32)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
next = chains[parentKey]

IRs:
REF_167(uint64) -> chains[parentKey]
next(uint64) := REF_167(uint64)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
next == 0

IRs:
TMP_176(bool) = next == 0
CONDITION TMP_176"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
chains[parentKey] = _until

IRs:
REF_168(uint64) -> chains[parentKey]
REF_168(uint64) (->chains) := _until(uint64)"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
nextKey = toKey(_to,next)

IRs:
TMP_177(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,next)
nextKey(bytes32) := TMP_177(bytes32)"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: BEGIN_LOOP 11
"];
11->12;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
next != 0 && _until > next

IRs:
TMP_178(bool) = next != 0
TMP_179(bool) = _until > next
TMP_180(bool) = TMP_178 && TMP_179
CONDITION TMP_180"];
12->13[label="True"];
12->17[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
parent = next

IRs:
parent(uint256) := next(uint64)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
parentKey = nextKey

IRs:
parentKey(bytes32) := nextKey(bytes32)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
next = chains[nextKey]

IRs:
REF_169(uint64) -> chains[nextKey]
next(uint64) := REF_169(uint64)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
nextKey = toKey(_to,next)

IRs:
TMP_181(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,next)
nextKey(bytes32) := TMP_181(bytes32)"];
16->12;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
_until == next

IRs:
TMP_182(bool) = _until == next
CONDITION TMP_182"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19
"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
next != 0

IRs:
TMP_183(bool) = next != 0
CONDITION TMP_183"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
chains[key] = next

IRs:
REF_170(uint64) -> chains[key]
REF_170(uint64) (->chains) := next(uint64)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
chains[parentKey] = _until

IRs:
REF_171(uint64) -> chains[parentKey]
REF_171(uint64) (->chains) := _until(uint64)"];
}
// Function: 361.sol-FreezableToken-freezeTo(address,uint256,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_144 = CONVERT 0 to address
TMP_145(bool) = _to != TMP_144
TMP_146(None) = SOLIDITY_CALL require(bool)(TMP_145)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[msg.sender])

IRs:
REF_144(uint256) -> balances[msg.sender]
TMP_147(bool) = _amount <= REF_144
TMP_148(None) = SOLIDITY_CALL require(bool)(TMP_147)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_amount)

IRs:
REF_145(uint256) -> balances[msg.sender]
REF_146(uint256) -> balances[msg.sender]
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_146', '_amount'] 
REF_145(uint256) (->balances) := TMP_149(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
currentKey = toKey(_to,_until)

IRs:
TMP_150(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
currentKey(bytes32) := TMP_150(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
freezings[currentKey] = freezings[currentKey].add(_amount)

IRs:
REF_148(uint256) -> freezings[currentKey]
REF_149(uint256) -> freezings[currentKey]
TMP_151(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_149', '_amount'] 
REF_148(uint256) (->freezings) := TMP_151(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
freezingBalance[_to] = freezingBalance[_to].add(_amount)

IRs:
REF_151(uint256) -> freezingBalance[_to]
REF_152(uint256) -> freezingBalance[_to]
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_152', '_amount'] 
REF_151(uint256) (->freezingBalance) := TMP_152(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
freeze(_to,_until)

IRs:
INTERNAL_CALL, FreezableToken.freeze(address,uint64)(_to,_until)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Freezed(_to,_until,_amount)

IRs:
Emit Freezed(_to,_until,_amount)"];
}
// Function: 361.sol-FreezableToken-freezingBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
freezingBalance[_owner]

IRs:
REF_139(uint256) -> freezingBalance[_owner]
RETURN REF_139"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 361.sol-FreezableToken-freezingCount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
release = chains[toKey(_addr,0)]

IRs:
TMP_134(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,0)
REF_140(uint64) -> chains[TMP_134]
release(uint64) := REF_140(uint64)"];
1->2;
2[label="Node Type: BEGIN_LOOP 2
"];
2->3;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
release != 0

IRs:
TMP_135(bool) = release != 0
CONDITION TMP_135"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
count ++

IRs:
TMP_136(uint256) := count(uint256)
count(uint256) = count + 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
release = chains[toKey(_addr,release)]

IRs:
TMP_137(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,release)
REF_141(uint64) -> chains[TMP_137]
release(uint64) := REF_141(uint64)"];
5->3;
6[label="Node Type: END_LOOP 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 361.sol-FreezableToken-getFreezing(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _index + 1

IRs:
TMP_138(uint256) = _index + 1
TMP_139(bool) = i < TMP_138
CONDITION TMP_139"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_release = chains[toKey(_addr,_release)]

IRs:
TMP_140(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,_release)
REF_142(uint64) -> chains[TMP_140]
_release(uint64) := REF_142(uint64)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_release == 0

IRs:
TMP_141(bool) = _release == 0
CONDITION TMP_141"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_142(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_balance = freezings[toKey(_addr,_release)]

IRs:
TMP_143(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,_release)
REF_143(uint256) -> freezings[TMP_143]
_balance(uint256) := REF_143(uint256)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_release,_balance)

IRs:
RETURN _release,_balance"];
}
// Function: 361.sol-FreezableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_114(mapping(address => uint256)) -> allowed[msg.sender]
REF_115(uint256) -> REF_114[_spender]
REF_116(mapping(address => uint256)) -> allowed[msg.sender]
REF_117(uint256) -> REF_116[_spender]
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_117', '_addedValue'] 
REF_115(uint256) (->allowed) := TMP_118(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_119(mapping(address => uint256)) -> allowed[msg.sender]
REF_120(uint256) -> REF_119[_spender]
Emit Approval(msg.sender,_spender,REF_120)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 361.sol-FreezableToken-releaseAll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(release,balance) = getFreezing(msg.sender,0)

IRs:
TUPLE_0(uint64,uint256) = INTERNAL_CALL, FreezableToken.getFreezing(address,uint256)(msg.sender,0)
release(uint256)= UNPACK TUPLE_0 index: 0 
balance(uint256)= UNPACK TUPLE_0 index: 1 "];
3->4;
4[label="Node Type: BEGIN_LOOP 4
"];
4->5;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
release != 0 && block.timestamp > release

IRs:
TMP_167(bool) = release != 0
TMP_168(bool) = block.timestamp > release
TMP_169(bool) = TMP_167 && TMP_168
CONDITION TMP_169"];
5->6[label="True"];
5->9[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
releaseOnce()

IRs:
INTERNAL_CALL, FreezableToken.releaseOnce()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokens += balance

IRs:
tokens(uint256) = tokens + balance"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
(release,balance) = getFreezing(msg.sender,0)

IRs:
TUPLE_1(uint64,uint256) = INTERNAL_CALL, FreezableToken.getFreezing(address,uint256)(msg.sender,0)
release(uint256)= UNPACK TUPLE_1 index: 0 
balance(uint256)= UNPACK TUPLE_1 index: 1 "];
8->5;
9[label="Node Type: END_LOOP 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
tokens

IRs:
RETURN tokens"];
}
// Function: 361.sol-FreezableToken-releaseOnce()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
headKey = toKey(msg.sender,0)

IRs:
TMP_156(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(msg.sender,0)
headKey(bytes32) := TMP_156(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
head = chains[headKey]

IRs:
REF_154(uint64) -> chains[headKey]
head(uint64) := REF_154(uint64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(head != 0)

IRs:
TMP_157(bool) = head != 0
TMP_158(None) = SOLIDITY_CALL require(bool)(TMP_157)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(uint64(block.timestamp) > head)

IRs:
TMP_159 = CONVERT block.timestamp to uint64
TMP_160(bool) = TMP_159 > head
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
currentKey = toKey(msg.sender,head)

IRs:
TMP_162(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(msg.sender,head)
currentKey(bytes32) := TMP_162(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
next = chains[currentKey]

IRs:
REF_155(uint64) -> chains[currentKey]
next(uint64) := REF_155(uint64)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
amount = freezings[currentKey]

IRs:
REF_156(uint256) -> freezings[currentKey]
amount(uint256) := REF_156(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete freezings[currentKey]

IRs:
REF_157(uint256) -> freezings[currentKey]
freezings = delete REF_157 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(amount)

IRs:
REF_158(uint256) -> balances[msg.sender]
REF_159(uint256) -> balances[msg.sender]
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_159', 'amount'] 
REF_158(uint256) (->balances) := TMP_163(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount)

IRs:
REF_161(uint256) -> freezingBalance[msg.sender]
REF_162(uint256) -> freezingBalance[msg.sender]
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_162', 'amount'] 
REF_161(uint256) (->freezingBalance) := TMP_164(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
next == 0

IRs:
TMP_165(bool) = next == 0
CONDITION TMP_165"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
delete chains[headKey]

IRs:
REF_164(uint64) -> chains[headKey]
chains = delete REF_164 "];
12->15;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
chains[headKey] = next

IRs:
REF_165(uint64) -> chains[headKey]
REF_165(uint64) (->chains) := next(uint64)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
delete chains[currentKey]

IRs:
REF_166(uint64) -> chains[currentKey]
chains = delete REF_166 "];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Released(msg.sender,amount)

IRs:
Emit Released(msg.sender,amount)"];
}
// Function: 361.sol-FreezableToken-toKey(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
result = 0x5749534800000000000000000000000000000000000000000000000000000000

IRs:
result(bytes32) := 39480772448535941496179204954862169494691089619604794184232587696854102179840(uint256)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 361.sol-FreezableToken-totalSupply()
digraph{
}
// Function: 361.sol-FreezableToken-transfer(address,uint256)
digraph{
}
// Function: 361.sol-FreezableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 361.sol-MainToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_272(uint256) -> balances[_who]
TMP_350(bool) = _value <= REF_272
TMP_351(None) = SOLIDITY_CALL require(bool)(TMP_350)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_273(uint256) -> balances[_who]
REF_274(uint256) -> balances[_who]
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_274', '_value'] 
REF_273(uint256) (->balances) := TMP_352(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_353(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_353(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_355 = CONVERT 0 to address
Emit Transfer(_who,TMP_355,_value)"];
}
// Function: 361.sol-MainToken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_345 = CONVERT 0 to address
TMP_346(bool) = _newOwner != TMP_345
TMP_347(None) = SOLIDITY_CALL require(bool)(TMP_346)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 361.sol-MainToken-actualBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
super.balanceOf(_owner)

IRs:
TMP_404(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_owner)
RETURN TMP_404"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 361.sol-MainToken-allowance(address,address)
digraph{
}
// Function: 361.sol-MainToken-approve(address,uint256)
digraph{
}
// Function: 361.sol-MainToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
super.balanceOf(_owner) + freezingBalance[_owner]

IRs:
TMP_402(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_owner)
REF_330(uint256) -> freezingBalance[_owner]
TMP_403(uint256) = TMP_402 + REF_330
RETURN TMP_403"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 361.sol-MainToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 361.sol-MainToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_483 = UnaryType.BANG mintingFinished 
TMP_484(None) = SOLIDITY_CALL require(bool)(TMP_483)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-MainToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
init()

IRs:
INTERNAL_CALL, MainToken.init()()"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transferOwnership(TARGET_USER)

IRs:
INTERNAL_CALL, Ownable.transferOwnership(address)(TARGET_USER)"];
}
// Function: 361.sol-MainToken-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
TOKEN_DECIMALS_UINT8

IRs:
RETURN TOKEN_DECIMALS_UINT8"];
2[label="Node Type: RETURN 2

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 361.sol-MainToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_321(mapping(address => uint256)) -> allowed[msg.sender]
REF_322(uint256) -> REF_321[_spender]
oldValue(uint256) := REF_322(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_399(bool) = _subtractedValue > oldValue
CONDITION TMP_399"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_323(mapping(address => uint256)) -> allowed[msg.sender]
REF_324(uint256) -> REF_323[_spender]
REF_324(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_325(mapping(address => uint256)) -> allowed[msg.sender]
REF_326(uint256) -> REF_325[_spender]
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_326(uint256) (->allowed) := TMP_400(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_328(mapping(address => uint256)) -> allowed[msg.sender]
REF_329(uint256) -> REF_328[_spender]
Emit Approval(msg.sender,_spender,REF_329)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 361.sol-MainToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 361.sol-MainToken-freeze(address,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_until > block.timestamp)

IRs:
TMP_442(bool) = _until > block.timestamp
TMP_443(None) = SOLIDITY_CALL require(bool)(TMP_442)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
key = toKey(_to,_until)

IRs:
TMP_444(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
key(bytes32) := TMP_444(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
parentKey = toKey(_to,uint64(0))

IRs:
TMP_445 = CONVERT 0 to uint64
TMP_446(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,TMP_445)
parentKey(bytes32) := TMP_446(bytes32)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
next = chains[parentKey]

IRs:
REF_359(uint64) -> chains[parentKey]
next(uint64) := REF_359(uint64)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
next == 0

IRs:
TMP_447(bool) = next == 0
CONDITION TMP_447"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
chains[parentKey] = _until

IRs:
REF_360(uint64) -> chains[parentKey]
REF_360(uint64) (->chains) := _until(uint64)"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
nextKey = toKey(_to,next)

IRs:
TMP_448(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,next)
nextKey(bytes32) := TMP_448(bytes32)"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: BEGIN_LOOP 11
"];
11->12;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
next != 0 && _until > next

IRs:
TMP_449(bool) = next != 0
TMP_450(bool) = _until > next
TMP_451(bool) = TMP_449 && TMP_450
CONDITION TMP_451"];
12->13[label="True"];
12->17[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
parent = next

IRs:
parent(uint256) := next(uint64)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
parentKey = nextKey

IRs:
parentKey(bytes32) := nextKey(bytes32)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
next = chains[nextKey]

IRs:
REF_361(uint64) -> chains[nextKey]
next(uint64) := REF_361(uint64)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
nextKey = toKey(_to,next)

IRs:
TMP_452(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,next)
nextKey(bytes32) := TMP_452(bytes32)"];
16->12;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
_until == next

IRs:
TMP_453(bool) = _until == next
CONDITION TMP_453"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19
"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
next != 0

IRs:
TMP_454(bool) = next != 0
CONDITION TMP_454"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
chains[key] = next

IRs:
REF_362(uint64) -> chains[key]
REF_362(uint64) (->chains) := next(uint64)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
chains[parentKey] = _until

IRs:
REF_363(uint64) -> chains[parentKey]
REF_363(uint64) (->chains) := _until(uint64)"];
}
// Function: 361.sol-MainToken-freezeTo(address,uint256,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_415 = CONVERT 0 to address
TMP_416(bool) = _to != TMP_415
TMP_417(None) = SOLIDITY_CALL require(bool)(TMP_416)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[msg.sender])

IRs:
REF_336(uint256) -> balances[msg.sender]
TMP_418(bool) = _amount <= REF_336
TMP_419(None) = SOLIDITY_CALL require(bool)(TMP_418)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_amount)

IRs:
REF_337(uint256) -> balances[msg.sender]
REF_338(uint256) -> balances[msg.sender]
TMP_420(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_338', '_amount'] 
REF_337(uint256) (->balances) := TMP_420(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
currentKey = toKey(_to,_until)

IRs:
TMP_421(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
currentKey(bytes32) := TMP_421(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
freezings[currentKey] = freezings[currentKey].add(_amount)

IRs:
REF_340(uint256) -> freezings[currentKey]
REF_341(uint256) -> freezings[currentKey]
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_341', '_amount'] 
REF_340(uint256) (->freezings) := TMP_422(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
freezingBalance[_to] = freezingBalance[_to].add(_amount)

IRs:
REF_343(uint256) -> freezingBalance[_to]
REF_344(uint256) -> freezingBalance[_to]
TMP_423(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_344', '_amount'] 
REF_343(uint256) (->freezingBalance) := TMP_423(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
freeze(_to,_until)

IRs:
INTERNAL_CALL, FreezableToken.freeze(address,uint64)(_to,_until)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Freezed(_to,_until,_amount)

IRs:
Emit Freezed(_to,_until,_amount)"];
}
// Function: 361.sol-MainToken-freezingBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
freezingBalance[_owner]

IRs:
REF_331(uint256) -> freezingBalance[_owner]
RETURN REF_331"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 361.sol-MainToken-freezingCount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
release = chains[toKey(_addr,0)]

IRs:
TMP_405(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,0)
REF_332(uint64) -> chains[TMP_405]
release(uint64) := REF_332(uint64)"];
1->2;
2[label="Node Type: BEGIN_LOOP 2
"];
2->3;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
release != 0

IRs:
TMP_406(bool) = release != 0
CONDITION TMP_406"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
count ++

IRs:
TMP_407(uint256) := count(uint256)
count(uint256) = count + 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
release = chains[toKey(_addr,release)]

IRs:
TMP_408(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,release)
REF_333(uint64) -> chains[TMP_408]
release(uint64) := REF_333(uint64)"];
5->3;
6[label="Node Type: END_LOOP 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 361.sol-MainToken-getFreezing(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _index + 1

IRs:
TMP_409(uint256) = _index + 1
TMP_410(bool) = i < TMP_409
CONDITION TMP_410"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_release = chains[toKey(_addr,_release)]

IRs:
TMP_411(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,_release)
REF_334(uint64) -> chains[TMP_411]
_release(uint64) := REF_334(uint64)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_release == 0

IRs:
TMP_412(bool) = _release == 0
CONDITION TMP_412"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_413(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_balance = freezings[toKey(_addr,_release)]

IRs:
TMP_414(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,_release)
REF_335(uint256) -> freezings[TMP_414]
_balance(uint256) := REF_335(uint256)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_release,_balance)

IRs:
RETURN _release,_balance"];
}
// Function: 361.sol-MainToken-hasMintPermission()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_485(bool) = msg.sender == owner
TMP_486(None) = SOLIDITY_CALL require(bool)(TMP_485)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-MainToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_314(mapping(address => uint256)) -> allowed[msg.sender]
REF_315(uint256) -> REF_314[_spender]
REF_316(mapping(address => uint256)) -> allowed[msg.sender]
REF_317(uint256) -> REF_316[_spender]
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_317', '_addedValue'] 
REF_315(uint256) (->allowed) := TMP_397(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_319(mapping(address => uint256)) -> allowed[msg.sender]
REF_320(uint256) -> REF_319[_spender]
Emit Approval(msg.sender,_spender,REF_320)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 361.sol-MainToken-init()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! initialized)

IRs:
TMP_463 = UnaryType.BANG initialized 
TMP_464(None) = SOLIDITY_CALL require(bool)(TMP_463)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
initialized = true

IRs:
initialized(bool) := True(bool)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
PAUSED

IRs:
CONDITION PAUSED"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pause()

IRs:
INTERNAL_CALL, Pausable.pause()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
addresses = (address(0x210d60d0ec127f0fff477a1b1b9424bb1c32876d))

IRs:
TMP_466 = CONVERT 188695038996743216421553150826265181014337947501 to address
addresses(address[1]) = ['TMP_466(address)']"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
amounts = (uint256(690000000000))

IRs:
TMP_467 = CONVERT 690000000000 to uint256
amounts(uint256[1]) = ['TMP_467(uint256)']"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
freezes = (uint64(0))

IRs:
TMP_468 = CONVERT 0 to uint64
freezes(uint64[1]) = ['TMP_468(uint64)']"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->18;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < addresses.length

IRs:
REF_364 -> LENGTH addresses
TMP_469(bool) = i < REF_364
CONDITION TMP_469"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: IF 13

EXPRESSION:
freezes[i] == 0

IRs:
REF_365(uint64) -> freezes[i]
TMP_470(bool) = REF_365 == 0
CONDITION TMP_470"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
mint(addresses[i],amounts[i])

IRs:
REF_366(address) -> addresses[i]
REF_367(uint256) -> amounts[i]
TMP_471(bool) = INTERNAL_CALL, MintableToken.mint(address,uint256)(REF_366,REF_367)"];
14->16;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mintAndFreeze(addresses[i],amounts[i],freezes[i])

IRs:
REF_368(address) -> addresses[i]
REF_369(uint256) -> amounts[i]
REF_370(uint64) -> freezes[i]
TMP_472(bool) = INTERNAL_CALL, FreezableMintableToken.mintAndFreeze(address,uint256,uint64)(REF_368,REF_369,REF_370)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_473(uint256) := i(uint256)
i(uint256) = i + 1"];
17->12;
18[label="Node Type: IF 18

EXPRESSION:
! CONTINUE_MINTING

IRs:
TMP_474 = UnaryType.BANG CONTINUE_MINTING 
CONDITION TMP_474"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
finishMinting()

IRs:
TMP_475(bool) = INTERNAL_CALL, MintableToken.finishMinting()()"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
Initialized()

IRs:
Emit Initialized()"];
}
// Function: 361.sol-MainToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_375(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_293(uint256) -> balances[_to]
REF_294(uint256) -> balances[_to]
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_294', '_amount'] 
REF_293(uint256) (->balances) := TMP_376(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_378 = CONVERT 0 to address
Emit Transfer(TMP_378,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
hasMintPermission()

IRs:
MODIFIER_CALL, MintableToken.hasMintPermission()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 361.sol-MainToken-mintAndFreeze(address,uint256,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_365(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
currentKey = toKey(_to,_until)

IRs:
TMP_366(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
currentKey(bytes32) := TMP_366(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
freezings[currentKey] = freezings[currentKey].add(_amount)

IRs:
REF_286(uint256) -> freezings[currentKey]
REF_287(uint256) -> freezings[currentKey]
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_287', '_amount'] 
REF_286(uint256) (->freezings) := TMP_367(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
freezingBalance[_to] = freezingBalance[_to].add(_amount)

IRs:
REF_289(uint256) -> freezingBalance[_to]
REF_290(uint256) -> freezingBalance[_to]
TMP_368(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_290', '_amount'] 
REF_289(uint256) (->freezingBalance) := TMP_368(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
freeze(_to,_until)

IRs:
INTERNAL_CALL, FreezableToken.freeze(address,uint64)(_to,_until)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Freezed(_to,_until,_amount)

IRs:
Emit Freezed(_to,_until,_amount)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
11->1;
}
// Function: 361.sol-MainToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
TOKEN_NAME

IRs:
RETURN TOKEN_NAME"];
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 361.sol-MainToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_481(bool) = msg.sender == owner
TMP_482(None) = SOLIDITY_CALL require(bool)(TMP_481)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-MainToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 361.sol-MainToken-releaseAll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(release,balance) = getFreezing(msg.sender,0)

IRs:
TUPLE_4(uint64,uint256) = INTERNAL_CALL, FreezableToken.getFreezing(address,uint256)(msg.sender,0)
release(uint256)= UNPACK TUPLE_4 index: 0 
balance(uint256)= UNPACK TUPLE_4 index: 1 "];
3->4;
4[label="Node Type: BEGIN_LOOP 4
"];
4->5;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
release != 0 && block.timestamp > release

IRs:
TMP_438(bool) = release != 0
TMP_439(bool) = block.timestamp > release
TMP_440(bool) = TMP_438 && TMP_439
CONDITION TMP_440"];
5->6[label="True"];
5->9[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
releaseOnce()

IRs:
INTERNAL_CALL, FreezableToken.releaseOnce()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokens += balance

IRs:
tokens(uint256) = tokens + balance"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
(release,balance) = getFreezing(msg.sender,0)

IRs:
TUPLE_5(uint64,uint256) = INTERNAL_CALL, FreezableToken.getFreezing(address,uint256)(msg.sender,0)
release(uint256)= UNPACK TUPLE_5 index: 0 
balance(uint256)= UNPACK TUPLE_5 index: 1 "];
8->5;
9[label="Node Type: END_LOOP 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
tokens

IRs:
RETURN tokens"];
}
// Function: 361.sol-MainToken-releaseOnce()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
headKey = toKey(msg.sender,0)

IRs:
TMP_427(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(msg.sender,0)
headKey(bytes32) := TMP_427(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
head = chains[headKey]

IRs:
REF_346(uint64) -> chains[headKey]
head(uint64) := REF_346(uint64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(head != 0)

IRs:
TMP_428(bool) = head != 0
TMP_429(None) = SOLIDITY_CALL require(bool)(TMP_428)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(uint64(block.timestamp) > head)

IRs:
TMP_430 = CONVERT block.timestamp to uint64
TMP_431(bool) = TMP_430 > head
TMP_432(None) = SOLIDITY_CALL require(bool)(TMP_431)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
currentKey = toKey(msg.sender,head)

IRs:
TMP_433(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(msg.sender,head)
currentKey(bytes32) := TMP_433(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
next = chains[currentKey]

IRs:
REF_347(uint64) -> chains[currentKey]
next(uint64) := REF_347(uint64)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
amount = freezings[currentKey]

IRs:
REF_348(uint256) -> freezings[currentKey]
amount(uint256) := REF_348(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete freezings[currentKey]

IRs:
REF_349(uint256) -> freezings[currentKey]
freezings = delete REF_349 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(amount)

IRs:
REF_350(uint256) -> balances[msg.sender]
REF_351(uint256) -> balances[msg.sender]
TMP_434(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_351', 'amount'] 
REF_350(uint256) (->balances) := TMP_434(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount)

IRs:
REF_353(uint256) -> freezingBalance[msg.sender]
REF_354(uint256) -> freezingBalance[msg.sender]
TMP_435(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_354', 'amount'] 
REF_353(uint256) (->freezingBalance) := TMP_435(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
next == 0

IRs:
TMP_436(bool) = next == 0
CONDITION TMP_436"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
delete chains[headKey]

IRs:
REF_356(uint64) -> chains[headKey]
chains = delete REF_356 "];
12->15;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
chains[headKey] = next

IRs:
REF_357(uint64) -> chains[headKey]
REF_357(uint64) (->chains) := next(uint64)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
delete chains[currentKey]

IRs:
REF_358(uint64) -> chains[currentKey]
chains = delete REF_358 "];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Released(msg.sender,amount)

IRs:
Emit Released(msg.sender,amount)"];
}
// Function: 361.sol-MainToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_341 = CONVERT 0 to address
owner(address) := TMP_341(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 361.sol-MainToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
TOKEN_DECIMALS = 0

IRs:
TOKEN_DECIMALS(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
TOKEN_DECIMALS_UINT8 = 0

IRs:
TOKEN_DECIMALS_UINT8(uint8) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS

IRs:
TMP_477(uint256) = 10 ** TOKEN_DECIMALS
TOKEN_DECIMAL_MULTIPLIER(uint256) := TMP_477(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TOKEN_NAME = MissYou

IRs:
TOKEN_NAME(string) := MissYou(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
TOKEN_SYMBOL = MIS

IRs:
TOKEN_SYMBOL(string) := MIS(string)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
PAUSED = false

IRs:
PAUSED(bool) := False(bool)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
TARGET_USER = 0x210d60d0ec127f0fff477a1b1b9424bb1c32876d

IRs:
TARGET_USER(address) := 188695038996743216421553150826265181014337947501(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
CONTINUE_MINTING = false

IRs:
CONTINUE_MINTING(bool) := False(bool)"];
}
// Function: 361.sol-MainToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
initialized = false

IRs:
initialized(bool) := False(bool)"];
}
// Function: 361.sol-MainToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
TOKEN_SYMBOL

IRs:
RETURN TOKEN_SYMBOL"];
2[label="Node Type: RETURN 2

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 361.sol-MainToken-toKey(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
result = 0x5749534800000000000000000000000000000000000000000000000000000000

IRs:
result(bytes32) := 39480772448535941496179204954862169494691089619604794184232587696854102179840(uint256)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 361.sol-MainToken-totalSupply()
digraph{
}
// Function: 361.sol-MainToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_460 = UnaryType.BANG paused 
TMP_461(None) = SOLIDITY_CALL require(bool)(TMP_460)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_462(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(_to,_value)
RETURN TMP_462"];
3[label="Node Type: RETURN 3

EXPRESSION:
_success

IRs:
RETURN _success"];
}
// Function: 361.sol-MainToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_457 = UnaryType.BANG paused 
TMP_458(None) = SOLIDITY_CALL require(bool)(TMP_457)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_459(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_459"];
3[label="Node Type: RETURN 3

EXPRESSION:
_success

IRs:
RETURN _success"];
}
// Function: 361.sol-MainToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 361.sol-MainToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 361.sol-MainToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_478 = UnaryType.BANG paused 
TMP_479(None) = SOLIDITY_CALL require(bool)(TMP_478)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-MainToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_480(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-MintableToken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_61 = CONVERT 0 to address
TMP_62(bool) = _newOwner != TMP_61
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 361.sol-MintableToken-allowance(address,address)
digraph{
}
// Function: 361.sol-MintableToken-approve(address,uint256)
digraph{
}
// Function: 361.sol-MintableToken-balanceOf(address)
digraph{
}
// Function: 361.sol-MintableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_102 = UnaryType.BANG mintingFinished 
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-MintableToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 361.sol-MintableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
oldValue(uint256) := REF_76(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_79(bool) = _subtractedValue > oldValue
CONDITION TMP_79"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
REF_78(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_79(mapping(address => uint256)) -> allowed[msg.sender]
REF_80(uint256) -> REF_79[_spender]
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_80(uint256) (->allowed) := TMP_80(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(uint256) -> REF_82[_spender]
Emit Approval(msg.sender,_spender,REF_83)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 361.sol-MintableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 361.sol-MintableToken-hasMintPermission()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_104(bool) = msg.sender == owner
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-MintableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', '_addedValue'] 
REF_69(uint256) (->allowed) := TMP_77(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
Emit Approval(msg.sender,_spender,REF_74)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 361.sol-MintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_90(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_90(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_93(uint256) -> balances[_to]
REF_94(uint256) -> balances[_to]
TMP_91(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_94', '_amount'] 
REF_93(uint256) (->balances) := TMP_91(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_93 = CONVERT 0 to address
Emit Transfer(TMP_93,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
hasMintPermission()

IRs:
MODIFIER_CALL, MintableToken.hasMintPermission()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 361.sol-MintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_100(bool) = msg.sender == owner
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-MintableToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_57 = CONVERT 0 to address
owner(address) := TMP_57(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 361.sol-MintableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 361.sol-MintableToken-totalSupply()
digraph{
}
// Function: 361.sol-MintableToken-transfer(address,uint256)
digraph{
}
// Function: 361.sol-MintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 361.sol-MintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 361.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_50 = CONVERT 0 to address
TMP_51(bool) = _newOwner != TMP_50
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 361.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 361.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_54(bool) = msg.sender == owner
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_46 = CONVERT 0 to address
owner(address) := TMP_46(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 361.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 361.sol-Pausable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_205 = CONVERT 0 to address
TMP_206(bool) = _newOwner != TMP_205
TMP_207(None) = SOLIDITY_CALL require(bool)(TMP_206)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 361.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 361.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_215(bool) = msg.sender == owner
TMP_216(None) = SOLIDITY_CALL require(bool)(TMP_215)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 361.sol-Pausable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_201 = CONVERT 0 to address
owner(address) := TMP_201(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 361.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 361.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 361.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 361.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_217 = UnaryType.BANG paused 
TMP_218(None) = SOLIDITY_CALL require(bool)(TMP_217)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_219(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 361.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 361.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 361.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 361.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 361.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_32(mapping(address => uint256)) -> allowed[_owner]
REF_33(uint256) -> REF_32[_spender]
RETURN REF_33"];
}
// Function: 361.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_30(mapping(address => uint256)) -> allowed[msg.sender]
REF_31(uint256) -> REF_30[_spender]
REF_31(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 361.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 361.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_41(mapping(address => uint256)) -> allowed[msg.sender]
REF_42(uint256) -> REF_41[_spender]
oldValue(uint256) := REF_42(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_42(bool) = _subtractedValue > oldValue
CONDITION TMP_42"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_43(mapping(address => uint256)) -> allowed[msg.sender]
REF_44(uint256) -> REF_43[_spender]
REF_44(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_45(mapping(address => uint256)) -> allowed[msg.sender]
REF_46(uint256) -> REF_45[_spender]
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_46(uint256) (->allowed) := TMP_43(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_48(mapping(address => uint256)) -> allowed[msg.sender]
REF_49(uint256) -> REF_48[_spender]
Emit Approval(msg.sender,_spender,REF_49)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 361.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_37', '_addedValue'] 
REF_35(uint256) (->allowed) := TMP_40(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_39(mapping(address => uint256)) -> allowed[msg.sender]
REF_40(uint256) -> REF_39[_spender]
Emit Approval(msg.sender,_spender,REF_40)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 361.sol-StandardToken-totalSupply()
digraph{
}
// Function: 361.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 361.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = _to != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_16(uint256) -> balances[_from]
TMP_31(bool) = _value <= REF_16
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_17(mapping(address => uint256)) -> allowed[_from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_33(bool) = _value <= REF_18
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_19(uint256) -> balances[_from]
REF_20(uint256) -> balances[_from]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_20', '_value'] 
REF_19(uint256) (->balances) := TMP_35(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_22(uint256) -> balances[_to]
REF_23(uint256) -> balances[_to]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_23', '_value'] 
REF_22(uint256) (->balances) := TMP_36(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
REF_27(mapping(address => uint256)) -> allowed[_from]
REF_28(uint256) -> REF_27[msg.sender]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_28', '_value'] 
REF_26(uint256) (->allowed) := TMP_37(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
