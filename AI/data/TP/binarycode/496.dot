digraph G {
// Function: 496.sol-TokenSale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp < deadline && tokenPrice > 0 && YellowBetterToken(tokenContract).transfer(beneficiary,1000000000000000000 * msg.value / tokenPrice))

IRs:
TMP_13(bool) = block.timestamp < deadline
TMP_14(bool) = tokenPrice > 0
TMP_15(bool) = TMP_13 && TMP_14
TMP_16 = CONVERT tokenContract to YellowBetterToken
TMP_17(uint256) = 1000000000000000000 * msg.value
TMP_18(uint256) = TMP_17 / tokenPrice
TMP_19(bool) = HIGH_LEVEL_CALL, dest:TMP_16(YellowBetterToken), function:transfer, arguments:['beneficiary', 'TMP_18']  
TMP_20(bool) = TMP_15 && TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
}
// Function: 496.sol-TokenSale-constructor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
creator = msg.sender

IRs:
creator(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenContract = source

IRs:
tokenContract(address) := source(address)"];
}
// Function: 496.sol-TokenSale-payout()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
creator.transfer(this.balance)

IRs:
REF_20(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:creator value:REF_20"];
}
// Function: 496.sol-TokenSale-setDeadline(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == creator

IRs:
TMP_12(bool) = msg.sender == creator
CONDITION TMP_12"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
deadline = timestamp

IRs:
deadline(uint256) := timestamp(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 496.sol-TokenSale-setPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == creator

IRs:
TMP_11(bool) = msg.sender == creator
CONDITION TMP_11"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenPrice = price

IRs:
tokenPrice(uint256) := price(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 496.sol-YellowBetterToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[tokenOwner][spender]

IRs:
REF_14(mapping(address => uint256)) -> allowed[tokenOwner]
REF_15(uint256) -> REF_14[spender]
RETURN REF_15"];
}
// Function: 496.sol-YellowBetterToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_12(mapping(address => uint256)) -> allowed[msg.sender]
REF_13(uint256) -> REF_12[spender]
REF_13(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 496.sol-YellowBetterToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[tokenOwner]

IRs:
REF_1(uint256) -> balances[tokenOwner]
RETURN REF_1"];
}
// Function: 496.sol-YellowBetterToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = sub(balances[msg.sender],tokens)

IRs:
REF_16(uint256) -> balances[msg.sender]
REF_17(uint256) -> balances[msg.sender]
TMP_9(uint256) = INTERNAL_CALL, YellowBetterToken.sub(uint256,uint256)(REF_17,tokens)
REF_16(uint256) (->balances) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply -= tokens

IRs:
totalSupply(uint256) = totalSupply - tokens"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Burn(msg.sender,tokens)

IRs:
Emit Burn(msg.sender,tokens)"];
}
// Function: 496.sol-YellowBetterToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 496.sol-YellowBetterToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Yellow Better

IRs:
name(string) := Yellow Better(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = YBT

IRs:
symbol(string) := YBT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
_totalSupply = 2000000000000000000000000000

IRs:
_totalSupply(uint256) := 2000000000000000000000000000(uint256)"];
}
// Function: 496.sol-YellowBetterToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = _totalSupply

IRs:
totalSupply(uint256) := _totalSupply(uint256)"];
}
// Function: 496.sol-YellowBetterToken-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(a >= b)

IRs:
TMP_0(bool) = a >= b
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_2(uint256) = a - b
RETURN TMP_2"];
}
// Function: 496.sol-YellowBetterToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = sub(balances[msg.sender],tokens)

IRs:
REF_2(uint256) -> balances[msg.sender]
REF_3(uint256) -> balances[msg.sender]
TMP_3(uint256) = INTERNAL_CALL, YellowBetterToken.sub(uint256,uint256)(REF_3,tokens)
REF_2(uint256) (->balances) := TMP_3(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[to] += tokens

IRs:
REF_4(uint256) -> balances[to]
REF_4(-> balances) = REF_4 + tokens"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 496.sol-YellowBetterToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = sub(balances[from],tokens)

IRs:
REF_5(uint256) -> balances[from]
REF_6(uint256) -> balances[from]
TMP_5(uint256) = INTERNAL_CALL, YellowBetterToken.sub(uint256,uint256)(REF_6,tokens)
REF_5(uint256) (->balances) := TMP_5(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[from][msg.sender] = sub(allowed[from][msg.sender],tokens)

IRs:
REF_7(mapping(address => uint256)) -> allowed[from]
REF_8(uint256) -> REF_7[msg.sender]
REF_9(mapping(address => uint256)) -> allowed[from]
REF_10(uint256) -> REF_9[msg.sender]
TMP_6(uint256) = INTERNAL_CALL, YellowBetterToken.sub(uint256,uint256)(REF_10,tokens)
REF_8(uint256) (->allowed) := TMP_6(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] += tokens

IRs:
REF_11(uint256) -> balances[to]
REF_11(-> balances) = REF_11 + tokens"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from,to,tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
}
