digraph G {
// Function: 6220.sol-MINEA-MINEA()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[owner] = minted

IRs:
REF_0(uint256) -> balanceOf[owner]
REF_0(uint256) (->balanceOf) := minted(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[this] = totalSupply - balanceOf[owner]

IRs:
REF_1(uint256) -> balanceOf[this]
REF_2(uint256) -> balanceOf[owner]
TMP_1(uint256) = totalSupply - REF_2
REF_1(uint256) (->balanceOf) := TMP_1(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
finishBountyAt = block.number + bountyDurationInBlocks

IRs:
TMP_2(uint256) = block.number + bountyDurationInBlocks
finishBountyAt(uint256) := TMP_2(uint256)"];
}
// Function: 6220.sol-MINEA-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_3(bool) = _to != 0
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_3(uint256) -> balanceOf[_from]
TMP_5(bool) = REF_3 >= _value
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value > balanceOf[_to])

IRs:
REF_4(uint256) -> balanceOf[_to]
TMP_7(uint256) = REF_4 + _value
REF_5(uint256) -> balanceOf[_to]
TMP_8(bool) = TMP_7 > REF_5
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balanceOf[_from] + balanceOf[_to]

IRs:
REF_6(uint256) -> balanceOf[_from]
REF_7(uint256) -> balanceOf[_to]
TMP_10(uint256) = REF_6 + REF_7
previousBalances(uint256) := TMP_10(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_8(uint256) -> balanceOf[_from]
REF_8(-> balanceOf) = REF_8 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_9(uint256) -> balanceOf[_to]
REF_9(-> balanceOf) = REF_9 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances)

IRs:
REF_10(uint256) -> balanceOf[_from]
REF_11(uint256) -> balanceOf[_to]
TMP_12(uint256) = REF_10 + REF_11
TMP_13(bool) = TMP_12 == previousBalances
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
}
// Function: 6220.sol-MINEA-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_16(mapping(address => uint256)) -> allowance[msg.sender]
REF_17(uint256) -> REF_16[_spender]
REF_17(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6220.sol-MINEA-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value == fee

IRs:
TMP_21(bool) = msg.value == fee
CONDITION TMP_21"];
1->2[label="True"];
1->34[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
randomNumber += block.timestamp + uint256(msg.sender)

IRs:
TMP_22 = CONVERT msg.sender to uint256
TMP_23(uint256) = block.timestamp + TMP_22
randomNumber(uint256) = randomNumber + TMP_23"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minedAtBlock = uint256(block.blockhash(block.number - 1))

IRs:
TMP_24(uint256) = block.number - 1
TMP_25(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_24)
TMP_26 = CONVERT TMP_25 to uint256
minedAtBlock(uint256) := TMP_26(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
minedHashRel = uint256(sha256()(minedAtBlock + randomNumber + uint256(msg.sender))) % 10000000

IRs:
TMP_27(uint256) = minedAtBlock + randomNumber
TMP_28 = CONVERT msg.sender to uint256
TMP_29(uint256) = TMP_27 + TMP_28
TMP_30(bytes32) = SOLIDITY_CALL sha256()(TMP_29)
TMP_31 = CONVERT TMP_30 to uint256
TMP_32(uint256) = TMP_31 % 10000000
minedHashRel(uint256) := TMP_32(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
balanceRel = balanceOf[msg.sender] * 1000 / minted

IRs:
REF_19(uint256) -> balanceOf[msg.sender]
TMP_33(uint256) = REF_19 * 1000
TMP_34(uint256) = TMP_33 / minted
balanceRel(uint256) := TMP_34(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
block.number < finishBountyAt

IRs:
TMP_35(bool) = block.number < finishBountyAt
CONDITION TMP_35"];
7->8[label="True"];
7->14[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
reward = 50000000000000000000

IRs:
reward(uint256) := 50000000000000000000(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_transfer(this,msg.sender,reward)

IRs:
INTERNAL_CALL, MINEA._transfer(address,address,uint256)(this,msg.sender,reward)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
minted += reward

IRs:
minted(uint256) = minted + reward"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
successesOf[msg.sender] ++

IRs:
REF_20(uint256) -> successesOf[msg.sender]
TMP_37(uint256) := REF_20(uint256)
REF_20(-> successesOf) = REF_20 + 1"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
ownerBalance += fee

IRs:
ownerBalance(uint256) = ownerBalance + fee"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
reducer ++

IRs:
TMP_38(uint256) := reducer(uint256)
reducer(uint256) = reducer + 1"];
13->33;
14[label="Node Type: IF 14

EXPRESSION:
balanceRel >= 1

IRs:
TMP_39(bool) = balanceRel >= 1
CONDITION TMP_39"];
14->15[label="True"];
14->31[label="False"];
15[label="Node Type: IF 15

EXPRESSION:
balanceRel > 255

IRs:
TMP_40(bool) = balanceRel > 255
CONDITION TMP_40"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
balanceRel = 255

IRs:
balanceRel(uint256) := 255(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
balanceRel = 2 ** balanceRel

IRs:
TMP_41(uint256) = 2 ** balanceRel
balanceRel(uint256) := TMP_41(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
balanceRel = 5000000 / balanceRel

IRs:
TMP_42(uint256) = 5000000 / balanceRel
balanceRel(uint256) := TMP_42(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
balanceRel = 5000000 - balanceRel

IRs:
TMP_43(uint256) = 5000000 - balanceRel
balanceRel(uint256) := TMP_43(uint256)"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
minedHashRel < balanceRel

IRs:
TMP_44(bool) = minedHashRel < balanceRel
CONDITION TMP_44"];
21->22[label="True"];
21->26[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
reward = minReward + minedHashRel * 1000 / reducer * 100000000000000

IRs:
TMP_45(uint256) = minedHashRel * 1000
TMP_46(uint256) = TMP_45 / reducer
TMP_47(uint256) = TMP_46 * 100000000000000
TMP_48(uint256) = minReward + TMP_47
reward(uint256) := TMP_48(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_transfer(this,msg.sender,reward)

IRs:
INTERNAL_CALL, MINEA._transfer(address,address,uint256)(this,msg.sender,reward)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
minted += reward

IRs:
minted(uint256) = minted + reward"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
successesOf[msg.sender] ++

IRs:
REF_21(uint256) -> successesOf[msg.sender]
TMP_50(uint256) := REF_21(uint256)
REF_21(-> successesOf) = REF_21 + 1"];
25->28;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
Transfer(this,msg.sender,0)

IRs:
Emit Transfer(this,msg.sender,0)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
failsOf[msg.sender] ++

IRs:
REF_22(uint256) -> failsOf[msg.sender]
TMP_52(uint256) := REF_22(uint256)
REF_22(-> failsOf) = REF_22 + 1"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
ownerBalance += fee

IRs:
ownerBalance(uint256) = ownerBalance + fee"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
reducer ++

IRs:
TMP_53(uint256) := reducer(uint256)
reducer(uint256) = reducer + 1"];
30->32;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
revert()()

IRs:
TMP_54(None) = SOLIDITY_CALL revert()()"];
31->32;
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: END_IF 33
"];
33->35;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
revert()()

IRs:
TMP_55(None) = SOLIDITY_CALL revert()()"];
34->35;
35[label="Node Type: END_IF 35
"];
}
// Function: 6220.sol-MINEA-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_57(bool) = msg.sender != owner
CONDITION TMP_57"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_58(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 6220.sol-MINEA-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = MINEA

IRs:
name(string) := MINEA(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = MINEA

IRs:
symbol(string) := MINEA(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalSupply = 10000000000000000000000000

IRs:
totalSupply(uint256) := 10000000000000000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
minted = totalSupply / 5

IRs:
TMP_56(uint256) = totalSupply / 5
minted(uint256) := TMP_56(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
minReward = 1000000000000000000

IRs:
minReward(uint256) := 1000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
fee = 700000000000000

IRs:
fee(uint256) := 700000000000000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
reducer = 1000

IRs:
reducer(uint256) := 1000(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
bountyDurationInBlocks = 36000

IRs:
bountyDurationInBlocks(uint256) := 36000(uint256)"];
}
// Function: 6220.sol-MINEA-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, MINEA._transfer(address,address,uint256)(msg.sender,_to,_value)"];
}
// Function: 6220.sol-MINEA-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_12(mapping(address => uint256)) -> allowance[_from]
REF_13(uint256) -> REF_12[msg.sender]
TMP_16(bool) = _value <= REF_13
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] -= _value

IRs:
REF_14(mapping(address => uint256)) -> allowance[_from]
REF_15(uint256) -> REF_14[msg.sender]
REF_15(-> allowance) = REF_15 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, MINEA._transfer(address,address,uint256)(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 6220.sol-MINEA-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MINEA.onlyOwner()()"];
2->1;
}
// Function: 6220.sol-MINEA-withdrawEther()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(ownerBalance)

IRs:
Transfer dest:owner value:ownerBalance"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerBalance = 0

IRs:
ownerBalance(uint256) := 0(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MINEA.onlyOwner()()"];
3->1;
}
}
