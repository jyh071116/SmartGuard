digraph G {
// Function: 6272.sol-AccessAdmin-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6272.sol-AccessAdmin-onlyAccess()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(actionContracts[msg.sender])

IRs:
REF_3(bool) -> actionContracts[msg.sender]
TMP_20(None) = SOLIDITY_CALL require(bool)(REF_3)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6272.sol-AccessAdmin-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(adminContracts[msg.sender])

IRs:
REF_2(bool) -> adminContracts[msg.sender]
TMP_19(None) = SOLIDITY_CALL require(bool)(REF_2)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6272.sol-AccessAdmin-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6272.sol-AccessAdmin-setActionContract(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
actionContracts[_actionAddr] = _useful

IRs:
REF_1(bool) -> actionContracts[_actionAddr]
REF_1(bool) (->actionContracts) := _useful(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->1;
}
// Function: 6272.sol-AccessAdmin-setAdminContract(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addr != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _addr != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
adminContracts[_addr] = _useful

IRs:
REF_0(bool) -> adminContracts[_addr]
REF_0(bool) (->adminContracts) := _useful(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 6272.sol-AccessAdmin-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_7 = CONVERT 0 to address
TMP_8(bool) = newOwner != TMP_7
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 6272.sol-CardsBase-AddPlayers(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_player = Player({owneraddress:_address})

IRs:
TMP_300(CardsBase.Player) = new Player(_address)
_player(CardsBase.Player) := TMP_300(CardsBase.Player)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
players.push(_player)

IRs:
REF_316 -> LENGTH players
TMP_302(uint256) := REF_316(uint256)
TMP_303(uint256) = TMP_302 + 1
REF_316(uint256) (->players) := TMP_303(uint256)
REF_317(CardsBase.Player) -> players[TMP_302]
REF_317(CardsBase.Player) (->players) := _player(CardsBase.Player)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
3->1;
}
// Function: 6272.sol-CardsBase-CardsBase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setAdminContract(msg.sender,true)

IRs:
INTERNAL_CALL, AccessAdmin.setAdminContract(address,bool)(msg.sender,True)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setActionContract(msg.sender,true)

IRs:
INTERNAL_CALL, AccessAdmin.setActionContract(address,bool)(msg.sender,True)"];
}
// Function: 6272.sol-CardsBase-JadeCoin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 6272.sol-CardsBase-JadeCoinMining(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roughSupply = SafeMath.add(roughSupply,_amount)

IRs:
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['roughSupply', '_amount'] 
roughSupply(uint256) := TMP_216(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
jadeBalance[_addr] = SafeMath.add(jadeBalance[_addr],_amount)

IRs:
REF_239(uint256) -> jadeBalance[_addr]
REF_241(uint256) -> jadeBalance[_addr]
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_241', '_amount'] 
REF_239(uint256) (->jadeBalance) := TMP_217(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
3->1;
}
// Function: 6272.sol-CardsBase-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6272.sol-CardsBase-allowance(address,address)
digraph{
}
// Function: 6272.sol-CardsBase-approve(address,uint256)
digraph{
}
// Function: 6272.sol-CardsBase-balanceOf(address)
digraph{
}
// Function: 6272.sol-CardsBase-balanceOfUnclaimed(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
lSave = lastJadeSaveTime[player]

IRs:
REF_163(uint256) -> lastJadeSaveTime[player]
lSave(uint256) := REF_163(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
lSave > 0 && lSave < block.timestamp

IRs:
TMP_166(bool) = lSave > 0
TMP_167(bool) = lSave < block.timestamp
TMP_168(bool) = TMP_166 && TMP_167
CONDITION TMP_168"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
SafeMath.mul(getJadeProduction(player),SafeMath.div(SafeMath.sub(block.timestamp,lSave),10))

IRs:
TMP_169(uint256) = INTERNAL_CALL, JadeCoin.getJadeProduction(address)(player)
TMP_170(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['block.timestamp', 'lSave'] 
TMP_171(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_170', '10'] 
TMP_172(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_169', 'TMP_171'] 
RETURN TMP_172"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 6272.sol-CardsBase-beginGame(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! gameStarted)

IRs:
TMP_295 = UnaryType.BANG gameStarted 
TMP_296(None) = SOLIDITY_CALL require(bool)(TMP_295)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameStarted = true

IRs:
gameStarted(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
nextSnapshotTime = firstDivsTime

IRs:
nextSnapshotTime(uint256) := firstDivsTime(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalEtherPool[1] = msg.value

IRs:
REF_314(uint256) -> totalEtherPool[1]
REF_314(uint256) (->totalEtherPool) := msg.value(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 6272.sol-CardsBase-claimResearchDividends(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(startSnapshot <= endSnapShot)

IRs:
TMP_244(bool) = startSnapshot <= endSnapShot
TMP_245(None) = SOLIDITY_CALL require(bool)(TMP_244)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(startSnapshot >= lastJadeResearchFundClaim[msg.sender])

IRs:
REF_281(uint256) -> lastJadeResearchFundClaim[msg.sender]
TMP_246(bool) = startSnapshot >= REF_281
TMP_247(None) = SOLIDITY_CALL require(bool)(TMP_246)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(endSnapShot < allocatedJadeResearchSnapshots.length)

IRs:
REF_282 -> LENGTH allocatedJadeResearchSnapshots
TMP_248(bool) = endSnapShot < REF_282
TMP_249(None) = SOLIDITY_CALL require(bool)(TMP_248)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
previousProduction = jadeProductionSnapshots[msg.sender][lastJadeResearchFundClaim[msg.sender] - 1]

IRs:
REF_283(mapping(uint256 => uint256)) -> jadeProductionSnapshots[msg.sender]
REF_284(uint256) -> lastJadeResearchFundClaim[msg.sender]
TMP_250(uint256) = REF_284 - 1
REF_285(uint256) -> REF_283[TMP_250]
previousProduction(uint256) := REF_285(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->18;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = startSnapshot

IRs:
i(uint256) := startSnapshot(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i <= endSnapShot

IRs:
TMP_251(bool) = i <= endSnapShot
CONDITION TMP_251"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
productionDuringSnapshot = jadeProductionSnapshots[msg.sender][i]

IRs:
REF_286(mapping(uint256 => uint256)) -> jadeProductionSnapshots[msg.sender]
REF_287(uint256) -> REF_286[i]
productionDuringSnapshot(uint256) := REF_287(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
soldAllProduction = jadeProductionZeroedSnapshots[msg.sender][i]

IRs:
REF_288(mapping(uint256 => bool)) -> jadeProductionZeroedSnapshots[msg.sender]
REF_289(bool) -> REF_288[i]
soldAllProduction(bool) := REF_289(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
productionDuringSnapshot == 0 && ! soldAllProduction

IRs:
TMP_252(bool) = productionDuringSnapshot == 0
TMP_253 = UnaryType.BANG soldAllProduction 
TMP_254(bool) = TMP_252 && TMP_253
CONDITION TMP_254"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
productionDuringSnapshot = previousProduction

IRs:
productionDuringSnapshot(uint256) := previousProduction(uint256)"];
13->15;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
previousProduction = productionDuringSnapshot

IRs:
previousProduction(uint256) := productionDuringSnapshot(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
researchShare += (allocatedJadeResearchSnapshots[i] * productionDuringSnapshot) / totalJadeProductionSnapshots[i]

IRs:
REF_290(uint256) -> allocatedJadeResearchSnapshots[i]
TMP_255(uint256) = REF_290 * productionDuringSnapshot
REF_291(uint256) -> totalJadeProductionSnapshots[i]
TMP_256(uint256) = TMP_255 / REF_291
researchShare(uint256) = researchShare + TMP_256"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_257(uint256) := i(uint256)
i(uint256) = i + 1"];
17->9;
18[label="Node Type: IF 18

EXPRESSION:
jadeProductionSnapshots[msg.sender][endSnapShot] == 0 && ! jadeProductionZeroedSnapshots[msg.sender][endSnapShot] && previousProduction > 0

IRs:
REF_292(mapping(uint256 => uint256)) -> jadeProductionSnapshots[msg.sender]
REF_293(uint256) -> REF_292[endSnapShot]
TMP_258(bool) = REF_293 == 0
REF_294(mapping(uint256 => bool)) -> jadeProductionZeroedSnapshots[msg.sender]
REF_295(bool) -> REF_294[endSnapShot]
TMP_259 = UnaryType.BANG REF_295 
TMP_260(bool) = TMP_258 && TMP_259
TMP_261(bool) = previousProduction > 0
TMP_262(bool) = TMP_260 && TMP_261
CONDITION TMP_262"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
jadeProductionSnapshots[msg.sender][endSnapShot] = previousProduction

IRs:
REF_296(mapping(uint256 => uint256)) -> jadeProductionSnapshots[msg.sender]
REF_297(uint256) -> REF_296[endSnapShot]
REF_297(uint256) (->jadeProductionSnapshots) := previousProduction(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
lastJadeResearchFundClaim[msg.sender] = endSnapShot + 1

IRs:
REF_298(uint256) -> lastJadeResearchFundClaim[msg.sender]
TMP_263(uint256) = endSnapShot + 1
REF_298(uint256) (->lastJadeResearchFundClaim) := TMP_263(uint256)"];
21->22;
22[label="Node Type: NEW VARIABLE 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
referer != address(0) && referer != msg.sender

IRs:
TMP_264 = CONVERT 0 to address
TMP_265(bool) = referer != TMP_264
TMP_266(bool) = referer != msg.sender
TMP_267(bool) = TMP_265 && TMP_266
CONDITION TMP_267"];
23->24[label="True"];
23->27[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
referalDivs = researchShare / 100

IRs:
TMP_268(uint256) = researchShare / 100
referalDivs(uint256) := TMP_268(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
coinBalance[referer][1] += referalDivs

IRs:
REF_299(mapping(uint8 => uint256)) -> coinBalance[referer]
REF_300(uint256) -> REF_299[1]
REF_300(-> coinBalance) = REF_300 + referalDivs"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
ReferalGain(referer,msg.sender,referalDivs)

IRs:
Emit ReferalGain(referer,msg.sender,referalDivs)"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
coinBalance[msg.sender][1] += SafeMath.sub(researchShare,referalDivs)

IRs:
REF_301(mapping(uint8 => uint256)) -> coinBalance[msg.sender]
REF_302(uint256) -> REF_301[1]
TMP_270(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['researchShare', 'referalDivs'] 
REF_302(-> coinBalance) = REF_302 + TMP_270"];
}
// Function: 6272.sol-CardsBase-coinBalanceOf(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
coinBalance[player][itype]

IRs:
REF_243(mapping(uint8 => uint256)) -> coinBalance[player]
REF_244(uint256) -> REF_243[itype]
RETURN REF_244"];
}
// Function: 6272.sol-CardsBase-endGame()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameStarted)

IRs:
TMP_298(None) = SOLIDITY_CALL require(bool)(gameStarted)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameStarted = false

IRs:
gameStarted(bool) := False(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 6272.sol-CardsBase-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalEtherPool[1] += msg.value

IRs:
REF_160(uint256) -> totalEtherPool[1]
REF_160(-> totalEtherPool) = REF_160 + msg.value"];
}
// Function: 6272.sol-CardsBase-getGameStarted()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
gameStarted

IRs:
RETURN gameStarted"];
}
// Function: 6272.sol-CardsBase-getJadeProduction(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
jadeProductionSnapshots[player][lastJadeProductionUpdate[player]]

IRs:
REF_167(mapping(uint256 => uint256)) -> jadeProductionSnapshots[player]
REF_168(uint256) -> lastJadeProductionUpdate[player]
REF_169(uint256) -> REF_167[REF_168]
RETURN REF_169"];
}
// Function: 6272.sol-CardsBase-getMaxCap(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
unitMaxCap[_addr][_cardId]

IRs:
REF_343(mapping(uint256 => uint256)) -> unitMaxCap[_addr]
REF_344(uint256) -> REF_343[_cardId]
RETURN REF_344"];
}
// Function: 6272.sol-CardsBase-getNextSnapshotTime()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
nextSnapshotTime

IRs:
RETURN nextSnapshotTime"];
}
// Function: 6272.sol-CardsBase-getOwnedCount(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
unitsOwned[player][cardId]

IRs:
REF_382(mapping(uint256 => uint256)) -> unitsOwned[player]
REF_383(uint256) -> REF_382[cardId]
RETURN REF_383"];
}
// Function: 6272.sol-CardsBase-getPlayersBattleStats(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(startId,endId) = schema.battleCardIdRange()

IRs:
TUPLE_1(uint256,uint256) = HIGH_LEVEL_CALL, dest:schema(GameConfigInterface), function:battleCardIdRange, arguments:[]  
startId(uint256)= UNPACK TUPLE_1 index: 0 
endId(uint256)= UNPACK TUPLE_1 index: 1 "];
3->4;
4[label="Node Type: BEGIN_LOOP 4
"];
4->5;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
startId <= endId

IRs:
TMP_356(bool) = startId <= endId
CONDITION TMP_356"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
attackingPower = SafeMath.add(attackingPower,getUnitsAttack(player,startId,unitsOwned[player][startId]))

IRs:
REF_373(mapping(uint256 => uint256)) -> unitsOwned[player]
REF_374(uint256) -> REF_373[startId]
TMP_357(uint256) = INTERNAL_CALL, CardsBase.getUnitsAttack(address,uint256,uint256)(player,startId,REF_374)
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['attackingPower', 'TMP_357'] 
attackingPower(uint256) := TMP_358(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
stealingPower = SafeMath.add(stealingPower,getUnitsStealingCapacity(player,startId,unitsOwned[player][startId]))

IRs:
REF_376(mapping(uint256 => uint256)) -> unitsOwned[player]
REF_377(uint256) -> REF_376[startId]
TMP_359(uint256) = INTERNAL_CALL, CardsBase.getUnitsStealingCapacity(address,uint256,uint256)(player,startId,REF_377)
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['stealingPower', 'TMP_359'] 
stealingPower(uint256) := TMP_360(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
defendingPower = SafeMath.add(defendingPower,getUnitsDefense(player,startId,unitsOwned[player][startId]))

IRs:
REF_379(mapping(uint256 => uint256)) -> unitsOwned[player]
REF_380(uint256) -> REF_379[startId]
TMP_361(uint256) = INTERNAL_CALL, CardsBase.getUnitsDefense(address,uint256,uint256)(player,startId,REF_380)
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['defendingPower', 'TMP_361'] 
defendingPower(uint256) := TMP_362(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
battlePower = SafeMath.add(attackingPower,defendingPower)

IRs:
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['attackingPower', 'defendingPower'] 
battlePower(uint256) := TMP_363(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
startId ++

IRs:
TMP_364(uint256) := startId(uint256)
startId(uint256) = startId + 1"];
10->5;
11[label="Node Type: END_LOOP 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(attackingPower,defendingPower,stealingPower,battlePower)

IRs:
RETURN attackingPower,defendingPower,stealingPower,battlePower"];
}
// Function: 6272.sol-CardsBase-getRanking()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
len = players.length

IRs:
REF_318 -> LENGTH players
len(uint256) := REF_318(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
arr = new uint256[](len)

IRs:
TMP_306(uint256[])  = new uint256[](len)
arr(uint256[]) = ['TMP_306(uint256[])']"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
arr_addr = new address[](len)

IRs:
TMP_308(address[])  = new address[](len)
arr_addr(address[]) = ['TMP_308(address[])']"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
arr_def = new uint256[](len)

IRs:
TMP_310(uint256[])  = new uint256[](len)
arr_def(uint256[]) = ['TMP_310(uint256[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
counter = 0

IRs:
counter(uint256) := 0(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->17;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
k < len

IRs:
TMP_311(bool) = k < len
CONDITION TMP_311"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
arr[counter] = getJadeProduction(players[k].owneraddress)

IRs:
REF_319(uint256) -> arr[counter]
REF_320(CardsBase.Player) -> players[k]
REF_321(address) -> REF_320.owneraddress
TMP_312(uint256) = INTERNAL_CALL, JadeCoin.getJadeProduction(address)(REF_321)
REF_319(uint256) (->arr) := TMP_312(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
arr_addr[counter] = players[k].owneraddress

IRs:
REF_322(address) -> arr_addr[counter]
REF_323(CardsBase.Player) -> players[k]
REF_324(address) -> REF_323.owneraddress
REF_322(address) (->arr_addr) := REF_324(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
(None,arr_def[counter],None,None) = getPlayersBattleStats(players[k].owneraddress)

IRs:
REF_325(uint256) -> arr_def[counter]
REF_326(CardsBase.Player) -> players[k]
REF_327(address) -> REF_326.owneraddress
TUPLE_0(uint256,uint256,uint256,uint256) = INTERNAL_CALL, CardsBase.getPlayersBattleStats(address)(REF_327)
REF_325(uint256)= UNPACK TUPLE_0 index: 1 "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
counter ++

IRs:
TMP_313(uint256) := counter(uint256)
counter(uint256) = counter + 1"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
k ++

IRs:
TMP_314(uint256) := k(uint256)
k(uint256) = k + 1"];
14->9;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->36;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < len - 1

IRs:
TMP_315(uint256) = len - 1
TMP_316(bool) = i < TMP_315
CONDITION TMP_316"];
18->21[label="True"];
18->16[label="False"];
19[label="Node Type: BEGIN_LOOP 19
"];
19->22;
20[label="Node Type: END_LOOP 20
"];
20->35;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
21->19;
22[label="Node Type: IF_LOOP 22

EXPRESSION:
j < len - i - 1

IRs:
TMP_317(uint256) = len - i
TMP_318(uint256) = TMP_317 - 1
TMP_319(bool) = j < TMP_318
CONDITION TMP_319"];
22->23[label="True"];
22->20[label="False"];
23[label="Node Type: IF 23

EXPRESSION:
arr[j] < arr[j + 1]

IRs:
REF_328(uint256) -> arr[j]
TMP_320(uint256) = j + 1
REF_329(uint256) -> arr[TMP_320]
TMP_321(bool) = REF_328 < REF_329
CONDITION TMP_321"];
23->24[label="True"];
23->33[label="False"];
24[label="Node Type: NEW VARIABLE 24

EXPRESSION:
temp = arr[j]

IRs:
REF_330(uint256) -> arr[j]
temp(uint256) := REF_330(uint256)"];
24->25;
25[label="Node Type: NEW VARIABLE 25

EXPRESSION:
temp_addr = arr_addr[j]

IRs:
REF_331(address) -> arr_addr[j]
temp_addr(address) := REF_331(address)"];
25->26;
26[label="Node Type: NEW VARIABLE 26

EXPRESSION:
temp_def = arr_def[j]

IRs:
REF_332(uint256) -> arr_def[j]
temp_def(uint256) := REF_332(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
arr[j] = arr[j + 1]

IRs:
REF_333(uint256) -> arr[j]
TMP_322(uint256) = j + 1
REF_334(uint256) -> arr[TMP_322]
REF_333(uint256) (->arr) := REF_334(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
arr[j + 1] = temp

IRs:
TMP_323(uint256) = j + 1
REF_335(uint256) -> arr[TMP_323]
REF_335(uint256) (->arr) := temp(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
arr_addr[j] = arr_addr[j + 1]

IRs:
REF_336(address) -> arr_addr[j]
TMP_324(uint256) = j + 1
REF_337(address) -> arr_addr[TMP_324]
REF_336(address) (->arr_addr) := REF_337(address)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
arr_addr[j + 1] = temp_addr

IRs:
TMP_325(uint256) = j + 1
REF_338(address) -> arr_addr[TMP_325]
REF_338(address) (->arr_addr) := temp_addr(address)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
arr_def[j] = arr_def[j + 1]

IRs:
REF_339(uint256) -> arr_def[j]
TMP_326(uint256) = j + 1
REF_340(uint256) -> arr_def[TMP_326]
REF_339(uint256) (->arr_def) := REF_340(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
arr_def[j + 1] = temp_def

IRs:
TMP_327(uint256) = j + 1
REF_341(uint256) -> arr_def[TMP_327]
REF_341(uint256) (->arr_def) := temp_def(uint256)"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
j ++

IRs:
TMP_328(uint256) := j(uint256)
j(uint256) = j + 1"];
34->22;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i ++

IRs:
TMP_329(uint256) := i(uint256)
i(uint256) = i + 1"];
35->18;
36[label="Node Type: RETURN 36

EXPRESSION:
(arr_addr,arr,arr_def)

IRs:
RETURN arr_addr,arr,arr_def"];
}
// Function: 6272.sol-CardsBase-getTotalEtherPool(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalEtherPool[itype]

IRs:
REF_268(uint256) -> totalEtherPool[itype]
RETURN REF_268"];
}
// Function: 6272.sol-CardsBase-getTotalJadeProduction()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalJadeProduction

IRs:
RETURN totalJadeProduction"];
}
// Function: 6272.sol-CardsBase-getTotalUsers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
players.length

IRs:
REF_342 -> LENGTH players
RETURN REF_342"];
}
// Function: 6272.sol-CardsBase-getUintCoinProduction(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uintProduction[_address][cardId]

IRs:
REF_514(mapping(uint256 => uint256)) -> uintProduction[_address]
REF_515(uint256) -> REF_514[cardId]
RETURN REF_515"];
}
// Function: 6272.sol-CardsBase-getUintsOwnerCount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uintsOwnerCount[_address]

IRs:
REF_401(uint256) -> uintsOwnerCount[_address]
RETURN REF_401"];
}
// Function: 6272.sol-CardsBase-getUnitAttackIncreases(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
unitAttackIncreases[_address][cardId]

IRs:
REF_442(mapping(uint256 => uint256)) -> unitAttackIncreases[_address]
REF_443(uint256) -> REF_442[cardId]
RETURN REF_443"];
}
// Function: 6272.sol-CardsBase-getUnitAttackMultiplier(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
unitAttackMultiplier[_address][cardId]

IRs:
REF_454(mapping(uint256 => uint256)) -> unitAttackMultiplier[_address]
REF_455(uint256) -> REF_454[cardId]
RETURN REF_455"];
}
// Function: 6272.sol-CardsBase-getUnitCoinProductionIncreases(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
unitCoinProductionIncreases[_address][cardId]

IRs:
REF_408(mapping(uint256 => uint256)) -> unitCoinProductionIncreases[_address]
REF_409(uint256) -> REF_408[cardId]
RETURN REF_409"];
}
// Function: 6272.sol-CardsBase-getUnitCoinProductionMultiplier(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
unitCoinProductionMultiplier[_address][cardId]

IRs:
REF_420(mapping(uint256 => uint256)) -> unitCoinProductionMultiplier[_address]
REF_421(uint256) -> REF_420[cardId]
RETURN REF_421"];
}
// Function: 6272.sol-CardsBase-getUnitDefenseIncreases(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
unitDefenseIncreases[_address][cardId]

IRs:
REF_466(mapping(uint256 => uint256)) -> unitDefenseIncreases[_address]
REF_467(uint256) -> REF_466[cardId]
RETURN REF_467"];
}
// Function: 6272.sol-CardsBase-getUnitDefenseMultiplier(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
unitDefenseMultiplier[_address][cardId]

IRs:
REF_478(mapping(uint256 => uint256)) -> unitDefenseMultiplier[_address]
REF_479(uint256) -> REF_478[cardId]
RETURN REF_479"];
}
// Function: 6272.sol-CardsBase-getUnitJadeStealingIncreases(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
unitJadeStealingIncreases[_address][cardId]

IRs:
REF_490(mapping(uint256 => uint256)) -> unitJadeStealingIncreases[_address]
REF_491(uint256) -> REF_490[cardId]
RETURN REF_491"];
}
// Function: 6272.sol-CardsBase-getUnitJadeStealingMultiplier(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
unitJadeStealingMultiplier[_address][cardId]

IRs:
REF_502(mapping(uint256 => uint256)) -> unitJadeStealingMultiplier[_address]
REF_503(uint256) -> REF_502[cardId]
RETURN REF_503"];
}
// Function: 6272.sol-CardsBase-getUnitsAttack(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(amount * (schema.unitAttack(unitId) + unitAttackIncreases[player][unitId]) * (10 + unitAttackMultiplier[player][unitId])) / 10

IRs:
TMP_338(uint256) = HIGH_LEVEL_CALL, dest:schema(GameConfigInterface), function:unitAttack, arguments:['unitId']  
REF_357(mapping(uint256 => uint256)) -> unitAttackIncreases[player]
REF_358(uint256) -> REF_357[unitId]
TMP_339(uint256) = TMP_338 + REF_358
TMP_340(uint256) = amount * TMP_339
REF_359(mapping(uint256 => uint256)) -> unitAttackMultiplier[player]
REF_360(uint256) -> REF_359[unitId]
TMP_341(uint256) = 10 + REF_360
TMP_342(uint256) = TMP_340 * TMP_341
TMP_343(uint256) = TMP_342 / 10
RETURN TMP_343"];
}
// Function: 6272.sol-CardsBase-getUnitsDefense(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(amount * (schema.unitDefense(unitId) + unitDefenseIncreases[player][unitId]) * (10 + unitDefenseMultiplier[player][unitId])) / 10

IRs:
TMP_344(uint256) = HIGH_LEVEL_CALL, dest:schema(GameConfigInterface), function:unitDefense, arguments:['unitId']  
REF_362(mapping(uint256 => uint256)) -> unitDefenseIncreases[player]
REF_363(uint256) -> REF_362[unitId]
TMP_345(uint256) = TMP_344 + REF_363
TMP_346(uint256) = amount * TMP_345
REF_364(mapping(uint256 => uint256)) -> unitDefenseMultiplier[player]
REF_365(uint256) -> REF_364[unitId]
TMP_347(uint256) = 10 + REF_365
TMP_348(uint256) = TMP_346 * TMP_347
TMP_349(uint256) = TMP_348 / 10
RETURN TMP_349"];
}
// Function: 6272.sol-CardsBase-getUnitsInProduction(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
SafeMath.div(SafeMath.mul(amount,uintProduction[player][unitId]),unitsOwned[player][unitId])

IRs:
REF_352(mapping(uint256 => uint256)) -> uintProduction[player]
REF_353(uint256) -> REF_352[unitId]
TMP_336(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amount', 'REF_353'] 
REF_354(mapping(uint256 => uint256)) -> unitsOwned[player]
REF_355(uint256) -> REF_354[unitId]
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_336', 'REF_355'] 
RETURN TMP_337"];
}
// Function: 6272.sol-CardsBase-getUnitsProduction(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(amount * (schema.unitCoinProduction(unitId) + unitCoinProductionIncreases[player][unitId]) * (10 + unitCoinProductionMultiplier[player][unitId])) / 10

IRs:
TMP_330(uint256) = HIGH_LEVEL_CALL, dest:schema(GameConfigInterface), function:unitCoinProduction, arguments:['unitId']  
REF_346(mapping(uint256 => uint256)) -> unitCoinProductionIncreases[player]
REF_347(uint256) -> REF_346[unitId]
TMP_331(uint256) = TMP_330 + REF_347
TMP_332(uint256) = amount * TMP_331
REF_348(mapping(uint256 => uint256)) -> unitCoinProductionMultiplier[player]
REF_349(uint256) -> REF_348[unitId]
TMP_333(uint256) = 10 + REF_349
TMP_334(uint256) = TMP_332 * TMP_333
TMP_335(uint256) = TMP_334 / 10
RETURN TMP_335"];
}
// Function: 6272.sol-CardsBase-getUnitsStealingCapacity(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(amount * (schema.unitStealingCapacity(unitId) + unitJadeStealingIncreases[player][unitId]) * (10 + unitJadeStealingMultiplier[player][unitId])) / 10

IRs:
TMP_350(uint256) = HIGH_LEVEL_CALL, dest:schema(GameConfigInterface), function:unitStealingCapacity, arguments:['unitId']  
REF_367(mapping(uint256 => uint256)) -> unitJadeStealingIncreases[player]
REF_368(uint256) -> REF_367[unitId]
TMP_351(uint256) = TMP_350 + REF_368
TMP_352(uint256) = amount * TMP_351
REF_369(mapping(uint256 => uint256)) -> unitJadeStealingMultiplier[player]
REF_370(uint256) -> REF_369[unitId]
TMP_353(uint256) = 10 + REF_370
TMP_354(uint256) = TMP_352 * TMP_353
TMP_355(uint256) = TMP_354 / 10
RETURN TMP_355"];
}
// Function: 6272.sol-CardsBase-getUpgradesOwned(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
upgradesOwned[player][upgradeId]

IRs:
REF_394(mapping(uint256 => uint256)) -> upgradesOwned[player]
REF_395(uint256) -> REF_394[upgradeId]
RETURN REF_395"];
}
// Function: 6272.sol-CardsBase-getlastJadeProductionUpdate(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
lastJadeProductionUpdate[player]

IRs:
REF_170(uint256) -> lastJadeProductionUpdate[player]
RETURN REF_170"];
}
// Function: 6272.sol-CardsBase-increasePlayersJadeProduction(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
jadeProductionSnapshots[player][allocatedJadeResearchSnapshots.length] = SafeMath.add(getJadeProduction(player),increase)

IRs:
REF_171(mapping(uint256 => uint256)) -> jadeProductionSnapshots[player]
REF_172 -> LENGTH allocatedJadeResearchSnapshots
REF_173(uint256) -> REF_171[REF_172]
TMP_173(uint256) = INTERNAL_CALL, JadeCoin.getJadeProduction(address)(player)
TMP_174(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_173', 'increase'] 
REF_173(uint256) (->jadeProductionSnapshots) := TMP_174(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lastJadeProductionUpdate[player] = allocatedJadeResearchSnapshots.length

IRs:
REF_175(uint256) -> lastJadeProductionUpdate[player]
REF_176 -> LENGTH allocatedJadeResearchSnapshots
REF_175(uint256) (->lastJadeProductionUpdate) := REF_176(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalJadeProduction = SafeMath.add(totalJadeProduction,increase)

IRs:
TMP_175(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalJadeProduction', 'increase'] 
totalJadeProduction(uint256) := TMP_175(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
4->1;
}
// Function: 6272.sol-CardsBase-onlyAccess()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(actionContracts[msg.sender])

IRs:
REF_569(bool) -> actionContracts[msg.sender]
TMP_449(None) = SOLIDITY_CALL require(bool)(REF_569)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6272.sol-CardsBase-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(adminContracts[msg.sender])

IRs:
REF_568(bool) -> adminContracts[msg.sender]
TMP_448(None) = SOLIDITY_CALL require(bool)(REF_568)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6272.sol-CardsBase-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_450(bool) = msg.sender == owner
TMP_451(None) = SOLIDITY_CALL require(bool)(TMP_450)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6272.sol-CardsBase-reducePlayersJadeProduction(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
previousProduction = getJadeProduction(player)

IRs:
TMP_177(uint256) = INTERNAL_CALL, JadeCoin.getJadeProduction(address)(player)
previousProduction(uint256) := TMP_177(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newProduction = SafeMath.sub(previousProduction,decrease)

IRs:
TMP_178(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['previousProduction', 'decrease'] 
newProduction(uint256) := TMP_178(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
newProduction == 0

IRs:
TMP_179(bool) = newProduction == 0
CONDITION TMP_179"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jadeProductionZeroedSnapshots[player][allocatedJadeResearchSnapshots.length] = true

IRs:
REF_179(mapping(uint256 => bool)) -> jadeProductionZeroedSnapshots[player]
REF_180 -> LENGTH allocatedJadeResearchSnapshots
REF_181(bool) -> REF_179[REF_180]
REF_181(bool) (->jadeProductionZeroedSnapshots) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete jadeProductionSnapshots[player][allocatedJadeResearchSnapshots.length]

IRs:
REF_182(mapping(uint256 => uint256)) -> jadeProductionSnapshots[player]
REF_183 -> LENGTH allocatedJadeResearchSnapshots
REF_184(uint256) -> REF_182[REF_183]
REF_182 = delete REF_184 "];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
jadeProductionSnapshots[player][allocatedJadeResearchSnapshots.length] = newProduction

IRs:
REF_185(mapping(uint256 => uint256)) -> jadeProductionSnapshots[player]
REF_186 -> LENGTH allocatedJadeResearchSnapshots
REF_187(uint256) -> REF_185[REF_186]
REF_187(uint256) (->jadeProductionSnapshots) := newProduction(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
lastJadeProductionUpdate[player] = allocatedJadeResearchSnapshots.length

IRs:
REF_188(uint256) -> lastJadeProductionUpdate[player]
REF_189 -> LENGTH allocatedJadeResearchSnapshots
REF_188(uint256) (->lastJadeProductionUpdate) := REF_189(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalJadeProduction = SafeMath.sub(totalJadeProduction,decrease)

IRs:
TMP_180(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalJadeProduction', 'decrease'] 
totalJadeProduction(uint256) := TMP_180(uint256)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
10->1;
}
// Function: 6272.sol-CardsBase-removeUnitMultipliers(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->30;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
upgradeClass == 0

IRs:
TMP_430(bool) = upgradeClass == 0
CONDITION TMP_430"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
unitCoinProductionIncreases[player][unitId] -= upgradeValue

IRs:
REF_543(mapping(uint256 => uint256)) -> unitCoinProductionIncreases[player]
REF_544(uint256) -> REF_543[unitId]
REF_544(-> unitCoinProductionIncreases) = REF_544 - upgradeValue"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
productionLoss = unitsOwned[player][unitId] * upgradeValue * (10 + unitCoinProductionMultiplier[player][unitId])

IRs:
REF_545(mapping(uint256 => uint256)) -> unitsOwned[player]
REF_546(uint256) -> REF_545[unitId]
TMP_431(uint256) = REF_546 * upgradeValue
REF_547(mapping(uint256 => uint256)) -> unitCoinProductionMultiplier[player]
REF_548(uint256) -> REF_547[unitId]
TMP_432(uint256) = 10 + REF_548
TMP_433(uint256) = TMP_431 * TMP_432
productionLoss(uint256) := TMP_433(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
reducePlayersJadeProduction(player,productionLoss)

IRs:
INTERNAL_CALL, JadeCoin.reducePlayersJadeProduction(address,uint256)(player,productionLoss)"];
5->29;
6[label="Node Type: IF 6

EXPRESSION:
upgradeClass == 1

IRs:
TMP_435(bool) = upgradeClass == 1
CONDITION TMP_435"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
unitCoinProductionMultiplier[player][unitId] -= upgradeValue

IRs:
REF_549(mapping(uint256 => uint256)) -> unitCoinProductionMultiplier[player]
REF_550(uint256) -> REF_549[unitId]
REF_550(-> unitCoinProductionMultiplier) = REF_550 - upgradeValue"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
productionLoss = unitsOwned[player][unitId] * upgradeValue * (schema.unitCoinProduction(unitId) + unitCoinProductionIncreases[player][unitId])

IRs:
REF_551(mapping(uint256 => uint256)) -> unitsOwned[player]
REF_552(uint256) -> REF_551[unitId]
TMP_436(uint256) = REF_552 * upgradeValue
TMP_437(uint256) = HIGH_LEVEL_CALL, dest:schema(GameConfigInterface), function:unitCoinProduction, arguments:['unitId']  
REF_554(mapping(uint256 => uint256)) -> unitCoinProductionIncreases[player]
REF_555(uint256) -> REF_554[unitId]
TMP_438(uint256) = TMP_437 + REF_555
TMP_439(uint256) = TMP_436 * TMP_438
productionLoss(uint256) := TMP_439(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
reducePlayersJadeProduction(player,productionLoss)

IRs:
INTERNAL_CALL, JadeCoin.reducePlayersJadeProduction(address,uint256)(player,productionLoss)"];
9->28;
10[label="Node Type: IF 10

EXPRESSION:
upgradeClass == 2

IRs:
TMP_441(bool) = upgradeClass == 2
CONDITION TMP_441"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
unitAttackIncreases[player][unitId] -= upgradeValue

IRs:
REF_556(mapping(uint256 => uint256)) -> unitAttackIncreases[player]
REF_557(uint256) -> REF_556[unitId]
REF_557(-> unitAttackIncreases) = REF_557 - upgradeValue"];
11->27;
12[label="Node Type: IF 12

EXPRESSION:
upgradeClass == 3

IRs:
TMP_442(bool) = upgradeClass == 3
CONDITION TMP_442"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
unitAttackMultiplier[player][unitId] -= upgradeValue

IRs:
REF_558(mapping(uint256 => uint256)) -> unitAttackMultiplier[player]
REF_559(uint256) -> REF_558[unitId]
REF_559(-> unitAttackMultiplier) = REF_559 - upgradeValue"];
13->26;
14[label="Node Type: IF 14

EXPRESSION:
upgradeClass == 4

IRs:
TMP_443(bool) = upgradeClass == 4
CONDITION TMP_443"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
unitDefenseIncreases[player][unitId] -= upgradeValue

IRs:
REF_560(mapping(uint256 => uint256)) -> unitDefenseIncreases[player]
REF_561(uint256) -> REF_560[unitId]
REF_561(-> unitDefenseIncreases) = REF_561 - upgradeValue"];
15->25;
16[label="Node Type: IF 16

EXPRESSION:
upgradeClass == 5

IRs:
TMP_444(bool) = upgradeClass == 5
CONDITION TMP_444"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
unitDefenseMultiplier[player][unitId] -= upgradeValue

IRs:
REF_562(mapping(uint256 => uint256)) -> unitDefenseMultiplier[player]
REF_563(uint256) -> REF_562[unitId]
REF_563(-> unitDefenseMultiplier) = REF_563 - upgradeValue"];
17->24;
18[label="Node Type: IF 18

EXPRESSION:
upgradeClass == 6

IRs:
TMP_445(bool) = upgradeClass == 6
CONDITION TMP_445"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
unitJadeStealingIncreases[player][unitId] -= upgradeValue

IRs:
REF_564(mapping(uint256 => uint256)) -> unitJadeStealingIncreases[player]
REF_565(uint256) -> REF_564[unitId]
REF_565(-> unitJadeStealingIncreases) = REF_565 - upgradeValue"];
19->23;
20[label="Node Type: IF 20

EXPRESSION:
upgradeClass == 7

IRs:
TMP_446(bool) = upgradeClass == 7
CONDITION TMP_446"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
unitJadeStealingMultiplier[player][unitId] -= upgradeValue

IRs:
REF_566(mapping(uint256 => uint256)) -> unitJadeStealingMultiplier[player]
REF_567(uint256) -> REF_566[unitId]
REF_567(-> unitJadeStealingMultiplier) = REF_567 - upgradeValue"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
30->1;
}
// Function: 6272.sol-CardsBase-setActionContract(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
actionContracts[_actionAddr] = _useful

IRs:
REF_313(bool) -> actionContracts[_actionAddr]
REF_313(bool) (->actionContracts) := _useful(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->1;
}
// Function: 6272.sol-CardsBase-setAdminContract(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addr != address(0))

IRs:
TMP_281 = CONVERT 0 to address
TMP_282(bool) = _addr != TMP_281
TMP_283(None) = SOLIDITY_CALL require(bool)(TMP_282)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
adminContracts[_addr] = _useful

IRs:
REF_312(bool) -> adminContracts[_addr]
REF_312(bool) (->adminContracts) := _useful(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 6272.sol-CardsBase-setCoinBalance(address,uint256,uint8,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
coinBalance[player][itype] = SafeMath.add(coinBalance[player][itype],eth)

IRs:
REF_251(mapping(uint8 => uint256)) -> coinBalance[player]
REF_252(uint256) -> REF_251[itype]
REF_254(mapping(uint8 => uint256)) -> coinBalance[player]
REF_255(uint256) -> REF_254[itype]
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_255', 'eth'] 
REF_252(uint256) (->coinBalance) := TMP_225(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_226 = UnaryType.BANG iflag 
CONDITION TMP_226"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
coinBalance[player][itype] = SafeMath.sub(coinBalance[player][itype],eth)

IRs:
REF_256(mapping(uint8 => uint256)) -> coinBalance[player]
REF_257(uint256) -> REF_256[itype]
REF_259(mapping(uint8 => uint256)) -> coinBalance[player]
REF_260(uint256) -> REF_259[itype]
TMP_227(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_260', 'eth'] 
REF_257(uint256) (->coinBalance) := TMP_227(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-setConfigAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
schema = GameConfigInterface(_address)

IRs:
TMP_293 = CONVERT _address to GameConfigInterface
schema(GameConfigInterface) := TMP_293(GameConfigInterface)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 6272.sol-CardsBase-setJadeCoin(address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
jadeBalance[player] = SafeMath.add(jadeBalance[player],coin)

IRs:
REF_245(uint256) -> jadeBalance[player]
REF_247(uint256) -> jadeBalance[player]
TMP_221(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_247', 'coin'] 
REF_245(uint256) (->jadeBalance) := TMP_221(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_222 = UnaryType.BANG iflag 
CONDITION TMP_222"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jadeBalance[player] = SafeMath.sub(jadeBalance[player],coin)

IRs:
REF_248(uint256) -> jadeBalance[player]
REF_250(uint256) -> jadeBalance[player]
TMP_223(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_250', 'coin'] 
REF_248(uint256) (->jadeBalance) := TMP_223(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-setJadeCoinZero(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
jadeBalance[player] = 0

IRs:
REF_269(uint256) -> jadeBalance[player]
REF_269(uint256) (->jadeBalance) := 0(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
2->1;
}
// Function: 6272.sol-CardsBase-setLastJadeSaveTime(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lastJadeSaveTime[player] = block.timestamp

IRs:
REF_261(uint256) -> lastJadeSaveTime[player]
REF_261(uint256) (->lastJadeSaveTime) := block.timestamp(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
2->1;
}
// Function: 6272.sol-CardsBase-setOwnedCount(address,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unitsOwned[player][cardId] = SafeMath.add(unitsOwned[player][cardId],amount)

IRs:
REF_384(mapping(uint256 => uint256)) -> unitsOwned[player]
REF_385(uint256) -> REF_384[cardId]
REF_387(mapping(uint256 => uint256)) -> unitsOwned[player]
REF_388(uint256) -> REF_387[cardId]
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_388', 'amount'] 
REF_385(uint256) (->unitsOwned) := TMP_365(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_366 = UnaryType.BANG iflag 
CONDITION TMP_366"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
unitsOwned[player][cardId] = SafeMath.sub(unitsOwned[player][cardId],amount)

IRs:
REF_389(mapping(uint256 => uint256)) -> unitsOwned[player]
REF_390(uint256) -> REF_389[cardId]
REF_392(mapping(uint256 => uint256)) -> unitsOwned[player]
REF_393(uint256) -> REF_392[cardId]
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_393', 'amount'] 
REF_390(uint256) (->unitsOwned) := TMP_367(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-setRoughSupply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roughSupply = SafeMath.add(roughSupply,iroughSupply)

IRs:
TMP_219(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['roughSupply', 'iroughSupply'] 
roughSupply(uint256) := TMP_219(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
2->1;
}
// Function: 6272.sol-CardsBase-setTotalEtherPool(uint256,uint8,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalEtherPool[itype] = SafeMath.add(totalEtherPool[itype],inEth)

IRs:
REF_262(uint256) -> totalEtherPool[itype]
REF_264(uint256) -> totalEtherPool[itype]
TMP_230(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_264', 'inEth'] 
REF_262(uint256) (->totalEtherPool) := TMP_230(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_231 = UnaryType.BANG iflag 
CONDITION TMP_231"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalEtherPool[itype] = SafeMath.sub(totalEtherPool[itype],inEth)

IRs:
REF_265(uint256) -> totalEtherPool[itype]
REF_267(uint256) -> totalEtherPool[itype]
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_267', 'inEth'] 
REF_265(uint256) (->totalEtherPool) := TMP_232(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-setUintCoinProduction(address,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
uintProduction[_address][cardId] = SafeMath.add(uintProduction[_address][cardId],iValue)

IRs:
REF_504(mapping(uint256 => uint256)) -> uintProduction[_address]
REF_505(uint256) -> REF_504[cardId]
REF_507(mapping(uint256 => uint256)) -> uintProduction[_address]
REF_508(uint256) -> REF_507[cardId]
TMP_407(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_508', 'iValue'] 
REF_505(uint256) (->uintProduction) := TMP_407(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_408 = UnaryType.BANG iflag 
CONDITION TMP_408"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
uintProduction[_address][cardId] = SafeMath.sub(uintProduction[_address][cardId],iValue)

IRs:
REF_509(mapping(uint256 => uint256)) -> uintProduction[_address]
REF_510(uint256) -> REF_509[cardId]
REF_512(mapping(uint256 => uint256)) -> uintProduction[_address]
REF_513(uint256) -> REF_512[cardId]
TMP_409(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_513', 'iValue'] 
REF_510(uint256) (->uintProduction) := TMP_409(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-setUintsOwnerCount(address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
uintsOwnerCount[_address] = SafeMath.add(uintsOwnerCount[_address],amount)

IRs:
REF_402(uint256) -> uintsOwnerCount[_address]
REF_404(uint256) -> uintsOwnerCount[_address]
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_404', 'amount'] 
REF_402(uint256) (->uintsOwnerCount) := TMP_371(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_372 = UnaryType.BANG iflag 
CONDITION TMP_372"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
uintsOwnerCount[_address] = SafeMath.sub(uintsOwnerCount[_address],amount)

IRs:
REF_405(uint256) -> uintsOwnerCount[_address]
REF_407(uint256) -> uintsOwnerCount[_address]
TMP_373(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_407', 'amount'] 
REF_405(uint256) (->uintsOwnerCount) := TMP_373(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-setUnitAttackIncreases(address,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unitAttackIncreases[_address][cardId] = SafeMath.add(unitAttackIncreases[_address][cardId],iValue)

IRs:
REF_432(mapping(uint256 => uint256)) -> unitAttackIncreases[_address]
REF_433(uint256) -> REF_432[cardId]
REF_435(mapping(uint256 => uint256)) -> unitAttackIncreases[_address]
REF_436(uint256) -> REF_435[cardId]
TMP_383(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_436', 'iValue'] 
REF_433(uint256) (->unitAttackIncreases) := TMP_383(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_384 = UnaryType.BANG iflag 
CONDITION TMP_384"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
unitAttackIncreases[_address][cardId] = SafeMath.sub(unitAttackIncreases[_address][cardId],iValue)

IRs:
REF_437(mapping(uint256 => uint256)) -> unitAttackIncreases[_address]
REF_438(uint256) -> REF_437[cardId]
REF_440(mapping(uint256 => uint256)) -> unitAttackIncreases[_address]
REF_441(uint256) -> REF_440[cardId]
TMP_385(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_441', 'iValue'] 
REF_438(uint256) (->unitAttackIncreases) := TMP_385(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-setUnitAttackMultiplier(address,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unitAttackMultiplier[_address][cardId] = SafeMath.add(unitAttackMultiplier[_address][cardId],iValue)

IRs:
REF_444(mapping(uint256 => uint256)) -> unitAttackMultiplier[_address]
REF_445(uint256) -> REF_444[cardId]
REF_447(mapping(uint256 => uint256)) -> unitAttackMultiplier[_address]
REF_448(uint256) -> REF_447[cardId]
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_448', 'iValue'] 
REF_445(uint256) (->unitAttackMultiplier) := TMP_387(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_388 = UnaryType.BANG iflag 
CONDITION TMP_388"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
unitAttackMultiplier[_address][cardId] = SafeMath.sub(unitAttackMultiplier[_address][cardId],iValue)

IRs:
REF_449(mapping(uint256 => uint256)) -> unitAttackMultiplier[_address]
REF_450(uint256) -> REF_449[cardId]
REF_452(mapping(uint256 => uint256)) -> unitAttackMultiplier[_address]
REF_453(uint256) -> REF_452[cardId]
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_453', 'iValue'] 
REF_450(uint256) (->unitAttackMultiplier) := TMP_389(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-setUnitCoinProductionIncreases(address,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unitCoinProductionIncreases[_address][cardId] = SafeMath.add(unitCoinProductionIncreases[_address][cardId],iValue)

IRs:
REF_410(mapping(uint256 => uint256)) -> unitCoinProductionIncreases[_address]
REF_411(uint256) -> REF_410[cardId]
REF_413(mapping(uint256 => uint256)) -> unitCoinProductionIncreases[_address]
REF_414(uint256) -> REF_413[cardId]
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_414', 'iValue'] 
REF_411(uint256) (->unitCoinProductionIncreases) := TMP_375(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_376 = UnaryType.BANG iflag 
CONDITION TMP_376"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
unitCoinProductionIncreases[_address][cardId] = SafeMath.sub(unitCoinProductionIncreases[_address][cardId],iValue)

IRs:
REF_415(mapping(uint256 => uint256)) -> unitCoinProductionIncreases[_address]
REF_416(uint256) -> REF_415[cardId]
REF_418(mapping(uint256 => uint256)) -> unitCoinProductionIncreases[_address]
REF_419(uint256) -> REF_418[cardId]
TMP_377(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_419', 'iValue'] 
REF_416(uint256) (->unitCoinProductionIncreases) := TMP_377(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-setUnitCoinProductionMultiplier(address,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unitCoinProductionMultiplier[_address][cardId] = SafeMath.add(unitCoinProductionMultiplier[_address][cardId],iValue)

IRs:
REF_422(mapping(uint256 => uint256)) -> unitCoinProductionMultiplier[_address]
REF_423(uint256) -> REF_422[cardId]
REF_425(mapping(uint256 => uint256)) -> unitCoinProductionMultiplier[_address]
REF_426(uint256) -> REF_425[cardId]
TMP_379(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_426', 'iValue'] 
REF_423(uint256) (->unitCoinProductionMultiplier) := TMP_379(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_380 = UnaryType.BANG iflag 
CONDITION TMP_380"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
unitCoinProductionMultiplier[_address][cardId] = SafeMath.sub(unitCoinProductionMultiplier[_address][cardId],iValue)

IRs:
REF_427(mapping(uint256 => uint256)) -> unitCoinProductionMultiplier[_address]
REF_428(uint256) -> REF_427[cardId]
REF_430(mapping(uint256 => uint256)) -> unitCoinProductionMultiplier[_address]
REF_431(uint256) -> REF_430[cardId]
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_431', 'iValue'] 
REF_428(uint256) (->unitCoinProductionMultiplier) := TMP_381(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-setUnitDefenseIncreases(address,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unitDefenseIncreases[_address][cardId] = SafeMath.add(unitDefenseIncreases[_address][cardId],iValue)

IRs:
REF_456(mapping(uint256 => uint256)) -> unitDefenseIncreases[_address]
REF_457(uint256) -> REF_456[cardId]
REF_459(mapping(uint256 => uint256)) -> unitDefenseIncreases[_address]
REF_460(uint256) -> REF_459[cardId]
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_460', 'iValue'] 
REF_457(uint256) (->unitDefenseIncreases) := TMP_391(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_392 = UnaryType.BANG iflag 
CONDITION TMP_392"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
unitDefenseIncreases[_address][cardId] = SafeMath.sub(unitDefenseIncreases[_address][cardId],iValue)

IRs:
REF_461(mapping(uint256 => uint256)) -> unitDefenseIncreases[_address]
REF_462(uint256) -> REF_461[cardId]
REF_464(mapping(uint256 => uint256)) -> unitDefenseIncreases[_address]
REF_465(uint256) -> REF_464[cardId]
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_465', 'iValue'] 
REF_462(uint256) (->unitDefenseIncreases) := TMP_393(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-setUnitJadeStealingIncreases(address,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unitJadeStealingIncreases[_address][cardId] = SafeMath.add(unitJadeStealingIncreases[_address][cardId],iValue)

IRs:
REF_480(mapping(uint256 => uint256)) -> unitJadeStealingIncreases[_address]
REF_481(uint256) -> REF_480[cardId]
REF_483(mapping(uint256 => uint256)) -> unitJadeStealingIncreases[_address]
REF_484(uint256) -> REF_483[cardId]
TMP_399(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_484', 'iValue'] 
REF_481(uint256) (->unitJadeStealingIncreases) := TMP_399(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_400 = UnaryType.BANG iflag 
CONDITION TMP_400"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
unitJadeStealingIncreases[_address][cardId] = SafeMath.sub(unitJadeStealingIncreases[_address][cardId],iValue)

IRs:
REF_485(mapping(uint256 => uint256)) -> unitJadeStealingIncreases[_address]
REF_486(uint256) -> REF_485[cardId]
REF_488(mapping(uint256 => uint256)) -> unitJadeStealingIncreases[_address]
REF_489(uint256) -> REF_488[cardId]
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_489', 'iValue'] 
REF_486(uint256) (->unitJadeStealingIncreases) := TMP_401(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-setUnitJadeStealingMultiplier(address,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unitJadeStealingMultiplier[_address][cardId] = SafeMath.add(unitJadeStealingMultiplier[_address][cardId],iValue)

IRs:
REF_492(mapping(uint256 => uint256)) -> unitJadeStealingMultiplier[_address]
REF_493(uint256) -> REF_492[cardId]
REF_495(mapping(uint256 => uint256)) -> unitJadeStealingMultiplier[_address]
REF_496(uint256) -> REF_495[cardId]
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_496', 'iValue'] 
REF_493(uint256) (->unitJadeStealingMultiplier) := TMP_403(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_404 = UnaryType.BANG iflag 
CONDITION TMP_404"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
unitJadeStealingMultiplier[_address][cardId] = SafeMath.sub(unitJadeStealingMultiplier[_address][cardId],iValue)

IRs:
REF_497(mapping(uint256 => uint256)) -> unitJadeStealingMultiplier[_address]
REF_498(uint256) -> REF_497[cardId]
REF_500(mapping(uint256 => uint256)) -> unitJadeStealingMultiplier[_address]
REF_501(uint256) -> REF_500[cardId]
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_501', 'iValue'] 
REF_498(uint256) (->unitJadeStealingMultiplier) := TMP_405(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-setUpgradesOwned(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradesOwned[player][upgradeId] = SafeMath.add(upgradesOwned[player][upgradeId],1)

IRs:
REF_396(mapping(uint256 => uint256)) -> upgradesOwned[player]
REF_397(uint256) -> REF_396[upgradeId]
REF_399(mapping(uint256 => uint256)) -> upgradesOwned[player]
REF_400(uint256) -> REF_399[upgradeId]
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_400', '1'] 
REF_397(uint256) (->upgradesOwned) := TMP_369(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
2->1;
}
// Function: 6272.sol-CardsBase-setunitDefenseMultiplier(address,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
unitDefenseMultiplier[_address][cardId] = SafeMath.add(unitDefenseMultiplier[_address][cardId],iValue)

IRs:
REF_468(mapping(uint256 => uint256)) -> unitDefenseMultiplier[_address]
REF_469(uint256) -> REF_468[cardId]
REF_471(mapping(uint256 => uint256)) -> unitDefenseMultiplier[_address]
REF_472(uint256) -> REF_471[cardId]
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_472', 'iValue'] 
REF_469(uint256) (->unitDefenseMultiplier) := TMP_395(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_396 = UnaryType.BANG iflag 
CONDITION TMP_396"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
unitDefenseMultiplier[_address][cardId] = SafeMath.sub(unitDefenseMultiplier[_address][cardId],iValue)

IRs:
REF_473(mapping(uint256 => uint256)) -> unitDefenseMultiplier[_address]
REF_474(uint256) -> REF_473[cardId]
REF_476(mapping(uint256 => uint256)) -> unitDefenseMultiplier[_address]
REF_477(uint256) -> REF_476[cardId]
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_477', 'iValue'] 
REF_474(uint256) (->unitDefenseMultiplier) := TMP_397(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-CardsBase-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = MAGICACADEMY JADE

IRs:
name(string) := MAGICACADEMY JADE(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = Jade

IRs:
symbol(string) := Jade(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 0

IRs:
decimals(uint8) := 0(uint256)"];
}
// Function: 6272.sol-CardsBase-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
researchDivPercent = 10

IRs:
researchDivPercent(uint256) := 10(uint256)"];
}
// Function: 6272.sol-CardsBase-snapshotDailyGooResearchFunding()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
todaysGooResearchFund = (totalEtherPool[1] * researchDivPercent) / 100

IRs:
REF_304(uint256) -> totalEtherPool[1]
TMP_271(uint256) = REF_304 * researchDivPercent
TMP_272(uint256) = TMP_271 / 100
todaysGooResearchFund(uint256) := TMP_272(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalEtherPool[1] -= todaysGooResearchFund

IRs:
REF_305(uint256) -> totalEtherPool[1]
REF_305(-> totalEtherPool) = REF_305 - todaysGooResearchFund"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalJadeProductionSnapshots.push(totalJadeProduction)

IRs:
REF_307 -> LENGTH totalJadeProductionSnapshots
TMP_274(uint256) := REF_307(uint256)
TMP_275(uint256) = TMP_274 + 1
REF_307(uint256) (->totalJadeProductionSnapshots) := TMP_275(uint256)
REF_308(uint256) -> totalJadeProductionSnapshots[TMP_274]
REF_308(uint256) (->totalJadeProductionSnapshots) := totalJadeProduction(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allocatedJadeResearchSnapshots.push(todaysGooResearchFund)

IRs:
REF_310 -> LENGTH allocatedJadeResearchSnapshots
TMP_277(uint256) := REF_310(uint256)
TMP_278(uint256) = TMP_277 + 1
REF_310(uint256) (->allocatedJadeResearchSnapshots) := TMP_278(uint256)
REF_311(uint256) -> allocatedJadeResearchSnapshots[TMP_277]
REF_311(uint256) (->allocatedJadeResearchSnapshots) := todaysGooResearchFund(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nextSnapshotTime = block.timestamp + 86400

IRs:
TMP_279(uint256) = block.timestamp + 86400
nextSnapshotTime(uint256) := TMP_279(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
6->1;
}
// Function: 6272.sol-CardsBase-totalSupply()
digraph{
}
// Function: 6272.sol-CardsBase-transfer(address,uint256)
digraph{
}
// Function: 6272.sol-CardsBase-transferFrom(address,address,uint256)
digraph{
}
// Function: 6272.sol-CardsBase-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_286 = CONVERT 0 to address
TMP_287(bool) = newOwner != TMP_286
TMP_288(None) = SOLIDITY_CALL require(bool)(TMP_287)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 6272.sol-CardsBase-tweakDailyDividends(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_158(bool) = msg.sender == owner
TMP_159(None) = SOLIDITY_CALL require(bool)(TMP_158)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(newResearchPercent > 0 && newResearchPercent <= 10)

IRs:
TMP_160(bool) = newResearchPercent > 0
TMP_161(bool) = newResearchPercent <= 10
TMP_162(bool) = TMP_160 && TMP_161
TMP_163(None) = SOLIDITY_CALL require(bool)(TMP_162)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
researchDivPercent = newResearchPercent

IRs:
researchDivPercent(uint256) := newResearchPercent(uint256)"];
}
// Function: 6272.sol-CardsBase-updatePlayersCoin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
coinGain = balanceOfUnclaimed(player)

IRs:
TMP_182(uint256) = INTERNAL_CALL, JadeCoin.balanceOfUnclaimed(address)(player)
coinGain(uint256) := TMP_182(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lastJadeSaveTime[player] = block.timestamp

IRs:
REF_191(uint256) -> lastJadeSaveTime[player]
REF_191(uint256) (->lastJadeSaveTime) := block.timestamp(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
roughSupply = SafeMath.add(roughSupply,coinGain)

IRs:
TMP_183(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['roughSupply', 'coinGain'] 
roughSupply(uint256) := TMP_183(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jadeBalance[player] = SafeMath.add(jadeBalance[player],coinGain)

IRs:
REF_193(uint256) -> jadeBalance[player]
REF_195(uint256) -> jadeBalance[player]
TMP_184(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_195', 'coinGain'] 
REF_193(uint256) (->jadeBalance) := TMP_184(uint256)"];
}
// Function: 6272.sol-CardsBase-updatePlayersCoinByOut(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
coinGain = balanceOfUnclaimed(player)

IRs:
TMP_185(uint256) = INTERNAL_CALL, JadeCoin.balanceOfUnclaimed(address)(player)
coinGain(uint256) := TMP_185(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lastJadeSaveTime[player] = block.timestamp

IRs:
REF_196(uint256) -> lastJadeSaveTime[player]
REF_196(uint256) (->lastJadeSaveTime) := block.timestamp(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
roughSupply = SafeMath.add(roughSupply,coinGain)

IRs:
TMP_186(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['roughSupply', 'coinGain'] 
roughSupply(uint256) := TMP_186(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jadeBalance[player] = SafeMath.add(jadeBalance[player],coinGain)

IRs:
REF_198(uint256) -> jadeBalance[player]
REF_200(uint256) -> jadeBalance[player]
TMP_187(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_200', 'coinGain'] 
REF_198(uint256) (->jadeBalance) := TMP_187(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
5->1;
}
// Function: 6272.sol-CardsBase-updatePlayersCoinByPurchase(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
unclaimedJade = balanceOfUnclaimed(player)

IRs:
TMP_205(uint256) = INTERNAL_CALL, JadeCoin.balanceOfUnclaimed(address)(player)
unclaimedJade(uint256) := TMP_205(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
purchaseCost > unclaimedJade

IRs:
TMP_206(bool) = purchaseCost > unclaimedJade
CONDITION TMP_206"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
jadeDecrease = SafeMath.sub(purchaseCost,unclaimedJade)

IRs:
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['purchaseCost', 'unclaimedJade'] 
jadeDecrease(uint256) := TMP_207(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(jadeBalance[player] >= jadeDecrease)

IRs:
REF_227(uint256) -> jadeBalance[player]
TMP_208(bool) = REF_227 >= jadeDecrease
TMP_209(None) = SOLIDITY_CALL require(bool)(TMP_208)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
roughSupply = SafeMath.sub(roughSupply,jadeDecrease)

IRs:
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['roughSupply', 'jadeDecrease'] 
roughSupply(uint256) := TMP_210(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
jadeBalance[player] = SafeMath.sub(jadeBalance[player],jadeDecrease)

IRs:
REF_229(uint256) -> jadeBalance[player]
REF_231(uint256) -> jadeBalance[player]
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_231', 'jadeDecrease'] 
REF_229(uint256) (->jadeBalance) := TMP_211(uint256)"];
6->10;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
jadeGain = SafeMath.sub(unclaimedJade,purchaseCost)

IRs:
TMP_212(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['unclaimedJade', 'purchaseCost'] 
jadeGain(uint256) := TMP_212(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
roughSupply = SafeMath.add(roughSupply,jadeGain)

IRs:
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['roughSupply', 'jadeGain'] 
roughSupply(uint256) := TMP_213(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
jadeBalance[player] = SafeMath.add(jadeBalance[player],jadeGain)

IRs:
REF_234(uint256) -> jadeBalance[player]
REF_236(uint256) -> jadeBalance[player]
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_236', 'jadeGain'] 
REF_234(uint256) (->jadeBalance) := TMP_214(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
lastJadeSaveTime[player] = block.timestamp

IRs:
REF_237(uint256) -> lastJadeSaveTime[player]
REF_237(uint256) (->lastJadeSaveTime) := block.timestamp(uint256)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
12->1;
}
// Function: 6272.sol-CardsBase-upgradeUnitMultipliers(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->33;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
upgradeClass == 0

IRs:
TMP_411(bool) = upgradeClass == 0
CONDITION TMP_411"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
unitCoinProductionIncreases[player][unitId] += upgradeValue

IRs:
REF_516(mapping(uint256 => uint256)) -> unitCoinProductionIncreases[player]
REF_517(uint256) -> REF_516[unitId]
REF_517(-> unitCoinProductionIncreases) = REF_517 + upgradeValue"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
productionGain = unitsOwned[player][unitId] * upgradeValue * (10 + unitCoinProductionMultiplier[player][unitId])

IRs:
REF_518(mapping(uint256 => uint256)) -> unitsOwned[player]
REF_519(uint256) -> REF_518[unitId]
TMP_412(uint256) = REF_519 * upgradeValue
REF_520(mapping(uint256 => uint256)) -> unitCoinProductionMultiplier[player]
REF_521(uint256) -> REF_520[unitId]
TMP_413(uint256) = 10 + REF_521
TMP_414(uint256) = TMP_412 * TMP_413
productionGain(uint256) := TMP_414(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
increasePlayersJadeProduction(player,productionGain)

IRs:
INTERNAL_CALL, JadeCoin.increasePlayersJadeProduction(address,uint256)(player,productionGain)"];
5->32;
6[label="Node Type: IF 6

EXPRESSION:
upgradeClass == 1

IRs:
TMP_416(bool) = upgradeClass == 1
CONDITION TMP_416"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
unitCoinProductionMultiplier[player][unitId] += upgradeValue

IRs:
REF_522(mapping(uint256 => uint256)) -> unitCoinProductionMultiplier[player]
REF_523(uint256) -> REF_522[unitId]
REF_523(-> unitCoinProductionMultiplier) = REF_523 + upgradeValue"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
productionGain = unitsOwned[player][unitId] * upgradeValue * (schema.unitCoinProduction(unitId) + unitCoinProductionIncreases[player][unitId])

IRs:
REF_524(mapping(uint256 => uint256)) -> unitsOwned[player]
REF_525(uint256) -> REF_524[unitId]
TMP_417(uint256) = REF_525 * upgradeValue
TMP_418(uint256) = HIGH_LEVEL_CALL, dest:schema(GameConfigInterface), function:unitCoinProduction, arguments:['unitId']  
REF_527(mapping(uint256 => uint256)) -> unitCoinProductionIncreases[player]
REF_528(uint256) -> REF_527[unitId]
TMP_419(uint256) = TMP_418 + REF_528
TMP_420(uint256) = TMP_417 * TMP_419
productionGain(uint256) := TMP_420(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
increasePlayersJadeProduction(player,productionGain)

IRs:
INTERNAL_CALL, JadeCoin.increasePlayersJadeProduction(address,uint256)(player,productionGain)"];
9->31;
10[label="Node Type: IF 10

EXPRESSION:
upgradeClass == 2

IRs:
TMP_422(bool) = upgradeClass == 2
CONDITION TMP_422"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
unitAttackIncreases[player][unitId] += upgradeValue

IRs:
REF_529(mapping(uint256 => uint256)) -> unitAttackIncreases[player]
REF_530(uint256) -> REF_529[unitId]
REF_530(-> unitAttackIncreases) = REF_530 + upgradeValue"];
11->30;
12[label="Node Type: IF 12

EXPRESSION:
upgradeClass == 3

IRs:
TMP_423(bool) = upgradeClass == 3
CONDITION TMP_423"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
unitAttackMultiplier[player][unitId] += upgradeValue

IRs:
REF_531(mapping(uint256 => uint256)) -> unitAttackMultiplier[player]
REF_532(uint256) -> REF_531[unitId]
REF_532(-> unitAttackMultiplier) = REF_532 + upgradeValue"];
13->29;
14[label="Node Type: IF 14

EXPRESSION:
upgradeClass == 4

IRs:
TMP_424(bool) = upgradeClass == 4
CONDITION TMP_424"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
unitDefenseIncreases[player][unitId] += upgradeValue

IRs:
REF_533(mapping(uint256 => uint256)) -> unitDefenseIncreases[player]
REF_534(uint256) -> REF_533[unitId]
REF_534(-> unitDefenseIncreases) = REF_534 + upgradeValue"];
15->28;
16[label="Node Type: IF 16

EXPRESSION:
upgradeClass == 5

IRs:
TMP_425(bool) = upgradeClass == 5
CONDITION TMP_425"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
unitDefenseMultiplier[player][unitId] += upgradeValue

IRs:
REF_535(mapping(uint256 => uint256)) -> unitDefenseMultiplier[player]
REF_536(uint256) -> REF_535[unitId]
REF_536(-> unitDefenseMultiplier) = REF_536 + upgradeValue"];
17->27;
18[label="Node Type: IF 18

EXPRESSION:
upgradeClass == 6

IRs:
TMP_426(bool) = upgradeClass == 6
CONDITION TMP_426"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
unitJadeStealingIncreases[player][unitId] += upgradeValue

IRs:
REF_537(mapping(uint256 => uint256)) -> unitJadeStealingIncreases[player]
REF_538(uint256) -> REF_537[unitId]
REF_538(-> unitJadeStealingIncreases) = REF_538 + upgradeValue"];
19->26;
20[label="Node Type: IF 20

EXPRESSION:
upgradeClass == 7

IRs:
TMP_427(bool) = upgradeClass == 7
CONDITION TMP_427"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
unitJadeStealingMultiplier[player][unitId] += upgradeValue

IRs:
REF_539(mapping(uint256 => uint256)) -> unitJadeStealingMultiplier[player]
REF_540(uint256) -> REF_539[unitId]
REF_540(-> unitJadeStealingMultiplier) = REF_540 + upgradeValue"];
21->25;
22[label="Node Type: IF 22

EXPRESSION:
upgradeClass == 8

IRs:
TMP_428(bool) = upgradeClass == 8
CONDITION TMP_428"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
unitMaxCap[player][unitId] = upgradeValue

IRs:
REF_541(mapping(uint256 => uint256)) -> unitMaxCap[player]
REF_542(uint256) -> REF_541[unitId]
REF_542(uint256) (->unitMaxCap) := upgradeValue(uint256)"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: END_IF 31
"];
31->32;
32[label="Node Type: END_IF 32
"];
33[label="Node Type: EXPRESSION 33

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
33->1;
}
// Function: 6272.sol-CardsBase-viewUnclaimedResearchDividends()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
startSnapshot = lastJadeResearchFundClaim[msg.sender]

IRs:
REF_270(uint256) -> lastJadeResearchFundClaim[msg.sender]
startSnapshot(uint256) := REF_270(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
latestSnapshot = allocatedJadeResearchSnapshots.length - 1

IRs:
REF_271 -> LENGTH allocatedJadeResearchSnapshots
TMP_235(uint256) = REF_271 - 1
latestSnapshot(uint256) := TMP_235(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousProduction = jadeProductionSnapshots[msg.sender][lastJadeResearchFundClaim[msg.sender] - 1]

IRs:
REF_272(mapping(uint256 => uint256)) -> jadeProductionSnapshots[msg.sender]
REF_273(uint256) -> lastJadeResearchFundClaim[msg.sender]
TMP_236(uint256) = REF_273 - 1
REF_274(uint256) -> REF_272[TMP_236]
previousProduction(uint256) := REF_274(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->17;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = startSnapshot

IRs:
i(uint256) := startSnapshot(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i <= latestSnapshot

IRs:
TMP_237(bool) = i <= latestSnapshot
CONDITION TMP_237"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
productionDuringSnapshot = jadeProductionSnapshots[msg.sender][i]

IRs:
REF_275(mapping(uint256 => uint256)) -> jadeProductionSnapshots[msg.sender]
REF_276(uint256) -> REF_275[i]
productionDuringSnapshot(uint256) := REF_276(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
soldAllProduction = jadeProductionZeroedSnapshots[msg.sender][i]

IRs:
REF_277(mapping(uint256 => bool)) -> jadeProductionZeroedSnapshots[msg.sender]
REF_278(bool) -> REF_277[i]
soldAllProduction(bool) := REF_278(bool)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
productionDuringSnapshot == 0 && ! soldAllProduction

IRs:
TMP_238(bool) = productionDuringSnapshot == 0
TMP_239 = UnaryType.BANG soldAllProduction 
TMP_240(bool) = TMP_238 && TMP_239
CONDITION TMP_240"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
productionDuringSnapshot = previousProduction

IRs:
productionDuringSnapshot(uint256) := previousProduction(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
previousProduction = productionDuringSnapshot

IRs:
previousProduction(uint256) := productionDuringSnapshot(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
researchShare += (allocatedJadeResearchSnapshots[i] * productionDuringSnapshot) / totalJadeProductionSnapshots[i]

IRs:
REF_279(uint256) -> allocatedJadeResearchSnapshots[i]
TMP_241(uint256) = REF_279 * productionDuringSnapshot
REF_280(uint256) -> totalJadeProductionSnapshots[i]
TMP_242(uint256) = TMP_241 / REF_280
researchShare(uint256) = researchShare + TMP_242"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_243(uint256) := i(uint256)
i(uint256) = i + 1"];
16->8;
17[label="Node Type: RETURN 17

EXPRESSION:
(researchShare,startSnapshot,latestSnapshot)

IRs:
RETURN researchShare,startSnapshot,latestSnapshot"];
}
// Function: 6272.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 6272.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 6272.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 6272.sol-ERC20-totalSupply()
digraph{
}
// Function: 6272.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 6272.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 6272.sol-GameConfigInterface-battleCardIdRange()
digraph{
}
// Function: 6272.sol-GameConfigInterface-productionCardIdRange()
digraph{
}
// Function: 6272.sol-GameConfigInterface-unitAttack(uint256)
digraph{
}
// Function: 6272.sol-GameConfigInterface-unitCoinProduction(uint256)
digraph{
}
// Function: 6272.sol-GameConfigInterface-unitDefense(uint256)
digraph{
}
// Function: 6272.sol-GameConfigInterface-unitStealingCapacity(uint256)
digraph{
}
// Function: 6272.sol-GameConfigInterface-upgradeIdRange()
digraph{
}
// Function: 6272.sol-JadeCoin-JadeCoin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 6272.sol-JadeCoin-JadeCoinMining(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roughSupply = SafeMath.add(roughSupply,_amount)

IRs:
TMP_89(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['roughSupply', '_amount'] 
roughSupply(uint256) := TMP_89(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
jadeBalance[_addr] = SafeMath.add(jadeBalance[_addr],_amount)

IRs:
REF_85(uint256) -> jadeBalance[_addr]
REF_87(uint256) -> jadeBalance[_addr]
TMP_90(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_87', '_amount'] 
REF_85(uint256) (->jadeBalance) := TMP_90(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
3->1;
}
// Function: 6272.sol-JadeCoin-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6272.sol-JadeCoin-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[player][approvee]

IRs:
REF_70(mapping(address => uint256)) -> allowed[player]
REF_71(uint256) -> REF_70[approvee]
RETURN REF_71"];
}
// Function: 6272.sol-JadeCoin-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][approvee] = amount

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[approvee]
REF_69(uint256) (->allowed) := amount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,approvee,amount)

IRs:
Emit Approval(msg.sender,approvee,amount)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6272.sol-JadeCoin-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
SafeMath.add(jadeBalance[player],balanceOfUnclaimed(player))

IRs:
REF_8(uint256) -> jadeBalance[player]
TMP_37(uint256) = INTERNAL_CALL, JadeCoin.balanceOfUnclaimed(address)(player)
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', 'TMP_37'] 
RETURN TMP_38"];
}
// Function: 6272.sol-JadeCoin-balanceOfUnclaimed(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
lSave = lastJadeSaveTime[player]

IRs:
REF_9(uint256) -> lastJadeSaveTime[player]
lSave(uint256) := REF_9(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
lSave > 0 && lSave < block.timestamp

IRs:
TMP_39(bool) = lSave > 0
TMP_40(bool) = lSave < block.timestamp
TMP_41(bool) = TMP_39 && TMP_40
CONDITION TMP_41"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
SafeMath.mul(getJadeProduction(player),SafeMath.div(SafeMath.sub(block.timestamp,lSave),10))

IRs:
TMP_42(uint256) = INTERNAL_CALL, JadeCoin.getJadeProduction(address)(player)
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['block.timestamp', 'lSave'] 
TMP_44(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_43', '10'] 
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_42', 'TMP_44'] 
RETURN TMP_45"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 6272.sol-JadeCoin-claimResearchDividends(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(startSnapshot <= endSnapShot)

IRs:
TMP_117(bool) = startSnapshot <= endSnapShot
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(startSnapshot >= lastJadeResearchFundClaim[msg.sender])

IRs:
REF_127(uint256) -> lastJadeResearchFundClaim[msg.sender]
TMP_119(bool) = startSnapshot >= REF_127
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(endSnapShot < allocatedJadeResearchSnapshots.length)

IRs:
REF_128 -> LENGTH allocatedJadeResearchSnapshots
TMP_121(bool) = endSnapShot < REF_128
TMP_122(None) = SOLIDITY_CALL require(bool)(TMP_121)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
previousProduction = jadeProductionSnapshots[msg.sender][lastJadeResearchFundClaim[msg.sender] - 1]

IRs:
REF_129(mapping(uint256 => uint256)) -> jadeProductionSnapshots[msg.sender]
REF_130(uint256) -> lastJadeResearchFundClaim[msg.sender]
TMP_123(uint256) = REF_130 - 1
REF_131(uint256) -> REF_129[TMP_123]
previousProduction(uint256) := REF_131(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->18;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = startSnapshot

IRs:
i(uint256) := startSnapshot(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i <= endSnapShot

IRs:
TMP_124(bool) = i <= endSnapShot
CONDITION TMP_124"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
productionDuringSnapshot = jadeProductionSnapshots[msg.sender][i]

IRs:
REF_132(mapping(uint256 => uint256)) -> jadeProductionSnapshots[msg.sender]
REF_133(uint256) -> REF_132[i]
productionDuringSnapshot(uint256) := REF_133(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
soldAllProduction = jadeProductionZeroedSnapshots[msg.sender][i]

IRs:
REF_134(mapping(uint256 => bool)) -> jadeProductionZeroedSnapshots[msg.sender]
REF_135(bool) -> REF_134[i]
soldAllProduction(bool) := REF_135(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
productionDuringSnapshot == 0 && ! soldAllProduction

IRs:
TMP_125(bool) = productionDuringSnapshot == 0
TMP_126 = UnaryType.BANG soldAllProduction 
TMP_127(bool) = TMP_125 && TMP_126
CONDITION TMP_127"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
productionDuringSnapshot = previousProduction

IRs:
productionDuringSnapshot(uint256) := previousProduction(uint256)"];
13->15;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
previousProduction = productionDuringSnapshot

IRs:
previousProduction(uint256) := productionDuringSnapshot(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
researchShare += (allocatedJadeResearchSnapshots[i] * productionDuringSnapshot) / totalJadeProductionSnapshots[i]

IRs:
REF_136(uint256) -> allocatedJadeResearchSnapshots[i]
TMP_128(uint256) = REF_136 * productionDuringSnapshot
REF_137(uint256) -> totalJadeProductionSnapshots[i]
TMP_129(uint256) = TMP_128 / REF_137
researchShare(uint256) = researchShare + TMP_129"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_130(uint256) := i(uint256)
i(uint256) = i + 1"];
17->9;
18[label="Node Type: IF 18

EXPRESSION:
jadeProductionSnapshots[msg.sender][endSnapShot] == 0 && ! jadeProductionZeroedSnapshots[msg.sender][endSnapShot] && previousProduction > 0

IRs:
REF_138(mapping(uint256 => uint256)) -> jadeProductionSnapshots[msg.sender]
REF_139(uint256) -> REF_138[endSnapShot]
TMP_131(bool) = REF_139 == 0
REF_140(mapping(uint256 => bool)) -> jadeProductionZeroedSnapshots[msg.sender]
REF_141(bool) -> REF_140[endSnapShot]
TMP_132 = UnaryType.BANG REF_141 
TMP_133(bool) = TMP_131 && TMP_132
TMP_134(bool) = previousProduction > 0
TMP_135(bool) = TMP_133 && TMP_134
CONDITION TMP_135"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
jadeProductionSnapshots[msg.sender][endSnapShot] = previousProduction

IRs:
REF_142(mapping(uint256 => uint256)) -> jadeProductionSnapshots[msg.sender]
REF_143(uint256) -> REF_142[endSnapShot]
REF_143(uint256) (->jadeProductionSnapshots) := previousProduction(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
lastJadeResearchFundClaim[msg.sender] = endSnapShot + 1

IRs:
REF_144(uint256) -> lastJadeResearchFundClaim[msg.sender]
TMP_136(uint256) = endSnapShot + 1
REF_144(uint256) (->lastJadeResearchFundClaim) := TMP_136(uint256)"];
21->22;
22[label="Node Type: NEW VARIABLE 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
referer != address(0) && referer != msg.sender

IRs:
TMP_137 = CONVERT 0 to address
TMP_138(bool) = referer != TMP_137
TMP_139(bool) = referer != msg.sender
TMP_140(bool) = TMP_138 && TMP_139
CONDITION TMP_140"];
23->24[label="True"];
23->27[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
referalDivs = researchShare / 100

IRs:
TMP_141(uint256) = researchShare / 100
referalDivs(uint256) := TMP_141(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
coinBalance[referer][1] += referalDivs

IRs:
REF_145(mapping(uint8 => uint256)) -> coinBalance[referer]
REF_146(uint256) -> REF_145[1]
REF_146(-> coinBalance) = REF_146 + referalDivs"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
ReferalGain(referer,msg.sender,referalDivs)

IRs:
Emit ReferalGain(referer,msg.sender,referalDivs)"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
coinBalance[msg.sender][1] += SafeMath.sub(researchShare,referalDivs)

IRs:
REF_147(mapping(uint8 => uint256)) -> coinBalance[msg.sender]
REF_148(uint256) -> REF_147[1]
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['researchShare', 'referalDivs'] 
REF_148(-> coinBalance) = REF_148 + TMP_143"];
}
// Function: 6272.sol-JadeCoin-coinBalanceOf(address,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
coinBalance[player][itype]

IRs:
REF_89(mapping(uint8 => uint256)) -> coinBalance[player]
REF_90(uint256) -> REF_89[itype]
RETURN REF_90"];
}
// Function: 6272.sol-JadeCoin-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalEtherPool[1] += msg.value

IRs:
REF_6(uint256) -> totalEtherPool[1]
REF_6(-> totalEtherPool) = REF_6 + msg.value"];
}
// Function: 6272.sol-JadeCoin-getJadeProduction(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
jadeProductionSnapshots[player][lastJadeProductionUpdate[player]]

IRs:
REF_13(mapping(uint256 => uint256)) -> jadeProductionSnapshots[player]
REF_14(uint256) -> lastJadeProductionUpdate[player]
REF_15(uint256) -> REF_13[REF_14]
RETURN REF_15"];
}
// Function: 6272.sol-JadeCoin-getNextSnapshotTime()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
nextSnapshotTime

IRs:
RETURN nextSnapshotTime"];
}
// Function: 6272.sol-JadeCoin-getTotalEtherPool(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalEtherPool[itype]

IRs:
REF_114(uint256) -> totalEtherPool[itype]
RETURN REF_114"];
}
// Function: 6272.sol-JadeCoin-getTotalJadeProduction()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalJadeProduction

IRs:
RETURN totalJadeProduction"];
}
// Function: 6272.sol-JadeCoin-getlastJadeProductionUpdate(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
lastJadeProductionUpdate[player]

IRs:
REF_16(uint256) -> lastJadeProductionUpdate[player]
RETURN REF_16"];
}
// Function: 6272.sol-JadeCoin-increasePlayersJadeProduction(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
jadeProductionSnapshots[player][allocatedJadeResearchSnapshots.length] = SafeMath.add(getJadeProduction(player),increase)

IRs:
REF_17(mapping(uint256 => uint256)) -> jadeProductionSnapshots[player]
REF_18 -> LENGTH allocatedJadeResearchSnapshots
REF_19(uint256) -> REF_17[REF_18]
TMP_46(uint256) = INTERNAL_CALL, JadeCoin.getJadeProduction(address)(player)
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_46', 'increase'] 
REF_19(uint256) (->jadeProductionSnapshots) := TMP_47(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lastJadeProductionUpdate[player] = allocatedJadeResearchSnapshots.length

IRs:
REF_21(uint256) -> lastJadeProductionUpdate[player]
REF_22 -> LENGTH allocatedJadeResearchSnapshots
REF_21(uint256) (->lastJadeProductionUpdate) := REF_22(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalJadeProduction = SafeMath.add(totalJadeProduction,increase)

IRs:
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalJadeProduction', 'increase'] 
totalJadeProduction(uint256) := TMP_48(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
4->1;
}
// Function: 6272.sol-JadeCoin-onlyAccess()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(actionContracts[msg.sender])

IRs:
REF_159(bool) -> actionContracts[msg.sender]
TMP_155(None) = SOLIDITY_CALL require(bool)(REF_159)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6272.sol-JadeCoin-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(adminContracts[msg.sender])

IRs:
REF_158(bool) -> adminContracts[msg.sender]
TMP_154(None) = SOLIDITY_CALL require(bool)(REF_158)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6272.sol-JadeCoin-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_156(bool) = msg.sender == owner
TMP_157(None) = SOLIDITY_CALL require(bool)(TMP_156)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6272.sol-JadeCoin-reducePlayersJadeProduction(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
previousProduction = getJadeProduction(player)

IRs:
TMP_50(uint256) = INTERNAL_CALL, JadeCoin.getJadeProduction(address)(player)
previousProduction(uint256) := TMP_50(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newProduction = SafeMath.sub(previousProduction,decrease)

IRs:
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['previousProduction', 'decrease'] 
newProduction(uint256) := TMP_51(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
newProduction == 0

IRs:
TMP_52(bool) = newProduction == 0
CONDITION TMP_52"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jadeProductionZeroedSnapshots[player][allocatedJadeResearchSnapshots.length] = true

IRs:
REF_25(mapping(uint256 => bool)) -> jadeProductionZeroedSnapshots[player]
REF_26 -> LENGTH allocatedJadeResearchSnapshots
REF_27(bool) -> REF_25[REF_26]
REF_27(bool) (->jadeProductionZeroedSnapshots) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete jadeProductionSnapshots[player][allocatedJadeResearchSnapshots.length]

IRs:
REF_28(mapping(uint256 => uint256)) -> jadeProductionSnapshots[player]
REF_29 -> LENGTH allocatedJadeResearchSnapshots
REF_30(uint256) -> REF_28[REF_29]
REF_28 = delete REF_30 "];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
jadeProductionSnapshots[player][allocatedJadeResearchSnapshots.length] = newProduction

IRs:
REF_31(mapping(uint256 => uint256)) -> jadeProductionSnapshots[player]
REF_32 -> LENGTH allocatedJadeResearchSnapshots
REF_33(uint256) -> REF_31[REF_32]
REF_33(uint256) (->jadeProductionSnapshots) := newProduction(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
lastJadeProductionUpdate[player] = allocatedJadeResearchSnapshots.length

IRs:
REF_34(uint256) -> lastJadeProductionUpdate[player]
REF_35 -> LENGTH allocatedJadeResearchSnapshots
REF_34(uint256) (->lastJadeProductionUpdate) := REF_35(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalJadeProduction = SafeMath.sub(totalJadeProduction,decrease)

IRs:
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalJadeProduction', 'decrease'] 
totalJadeProduction(uint256) := TMP_53(uint256)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
10->1;
}
// Function: 6272.sol-JadeCoin-setActionContract(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
actionContracts[_actionAddr] = _useful

IRs:
REF_5(bool) -> actionContracts[_actionAddr]
REF_5(bool) (->actionContracts) := _useful(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
2->1;
}
// Function: 6272.sol-JadeCoin-setAdminContract(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_addr != address(0))

IRs:
TMP_21 = CONVERT 0 to address
TMP_22(bool) = _addr != TMP_21
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
adminContracts[_addr] = _useful

IRs:
REF_4(bool) -> adminContracts[_addr]
REF_4(bool) (->adminContracts) := _useful(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 6272.sol-JadeCoin-setCoinBalance(address,uint256,uint8,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
coinBalance[player][itype] = SafeMath.add(coinBalance[player][itype],eth)

IRs:
REF_97(mapping(uint8 => uint256)) -> coinBalance[player]
REF_98(uint256) -> REF_97[itype]
REF_100(mapping(uint8 => uint256)) -> coinBalance[player]
REF_101(uint256) -> REF_100[itype]
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_101', 'eth'] 
REF_98(uint256) (->coinBalance) := TMP_98(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_99 = UnaryType.BANG iflag 
CONDITION TMP_99"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
coinBalance[player][itype] = SafeMath.sub(coinBalance[player][itype],eth)

IRs:
REF_102(mapping(uint8 => uint256)) -> coinBalance[player]
REF_103(uint256) -> REF_102[itype]
REF_105(mapping(uint8 => uint256)) -> coinBalance[player]
REF_106(uint256) -> REF_105[itype]
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_106', 'eth'] 
REF_103(uint256) (->coinBalance) := TMP_100(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-JadeCoin-setJadeCoin(address,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
jadeBalance[player] = SafeMath.add(jadeBalance[player],coin)

IRs:
REF_91(uint256) -> jadeBalance[player]
REF_93(uint256) -> jadeBalance[player]
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_93', 'coin'] 
REF_91(uint256) (->jadeBalance) := TMP_94(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_95 = UnaryType.BANG iflag 
CONDITION TMP_95"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jadeBalance[player] = SafeMath.sub(jadeBalance[player],coin)

IRs:
REF_94(uint256) -> jadeBalance[player]
REF_96(uint256) -> jadeBalance[player]
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_96', 'coin'] 
REF_94(uint256) (->jadeBalance) := TMP_96(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-JadeCoin-setJadeCoinZero(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
jadeBalance[player] = 0

IRs:
REF_115(uint256) -> jadeBalance[player]
REF_115(uint256) (->jadeBalance) := 0(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
2->1;
}
// Function: 6272.sol-JadeCoin-setLastJadeSaveTime(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
lastJadeSaveTime[player] = block.timestamp

IRs:
REF_107(uint256) -> lastJadeSaveTime[player]
REF_107(uint256) (->lastJadeSaveTime) := block.timestamp(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
2->1;
}
// Function: 6272.sol-JadeCoin-setRoughSupply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
roughSupply = SafeMath.add(roughSupply,iroughSupply)

IRs:
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['roughSupply', 'iroughSupply'] 
roughSupply(uint256) := TMP_92(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
2->1;
}
// Function: 6272.sol-JadeCoin-setTotalEtherPool(uint256,uint8,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
iflag

IRs:
CONDITION iflag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalEtherPool[itype] = SafeMath.add(totalEtherPool[itype],inEth)

IRs:
REF_108(uint256) -> totalEtherPool[itype]
REF_110(uint256) -> totalEtherPool[itype]
TMP_103(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_110', 'inEth'] 
REF_108(uint256) (->totalEtherPool) := TMP_103(uint256)"];
2->6;
3[label="Node Type: IF 3

EXPRESSION:
! iflag

IRs:
TMP_104 = UnaryType.BANG iflag 
CONDITION TMP_104"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalEtherPool[itype] = SafeMath.sub(totalEtherPool[itype],inEth)

IRs:
REF_111(uint256) -> totalEtherPool[itype]
REF_113(uint256) -> totalEtherPool[itype]
TMP_105(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_113', 'inEth'] 
REF_111(uint256) (->totalEtherPool) := TMP_105(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
7->1;
}
// Function: 6272.sol-JadeCoin-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = MAGICACADEMY JADE

IRs:
name(string) := MAGICACADEMY JADE(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = Jade

IRs:
symbol(string) := Jade(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 0

IRs:
decimals(uint8) := 0(uint256)"];
}
// Function: 6272.sol-JadeCoin-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
researchDivPercent = 10

IRs:
researchDivPercent(uint256) := 10(uint256)"];
}
// Function: 6272.sol-JadeCoin-snapshotDailyGooResearchFunding()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
todaysGooResearchFund = (totalEtherPool[1] * researchDivPercent) / 100

IRs:
REF_150(uint256) -> totalEtherPool[1]
TMP_144(uint256) = REF_150 * researchDivPercent
TMP_145(uint256) = TMP_144 / 100
todaysGooResearchFund(uint256) := TMP_145(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalEtherPool[1] -= todaysGooResearchFund

IRs:
REF_151(uint256) -> totalEtherPool[1]
REF_151(-> totalEtherPool) = REF_151 - todaysGooResearchFund"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalJadeProductionSnapshots.push(totalJadeProduction)

IRs:
REF_153 -> LENGTH totalJadeProductionSnapshots
TMP_147(uint256) := REF_153(uint256)
TMP_148(uint256) = TMP_147 + 1
REF_153(uint256) (->totalJadeProductionSnapshots) := TMP_148(uint256)
REF_154(uint256) -> totalJadeProductionSnapshots[TMP_147]
REF_154(uint256) (->totalJadeProductionSnapshots) := totalJadeProduction(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allocatedJadeResearchSnapshots.push(todaysGooResearchFund)

IRs:
REF_156 -> LENGTH allocatedJadeResearchSnapshots
TMP_150(uint256) := REF_156(uint256)
TMP_151(uint256) = TMP_150 + 1
REF_156(uint256) (->allocatedJadeResearchSnapshots) := TMP_151(uint256)
REF_157(uint256) -> allocatedJadeResearchSnapshots[TMP_150]
REF_157(uint256) (->allocatedJadeResearchSnapshots) := todaysGooResearchFund(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nextSnapshotTime = block.timestamp + 86400

IRs:
TMP_152(uint256) = block.timestamp + 86400
nextSnapshotTime(uint256) := TMP_152(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAdmin()()"];
6->1;
}
// Function: 6272.sol-JadeCoin-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
roughSupply

IRs:
RETURN roughSupply"];
}
// Function: 6272.sol-JadeCoin-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updatePlayersCoin(msg.sender)

IRs:
INTERNAL_CALL, JadeCoin.updatePlayersCoin(address)(msg.sender)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(amount <= jadeBalance[msg.sender])

IRs:
REF_47(uint256) -> jadeBalance[msg.sender]
TMP_63(bool) = amount <= REF_47
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
jadeBalance[msg.sender] = SafeMath.sub(jadeBalance[msg.sender],amount)

IRs:
REF_48(uint256) -> jadeBalance[msg.sender]
REF_50(uint256) -> jadeBalance[msg.sender]
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_50', 'amount'] 
REF_48(uint256) (->jadeBalance) := TMP_65(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jadeBalance[recipient] = SafeMath.add(jadeBalance[recipient],amount)

IRs:
REF_51(uint256) -> jadeBalance[recipient]
REF_53(uint256) -> jadeBalance[recipient]
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_53', 'amount'] 
REF_51(uint256) (->jadeBalance) := TMP_66(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,recipient,amount)

IRs:
Emit Transfer(msg.sender,recipient,amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6272.sol-JadeCoin-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updatePlayersCoin(player)

IRs:
INTERNAL_CALL, JadeCoin.updatePlayersCoin(address)(player)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(amount <= allowed[player][msg.sender] && amount <= jadeBalance[player])

IRs:
REF_54(mapping(address => uint256)) -> allowed[player]
REF_55(uint256) -> REF_54[msg.sender]
TMP_69(bool) = amount <= REF_55
REF_56(uint256) -> jadeBalance[player]
TMP_70(bool) = amount <= REF_56
TMP_71(bool) = TMP_69 && TMP_70
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
jadeBalance[player] = SafeMath.sub(jadeBalance[player],amount)

IRs:
REF_57(uint256) -> jadeBalance[player]
REF_59(uint256) -> jadeBalance[player]
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_59', 'amount'] 
REF_57(uint256) (->jadeBalance) := TMP_73(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jadeBalance[recipient] = SafeMath.add(jadeBalance[recipient],amount)

IRs:
REF_60(uint256) -> jadeBalance[recipient]
REF_62(uint256) -> jadeBalance[recipient]
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_62', 'amount'] 
REF_60(uint256) (->jadeBalance) := TMP_74(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[player][msg.sender] = SafeMath.sub(allowed[player][msg.sender],amount)

IRs:
REF_63(mapping(address => uint256)) -> allowed[player]
REF_64(uint256) -> REF_63[msg.sender]
REF_66(mapping(address => uint256)) -> allowed[player]
REF_67(uint256) -> REF_66[msg.sender]
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_67', 'amount'] 
REF_64(uint256) (->allowed) := TMP_75(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(player,recipient,amount)

IRs:
Emit Transfer(player,recipient,amount)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6272.sol-JadeCoin-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_26 = CONVERT 0 to address
TMP_27(bool) = newOwner != TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 6272.sol-JadeCoin-tweakDailyDividends(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_31(bool) = msg.sender == owner
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(newResearchPercent > 0 && newResearchPercent <= 10)

IRs:
TMP_33(bool) = newResearchPercent > 0
TMP_34(bool) = newResearchPercent <= 10
TMP_35(bool) = TMP_33 && TMP_34
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
researchDivPercent = newResearchPercent

IRs:
researchDivPercent(uint256) := newResearchPercent(uint256)"];
}
// Function: 6272.sol-JadeCoin-updatePlayersCoin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
coinGain = balanceOfUnclaimed(player)

IRs:
TMP_55(uint256) = INTERNAL_CALL, JadeCoin.balanceOfUnclaimed(address)(player)
coinGain(uint256) := TMP_55(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lastJadeSaveTime[player] = block.timestamp

IRs:
REF_37(uint256) -> lastJadeSaveTime[player]
REF_37(uint256) (->lastJadeSaveTime) := block.timestamp(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
roughSupply = SafeMath.add(roughSupply,coinGain)

IRs:
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['roughSupply', 'coinGain'] 
roughSupply(uint256) := TMP_56(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jadeBalance[player] = SafeMath.add(jadeBalance[player],coinGain)

IRs:
REF_39(uint256) -> jadeBalance[player]
REF_41(uint256) -> jadeBalance[player]
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_41', 'coinGain'] 
REF_39(uint256) (->jadeBalance) := TMP_57(uint256)"];
}
// Function: 6272.sol-JadeCoin-updatePlayersCoinByOut(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
coinGain = balanceOfUnclaimed(player)

IRs:
TMP_58(uint256) = INTERNAL_CALL, JadeCoin.balanceOfUnclaimed(address)(player)
coinGain(uint256) := TMP_58(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lastJadeSaveTime[player] = block.timestamp

IRs:
REF_42(uint256) -> lastJadeSaveTime[player]
REF_42(uint256) (->lastJadeSaveTime) := block.timestamp(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
roughSupply = SafeMath.add(roughSupply,coinGain)

IRs:
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['roughSupply', 'coinGain'] 
roughSupply(uint256) := TMP_59(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jadeBalance[player] = SafeMath.add(jadeBalance[player],coinGain)

IRs:
REF_44(uint256) -> jadeBalance[player]
REF_46(uint256) -> jadeBalance[player]
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_46', 'coinGain'] 
REF_44(uint256) (->jadeBalance) := TMP_60(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
5->1;
}
// Function: 6272.sol-JadeCoin-updatePlayersCoinByPurchase(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
unclaimedJade = balanceOfUnclaimed(player)

IRs:
TMP_78(uint256) = INTERNAL_CALL, JadeCoin.balanceOfUnclaimed(address)(player)
unclaimedJade(uint256) := TMP_78(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
purchaseCost > unclaimedJade

IRs:
TMP_79(bool) = purchaseCost > unclaimedJade
CONDITION TMP_79"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
jadeDecrease = SafeMath.sub(purchaseCost,unclaimedJade)

IRs:
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['purchaseCost', 'unclaimedJade'] 
jadeDecrease(uint256) := TMP_80(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(jadeBalance[player] >= jadeDecrease)

IRs:
REF_73(uint256) -> jadeBalance[player]
TMP_81(bool) = REF_73 >= jadeDecrease
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
roughSupply = SafeMath.sub(roughSupply,jadeDecrease)

IRs:
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['roughSupply', 'jadeDecrease'] 
roughSupply(uint256) := TMP_83(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
jadeBalance[player] = SafeMath.sub(jadeBalance[player],jadeDecrease)

IRs:
REF_75(uint256) -> jadeBalance[player]
REF_77(uint256) -> jadeBalance[player]
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_77', 'jadeDecrease'] 
REF_75(uint256) (->jadeBalance) := TMP_84(uint256)"];
6->10;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
jadeGain = SafeMath.sub(unclaimedJade,purchaseCost)

IRs:
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['unclaimedJade', 'purchaseCost'] 
jadeGain(uint256) := TMP_85(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
roughSupply = SafeMath.add(roughSupply,jadeGain)

IRs:
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['roughSupply', 'jadeGain'] 
roughSupply(uint256) := TMP_86(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
jadeBalance[player] = SafeMath.add(jadeBalance[player],jadeGain)

IRs:
REF_80(uint256) -> jadeBalance[player]
REF_82(uint256) -> jadeBalance[player]
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_82', 'jadeGain'] 
REF_80(uint256) (->jadeBalance) := TMP_87(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
lastJadeSaveTime[player] = block.timestamp

IRs:
REF_83(uint256) -> lastJadeSaveTime[player]
REF_83(uint256) (->lastJadeSaveTime) := block.timestamp(uint256)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyAccess()

IRs:
MODIFIER_CALL, AccessAdmin.onlyAccess()()"];
12->1;
}
// Function: 6272.sol-JadeCoin-viewUnclaimedResearchDividends()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
startSnapshot = lastJadeResearchFundClaim[msg.sender]

IRs:
REF_116(uint256) -> lastJadeResearchFundClaim[msg.sender]
startSnapshot(uint256) := REF_116(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
latestSnapshot = allocatedJadeResearchSnapshots.length - 1

IRs:
REF_117 -> LENGTH allocatedJadeResearchSnapshots
TMP_108(uint256) = REF_117 - 1
latestSnapshot(uint256) := TMP_108(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousProduction = jadeProductionSnapshots[msg.sender][lastJadeResearchFundClaim[msg.sender] - 1]

IRs:
REF_118(mapping(uint256 => uint256)) -> jadeProductionSnapshots[msg.sender]
REF_119(uint256) -> lastJadeResearchFundClaim[msg.sender]
TMP_109(uint256) = REF_119 - 1
REF_120(uint256) -> REF_118[TMP_109]
previousProduction(uint256) := REF_120(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->17;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = startSnapshot

IRs:
i(uint256) := startSnapshot(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i <= latestSnapshot

IRs:
TMP_110(bool) = i <= latestSnapshot
CONDITION TMP_110"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
productionDuringSnapshot = jadeProductionSnapshots[msg.sender][i]

IRs:
REF_121(mapping(uint256 => uint256)) -> jadeProductionSnapshots[msg.sender]
REF_122(uint256) -> REF_121[i]
productionDuringSnapshot(uint256) := REF_122(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
soldAllProduction = jadeProductionZeroedSnapshots[msg.sender][i]

IRs:
REF_123(mapping(uint256 => bool)) -> jadeProductionZeroedSnapshots[msg.sender]
REF_124(bool) -> REF_123[i]
soldAllProduction(bool) := REF_124(bool)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
productionDuringSnapshot == 0 && ! soldAllProduction

IRs:
TMP_111(bool) = productionDuringSnapshot == 0
TMP_112 = UnaryType.BANG soldAllProduction 
TMP_113(bool) = TMP_111 && TMP_112
CONDITION TMP_113"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
productionDuringSnapshot = previousProduction

IRs:
productionDuringSnapshot(uint256) := previousProduction(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
previousProduction = productionDuringSnapshot

IRs:
previousProduction(uint256) := productionDuringSnapshot(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
researchShare += (allocatedJadeResearchSnapshots[i] * productionDuringSnapshot) / totalJadeProductionSnapshots[i]

IRs:
REF_125(uint256) -> allocatedJadeResearchSnapshots[i]
TMP_114(uint256) = REF_125 * productionDuringSnapshot
REF_126(uint256) -> totalJadeProductionSnapshots[i]
TMP_115(uint256) = TMP_114 / REF_126
researchShare(uint256) = researchShare + TMP_115"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i ++

IRs:
TMP_116(uint256) := i(uint256)
i(uint256) = i + 1"];
16->8;
17[label="Node Type: RETURN 17

EXPRESSION:
(researchShare,startSnapshot,latestSnapshot)

IRs:
RETURN researchShare,startSnapshot,latestSnapshot"];
}
// Function: 6272.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6272.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6272.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 6272.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_461(uint256) = a + b
c(uint256) := TMP_461(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_462(bool) = c >= a
TMP_463(None) = SOLIDITY_CALL assert(bool)(TMP_462)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6272.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_457(uint256) = a / b
c(uint256) := TMP_457(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6272.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_452(bool) = a == 0
CONDITION TMP_452"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_453(uint256) = a * b
c(uint256) := TMP_453(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_454(uint256) = c / a
TMP_455(bool) = TMP_454 == b
TMP_456(None) = SOLIDITY_CALL assert(bool)(TMP_455)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6272.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_458(bool) = b <= a
TMP_459(None) = SOLIDITY_CALL assert(bool)(TMP_458)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_460(uint256) = a - b
RETURN TMP_460"];
}
}
