digraph G {
// Function: 6370.sol-AMTTimelockedToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6370.sol-AMTTimelockedToken-constructor(ERC20Basic,address,address,address,address,uint256,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = _token

IRs:
token(ERC20Basic) := _token(ERC20Basic)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
beneficiary_manage = _beneficiary_manage

IRs:
beneficiary_manage(address) := _beneficiary_manage(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
beneficiary_develop = _beneficiary_develop

IRs:
beneficiary_develop(address) := _beneficiary_develop(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
beneficiary_market = _beneficiary_market

IRs:
beneficiary_market(address) := _beneficiary_market(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
beneficiary_finance = _beneficiary_finance

IRs:
beneficiary_finance(address) := _beneficiary_finance(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
first_round_release_time = _first_round_release_time

IRs:
first_round_release_time(uint256) := _first_round_release_time(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
second_round_release_time = _second_round_release_time

IRs:
second_round_release_time(uint256) := _second_round_release_time(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
third_round_release_time = _third_round_release_time

IRs:
third_round_release_time(uint256) := _third_round_release_time(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
forth_round_release_time = _forth_round_release_time

IRs:
forth_round_release_time(uint256) := _forth_round_release_time(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
fifth_round_release_time = _fifth_round_release_time

IRs:
fifth_round_release_time(uint256) := _fifth_round_release_time(uint256)"];
}
// Function: 6370.sol-AMTTimelockedToken-getBeneficiaryDevelop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
beneficiary_develop

IRs:
RETURN beneficiary_develop"];
}
// Function: 6370.sol-AMTTimelockedToken-getBeneficiaryFinance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
beneficiary_finance

IRs:
RETURN beneficiary_finance"];
}
// Function: 6370.sol-AMTTimelockedToken-getBeneficiaryManage()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
beneficiary_manage

IRs:
RETURN beneficiary_manage"];
}
// Function: 6370.sol-AMTTimelockedToken-getBeneficiaryMarket()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
beneficiary_market

IRs:
RETURN beneficiary_market"];
}
// Function: 6370.sol-AMTTimelockedToken-getFifthRoundReleaseTime()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
fifth_round_release_time

IRs:
RETURN fifth_round_release_time"];
}
// Function: 6370.sol-AMTTimelockedToken-getFirstRoundReleaseTime()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
first_round_release_time

IRs:
RETURN first_round_release_time"];
}
// Function: 6370.sol-AMTTimelockedToken-getForthRoundReleaseTime()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
forth_round_release_time

IRs:
RETURN forth_round_release_time"];
}
// Function: 6370.sol-AMTTimelockedToken-getSecondRoundReleaseTime()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
second_round_release_time

IRs:
RETURN second_round_release_time"];
}
// Function: 6370.sol-AMTTimelockedToken-getThirdRoundReleaseTime()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
third_round_release_time

IRs:
RETURN third_round_release_time"];
}
// Function: 6370.sol-AMTTimelockedToken-getToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
token

IRs:
RETURN token"];
}
// Function: 6370.sol-AMTTimelockedToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_122(bool) = msg.sender == owner
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6370.sol-AMTTimelockedToken-releaseToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: IF 1

EXPRESSION:
block.timestamp >= fifth_round_release_time

IRs:
TMP_71(bool) = block.timestamp >= fifth_round_release_time
CONDITION TMP_71"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
validateReleasedToken(5)

IRs:
INTERNAL_CALL, AMTTimelockedToken.validateReleasedToken(uint256)(5)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: IF 4

EXPRESSION:
block.timestamp >= forth_round_release_time

IRs:
TMP_73(bool) = block.timestamp >= forth_round_release_time
CONDITION TMP_73"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
validateReleasedToken(4)

IRs:
INTERNAL_CALL, AMTTimelockedToken.validateReleasedToken(uint256)(4)"];
5->6;
6[label="Node Type: RETURN 6
"];
7[label="Node Type: IF 7

EXPRESSION:
block.timestamp >= third_round_release_time

IRs:
TMP_75(bool) = block.timestamp >= third_round_release_time
CONDITION TMP_75"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
validateReleasedToken(3)

IRs:
INTERNAL_CALL, AMTTimelockedToken.validateReleasedToken(uint256)(3)"];
8->9;
9[label="Node Type: RETURN 9
"];
10[label="Node Type: IF 10

EXPRESSION:
block.timestamp >= second_round_release_time

IRs:
TMP_77(bool) = block.timestamp >= second_round_release_time
CONDITION TMP_77"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
validateReleasedToken(2)

IRs:
INTERNAL_CALL, AMTTimelockedToken.validateReleasedToken(uint256)(2)"];
11->12;
12[label="Node Type: RETURN 12
"];
13[label="Node Type: IF 13

EXPRESSION:
block.timestamp >= first_round_release_time

IRs:
TMP_79(bool) = block.timestamp >= first_round_release_time
CONDITION TMP_79"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
validateReleasedToken(1)

IRs:
INTERNAL_CALL, AMTTimelockedToken.validateReleasedToken(uint256)(1)"];
14->15;
15[label="Node Type: RETURN 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
21->1;
}
// Function: 6370.sol-AMTTimelockedToken-releasedTokenOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
releasedTokens[_owner]

IRs:
REF_11(uint256) -> releasedTokens[_owner]
RETURN REF_11"];
}
// Function: 6370.sol-AMTTimelockedToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
MANAGE_CAP = 1 * (10 ** 8) * (10 ** uint256(decimals))

IRs:
TMP_82(uint256) = 10 ** 8
TMP_83(uint256) = 1 * TMP_82
TMP_84 = CONVERT decimals to uint256
TMP_85(uint256) = 10 ** TMP_84
TMP_86(uint256) = TMP_83 * TMP_85
MANAGE_CAP(uint256) := TMP_86(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
DEVELOP_CAP = 2 * (10 ** 8) * (10 ** uint256(decimals))

IRs:
TMP_87(uint256) = 10 ** 8
TMP_88(uint256) = 2 * TMP_87
TMP_89 = CONVERT decimals to uint256
TMP_90(uint256) = 10 ** TMP_89
TMP_91(uint256) = TMP_88 * TMP_90
DEVELOP_CAP(uint256) := TMP_91(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
MARKET_CAP = 1 * (10 ** 8) * (10 ** uint256(decimals))

IRs:
TMP_92(uint256) = 10 ** 8
TMP_93(uint256) = 1 * TMP_92
TMP_94 = CONVERT decimals to uint256
TMP_95(uint256) = 10 ** TMP_94
TMP_96(uint256) = TMP_93 * TMP_95
MARKET_CAP(uint256) := TMP_96(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
FINANCE_CAP = 6 * (10 ** 7) * (10 ** uint256(decimals))

IRs:
TMP_97(uint256) = 10 ** 7
TMP_98(uint256) = 6 * TMP_97
TMP_99 = CONVERT decimals to uint256
TMP_100(uint256) = 10 ** TMP_99
TMP_101(uint256) = TMP_98 * TMP_100
FINANCE_CAP(uint256) := TMP_101(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
MANAGE_CAP_PER_ROUND = 2 * (10 ** 7) * (10 ** uint256(decimals))

IRs:
TMP_102(uint256) = 10 ** 7
TMP_103(uint256) = 2 * TMP_102
TMP_104 = CONVERT decimals to uint256
TMP_105(uint256) = 10 ** TMP_104
TMP_106(uint256) = TMP_103 * TMP_105
MANAGE_CAP_PER_ROUND(uint256) := TMP_106(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
DEVELOP_CAP_PER_ROUND = 4 * (10 ** 7) * (10 ** uint256(decimals))

IRs:
TMP_107(uint256) = 10 ** 7
TMP_108(uint256) = 4 * TMP_107
TMP_109 = CONVERT decimals to uint256
TMP_110(uint256) = 10 ** TMP_109
TMP_111(uint256) = TMP_108 * TMP_110
DEVELOP_CAP_PER_ROUND(uint256) := TMP_111(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
MARKET_CAP_PER_ROUND = 2 * (10 ** 7) * (10 ** uint256(decimals))

IRs:
TMP_112(uint256) = 10 ** 7
TMP_113(uint256) = 2 * TMP_112
TMP_114 = CONVERT decimals to uint256
TMP_115(uint256) = 10 ** TMP_114
TMP_116(uint256) = TMP_113 * TMP_115
MARKET_CAP_PER_ROUND(uint256) := TMP_116(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
FINANCE_CAP_PER_ROUND = 12 * (10 ** 6) * (10 ** uint256(decimals))

IRs:
TMP_117(uint256) = 10 ** 6
TMP_118(uint256) = 12 * TMP_117
TMP_119 = CONVERT decimals to uint256
TMP_120(uint256) = 10 ** TMP_119
TMP_121(uint256) = TMP_118 * TMP_120
FINANCE_CAP_PER_ROUND(uint256) := TMP_121(uint256)"];
}
// Function: 6370.sol-AMTTimelockedToken-validateReleasedToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
releasedTokenOfManage = releasedTokens[beneficiary_manage]

IRs:
REF_12(uint256) -> releasedTokens[beneficiary_manage]
releasedTokenOfManage(uint256) := REF_12(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
releasedTokenOfDevelop = releasedTokens[beneficiary_develop]

IRs:
REF_13(uint256) -> releasedTokens[beneficiary_develop]
releasedTokenOfDevelop(uint256) := REF_13(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
releasedTokenOfMarket = releasedTokens[beneficiary_market]

IRs:
REF_14(uint256) -> releasedTokens[beneficiary_market]
releasedTokenOfMarket(uint256) := REF_14(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
releasedTokenOfFinance = releasedTokens[beneficiary_finance]

IRs:
REF_15(uint256) -> releasedTokens[beneficiary_finance]
releasedTokenOfFinance(uint256) := REF_15(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(releasedTokenOfManage < MANAGE_CAP_PER_ROUND.mul(_round))

IRs:
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['MANAGE_CAP_PER_ROUND', '_round'] 
TMP_29(bool) = releasedTokenOfManage < TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(releasedTokenOfManage.add(MANAGE_CAP_PER_ROUND) <= MANAGE_CAP_PER_ROUND.mul(_round))

IRs:
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['releasedTokenOfManage', 'MANAGE_CAP_PER_ROUND'] 
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['MANAGE_CAP_PER_ROUND', '_round'] 
TMP_33(bool) = TMP_31 <= TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(releasedTokenOfDevelop < DEVELOP_CAP_PER_ROUND.mul(_round))

IRs:
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['DEVELOP_CAP_PER_ROUND', '_round'] 
TMP_36(bool) = releasedTokenOfDevelop < TMP_35
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(releasedTokenOfDevelop.add(DEVELOP_CAP_PER_ROUND) <= DEVELOP_CAP_PER_ROUND.mul(_round))

IRs:
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['releasedTokenOfDevelop', 'DEVELOP_CAP_PER_ROUND'] 
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['DEVELOP_CAP_PER_ROUND', '_round'] 
TMP_40(bool) = TMP_38 <= TMP_39
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(releasedTokenOfMarket < MARKET_CAP_PER_ROUND.mul(_round))

IRs:
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['MARKET_CAP_PER_ROUND', '_round'] 
TMP_43(bool) = releasedTokenOfMarket < TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(releasedTokenOfMarket.add(MARKET_CAP_PER_ROUND) <= MARKET_CAP_PER_ROUND.mul(_round))

IRs:
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['releasedTokenOfMarket', 'MARKET_CAP_PER_ROUND'] 
TMP_46(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['MARKET_CAP_PER_ROUND', '_round'] 
TMP_47(bool) = TMP_45 <= TMP_46
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(releasedTokenOfFinance < FINANCE_CAP_PER_ROUND.mul(_round))

IRs:
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['FINANCE_CAP_PER_ROUND', '_round'] 
TMP_50(bool) = releasedTokenOfFinance < TMP_49
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(releasedTokenOfFinance.add(FINANCE_CAP_PER_ROUND) <= FINANCE_CAP_PER_ROUND.mul(_round))

IRs:
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['releasedTokenOfFinance', 'FINANCE_CAP_PER_ROUND'] 
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['FINANCE_CAP_PER_ROUND', '_round'] 
TMP_54(bool) = TMP_52 <= TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
totalRoundCap = MANAGE_CAP_PER_ROUND.add(DEVELOP_CAP_PER_ROUND).add(MARKET_CAP_PER_ROUND).add(FINANCE_CAP_PER_ROUND)

IRs:
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['MANAGE_CAP_PER_ROUND', 'DEVELOP_CAP_PER_ROUND'] 
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_56', 'MARKET_CAP_PER_ROUND'] 
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_57', 'FINANCE_CAP_PER_ROUND'] 
totalRoundCap(uint256) := TMP_58(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
require(bool)(token.balanceOf(this) >= totalRoundCap)

IRs:
TMP_59(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:balanceOf, arguments:['this']  
TMP_60(bool) = TMP_59 >= totalRoundCap
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
token.safeTransfer(beneficiary_manage,MANAGE_CAP_PER_ROUND)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['token', 'beneficiary_manage', 'MANAGE_CAP_PER_ROUND'] "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
releasedTokens[beneficiary_manage] = releasedTokens[beneficiary_manage].add(MANAGE_CAP_PER_ROUND)

IRs:
REF_33(uint256) -> releasedTokens[beneficiary_manage]
REF_34(uint256) -> releasedTokens[beneficiary_manage]
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_34', 'MANAGE_CAP_PER_ROUND'] 
REF_33(uint256) (->releasedTokens) := TMP_63(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
token.safeTransfer(beneficiary_develop,DEVELOP_CAP_PER_ROUND)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['token', 'beneficiary_develop', 'DEVELOP_CAP_PER_ROUND'] "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
releasedTokens[beneficiary_develop] = releasedTokens[beneficiary_develop].add(DEVELOP_CAP_PER_ROUND)

IRs:
REF_37(uint256) -> releasedTokens[beneficiary_develop]
REF_38(uint256) -> releasedTokens[beneficiary_develop]
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_38', 'DEVELOP_CAP_PER_ROUND'] 
REF_37(uint256) (->releasedTokens) := TMP_65(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
token.safeTransfer(beneficiary_market,MARKET_CAP_PER_ROUND)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['token', 'beneficiary_market', 'MARKET_CAP_PER_ROUND'] "];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
releasedTokens[beneficiary_market] = releasedTokens[beneficiary_market].add(MARKET_CAP_PER_ROUND)

IRs:
REF_41(uint256) -> releasedTokens[beneficiary_market]
REF_42(uint256) -> releasedTokens[beneficiary_market]
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_42', 'MARKET_CAP_PER_ROUND'] 
REF_41(uint256) (->releasedTokens) := TMP_67(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
token.safeTransfer(beneficiary_finance,FINANCE_CAP_PER_ROUND)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['token', 'beneficiary_finance', 'FINANCE_CAP_PER_ROUND'] "];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
releasedTokens[beneficiary_finance] = releasedTokens[beneficiary_finance].add(FINANCE_CAP_PER_ROUND)

IRs:
REF_45(uint256) -> releasedTokens[beneficiary_finance]
REF_46(uint256) -> releasedTokens[beneficiary_finance]
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_46', 'FINANCE_CAP_PER_ROUND'] 
REF_45(uint256) (->releasedTokens) := TMP_69(uint256)"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
23->1;
}
// Function: 6370.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_10(uint256) -> balances[_owner]
RETURN REF_10"];
}
// Function: 6370.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 6370.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_20 = CONVERT 0 to address
TMP_21(bool) = _to != TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_3(uint256) -> balances[msg.sender]
TMP_23(bool) = _value <= REF_3
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_4(uint256) -> balances[msg.sender]
REF_5(uint256) -> balances[msg.sender]
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_25(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_7(uint256) -> balances[_to]
REF_8(uint256) -> balances[_to]
TMP_26(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', '_value'] 
REF_7(uint256) (->balances) := TMP_26(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6370.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 6370.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 6370.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 6370.sol-ERC20-totalSupply()
digraph{
}
// Function: 6370.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 6370.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 6370.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 6370.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 6370.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 6370.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6370.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_0(bool) = msg.sender == owner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6370.sol-SafeERC20-safeApprove(ERC20,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.approve(spender,value))

IRs:
TMP_18(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:approve, arguments:['spender', 'value']  
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
}
// Function: 6370.sol-SafeERC20-safeTransfer(ERC20Basic,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.transfer(to,value))

IRs:
TMP_14(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['to', 'value']  
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
}
// Function: 6370.sol-SafeERC20-safeTransferFrom(ERC20,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.transferFrom(from,to,value))

IRs:
TMP_16(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transferFrom, arguments:['from', 'to', 'value']  
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
}
// Function: 6370.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_11(uint256) = a + b
c(uint256) := TMP_11(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_12(bool) = c >= a
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6370.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_7(uint256) = a / b
RETURN TMP_7"];
}
// Function: 6370.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_2(bool) = a == 0
CONDITION TMP_2"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_3(uint256) = a * b
c(uint256) := TMP_3(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_4(uint256) = c / a
TMP_5(bool) = TMP_4 == b
TMP_6(None) = SOLIDITY_CALL assert(bool)(TMP_5)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6370.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_8(bool) = b <= a
TMP_9(None) = SOLIDITY_CALL assert(bool)(TMP_8)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_10(uint256) = a - b
RETURN TMP_10"];
}
}
