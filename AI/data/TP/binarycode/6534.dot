digraph G {
// Function: 6534.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 6534.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 6534.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 6534.sol-ERC20-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_40 = UnaryType.BANG mintingFinished 
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6534.sol-ERC20-decreaseApproval(address,uint256)
digraph{
}
// Function: 6534.sol-ERC20-increaseApproval(address,uint256)
digraph{
}
// Function: 6534.sol-ERC20-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 6534.sol-ERC20-totalSupply()
digraph{
}
// Function: 6534.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 6534.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 6534.sol-ERC20-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_42 = UnaryType.BANG paused 
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6534.sol-ERC20-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_44(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6534.sol-ERC20Token-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_50 = CONVERT 0 to address
TMP_51(bool) = _newOwner != TMP_50
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 6534.sol-ERC20Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_29(mapping(address => uint256)) -> allowed[_owner]
REF_30(uint256) -> REF_29[_spender]
RETURN REF_30"];
}
// Function: 6534.sol-ERC20Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_27(mapping(address => uint256)) -> allowed[msg.sender]
REF_28(uint256) -> REF_27[_spender]
REF_28(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, ERC20.whenNotPaused()()"];
4->1;
}
// Function: 6534.sol-ERC20Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_5(uint256) -> balances[_owner]
RETURN REF_5"];
}
// Function: 6534.sol-ERC20Token-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_104 = UnaryType.BANG mintingFinished 
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6534.sol-ERC20Token-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6534.sol-ERC20Token-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_38(mapping(address => uint256)) -> allowed[msg.sender]
REF_39(uint256) -> REF_38[_spender]
oldValue(uint256) := REF_39(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_82(bool) = _subtractedValue > oldValue
CONDITION TMP_82"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_40(mapping(address => uint256)) -> allowed[msg.sender]
REF_41(uint256) -> REF_40[_spender]
REF_41(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_42(mapping(address => uint256)) -> allowed[msg.sender]
REF_43(uint256) -> REF_42[_spender]
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_43(uint256) (->allowed) := TMP_83(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_45(mapping(address => uint256)) -> allowed[msg.sender]
REF_46(uint256) -> REF_45[_spender]
Emit Approval(msg.sender,_spender,REF_46)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, ERC20.whenNotPaused()()"];
8->1;
}
// Function: 6534.sol-ERC20Token-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, ERC20.canMint()()"];
5->1;
}
// Function: 6534.sol-ERC20Token-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue))

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
REF_33(mapping(address => uint256)) -> allowed[msg.sender]
REF_34(uint256) -> REF_33[_spender]
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_34', '_addedValue'] 
REF_32(uint256) (->allowed) := TMP_79(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
Emit Approval(msg.sender,_spender,REF_37)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, ERC20.whenNotPaused()()"];
4->1;
}
// Function: 6534.sol-ERC20Token-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_54(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 6534.sol-ERC20Token-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_92(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_48(uint256) -> balances[_to]
REF_49(uint256) -> balances[_to]
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_49', '_amount'] 
REF_48(uint256) (->balances) := TMP_93(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_95 = CONVERT 0 to address
Emit Transfer(TMP_95,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, ERC20.canMint()()"];
7->1;
}
// Function: 6534.sol-ERC20Token-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_102(bool) = msg.sender == owner
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6534.sol-ERC20Token-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, ERC20.whenNotPaused()()"];
4->1;
}
// Function: 6534.sol-ERC20Token-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_46 = CONVERT 0 to address
owner(address) := TMP_46(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 6534.sol-ERC20Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 6534.sol-ERC20Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 6534.sol-ERC20Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_56 = CONVERT 0 to address
TMP_57(bool) = _to != TMP_56
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_6(uint256) -> balances[msg.sender]
TMP_59(bool) = _value <= REF_6
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_7(uint256) -> balances[msg.sender]
REF_8(uint256) -> balances[msg.sender]
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_8', '_value'] 
REF_7(uint256) (->balances) := TMP_61(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_10(uint256) -> balances[_to]
REF_11(uint256) -> balances[_to]
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_11', '_value'] 
REF_10(uint256) (->balances) := TMP_62(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, ERC20.whenNotPaused()()"];
7->1;
}
// Function: 6534.sol-ERC20Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_65 = CONVERT 0 to address
TMP_66(bool) = _to != TMP_65
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_13(uint256) -> balances[_from]
TMP_68(bool) = _value <= REF_13
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_14(mapping(address => uint256)) -> allowed[_from]
REF_15(uint256) -> REF_14[msg.sender]
TMP_70(bool) = _value <= REF_15
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_16(uint256) -> balances[_from]
REF_17(uint256) -> balances[_from]
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_17', '_value'] 
REF_16(uint256) (->balances) := TMP_72(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_19(uint256) -> balances[_to]
REF_20(uint256) -> balances[_to]
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_20', '_value'] 
REF_19(uint256) (->balances) := TMP_73(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_22(mapping(address => uint256)) -> allowed[_from]
REF_23(uint256) -> REF_22[msg.sender]
REF_24(mapping(address => uint256)) -> allowed[_from]
REF_25(uint256) -> REF_24[msg.sender]
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_25', '_value'] 
REF_23(uint256) (->allowed) := TMP_74(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, ERC20.whenNotPaused()()"];
9->1;
}
// Function: 6534.sol-ERC20Token-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 6534.sol-ERC20Token-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, ERC20.whenPaused()()"];
4->1;
}
// Function: 6534.sol-ERC20Token-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_106 = UnaryType.BANG paused 
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6534.sol-ERC20Token-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_108(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6534.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = _newOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 6534.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6534.sol-Ownable-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_9(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 6534.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_11(bool) = msg.sender == owner
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6534.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_1 = CONVERT 0 to address
owner(address) := TMP_1(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 6534.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 6534.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_37(uint256) = a + b
c(uint256) := TMP_37(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_38(bool) = c >= a
TMP_39(None) = SOLIDITY_CALL assert(bool)(TMP_38)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6534.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_33(uint256) = a / b
RETURN TMP_33"];
}
// Function: 6534.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_28(bool) = a == 0
CONDITION TMP_28"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_29(uint256) = a * b
c(uint256) := TMP_29(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_30(uint256) = c / a
TMP_31(bool) = TMP_30 == b
TMP_32(None) = SOLIDITY_CALL assert(bool)(TMP_31)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6534.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_34(bool) = b <= a
TMP_35(None) = SOLIDITY_CALL assert(bool)(TMP_34)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_36(uint256) = a - b
RETURN TMP_36"];
}
// Function: 6534.sol-XTVNetworkGuard-setXTVNetworkEndorser(address,bool)
digraph{
}
// Function: 6534.sol-XTVNetworkGuard-validateSignature(string,bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
xtvVerificationHash = keccak256()(abi.encodePacked(verificationHash,message))

IRs:
TMP_24(bytes) = SOLIDITY_CALL abi.encodePacked()(verificationHash,message)
TMP_25(bytes32) = SOLIDITY_CALL keccak256()(TMP_24)
xtvVerificationHash(bytes32) := TMP_25(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(verifyXTVSignature(xtvVerificationHash,xtvSignature))

IRs:
TMP_26(bool) = INTERNAL_CALL, XTVNetworkGuard.verifyXTVSignature(bytes32,bytes)(xtvVerificationHash,xtvSignature)
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 6534.sol-XTVNetworkGuard-verifyXTVSignature(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
signerAddress = XTVNetworkUtils.verifyXTVSignatureAddress(hash,sig)

IRs:
TMP_23(address) = LIBRARY_CALL, dest:XTVNetworkUtils, function:XTVNetworkUtils.verifyXTVSignatureAddress(bytes32,bytes), arguments:['hash', 'sig'] 
signerAddress(address) := TMP_23(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
xtvNetworkEndorser[signerAddress]

IRs:
REF_3(bool) -> xtvNetworkEndorser[signerAddress]
RETURN REF_3"];
}
// Function: 6534.sol-XTVNetworkUtils-verifyXTVSignatureAddress(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_0 -> LENGTH sig
TMP_13(bool) = REF_0 != 65
CONDITION TMP_13"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(address(0))

IRs:
TMP_14 = CONVERT 0 to address
RETURN TMP_14"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_15(bool) = v < 27
CONDITION TMP_15"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_16(bool) = v != 27
TMP_17(bool) = v != 28
TMP_18(bool) = TMP_16 && TMP_17
CONDITION TMP_18"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(address(0))

IRs:
TMP_19 = CONVERT 0 to address
RETURN TMP_19"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
prefixedHash = keccak256()(abi.encodePacked(Ethereum Signed Message:
32,hash))

IRs:
TMP_20(bytes) = SOLIDITY_CALL abi.encodePacked()(Ethereum Signed Message:
32,hash)
TMP_21(bytes32) = SOLIDITY_CALL keccak256()(TMP_20)
prefixedHash(bytes32) := TMP_21(bytes32)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,v,r,s)

IRs:
TMP_22(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,v,r,s)
RETURN TMP_22"];
}
// Function: 6534.sol-XTVToken-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_160 = CONVERT 0 to address
TMP_161(bool) = _newOwner != TMP_160
TMP_162(None) = SOLIDITY_CALL require(bool)(TMP_161)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 6534.sol-XTVToken-allowance(address,address)
digraph{
}
// Function: 6534.sol-XTVToken-approve(address,uint256)
digraph{
}
// Function: 6534.sol-XTVToken-balanceOf(address)
digraph{
}
// Function: 6534.sol-XTVToken-burnTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp > endTime)

IRs:
TMP_183(bool) = block.timestamp > endTime
TMP_184(None) = SOLIDITY_CALL require(bool)(TMP_183)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
remaining = balances[address(0)]

IRs:
TMP_185 = CONVERT 0 to address
REF_113(uint256) -> balances[TMP_185]
remaining(uint256) := REF_113(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airdropActive = false

IRs:
airdropActive(bool) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
XTVBurned = remaining

IRs:
XTVBurned(uint256) := remaining(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 6534.sol-XTVToken-canClaimTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
remainingSupply = balances[address(0)]

IRs:
TMP_215 = CONVERT 0 to address
REF_115(uint256) -> balances[TMP_215]
remainingSupply(uint256) := REF_115(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! claimed[msg.sender] && remainingSupply > AIRDROP_CLAIM_AMMOUNT)

IRs:
REF_116(bool) -> claimed[msg.sender]
TMP_216 = UnaryType.BANG REF_116 
TMP_217(bool) = remainingSupply > AIRDROP_CLAIM_AMMOUNT
TMP_218(bool) = TMP_216 && TMP_217
TMP_219(None) = SOLIDITY_CALL require(bool)(TMP_218)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 6534.sol-XTVToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_205 = UnaryType.BANG mintingFinished 
TMP_206(None) = SOLIDITY_CALL require(bool)(TMP_205)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6534.sol-XTVToken-claim(string,bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
claimed[msg.sender] = true

IRs:
REF_104(bool) -> claimed[msg.sender]
REF_104(bool) (->claimed) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[address(0)] = balances[address(0)].sub(AIRDROP_CLAIM_AMMOUNT)

IRs:
TMP_173 = CONVERT 0 to address
REF_105(uint256) -> balances[TMP_173]
TMP_174 = CONVERT 0 to address
REF_106(uint256) -> balances[TMP_174]
TMP_175(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_106', 'AIRDROP_CLAIM_AMMOUNT'] 
REF_105(uint256) (->balances) := TMP_175(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(AIRDROP_CLAIM_AMMOUNT)

IRs:
REF_108(uint256) -> balances[msg.sender]
REF_109(uint256) -> balances[msg.sender]
TMP_176(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_109', 'AIRDROP_CLAIM_AMMOUNT'] 
REF_108(uint256) (->balances) := TMP_176(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
XTVAirDropped = XTVAirDropped.add(AIRDROP_CLAIM_AMMOUNT)

IRs:
TMP_177(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['XTVAirDropped', 'AIRDROP_CLAIM_AMMOUNT'] 
XTVAirDropped(uint256) := TMP_177(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),msg.sender,AIRDROP_CLAIM_AMMOUNT)

IRs:
TMP_178 = CONVERT 0 to address
Emit Transfer(TMP_178,msg.sender,AIRDROP_CLAIM_AMMOUNT)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
balances[msg.sender]

IRs:
REF_112(uint256) -> balances[msg.sender]
RETURN REF_112"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
isAirdropActive()

IRs:
MODIFIER_CALL, XTVToken.isAirdropActive()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
canClaimTokens()

IRs:
MODIFIER_CALL, XTVToken.canClaimTokens()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
validateSignature(token,verificationHash,xtvSignature)

IRs:
MODIFIER_CALL, XTVNetworkGuard.validateSignature(string,bytes32,bytes)(token,verificationHash,xtvSignature)"];
9->1;
}
// Function: 6534.sol-XTVToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6534.sol-XTVToken-constructor(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fullfillTeamAddress = _fullfillTeam

IRs:
fullfillTeamAddress(address) := _fullfillTeam(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fullfillFounder = _fullfillFounder

IRs:
fullfillFounder(address) := _fullfillFounder(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fullfillAdvisors = _fullfillAdvisors

IRs:
fullfillAdvisors(address) := _fullfillAdvisors(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
airdropActive = true

IRs:
airdropActive(bool) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
startTime = block.timestamp

IRs:
startTime(uint256) := block.timestamp(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
endTime = startTime + 31536000

IRs:
TMP_167(uint256) = startTime + 31536000
endTime(uint256) := TMP_167(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[_fullfillTeam] = ALLOC_TEAM

IRs:
REF_99(uint256) -> balances[_fullfillTeam]
REF_99(uint256) (->balances) := ALLOC_TEAM(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[_fullfillFounder] = ALLOC_FOUNDER

IRs:
REF_100(uint256) -> balances[_fullfillFounder]
REF_100(uint256) (->balances) := ALLOC_FOUNDER(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[_fullfillAdvisors] = ALLOC_ADVISORS

IRs:
REF_101(uint256) -> balances[_fullfillAdvisors]
REF_101(uint256) (->balances) := ALLOC_ADVISORS(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[address(0)] = ALLOC_AIRDROP

IRs:
TMP_168 = CONVERT 0 to address
REF_102(uint256) -> balances[TMP_168]
REF_102(uint256) (->balances) := ALLOC_AIRDROP(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
totalSupply_ = EXPECTED_TOTAL_SUPPLY

IRs:
totalSupply_(uint256) := EXPECTED_TOTAL_SUPPLY(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(address(this),address(0),ALLOC_AIRDROP)

IRs:
TMP_169 = CONVERT this to address
TMP_170 = CONVERT 0 to address
Emit Transfer(TMP_169,TMP_170,ALLOC_AIRDROP)"];
}
// Function: 6534.sol-XTVToken-decreaseApproval(address,uint256)
digraph{
}
// Function: 6534.sol-XTVToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, ERC20.canMint()()"];
5->1;
}
// Function: 6534.sol-XTVToken-increaseApproval(address,uint256)
digraph{
}
// Function: 6534.sol-XTVToken-isAirdropActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(airdropActive)

IRs:
TMP_214(None) = SOLIDITY_CALL require(bool)(airdropActive)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6534.sol-XTVToken-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_164(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 6534.sol-XTVToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_145(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_94(uint256) -> balances[_to]
REF_95(uint256) -> balances[_to]
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_95', '_amount'] 
REF_94(uint256) (->balances) := TMP_146(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_148 = CONVERT 0 to address
Emit Transfer(TMP_148,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, ERC20.canMint()()"];
7->1;
}
// Function: 6534.sol-XTVToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_203(bool) = msg.sender == owner
TMP_204(None) = SOLIDITY_CALL require(bool)(TMP_203)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6534.sol-XTVToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, ERC20.whenNotPaused()()"];
4->1;
}
// Function: 6534.sol-XTVToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_156 = CONVERT 0 to address
owner(address) := TMP_156(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 6534.sol-XTVToken-setXTVNetworkContractAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
XTVNetworkContractAddress = addr

IRs:
XTVNetworkContractAddress(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 6534.sol-XTVToken-setXTVNetworkEndorser(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
xtvNetworkEndorser[_addr] = isEndorser

IRs:
REF_103(bool) -> xtvNetworkEndorser[_addr]
REF_103(bool) (->xtvNetworkEndorser) := isEndorser(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 6534.sol-XTVToken-setXTVTokenAirdropStatus(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
airdropActive = _status

IRs:
airdropActive(bool) := _status(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 6534.sol-XTVToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = XTV

IRs:
name(string) := XTV(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = XTV

IRs:
symbol(string) := XTV(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TOKEN_MULTIPLIER = 1000000

IRs:
TOKEN_MULTIPLIER(uint256) := 1000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
DECIMALS = 10 ** decimals

IRs:
TMP_189(uint256) = 10 ** decimals
DECIMALS(uint256) := TMP_189(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
INITIAL_SUPPLY = 500 * TOKEN_MULTIPLIER * DECIMALS

IRs:
TMP_190(uint256) = 500 * TOKEN_MULTIPLIER
TMP_191(uint256) = TMP_190 * DECIMALS
INITIAL_SUPPLY(uint256) := TMP_191(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
EXPECTED_TOTAL_SUPPLY = 1000 * TOKEN_MULTIPLIER * DECIMALS

IRs:
TMP_192(uint256) = 1000 * TOKEN_MULTIPLIER
TMP_193(uint256) = TMP_192 * DECIMALS
EXPECTED_TOTAL_SUPPLY(uint256) := TMP_193(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
ALLOC_TEAM = 330 * TOKEN_MULTIPLIER * DECIMALS

IRs:
TMP_194(uint256) = 330 * TOKEN_MULTIPLIER
TMP_195(uint256) = TMP_194 * DECIMALS
ALLOC_TEAM(uint256) := TMP_195(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
ALLOC_ADVISORS = 70 * TOKEN_MULTIPLIER * DECIMALS

IRs:
TMP_196(uint256) = 70 * TOKEN_MULTIPLIER
TMP_197(uint256) = TMP_196 * DECIMALS
ALLOC_ADVISORS(uint256) := TMP_197(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
ALLOC_FOUNDER = 100 * TOKEN_MULTIPLIER * DECIMALS

IRs:
TMP_198(uint256) = 100 * TOKEN_MULTIPLIER
TMP_199(uint256) = TMP_198 * DECIMALS
ALLOC_FOUNDER(uint256) := TMP_199(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
ALLOC_AIRDROP = 500 * TOKEN_MULTIPLIER * DECIMALS

IRs:
TMP_200(uint256) = 500 * TOKEN_MULTIPLIER
TMP_201(uint256) = TMP_200 * DECIMALS
ALLOC_AIRDROP(uint256) := TMP_201(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
AIRDROP_CLAIM_AMMOUNT = 500 * DECIMALS

IRs:
TMP_202(uint256) = 500 * DECIMALS
AIRDROP_CLAIM_AMMOUNT(uint256) := TMP_202(uint256)"];
}
// Function: 6534.sol-XTVToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 6534.sol-XTVToken-totalSupply()
digraph{
}
// Function: 6534.sol-XTVToken-transfer(address,uint256)
digraph{
}
// Function: 6534.sol-XTVToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 6534.sol-XTVToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 6534.sol-XTVToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, ERC20.whenPaused()()"];
4->1;
}
// Function: 6534.sol-XTVToken-validateSignature(string,bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
xtvVerificationHash = keccak256()(abi.encodePacked(verificationHash,message))

IRs:
TMP_210(bytes) = SOLIDITY_CALL abi.encodePacked()(verificationHash,message)
TMP_211(bytes32) = SOLIDITY_CALL keccak256()(TMP_210)
xtvVerificationHash(bytes32) := TMP_211(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(verifyXTVSignature(xtvVerificationHash,xtvSignature))

IRs:
TMP_212(bool) = INTERNAL_CALL, XTVNetworkGuard.verifyXTVSignature(bytes32,bytes)(xtvVerificationHash,xtvSignature)
TMP_213(None) = SOLIDITY_CALL require(bool)(TMP_212)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 6534.sol-XTVToken-verifyXTVSignature(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
signerAddress = XTVNetworkUtils.verifyXTVSignatureAddress(hash,sig)

IRs:
TMP_166(address) = LIBRARY_CALL, dest:XTVNetworkUtils, function:XTVNetworkUtils.verifyXTVSignatureAddress(bytes32,bytes), arguments:['hash', 'sig'] 
signerAddress(address) := TMP_166(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
xtvNetworkEndorser[signerAddress]

IRs:
REF_98(bool) -> xtvNetworkEndorser[signerAddress]
RETURN REF_98"];
}
// Function: 6534.sol-XTVToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_207 = UnaryType.BANG paused 
TMP_208(None) = SOLIDITY_CALL require(bool)(TMP_207)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6534.sol-XTVToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_209(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
