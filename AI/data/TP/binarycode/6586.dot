digraph G {
// Function: 6586.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 6586.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 6586.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 6586.sol-ERC20-totalSupply()
digraph{
}
// Function: 6586.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 6586.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 6586.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 6586.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 6586.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 6586.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_17 = CONVERT 0 to address
TMP_18(bool) = _newOwner != TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 6586.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6586.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_21(bool) = msg.sender == owner
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6586.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_13 = CONVERT 0 to address
owner(address) := TMP_13(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 6586.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 6586.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6586.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 6586.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6586.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 6586.sol-TokenTimelockController-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = _newOwner != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 6586.sol-TokenTimelockController-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
activated = true

IRs:
activated(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCrowdsale()

IRs:
MODIFIER_CALL, TokenTimelockController.onlyCrowdsale()()"];
2->1;
}
// Function: 6586.sol-TokenTimelockController-changeBeneficiary(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenTimeLocks[_newBeneficiary].push(tokenTimeLocks[msg.sender][_id])

IRs:
REF_51(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_newBeneficiary]
REF_53(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[msg.sender]
REF_54(TokenTimelockController.TokenTimelock) -> REF_53[_id]
REF_55 -> LENGTH REF_51
TMP_90(uint256) := REF_55(uint256)
TMP_91(uint256) = TMP_90 + 1
REF_55(uint256) (->tokenTimeLocks) := TMP_91(uint256)
REF_56(TokenTimelockController.TokenTimelock) -> REF_51[TMP_90]
REF_56(TokenTimelockController.TokenTimelock) (->tokenTimeLocks) := REF_54(TokenTimelockController.TokenTimelock)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenTimeLocks[msg.sender].length > 1

IRs:
REF_57(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[msg.sender]
REF_58 -> LENGTH REF_57
TMP_92(bool) = REF_58 > 1
CONDITION TMP_92"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenTimeLocks[msg.sender][_id] = tokenTimeLocks[msg.sender][tokenTimeLocks[msg.sender].length.sub(1)]

IRs:
REF_59(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[msg.sender]
REF_60(TokenTimelockController.TokenTimelock) -> REF_59[_id]
REF_61(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[msg.sender]
REF_62(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[msg.sender]
REF_63 -> LENGTH REF_62
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_63', '1'] 
REF_65(TokenTimelockController.TokenTimelock) -> REF_61[TMP_93]
REF_60(TokenTimelockController.TokenTimelock) (->tokenTimeLocks) := REF_65(TokenTimelockController.TokenTimelock)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete (tokenTimeLocks[msg.sender][tokenTimeLocks[msg.sender].length.sub(1)])

IRs:
REF_66(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[msg.sender]
REF_67(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[msg.sender]
REF_68 -> LENGTH REF_67
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_68', '1'] 
REF_70(TokenTimelockController.TokenTimelock) -> REF_66[TMP_94]
REF_66 = delete REF_70 "];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenTimeLocks[msg.sender].length --

IRs:
REF_71(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[msg.sender]
REF_72 -> LENGTH REF_71
TMP_95(uint256) := REF_72(uint256)
REF_72(-> tokenTimeLocks) = REF_72 - 1"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
TokenTimelockBeneficiaryChanged(msg.sender,_newBeneficiary)

IRs:
Emit TokenTimelockBeneficiaryChanged(msg.sender,_newBeneficiary)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyWhenActivated()

IRs:
MODIFIER_CALL, TokenTimelockController.onlyWhenActivated()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyValidTokenTimelock(msg.sender,_id)

IRs:
MODIFIER_CALL, TokenTimelockController.onlyValidTokenTimelock(address,uint256)(msg.sender,_id)"];
9->1;
}
// Function: 6586.sol-TokenTimelockController-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6586.sol-TokenTimelockController-constructor(ERC20)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = _token

IRs:
token(ERC20) := _token(ERC20)"];
}
// Function: 6586.sol-TokenTimelockController-createInvestorTokenTimeLock(address,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0) && _amount > 0)

IRs:
TMP_37 = CONVERT 0 to address
TMP_38(bool) = _beneficiary != TMP_37
TMP_39(bool) = _amount > 0
TMP_40(bool) = TMP_38 && TMP_39
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_tokenHolder != address(0))

IRs:
TMP_42 = CONVERT 0 to address
TMP_43(bool) = _tokenHolder != TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
tokenLock = TokenTimelock(_amount,_start.add(INVESTOR_LOCK_DURATION),false,false,false)

IRs:
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_start', 'INVESTOR_LOCK_DURATION'] 
TMP_46(TokenTimelockController.TokenTimelock) = new TokenTimelock(_amount,TMP_45,False,False,False)
tokenLock(TokenTimelockController.TokenTimelock) := TMP_46(TokenTimelockController.TokenTimelock)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenTimeLocks[_beneficiary].push(tokenLock)

IRs:
REF_1(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_3 -> LENGTH REF_1
TMP_48(uint256) := REF_3(uint256)
TMP_49(uint256) = TMP_48 + 1
REF_3(uint256) (->tokenTimeLocks) := TMP_49(uint256)
REF_4(TokenTimelockController.TokenTimelock) -> REF_1[TMP_48]
REF_4(TokenTimelockController.TokenTimelock) (->tokenTimeLocks) := tokenLock(TokenTimelockController.TokenTimelock)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(token.transferFrom(_tokenHolder,this,_amount))

IRs:
TMP_50(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transferFrom, arguments:['_tokenHolder', 'this', '_amount']  
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
TokenTimelockCreated(_beneficiary,tokenLock.releaseTime,false,_amount)

IRs:
REF_6(uint256) -> tokenLock.releaseTime
Emit TokenTimelockCreated(_beneficiary,REF_6,False,_amount)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyCrowdsale()

IRs:
MODIFIER_CALL, TokenTimelockController.onlyCrowdsale()()"];
8->1;
}
// Function: 6586.sol-TokenTimelockController-createTeamTokenTimeLock(address,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0) && _amount > 0)

IRs:
TMP_54 = CONVERT 0 to address
TMP_55(bool) = _beneficiary != TMP_54
TMP_56(bool) = _amount > 0
TMP_57(bool) = TMP_55 && TMP_56
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_tokenHolder != address(0))

IRs:
TMP_59 = CONVERT 0 to address
TMP_60(bool) = _tokenHolder != TMP_59
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amount = _amount.div(2)

IRs:
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_amount', '2'] 
amount(uint256) := TMP_62(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokenLock1 = TokenTimelock(amount,_start.add(TEAM_LOCK_DURATION_PART1),false,true,false)

IRs:
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_start', 'TEAM_LOCK_DURATION_PART1'] 
TMP_64(TokenTimelockController.TokenTimelock) = new TokenTimelock(amount,TMP_63,False,True,False)
tokenLock1(TokenTimelockController.TokenTimelock) := TMP_64(TokenTimelockController.TokenTimelock)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenTimeLocks[_beneficiary].push(tokenLock1)

IRs:
REF_9(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_11 -> LENGTH REF_9
TMP_66(uint256) := REF_11(uint256)
TMP_67(uint256) = TMP_66 + 1
REF_11(uint256) (->tokenTimeLocks) := TMP_67(uint256)
REF_12(TokenTimelockController.TokenTimelock) -> REF_9[TMP_66]
REF_12(TokenTimelockController.TokenTimelock) (->tokenTimeLocks) := tokenLock1(TokenTimelockController.TokenTimelock)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tokenLock2 = TokenTimelock(amount,_start.add(TEAM_LOCK_DURATION_PART2),false,true,false)

IRs:
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_start', 'TEAM_LOCK_DURATION_PART2'] 
TMP_69(TokenTimelockController.TokenTimelock) = new TokenTimelock(amount,TMP_68,False,True,False)
tokenLock2(TokenTimelockController.TokenTimelock) := TMP_69(TokenTimelockController.TokenTimelock)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokenTimeLocks[_beneficiary].push(tokenLock2)

IRs:
REF_14(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_16 -> LENGTH REF_14
TMP_71(uint256) := REF_16(uint256)
TMP_72(uint256) = TMP_71 + 1
REF_16(uint256) (->tokenTimeLocks) := TMP_72(uint256)
REF_17(TokenTimelockController.TokenTimelock) -> REF_14[TMP_71]
REF_17(TokenTimelockController.TokenTimelock) (->tokenTimeLocks) := tokenLock2(TokenTimelockController.TokenTimelock)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(token.transferFrom(_tokenHolder,this,_amount))

IRs:
TMP_73(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transferFrom, arguments:['_tokenHolder', 'this', '_amount']  
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
TokenTimelockCreated(_beneficiary,tokenLock1.releaseTime,true,amount)

IRs:
REF_19(uint256) -> tokenLock1.releaseTime
Emit TokenTimelockCreated(_beneficiary,REF_19,True,amount)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
TokenTimelockCreated(_beneficiary,tokenLock2.releaseTime,true,amount)

IRs:
REF_20(uint256) -> tokenLock2.releaseTime
Emit TokenTimelockCreated(_beneficiary,REF_20,True,amount)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
12->1;
}
// Function: 6586.sol-TokenTimelockController-getTokenTimelockCount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenTimeLocks[_beneficiary].length

IRs:
REF_32(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_33 -> LENGTH REF_32
RETURN REF_33"];
}
// Function: 6586.sol-TokenTimelockController-getTokenTimelockDetails(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_id < tokenTimeLocks[_beneficiary].length)

IRs:
REF_34(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_35 -> LENGTH REF_34
TMP_87(bool) = _id < REF_35
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_amount = tokenTimeLocks[_beneficiary][_id].amount

IRs:
REF_36(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_37(TokenTimelockController.TokenTimelock) -> REF_36[_id]
REF_38(uint256) -> REF_37.amount
_amount(uint256) := REF_38(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_releaseTime = tokenTimeLocks[_beneficiary][_id].releaseTime

IRs:
REF_39(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_40(TokenTimelockController.TokenTimelock) -> REF_39[_id]
REF_41(uint256) -> REF_40.releaseTime
_releaseTime(uint256) := REF_41(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_released = tokenTimeLocks[_beneficiary][_id].released

IRs:
REF_42(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_43(TokenTimelockController.TokenTimelock) -> REF_42[_id]
REF_44(bool) -> REF_43.released
_released(bool) := REF_44(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_revocable = tokenTimeLocks[_beneficiary][_id].revocable

IRs:
REF_45(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_46(TokenTimelockController.TokenTimelock) -> REF_45[_id]
REF_47(bool) -> REF_46.revocable
_revocable(bool) := REF_47(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_revoked = tokenTimeLocks[_beneficiary][_id].revoked

IRs:
REF_48(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_49(TokenTimelockController.TokenTimelock) -> REF_48[_id]
REF_50(bool) -> REF_49.revoked
_revoked(bool) := REF_50(bool)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
(_amount,_releaseTime,_released,_revocable,_revoked)

IRs:
RETURN _amount,_releaseTime,_released,_revocable,_revoked"];
}
// Function: 6586.sol-TokenTimelockController-onlyCrowdsale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == crowdsale)

IRs:
TMP_114(bool) = msg.sender == crowdsale
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6586.sol-TokenTimelockController-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_112(bool) = msg.sender == owner
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6586.sol-TokenTimelockController-onlyValidTokenTimelock(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_117 = CONVERT 0 to address
TMP_118(bool) = _beneficiary != TMP_117
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_id < tokenTimeLocks[_beneficiary].length)

IRs:
REF_81(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_82 -> LENGTH REF_81
TMP_120(bool) = _id < REF_82
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(! tokenTimeLocks[_beneficiary][_id].revoked)

IRs:
REF_83(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_84(TokenTimelockController.TokenTimelock) -> REF_83[_id]
REF_85(bool) -> REF_84.revoked
TMP_122 = UnaryType.BANG REF_85 
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 6586.sol-TokenTimelockController-onlyWhenActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(activated)

IRs:
TMP_116(None) = SOLIDITY_CALL require(bool)(activated)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6586.sol-TokenTimelockController-release(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseFor(msg.sender,_id)

IRs:
INTERNAL_CALL, TokenTimelockController.releaseFor(address,uint256)(msg.sender,_id)"];
}
// Function: 6586.sol-TokenTimelockController-releaseFor(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenLock = tokenTimeLocks[_beneficiary][_id]

IRs:
REF_73(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_74(TokenTimelockController.TokenTimelock) -> REF_73[_id]
tokenLock(TokenTimelockController.TokenTimelock) := REF_74(TokenTimelockController.TokenTimelock)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! tokenLock.released)

IRs:
REF_75(bool) -> tokenLock.released
TMP_100 = UnaryType.BANG REF_75 
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(block.timestamp >= tokenLock.releaseTime)

IRs:
REF_76(uint256) -> tokenLock.releaseTime
TMP_102(bool) = block.timestamp >= REF_76
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenLock.released = true

IRs:
REF_77(bool) -> tokenLock.released
REF_77(bool) (->tokenLock) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(token.transfer(_beneficiary,tokenLock.amount))

IRs:
REF_79(uint256) -> tokenLock.amount
TMP_104(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['_beneficiary', 'REF_79']  
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
TokenTimelockReleased(_beneficiary,tokenLock.amount)

IRs:
REF_80(uint256) -> tokenLock.amount
Emit TokenTimelockReleased(_beneficiary,REF_80)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyWhenActivated()

IRs:
MODIFIER_CALL, TokenTimelockController.onlyWhenActivated()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyValidTokenTimelock(_beneficiary,_id)

IRs:
MODIFIER_CALL, TokenTimelockController.onlyValidTokenTimelock(address,uint256)(_beneficiary,_id)"];
8->1;
}
// Function: 6586.sol-TokenTimelockController-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_24 = CONVERT 0 to address
owner(address) := TMP_24(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 6586.sol-TokenTimelockController-revokeTokenTimelock(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenTimeLocks[_beneficiary][_id].revocable)

IRs:
REF_21(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_22(TokenTimelockController.TokenTimelock) -> REF_21[_id]
REF_23(bool) -> REF_22.revocable
TMP_78(None) = SOLIDITY_CALL require(bool)(REF_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! tokenTimeLocks[_beneficiary][_id].released)

IRs:
REF_24(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_25(TokenTimelockController.TokenTimelock) -> REF_24[_id]
REF_26(bool) -> REF_25.released
TMP_79 = UnaryType.BANG REF_26 
TMP_80(None) = SOLIDITY_CALL require(bool)(TMP_79)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
tokenLock = tokenTimeLocks[_beneficiary][_id]

IRs:
REF_27(TokenTimelockController.TokenTimelock[]) -> tokenTimeLocks[_beneficiary]
REF_28(TokenTimelockController.TokenTimelock) -> REF_27[_id]
tokenLock(TokenTimelockController.TokenTimelock) := REF_28(TokenTimelockController.TokenTimelock)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenLock.revoked = true

IRs:
REF_29(bool) -> tokenLock.revoked
REF_29(bool) (->tokenLock) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(token.transfer(owner,tokenLock.amount))

IRs:
REF_31(uint256) -> tokenLock.amount
TMP_81(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['owner', 'REF_31']  
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
TokenTimelockRevoked(_beneficiary)

IRs:
Emit TokenTimelockRevoked(_beneficiary)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyWhenActivated()

IRs:
MODIFIER_CALL, TokenTimelockController.onlyWhenActivated()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyValidTokenTimelock(_beneficiary,_id)

IRs:
MODIFIER_CALL, TokenTimelockController.onlyValidTokenTimelock(address,uint256)(_beneficiary,_id)"];
9->1;
}
// Function: 6586.sol-TokenTimelockController-setCrowdsale(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_crowdsale != address(0))

IRs:
TMP_32 = CONVERT 0 to address
TMP_33(bool) = _crowdsale != TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
crowdsale = _crowdsale

IRs:
crowdsale(address) := _crowdsale(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 6586.sol-TokenTimelockController-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
TEAM_LOCK_DURATION_PART1 = 1 * 31536000

IRs:
TMP_109(uint256) = 1 * 31536000
TEAM_LOCK_DURATION_PART1(uint256) := TMP_109(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
TEAM_LOCK_DURATION_PART2 = 2 * 31536000

IRs:
TMP_110(uint256) = 2 * 31536000
TEAM_LOCK_DURATION_PART2(uint256) := TMP_110(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
INVESTOR_LOCK_DURATION = 6 * 2592000

IRs:
TMP_111(uint256) = 6 * 2592000
INVESTOR_LOCK_DURATION(uint256) := TMP_111(uint256)"];
}
// Function: 6586.sol-TokenTimelockController-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
}
