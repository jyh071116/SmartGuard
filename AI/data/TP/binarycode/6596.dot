digraph G {
// Function: 6596.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 6596.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _to != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_15(bool) = _value <= REF_0
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-BurnableToken-allowance(address,address)
digraph{
}
// Function: 6596.sol-BurnableToken-approve(address,uint256)
digraph{
}
// Function: 6596.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 6596.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_201(bool) = _value > 0
TMP_202(None) = SOLIDITY_CALL require(bool)(TMP_201)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_214(uint256) -> balances[msg.sender]
TMP_203(bool) = _value <= REF_214
TMP_204(None) = SOLIDITY_CALL require(bool)(TMP_203)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_215(uint256) -> balances[burner]
REF_216(uint256) -> balances[burner]
TMP_205(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_216', '_value'] 
REF_215(uint256) (->balances) := TMP_205(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_206(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_206(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
}
// Function: 6596.sol-BurnableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_197(mapping(address => uint256)) -> allowed[msg.sender]
REF_198(uint256) -> REF_197[_spender]
oldValue(uint256) := REF_198(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_190(bool) = _subtractedValue > oldValue
CONDITION TMP_190"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_199(mapping(address => uint256)) -> allowed[msg.sender]
REF_200(uint256) -> REF_199[_spender]
REF_200(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_201(mapping(address => uint256)) -> allowed[msg.sender]
REF_202(uint256) -> REF_201[_spender]
TMP_191(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_202(uint256) (->allowed) := TMP_191(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_204(mapping(address => uint256)) -> allowed[msg.sender]
REF_205(uint256) -> REF_204[_spender]
Emit Approval(msg.sender,_spender,REF_205)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-BurnableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_190(mapping(address => uint256)) -> allowed[msg.sender]
REF_191(uint256) -> REF_190[_spender]
REF_192(mapping(address => uint256)) -> allowed[msg.sender]
REF_193(uint256) -> REF_192[_spender]
TMP_188(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_193', '_addedValue'] 
REF_191(uint256) (->allowed) := TMP_188(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_195(mapping(address => uint256)) -> allowed[msg.sender]
REF_196(uint256) -> REF_195[_spender]
Emit Approval(msg.sender,_spender,REF_196)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 6596.sol-BurnableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 6596.sol-Consts-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
TOKEN_DECIMALS = 2

IRs:
TOKEN_DECIMALS(uint256) := 2(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
TOKEN_DECIMALS_UINT8 = 2

IRs:
TOKEN_DECIMALS_UINT8(uint8) := 2(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS

IRs:
TMP_331(uint256) = 10 ** TOKEN_DECIMALS
TOKEN_DECIMAL_MULTIPLIER(uint256) := TMP_331(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TOKEN_NAME = criptium

IRs:
TOKEN_NAME(string) := criptium(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
TOKEN_SYMBOL = CRIP

IRs:
TOKEN_SYMBOL(string) := CRIP(string)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
PAUSED = false

IRs:
PAUSED(bool) := False(bool)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
TARGET_USER = 0x26a8cA94E953500e03218A3289a533A6484a77b7

IRs:
TARGET_USER(address) := 220705821838350273837428037246700863502072575927(address)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
CONTINUE_MINTING = true

IRs:
CONTINUE_MINTING(bool) := True(bool)"];
}
// Function: 6596.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 6596.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 6596.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 6596.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 6596.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 6596.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 6596.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 6596.sol-ERC223Basic-balanceOf(address)
digraph{
}
// Function: 6596.sol-ERC223Basic-transfer(address,uint256)
digraph{
}
// Function: 6596.sol-ERC223Basic-transfer(address,uint256,bytes)
digraph{
}
// Function: 6596.sol-ERC223Receiver-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 6596.sol-ERC223Token-balanceOf(address)
digraph{
}
// Function: 6596.sol-ERC223Token-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 6596.sol-ERC223Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
transfer(_to,_value,empty)

IRs:
TMP_347(bool) = INTERNAL_CALL, ERC223Token.transfer(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_347"];
}
// Function: 6596.sol-ERC223Token-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_314(uint256) -> balances[msg.sender]
REF_315(uint256) -> balances[msg.sender]
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_315', '_value'] 
REF_314(uint256) (->balances) := TMP_341(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_317(uint256) -> balances[_to]
REF_318(uint256) -> balances[_to]
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_318', '_value'] 
REF_317(uint256) (->balances) := TMP_342(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
codeLength > 0

IRs:
TMP_343(bool) = codeLength > 0
CONDITION TMP_343"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
receiver = ERC223Receiver(_to)

IRs:
TMP_344 = CONVERT _to to ERC223Receiver
receiver(ERC223Receiver) := TMP_344(ERC223Receiver)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ERC223Receiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-FailingERC223Receiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_175(None) = SOLIDITY_CALL revert()()"];
}
// Function: 6596.sol-FreezableMintableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6596.sol-FreezableMintableToken-actualBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
super.balanceOf(_owner)

IRs:
TMP_266(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_owner)
RETURN TMP_266"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 6596.sol-FreezableMintableToken-allowance(address,address)
digraph{
}
// Function: 6596.sol-FreezableMintableToken-approve(address,uint256)
digraph{
}
// Function: 6596.sol-FreezableMintableToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
super.balanceOf(_owner) + freezingBalance[_owner]

IRs:
TMP_264(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_owner)
REF_265(uint256) -> freezingBalance[_owner]
TMP_265(uint256) = TMP_264 + REF_265
RETURN TMP_265"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 6596.sol-FreezableMintableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_327 = UnaryType.BANG mintingFinished 
TMP_328(None) = SOLIDITY_CALL require(bool)(TMP_327)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6596.sol-FreezableMintableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_248(mapping(address => uint256)) -> allowed[msg.sender]
REF_249(uint256) -> REF_248[_spender]
oldValue(uint256) := REF_249(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_253(bool) = _subtractedValue > oldValue
CONDITION TMP_253"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_250(mapping(address => uint256)) -> allowed[msg.sender]
REF_251(uint256) -> REF_250[_spender]
REF_251(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_252(mapping(address => uint256)) -> allowed[msg.sender]
REF_253(uint256) -> REF_252[_spender]
TMP_254(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_253(uint256) (->allowed) := TMP_254(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_255(mapping(address => uint256)) -> allowed[msg.sender]
REF_256(uint256) -> REF_255[_spender]
Emit Approval(msg.sender,_spender,REF_256)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-FreezableMintableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 6596.sol-FreezableMintableToken-freeze(address,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_until > block.timestamp)

IRs:
TMP_304(bool) = _until > block.timestamp
TMP_305(None) = SOLIDITY_CALL require(bool)(TMP_304)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
key = toKey(_to,_until)

IRs:
TMP_306(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
key(bytes32) := TMP_306(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
parentKey = toKey(_to,uint64(0))

IRs:
TMP_307 = CONVERT 0 to uint64
TMP_308(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,TMP_307)
parentKey(bytes32) := TMP_308(bytes32)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
next = chains[parentKey]

IRs:
REF_294(uint64) -> chains[parentKey]
next(uint64) := REF_294(uint64)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
next == 0

IRs:
TMP_309(bool) = next == 0
CONDITION TMP_309"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
chains[parentKey] = _until

IRs:
REF_295(uint64) -> chains[parentKey]
REF_295(uint64) (->chains) := _until(uint64)"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
nextKey = toKey(_to,next)

IRs:
TMP_310(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,next)
nextKey(bytes32) := TMP_310(bytes32)"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: BEGIN_LOOP 11
"];
11->12;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
next != 0 && _until > next

IRs:
TMP_311(bool) = next != 0
TMP_312(bool) = _until > next
TMP_313(bool) = TMP_311 && TMP_312
CONDITION TMP_313"];
12->13[label="True"];
12->17[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
parent = next

IRs:
parent(uint256) := next(uint64)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
parentKey = nextKey

IRs:
parentKey(bytes32) := nextKey(bytes32)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
next = chains[nextKey]

IRs:
REF_296(uint64) -> chains[nextKey]
next(uint64) := REF_296(uint64)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
nextKey = toKey(_to,next)

IRs:
TMP_314(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,next)
nextKey(bytes32) := TMP_314(bytes32)"];
16->12;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
_until == next

IRs:
TMP_315(bool) = _until == next
CONDITION TMP_315"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19
"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
next != 0

IRs:
TMP_316(bool) = next != 0
CONDITION TMP_316"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
chains[key] = next

IRs:
REF_297(uint64) -> chains[key]
REF_297(uint64) (->chains) := next(uint64)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
chains[parentKey] = _until

IRs:
REF_298(uint64) -> chains[parentKey]
REF_298(uint64) (->chains) := _until(uint64)"];
}
// Function: 6596.sol-FreezableMintableToken-freezeTo(address,uint256,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_277 = CONVERT 0 to address
TMP_278(bool) = _to != TMP_277
TMP_279(None) = SOLIDITY_CALL require(bool)(TMP_278)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[msg.sender])

IRs:
REF_271(uint256) -> balances[msg.sender]
TMP_280(bool) = _amount <= REF_271
TMP_281(None) = SOLIDITY_CALL require(bool)(TMP_280)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_amount)

IRs:
REF_272(uint256) -> balances[msg.sender]
REF_273(uint256) -> balances[msg.sender]
TMP_282(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_273', '_amount'] 
REF_272(uint256) (->balances) := TMP_282(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
currentKey = toKey(_to,_until)

IRs:
TMP_283(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
currentKey(bytes32) := TMP_283(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
freezings[currentKey] = freezings[currentKey].add(_amount)

IRs:
REF_275(uint256) -> freezings[currentKey]
REF_276(uint256) -> freezings[currentKey]
TMP_284(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_276', '_amount'] 
REF_275(uint256) (->freezings) := TMP_284(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
freezingBalance[_to] = freezingBalance[_to].add(_amount)

IRs:
REF_278(uint256) -> freezingBalance[_to]
REF_279(uint256) -> freezingBalance[_to]
TMP_285(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_279', '_amount'] 
REF_278(uint256) (->freezingBalance) := TMP_285(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
freeze(_to,_until)

IRs:
INTERNAL_CALL, FreezableToken.freeze(address,uint64)(_to,_until)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Freezed(_to,_until,_amount)

IRs:
Emit Freezed(_to,_until,_amount)"];
}
// Function: 6596.sol-FreezableMintableToken-freezingBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
freezingBalance[_owner]

IRs:
REF_266(uint256) -> freezingBalance[_owner]
RETURN REF_266"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 6596.sol-FreezableMintableToken-freezingCount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
release = chains[toKey(_addr,0)]

IRs:
TMP_267(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,0)
REF_267(uint64) -> chains[TMP_267]
release(uint64) := REF_267(uint64)"];
1->2;
2[label="Node Type: BEGIN_LOOP 2
"];
2->3;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
release != 0

IRs:
TMP_268(bool) = release != 0
CONDITION TMP_268"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
count ++

IRs:
TMP_269(uint256) := count(uint256)
count(uint256) = count + 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
release = chains[toKey(_addr,release)]

IRs:
TMP_270(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,release)
REF_268(uint64) -> chains[TMP_270]
release(uint64) := REF_268(uint64)"];
5->3;
6[label="Node Type: END_LOOP 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 6596.sol-FreezableMintableToken-getFreezing(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _index + 1

IRs:
TMP_271(uint256) = _index + 1
TMP_272(bool) = i < TMP_271
CONDITION TMP_272"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_release = chains[toKey(_addr,_release)]

IRs:
TMP_273(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,_release)
REF_269(uint64) -> chains[TMP_273]
_release(uint64) := REF_269(uint64)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_release == 0

IRs:
TMP_274(bool) = _release == 0
CONDITION TMP_274"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_275(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_balance = freezings[toKey(_addr,_release)]

IRs:
TMP_276(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,_release)
REF_270(uint256) -> freezings[TMP_276]
_balance(uint256) := REF_270(uint256)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_release,_balance)

IRs:
RETURN _release,_balance"];
}
// Function: 6596.sol-FreezableMintableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_241(mapping(address => uint256)) -> allowed[msg.sender]
REF_242(uint256) -> REF_241[_spender]
REF_243(mapping(address => uint256)) -> allowed[msg.sender]
REF_244(uint256) -> REF_243[_spender]
TMP_251(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_244', '_addedValue'] 
REF_242(uint256) (->allowed) := TMP_251(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_246(mapping(address => uint256)) -> allowed[msg.sender]
REF_247(uint256) -> REF_246[_spender]
Emit Approval(msg.sender,_spender,REF_247)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-FreezableMintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_224(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_220(uint256) -> balances[_to]
REF_221(uint256) -> balances[_to]
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_221', '_amount'] 
REF_220(uint256) (->balances) := TMP_225(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_227 = CONVERT 0 to address
Emit Transfer(TMP_227,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 6596.sol-FreezableMintableToken-mintAndFreeze(address,uint256,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_317(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
currentKey = toKey(_to,_until)

IRs:
TMP_318(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
currentKey(bytes32) := TMP_318(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
freezings[currentKey] = freezings[currentKey].add(_amount)

IRs:
REF_300(uint256) -> freezings[currentKey]
REF_301(uint256) -> freezings[currentKey]
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_301', '_amount'] 
REF_300(uint256) (->freezings) := TMP_319(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
freezingBalance[_to] = freezingBalance[_to].add(_amount)

IRs:
REF_303(uint256) -> freezingBalance[_to]
REF_304(uint256) -> freezingBalance[_to]
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_304', '_amount'] 
REF_303(uint256) (->freezingBalance) := TMP_320(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
freeze(_to,_until)

IRs:
INTERNAL_CALL, FreezableToken.freeze(address,uint64)(_to,_until)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Freezed(_to,_until,_amount)

IRs:
Emit Freezed(_to,_until,_amount)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
11->1;
}
// Function: 6596.sol-FreezableMintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_329(bool) = msg.sender == owner
TMP_330(None) = SOLIDITY_CALL require(bool)(TMP_329)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6596.sol-FreezableMintableToken-releaseAll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(release,balance) = getFreezing(msg.sender,0)

IRs:
TUPLE_2(uint64,uint256) = INTERNAL_CALL, FreezableToken.getFreezing(address,uint256)(msg.sender,0)
release(uint256)= UNPACK TUPLE_2 index: 0 
balance(uint256)= UNPACK TUPLE_2 index: 1 "];
3->4;
4[label="Node Type: BEGIN_LOOP 4
"];
4->5;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
release != 0 && block.timestamp > release

IRs:
TMP_300(bool) = release != 0
TMP_301(bool) = block.timestamp > release
TMP_302(bool) = TMP_300 && TMP_301
CONDITION TMP_302"];
5->6[label="True"];
5->9[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
releaseOnce()

IRs:
INTERNAL_CALL, FreezableToken.releaseOnce()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokens += balance

IRs:
tokens(uint256) = tokens + balance"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
(release,balance) = getFreezing(msg.sender,0)

IRs:
TUPLE_3(uint64,uint256) = INTERNAL_CALL, FreezableToken.getFreezing(address,uint256)(msg.sender,0)
release(uint256)= UNPACK TUPLE_3 index: 0 
balance(uint256)= UNPACK TUPLE_3 index: 1 "];
8->5;
9[label="Node Type: END_LOOP 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
tokens

IRs:
RETURN tokens"];
}
// Function: 6596.sol-FreezableMintableToken-releaseOnce()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
headKey = toKey(msg.sender,0)

IRs:
TMP_289(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(msg.sender,0)
headKey(bytes32) := TMP_289(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
head = chains[headKey]

IRs:
REF_281(uint64) -> chains[headKey]
head(uint64) := REF_281(uint64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(head != 0)

IRs:
TMP_290(bool) = head != 0
TMP_291(None) = SOLIDITY_CALL require(bool)(TMP_290)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(uint64(block.timestamp) > head)

IRs:
TMP_292 = CONVERT block.timestamp to uint64
TMP_293(bool) = TMP_292 > head
TMP_294(None) = SOLIDITY_CALL require(bool)(TMP_293)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
currentKey = toKey(msg.sender,head)

IRs:
TMP_295(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(msg.sender,head)
currentKey(bytes32) := TMP_295(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
next = chains[currentKey]

IRs:
REF_282(uint64) -> chains[currentKey]
next(uint64) := REF_282(uint64)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
amount = freezings[currentKey]

IRs:
REF_283(uint256) -> freezings[currentKey]
amount(uint256) := REF_283(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete freezings[currentKey]

IRs:
REF_284(uint256) -> freezings[currentKey]
freezings = delete REF_284 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(amount)

IRs:
REF_285(uint256) -> balances[msg.sender]
REF_286(uint256) -> balances[msg.sender]
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_286', 'amount'] 
REF_285(uint256) (->balances) := TMP_296(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount)

IRs:
REF_288(uint256) -> freezingBalance[msg.sender]
REF_289(uint256) -> freezingBalance[msg.sender]
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_289', 'amount'] 
REF_288(uint256) (->freezingBalance) := TMP_297(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
next == 0

IRs:
TMP_298(bool) = next == 0
CONDITION TMP_298"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
delete chains[headKey]

IRs:
REF_291(uint64) -> chains[headKey]
chains = delete REF_291 "];
12->15;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
chains[headKey] = next

IRs:
REF_292(uint64) -> chains[headKey]
REF_292(uint64) (->chains) := next(uint64)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
delete chains[currentKey]

IRs:
REF_293(uint64) -> chains[currentKey]
chains = delete REF_293 "];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Released(msg.sender,amount)

IRs:
Emit Released(msg.sender,amount)"];
}
// Function: 6596.sol-FreezableMintableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 6596.sol-FreezableMintableToken-toKey(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
result = 0x5749534800000000000000000000000000000000000000000000000000000000

IRs:
result(bytes32) := 39480772448535941496179204954862169494691089619604794184232587696854102179840(uint256)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 6596.sol-FreezableMintableToken-transfer(address,uint256)
digraph{
}
// Function: 6596.sol-FreezableMintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 6596.sol-FreezableMintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_234 = CONVERT 0 to address
TMP_235(bool) = newOwner != TMP_234
TMP_236(None) = SOLIDITY_CALL require(bool)(TMP_235)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 6596.sol-FreezableToken-actualBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
super.balanceOf(_owner)

IRs:
TMP_123(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_owner)
RETURN TMP_123"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 6596.sol-FreezableToken-allowance(address,address)
digraph{
}
// Function: 6596.sol-FreezableToken-approve(address,uint256)
digraph{
}
// Function: 6596.sol-FreezableToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
super.balanceOf(_owner) + freezingBalance[_owner]

IRs:
TMP_121(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_owner)
REF_138(uint256) -> freezingBalance[_owner]
TMP_122(uint256) = TMP_121 + REF_138
RETURN TMP_122"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 6596.sol-FreezableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_121(mapping(address => uint256)) -> allowed[msg.sender]
REF_122(uint256) -> REF_121[_spender]
oldValue(uint256) := REF_122(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_110(bool) = _subtractedValue > oldValue
CONDITION TMP_110"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_123(mapping(address => uint256)) -> allowed[msg.sender]
REF_124(uint256) -> REF_123[_spender]
REF_124(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_125(mapping(address => uint256)) -> allowed[msg.sender]
REF_126(uint256) -> REF_125[_spender]
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_126(uint256) (->allowed) := TMP_111(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_128(mapping(address => uint256)) -> allowed[msg.sender]
REF_129(uint256) -> REF_128[_spender]
Emit Approval(msg.sender,_spender,REF_129)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-FreezableToken-freeze(address,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_until > block.timestamp)

IRs:
TMP_161(bool) = _until > block.timestamp
TMP_162(None) = SOLIDITY_CALL require(bool)(TMP_161)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
key = toKey(_to,_until)

IRs:
TMP_163(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
key(bytes32) := TMP_163(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
parentKey = toKey(_to,uint64(0))

IRs:
TMP_164 = CONVERT 0 to uint64
TMP_165(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,TMP_164)
parentKey(bytes32) := TMP_165(bytes32)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
next = chains[parentKey]

IRs:
REF_167(uint64) -> chains[parentKey]
next(uint64) := REF_167(uint64)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
next == 0

IRs:
TMP_166(bool) = next == 0
CONDITION TMP_166"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
chains[parentKey] = _until

IRs:
REF_168(uint64) -> chains[parentKey]
REF_168(uint64) (->chains) := _until(uint64)"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
nextKey = toKey(_to,next)

IRs:
TMP_167(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,next)
nextKey(bytes32) := TMP_167(bytes32)"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: BEGIN_LOOP 11
"];
11->12;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
next != 0 && _until > next

IRs:
TMP_168(bool) = next != 0
TMP_169(bool) = _until > next
TMP_170(bool) = TMP_168 && TMP_169
CONDITION TMP_170"];
12->13[label="True"];
12->17[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
parent = next

IRs:
parent(uint256) := next(uint64)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
parentKey = nextKey

IRs:
parentKey(bytes32) := nextKey(bytes32)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
next = chains[nextKey]

IRs:
REF_169(uint64) -> chains[nextKey]
next(uint64) := REF_169(uint64)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
nextKey = toKey(_to,next)

IRs:
TMP_171(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,next)
nextKey(bytes32) := TMP_171(bytes32)"];
16->12;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
_until == next

IRs:
TMP_172(bool) = _until == next
CONDITION TMP_172"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19
"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
next != 0

IRs:
TMP_173(bool) = next != 0
CONDITION TMP_173"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
chains[key] = next

IRs:
REF_170(uint64) -> chains[key]
REF_170(uint64) (->chains) := next(uint64)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
chains[parentKey] = _until

IRs:
REF_171(uint64) -> chains[parentKey]
REF_171(uint64) (->chains) := _until(uint64)"];
}
// Function: 6596.sol-FreezableToken-freezeTo(address,uint256,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_134 = CONVERT 0 to address
TMP_135(bool) = _to != TMP_134
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[msg.sender])

IRs:
REF_144(uint256) -> balances[msg.sender]
TMP_137(bool) = _amount <= REF_144
TMP_138(None) = SOLIDITY_CALL require(bool)(TMP_137)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_amount)

IRs:
REF_145(uint256) -> balances[msg.sender]
REF_146(uint256) -> balances[msg.sender]
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_146', '_amount'] 
REF_145(uint256) (->balances) := TMP_139(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
currentKey = toKey(_to,_until)

IRs:
TMP_140(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
currentKey(bytes32) := TMP_140(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
freezings[currentKey] = freezings[currentKey].add(_amount)

IRs:
REF_148(uint256) -> freezings[currentKey]
REF_149(uint256) -> freezings[currentKey]
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_149', '_amount'] 
REF_148(uint256) (->freezings) := TMP_141(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
freezingBalance[_to] = freezingBalance[_to].add(_amount)

IRs:
REF_151(uint256) -> freezingBalance[_to]
REF_152(uint256) -> freezingBalance[_to]
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_152', '_amount'] 
REF_151(uint256) (->freezingBalance) := TMP_142(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
freeze(_to,_until)

IRs:
INTERNAL_CALL, FreezableToken.freeze(address,uint64)(_to,_until)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Freezed(_to,_until,_amount)

IRs:
Emit Freezed(_to,_until,_amount)"];
}
// Function: 6596.sol-FreezableToken-freezingBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
freezingBalance[_owner]

IRs:
REF_139(uint256) -> freezingBalance[_owner]
RETURN REF_139"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 6596.sol-FreezableToken-freezingCount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
release = chains[toKey(_addr,0)]

IRs:
TMP_124(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,0)
REF_140(uint64) -> chains[TMP_124]
release(uint64) := REF_140(uint64)"];
1->2;
2[label="Node Type: BEGIN_LOOP 2
"];
2->3;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
release != 0

IRs:
TMP_125(bool) = release != 0
CONDITION TMP_125"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
count ++

IRs:
TMP_126(uint256) := count(uint256)
count(uint256) = count + 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
release = chains[toKey(_addr,release)]

IRs:
TMP_127(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,release)
REF_141(uint64) -> chains[TMP_127]
release(uint64) := REF_141(uint64)"];
5->3;
6[label="Node Type: END_LOOP 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 6596.sol-FreezableToken-getFreezing(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _index + 1

IRs:
TMP_128(uint256) = _index + 1
TMP_129(bool) = i < TMP_128
CONDITION TMP_129"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_release = chains[toKey(_addr,_release)]

IRs:
TMP_130(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,_release)
REF_142(uint64) -> chains[TMP_130]
_release(uint64) := REF_142(uint64)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_release == 0

IRs:
TMP_131(bool) = _release == 0
CONDITION TMP_131"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_132(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_balance = freezings[toKey(_addr,_release)]

IRs:
TMP_133(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,_release)
REF_143(uint256) -> freezings[TMP_133]
_balance(uint256) := REF_143(uint256)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_release,_balance)

IRs:
RETURN _release,_balance"];
}
// Function: 6596.sol-FreezableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_114(mapping(address => uint256)) -> allowed[msg.sender]
REF_115(uint256) -> REF_114[_spender]
REF_116(mapping(address => uint256)) -> allowed[msg.sender]
REF_117(uint256) -> REF_116[_spender]
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_117', '_addedValue'] 
REF_115(uint256) (->allowed) := TMP_108(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_119(mapping(address => uint256)) -> allowed[msg.sender]
REF_120(uint256) -> REF_119[_spender]
Emit Approval(msg.sender,_spender,REF_120)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-FreezableToken-releaseAll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(release,balance) = getFreezing(msg.sender,0)

IRs:
TUPLE_0(uint64,uint256) = INTERNAL_CALL, FreezableToken.getFreezing(address,uint256)(msg.sender,0)
release(uint256)= UNPACK TUPLE_0 index: 0 
balance(uint256)= UNPACK TUPLE_0 index: 1 "];
3->4;
4[label="Node Type: BEGIN_LOOP 4
"];
4->5;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
release != 0 && block.timestamp > release

IRs:
TMP_157(bool) = release != 0
TMP_158(bool) = block.timestamp > release
TMP_159(bool) = TMP_157 && TMP_158
CONDITION TMP_159"];
5->6[label="True"];
5->9[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
releaseOnce()

IRs:
INTERNAL_CALL, FreezableToken.releaseOnce()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokens += balance

IRs:
tokens(uint256) = tokens + balance"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
(release,balance) = getFreezing(msg.sender,0)

IRs:
TUPLE_1(uint64,uint256) = INTERNAL_CALL, FreezableToken.getFreezing(address,uint256)(msg.sender,0)
release(uint256)= UNPACK TUPLE_1 index: 0 
balance(uint256)= UNPACK TUPLE_1 index: 1 "];
8->5;
9[label="Node Type: END_LOOP 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
tokens

IRs:
RETURN tokens"];
}
// Function: 6596.sol-FreezableToken-releaseOnce()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
headKey = toKey(msg.sender,0)

IRs:
TMP_146(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(msg.sender,0)
headKey(bytes32) := TMP_146(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
head = chains[headKey]

IRs:
REF_154(uint64) -> chains[headKey]
head(uint64) := REF_154(uint64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(head != 0)

IRs:
TMP_147(bool) = head != 0
TMP_148(None) = SOLIDITY_CALL require(bool)(TMP_147)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(uint64(block.timestamp) > head)

IRs:
TMP_149 = CONVERT block.timestamp to uint64
TMP_150(bool) = TMP_149 > head
TMP_151(None) = SOLIDITY_CALL require(bool)(TMP_150)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
currentKey = toKey(msg.sender,head)

IRs:
TMP_152(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(msg.sender,head)
currentKey(bytes32) := TMP_152(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
next = chains[currentKey]

IRs:
REF_155(uint64) -> chains[currentKey]
next(uint64) := REF_155(uint64)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
amount = freezings[currentKey]

IRs:
REF_156(uint256) -> freezings[currentKey]
amount(uint256) := REF_156(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete freezings[currentKey]

IRs:
REF_157(uint256) -> freezings[currentKey]
freezings = delete REF_157 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(amount)

IRs:
REF_158(uint256) -> balances[msg.sender]
REF_159(uint256) -> balances[msg.sender]
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_159', 'amount'] 
REF_158(uint256) (->balances) := TMP_153(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount)

IRs:
REF_161(uint256) -> freezingBalance[msg.sender]
REF_162(uint256) -> freezingBalance[msg.sender]
TMP_154(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_162', 'amount'] 
REF_161(uint256) (->freezingBalance) := TMP_154(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
next == 0

IRs:
TMP_155(bool) = next == 0
CONDITION TMP_155"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
delete chains[headKey]

IRs:
REF_164(uint64) -> chains[headKey]
chains = delete REF_164 "];
12->15;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
chains[headKey] = next

IRs:
REF_165(uint64) -> chains[headKey]
REF_165(uint64) (->chains) := next(uint64)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
delete chains[currentKey]

IRs:
REF_166(uint64) -> chains[currentKey]
chains = delete REF_166 "];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Released(msg.sender,amount)

IRs:
Emit Released(msg.sender,amount)"];
}
// Function: 6596.sol-FreezableToken-toKey(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
result = 0x5749534800000000000000000000000000000000000000000000000000000000

IRs:
result(bytes32) := 39480772448535941496179204954862169494691089619604794184232587696854102179840(uint256)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 6596.sol-FreezableToken-transfer(address,uint256)
digraph{
}
// Function: 6596.sol-FreezableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 6596.sol-MainToken-MainToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
init()

IRs:
INTERNAL_CALL, MainToken.init()()"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transferOwnership(TARGET_USER)

IRs:
INTERNAL_CALL, Ownable.transferOwnership(address)(TARGET_USER)"];
}
// Function: 6596.sol-MainToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6596.sol-MainToken-actualBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
super.balanceOf(_owner)

IRs:
TMP_413(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_owner)
RETURN TMP_413"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 6596.sol-MainToken-allowance(address,address)
digraph{
}
// Function: 6596.sol-MainToken-approve(address,uint256)
digraph{
}
// Function: 6596.sol-MainToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
super.balanceOf(_owner) + freezingBalance[_owner]

IRs:
TMP_411(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(_owner)
REF_379(uint256) -> freezingBalance[_owner]
TMP_412(uint256) = TMP_411 + REF_379
RETURN TMP_412"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 6596.sol-MainToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_359(bool) = _value > 0
TMP_360(None) = SOLIDITY_CALL require(bool)(TMP_359)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_321(uint256) -> balances[msg.sender]
TMP_361(bool) = _value <= REF_321
TMP_362(None) = SOLIDITY_CALL require(bool)(TMP_361)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_322(uint256) -> balances[burner]
REF_323(uint256) -> balances[burner]
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_323', '_value'] 
REF_322(uint256) (->balances) := TMP_363(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_364(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
}
// Function: 6596.sol-MainToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_484 = UnaryType.BANG mintingFinished 
TMP_485(None) = SOLIDITY_CALL require(bool)(TMP_484)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6596.sol-MainToken-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
TOKEN_DECIMALS_UINT8

IRs:
RETURN TOKEN_DECIMALS_UINT8"];
2[label="Node Type: RETURN 2

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 6596.sol-MainToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_351(mapping(address => uint256)) -> allowed[msg.sender]
REF_352(uint256) -> REF_351[_spender]
oldValue(uint256) := REF_352(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_380(bool) = _subtractedValue > oldValue
CONDITION TMP_380"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_353(mapping(address => uint256)) -> allowed[msg.sender]
REF_354(uint256) -> REF_353[_spender]
REF_354(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_355(mapping(address => uint256)) -> allowed[msg.sender]
REF_356(uint256) -> REF_355[_spender]
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_356(uint256) (->allowed) := TMP_381(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_358(mapping(address => uint256)) -> allowed[msg.sender]
REF_359(uint256) -> REF_358[_spender]
Emit Approval(msg.sender,_spender,REF_359)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-MainToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 6596.sol-MainToken-freeze(address,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_until > block.timestamp)

IRs:
TMP_451(bool) = _until > block.timestamp
TMP_452(None) = SOLIDITY_CALL require(bool)(TMP_451)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
key = toKey(_to,_until)

IRs:
TMP_453(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
key(bytes32) := TMP_453(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
parentKey = toKey(_to,uint64(0))

IRs:
TMP_454 = CONVERT 0 to uint64
TMP_455(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,TMP_454)
parentKey(bytes32) := TMP_455(bytes32)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
next = chains[parentKey]

IRs:
REF_408(uint64) -> chains[parentKey]
next(uint64) := REF_408(uint64)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
next == 0

IRs:
TMP_456(bool) = next == 0
CONDITION TMP_456"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
chains[parentKey] = _until

IRs:
REF_409(uint64) -> chains[parentKey]
REF_409(uint64) (->chains) := _until(uint64)"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
nextKey = toKey(_to,next)

IRs:
TMP_457(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,next)
nextKey(bytes32) := TMP_457(bytes32)"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: BEGIN_LOOP 11
"];
11->12;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
next != 0 && _until > next

IRs:
TMP_458(bool) = next != 0
TMP_459(bool) = _until > next
TMP_460(bool) = TMP_458 && TMP_459
CONDITION TMP_460"];
12->13[label="True"];
12->17[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
parent = next

IRs:
parent(uint256) := next(uint64)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
parentKey = nextKey

IRs:
parentKey(bytes32) := nextKey(bytes32)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
next = chains[nextKey]

IRs:
REF_410(uint64) -> chains[nextKey]
next(uint64) := REF_410(uint64)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
nextKey = toKey(_to,next)

IRs:
TMP_461(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,next)
nextKey(bytes32) := TMP_461(bytes32)"];
16->12;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
_until == next

IRs:
TMP_462(bool) = _until == next
CONDITION TMP_462"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19
"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
next != 0

IRs:
TMP_463(bool) = next != 0
CONDITION TMP_463"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
chains[key] = next

IRs:
REF_411(uint64) -> chains[key]
REF_411(uint64) (->chains) := next(uint64)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
chains[parentKey] = _until

IRs:
REF_412(uint64) -> chains[parentKey]
REF_412(uint64) (->chains) := _until(uint64)"];
}
// Function: 6596.sol-MainToken-freezeTo(address,uint256,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_424 = CONVERT 0 to address
TMP_425(bool) = _to != TMP_424
TMP_426(None) = SOLIDITY_CALL require(bool)(TMP_425)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[msg.sender])

IRs:
REF_385(uint256) -> balances[msg.sender]
TMP_427(bool) = _amount <= REF_385
TMP_428(None) = SOLIDITY_CALL require(bool)(TMP_427)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_amount)

IRs:
REF_386(uint256) -> balances[msg.sender]
REF_387(uint256) -> balances[msg.sender]
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_387', '_amount'] 
REF_386(uint256) (->balances) := TMP_429(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
currentKey = toKey(_to,_until)

IRs:
TMP_430(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
currentKey(bytes32) := TMP_430(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
freezings[currentKey] = freezings[currentKey].add(_amount)

IRs:
REF_389(uint256) -> freezings[currentKey]
REF_390(uint256) -> freezings[currentKey]
TMP_431(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_390', '_amount'] 
REF_389(uint256) (->freezings) := TMP_431(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
freezingBalance[_to] = freezingBalance[_to].add(_amount)

IRs:
REF_392(uint256) -> freezingBalance[_to]
REF_393(uint256) -> freezingBalance[_to]
TMP_432(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_393', '_amount'] 
REF_392(uint256) (->freezingBalance) := TMP_432(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
freeze(_to,_until)

IRs:
INTERNAL_CALL, FreezableToken.freeze(address,uint64)(_to,_until)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Freezed(_to,_until,_amount)

IRs:
Emit Freezed(_to,_until,_amount)"];
}
// Function: 6596.sol-MainToken-freezingBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
freezingBalance[_owner]

IRs:
REF_380(uint256) -> freezingBalance[_owner]
RETURN REF_380"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 6596.sol-MainToken-freezingCount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
release = chains[toKey(_addr,0)]

IRs:
TMP_414(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,0)
REF_381(uint64) -> chains[TMP_414]
release(uint64) := REF_381(uint64)"];
1->2;
2[label="Node Type: BEGIN_LOOP 2
"];
2->3;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
release != 0

IRs:
TMP_415(bool) = release != 0
CONDITION TMP_415"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
count ++

IRs:
TMP_416(uint256) := count(uint256)
count(uint256) = count + 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
release = chains[toKey(_addr,release)]

IRs:
TMP_417(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,release)
REF_382(uint64) -> chains[TMP_417]
release(uint64) := REF_382(uint64)"];
5->3;
6[label="Node Type: END_LOOP 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 6596.sol-MainToken-getFreezing(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _index + 1

IRs:
TMP_418(uint256) = _index + 1
TMP_419(bool) = i < TMP_418
CONDITION TMP_419"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_release = chains[toKey(_addr,_release)]

IRs:
TMP_420(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,_release)
REF_383(uint64) -> chains[TMP_420]
_release(uint64) := REF_383(uint64)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_release == 0

IRs:
TMP_421(bool) = _release == 0
CONDITION TMP_421"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_422(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_balance = freezings[toKey(_addr,_release)]

IRs:
TMP_423(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_addr,_release)
REF_384(uint256) -> freezings[TMP_423]
_balance(uint256) := REF_384(uint256)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_release,_balance)

IRs:
RETURN _release,_balance"];
}
// Function: 6596.sol-MainToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_344(mapping(address => uint256)) -> allowed[msg.sender]
REF_345(uint256) -> REF_344[_spender]
REF_346(mapping(address => uint256)) -> allowed[msg.sender]
REF_347(uint256) -> REF_346[_spender]
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_347', '_addedValue'] 
REF_345(uint256) (->allowed) := TMP_378(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_349(mapping(address => uint256)) -> allowed[msg.sender]
REF_350(uint256) -> REF_349[_spender]
Emit Approval(msg.sender,_spender,REF_350)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-MainToken-init()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! initialized)

IRs:
TMP_466 = UnaryType.BANG initialized 
TMP_467(None) = SOLIDITY_CALL require(bool)(TMP_466)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
initialized = true

IRs:
initialized(bool) := True(bool)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
PAUSED

IRs:
CONDITION PAUSED"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pause()

IRs:
INTERNAL_CALL, Pausable.pause()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
! CONTINUE_MINTING

IRs:
TMP_469 = UnaryType.BANG CONTINUE_MINTING 
CONDITION TMP_469"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
finishMinting()

IRs:
TMP_470(bool) = INTERNAL_CALL, MintableToken.finishMinting()()"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Initialized()

IRs:
Emit Initialized()"];
}
// Function: 6596.sol-MainToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_401(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_376(uint256) -> balances[_to]
REF_377(uint256) -> balances[_to]
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_377', '_amount'] 
REF_376(uint256) (->balances) := TMP_402(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_404 = CONVERT 0 to address
Emit Transfer(TMP_404,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 6596.sol-MainToken-mintAndFreeze(address,uint256,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_391(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
currentKey = toKey(_to,_until)

IRs:
TMP_392(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(_to,_until)
currentKey(bytes32) := TMP_392(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
freezings[currentKey] = freezings[currentKey].add(_amount)

IRs:
REF_369(uint256) -> freezings[currentKey]
REF_370(uint256) -> freezings[currentKey]
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_370', '_amount'] 
REF_369(uint256) (->freezings) := TMP_393(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
freezingBalance[_to] = freezingBalance[_to].add(_amount)

IRs:
REF_372(uint256) -> freezingBalance[_to]
REF_373(uint256) -> freezingBalance[_to]
TMP_394(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_373', '_amount'] 
REF_372(uint256) (->freezingBalance) := TMP_394(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
freeze(_to,_until)

IRs:
INTERNAL_CALL, FreezableToken.freeze(address,uint64)(_to,_until)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Freezed(_to,_until,_amount)

IRs:
Emit Freezed(_to,_until,_amount)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
11->1;
}
// Function: 6596.sol-MainToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
TOKEN_NAME

IRs:
RETURN TOKEN_NAME"];
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 6596.sol-MainToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_482(bool) = msg.sender == owner
TMP_483(None) = SOLIDITY_CALL require(bool)(TMP_482)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6596.sol-MainToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 6596.sol-MainToken-releaseAll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(release,balance) = getFreezing(msg.sender,0)

IRs:
TUPLE_4(uint64,uint256) = INTERNAL_CALL, FreezableToken.getFreezing(address,uint256)(msg.sender,0)
release(uint256)= UNPACK TUPLE_4 index: 0 
balance(uint256)= UNPACK TUPLE_4 index: 1 "];
3->4;
4[label="Node Type: BEGIN_LOOP 4
"];
4->5;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
release != 0 && block.timestamp > release

IRs:
TMP_447(bool) = release != 0
TMP_448(bool) = block.timestamp > release
TMP_449(bool) = TMP_447 && TMP_448
CONDITION TMP_449"];
5->6[label="True"];
5->9[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
releaseOnce()

IRs:
INTERNAL_CALL, FreezableToken.releaseOnce()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokens += balance

IRs:
tokens(uint256) = tokens + balance"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
(release,balance) = getFreezing(msg.sender,0)

IRs:
TUPLE_5(uint64,uint256) = INTERNAL_CALL, FreezableToken.getFreezing(address,uint256)(msg.sender,0)
release(uint256)= UNPACK TUPLE_5 index: 0 
balance(uint256)= UNPACK TUPLE_5 index: 1 "];
8->5;
9[label="Node Type: END_LOOP 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
tokens

IRs:
RETURN tokens"];
}
// Function: 6596.sol-MainToken-releaseOnce()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
headKey = toKey(msg.sender,0)

IRs:
TMP_436(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(msg.sender,0)
headKey(bytes32) := TMP_436(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
head = chains[headKey]

IRs:
REF_395(uint64) -> chains[headKey]
head(uint64) := REF_395(uint64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(head != 0)

IRs:
TMP_437(bool) = head != 0
TMP_438(None) = SOLIDITY_CALL require(bool)(TMP_437)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(uint64(block.timestamp) > head)

IRs:
TMP_439 = CONVERT block.timestamp to uint64
TMP_440(bool) = TMP_439 > head
TMP_441(None) = SOLIDITY_CALL require(bool)(TMP_440)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
currentKey = toKey(msg.sender,head)

IRs:
TMP_442(bytes32) = INTERNAL_CALL, FreezableToken.toKey(address,uint256)(msg.sender,head)
currentKey(bytes32) := TMP_442(bytes32)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
next = chains[currentKey]

IRs:
REF_396(uint64) -> chains[currentKey]
next(uint64) := REF_396(uint64)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
amount = freezings[currentKey]

IRs:
REF_397(uint256) -> freezings[currentKey]
amount(uint256) := REF_397(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete freezings[currentKey]

IRs:
REF_398(uint256) -> freezings[currentKey]
freezings = delete REF_398 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(amount)

IRs:
REF_399(uint256) -> balances[msg.sender]
REF_400(uint256) -> balances[msg.sender]
TMP_443(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_400', 'amount'] 
REF_399(uint256) (->balances) := TMP_443(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount)

IRs:
REF_402(uint256) -> freezingBalance[msg.sender]
REF_403(uint256) -> freezingBalance[msg.sender]
TMP_444(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_403', 'amount'] 
REF_402(uint256) (->freezingBalance) := TMP_444(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
next == 0

IRs:
TMP_445(bool) = next == 0
CONDITION TMP_445"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
delete chains[headKey]

IRs:
REF_405(uint64) -> chains[headKey]
chains = delete REF_405 "];
12->15;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
chains[headKey] = next

IRs:
REF_406(uint64) -> chains[headKey]
REF_406(uint64) (->chains) := next(uint64)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
delete chains[currentKey]

IRs:
REF_407(uint64) -> chains[currentKey]
chains = delete REF_407 "];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Released(msg.sender,amount)

IRs:
Emit Released(msg.sender,amount)"];
}
// Function: 6596.sol-MainToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
TOKEN_DECIMALS = 2

IRs:
TOKEN_DECIMALS(uint256) := 2(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
TOKEN_DECIMALS_UINT8 = 2

IRs:
TOKEN_DECIMALS_UINT8(uint8) := 2(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS

IRs:
TMP_478(uint256) = 10 ** TOKEN_DECIMALS
TOKEN_DECIMAL_MULTIPLIER(uint256) := TMP_478(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TOKEN_NAME = criptium

IRs:
TOKEN_NAME(string) := criptium(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
TOKEN_SYMBOL = CRIP

IRs:
TOKEN_SYMBOL(string) := CRIP(string)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
PAUSED = false

IRs:
PAUSED(bool) := False(bool)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
TARGET_USER = 0x26a8cA94E953500e03218A3289a533A6484a77b7

IRs:
TARGET_USER(address) := 220705821838350273837428037246700863502072575927(address)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
CONTINUE_MINTING = true

IRs:
CONTINUE_MINTING(bool) := True(bool)"];
}
// Function: 6596.sol-MainToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
initialized = false

IRs:
initialized(bool) := False(bool)"];
}
// Function: 6596.sol-MainToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
TOKEN_SYMBOL

IRs:
RETURN TOKEN_SYMBOL"];
2[label="Node Type: RETURN 2

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 6596.sol-MainToken-toKey(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
result = 0x5749534800000000000000000000000000000000000000000000000000000000

IRs:
result(bytes32) := 39480772448535941496179204954862169494691089619604794184232587696854102179840(uint256)"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 6596.sol-MainToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_475 = UnaryType.BANG paused 
TMP_476(None) = SOLIDITY_CALL require(bool)(TMP_475)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_477(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(_to,_value)
RETURN TMP_477"];
3[label="Node Type: RETURN 3

EXPRESSION:
_success

IRs:
RETURN _success"];
}
// Function: 6596.sol-MainToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_472 = UnaryType.BANG paused 
TMP_473(None) = SOLIDITY_CALL require(bool)(TMP_472)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_474(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_474"];
3[label="Node Type: RETURN 3

EXPRESSION:
_success

IRs:
RETURN _success"];
}
// Function: 6596.sol-MainToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_354 = CONVERT 0 to address
TMP_355(bool) = newOwner != TMP_354
TMP_356(None) = SOLIDITY_CALL require(bool)(TMP_355)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 6596.sol-MainToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 6596.sol-MainToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_479 = UnaryType.BANG paused 
TMP_480(None) = SOLIDITY_CALL require(bool)(TMP_479)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6596.sol-MainToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_481(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6596.sol-MintableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6596.sol-MintableToken-allowance(address,address)
digraph{
}
// Function: 6596.sol-MintableToken-approve(address,uint256)
digraph{
}
// Function: 6596.sol-MintableToken-balanceOf(address)
digraph{
}
// Function: 6596.sol-MintableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_94 = UnaryType.BANG mintingFinished 
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6596.sol-MintableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
oldValue(uint256) := REF_76(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_71(bool) = _subtractedValue > oldValue
CONDITION TMP_71"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
REF_78(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_79(mapping(address => uint256)) -> allowed[msg.sender]
REF_80(uint256) -> REF_79[_spender]
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_80(uint256) (->allowed) := TMP_72(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(uint256) -> REF_82[_spender]
Emit Approval(msg.sender,_spender,REF_83)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-MintableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
// Function: 6596.sol-MintableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', '_addedValue'] 
REF_69(uint256) (->allowed) := TMP_69(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
Emit Approval(msg.sender,_spender,REF_74)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-MintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_82(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_93(uint256) -> balances[_to]
REF_94(uint256) -> balances[_to]
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_94', '_amount'] 
REF_93(uint256) (->balances) := TMP_83(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_85 = CONVERT 0 to address
Emit Transfer(TMP_85,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 6596.sol-MintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_92(bool) = msg.sender == owner
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6596.sol-MintableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 6596.sol-MintableToken-transfer(address,uint256)
digraph{
}
// Function: 6596.sol-MintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 6596.sol-MintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_52 = CONVERT 0 to address
TMP_53(bool) = newOwner != TMP_52
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 6596.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6596.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_50(bool) = msg.sender == owner
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6596.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_45 = CONVERT 0 to address
TMP_46(bool) = newOwner != TMP_45
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 6596.sol-Pausable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6596.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_219(bool) = msg.sender == owner
TMP_220(None) = SOLIDITY_CALL require(bool)(TMP_219)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6596.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 6596.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 6596.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_208 = CONVERT 0 to address
TMP_209(bool) = newOwner != TMP_208
TMP_210(None) = SOLIDITY_CALL require(bool)(TMP_209)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 6596.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 6596.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_221 = UnaryType.BANG paused 
TMP_222(None) = SOLIDITY_CALL require(bool)(TMP_221)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6596.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_223(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6596.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6596.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6596.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6596.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 6596.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_32(mapping(address => uint256)) -> allowed[_owner]
REF_33(uint256) -> REF_32[_spender]
RETURN REF_33"];
}
// Function: 6596.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_30(mapping(address => uint256)) -> allowed[msg.sender]
REF_31(uint256) -> REF_30[_spender]
REF_31(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 6596.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_41(mapping(address => uint256)) -> allowed[msg.sender]
REF_42(uint256) -> REF_41[_spender]
oldValue(uint256) := REF_42(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_42(bool) = _subtractedValue > oldValue
CONDITION TMP_42"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_43(mapping(address => uint256)) -> allowed[msg.sender]
REF_44(uint256) -> REF_43[_spender]
REF_44(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_45(mapping(address => uint256)) -> allowed[msg.sender]
REF_46(uint256) -> REF_45[_spender]
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_46(uint256) (->allowed) := TMP_43(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_48(mapping(address => uint256)) -> allowed[msg.sender]
REF_49(uint256) -> REF_48[_spender]
Emit Approval(msg.sender,_spender,REF_49)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_37', '_addedValue'] 
REF_35(uint256) (->allowed) := TMP_40(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_39(mapping(address => uint256)) -> allowed[msg.sender]
REF_40(uint256) -> REF_39[_spender]
Emit Approval(msg.sender,_spender,REF_40)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 6596.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = _to != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_16(uint256) -> balances[_from]
TMP_31(bool) = _value <= REF_16
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_17(mapping(address => uint256)) -> allowed[_from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_33(bool) = _value <= REF_18
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_19(uint256) -> balances[_from]
REF_20(uint256) -> balances[_from]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_20', '_value'] 
REF_19(uint256) (->balances) := TMP_35(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_22(uint256) -> balances[_to]
REF_23(uint256) -> balances[_to]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_23', '_value'] 
REF_22(uint256) (->balances) := TMP_36(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
REF_27(mapping(address => uint256)) -> allowed[_from]
REF_28(uint256) -> REF_27[msg.sender]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_28', '_value'] 
REF_26(uint256) (->allowed) := TMP_37(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6596.sol-SuccessfulERC223Receiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Invoked(_from,_value,_data)

IRs:
Emit Invoked(_from,_value,_data)"];
}
}
