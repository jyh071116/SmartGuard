digraph G {
// Function: 6846.sol-DiviesInterface-deposit()
digraph{
}
// Function: 6846.sol-F3DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_491(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_492(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_491'] 
TMP_493(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_494(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_493'] 
TMP_495(uint256) = TMP_494 / 2
TMP_496(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_492', 'TMP_495'] 
TMP_497(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_498(uint256) = TMP_496 / TMP_497
RETURN TMP_498"];
}
// Function: 6846.sol-F3DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_481(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(_curKeys)
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_483(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(TMP_482)
TMP_484(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_481', 'TMP_483'] 
RETURN TMP_484"];
}
// Function: 6846.sol-F3DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_486(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_485', '312500000000000000000000000'] 
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_486', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_488(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_487'] 
TMP_489(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_488', '74999921875000000000000000000000'] 
TMP_490(uint256) = TMP_489 / 156250000
RETURN TMP_490"];
}
// Function: 6846.sol-F3DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_477(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_478(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(TMP_477)
TMP_479(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(_curEth)
TMP_480(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_478', 'TMP_479'] 
RETURN TMP_480"];
}
// Function: 6846.sol-F3DexternalSettingsInterface-getFastExtra()
digraph{
}
// Function: 6846.sol-F3DexternalSettingsInterface-getFastGap()
digraph{
}
// Function: 6846.sol-F3DexternalSettingsInterface-getLongExtra()
digraph{
}
// Function: 6846.sol-F3DexternalSettingsInterface-getLongGap()
digraph{
}
// Function: 6846.sol-FoMo3Dlong-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == 0x18E90Fc6F70344f53EBd4f6070bf6Aa23e2D748C || msg.sender == 0x8b4DA1827932D71759687f925D17F81Fc94e3A9D || msg.sender == 0x8e0d985f3Ec1857BEc39B76aAabDEa6B31B67d53 || msg.sender == 0x7ac74Fcc1a71b106F12c55ee8F802C9F672Ce40C || msg.sender == 0xF39e044e1AB204460e06E87c6dca2c6319fC69E3,only team just can activate)

IRs:
TMP_428(bool) = msg.sender == 142213226519563701006708362364615351464167830668
TMP_429(bool) = msg.sender == 795280944000643829872900187547255880716766821021
TMP_430(bool) = TMP_428 || TMP_429
TMP_431(bool) = msg.sender == 810979872622269551999602228867472044210305531219
TMP_432(bool) = TMP_430 || TMP_431
TMP_433(bool) = msg.sender == 700941673658357724864471346397688913049387066380
TMP_434(bool) = TMP_432 || TMP_433
TMP_435(bool) = msg.sender == 1390808650078213433130381286626115836875963656675
TMP_436(bool) = TMP_434 || TMP_435
TMP_437(None) = SOLIDITY_CALL require(bool,string)(TMP_436,only team just can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(address(otherF3D_) != address(0),must link to other FoMo3D first)

IRs:
TMP_438 = CONVERT otherF3D_ to address
TMP_439 = CONVERT 0 to address
TMP_440(bool) = TMP_438 != TMP_439
TMP_441(None) = SOLIDITY_CALL require(bool,string)(TMP_440,must link to other FoMo3D first)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(activated_ == false,fomo3d already activated)

IRs:
TMP_442(bool) = activated_ == False
TMP_443(None) = SOLIDITY_CALL require(bool,string)(TMP_442,fomo3d already activated)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_710(F3Ddatasets.Round) -> round_[1]
REF_711(uint256) -> REF_710.strt
TMP_444(uint256) = now + rndExtra_
TMP_445(uint256) = TMP_444 - rndGap_
REF_711(uint256) (->round_) := TMP_445(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_712(F3Ddatasets.Round) -> round_[1]
REF_713(uint256) -> REF_712.end
TMP_446(uint256) = now + rndInit_
TMP_447(uint256) = TMP_446 + rndExtra_
REF_713(uint256) (->round_) := TMP_447(uint256)"];
}
// Function: 6846.sol-FoMo3Dlong-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seed = uint256(keccak256()(abi.encodePacked((block.timestamp).add(block.difficulty).add((uint256(keccak256()(abi.encodePacked(block.coinbase)))) / (now)).add(block.gaslimit).add((uint256(keccak256()(abi.encodePacked(msg.sender)))) / (now)).add(block.number))))

IRs:
TMP_337(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['block.timestamp', 'block.difficulty'] 
TMP_338(bytes) = SOLIDITY_CALL abi.encodePacked()(block.coinbase)
TMP_339(bytes32) = SOLIDITY_CALL keccak256()(TMP_338)
TMP_340 = CONVERT TMP_339 to uint256
TMP_341(uint256) = TMP_340 / now
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_337', 'TMP_341'] 
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_342', 'block.gaslimit'] 
TMP_344(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_345(bytes32) = SOLIDITY_CALL keccak256()(TMP_344)
TMP_346 = CONVERT TMP_345 to uint256
TMP_347(uint256) = TMP_346 / now
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_343', 'TMP_347'] 
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_348', 'block.number'] 
TMP_350(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_349)
TMP_351(bytes32) = SOLIDITY_CALL keccak256()(TMP_350)
TMP_352 = CONVERT TMP_351 to uint256
seed(uint256) := TMP_352(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(seed - ((seed / 1000) * 1000)) < airDropTracker_

IRs:
TMP_353(uint256) = seed / 1000
TMP_354(uint256) = TMP_353 * 1000
TMP_355(uint256) = seed - TMP_354
TMP_356(bool) = TMP_355 < airDropTracker_
CONDITION TMP_356"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(true)

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 6846.sol-FoMo3Dlong-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_257(F3Ddatasets.Round) -> round_[_rID]
REF_258(uint256) -> REF_257.strt
TMP_150(uint256) = REF_258 + rndGap_
TMP_151(bool) = _now > TMP_150
REF_259(F3Ddatasets.Round) -> round_[_rID]
REF_260(uint256) -> REF_259.end
TMP_152(bool) = _now <= REF_260
REF_261(F3Ddatasets.Round) -> round_[_rID]
REF_262(uint256) -> REF_261.end
TMP_153(bool) = _now > REF_262
REF_263(F3Ddatasets.Round) -> round_[_rID]
REF_264(uint256) -> REF_263.plyr
TMP_154(bool) = REF_264 == 0
TMP_155(bool) = TMP_153 && TMP_154
TMP_156(bool) = TMP_152 || TMP_155
TMP_157(bool) = TMP_151 && TMP_156
CONDITION TMP_157"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_265(F3Ddatasets.Round) -> round_[_rID]
REF_266(uint256) -> REF_265.end
TMP_159(bool) = _now > REF_266
REF_267(F3Ddatasets.Round) -> round_[_rID]
REF_268(bool) -> REF_267.ended
TMP_160(bool) = REF_268 == False
TMP_161(bool) = TMP_159 && TMP_160
CONDITION TMP_161"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_269(F3Ddatasets.Round) -> round_[_rID]
REF_270(bool) -> REF_269.ended
REF_270(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_162(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_162(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_271(uint256) -> _eventData_.compressedData
REF_272(uint256) -> _eventData_.compressedData
TMP_163(uint256) = _now * 1000000000000000000
TMP_164(uint256) = REF_272 + TMP_163
REF_271(uint256) (->_eventData_) := TMP_164(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_273(uint256) -> _eventData_.compressedIDs
REF_274(uint256) -> _eventData_.compressedIDs
TMP_165(uint256) = REF_274 + _pID
REF_273(uint256) (->_eventData_) := TMP_165(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_276(F3Ddatasets.Player) -> plyr_[_pID]
REF_277(bytes32) -> REF_276.name
REF_278(uint256) -> _eventData_.compressedData
REF_279(uint256) -> _eventData_.compressedIDs
REF_280(address) -> _eventData_.winnerAddr
REF_281(bytes32) -> _eventData_.winnerName
REF_282(uint256) -> _eventData_.amountWon
REF_283(uint256) -> _eventData_.newPot
REF_284(uint256) -> _eventData_.P3DAmount
REF_285(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_277,msg.value,REF_278,REF_279,REF_280,REF_281,REF_282,REF_283,REF_284,REF_285)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_286(F3Ddatasets.Player) -> plyr_[_pID]
REF_287(uint256) -> REF_286.gen
REF_288(F3Ddatasets.Player) -> plyr_[_pID]
REF_289(uint256) -> REF_288.gen
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_289', 'msg.value'] 
REF_287(uint256) (->plyr_) := TMP_167(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 6846.sol-FoMo3Dlong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_23(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_23(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_26(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_26(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _affCode == TMP_24
TMP_26(bool) = _affCode == msg.sender
TMP_27(bool) = TMP_25 || TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_27(F3Ddatasets.Player) -> plyr_[_pID]
REF_28(uint256) -> REF_27.laff
_affID(uint256) := REF_28(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_29(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_29(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_30(F3Ddatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
TMP_28(bool) = _affID != REF_31
CONDITION TMP_28"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_32(F3Ddatasets.Player) -> plyr_[_pID]
REF_33(uint256) -> REF_32.laff
REF_33(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_29(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_29(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 6846.sol-FoMo3Dlong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_13(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_13(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_19(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_19(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_14(bool) = _affCode == 0
TMP_15(bool) = _affCode == _pID
TMP_16(bool) = TMP_14 || TMP_15
CONDITION TMP_16"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_20(F3Ddatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
_affCode(uint256) := REF_21(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_22(F3Ddatasets.Player) -> plyr_[_pID]
REF_23(uint256) -> REF_22.laff
TMP_17(bool) = _affCode != REF_23
CONDITION TMP_17"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_24(F3Ddatasets.Player) -> plyr_[_pID]
REF_25(uint256) -> REF_24.laff
REF_25(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_18(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_18(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 6846.sol-FoMo3Dlong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_34(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_34(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_34(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_34(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_35(bool) = _affCode == 
REF_35(F3Ddatasets.Player) -> plyr_[_pID]
REF_36(bytes32) -> REF_35.name
TMP_36(bool) = _affCode == REF_36
TMP_37(bool) = TMP_35 || TMP_36
CONDITION TMP_37"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_37(F3Ddatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
_affID(uint256) := REF_38(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_39(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_39(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_40(F3Ddatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
TMP_38(bool) = _affID != REF_41
CONDITION TMP_38"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_42(F3Ddatasets.Player) -> plyr_[_pID]
REF_43(uint256) -> REF_42.laff
REF_43(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_39(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_39(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 6846.sol-FoMo3Dlong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && _now <= round_[_rID].end

IRs:
REF_422(F3Ddatasets.Round) -> round_[_rID]
REF_423(uint256) -> REF_422.strt
TMP_240(uint256) = REF_423 + rndGap_
TMP_241(bool) = _now > TMP_240
REF_424(F3Ddatasets.Round) -> round_[_rID]
REF_425(uint256) -> REF_424.end
TMP_242(bool) = _now <= REF_425
TMP_243(bool) = TMP_241 && TMP_242
CONDITION TMP_243"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_426(F3Ddatasets.Round) -> round_[_rID]
REF_427(uint256) -> REF_426.eth
TMP_244(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_427', '_eth'] 
RETURN TMP_244"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_245(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_245"];
}
// Function: 6846.sol-FoMo3Dlong-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_412(F3Ddatasets.Round) -> round_[_rIDlast]
REF_413(uint256) -> REF_412.mask
REF_415(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_416(F3Ddatasets.PlayerRounds) -> REF_415[_rIDlast]
REF_417(uint256) -> REF_416.keys
TMP_237(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_413', 'REF_417'] 
TMP_238(uint256) = TMP_237 / 1000000000000000000
REF_419(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_420(F3Ddatasets.PlayerRounds) -> REF_419[_rIDlast]
REF_421(uint256) -> REF_420.mask
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_238', 'REF_421'] 
RETURN TMP_239"];
}
// Function: 6846.sol-FoMo3Dlong-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(30,6)

IRs:
REF_0(F3Ddatasets.TeamFee) -> fees_[0]
TMP_0(F3Ddatasets.TeamFee) = new TeamFee(30,6)
REF_0(F3Ddatasets.TeamFee) (->fees_) := TMP_0(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(43,0)

IRs:
REF_2(F3Ddatasets.TeamFee) -> fees_[1]
TMP_1(F3Ddatasets.TeamFee) = new TeamFee(43,0)
REF_2(F3Ddatasets.TeamFee) (->fees_) := TMP_1(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(56,10)

IRs:
REF_4(F3Ddatasets.TeamFee) -> fees_[2]
TMP_2(F3Ddatasets.TeamFee) = new TeamFee(56,10)
REF_4(F3Ddatasets.TeamFee) (->fees_) := TMP_2(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(43,8)

IRs:
REF_6(F3Ddatasets.TeamFee) -> fees_[3]
TMP_3(F3Ddatasets.TeamFee) = new TeamFee(43,8)
REF_6(F3Ddatasets.TeamFee) (->fees_) := TMP_3(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(15,10)

IRs:
REF_8(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_4(F3Ddatasets.PotSplit) = new PotSplit(15,10)
REF_8(F3Ddatasets.PotSplit) (->potSplit_) := TMP_4(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(25,0)

IRs:
REF_10(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_5(F3Ddatasets.PotSplit) = new PotSplit(25,0)
REF_10(F3Ddatasets.PotSplit) (->potSplit_) := TMP_5(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(20,20)

IRs:
REF_12(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_6(F3Ddatasets.PotSplit) = new PotSplit(20,20)
REF_12(F3Ddatasets.PotSplit) (->potSplit_) := TMP_6(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(30,10)

IRs:
REF_14(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_7(F3Ddatasets.PotSplit) = new PotSplit(30,10)
REF_14(F3Ddatasets.PotSplit) (->potSplit_) := TMP_7(F3Ddatasets.PotSplit)"];
}
// Function: 6846.sol-FoMo3Dlong-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_323(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_324(F3Ddatasets.PlayerRounds) -> REF_323[_rID]
REF_325(uint256) -> REF_324.keys
TMP_187(bool) = REF_325 == 0
CONDITION TMP_187"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_188(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_188(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_326(F3Ddatasets.Round) -> round_[_rID]
REF_327(uint256) -> REF_326.eth
TMP_189(bool) = REF_327 < 100000000000000000000
REF_328(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_329(F3Ddatasets.PlayerRounds) -> REF_328[_rID]
REF_330(uint256) -> REF_329.eth
TMP_190(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_330', '_eth'] 
TMP_191(bool) = TMP_190 > 1000000000000000000
TMP_192(bool) = TMP_189 && TMP_191
CONDITION TMP_192"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_333(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_334(F3Ddatasets.PlayerRounds) -> REF_333[_rID]
REF_335(uint256) -> REF_334.eth
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_335'] 
_availableLimit(uint256) := TMP_193(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_194(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_194(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_337(F3Ddatasets.Player) -> plyr_[_pID]
REF_338(uint256) -> REF_337.gen
REF_339(F3Ddatasets.Player) -> plyr_[_pID]
REF_340(uint256) -> REF_339.gen
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_340', '_refund'] 
REF_338(uint256) (->plyr_) := TMP_195(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_196(bool) = _eth > 1000000000
CONDITION TMP_196"];
10->11[label="True"];
10->58[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_342(F3Ddatasets.Round) -> round_[_rID]
REF_343(uint256) -> REF_342.eth
TMP_197(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_343', '_eth'] 
_keys(uint256) := TMP_197(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_198(bool) = _keys >= 1000000000000000000
CONDITION TMP_198"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3Dlong.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_345(F3Ddatasets.Round) -> round_[_rID]
REF_346(uint256) -> REF_345.plyr
TMP_200(bool) = REF_346 != _pID
CONDITION TMP_200"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_347(F3Ddatasets.Round) -> round_[_rID]
REF_348(uint256) -> REF_347.plyr
REF_348(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_349(F3Ddatasets.Round) -> round_[_rID]
REF_350(uint256) -> REF_349.team
TMP_201(bool) = REF_350 != _team
CONDITION TMP_201"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_351(F3Ddatasets.Round) -> round_[_rID]
REF_352(uint256) -> REF_351.team
REF_352(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_353(uint256) -> _eventData_.compressedData
REF_354(uint256) -> _eventData_.compressedData
TMP_202(uint256) = REF_354 + 100
REF_353(uint256) (->_eventData_) := TMP_202(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_203(bool) = _eth >= 100000000000000000
CONDITION TMP_203"];
22->23[label="True"];
22->48[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_204(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_205(bool) = INTERNAL_CALL, FoMo3Dlong.airdrop()()
TMP_206(bool) = TMP_205 == True
CONDITION TMP_206"];
24->25[label="True"];
24->47[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_207(bool) = _eth >= 10000000000000000000
CONDITION TMP_207"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_209(uint256) = TMP_208 / 100
_prize(uint256) := TMP_209(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_356(F3Ddatasets.Player) -> plyr_[_pID]
REF_357(uint256) -> REF_356.win
REF_358(F3Ddatasets.Player) -> plyr_[_pID]
REF_359(uint256) -> REF_358.win
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_359', '_prize'] 
REF_357(uint256) (->plyr_) := TMP_210(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_211(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_362(uint256) -> _eventData_.compressedData
REF_362(-> _eventData_) = REF_362 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_212(bool) = _eth >= 1000000000000000000
TMP_213(bool) = _eth < 10000000000000000000
TMP_214(bool) = TMP_212 && TMP_213
CONDITION TMP_214"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_216(uint256) = TMP_215 / 100
_prize(uint256) := TMP_216(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_364(F3Ddatasets.Player) -> plyr_[_pID]
REF_365(uint256) -> REF_364.win
REF_366(F3Ddatasets.Player) -> plyr_[_pID]
REF_367(uint256) -> REF_366.win
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_367', '_prize'] 
REF_365(uint256) (->plyr_) := TMP_217(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_218(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_370(uint256) -> _eventData_.compressedData
REF_370(-> _eventData_) = REF_370 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_219(bool) = _eth >= 100000000000000000
TMP_220(bool) = _eth < 1000000000000000000
TMP_221(bool) = TMP_219 && TMP_220
CONDITION TMP_221"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_222(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_223(uint256) = TMP_222 / 100
_prize(uint256) := TMP_223(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_372(F3Ddatasets.Player) -> plyr_[_pID]
REF_373(uint256) -> REF_372.win
REF_374(F3Ddatasets.Player) -> plyr_[_pID]
REF_375(uint256) -> REF_374.win
TMP_224(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_375', '_prize'] 
REF_373(uint256) (->plyr_) := TMP_224(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_225(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_225(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_378(uint256) -> _eventData_.compressedData
REF_378(-> _eventData_) = REF_378 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_379(uint256) -> _eventData_.compressedData
REF_379(-> _eventData_) = REF_379 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_380(uint256) -> _eventData_.compressedData
TMP_226(uint256) = _prize * 1000000000000000000000000000000000
REF_380(-> _eventData_) = REF_380 + TMP_226"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_381(uint256) -> _eventData_.compressedData
REF_382(uint256) -> _eventData_.compressedData
TMP_227(uint256) = airDropTracker_ * 1000
TMP_228(uint256) = REF_382 + TMP_227
REF_381(uint256) (->_eventData_) := TMP_228(uint256)"];
49->50;
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_383(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_384(F3Ddatasets.PlayerRounds) -> REF_383[_rID]
REF_385(uint256) -> REF_384.keys
REF_387(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_388(F3Ddatasets.PlayerRounds) -> REF_387[_rID]
REF_389(uint256) -> REF_388.keys
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_389'] 
REF_385(uint256) (->plyrRnds_) := TMP_229(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_390(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_391(F3Ddatasets.PlayerRounds) -> REF_390[_rID]
REF_392(uint256) -> REF_391.eth
REF_394(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_395(F3Ddatasets.PlayerRounds) -> REF_394[_rID]
REF_396(uint256) -> REF_395.eth
TMP_230(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_396'] 
REF_392(uint256) (->plyrRnds_) := TMP_230(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_397(F3Ddatasets.Round) -> round_[_rID]
REF_398(uint256) -> REF_397.keys
REF_400(F3Ddatasets.Round) -> round_[_rID]
REF_401(uint256) -> REF_400.keys
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_401'] 
REF_398(uint256) (->round_) := TMP_231(uint256)"];
52->53;
53[label="Node Type: EXPRESSION 53

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_402(F3Ddatasets.Round) -> round_[_rID]
REF_403(uint256) -> REF_402.eth
REF_405(F3Ddatasets.Round) -> round_[_rID]
REF_406(uint256) -> REF_405.eth
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_406'] 
REF_403(uint256) (->round_) := TMP_232(uint256)"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_407(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_408(uint256) -> REF_407[_team]
REF_410(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_411(uint256) -> REF_410[_team]
TMP_233(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_411'] 
REF_408(uint256) (->rndTmEth_) := TMP_233(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_234(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_234(F3Ddatasets.EventReturns)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_235(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_235(F3Ddatasets.EventReturns)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
57->58;
58[label="Node Type: END_IF 58
"];
}
// Function: 6846.sol-FoMo3Dlong-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_467(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_467(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_270(bool) = _pID == 0
CONDITION TMP_270"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_271(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_271(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_272(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_272(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_273(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_273(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_471(uint256) -> pIDxAddr_[msg.sender]
REF_471(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_472(F3Ddatasets.Player) -> plyr_[_pID]
REF_473(address) -> REF_472.addr
REF_473(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_274(bool) = _name != 
CONDITION TMP_274"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_474(uint256) -> pIDxName_[_name]
REF_474(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_475(F3Ddatasets.Player) -> plyr_[_pID]
REF_476(bytes32) -> REF_475.name
REF_476(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_477(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_478(bool) -> REF_477[_name]
REF_478(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_275(bool) = _laff != 0
TMP_276(bool) = _laff != _pID
TMP_277(bool) = TMP_275 && TMP_276
CONDITION TMP_277"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_479(F3Ddatasets.Player) -> plyr_[_pID]
REF_480(uint256) -> REF_479.laff
REF_480(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_481(uint256) -> _eventData_.compressedData
REF_482(uint256) -> _eventData_.compressedData
TMP_278(uint256) = REF_482 + 1
REF_481(uint256) (->_eventData_) := TMP_278(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 6846.sol-FoMo3Dlong-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = _eth / 50

IRs:
TMP_357(uint256) = _eth / 50
_com(uint256) := TMP_357(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Jekyll_Island_Inc.deposit.value(_com)()

IRs:
TMP_359(bool) = HIGH_LEVEL_CALL, dest:Jekyll_Island_Inc(JIincForwarderInterface), function:deposit, arguments:[] value:_com "];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_long = _eth / 100

IRs:
TMP_360(uint256) = _eth / 100
_long(uint256) := TMP_360(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
otherF3D_.potSwap.value(_long)()

IRs:
HIGH_LEVEL_CALL, dest:otherF3D_(otherFoMo3D), function:potSwap, arguments:[] value:_long "];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_363(uint256) = _eth / 10
_aff(uint256) := TMP_363(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_364(bool) = _affID != _pID
REF_595(F3Ddatasets.Player) -> plyr_[_affID]
REF_596(bytes32) -> REF_595.name
TMP_365(bool) = REF_596 != 
TMP_366(bool) = TMP_364 && TMP_365
CONDITION TMP_366"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_597(F3Ddatasets.Player) -> plyr_[_affID]
REF_598(uint256) -> REF_597.aff
REF_600(F3Ddatasets.Player) -> plyr_[_affID]
REF_601(uint256) -> REF_600.aff
TMP_367(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_601'] 
REF_598(uint256) (->plyr_) := TMP_367(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_603(F3Ddatasets.Player) -> plyr_[_affID]
REF_604(address) -> REF_603.addr
REF_605(F3Ddatasets.Player) -> plyr_[_affID]
REF_606(bytes32) -> REF_605.name
Emit onAffiliatePayout(_affID,REF_604,REF_606,_rID,_pID,_aff,now)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_p3d = _aff

IRs:
_p3d(uint256) := _aff(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100))

IRs:
REF_609(F3Ddatasets.TeamFee) -> fees_[_team]
REF_610(uint256) -> REF_609.p3d
TMP_369(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_610'] 
TMP_370(uint256) = TMP_369 / 100
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'TMP_370'] 
_p3d(uint256) := TMP_371(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_p3d > 0

IRs:
TMP_372(bool) = _p3d > 0
CONDITION TMP_372"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Divies.deposit.value(_p3d)()

IRs:
HIGH_LEVEL_CALL, dest:Divies(DiviesInterface), function:deposit, arguments:[] value:_p3d "];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount)

IRs:
REF_613(uint256) -> _eventData_.P3DAmount
REF_615(uint256) -> _eventData_.P3DAmount
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_p3d', 'REF_615'] 
REF_613(uint256) (->_eventData_) := TMP_375(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 6846.sol-FoMo3Dlong-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_633(F3Ddatasets.TeamFee) -> fees_[_team]
REF_634(uint256) -> REF_633.gen
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_634'] 
TMP_388(uint256) = TMP_387 / 100
_gen(uint256) := TMP_388(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_389(uint256) = _eth / 100
_air(uint256) := TMP_389(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_390(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100))

IRs:
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_392(uint256) = TMP_391 / 100
REF_640(F3Ddatasets.TeamFee) -> fees_[_team]
REF_641(uint256) -> REF_640.p3d
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_641'] 
TMP_394(uint256) = TMP_393 / 100
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_392', 'TMP_394'] 
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_395'] 
_eth(uint256) := TMP_396(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_397(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_398(uint256) = INTERNAL_CALL, FoMo3Dlong.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_398(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_dust > 0

IRs:
TMP_399(bool) = _dust > 0
CONDITION TMP_399"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_400(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_644(F3Ddatasets.Round) -> round_[_rID]
REF_645(uint256) -> REF_644.pot
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_648(F3Ddatasets.Round) -> round_[_rID]
REF_649(uint256) -> REF_648.pot
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_401', 'REF_649'] 
REF_645(uint256) (->round_) := TMP_402(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_650(uint256) -> _eventData_.genAmount
REF_652(uint256) -> _eventData_.genAmount
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_652'] 
REF_650(uint256) (->_eventData_) := TMP_403(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_653(uint256) -> _eventData_.potAmount
REF_653(uint256) (->_eventData_) := _pot(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 6846.sol-FoMo3Dlong-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_491(F3Ddatasets.Round) -> round_[_rID]
REF_492(uint256) -> REF_491.plyr
_winPID(uint256) := REF_492(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_493(F3Ddatasets.Round) -> round_[_rID]
REF_494(uint256) -> REF_493.team
_winTID(uint256) := REF_494(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_495(F3Ddatasets.Round) -> round_[_rID]
REF_496(uint256) -> REF_495.pot
_pot(uint256) := REF_496(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_285(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_286(uint256) = TMP_285 / 100
_win(uint256) := TMP_286(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 50)

IRs:
TMP_287(uint256) = _pot / 50
_com(uint256) := TMP_287(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_499(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_500(uint256) -> REF_499.gen
TMP_288(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_500'] 
TMP_289(uint256) = TMP_288 / 100
_gen(uint256) := TMP_289(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100

IRs:
REF_502(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_503(uint256) -> REF_502.p3d
TMP_290(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_503'] 
TMP_291(uint256) = TMP_290 / 100
_p3d(uint256) := TMP_291(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_292(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_293(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_292', '_com'] 
TMP_294(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_293', '_gen'] 
TMP_295(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_294', '_p3d'] 
_res(uint256) := TMP_295(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_509(F3Ddatasets.Round) -> round_[_rID]
REF_510(uint256) -> REF_509.keys
TMP_297(uint256) = TMP_296 / REF_510
_ppt(uint256) := TMP_297(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_513(F3Ddatasets.Round) -> round_[_rID]
REF_514(uint256) -> REF_513.keys
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_514'] 
TMP_299(uint256) = TMP_298 / 1000000000000000000
TMP_300(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_299'] 
_dust(uint256) := TMP_300(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_301(bool) = _dust > 0
CONDITION TMP_301"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_302(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_303(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_517(F3Ddatasets.Player) -> plyr_[_winPID]
REF_518(uint256) -> REF_517.win
REF_520(F3Ddatasets.Player) -> plyr_[_winPID]
REF_521(uint256) -> REF_520.win
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_521'] 
REF_518(uint256) (->plyr_) := TMP_304(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Jekyll_Island_Inc.deposit.value(_com)()

IRs:
TMP_306(bool) = HIGH_LEVEL_CALL, dest:Jekyll_Island_Inc(JIincForwarderInterface), function:deposit, arguments:[] value:_com "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_524(F3Ddatasets.Round) -> round_[_rID]
REF_525(uint256) -> REF_524.mask
REF_527(F3Ddatasets.Round) -> round_[_rID]
REF_528(uint256) -> REF_527.mask
TMP_307(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_528'] 
REF_525(uint256) (->round_) := TMP_307(uint256)"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
_p3d > 0

IRs:
TMP_308(bool) = _p3d > 0
CONDITION TMP_308"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
Divies.deposit.value(_p3d)()

IRs:
HIGH_LEVEL_CALL, dest:Divies(DiviesInterface), function:deposit, arguments:[] value:_p3d "];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_531(uint256) -> _eventData_.compressedData
REF_532(uint256) -> _eventData_.compressedData
REF_533(F3Ddatasets.Round) -> round_[_rID]
REF_534(uint256) -> REF_533.end
TMP_311(uint256) = REF_534 * 1000000
TMP_312(uint256) = REF_532 + TMP_311
REF_531(uint256) (->_eventData_) := TMP_312(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_535(uint256) -> _eventData_.compressedIDs
REF_536(uint256) -> _eventData_.compressedIDs
TMP_313(uint256) = _winPID * 100000000000000000000000000
TMP_314(uint256) = REF_536 + TMP_313
TMP_315(uint256) = _winTID * 100000000000000000
TMP_316(uint256) = TMP_314 + TMP_315
REF_535(uint256) (->_eventData_) := TMP_316(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_537(address) -> _eventData_.winnerAddr
REF_538(F3Ddatasets.Player) -> plyr_[_winPID]
REF_539(address) -> REF_538.addr
REF_537(address) (->_eventData_) := REF_539(address)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_540(bytes32) -> _eventData_.winnerName
REF_541(F3Ddatasets.Player) -> plyr_[_winPID]
REF_542(bytes32) -> REF_541.name
REF_540(bytes32) (->_eventData_) := REF_542(bytes32)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_543(uint256) -> _eventData_.amountWon
REF_543(uint256) (->_eventData_) := _win(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_544(uint256) -> _eventData_.genAmount
REF_544(uint256) (->_eventData_) := _gen(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_545(uint256) -> _eventData_.P3DAmount
REF_545(uint256) (->_eventData_) := _p3d(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_546(uint256) -> _eventData_.newPot
REF_546(uint256) (->_eventData_) := _res(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
rID_ ++

IRs:
TMP_317(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
_rID ++

IRs:
TMP_318(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_547(F3Ddatasets.Round) -> round_[_rID]
REF_548(uint256) -> REF_547.strt
REF_548(uint256) (->round_) := now(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_549(F3Ddatasets.Round) -> round_[_rID]
REF_550(uint256) -> REF_549.end
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_319', 'rndGap_'] 
REF_550(uint256) (->round_) := TMP_320(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_553(F3Ddatasets.Round) -> round_[_rID]
REF_554(uint256) -> REF_553.pot
REF_554(uint256) (->round_) := _res(uint256)"];
34->35;
35[label="Node Type: RETURN 35

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 6846.sol-FoMo3Dlong-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_694(uint256) -> _eventData_.compressedData
REF_695(uint256) -> _eventData_.compressedData
TMP_420(uint256) = now * 1000000000000000000
TMP_421(uint256) = REF_695 + TMP_420
TMP_422(uint256) = _team * 100000000000000000000000000000
TMP_423(uint256) = TMP_421 + TMP_422
REF_694(uint256) (->_eventData_) := TMP_423(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_696(uint256) -> _eventData_.compressedIDs
REF_697(uint256) -> _eventData_.compressedIDs
TMP_424(uint256) = REF_697 + _pID
TMP_425(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_426(uint256) = TMP_424 + TMP_425
REF_696(uint256) (->_eventData_) := TMP_426(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_699(uint256) -> _eventData_.compressedData
REF_700(uint256) -> _eventData_.compressedIDs
REF_701(F3Ddatasets.Player) -> plyr_[_pID]
REF_702(bytes32) -> REF_701.name
REF_703(address) -> _eventData_.winnerAddr
REF_704(bytes32) -> _eventData_.winnerName
REF_705(uint256) -> _eventData_.amountWon
REF_706(uint256) -> _eventData_.newPot
REF_707(uint256) -> _eventData_.P3DAmount
REF_708(uint256) -> _eventData_.genAmount
REF_709(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_699,REF_700,REF_702,msg.sender,_eth,_keys,REF_703,REF_704,REF_705,REF_706,REF_707,REF_708,REF_709,airDropPot_)"];
}
// Function: 6846.sol-FoMo3Dlong-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_8(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_16(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_17(F3Ddatasets.Player) -> plyr_[_pID]
REF_18(uint256) -> REF_17.laff
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_18,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 6846.sol-FoMo3Dlong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_127(F3Ddatasets.Round) -> round_[_rID]
REF_128(uint256) -> REF_127.strt
TMP_101(uint256) = REF_128 + rndGap_
TMP_102(bool) = _now > TMP_101
REF_129(F3Ddatasets.Round) -> round_[_rID]
REF_130(uint256) -> REF_129.end
TMP_103(bool) = _now <= REF_130
REF_131(F3Ddatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.end
TMP_104(bool) = _now > REF_132
REF_133(F3Ddatasets.Round) -> round_[_rID]
REF_134(uint256) -> REF_133.plyr
TMP_105(bool) = REF_134 == 0
TMP_106(bool) = TMP_104 && TMP_105
TMP_107(bool) = TMP_103 || TMP_106
TMP_108(bool) = TMP_102 && TMP_107
CONDITION TMP_108"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_135(F3Ddatasets.Round) -> round_[_rID]
REF_136(uint256) -> REF_135.keys
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_136', '1000000000000000000'] 
TMP_110(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_109', '1000000000000000000'] 
RETURN TMP_110"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 6846.sol-FoMo3Dlong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_209(F3Ddatasets.Round) -> round_[_rID]
REF_210(uint256) -> REF_209.ico
REF_211(F3Ddatasets.Round) -> round_[_rID]
REF_212(uint256) -> REF_211.keys
REF_213(F3Ddatasets.Round) -> round_[_rID]
REF_214(uint256) -> REF_213.end
REF_215(F3Ddatasets.Round) -> round_[_rID]
REF_216(uint256) -> REF_215.strt
REF_217(F3Ddatasets.Round) -> round_[_rID]
REF_218(uint256) -> REF_217.pot
REF_219(F3Ddatasets.Round) -> round_[_rID]
REF_220(uint256) -> REF_219.team
REF_221(F3Ddatasets.Round) -> round_[_rID]
REF_222(uint256) -> REF_221.plyr
TMP_141(uint256) = REF_222 * 10
TMP_142(uint256) = REF_220 + TMP_141
REF_223(F3Ddatasets.Round) -> round_[_rID]
REF_224(uint256) -> REF_223.plyr
REF_225(F3Ddatasets.Player) -> plyr_[REF_224]
REF_226(address) -> REF_225.addr
REF_227(F3Ddatasets.Round) -> round_[_rID]
REF_228(uint256) -> REF_227.plyr
REF_229(F3Ddatasets.Player) -> plyr_[REF_228]
REF_230(bytes32) -> REF_229.name
REF_231(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_232(uint256) -> REF_231[0]
REF_233(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_234(uint256) -> REF_233[1]
REF_235(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_236(uint256) -> REF_235[2]
REF_237(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_238(uint256) -> REF_237[3]
TMP_143(uint256) = airDropPot_ * 1000
TMP_144(uint256) = airDropTracker_ + TMP_143
RETURN REF_210,_rID,REF_212,REF_214,REF_216,REF_218,TMP_142,REF_226,REF_230,REF_232,REF_234,REF_236,REF_238,TMP_144"];
}
// Function: 6846.sol-FoMo3Dlong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_145 = CONVERT 0 to address
TMP_146(bool) = _addr == TMP_145
CONDITION TMP_146"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_147(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_239(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_239(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_240(F3Ddatasets.Player) -> plyr_[_pID]
REF_241(bytes32) -> REF_240.name
REF_242(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_243(F3Ddatasets.PlayerRounds) -> REF_242[_rID]
REF_244(uint256) -> REF_243.keys
REF_245(F3Ddatasets.Player) -> plyr_[_pID]
REF_246(uint256) -> REF_245.win
REF_247(F3Ddatasets.Player) -> plyr_[_pID]
REF_248(uint256) -> REF_247.gen
REF_250(F3Ddatasets.Player) -> plyr_[_pID]
REF_251(uint256) -> REF_250.lrnd
TMP_148(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_251)
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_248', 'TMP_148'] 
REF_252(F3Ddatasets.Player) -> plyr_[_pID]
REF_253(uint256) -> REF_252.aff
REF_254(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_255(F3Ddatasets.PlayerRounds) -> REF_254[_rID]
REF_256(uint256) -> REF_255.eth
RETURN _pID,REF_241,REF_244,REF_246,TMP_149,REF_253,REF_256"];
}
// Function: 6846.sol-FoMo3Dlong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_149(F3Ddatasets.Round) -> round_[_rID]
REF_150(uint256) -> REF_149.end
TMP_117(bool) = now > REF_150
REF_151(F3Ddatasets.Round) -> round_[_rID]
REF_152(bool) -> REF_151.ended
TMP_118(bool) = REF_152 == False
TMP_119(bool) = TMP_117 && TMP_118
REF_153(F3Ddatasets.Round) -> round_[_rID]
REF_154(uint256) -> REF_153.plyr
TMP_120(bool) = REF_154 != 0
TMP_121(bool) = TMP_119 && TMP_120
CONDITION TMP_121"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_155(F3Ddatasets.Round) -> round_[_rID]
REF_156(uint256) -> REF_155.plyr
TMP_122(bool) = REF_156 == _pID
CONDITION TMP_122"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_157(F3Ddatasets.Player) -> plyr_[_pID]
REF_158(uint256) -> REF_157.win
REF_160(F3Ddatasets.Round) -> round_[_rID]
REF_161(uint256) -> REF_160.pot
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_161', '48'] 
TMP_124(uint256) = TMP_123 / 100
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_158', 'TMP_124'] 
REF_163(F3Ddatasets.Player) -> plyr_[_pID]
REF_164(uint256) -> REF_163.gen
TMP_126(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_167(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_168(F3Ddatasets.PlayerRounds) -> REF_167[_rID]
REF_169(uint256) -> REF_168.mask
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_126', 'REF_169'] 
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_164', 'TMP_127'] 
REF_170(F3Ddatasets.Player) -> plyr_[_pID]
REF_171(uint256) -> REF_170.aff
RETURN TMP_125,TMP_128,REF_171"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_172(F3Ddatasets.Player) -> plyr_[_pID]
REF_173(uint256) -> REF_172.win
REF_174(F3Ddatasets.Player) -> plyr_[_pID]
REF_175(uint256) -> REF_174.gen
TMP_129(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_178(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_179(F3Ddatasets.PlayerRounds) -> REF_178[_rID]
REF_180(uint256) -> REF_179.mask
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_129', 'REF_180'] 
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_175', 'TMP_130'] 
REF_181(F3Ddatasets.Player) -> plyr_[_pID]
REF_182(uint256) -> REF_181.aff
RETURN REF_173,TMP_131,REF_182"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_183(F3Ddatasets.Player) -> plyr_[_pID]
REF_184(uint256) -> REF_183.win
REF_185(F3Ddatasets.Player) -> plyr_[_pID]
REF_186(uint256) -> REF_185.gen
REF_188(F3Ddatasets.Player) -> plyr_[_pID]
REF_189(uint256) -> REF_188.lrnd
TMP_132(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_189)
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_186', 'TMP_132'] 
REF_190(F3Ddatasets.Player) -> plyr_[_pID]
REF_191(uint256) -> REF_190.aff
RETURN REF_184,TMP_133,REF_191"];
}
// Function: 6846.sol-FoMo3Dlong-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_192(F3Ddatasets.Round) -> round_[_rID]
REF_193(uint256) -> REF_192.mask
REF_195(F3Ddatasets.Round) -> round_[_rID]
REF_196(uint256) -> REF_195.pot
REF_198(F3Ddatasets.Round) -> round_[_rID]
REF_199(uint256) -> REF_198.team
REF_200(F3Ddatasets.PotSplit) -> potSplit_[REF_199]
REF_201(uint256) -> REF_200.gen
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_196', 'REF_201'] 
TMP_135(uint256) = TMP_134 / 100
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_135', '1000000000000000000'] 
REF_203(F3Ddatasets.Round) -> round_[_rID]
REF_204(uint256) -> REF_203.keys
TMP_137(uint256) = TMP_136 / REF_204
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_193', 'TMP_137'] 
REF_206(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_207(F3Ddatasets.PlayerRounds) -> REF_206[_rID]
REF_208(uint256) -> REF_207.keys
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_138', 'REF_208'] 
TMP_140(uint256) = TMP_139 / 1000000000000000000
RETURN TMP_140"];
}
// Function: 6846.sol-FoMo3Dlong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_139(F3Ddatasets.Round) -> round_[_rID]
REF_140(uint256) -> REF_139.end
TMP_111(bool) = _now < REF_140
CONDITION TMP_111"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now < round_[_rID].strt + rndGap_

IRs:
REF_141(F3Ddatasets.Round) -> round_[_rID]
REF_142(uint256) -> REF_141.strt
TMP_112(uint256) = REF_142 + rndGap_
TMP_113(bool) = _now < TMP_112
CONDITION TMP_113"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_143(F3Ddatasets.Round) -> round_[_rID]
REF_144(uint256) -> REF_143.strt
TMP_114(uint256) = REF_144 + rndGap_
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_114', '_now'] 
RETURN TMP_115"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_146(F3Ddatasets.Round) -> round_[_rID]
REF_147(uint256) -> REF_146.end
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_147', '_now'] 
RETURN TMP_116"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 6846.sol-FoMo3Dlong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_430(F3Ddatasets.Round) -> round_[_rID]
REF_431(uint256) -> REF_430.strt
TMP_246(uint256) = REF_431 + rndGap_
TMP_247(bool) = _now > TMP_246
REF_432(F3Ddatasets.Round) -> round_[_rID]
REF_433(uint256) -> REF_432.end
TMP_248(bool) = _now <= REF_433
REF_434(F3Ddatasets.Round) -> round_[_rID]
REF_435(uint256) -> REF_434.end
TMP_249(bool) = _now > REF_435
REF_436(F3Ddatasets.Round) -> round_[_rID]
REF_437(uint256) -> REF_436.plyr
TMP_250(bool) = REF_437 == 0
TMP_251(bool) = TMP_249 && TMP_250
TMP_252(bool) = TMP_248 || TMP_251
TMP_253(bool) = TMP_247 && TMP_252
CONDITION TMP_253"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_438(F3Ddatasets.Round) -> round_[_rID]
REF_439(uint256) -> REF_438.keys
TMP_254(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_439', '_keys'] 
TMP_255(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_254', '_keys'] 
RETURN TMP_255"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_256(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_256"];
}
// Function: 6846.sol-FoMo3Dlong-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_469(bool) = activated_ == True
TMP_470(None) = SOLIDITY_CALL require(bool,string)(TMP_469,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6846.sol-FoMo3Dlong-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_471(bool) = _codeLength == 0
TMP_472(None) = SOLIDITY_CALL require(bool,string)(TMP_471,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 6846.sol-FoMo3Dlong-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_473(bool) = _eth >= 1000000000
TMP_474(None) = SOLIDITY_CALL require(bool,string)(TMP_473,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_475(bool) = _eth <= 100000000000000000000000
TMP_476(None) = SOLIDITY_CALL require(bool,string)(TMP_475,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 6846.sol-FoMo3Dlong-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_483(F3Ddatasets.Player) -> plyr_[_pID]
REF_484(uint256) -> REF_483.lrnd
TMP_282(bool) = REF_484 != 0
CONDITION TMP_282"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_485(F3Ddatasets.Player) -> plyr_[_pID]
REF_486(uint256) -> REF_485.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_486)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_487(F3Ddatasets.Player) -> plyr_[_pID]
REF_488(uint256) -> REF_487.lrnd
REF_488(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_489(uint256) -> _eventData_.compressedData
REF_490(uint256) -> _eventData_.compressedData
TMP_284(uint256) = REF_490 + 10
REF_489(uint256) (->_eventData_) := TMP_284(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 6846.sol-FoMo3Dlong-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == true

IRs:
REF_616(F3Ddatasets.Round) -> round_[_rID]
REF_617(uint256) -> REF_616.end
TMP_376(bool) = now > REF_617
REF_618(F3Ddatasets.Round) -> round_[_rID]
REF_619(bool) -> REF_618.ended
TMP_377(bool) = REF_619 == True
TMP_378(bool) = TMP_376 && TMP_377
CONDITION TMP_378"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
round_[_rID + 1].pot = round_[_rID + 1].pot.add(msg.value)

IRs:
TMP_379(uint256) = _rID + 1
REF_620(F3Ddatasets.Round) -> round_[TMP_379]
REF_621(uint256) -> REF_620.pot
TMP_380(uint256) = _rID + 1
REF_622(F3Ddatasets.Round) -> round_[TMP_380]
REF_623(uint256) -> REF_622.pot
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_623', 'msg.value'] 
REF_621(uint256) (->round_) := TMP_381(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID + 1,msg.value)

IRs:
TMP_382(uint256) = _rID + 1
Emit onPotSwapDeposit(TMP_382,msg.value)"];
4->7;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_626(F3Ddatasets.Round) -> round_[_rID]
REF_627(uint256) -> REF_626.pot
REF_628(F3Ddatasets.Round) -> round_[_rID]
REF_629(uint256) -> REF_628.pot
TMP_384(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_629', 'msg.value'] 
REF_627(uint256) (->round_) := TMP_384(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
6->7;
7[label="Node Type: END_IF 7
"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
8->1;
}
// Function: 6846.sol-FoMo3Dlong-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_291(F3Ddatasets.Round) -> round_[_rID]
REF_292(uint256) -> REF_291.strt
TMP_168(uint256) = REF_292 + rndGap_
TMP_169(bool) = _now > TMP_168
REF_293(F3Ddatasets.Round) -> round_[_rID]
REF_294(uint256) -> REF_293.end
TMP_170(bool) = _now <= REF_294
REF_295(F3Ddatasets.Round) -> round_[_rID]
REF_296(uint256) -> REF_295.end
TMP_171(bool) = _now > REF_296
REF_297(F3Ddatasets.Round) -> round_[_rID]
REF_298(uint256) -> REF_297.plyr
TMP_172(bool) = REF_298 == 0
TMP_173(bool) = TMP_171 && TMP_172
TMP_174(bool) = TMP_170 || TMP_173
TMP_175(bool) = TMP_169 && TMP_174
CONDITION TMP_175"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_299(F3Ddatasets.Player) -> plyr_[_pID]
REF_300(uint256) -> REF_299.gen
TMP_176(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
TMP_177(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_176', '_eth'] 
REF_300(uint256) (->plyr_) := TMP_177(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_302(F3Ddatasets.Round) -> round_[_rID]
REF_303(uint256) -> REF_302.end
TMP_179(bool) = _now > REF_303
REF_304(F3Ddatasets.Round) -> round_[_rID]
REF_305(bool) -> REF_304.ended
TMP_180(bool) = REF_305 == False
TMP_181(bool) = TMP_179 && TMP_180
CONDITION TMP_181"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_306(F3Ddatasets.Round) -> round_[_rID]
REF_307(bool) -> REF_306.ended
REF_307(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_182(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_182(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_308(uint256) -> _eventData_.compressedData
REF_309(uint256) -> _eventData_.compressedData
TMP_183(uint256) = _now * 1000000000000000000
TMP_184(uint256) = REF_309 + TMP_183
REF_308(uint256) (->_eventData_) := TMP_184(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_310(uint256) -> _eventData_.compressedIDs
REF_311(uint256) -> _eventData_.compressedIDs
TMP_185(uint256) = REF_311 + _pID
REF_310(uint256) (->_eventData_) := TMP_185(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_313(F3Ddatasets.Player) -> plyr_[_pID]
REF_314(bytes32) -> REF_313.name
REF_315(uint256) -> _eventData_.compressedData
REF_316(uint256) -> _eventData_.compressedIDs
REF_317(address) -> _eventData_.winnerAddr
REF_318(bytes32) -> _eventData_.winnerName
REF_319(uint256) -> _eventData_.amountWon
REF_320(uint256) -> _eventData_.newPot
REF_321(uint256) -> _eventData_.P3DAmount
REF_322(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_314,REF_315,REF_316,REF_317,REF_318,REF_319,REF_320,REF_321,REF_322)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 6846.sol-FoMo3Dlong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_51(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_51(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = _affCode == TMP_53
TMP_55(bool) = _affCode == msg.sender
TMP_56(bool) = TMP_54 || TMP_55
CONDITION TMP_56"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_52(F3Ddatasets.Player) -> plyr_[_pID]
REF_53(uint256) -> REF_52.laff
_affID(uint256) := REF_53(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_54(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_54(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_55(F3Ddatasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
TMP_57(bool) = _affID != REF_56
CONDITION TMP_57"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_57(F3Ddatasets.Player) -> plyr_[_pID]
REF_58(uint256) -> REF_57.laff
REF_58(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_58(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_58(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 6846.sol-FoMo3Dlong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_44(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_44(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_44(bool) = _affCode == 0
TMP_45(bool) = _affCode == _pID
TMP_46(bool) = TMP_44 || TMP_45
CONDITION TMP_46"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_45(F3Ddatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
_affCode(uint256) := REF_46(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_47(F3Ddatasets.Player) -> plyr_[_pID]
REF_48(uint256) -> REF_47.laff
TMP_47(bool) = _affCode != REF_48
CONDITION TMP_47"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_49(F3Ddatasets.Player) -> plyr_[_pID]
REF_50(uint256) -> REF_49.laff
REF_50(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_48(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_48(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 6846.sol-FoMo3Dlong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_59(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_59(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_63(bool) = _affCode == 
REF_60(F3Ddatasets.Player) -> plyr_[_pID]
REF_61(bytes32) -> REF_60.name
TMP_64(bool) = _affCode == REF_61
TMP_65(bool) = TMP_63 || TMP_64
CONDITION TMP_65"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_62(F3Ddatasets.Player) -> plyr_[_pID]
REF_63(uint256) -> REF_62.laff
_affID(uint256) := REF_63(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_64(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_64(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_65(F3Ddatasets.Player) -> plyr_[_pID]
REF_66(uint256) -> REF_65.laff
TMP_66(bool) = _affID != REF_66
CONDITION TMP_66"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_67(F3Ddatasets.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
REF_68(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_67(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_67(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 6846.sol-FoMo3Dlong-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_257 = CONVERT PlayerBook to address
TMP_258(bool) = msg.sender == TMP_257
TMP_259(None) = SOLIDITY_CALL require(bool,string)(TMP_258,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_443(uint256) -> pIDxAddr_[_addr]
TMP_260(bool) = REF_443 != _pID
CONDITION TMP_260"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_444(uint256) -> pIDxAddr_[_addr]
REF_444(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_445(uint256) -> pIDxName_[_name]
TMP_261(bool) = REF_445 != _pID
CONDITION TMP_261"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_446(uint256) -> pIDxName_[_name]
REF_446(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_447(F3Ddatasets.Player) -> plyr_[_pID]
REF_448(address) -> REF_447.addr
TMP_262(bool) = REF_448 != _addr
CONDITION TMP_262"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_449(F3Ddatasets.Player) -> plyr_[_pID]
REF_450(address) -> REF_449.addr
REF_450(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_451(F3Ddatasets.Player) -> plyr_[_pID]
REF_452(bytes32) -> REF_451.name
TMP_263(bool) = REF_452 != _name
CONDITION TMP_263"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_453(F3Ddatasets.Player) -> plyr_[_pID]
REF_454(bytes32) -> REF_453.name
REF_454(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_455(F3Ddatasets.Player) -> plyr_[_pID]
REF_456(uint256) -> REF_455.laff
TMP_264(bool) = REF_456 != _laff
CONDITION TMP_264"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_457(F3Ddatasets.Player) -> plyr_[_pID]
REF_458(uint256) -> REF_457.laff
REF_458(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_459(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_460(bool) -> REF_459[_name]
TMP_265(bool) = REF_460 == False
CONDITION TMP_265"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_461(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_462(bool) -> REF_461[_name]
REF_462(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 6846.sol-FoMo3Dlong-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_266 = CONVERT PlayerBook to address
TMP_267(bool) = msg.sender == TMP_266
TMP_268(None) = SOLIDITY_CALL require(bool,string)(TMP_267,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_463(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_464(bool) -> REF_463[_name]
TMP_269(bool) = REF_464 == False
CONDITION TMP_269"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_465(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_466(bool) -> REF_465[_name]
REF_466(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 6846.sol-FoMo3Dlong-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_89(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_89(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_103(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_103(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_105(F3Ddatasets.Player) -> plyr_[_affID]
REF_106(address) -> REF_105.addr
REF_107(F3Ddatasets.Player) -> plyr_[_affID]
REF_108(bytes32) -> REF_107.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_106,REF_108,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 6846.sol-FoMo3Dlong-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_93(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_93(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_112(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_112(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_114(F3Ddatasets.Player) -> plyr_[_affID]
REF_115(address) -> REF_114.addr
REF_116(F3Ddatasets.Player) -> plyr_[_affID]
REF_117(bytes32) -> REF_116.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_115,REF_117,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 6846.sol-FoMo3Dlong-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_97(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_97(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_121(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_121(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_123(F3Ddatasets.Player) -> plyr_[_affID]
REF_124(address) -> REF_123.addr
REF_125(F3Ddatasets.Player) -> plyr_[_affID]
REF_126(bytes32) -> REF_125.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_124,REF_126,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 6846.sol-FoMo3Dlong-setOtherFomo(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == 0x18E90Fc6F70344f53EBd4f6070bf6Aa23e2D748C || msg.sender == 0x8b4DA1827932D71759687f925D17F81Fc94e3A9D || msg.sender == 0x8e0d985f3Ec1857BEc39B76aAabDEa6B31B67d53 || msg.sender == 0x7ac74Fcc1a71b106F12c55ee8F802C9F672Ce40C || msg.sender == 0xF39e044e1AB204460e06E87c6dca2c6319fC69E3,only team just can activate)

IRs:
TMP_448(bool) = msg.sender == 142213226519563701006708362364615351464167830668
TMP_449(bool) = msg.sender == 795280944000643829872900187547255880716766821021
TMP_450(bool) = TMP_448 || TMP_449
TMP_451(bool) = msg.sender == 810979872622269551999602228867472044210305531219
TMP_452(bool) = TMP_450 || TMP_451
TMP_453(bool) = msg.sender == 700941673658357724864471346397688913049387066380
TMP_454(bool) = TMP_452 || TMP_453
TMP_455(bool) = msg.sender == 1390808650078213433130381286626115836875963656675
TMP_456(bool) = TMP_454 || TMP_455
TMP_457(None) = SOLIDITY_CALL require(bool,string)(TMP_456,only team just can activate)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(address(otherF3D_) == address(0),silly dev, you already did that)

IRs:
TMP_458 = CONVERT otherF3D_ to address
TMP_459 = CONVERT 0 to address
TMP_460(bool) = TMP_458 == TMP_459
TMP_461(None) = SOLIDITY_CALL require(bool,string)(TMP_460,silly dev, you already did that)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
otherF3D_ = otherFoMo3D(_otherF3D)

IRs:
TMP_462 = CONVERT _otherF3D to otherFoMo3D
otherF3D_(otherFoMo3D) := TMP_462(otherFoMo3D)"];
}
// Function: 6846.sol-FoMo3Dlong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
Divies = DiviesInterface(0x1a294b212BB37f790AeF81b91321A1111A177f45)

IRs:
TMP_465 = CONVERT 149354635303411384000773336992654015694556856133 to DiviesInterface
Divies(DiviesInterface) := TMP_465(DiviesInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
Jekyll_Island_Inc = JIincForwarderInterface(0xdd4950F977EE28D2C132f1353D1595035Db444EE)

IRs:
TMP_466 = CONVERT 1263321968624159900623092780891867360175771108590 to JIincForwarderInterface
Jekyll_Island_Inc(JIincForwarderInterface) := TMP_466(JIincForwarderInterface)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
PlayerBook = PlayerBookInterface(0xD60d353610D9a5Ca478769D371b53CEfAA7B6E4c)

IRs:
TMP_467 = CONVERT 1222018569992682492285153334675983574630684913228 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_467(PlayerBookInterface)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
extSettings = F3DexternalSettingsInterface(0x27AFcbe78bA41543c8e6eDe1ec0560cD128ADCCb)

IRs:
TMP_468 = CONVERT 226571033056758165961683448099627080992240098507 to F3DexternalSettingsInterface
extSettings(F3DexternalSettingsInterface) := TMP_468(F3DexternalSettingsInterface)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
name = FoMo3D Long Official

IRs:
name(string) := FoMo3D Long Official(string)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
symbol = F3D

IRs:
symbol(string) := F3D(string)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndInit_ = 3600

IRs:
rndInit_(uint256) := 3600(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
}
// Function: 6846.sol-FoMo3Dlong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndExtra_ = extSettings.getLongExtra()

IRs:
TMP_463(uint256) = HIGH_LEVEL_CALL, dest:extSettings(F3DexternalSettingsInterface), function:getLongExtra, arguments:[]  
rndExtra_(uint256) := TMP_463(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndGap_ = extSettings.getLongGap()

IRs:
TMP_464(uint256) = HIGH_LEVEL_CALL, dest:extSettings(F3DexternalSettingsInterface), function:getLongGap, arguments:[]  
rndGap_(uint256) := TMP_464(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 6846.sol-FoMo3Dlong-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_321(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_321(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_322(bool) = _earnings > 0
CONDITION TMP_322"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_555(F3Ddatasets.Player) -> plyr_[_pID]
REF_556(uint256) -> REF_555.gen
REF_558(F3Ddatasets.Player) -> plyr_[_pID]
REF_559(uint256) -> REF_558.gen
TMP_323(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_559'] 
REF_556(uint256) (->plyr_) := TMP_323(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_560(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_561(F3Ddatasets.PlayerRounds) -> REF_560[_rIDlast]
REF_562(uint256) -> REF_561.mask
REF_564(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_565(F3Ddatasets.PlayerRounds) -> REF_564[_rIDlast]
REF_566(uint256) -> REF_565.mask
TMP_324(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_566'] 
REF_562(uint256) (->plyrRnds_) := TMP_324(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 6846.sol-FoMo3Dlong-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_655(F3Ddatasets.Round) -> round_[_rID]
REF_656(uint256) -> REF_655.keys
TMP_405(uint256) = TMP_404 / REF_656
_ppt(uint256) := TMP_405(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_657(F3Ddatasets.Round) -> round_[_rID]
REF_658(uint256) -> REF_657.mask
REF_660(F3Ddatasets.Round) -> round_[_rID]
REF_661(uint256) -> REF_660.mask
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_661'] 
REF_658(uint256) (->round_) := TMP_406(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_407(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_408(uint256) = TMP_407 / 1000000000000000000
_pearn(uint256) := TMP_408(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_663(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_664(F3Ddatasets.PlayerRounds) -> REF_663[_rID]
REF_665(uint256) -> REF_664.mask
REF_666(F3Ddatasets.Round) -> round_[_rID]
REF_667(uint256) -> REF_666.mask
TMP_409(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_667', '_keys'] 
TMP_410(uint256) = TMP_409 / 1000000000000000000
TMP_411(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_410', '_pearn'] 
REF_671(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_672(F3Ddatasets.PlayerRounds) -> REF_671[_rID]
REF_673(uint256) -> REF_672.mask
TMP_412(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_411', 'REF_673'] 
REF_665(uint256) (->plyrRnds_) := TMP_412(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_676(F3Ddatasets.Round) -> round_[_rID]
REF_677(uint256) -> REF_676.keys
TMP_413(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_677'] 
TMP_414(uint256) = TMP_413 / 1000000000000000000
TMP_415(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_414'] 
RETURN TMP_415"];
}
// Function: 6846.sol-FoMo3Dlong-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_567(F3Ddatasets.Round) -> round_[_rID]
REF_568(uint256) -> REF_567.end
TMP_325(bool) = _now > REF_568
REF_569(F3Ddatasets.Round) -> round_[_rID]
REF_570(uint256) -> REF_569.plyr
TMP_326(bool) = REF_570 == 0
TMP_327(bool) = TMP_325 && TMP_326
CONDITION TMP_327"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_328(uint256) = _keys / 1000000000000000000
TMP_329(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_328', 'rndInc_'] 
TMP_330(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_329', '_now'] 
_newTime(uint256) := TMP_330(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_331(uint256) = _keys / 1000000000000000000
TMP_332(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_331', 'rndInc_'] 
REF_575(F3Ddatasets.Round) -> round_[_rID]
REF_576(uint256) -> REF_575.end
TMP_333(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_332', 'REF_576'] 
_newTime(uint256) := TMP_333(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_334(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_335(bool) = _newTime < TMP_334
CONDITION TMP_335"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_578(F3Ddatasets.Round) -> round_[_rID]
REF_579(uint256) -> REF_578.end
REF_579(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_580(F3Ddatasets.Round) -> round_[_rID]
REF_581(uint256) -> REF_580.end
TMP_336(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_581(uint256) (->round_) := TMP_336(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 6846.sol-FoMo3Dlong-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_279(bool) = _team < 0
TMP_280(bool) = _team > 3
TMP_281(bool) = TMP_279 || TMP_280
CONDITION TMP_281"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 6846.sol-FoMo3Dlong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_69(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_69(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_70(F3Ddatasets.Round) -> round_[_rID]
REF_71(uint256) -> REF_70.end
TMP_72(bool) = _now > REF_71
REF_72(F3Ddatasets.Round) -> round_[_rID]
REF_73(bool) -> REF_72.ended
TMP_73(bool) = REF_73 == False
TMP_74(bool) = TMP_72 && TMP_73
CONDITION TMP_74"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_74(F3Ddatasets.Round) -> round_[_rID]
REF_75(bool) -> REF_74.ended
REF_75(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_75(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_75(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_76(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_76(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_77(bool) = _eth > 0
CONDITION TMP_77"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_76(F3Ddatasets.Player) -> plyr_[_pID]
REF_77(address) -> REF_76.addr
Transfer dest:REF_77 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_79(uint256) -> _eventData_.compressedData
REF_80(uint256) -> _eventData_.compressedData
TMP_79(uint256) = _now * 1000000000000000000
TMP_80(uint256) = REF_80 + TMP_79
REF_79(uint256) (->_eventData_) := TMP_80(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_81(uint256) -> _eventData_.compressedIDs
REF_82(uint256) -> _eventData_.compressedIDs
TMP_81(uint256) = REF_82 + _pID
REF_81(uint256) (->_eventData_) := TMP_81(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_84(F3Ddatasets.Player) -> plyr_[_pID]
REF_85(bytes32) -> REF_84.name
REF_86(uint256) -> _eventData_.compressedData
REF_87(uint256) -> _eventData_.compressedIDs
REF_88(address) -> _eventData_.winnerAddr
REF_89(bytes32) -> _eventData_.winnerName
REF_90(uint256) -> _eventData_.amountWon
REF_91(uint256) -> _eventData_.newPot
REF_92(uint256) -> _eventData_.P3DAmount
REF_93(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_85,_eth,REF_86,REF_87,REF_88,REF_89,REF_90,REF_91,REF_92,REF_93)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_83(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_83(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_84(bool) = _eth > 0
CONDITION TMP_84"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_94(F3Ddatasets.Player) -> plyr_[_pID]
REF_95(address) -> REF_94.addr
Transfer dest:REF_95 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_98(F3Ddatasets.Player) -> plyr_[_pID]
REF_99(bytes32) -> REF_98.name
Emit onWithdraw(_pID,msg.sender,REF_99,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
23->1;
}
// Function: 6846.sol-FoMo3Dlong-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_678(F3Ddatasets.Player) -> plyr_[_pID]
REF_679(uint256) -> REF_678.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_679)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_680(F3Ddatasets.Player) -> plyr_[_pID]
REF_681(uint256) -> REF_680.win
REF_683(F3Ddatasets.Player) -> plyr_[_pID]
REF_684(uint256) -> REF_683.gen
TMP_417(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_681', 'REF_684'] 
REF_686(F3Ddatasets.Player) -> plyr_[_pID]
REF_687(uint256) -> REF_686.aff
TMP_418(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_417', 'REF_687'] 
_earnings(uint256) := TMP_418(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_419(bool) = _earnings > 0
CONDITION TMP_419"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_688(F3Ddatasets.Player) -> plyr_[_pID]
REF_689(uint256) -> REF_688.win
REF_689(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_690(F3Ddatasets.Player) -> plyr_[_pID]
REF_691(uint256) -> REF_690.gen
REF_691(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_692(F3Ddatasets.Player) -> plyr_[_pID]
REF_693(uint256) -> REF_692.aff
REF_693(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 6846.sol-JIincForwarderInterface-cancelMigration()
digraph{
}
// Function: 6846.sol-JIincForwarderInterface-deposit()
digraph{
}
// Function: 6846.sol-JIincForwarderInterface-finishMigration()
digraph{
}
// Function: 6846.sol-JIincForwarderInterface-setup(address)
digraph{
}
// Function: 6846.sol-JIincForwarderInterface-startMigration(address)
digraph{
}
// Function: 6846.sol-JIincForwarderInterface-status()
digraph{
}
// Function: 6846.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_499 = CONVERT _input to bytes
_temp(bytes) := TMP_499(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_731 -> LENGTH _temp
_length(uint256) := REF_731(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_500(bool) = _length <= 32
TMP_501(bool) = _length > 0
TMP_502(bool) = TMP_500 && TMP_501
TMP_503(None) = SOLIDITY_CALL require(bool,string)(TMP_502,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_732(None) -> _temp[0]
TMP_504(bool) = REF_732 != 32
TMP_505(uint256) = _length - 1
REF_733(None) -> _temp[TMP_505]
TMP_506(bool) = REF_733 != 32
TMP_507(bool) = TMP_504 && TMP_506
TMP_508(None) = SOLIDITY_CALL require(bool,string)(TMP_507,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_734(None) -> _temp[0]
TMP_509(bool) = REF_734 == 48
CONDITION TMP_509"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_735(None) -> _temp[1]
TMP_510(bool) = REF_735 != 120
TMP_511(None) = SOLIDITY_CALL require(bool,string)(TMP_510,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_736(None) -> _temp[1]
TMP_512(bool) = REF_736 != 88
TMP_513(None) = SOLIDITY_CALL require(bool,string)(TMP_512,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_514(bool) = i < _length
CONDITION TMP_514"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_737(None) -> _temp[i]
TMP_515(bool) = REF_737 > 64
REF_738(None) -> _temp[i]
TMP_516(bool) = REF_738 < 91
TMP_517(bool) = TMP_515 && TMP_516
CONDITION TMP_517"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_739(bytes1) -> _temp[i]
REF_740(None) -> _temp[i]
TMP_518 = CONVERT REF_740 to uint256
TMP_519(uint256) = TMP_518 + 32
TMP_520 = CONVERT TMP_519 to bytes1
REF_739(bytes1) (->_temp) := TMP_520(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_521(bool) = _hasNonNumber == False
CONDITION TMP_521"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_741(None) -> _temp[i]
TMP_522(bool) = REF_741 == 32
REF_742(None) -> _temp[i]
TMP_523(bool) = REF_742 > 96
REF_743(None) -> _temp[i]
TMP_524(bool) = REF_743 < 123
TMP_525(bool) = TMP_523 && TMP_524
TMP_526(bool) = TMP_522 || TMP_525
REF_744(None) -> _temp[i]
TMP_527(bool) = REF_744 > 47
REF_745(None) -> _temp[i]
TMP_528(bool) = REF_745 < 58
TMP_529(bool) = TMP_527 && TMP_528
TMP_530(bool) = TMP_526 || TMP_529
TMP_531(None) = SOLIDITY_CALL require(bool,string)(TMP_530,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_746(None) -> _temp[i]
TMP_532(bool) = REF_746 == 32
CONDITION TMP_532"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_533(uint256) = i + 1
REF_747(None) -> _temp[TMP_533]
TMP_534(bool) = REF_747 != 32
TMP_535(None) = SOLIDITY_CALL require(bool,string)(TMP_534,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_536(bool) = _hasNonNumber == False
REF_748(None) -> _temp[i]
TMP_537(bool) = REF_748 < 48
REF_749(None) -> _temp[i]
TMP_538(bool) = REF_749 > 57
TMP_539(bool) = TMP_537 || TMP_538
TMP_540(bool) = TMP_536 && TMP_539
CONDITION TMP_540"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_541(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_542(bool) = _hasNonNumber == True
TMP_543(None) = SOLIDITY_CALL require(bool,string)(TMP_542,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 6846.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 6846.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 6846.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 6846.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 6846.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 6846.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 6846.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 6846.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 6846.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_552(uint256) = a + b
c(uint256) := TMP_552(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_553(bool) = c >= a
TMP_554(None) = SOLIDITY_CALL require(bool,string)(TMP_553,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6846.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_544(bool) = a == 0
CONDITION TMP_544"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_545(uint256) = a * b
c(uint256) := TMP_545(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_546(uint256) = c / a
TMP_547(bool) = TMP_546 == b
TMP_548(None) = SOLIDITY_CALL require(bool,string)(TMP_547,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6846.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_562(bool) = x == 0
CONDITION TMP_562"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_563(bool) = y == 0
CONDITION TMP_563"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_564(bool) = i < y
CONDITION TMP_564"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_565(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_565(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_566(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 6846.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_561(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_561"];
}
// Function: 6846.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_555(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_556(uint256) = TMP_555 / 2
z(uint256) := TMP_556(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_557(bool) = z < y
CONDITION TMP_557"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_558(uint256) = x / z
TMP_559(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_558,z)
TMP_560(uint256) = TMP_559 / 2
z(uint256) := TMP_560(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 6846.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_549(bool) = b <= a
TMP_550(None) = SOLIDITY_CALL require(bool,string)(TMP_549,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_551(uint256) = a - b
RETURN TMP_551"];
}
// Function: 6846.sol-otherFoMo3D-potSwap()
digraph{
}
}
