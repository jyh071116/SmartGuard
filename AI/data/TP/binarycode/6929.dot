digraph G {
// Function: 6929.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 6929.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 6929.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 6929.sol-ERC20-totalSupply()
digraph{
}
// Function: 6929.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 6929.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 6929.sol-MigrationAgent-migrateFrom(address,uint256)
digraph{
}
// Function: 6929.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6929.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_18(bool) = msg.sender == owner
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6929.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = newOwner != TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 6929.sol-PitEur-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 6929.sol-PitEur-PitEur(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_multisig != 0x0)

IRs:
TMP_25(bool) = _multisig != 0
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
multisig = _multisig

IRs:
multisig(address) := _multisig(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[multisig] = _totalSupply

IRs:
REF_0(uint256) -> balances[multisig]
REF_0(uint256) (->balances) := _totalSupply(uint256)"];
}
// Function: 6929.sol-PitEur-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[owner][spender]

IRs:
REF_24(mapping(address => uint256)) -> allowed[owner]
REF_25(uint256) -> REF_24[spender]
RETURN REF_25"];
}
// Function: 6929.sol-PitEur-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((value >= 0) && (allowed[msg.sender][spender] >= 0))

IRs:
TMP_52(bool) = value >= 0
REF_20(mapping(address => uint256)) -> allowed[msg.sender]
REF_21(uint256) -> REF_20[spender]
TMP_53(bool) = REF_21 >= 0
TMP_54(bool) = TMP_52 && TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][spender] = value

IRs:
REF_22(mapping(address => uint256)) -> allowed[msg.sender]
REF_23(uint256) -> REF_22[spender]
REF_23(uint256) (->allowed) := value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,spender,value)

IRs:
Emit Approval(msg.sender,spender,value)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canTrade()

IRs:
MODIFIER_CALL, PitEur.canTrade()()"];
4->1;
}
// Function: 6929.sol-PitEur-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[who]

IRs:
REF_8(uint256) -> balances[who]
RETURN REF_8"];
}
// Function: 6929.sol-PitEur-canTrade()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tradable)

IRs:
TMP_84(None) = SOLIDITY_CALL require(bool)(tradable)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6929.sol-PitEur-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 6929.sol-PitEur-isLocked(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
releaseTimes[_spender] == 0 || releaseTimes[_spender] <= block.timestamp

IRs:
REF_27(uint256) -> releaseTimes[_spender]
TMP_60(bool) = REF_27 == 0
REF_28(uint256) -> releaseTimes[_spender]
TMP_61(bool) = REF_28 <= block.timestamp
TMP_62(bool) = TMP_60 || TMP_61
CONDITION TMP_62"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 6929.sol-PitEur-migrate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(migrationAgent != 0x0)

IRs:
TMP_68(bool) = migrationAgent != 0
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(value >= 0)

IRs:
TMP_70(bool) = value >= 0
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(value <= balances[msg.sender])

IRs:
REF_29(uint256) -> balances[msg.sender]
TMP_72(bool) = value <= REF_29
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] -= value

IRs:
REF_30(uint256) -> balances[msg.sender]
REF_30(-> balances) = REF_30 - value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_totalSupply = _totalSupply.sub(value)

IRs:
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'value'] 
_totalSupply(uint256) := TMP_74(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalMigrated = totalMigrated.add(value)

IRs:
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalMigrated', 'value'] 
totalMigrated(uint256) := TMP_75(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
MigrationAgent(migrationAgent).migrateFrom(msg.sender,value)

IRs:
TMP_76 = CONVERT migrationAgent to MigrationAgent
HIGH_LEVEL_CALL, dest:TMP_76(MigrationAgent), function:migrateFrom, arguments:['msg.sender', 'value']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Migrate(msg.sender,migrationAgent,value)

IRs:
Emit Migrate(msg.sender,migrationAgent,value)"];
}
// Function: 6929.sol-PitEur-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 6929.sol-PitEur-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_82(bool) = msg.sender == owner
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 6929.sol-PitEur-setMigrationAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(migrationAgent == 0x0 && totalMigrated == 0)

IRs:
TMP_63(bool) = migrationAgent == 0
TMP_64(bool) = totalMigrated == 0
TMP_65(bool) = TMP_63 && TMP_64
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
migrationAgent = _agent

IRs:
migrationAgent(address) := _agent(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 6929.sol-PitEur-setTradable(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tradable = _newTradableState

IRs:
tradable(bool) := _newTradableState(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 6929.sol-PitEur-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
_decimals = 18

IRs:
_decimals(uint8) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
decimalMultiplier = 10 ** (uint256(_decimals))

IRs:
TMP_79 = CONVERT _decimals to uint256
TMP_80(uint256) = 10 ** TMP_79
decimalMultiplier(uint256) := TMP_80(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
_name = PIT-EUR

IRs:
_name(string) := PIT-EUR(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
_symbol = PIT-EUR

IRs:
_symbol(string) := PIT-EUR(string)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
_totalSupply = 100000000 * decimalMultiplier

IRs:
TMP_81(uint256) = 100000000 * decimalMultiplier
_totalSupply(uint256) := TMP_81(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
tradable = true

IRs:
tradable(bool) := True(bool)"];
}
// Function: 6929.sol-PitEur-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 6929.sol-PitEur-timeLock(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseTimes[spender] = date

IRs:
REF_26(uint256) -> releaseTimes[spender]
REF_26(uint256) (->releaseTimes) := date(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 6929.sol-PitEur-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 6929.sol-PitEur-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isLocked(msg.sender))

IRs:
TMP_27(bool) = INTERNAL_CALL, PitEur.isLocked(address)(msg.sender)
TMP_28 = UnaryType.BANG TMP_27 
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[msg.sender] >= value && value > 0)

IRs:
REF_1(uint256) -> balances[msg.sender]
TMP_30(bool) = REF_1 >= value
TMP_31(bool) = value > 0
TMP_32(bool) = TMP_30 && TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(value)

IRs:
REF_2(uint256) -> balances[msg.sender]
REF_3(uint256) -> balances[msg.sender]
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_3', 'value'] 
REF_2(uint256) (->balances) := TMP_34(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[to] = balances[to].add(value)

IRs:
REF_5(uint256) -> balances[to]
REF_6(uint256) -> balances[to]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_6', 'value'] 
REF_5(uint256) (->balances) := TMP_35(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,to,value)

IRs:
Emit Transfer(msg.sender,to,value)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
canTrade()

IRs:
MODIFIER_CALL, PitEur.canTrade()()"];
6->1;
}
// Function: 6929.sol-PitEur-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to != 0x0)

IRs:
TMP_38(bool) = to != 0
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! isLocked(from))

IRs:
TMP_40(bool) = INTERNAL_CALL, PitEur.isLocked(address)(from)
TMP_41 = UnaryType.BANG TMP_40 
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_allowance = allowed[from][msg.sender]

IRs:
REF_9(mapping(address => uint256)) -> allowed[from]
REF_10(uint256) -> REF_9[msg.sender]
_allowance(uint256) := REF_10(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(value > 0 && _allowance >= value)

IRs:
TMP_43(bool) = value > 0
TMP_44(bool) = _allowance >= value
TMP_45(bool) = TMP_43 && TMP_44
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[from] = balances[from].sub(value)

IRs:
REF_11(uint256) -> balances[from]
REF_12(uint256) -> balances[from]
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_12', 'value'] 
REF_11(uint256) (->balances) := TMP_47(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[to] = balances[to].add(value)

IRs:
REF_14(uint256) -> balances[to]
REF_15(uint256) -> balances[to]
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_15', 'value'] 
REF_14(uint256) (->balances) := TMP_48(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allowed[from][msg.sender] = _allowance.sub(value)

IRs:
REF_17(mapping(address => uint256)) -> allowed[from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_allowance', 'value'] 
REF_18(uint256) (->allowed) := TMP_49(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(from,to,value)

IRs:
Emit Transfer(from,to,value)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
canTrade()

IRs:
MODIFIER_CALL, PitEur.canTrade()()"];
9->1;
}
// Function: 6929.sol-PitEur-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_20 = CONVERT 0 to address
TMP_21(bool) = newOwner != TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 6929.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6929.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6929.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 6929.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
}
