digraph G {
// Function: 7338.sol-BasicAccessControl-AddModerator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
moderators[_newModerator] == false

IRs:
REF_0(bool) -> moderators[_newModerator]
TMP_3(bool) = REF_0 == False
CONDITION TMP_3"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
moderators[_newModerator] = true

IRs:
REF_1(bool) -> moderators[_newModerator]
REF_1(bool) (->moderators) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalModerators += 1

IRs:
totalModerators(uint16) = totalModerators + 1"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
5->1;
}
// Function: 7338.sol-BasicAccessControl-BasicAccessControl()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 7338.sol-BasicAccessControl-ChangeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
_newOwner != address(0)

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _newOwner != TMP_0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
4->1;
}
// Function: 7338.sol-BasicAccessControl-RemoveModerator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
moderators[_oldModerator] == true

IRs:
REF_2(bool) -> moderators[_oldModerator]
TMP_5(bool) = REF_2 == True
CONDITION TMP_5"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
moderators[_oldModerator] = false

IRs:
REF_3(bool) -> moderators[_oldModerator]
REF_3(bool) (->moderators) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalModerators -= 1

IRs:
totalModerators(uint16) = totalModerators - 1"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
5->1;
}
// Function: 7338.sol-BasicAccessControl-UpdateMaintaining(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isMaintaining = _isMaintaining

IRs:
isMaintaining(bool) := _isMaintaining(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
2->1;
}
// Function: 7338.sol-BasicAccessControl-isActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isMaintaining)

IRs:
TMP_14 = UnaryType.BANG isMaintaining 
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7338.sol-BasicAccessControl-onlyModerators()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || moderators[msg.sender] == true)

IRs:
TMP_10(bool) = msg.sender == owner
REF_4(bool) -> moderators[msg.sender]
TMP_11(bool) = REF_4 == True
TMP_12(bool) = TMP_10 || TMP_11
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7338.sol-BasicAccessControl-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_8(bool) = msg.sender == owner
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7338.sol-BasicAccessControl-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalModerators = 0

IRs:
totalModerators(uint16) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
isMaintaining = false

IRs:
isMaintaining(bool) := False(bool)"];
}
// Function: 7338.sol-EtheremonDataBase-addElementToArrayType(EtheremonEnum.ArrayType,uint64,uint8)
digraph{
}
// Function: 7338.sol-EtheremonDataBase-addMonsterObj(uint32,address,string)
digraph{
}
// Function: 7338.sol-EtheremonDataBase-getElementInArrayType(EtheremonEnum.ArrayType,uint64,uint256)
digraph{
}
// Function: 7338.sol-EtheremonDataBase-getMonsterDexSize(address)
digraph{
}
// Function: 7338.sol-EtheremonDataBase-getMonsterObj(uint64)
digraph{
}
// Function: 7338.sol-EtheremonRankBattle-AddModerator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
moderators[_newModerator] == false

IRs:
REF_5(bool) -> moderators[_newModerator]
TMP_19(bool) = REF_5 == False
CONDITION TMP_19"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
moderators[_newModerator] = true

IRs:
REF_6(bool) -> moderators[_newModerator]
REF_6(bool) (->moderators) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalModerators += 1

IRs:
totalModerators(uint16) = totalModerators + 1"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
5->1;
}
// Function: 7338.sol-EtheremonRankBattle-BasicAccessControl()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 7338.sol-EtheremonRankBattle-ChangeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
_newOwner != address(0)

IRs:
TMP_16 = CONVERT 0 to address
TMP_17(bool) = _newOwner != TMP_16
CONDITION TMP_17"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
4->1;
}
// Function: 7338.sol-EtheremonRankBattle-EtheremonRankBattle(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
dataContract = _dataContract

IRs:
dataContract(address) := _dataContract(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tradeContract = _tradeContract

IRs:
tradeContract(address) := _tradeContract(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rankDataContract = _rankDataContract

IRs:
rankDataContract(address) := _rankDataContract(address)"];
}
// Function: 7338.sol-EtheremonRankBattle-RemoveModerator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
moderators[_oldModerator] == true

IRs:
REF_7(bool) -> moderators[_oldModerator]
TMP_21(bool) = REF_7 == True
CONDITION TMP_21"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
moderators[_oldModerator] = false

IRs:
REF_8(bool) -> moderators[_oldModerator]
REF_8(bool) (->moderators) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalModerators -= 1

IRs:
totalModerators(uint16) = totalModerators - 1"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
5->1;
}
// Function: 7338.sol-EtheremonRankBattle-UpdateMaintaining(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isMaintaining = _isMaintaining

IRs:
isMaintaining(bool) := _isMaintaining(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
2->1;
}
// Function: 7338.sol-EtheremonRankBattle-catchStarters()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->28;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
data = EtheremonDataBase(dataContract)

IRs:
TMP_117 = CONVERT dataContract to EtheremonDataBase
data(EtheremonDataBase) := TMP_117(EtheremonDataBase)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
data.getMonsterDexSize(msg.sender) > maxDexSize

IRs:
TMP_118(uint256) = HIGH_LEVEL_CALL, dest:data(EtheremonDataBase), function:getMonsterDexSize, arguments:['msg.sender']  
TMP_119(bool) = TMP_118 > maxDexSize
CONDITION TMP_119"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_120(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
seed = 0

IRs:
seed(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
objId = 0

IRs:
objId(uint64) := 0(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
classId = 0

IRs:
classId(uint32) := 0(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
value = 0

IRs:
value(uint8) := 0(uint256)"];
10->13;
11[label="Node Type: BEGIN_LOOP 11
"];
11->14;
12[label="Node Type: END_LOOP 12
"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
13->11;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i < starterClasses.length

IRs:
REF_32 -> LENGTH starterClasses
TMP_121(bool) = i < REF_32
CONDITION TMP_121"];
14->15[label="True"];
14->12[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
classId = starterClasses[i]

IRs:
REF_33(uint32) -> starterClasses[i]
classId(uint32) := REF_33(uint32)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
seed = getRandom(uint256(block.blockhash(block.number - i)))

IRs:
TMP_122(uint256) = block.number - i
TMP_123(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_122)
TMP_124 = CONVERT TMP_123 to uint256
TMP_125(uint256) = INTERNAL_CALL, EtheremonRankBattle.getRandom(uint256)(TMP_124)
seed(uint256) := TMP_125(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
objId = data.addMonsterObj(classId,msg.sender,..name me...)

IRs:
TMP_126(uint64) = HIGH_LEVEL_CALL, dest:data(EtheremonDataBase), function:addMonsterObj, arguments:['classId', 'msg.sender', '..name me...']  
objId(uint64) := TMP_126(uint64)"];
17->20;
18[label="Node Type: BEGIN_LOOP 18
"];
18->21;
19[label="Node Type: END_LOOP 19
"];
19->26;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
20->18;
21[label="Node Type: IF_LOOP 21

EXPRESSION:
j < 6

IRs:
TMP_127(bool) = j < 6
CONDITION TMP_127"];
21->22[label="True"];
21->19[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
seed = seed ^ (i + j)

IRs:
TMP_128(uint256) = i + j
TMP_129(uint256) = seed ^ TMP_128
seed(uint256) := TMP_129(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
value = uint8(seed % 32) + data.getElementInArrayType(ArrayType.STAT_START,uint64(classId),j)

IRs:
TMP_130(uint256) = seed % 32
TMP_131 = CONVERT TMP_130 to uint8
REF_36(EtheremonEnum.ArrayType) -> ArrayType.STAT_START
TMP_132 = CONVERT classId to uint64
TMP_133(uint8) = HIGH_LEVEL_CALL, dest:data(EtheremonDataBase), function:getElementInArrayType, arguments:['REF_36', 'TMP_132', 'j']  
TMP_134(uint8) = TMP_131 + TMP_133
value(uint8) := TMP_134(uint8)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
data.addElementToArrayType(ArrayType.STAT_BASE,objId,value)

IRs:
REF_38(EtheremonEnum.ArrayType) -> ArrayType.STAT_BASE
TMP_135(uint256) = HIGH_LEVEL_CALL, dest:data(EtheremonDataBase), function:addElementToArrayType, arguments:['REF_38', 'objId', 'value']  "];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
j += 1

IRs:
j(uint256) = j + 1"];
25->21;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
Transfer(address(0),msg.sender,objId)

IRs:
TMP_136 = CONVERT 0 to address
Emit Transfer(TMP_136,msg.sender,objId)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i += 1

IRs:
i(uint256) = i + 1"];
27->14;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
isActive()

IRs:
MODIFIER_CALL, BasicAccessControl.isActive()()"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
requireDataContract()

IRs:
MODIFIER_CALL, EtheremonRankBattle.requireDataContract()()"];
29->1;
}
// Function: 7338.sol-EtheremonRankBattle-getRandom(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(keccak256()(block.timestamp,block.difficulty)) ^ _seed

IRs:
TMP_28(bytes32) = SOLIDITY_CALL keccak256()(block.timestamp,block.difficulty)
TMP_29 = CONVERT TMP_28 to uint256
TMP_30(uint256) = TMP_29 ^ _seed
RETURN TMP_30"];
}
// Function: 7338.sol-EtheremonRankBattle-getValidClassId(uint64,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
data = EtheremonDataBase(dataContract)

IRs:
TMP_31 = CONVERT dataContract to EtheremonDataBase
data(EtheremonDataBase) := TMP_31(EtheremonDataBase)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(obj.monsterId,obj.classId,obj.trainer,obj.exp,obj.createIndex,obj.lastClaimIndex,obj.createTime) = data.getMonsterObj(_objId)

IRs:
REF_13(uint64) -> obj.monsterId
REF_14(uint32) -> obj.classId
REF_15(address) -> obj.trainer
REF_16(uint32) -> obj.exp
REF_17(uint32) -> obj.createIndex
REF_18(uint32) -> obj.lastClaimIndex
REF_19(uint256) -> obj.createTime
TUPLE_0(uint64,uint32,address,uint32,uint32,uint32,uint256) = HIGH_LEVEL_CALL, dest:data(EtheremonDataBase), function:getMonsterObj, arguments:['_objId']  
REF_13(uint64)= UNPACK TUPLE_0 index: 0 
REF_14(uint32)= UNPACK TUPLE_0 index: 1 
REF_15(address)= UNPACK TUPLE_0 index: 2 
REF_16(uint32)= UNPACK TUPLE_0 index: 3 
REF_17(uint32)= UNPACK TUPLE_0 index: 4 
REF_18(uint32)= UNPACK TUPLE_0 index: 5 
REF_19(uint256)= UNPACK TUPLE_0 index: 6 "];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
obj.trainer != _owner || obj.classId == 21

IRs:
REF_21(address) -> obj.trainer
TMP_32(bool) = REF_21 != _owner
REF_22(uint32) -> obj.classId
TMP_33(bool) = REF_22 == 21
TMP_34(bool) = TMP_32 || TMP_33
CONDITION TMP_34"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
0

IRs:
RETURN 0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
obj.classId

IRs:
REF_23(uint32) -> obj.classId
RETURN REF_23"];
}
// Function: 7338.sol-EtheremonRankBattle-hasValidParam(address,uint64,uint64,uint64,uint64,uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a1 == 0 || _a2 == 0 || _a3 == 0

IRs:
TMP_35(bool) = _a1 == 0
TMP_36(bool) = _a2 == 0
TMP_37(bool) = TMP_35 || TMP_36
TMP_38(bool) = _a3 == 0
TMP_39(bool) = TMP_37 || TMP_38
CONDITION TMP_39"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_a1 == _a2 || _a1 == _a3 || _a1 == _s1 || _a1 == _s2 || _a1 == _s3

IRs:
TMP_40(bool) = _a1 == _a2
TMP_41(bool) = _a1 == _a3
TMP_42(bool) = TMP_40 || TMP_41
TMP_43(bool) = _a1 == _s1
TMP_44(bool) = TMP_42 || TMP_43
TMP_45(bool) = _a1 == _s2
TMP_46(bool) = TMP_44 || TMP_45
TMP_47(bool) = _a1 == _s3
TMP_48(bool) = TMP_46 || TMP_47
CONDITION TMP_48"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_a2 == _a3 || _a2 == _s1 || _a2 == _s2 || _a2 == _s3

IRs:
TMP_49(bool) = _a2 == _a3
TMP_50(bool) = _a2 == _s1
TMP_51(bool) = TMP_49 || TMP_50
TMP_52(bool) = _a2 == _s2
TMP_53(bool) = TMP_51 || TMP_52
TMP_54(bool) = _a2 == _s3
TMP_55(bool) = TMP_53 || TMP_54
CONDITION TMP_55"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_a3 == _s1 || _a3 == _s2 || _a3 == _s3

IRs:
TMP_56(bool) = _a3 == _s1
TMP_57(bool) = _a3 == _s2
TMP_58(bool) = TMP_56 || TMP_57
TMP_59(bool) = _a3 == _s3
TMP_60(bool) = TMP_58 || TMP_59
CONDITION TMP_60"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
false

IRs:
RETURN False"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_s1 > 0 && (_s1 == _s2 || _s1 == _s3)

IRs:
TMP_61(bool) = _s1 > 0
TMP_62(bool) = _s1 == _s2
TMP_63(bool) = _s1 == _s3
TMP_64(bool) = TMP_62 || TMP_63
TMP_65(bool) = TMP_61 && TMP_64
CONDITION TMP_65"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
false

IRs:
RETURN False"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_s2 > 0 && (_s2 == _s3)

IRs:
TMP_66(bool) = _s2 > 0
TMP_67(bool) = _s2 == _s3
TMP_68(bool) = TMP_66 && TMP_67
CONDITION TMP_68"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: RETURN 17

EXPRESSION:
false

IRs:
RETURN False"];
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
classA1 = getValidClassId(_a1,_trainer)

IRs:
TMP_69(uint32) = INTERNAL_CALL, EtheremonRankBattle.getValidClassId(uint64,address)(_a1,_trainer)
classA1(uint32) := TMP_69(uint32)"];
19->20;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
classA2 = getValidClassId(_a2,_trainer)

IRs:
TMP_70(uint32) = INTERNAL_CALL, EtheremonRankBattle.getValidClassId(uint64,address)(_a2,_trainer)
classA2(uint32) := TMP_70(uint32)"];
20->21;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
classA3 = getValidClassId(_a3,_trainer)

IRs:
TMP_71(uint32) = INTERNAL_CALL, EtheremonRankBattle.getValidClassId(uint64,address)(_a3,_trainer)
classA3(uint32) := TMP_71(uint32)"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
classA1 == 0 || classA2 == 0 || classA3 == 0

IRs:
TMP_72(bool) = classA1 == 0
TMP_73(bool) = classA2 == 0
TMP_74(bool) = TMP_72 || TMP_73
TMP_75(bool) = classA3 == 0
TMP_76(bool) = TMP_74 || TMP_75
CONDITION TMP_76"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: RETURN 23

EXPRESSION:
false

IRs:
RETURN False"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
classA1 == classA2 || classA1 == classA3 || classA2 == classA3

IRs:
TMP_77(bool) = classA1 == classA2
TMP_78(bool) = classA1 == classA3
TMP_79(bool) = TMP_77 || TMP_78
TMP_80(bool) = classA2 == classA3
TMP_81(bool) = TMP_79 || TMP_80
CONDITION TMP_81"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: RETURN 26

EXPRESSION:
false

IRs:
RETURN False"];
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
_s1 > 0 && getValidClassId(_s1,_trainer) == 0

IRs:
TMP_82(bool) = _s1 > 0
TMP_83(uint32) = INTERNAL_CALL, EtheremonRankBattle.getValidClassId(uint64,address)(_s1,_trainer)
TMP_84(bool) = TMP_83 == 0
TMP_85(bool) = TMP_82 && TMP_84
CONDITION TMP_85"];
28->29[label="True"];
28->30[label="False"];
29[label="Node Type: RETURN 29

EXPRESSION:
false

IRs:
RETURN False"];
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: IF 31

EXPRESSION:
_s2 > 0 && getValidClassId(_s2,_trainer) == 0

IRs:
TMP_86(bool) = _s2 > 0
TMP_87(uint32) = INTERNAL_CALL, EtheremonRankBattle.getValidClassId(uint64,address)(_s2,_trainer)
TMP_88(bool) = TMP_87 == 0
TMP_89(bool) = TMP_86 && TMP_88
CONDITION TMP_89"];
31->32[label="True"];
31->33[label="False"];
32[label="Node Type: RETURN 32

EXPRESSION:
false

IRs:
RETURN False"];
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: IF 34

EXPRESSION:
_s3 > 0 && getValidClassId(_s3,_trainer) == 0

IRs:
TMP_90(bool) = _s3 > 0
TMP_91(uint32) = INTERNAL_CALL, EtheremonRankBattle.getValidClassId(uint64,address)(_s3,_trainer)
TMP_92(bool) = TMP_91 == 0
TMP_93(bool) = TMP_90 && TMP_92
CONDITION TMP_93"];
34->35[label="True"];
34->36[label="False"];
35[label="Node Type: RETURN 35

EXPRESSION:
false

IRs:
RETURN False"];
36[label="Node Type: END_IF 36
"];
36->37;
37[label="Node Type: RETURN 37

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 7338.sol-EtheremonRankBattle-isActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isMaintaining)

IRs:
TMP_146 = UnaryType.BANG isMaintaining 
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7338.sol-EtheremonRankBattle-onlyModerators()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || moderators[msg.sender] == true)

IRs:
TMP_142(bool) = msg.sender == owner
REF_39(bool) -> moderators[msg.sender]
TMP_143(bool) = REF_39 == True
TMP_144(bool) = TMP_142 || TMP_143
TMP_145(None) = SOLIDITY_CALL require(bool)(TMP_144)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7338.sol-EtheremonRankBattle-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_140(bool) = msg.sender == owner
TMP_141(None) = SOLIDITY_CALL require(bool)(TMP_140)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7338.sol-EtheremonRankBattle-quickSetStarterClasses()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
starterClasses[0] = 25

IRs:
REF_10(uint32) -> starterClasses[0]
REF_10(uint32) (->starterClasses) := 25(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
starterClasses[1] = 26

IRs:
REF_11(uint32) -> starterClasses[1]
REF_11(uint32) (->starterClasses) := 26(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
starterClasses[2] = 27

IRs:
REF_12(uint32) -> starterClasses[2]
REF_12(uint32) (->starterClasses) := 27(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyModerators()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyModerators()()"];
4->1;
}
// Function: 7338.sol-EtheremonRankBattle-requireDataContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(dataContract != address(0))

IRs:
TMP_148 = CONVERT 0 to address
TMP_149(bool) = dataContract != TMP_148
TMP_150(None) = SOLIDITY_CALL require(bool)(TMP_149)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7338.sol-EtheremonRankBattle-requireRankDataContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(rankDataContract != address(0))

IRs:
TMP_154 = CONVERT 0 to address
TMP_155(bool) = rankDataContract != TMP_154
TMP_156(None) = SOLIDITY_CALL require(bool)(TMP_155)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7338.sol-EtheremonRankBattle-requireTradeContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tradeContract != address(0))

IRs:
TMP_151 = CONVERT 0 to address
TMP_152(bool) = tradeContract != TMP_151
TMP_153(None) = SOLIDITY_CALL require(bool)(TMP_152)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7338.sol-EtheremonRankBattle-setCastle(uint64,uint64,uint64,uint64,uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: IF 1

EXPRESSION:
! hasValidParam(msg.sender,_a1,_a2,_a3,_s1,_s2,_s3)

IRs:
TMP_94(bool) = INTERNAL_CALL, EtheremonRankBattle.hasValidParam(address,uint64,uint64,uint64,uint64,uint64,uint64)(msg.sender,_a1,_a2,_a3,_s1,_s2,_s3)
TMP_95 = UnaryType.BANG TMP_94 
CONDITION TMP_95"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_96(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
trade = EtheremonTradeInterface(tradeContract)

IRs:
TMP_97 = CONVERT tradeContract to EtheremonTradeInterface
trade(EtheremonTradeInterface) := TMP_97(EtheremonTradeInterface)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
trade.isOnTrading(_a1) || trade.isOnTrading(_a2) || trade.isOnTrading(_a3) || trade.isOnTrading(_s1) || trade.isOnTrading(_s2) || trade.isOnTrading(_s3)

IRs:
TMP_98(bool) = HIGH_LEVEL_CALL, dest:trade(EtheremonTradeInterface), function:isOnTrading, arguments:['_a1']  
TMP_99(bool) = HIGH_LEVEL_CALL, dest:trade(EtheremonTradeInterface), function:isOnTrading, arguments:['_a2']  
TMP_100(bool) = TMP_98 || TMP_99
TMP_101(bool) = HIGH_LEVEL_CALL, dest:trade(EtheremonTradeInterface), function:isOnTrading, arguments:['_a3']  
TMP_102(bool) = TMP_100 || TMP_101
TMP_103(bool) = HIGH_LEVEL_CALL, dest:trade(EtheremonTradeInterface), function:isOnTrading, arguments:['_s1']  
TMP_104(bool) = TMP_102 || TMP_103
TMP_105(bool) = HIGH_LEVEL_CALL, dest:trade(EtheremonTradeInterface), function:isOnTrading, arguments:['_s2']  
TMP_106(bool) = TMP_104 || TMP_105
TMP_107(bool) = HIGH_LEVEL_CALL, dest:trade(EtheremonTradeInterface), function:isOnTrading, arguments:['_s3']  
TMP_108(bool) = TMP_106 || TMP_107
CONDITION TMP_108"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_109(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
rank = EtheremonRankData(rankDataContract)

IRs:
TMP_110 = CONVERT rankDataContract to EtheremonRankData
rank(EtheremonRankData) := TMP_110(EtheremonRankData)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
playerId = rank.setPlayer(msg.sender,_a1,_a2,_a3,_s1,_s2,_s3)

IRs:
TMP_111(uint32) = HIGH_LEVEL_CALL, dest:rank(EtheremonRankData), function:setPlayer, arguments:['msg.sender', '_a1', '_a2', '_a3', '_s1', '_s2', '_s3']  
playerId(uint32) := TMP_111(uint32)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
EventUpdateCastle(msg.sender,playerId)

IRs:
Emit EventUpdateCastle(msg.sender,playerId)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActive()

IRs:
MODIFIER_CALL, BasicAccessControl.isActive()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
requireDataContract()

IRs:
MODIFIER_CALL, EtheremonRankBattle.requireDataContract()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
requireTradeContract()

IRs:
MODIFIER_CALL, EtheremonRankBattle.requireTradeContract()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
requireRankDataContract()

IRs:
MODIFIER_CALL, EtheremonRankBattle.requireRankDataContract()()"];
14->1;
}
// Function: 7338.sol-EtheremonRankBattle-setContract(address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
dataContract = _dataContract

IRs:
dataContract(address) := _dataContract(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tradeContract = _tradeContract

IRs:
tradeContract(address) := _tradeContract(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rankDataContract = _rankDataContract

IRs:
rankDataContract(address) := _rankDataContract(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyModerators()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyModerators()()"];
4->1;
}
// Function: 7338.sol-EtheremonRankBattle-setMaxDexSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
maxDexSize = _value

IRs:
maxDexSize(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyModerators()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyModerators()()"];
2->1;
}
// Function: 7338.sol-EtheremonRankBattle-setStarterClass(uint256,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
starterClasses[_index] = _classId

IRs:
REF_9(uint32) -> starterClasses[_index]
REF_9(uint32) (->starterClasses) := _classId(uint32)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyModerators()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyModerators()()"];
2->1;
}
// Function: 7338.sol-EtheremonRankBattle-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalModerators = 0

IRs:
totalModerators(uint16) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
isMaintaining = false

IRs:
isMaintaining(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
maxDexSize = 200

IRs:
maxDexSize(uint256) := 200(uint256)"];
}
// Function: 7338.sol-EtheremonRankData-setPlayer(address,uint64,uint64,uint64,uint64,uint64,uint64)
digraph{
}
// Function: 7338.sol-EtheremonTradeInterface-isOnTrading(uint64)
digraph{
}
}
