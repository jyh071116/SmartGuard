digraph G {
// Function: 738.sol-ERC223-allowance(address,address)
digraph{
}
// Function: 738.sol-ERC223-approve(address,uint256)
digraph{
}
// Function: 738.sol-ERC223-balanceOf(address)
digraph{
}
// Function: 738.sol-ERC223-burn(uint256)
digraph{
}
// Function: 738.sol-ERC223-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_6 = UnaryType.BANG mintingFinished 
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 738.sol-ERC223-decreaseApproval(address,uint256)
digraph{
}
// Function: 738.sol-ERC223-finishMinting()
digraph{
}
// Function: 738.sol-ERC223-increaseApproval(address,uint256)
digraph{
}
// Function: 738.sol-ERC223-mint(address,uint256)
digraph{
}
// Function: 738.sol-ERC223-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == 0x57Cdd07287f668eC4D58f3E362b4FCC2bC54F5b8)

IRs:
TMP_8(bool) = msg.sender == owner
TMP_9(bool) = msg.sender == 501272008155761664021131898746807700750438036920
TMP_10(bool) = TMP_8 || TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 738.sol-ERC223-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 738.sol-ERC223-transfer(address,uint256)
digraph{
}
// Function: 738.sol-ERC223-transfer(address,uint256,bytes)
digraph{
}
// Function: 738.sol-ERC223-transferFrom(address,address,uint256)
digraph{
}
// Function: 738.sol-ERC223-transferOwnership(address)
digraph{
}
// Function: 738.sol-ERC223ReceivingContractInterface-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 738.sol-Permissioned-burn(uint256)
digraph{
}
// Function: 738.sol-Permissioned-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_0 = UnaryType.BANG mintingFinished 
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 738.sol-Permissioned-finishMinting()
digraph{
}
// Function: 738.sol-Permissioned-mint(address,uint256)
digraph{
}
// Function: 738.sol-Permissioned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == 0x57Cdd07287f668eC4D58f3E362b4FCC2bC54F5b8)

IRs:
TMP_2(bool) = msg.sender == owner
TMP_3(bool) = msg.sender == 501272008155761664021131898746807700750438036920
TMP_4(bool) = TMP_2 || TMP_3
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 738.sol-Permissioned-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 738.sol-Permissioned-transferOwnership(address)
digraph{
}
// Function: 738.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_151(uint256) = a + b
c(uint256) := TMP_151(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_152(bool) = c >= a
TMP_153(None) = SOLIDITY_CALL assert(bool)(TMP_152)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 738.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_147(uint256) = a / b
c(uint256) := TMP_147(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 738.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_141(uint256) = a * b
c(uint256) := TMP_141(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_142(bool) = a == 0
TMP_143(uint256) = c / a
TMP_144(bool) = TMP_143 == b
TMP_145(bool) = TMP_142 || TMP_144
TMP_146(None) = SOLIDITY_CALL assert(bool)(TMP_145)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 738.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_148(bool) = b <= a
TMP_149(None) = SOLIDITY_CALL assert(bool)(TMP_148)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_150(uint256) = a - b
RETURN TMP_150"];
}
// Function: 738.sol-Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0x00))

IRs:
TMP_77 = CONVERT 0 to address
TMP_78(bool) = _owner != TMP_77
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_spender != address(0x00))

IRs:
TMP_80 = CONVERT 0 to address
TMP_81(bool) = _spender != TMP_80
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_50(mapping(address => uint256)) -> allowed[_owner]
REF_51(uint256) -> REF_50[_spender]
RETURN REF_51"];
}
// Function: 738.sol-Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_47(uint256) -> balances[msg.sender]
TMP_74(bool) = _value <= REF_47
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_48(mapping(address => uint256)) -> allowed[msg.sender]
REF_49(uint256) -> REF_48[_spender]
REF_49(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 738.sol-Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_who]

IRs:
REF_17(uint256) -> balances[_who]
RETURN REF_17"];
}
// Function: 738.sol-Token-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0x00)

IRs:
TMP_109(bool) = _value > 0
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_73(uint256) -> balances[msg.sender]
TMP_111(bool) = _value <= REF_73
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_74(uint256) -> balances[msg.sender]
REF_75(uint256) -> balances[msg.sender]
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_75', '_value'] 
REF_74(uint256) (->balances) := TMP_113(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_114(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
}
// Function: 738.sol-Token-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_135 = UnaryType.BANG mintingFinished 
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 738.sol-Token-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
teamFrozenBalances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370][1546300801] = uint256(1398652000 * 10 ** 18)

IRs:
REF_0(mapping(uint64 => uint256)) -> teamFrozenBalances[349007794088665613496513094302483074817061372784]
REF_1(uint256) -> REF_0[1546300801]
TMP_12(uint256) = 10 ** 18
TMP_13(uint256) = 1398652000 * TMP_12
TMP_14 = CONVERT TMP_13 to uint256
REF_1(uint256) (->teamFrozenBalances) := TMP_14(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1546300801] = uint256(131104417 * 10 ** 18)

IRs:
REF_2(mapping(uint64 => uint256)) -> teamFrozenBalances[1173718611969711311294331566890420198720328154007]
REF_3(uint256) -> REF_2[1546300801]
TMP_15(uint256) = 10 ** 18
TMP_16(uint256) = 131104417 * TMP_15
TMP_17 = CONVERT TMP_16 to uint256
REF_3(uint256) (->teamFrozenBalances) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1577836801] = uint256(131104417 * 10 ** 18)

IRs:
REF_4(mapping(uint64 => uint256)) -> teamFrozenBalances[1173718611969711311294331566890420198720328154007]
REF_5(uint256) -> REF_4[1577836801]
TMP_18(uint256) = 10 ** 18
TMP_19(uint256) = 131104417 * TMP_18
TMP_20 = CONVERT TMP_19 to uint256
REF_5(uint256) (->teamFrozenBalances) := TMP_20(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1609459201] = uint256(131104417 * 10 ** 18)

IRs:
REF_6(mapping(uint64 => uint256)) -> teamFrozenBalances[1173718611969711311294331566890420198720328154007]
REF_7(uint256) -> REF_6[1609459201]
TMP_21(uint256) = 10 ** 18
TMP_22(uint256) = 131104417 * TMP_21
TMP_23 = CONVERT TMP_22 to uint256
REF_7(uint256) (->teamFrozenBalances) := TMP_23(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
teamFrozenBalances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89][1546300801] = uint256(87415750 * 10 ** 18)

IRs:
REF_8(mapping(uint64 => uint256)) -> teamFrozenBalances[375711565744947660256469492222422710727280269961]
REF_9(uint256) -> REF_8[1546300801]
TMP_24(uint256) = 10 ** 18
TMP_25(uint256) = 87415750 * TMP_24
TMP_26 = CONVERT TMP_25 to uint256
REF_9(uint256) (->teamFrozenBalances) := TMP_26(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
teamFrozenBalances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398][1546300801] = uint256(43707875 * 10 ** 18)

IRs:
REF_10(mapping(uint64 => uint256)) -> teamFrozenBalances[558136167741238782486511358957716539038372176792]
REF_11(uint256) -> REF_10[1546300801]
TMP_27(uint256) = 10 ** 18
TMP_28(uint256) = 43707875 * TMP_27
TMP_29 = CONVERT TMP_28 to uint256
REF_11(uint256) (->teamFrozenBalances) := TMP_29(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
teamFrozenBalances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104][1546300801] = uint256(87415750 * 10 ** 18)

IRs:
REF_12(mapping(uint64 => uint256)) -> teamFrozenBalances[467263013515395380361516005163264287845211861252]
REF_13(uint256) -> REF_12[1546300801]
TMP_30(uint256) = 10 ** 18
TMP_31(uint256) = 87415750 * TMP_30
TMP_32 = CONVERT TMP_31 to uint256
REF_13(uint256) (->teamFrozenBalances) := TMP_32(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
teamFrozenBalances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047][1546300801] = uint256(43707875 * 10 ** 18)

IRs:
REF_14(mapping(uint64 => uint256)) -> teamFrozenBalances[1438575889153992858249843497759573609711996186695]
REF_15(uint256) -> REF_14[1546300801]
TMP_33(uint256) = 10 ** 18
TMP_34(uint256) = 43707875 * TMP_33
TMP_35 = CONVERT TMP_34 to uint256
REF_15(uint256) (->teamFrozenBalances) := TMP_35(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
totalReward = 2054212501 * 10 ** uint256(TOKEN_DECIMALS)

IRs:
TMP_36 = CONVERT TOKEN_DECIMALS to uint256
TMP_37(uint256) = 10 ** TMP_36
TMP_38(uint256) = 2054212501 * TMP_37
totalReward(uint256) := TMP_38(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalSupply = totalSupply.add(totalReward)

IRs:
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', 'totalReward'] 
totalSupply(uint256) := TMP_39(uint256)"];
}
// Function: 738.sol-Token-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint8(TOKEN_DECIMALS)

IRs:
TMP_40 = CONVERT TOKEN_DECIMALS to uint8
RETURN TMP_40"];
}
// Function: 738.sol-Token-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spender != address(0x00))

IRs:
TMP_90 = CONVERT 0 to address
TMP_91(bool) = _spender != TMP_90
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_60(mapping(address => uint256)) -> allowed[msg.sender]
REF_61(uint256) -> REF_60[_spender]
oldValue(uint256) := REF_61(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_93(bool) = _subtractedValue > oldValue
CONDITION TMP_93"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = 0x00

IRs:
REF_62(mapping(address => uint256)) -> allowed[msg.sender]
REF_63(uint256) -> REF_62[_spender]
REF_63(uint256) (->allowed) := 0(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_64(mapping(address => uint256)) -> allowed[msg.sender]
REF_65(uint256) -> REF_64[_spender]
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_65(uint256) (->allowed) := TMP_94(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_67(mapping(address => uint256)) -> allowed[msg.sender]
REF_68(uint256) -> REF_67[_spender]
Emit Approval(msg.sender,_spender,REF_68)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 738.sol-Token-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 738.sol-Token-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Permissioned.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, Permissioned.canMint()()"];
5->1;
}
// Function: 738.sol-Token-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_spender != address(0x00))

IRs:
TMP_83 = CONVERT 0 to address
TMP_84(bool) = _spender != TMP_83
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_addedValue <= balances[msg.sender])

IRs:
REF_52(uint256) -> balances[msg.sender]
TMP_86(bool) = _addedValue <= REF_52
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_53(mapping(address => uint256)) -> allowed[msg.sender]
REF_54(uint256) -> REF_53[_spender]
REF_55(mapping(address => uint256)) -> allowed[msg.sender]
REF_56(uint256) -> REF_55[_spender]
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_56', '_addedValue'] 
REF_54(uint256) (->allowed) := TMP_88(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_58(mapping(address => uint256)) -> allowed[msg.sender]
REF_59(uint256) -> REF_58[_spender]
Emit Approval(msg.sender,_spender,REF_59)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 738.sol-Token-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0x00))

IRs:
TMP_96 = CONVERT 0 to address
TMP_97(bool) = _to != TMP_96
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_99(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_70(uint256) -> balances[_to]
REF_71(uint256) -> balances[_to]
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', '_amount'] 
REF_70(uint256) (->balances) := TMP_100(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(address(0x00),_to,_amount,data)

IRs:
TMP_102 = CONVERT 0 to address
Emit Transfer(TMP_102,_to,_amount,data)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Permissioned.onlyOwner()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, Permissioned.canMint()()"];
9->1;
}
// Function: 738.sol-Token-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
TOKEN_NAME

IRs:
RETURN TOKEN_NAME"];
}
// Function: 738.sol-Token-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == 0x57Cdd07287f668eC4D58f3E362b4FCC2bC54F5b8)

IRs:
TMP_137(bool) = msg.sender == owner
TMP_138(bool) = msg.sender == 501272008155761664021131898746807700750438036920
TMP_139(bool) = TMP_137 || TMP_138
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 738.sol-Token-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
TOKEN_NAME = YOUToken

IRs:
TOKEN_NAME(string) := YOUToken(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
TOKEN_SYMBOL = YOU

IRs:
TOKEN_SYMBOL(string) := YOU(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
TOKEN_DECIMALS = 18

IRs:
TOKEN_DECIMALS(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TOKEN_OWNER = 0x57Cdd07287f668eC4D58f3E362b4FCC2bC54F5b8

IRs:
TOKEN_OWNER(address) := 501272008155761664021131898746807700750438036920(address)"];
}
// Function: 738.sol-Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 738.sol-Token-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
TOKEN_SYMBOL

IRs:
RETURN TOKEN_SYMBOL"];
}
// Function: 738.sol-Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0x00))

IRs:
TMP_41 = CONVERT 0 to address
TMP_42(bool) = _to != TMP_41
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_18(uint256) -> balances[msg.sender]
TMP_44(bool) = REF_18 >= _value
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_19(uint256) -> balances[msg.sender]
REF_20(uint256) -> balances[msg.sender]
TMP_46(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_20', '_value'] 
REF_19(uint256) (->balances) := TMP_46(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_22(uint256) -> balances[_to]
REF_23(uint256) -> balances[_to]
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_23', '_value'] 
REF_22(uint256) (->balances) := TMP_47(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,data)

IRs:
Emit Transfer(msg.sender,_to,_value,data)"];
}
// Function: 738.sol-Token-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0x00))

IRs:
TMP_49 = CONVERT 0 to address
TMP_50(bool) = _to != TMP_49
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_25(uint256) -> balances[msg.sender]
TMP_52(bool) = REF_25 >= _value
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_26(uint256) -> balances[msg.sender]
REF_27(uint256) -> balances[msg.sender]
TMP_54(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_27', '_value'] 
REF_26(uint256) (->balances) := TMP_54(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_29(uint256) -> balances[_to]
REF_30(uint256) -> balances[_to]
TMP_55(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_30', '_value'] 
REF_29(uint256) (->balances) := TMP_55(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
codeLength > 0x00

IRs:
TMP_56(bool) = codeLength > 0
CONDITION TMP_56"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
receiver = ERC223ReceivingContractInterface(_to)

IRs:
TMP_57 = CONVERT _to to ERC223ReceivingContractInterface
receiver(ERC223ReceivingContractInterface) := TMP_57(ERC223ReceivingContractInterface)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ERC223ReceivingContractInterface), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
}
// Function: 738.sol-Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_from != address(0x00))

IRs:
TMP_60 = CONVERT 0 to address
TMP_61(bool) = _from != TMP_60
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0x00))

IRs:
TMP_63 = CONVERT 0 to address
TMP_64(bool) = _to != TMP_63
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_33(uint256) -> balances[_from]
TMP_66(bool) = _value <= REF_33
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_34(mapping(address => uint256)) -> allowed[_from]
REF_35(uint256) -> REF_34[msg.sender]
TMP_68(bool) = _value <= REF_35
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_36(uint256) -> balances[_from]
REF_37(uint256) -> balances[_from]
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_37', '_value'] 
REF_36(uint256) (->balances) := TMP_70(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_39(uint256) -> balances[_to]
REF_40(uint256) -> balances[_to]
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_40', '_value'] 
REF_39(uint256) (->balances) := TMP_71(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_42(mapping(address => uint256)) -> allowed[_from]
REF_43(uint256) -> REF_42[msg.sender]
REF_44(mapping(address => uint256)) -> allowed[_from]
REF_45(uint256) -> REF_44[msg.sender]
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_45', '_value'] 
REF_43(uint256) (->allowed) := TMP_72(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(_from,_to,_value,data)

IRs:
Emit Transfer(_from,_to,_value,data)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 738.sol-Token-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0x00))

IRs:
TMP_116 = CONVERT 0 to address
TMP_117(bool) = _newOwner != TMP_116
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnershipTransferred(msg.sender,owner)

IRs:
Emit OwnershipTransferred(msg.sender,owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Permissioned.onlyOwner()()"];
4->1;
}
// Function: 738.sol-Token-unfreezeFoundingTeamBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->32;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
timestamp = uint64(block.timestamp)

IRs:
TMP_121 = CONVERT block.timestamp to uint64
timestamp(uint64) := TMP_121(uint64)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(timestamp >= 1546300801)

IRs:
TMP_122(bool) = timestamp >= 1546300801
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
timestamp < 1577836801

IRs:
TMP_124(bool) = timestamp < 1577836801
CONDITION TMP_124"];
4->5[label="True"];
4->23[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
fronzenBalance = teamFrozenBalances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370][1546300801]

IRs:
REF_78(mapping(uint64 => uint256)) -> teamFrozenBalances[349007794088665613496513094302483074817061372784]
REF_79(uint256) -> REF_78[1546300801]
fronzenBalance(uint256) := REF_79(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
teamFrozenBalances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370][1546300801] = 0

IRs:
REF_80(mapping(uint64 => uint256)) -> teamFrozenBalances[349007794088665613496513094302483074817061372784]
REF_81(uint256) -> REF_80[1546300801]
REF_81(uint256) (->teamFrozenBalances) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370] = balances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370].add(fronzenBalance)

IRs:
REF_82(uint256) -> balances[349007794088665613496513094302483074817061372784]
REF_83(uint256) -> balances[349007794088665613496513094302483074817061372784]
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_83', 'fronzenBalance'] 
REF_82(uint256) (->balances) := TMP_125(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
fronzenBalance = teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1546300801]

IRs:
REF_85(mapping(uint64 => uint256)) -> teamFrozenBalances[1173718611969711311294331566890420198720328154007]
REF_86(uint256) -> REF_85[1546300801]
fronzenBalance(uint256) := REF_86(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1546300801] = 0

IRs:
REF_87(mapping(uint64 => uint256)) -> teamFrozenBalances[1173718611969711311294331566890420198720328154007]
REF_88(uint256) -> REF_87[1546300801]
REF_88(uint256) (->teamFrozenBalances) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97] = balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97].add(fronzenBalance)

IRs:
REF_89(uint256) -> balances[1173718611969711311294331566890420198720328154007]
REF_90(uint256) -> balances[1173718611969711311294331566890420198720328154007]
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_90', 'fronzenBalance'] 
REF_89(uint256) (->balances) := TMP_126(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
fronzenBalance = teamFrozenBalances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89][1546300801]

IRs:
REF_92(mapping(uint64 => uint256)) -> teamFrozenBalances[375711565744947660256469492222422710727280269961]
REF_93(uint256) -> REF_92[1546300801]
fronzenBalance(uint256) := REF_93(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
teamFrozenBalances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89][1546300801] = 0

IRs:
REF_94(mapping(uint64 => uint256)) -> teamFrozenBalances[375711565744947660256469492222422710727280269961]
REF_95(uint256) -> REF_94[1546300801]
REF_95(uint256) (->teamFrozenBalances) := 0(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
balances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89] = balances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89].add(fronzenBalance)

IRs:
REF_96(uint256) -> balances[375711565744947660256469492222422710727280269961]
REF_97(uint256) -> balances[375711565744947660256469492222422710727280269961]
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_97', 'fronzenBalance'] 
REF_96(uint256) (->balances) := TMP_127(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
fronzenBalance = teamFrozenBalances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398][1546300801]

IRs:
REF_99(mapping(uint64 => uint256)) -> teamFrozenBalances[558136167741238782486511358957716539038372176792]
REF_100(uint256) -> REF_99[1546300801]
fronzenBalance(uint256) := REF_100(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
teamFrozenBalances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398][1546300801] = 0

IRs:
REF_101(mapping(uint64 => uint256)) -> teamFrozenBalances[558136167741238782486511358957716539038372176792]
REF_102(uint256) -> REF_101[1546300801]
REF_102(uint256) (->teamFrozenBalances) := 0(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
balances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398] = balances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398].add(fronzenBalance)

IRs:
REF_103(uint256) -> balances[558136167741238782486511358957716539038372176792]
REF_104(uint256) -> balances[558136167741238782486511358957716539038372176792]
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_104', 'fronzenBalance'] 
REF_103(uint256) (->balances) := TMP_128(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
fronzenBalance = teamFrozenBalances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104][1546300801]

IRs:
REF_106(mapping(uint64 => uint256)) -> teamFrozenBalances[467263013515395380361516005163264287845211861252]
REF_107(uint256) -> REF_106[1546300801]
fronzenBalance(uint256) := REF_107(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
teamFrozenBalances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104][1546300801] = 0

IRs:
REF_108(mapping(uint64 => uint256)) -> teamFrozenBalances[467263013515395380361516005163264287845211861252]
REF_109(uint256) -> REF_108[1546300801]
REF_109(uint256) (->teamFrozenBalances) := 0(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
balances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104] = balances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104].add(fronzenBalance)

IRs:
REF_110(uint256) -> balances[467263013515395380361516005163264287845211861252]
REF_111(uint256) -> balances[467263013515395380361516005163264287845211861252]
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_111', 'fronzenBalance'] 
REF_110(uint256) (->balances) := TMP_129(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
fronzenBalance = teamFrozenBalances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047][1546300801]

IRs:
REF_113(mapping(uint64 => uint256)) -> teamFrozenBalances[1438575889153992858249843497759573609711996186695]
REF_114(uint256) -> REF_113[1546300801]
fronzenBalance(uint256) := REF_114(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
teamFrozenBalances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047][1546300801] = 0

IRs:
REF_115(mapping(uint64 => uint256)) -> teamFrozenBalances[1438575889153992858249843497759573609711996186695]
REF_116(uint256) -> REF_115[1546300801]
REF_116(uint256) (->teamFrozenBalances) := 0(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
balances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047] = balances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047].add(fronzenBalance)

IRs:
REF_117(uint256) -> balances[1438575889153992858249843497759573609711996186695]
REF_118(uint256) -> balances[1438575889153992858249843497759573609711996186695]
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_118', 'fronzenBalance'] 
REF_117(uint256) (->balances) := TMP_130(uint256)"];
22->31;
23[label="Node Type: IF 23

EXPRESSION:
timestamp < 1609459201

IRs:
TMP_131(bool) = timestamp < 1609459201
CONDITION TMP_131"];
23->24[label="True"];
23->27[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
fronzenBalance = teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1577836801]

IRs:
REF_120(mapping(uint64 => uint256)) -> teamFrozenBalances[1173718611969711311294331566890420198720328154007]
REF_121(uint256) -> REF_120[1577836801]
fronzenBalance(uint256) := REF_121(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1577836801] = 0

IRs:
REF_122(mapping(uint64 => uint256)) -> teamFrozenBalances[1173718611969711311294331566890420198720328154007]
REF_123(uint256) -> REF_122[1577836801]
REF_123(uint256) (->teamFrozenBalances) := 0(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97] = balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97].add(fronzenBalance)

IRs:
REF_124(uint256) -> balances[1173718611969711311294331566890420198720328154007]
REF_125(uint256) -> balances[1173718611969711311294331566890420198720328154007]
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_125', 'fronzenBalance'] 
REF_124(uint256) (->balances) := TMP_132(uint256)"];
26->30;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
fronzenBalance = teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1609459201]

IRs:
REF_127(mapping(uint64 => uint256)) -> teamFrozenBalances[1173718611969711311294331566890420198720328154007]
REF_128(uint256) -> REF_127[1609459201]
fronzenBalance(uint256) := REF_128(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1609459201] = 0

IRs:
REF_129(mapping(uint64 => uint256)) -> teamFrozenBalances[1173718611969711311294331566890420198720328154007]
REF_130(uint256) -> REF_129[1609459201]
REF_130(uint256) (->teamFrozenBalances) := 0(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97] = balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97].add(fronzenBalance)

IRs:
REF_131(uint256) -> balances[1173718611969711311294331566890420198720328154007]
REF_132(uint256) -> balances[1173718611969711311294331566890420198720328154007]
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_132', 'fronzenBalance'] 
REF_131(uint256) (->balances) := TMP_133(uint256)"];
29->30;
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: END_IF 31
"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Permissioned.onlyOwner()()"];
32->1;
}
}
