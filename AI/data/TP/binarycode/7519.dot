digraph G {
// Function: 7519.sol-BSPMintable-changeDistributor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
DistributorChanged(distributor,_newDistributor)

IRs:
Emit DistributorChanged(distributor,_newDistributor)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
distributor = _newDistributor

IRs:
distributor(address) := _newDistributor(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 7519.sol-BSPMintable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 7519.sol-BSPMintable-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_69(None) = SOLIDITY_CALL revert()()"];
}
// Function: 7519.sol-BSPMintable-mint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
unminted = mintableAmount()

IRs:
TMP_39(uint256) = INTERNAL_CALL, BSPMintable.mintableAmount()()
unminted(uint256) := TMP_39(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unminted > 0)

IRs:
TMP_40(bool) = unminted > 0
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
minted = minted.add(unminted)

IRs:
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['minted', 'unminted'] 
minted(uint256) := TMP_42(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
BSPToken.safeTransfer(distributor,unminted)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['BSPToken', 'distributor', 'unminted'] "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Mint(unminted)

IRs:
Emit Mint(unminted)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenStarted()

IRs:
MODIFIER_CALL, BSPMintable.whenStarted()()"];
6->1;
}
// Function: 7519.sol-BSPMintable-mintableAmount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
started == false || startTime >= block.timestamp

IRs:
TMP_46(bool) = started == False
TMP_47(bool) = startTime >= block.timestamp
TMP_48(bool) = TMP_46 || TMP_47
CONDITION TMP_48"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
block.timestamp >= startTime.add(duration)

IRs:
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['startTime', 'duration'] 
TMP_50(bool) = block.timestamp >= TMP_49
CONDITION TMP_50"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
BSPToken.balanceOf(this)

IRs:
TMP_51(uint256) = HIGH_LEVEL_CALL, dest:BSPToken(ERC20Basic), function:balanceOf, arguments:['this']  
RETURN TMP_51"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
currentYear = block.timestamp.sub(startTime).div(220752000)

IRs:
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['block.timestamp', 'startTime'] 
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_52', '220752000'] 
currentYear(uint256) := TMP_53(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
currentDay = (block.timestamp.sub(startTime) % (220752000)).div(86400)

IRs:
TMP_54(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['block.timestamp', 'startTime'] 
TMP_55(uint256) = TMP_54 % 220752000
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_55', '86400'] 
currentDay(uint256) := TMP_56(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
currentMintable = 0

IRs:
currentMintable(uint256) := 0(uint256)"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->16;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < currentYear

IRs:
TMP_57(bool) = i < currentYear
CONDITION TMP_57"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
currentMintable = currentMintable.add(rewardAmount.mul(miningRate[i]).div(100))

IRs:
REF_12(uint256) -> miningRate[i]
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['rewardAmount', 'REF_12'] 
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_58', '100'] 
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['currentMintable', 'TMP_59'] 
currentMintable(uint256) := TMP_60(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_61(uint256) := i(uint256)
i(uint256) = i + 1"];
15->13;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
currentMintable = currentMintable.add(rewardAmount.mul(miningRate[currentYear]).div(36500).mul(currentDay))

IRs:
REF_16(uint256) -> miningRate[currentYear]
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['rewardAmount', 'REF_16'] 
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_62', '36500'] 
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_63', 'currentDay'] 
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['currentMintable', 'TMP_64'] 
currentMintable(uint256) := TMP_65(uint256)"];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
currentMintable.sub(minted)

IRs:
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['currentMintable', 'minted'] 
RETURN TMP_66"];
}
// Function: 7519.sol-BSPMintable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_73(bool) = msg.sender == owner
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7519.sol-BSPMintable-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rewardAmount = 630000000 * (10 ** 18)

IRs:
TMP_71(uint256) = 10 ** 18
TMP_72(uint256) = 630000000 * TMP_71
rewardAmount(uint256) := TMP_72(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
duration = 883008000

IRs:
duration(uint256) := 883008000(uint256)"];
}
// Function: 7519.sol-BSPMintable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
distributor = 0x4F91C1f068E0dED2B7fF823289Add800E1c26Fc3

IRs:
distributor(address) := 454260773427230458970508913676424702132400320451(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
BSPToken = ERC20Basic(0x5d551fA77ec2C7dd1387B626c4f33235c3885199)

IRs:
TMP_70 = CONVERT 532834462505005425859516839651600331017636303257 to ERC20Basic
BSPToken(ERC20Basic) := TMP_70(ERC20Basic)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
miningRate = (40,20,20,20)

IRs:
miningRate(uint256[4]) = ['40(uint256)', '20(uint256)', '20(uint256)', '20(uint256)']"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
started = false

IRs:
started(bool) := False(bool)"];
}
// Function: 7519.sol-BSPMintable-startMining(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(started == false && BSPToken.balanceOf(this) >= rewardAmount)

IRs:
TMP_26(bool) = started == False
TMP_27(uint256) = HIGH_LEVEL_CALL, dest:BSPToken(ERC20Basic), function:balanceOf, arguments:['this']  
TMP_28(bool) = TMP_27 >= rewardAmount
TMP_29(bool) = TMP_26 && TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_startTime >= block.timestamp)

IRs:
TMP_31(bool) = _startTime >= block.timestamp
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_startTime <= block.timestamp + 5184000)

IRs:
TMP_33(uint256) = block.timestamp + 5184000
TMP_34(bool) = _startTime <= TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
started = true

IRs:
started(bool) := True(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 7519.sol-BSPMintable-totalBspAmount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
BSPToken.balanceOf(this).add(minted)

IRs:
TMP_67(uint256) = HIGH_LEVEL_CALL, dest:BSPToken(ERC20Basic), function:balanceOf, arguments:['this']  
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_67', 'minted'] 
RETURN TMP_68"];
}
// Function: 7519.sol-BSPMintable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_21 = CONVERT 0 to address
TMP_22(bool) = newOwner != TMP_21
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 7519.sol-BSPMintable-whenStarted()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(started == true && startTime <= block.timestamp)

IRs:
TMP_75(bool) = started == True
TMP_76(bool) = startTime <= block.timestamp
TMP_77(bool) = TMP_75 && TMP_76
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7519.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 7519.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 7519.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 7519.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 7519.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_19(bool) = msg.sender == owner
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7519.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_14 = CONVERT 0 to address
TMP_15(bool) = newOwner != TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 7519.sol-SafeERC20-safeTransfer(ERC20Basic,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.transfer(to,value))

IRs:
TMP_12(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['to', 'value']  
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
}
// Function: 7519.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7519.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 7519.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7519.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
