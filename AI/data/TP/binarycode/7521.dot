digraph G {
// Function: 7521.sol-BSPVesting-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_29(None) = SOLIDITY_CALL revert()()"];
}
// Function: 7521.sol-BSPVesting-releasableAmount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
vestedAmount().sub(released)

IRs:
TMP_20(uint256) = INTERNAL_CALL, BSPVesting.vestedAmount()()
TMP_21(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_20', 'released'] 
RETURN TMP_21"];
}
// Function: 7521.sol-BSPVesting-release()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
unreleased = releasableAmount()

IRs:
TMP_14(uint256) = INTERNAL_CALL, BSPVesting.releasableAmount()()
unreleased(uint256) := TMP_14(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unreleased > 0)

IRs:
TMP_15(bool) = unreleased > 0
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
released = released.add(unreleased)

IRs:
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['released', 'unreleased'] 
released(uint256) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
BSPToken.safeTransfer(beneficiary,unreleased)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['BSPToken', 'beneficiary', 'unreleased'] "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Released(unreleased)

IRs:
Emit Released(unreleased)"];
}
// Function: 7521.sol-BSPVesting-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
beneficiary = 0xb790f6DBd477C7125b13a8Bb3a67771027Abd402

IRs:
beneficiary(address) := 1047978122795946867459617804804816928890988254210(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
BSPToken = ERC20Basic(0x5d551fA77ec2C7dd1387B626c4f33235c3885199)

IRs:
TMP_30 = CONVERT 532834462505005425859516839651600331017636303257 to ERC20Basic
BSPToken(ERC20Basic) := TMP_30(ERC20Basic)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
start = 1577808000

IRs:
start(uint256) := 1577808000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
duration = 15 * 2592000

IRs:
TMP_31(uint256) = 15 * 2592000
duration(uint256) := TMP_31(uint256)"];
}
// Function: 7521.sol-BSPVesting-vestedAmount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
currentBalance = BSPToken.balanceOf(this)

IRs:
TMP_22(uint256) = HIGH_LEVEL_CALL, dest:BSPToken(ERC20Basic), function:balanceOf, arguments:['this']  
currentBalance(uint256) := TMP_22(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalBalance = currentBalance.add(released)

IRs:
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['currentBalance', 'released'] 
totalBalance(uint256) := TMP_23(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
block.timestamp >= start.add(duration)

IRs:
TMP_24(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['start', 'duration'] 
TMP_25(bool) = block.timestamp >= TMP_24
CONDITION TMP_25"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
totalBalance

IRs:
RETURN totalBalance"];
5[label="Node Type: RETURN 5

EXPRESSION:
totalBalance.mul(block.timestamp.sub(start)).div(duration)

IRs:
TMP_26(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['block.timestamp', 'start'] 
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['totalBalance', 'TMP_26'] 
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_27', 'duration'] 
RETURN TMP_28"];
}
// Function: 7521.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 7521.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 7521.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 7521.sol-SafeERC20-safeTransfer(ERC20Basic,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.transfer(to,value))

IRs:
TMP_12(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['to', 'value']  
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
}
// Function: 7521.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7521.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 7521.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7521.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
