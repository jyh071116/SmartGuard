digraph G {
// Function: 7593.sol-BasicAccessControl-AddModerator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
moderators[_newModerator] == false

IRs:
REF_0(bool) -> moderators[_newModerator]
TMP_3(bool) = REF_0 == False
CONDITION TMP_3"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
moderators[_newModerator] = true

IRs:
REF_1(bool) -> moderators[_newModerator]
REF_1(bool) (->moderators) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalModerators += 1

IRs:
totalModerators(uint16) = totalModerators + 1"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
5->1;
}
// Function: 7593.sol-BasicAccessControl-BasicAccessControl()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 7593.sol-BasicAccessControl-ChangeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
_newOwner != address(0)

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _newOwner != TMP_0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
4->1;
}
// Function: 7593.sol-BasicAccessControl-RemoveModerator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
moderators[_oldModerator] == true

IRs:
REF_2(bool) -> moderators[_oldModerator]
TMP_5(bool) = REF_2 == True
CONDITION TMP_5"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
moderators[_oldModerator] = false

IRs:
REF_3(bool) -> moderators[_oldModerator]
REF_3(bool) (->moderators) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalModerators -= 1

IRs:
totalModerators(uint16) = totalModerators - 1"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
5->1;
}
// Function: 7593.sol-BasicAccessControl-UpdateMaintaining(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isMaintaining = _isMaintaining

IRs:
isMaintaining(bool) := _isMaintaining(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
2->1;
}
// Function: 7593.sol-BasicAccessControl-isActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isMaintaining)

IRs:
TMP_14 = UnaryType.BANG isMaintaining 
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7593.sol-BasicAccessControl-onlyModerators()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || moderators[msg.sender] == true)

IRs:
TMP_10(bool) = msg.sender == owner
REF_4(bool) -> moderators[msg.sender]
TMP_11(bool) = REF_4 == True
TMP_12(bool) = TMP_10 || TMP_11
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7593.sol-BasicAccessControl-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_8(bool) = msg.sender == owner
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7593.sol-BasicAccessControl-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalModerators = 0

IRs:
totalModerators(uint16) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
isMaintaining = false

IRs:
isMaintaining(bool) := False(bool)"];
}
// Function: 7593.sol-EtheremonEnergy-AddModerator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
moderators[_newModerator] == false

IRs:
REF_5(bool) -> moderators[_newModerator]
TMP_19(bool) = REF_5 == False
CONDITION TMP_19"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
moderators[_newModerator] = true

IRs:
REF_6(bool) -> moderators[_newModerator]
REF_6(bool) (->moderators) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalModerators += 1

IRs:
totalModerators(uint16) = totalModerators + 1"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
5->1;
}
// Function: 7593.sol-EtheremonEnergy-BasicAccessControl()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 7593.sol-EtheremonEnergy-ChangeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
_newOwner != address(0)

IRs:
TMP_16 = CONVERT 0 to address
TMP_17(bool) = _newOwner != TMP_16
CONDITION TMP_17"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
4->1;
}
// Function: 7593.sol-EtheremonEnergy-EtheremonEnergy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paymentContract = _paymentContract

IRs:
paymentContract(address) := _paymentContract(address)"];
}
// Function: 7593.sol-EtheremonEnergy-RemoveModerator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
moderators[_oldModerator] == true

IRs:
REF_7(bool) -> moderators[_oldModerator]
TMP_21(bool) = REF_7 == True
CONDITION TMP_21"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
moderators[_oldModerator] = false

IRs:
REF_8(bool) -> moderators[_oldModerator]
REF_8(bool) (->moderators) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalModerators -= 1

IRs:
totalModerators(uint16) = totalModerators - 1"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
5->1;
}
// Function: 7593.sol-EtheremonEnergy-UpdateMaintaining(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isMaintaining = _isMaintaining

IRs:
isMaintaining(bool) := _isMaintaining(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyOwner()()"];
2->1;
}
// Function: 7593.sol-EtheremonEnergy-claimEnergy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
energy = energyData[msg.sender]

IRs:
REF_32(EtheremonEnergy.Energy) -> energyData[msg.sender]
energy(EtheremonEnergy.Energy) := REF_32(EtheremonEnergy.Energy)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
period = safeDeduct(block.timestamp,energy.lastClaim)

IRs:
REF_33(uint256) -> energy.lastClaim
TMP_48(uint256) = INTERNAL_CALL, EtheremonEnergy.safeDeduct(uint256,uint256)(block.timestamp,REF_33)
period(uint256) := TMP_48(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
energyAmount = (period / claimTime) * claimAmount

IRs:
TMP_49(uint256) = period / claimTime
TMP_50(uint256) = TMP_49 * claimAmount
energyAmount(uint256) := TMP_50(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
energyAmount == 0

IRs:
TMP_51(bool) = energyAmount == 0
CONDITION TMP_51"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_52(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
energyAmount > claimMaxAmount

IRs:
TMP_53(bool) = energyAmount > claimMaxAmount
CONDITION TMP_53"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
energyAmount = claimMaxAmount

IRs:
energyAmount(uint256) := claimMaxAmount(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
energy.freeAmount += energyAmount

IRs:
REF_34(uint256) -> energy.freeAmount
REF_34(-> energy) = REF_34 + energyAmount"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
energy.lastClaim = block.timestamp

IRs:
REF_35(uint256) -> energy.lastClaim
REF_35(uint256) (->energy) := block.timestamp(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
EventEnergyUpdate(msg.sender,energy.freeAmount,energy.paidAmount,energy.lastClaim)

IRs:
REF_36(uint256) -> energy.freeAmount
REF_37(uint256) -> energy.paidAmount
REF_38(uint256) -> energy.lastClaim
Emit EventEnergyUpdate(msg.sender,REF_36,REF_37,REF_38)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActive()

IRs:
MODIFIER_CALL, BasicAccessControl.isActive()()"];
13->1;
}
// Function: 7593.sol-EtheremonEnergy-getClaimableAmount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
energy = energyData[_trainer]

IRs:
REF_43(EtheremonEnergy.Energy) -> energyData[_trainer]
energy(EtheremonEnergy.Energy) := REF_43(EtheremonEnergy.Energy)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
period = safeDeduct(block.timestamp,energy.lastClaim)

IRs:
REF_44(uint256) -> energy.lastClaim
TMP_56(uint256) = INTERNAL_CALL, EtheremonEnergy.safeDeduct(uint256,uint256)(block.timestamp,REF_44)
period(uint256) := TMP_56(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
energyAmount = (period / claimTime) * claimAmount

IRs:
TMP_57(uint256) = period / claimTime
TMP_58(uint256) = TMP_57 * claimAmount
energyAmount(uint256) := TMP_58(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
energyAmount > claimMaxAmount

IRs:
TMP_59(bool) = energyAmount > claimMaxAmount
CONDITION TMP_59"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
energyAmount = claimMaxAmount

IRs:
energyAmount(uint256) := claimMaxAmount(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
energyAmount

IRs:
RETURN energyAmount"];
}
// Function: 7593.sol-EtheremonEnergy-getPlayerEnergy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
energy = energyData[_player]

IRs:
REF_39(EtheremonEnergy.Energy) -> energyData[_player]
energy(EtheremonEnergy.Energy) := REF_39(EtheremonEnergy.Energy)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(energy.freeAmount,energy.paidAmount,energy.lastClaim)

IRs:
REF_40(uint256) -> energy.freeAmount
REF_41(uint256) -> energy.paidAmount
REF_42(uint256) -> energy.lastClaim
RETURN REF_40,REF_41,REF_42"];
3[label="Node Type: RETURN 3

EXPRESSION:
(freeAmount,paidAmount,lastClaim)

IRs:
RETURN freeAmount,paidAmount,lastClaim"];
}
// Function: 7593.sol-EtheremonEnergy-isActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isMaintaining)

IRs:
TMP_67 = UnaryType.BANG isMaintaining 
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7593.sol-EtheremonEnergy-onlyModerators()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || moderators[msg.sender] == true)

IRs:
TMP_63(bool) = msg.sender == owner
REF_45(bool) -> moderators[msg.sender]
TMP_64(bool) = REF_45 == True
TMP_65(bool) = TMP_63 || TMP_64
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7593.sol-EtheremonEnergy-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_61(bool) = msg.sender == owner
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7593.sol-EtheremonEnergy-requirePaymentContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paymentContract != address(0))

IRs:
TMP_69 = CONVERT 0 to address
TMP_70(bool) = paymentContract != TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7593.sol-EtheremonEnergy-safeDeduct(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_a < _b

IRs:
TMP_40(bool) = _a < _b
CONDITION TMP_40"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(_a - _b)

IRs:
TMP_41(uint256) = _a - _b
RETURN TMP_41"];
}
// Function: 7593.sol-EtheremonEnergy-setConfig(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paymentContract = _paymentContract

IRs:
paymentContract(address) := _paymentContract(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
claimMaxAmount = _claimMaxAmount

IRs:
claimMaxAmount(uint256) := _claimMaxAmount(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
claimTime = _claimTime

IRs:
claimTime(uint256) := _claimTime(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
claimAmount = _claimAmount

IRs:
claimAmount(uint256) := _claimAmount(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyModerators()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyModerators()()"];
5->1;
}
// Function: 7593.sol-EtheremonEnergy-setPaidPackage(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pack = paidPackages[_packId]

IRs:
REF_10(EtheremonEnergy.EnergyPackage) -> paidPackages[_packId]
pack(EtheremonEnergy.EnergyPackage) := REF_10(EtheremonEnergy.EnergyPackage)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pack.ethPrice = _ethPrice

IRs:
REF_11(uint256) -> pack.ethPrice
REF_11(uint256) (->pack) := _ethPrice(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pack.emontPrice = _emontPrice

IRs:
REF_12(uint256) -> pack.emontPrice
REF_12(uint256) (->pack) := _emontPrice(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pack.energy = _energy

IRs:
REF_13(uint256) -> pack.energy
REF_13(uint256) (->pack) := _energy(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyModerators()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyModerators()()"];
5->1;
}
// Function: 7593.sol-EtheremonEnergy-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalModerators = 0

IRs:
totalModerators(uint16) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
isMaintaining = false

IRs:
isMaintaining(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
claimMaxAmount = 10

IRs:
claimMaxAmount(uint256) := 10(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
claimTime = 30 * 60

IRs:
TMP_60(uint256) = 30 * 60
claimTime(uint256) := TMP_60(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
claimAmount = 1

IRs:
claimAmount(uint256) := 1(uint256)"];
}
// Function: 7593.sol-EtheremonEnergy-topupEnergy(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pack = paidPackages[_packId]

IRs:
REF_23(EtheremonEnergy.EnergyPackage) -> paidPackages[_packId]
pack(EtheremonEnergy.EnergyPackage) := REF_23(EtheremonEnergy.EnergyPackage)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pack.energy == 0 || pack.ethPrice != msg.value

IRs:
REF_24(uint256) -> pack.energy
TMP_42(bool) = REF_24 == 0
REF_25(uint256) -> pack.ethPrice
TMP_43(bool) = REF_25 != msg.value
TMP_44(bool) = TMP_42 || TMP_43
CONDITION TMP_44"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_45(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
energy = energyData[msg.sender]

IRs:
REF_26(EtheremonEnergy.Energy) -> energyData[msg.sender]
energy(EtheremonEnergy.Energy) := REF_26(EtheremonEnergy.Energy)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
energy.paidAmount += pack.energy

IRs:
REF_27(uint256) -> energy.paidAmount
REF_28(uint256) -> pack.energy
REF_27(-> energy) = REF_27 + REF_28"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
EventEnergyUpdate(msg.sender,energy.freeAmount,energy.paidAmount,energy.lastClaim)

IRs:
REF_29(uint256) -> energy.freeAmount
REF_30(uint256) -> energy.paidAmount
REF_31(uint256) -> energy.lastClaim
Emit EventEnergyUpdate(msg.sender,REF_29,REF_30,REF_31)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isActive()

IRs:
MODIFIER_CALL, BasicAccessControl.isActive()()"];
8->1;
}
// Function: 7593.sol-EtheremonEnergy-topupEnergyByToken(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != paymentContract

IRs:
TMP_32(bool) = msg.sender != paymentContract
CONDITION TMP_32"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_33(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
pack = paidPackages[_packId]

IRs:
REF_14(EtheremonEnergy.EnergyPackage) -> paidPackages[_packId]
pack(EtheremonEnergy.EnergyPackage) := REF_14(EtheremonEnergy.EnergyPackage)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pack.energy == 0 || pack.emontPrice != _token

IRs:
REF_15(uint256) -> pack.energy
TMP_34(bool) = REF_15 == 0
REF_16(uint256) -> pack.emontPrice
TMP_35(bool) = REF_16 != _token
TMP_36(bool) = TMP_34 || TMP_35
CONDITION TMP_36"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_37(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
energy = energyData[_player]

IRs:
REF_17(EtheremonEnergy.Energy) -> energyData[_player]
energy(EtheremonEnergy.Energy) := REF_17(EtheremonEnergy.Energy)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
energy.paidAmount += pack.energy

IRs:
REF_18(uint256) -> energy.paidAmount
REF_19(uint256) -> pack.energy
REF_18(-> energy) = REF_18 + REF_19"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
EventEnergyUpdate(_player,energy.freeAmount,energy.paidAmount,energy.lastClaim)

IRs:
REF_20(uint256) -> energy.freeAmount
REF_21(uint256) -> energy.paidAmount
REF_22(uint256) -> energy.lastClaim
Emit EventEnergyUpdate(_player,REF_20,REF_21,REF_22)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
requirePaymentContract()

IRs:
MODIFIER_CALL, EtheremonEnergy.requirePaymentContract()()"];
11->1;
}
// Function: 7593.sol-EtheremonEnergy-withdrawEther(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_amount > address(this).balance

IRs:
TMP_24 = CONVERT this to address
TMP_25(uint256) = SOLIDITY_CALL balance(address)(TMP_24)
TMP_26(bool) = _amount > TMP_25
CONDITION TMP_26"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_27(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_sendTo.transfer(_amount)

IRs:
Transfer dest:_sendTo value:_amount"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyModerators()

IRs:
MODIFIER_CALL, BasicAccessControl.onlyModerators()()"];
5->1;
}
}
