digraph G {
// Function: 7775.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 7775.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 7775.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 7775.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 7775.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_0(bool) = msg.sender == owner
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7775.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_11(uint256) = a + b
c(uint256) := TMP_11(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_12(bool) = c >= a
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7775.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_7(uint256) = a / b
RETURN TMP_7"];
}
// Function: 7775.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_2(bool) = a == 0
CONDITION TMP_2"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_3(uint256) = a * b
c(uint256) := TMP_3(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_4(uint256) = c / a
TMP_5(bool) = TMP_4 == b
TMP_6(None) = SOLIDITY_CALL assert(bool)(TMP_5)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7775.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_8(bool) = b <= a
TMP_9(None) = SOLIDITY_CALL assert(bool)(TMP_8)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_10(uint256) = a - b
RETURN TMP_10"];
}
// Function: 7775.sol-TokenVesting-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 7775.sol-TokenVesting-TokenVesting(address,uint256,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_14 = CONVERT 0 to address
TMP_15(bool) = _beneficiary != TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_cliff <= _duration)

IRs:
TMP_17(bool) = _cliff <= _duration
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
beneficiary = _beneficiary

IRs:
beneficiary(address) := _beneficiary(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revocable = _revocable

IRs:
revocable(bool) := _revocable(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
duration = _duration

IRs:
duration(uint256) := _duration(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
cliff = _start.add(_cliff)

IRs:
TMP_19(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_start', '_cliff'] 
cliff(uint256) := TMP_19(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
start = _start

IRs:
start(uint256) := _start(uint256)"];
}
// Function: 7775.sol-TokenVesting-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_48(bool) = msg.sender == owner
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7775.sol-TokenVesting-releasableAmount(ERC20Basic)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
vestedAmount(token).sub(released[token])

IRs:
TMP_37(uint256) = INTERNAL_CALL, TokenVesting.vestedAmount(ERC20Basic)(token)
REF_11(uint256) -> released[token]
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_37', 'REF_11'] 
RETURN TMP_38"];
}
// Function: 7775.sol-TokenVesting-release(ERC20Basic)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
unreleased = releasableAmount(token)

IRs:
TMP_20(uint256) = INTERNAL_CALL, TokenVesting.releasableAmount(ERC20Basic)(token)
unreleased(uint256) := TMP_20(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(unreleased > 0)

IRs:
TMP_21(bool) = unreleased > 0
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
released[token] = released[token].add(unreleased)

IRs:
REF_1(uint256) -> released[token]
REF_2(uint256) -> released[token]
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_2', 'unreleased'] 
REF_1(uint256) (->released) := TMP_23(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(token.transfer(beneficiary,unreleased))

IRs:
TMP_24(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['beneficiary', 'unreleased']  
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Released(unreleased)

IRs:
Emit Released(unreleased)"];
}
// Function: 7775.sol-TokenVesting-revoke(ERC20Basic)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(revocable)

IRs:
TMP_27(None) = SOLIDITY_CALL require(bool)(revocable)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! revoked[token])

IRs:
REF_5(bool) -> revoked[token]
TMP_28 = UnaryType.BANG REF_5 
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
balance = token.balanceOf(this)

IRs:
TMP_30(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_30(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
unreleased = releasableAmount(token)

IRs:
TMP_31(uint256) = INTERNAL_CALL, TokenVesting.releasableAmount(ERC20Basic)(token)
unreleased(uint256) := TMP_31(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
refund = balance.sub(unreleased)

IRs:
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['balance', 'unreleased'] 
refund(uint256) := TMP_32(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revoked[token] = true

IRs:
REF_8(bool) -> revoked[token]
REF_8(bool) (->revoked) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(token.transfer(owner,refund))

IRs:
TMP_33(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['owner', 'refund']  
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Revoked()

IRs:
Emit Revoked()"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->1;
}
// Function: 7775.sol-TokenVesting-vestedAmount(ERC20Basic)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
currentBalance = token.balanceOf(this)

IRs:
TMP_39(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:balanceOf, arguments:['this']  
currentBalance(uint256) := TMP_39(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalBalance = currentBalance.add(released[token])

IRs:
REF_14(uint256) -> released[token]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['currentBalance', 'REF_14'] 
totalBalance(uint256) := TMP_40(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
block.timestamp < cliff

IRs:
TMP_41(bool) = block.timestamp < cliff
CONDITION TMP_41"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: IF 5

EXPRESSION:
block.timestamp >= start.add(duration) || revoked[token]

IRs:
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['start', 'duration'] 
TMP_43(bool) = block.timestamp >= TMP_42
REF_16(bool) -> revoked[token]
TMP_44(bool) = TMP_43 || REF_16
CONDITION TMP_44"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
totalBalance

IRs:
RETURN totalBalance"];
7[label="Node Type: RETURN 7

EXPRESSION:
totalBalance.mul(block.timestamp.sub(start)).div(duration)

IRs:
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['block.timestamp', 'start'] 
TMP_46(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['totalBalance', 'TMP_45'] 
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_46', 'duration'] 
RETURN TMP_47"];
}
}
