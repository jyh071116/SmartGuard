digraph G {
// Function: 7919.sol-ApproveAndCallFallBack-receiveApproval(address,uint256,address,bytes)
digraph{
}
// Function: 7919.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 7919.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 7919.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 7919.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 7919.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 7919.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 7919.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_16(bool) = msg.sender == newOwner
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_19 = CONVERT 0 to address
newOwner(address) := TMP_19(address)"];
}
// Function: 7919.sol-Owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 7919.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_20(bool) = msg.sender == owner
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7919.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 7919.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_0(uint256) = a + b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_1(bool) = c >= a
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7919.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_12(bool) = b > 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_14(uint256) = a / b
c(uint256) := TMP_14(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7919.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_6(uint256) = a * b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_7(bool) = a == 0
TMP_8(uint256) = c / a
TMP_9(bool) = TMP_8 == b
TMP_10(bool) = TMP_7 || TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7919.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_3(bool) = b <= a
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_5(uint256) = a - b
c(uint256) := TMP_5(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7919.sol-YetAnotherUselessToken-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_38(bool) = msg.sender == newOwner
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_41 = CONVERT 0 to address
newOwner(address) := TMP_41(address)"];
}
// Function: 7919.sol-YetAnotherUselessToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[tokenOwner][spender]

IRs:
REF_17(mapping(address => uint256)) -> allowed[tokenOwner]
REF_18(uint256) -> REF_17[spender]
RETURN REF_18"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 7919.sol-YetAnotherUselessToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_7(mapping(address => uint256)) -> allowed[msg.sender]
REF_8(uint256) -> REF_7[spender]
REF_8(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 7919.sol-YetAnotherUselessToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_19(mapping(address => uint256)) -> allowed[msg.sender]
REF_20(uint256) -> REF_19[spender]
REF_20(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApproveAndCallFallBack(spender).receiveApproval(msg.sender,tokens,this,data)

IRs:
TMP_61 = CONVERT spender to ApproveAndCallFallBack
HIGH_LEVEL_CALL, dest:TMP_61(ApproveAndCallFallBack), function:receiveApproval, arguments:['msg.sender', 'tokens', 'this', 'data']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 7919.sol-YetAnotherUselessToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[tokenOwner]

IRs:
REF_2(uint256) -> balances[tokenOwner]
RETURN REF_2"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 7919.sol-YetAnotherUselessToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = YUC

IRs:
symbol(string) := YUC(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = YetAnotherUselessToken

IRs:
name(string) := YetAnotherUselessToken(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 10

IRs:
decimals(uint256) := 10(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = 10000000

IRs:
_totalSupply(uint256) := 10000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[owner] = _totalSupply * (10 ** decimals)

IRs:
REF_0(uint256) -> balances[owner]
TMP_42(uint256) = 10 ** decimals
TMP_43(uint256) = _totalSupply * TMP_42
REF_0(uint256) (->balances) := TMP_43(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
purchasingAllowed = false

IRs:
purchasingAllowed(bool) := False(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
totalContribution = 0

IRs:
totalContribution(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalIssued = 0

IRs:
totalIssued(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalBonusTokensIssued = 0

IRs:
totalBonusTokensIssued(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(address(0),owner,_totalSupply * (10 ** decimals))

IRs:
TMP_44 = CONVERT 0 to address
TMP_45(uint256) = 10 ** decimals
TMP_46(uint256) = _totalSupply * TMP_45
Emit Transfer(TMP_44,owner,TMP_46)"];
}
// Function: 7919.sol-YetAnotherUselessToken-disablePurchasing()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
purchasingAllowed = false

IRs:
purchasingAllowed(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 7919.sol-YetAnotherUselessToken-enablePurchasing()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
purchasingAllowed = true

IRs:
purchasingAllowed(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 7919.sol-YetAnotherUselessToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! purchasingAllowed

IRs:
TMP_68 = UnaryType.BANG purchasingAllowed 
CONDITION TMP_68"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_69(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.value == 0

IRs:
TMP_70(bool) = msg.value == 0
CONDITION TMP_70"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
owner.transfer(msg.value)

IRs:
Transfer dest:owner value:msg.value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalContribution += msg.value

IRs:
totalContribution(uint256) = totalContribution + msg.value"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
tokensIssued = (msg.value * 100)

IRs:
TMP_72(uint256) = msg.value * 100
tokensIssued(uint256) := TMP_72(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
msg.value >= 10000000000000000

IRs:
TMP_73(bool) = msg.value >= 10000000000000000
CONDITION TMP_73"];
10->11[label="True"];
10->18[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bonusHash = ripemd160()(block.coinbase,block.number,block.timestamp)

IRs:
TMP_74(bytes32) = SOLIDITY_CALL ripemd160()(block.coinbase,block.number,block.timestamp)
bonusHash(bytes20) := TMP_74(bytes32)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
bonusHash[0] == 0

IRs:
REF_24(None) -> bonusHash[0]
TMP_75(bool) = REF_24 == 0
CONDITION TMP_75"];
12->23[label="True"];
12->17[label="False"];
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
bonusTokensIssued = (msg.value * 100) * bonusMultiplier

IRs:
TMP_76(uint256) = msg.value * 100
TMP_77(uint256) = TMP_76 * bonusMultiplier
bonusTokensIssued(uint256) := TMP_77(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
tokensIssued += bonusTokensIssued

IRs:
tokensIssued(uint256) = tokensIssued + bonusTokensIssued"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
totalBonusTokensIssued += bonusTokensIssued

IRs:
totalBonusTokensIssued(uint256) = totalBonusTokensIssued + bonusTokensIssued"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
totalIssued += tokensIssued

IRs:
totalIssued(uint256) = totalIssued + tokensIssued"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
balances[msg.sender] += tokensIssued * (10 ** decimals)

IRs:
REF_25(uint256) -> balances[msg.sender]
TMP_78(uint256) = 10 ** decimals
TMP_79(uint256) = tokensIssued * TMP_78
REF_25(-> balances) = REF_25 + TMP_79"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
balances[owner] -= tokensIssued * (10 ** decimals)

IRs:
REF_26(uint256) -> balances[owner]
TMP_80(uint256) = 10 ** decimals
TMP_81(uint256) = tokensIssued * TMP_80
REF_26(-> balances) = REF_26 - TMP_81"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Transfer(owner,msg.sender,tokensIssued * (10 ** decimals))

IRs:
TMP_82(uint256) = 10 ** decimals
TMP_83(uint256) = tokensIssued * TMP_82
Emit Transfer(owner,msg.sender,TMP_83)"];
23[label="Node Type: IF 23

EXPRESSION:
(bonusHash[1] & 0x80 != 0)

IRs:
REF_27(None) -> bonusHash[1]
TMP_85(None) = REF_27 & 128
TMP_86(bool) = TMP_85 != 0
CONDITION TMP_86"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
bonusMultiplier = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1

IRs:
TMP_87(uint256) = 1 + 1
TMP_88(uint256) = TMP_87 + 1
TMP_89(uint256) = TMP_88 + 1
TMP_90(uint256) = TMP_89 + 1
TMP_91(uint256) = TMP_90 + 1
TMP_92(uint256) = TMP_91 + 1
TMP_93(uint256) = TMP_92 + 1
bonusMultiplier(uint256) := TMP_93(uint256)"];
24->26;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
bonusMultiplier = 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0

IRs:
TMP_94(uint256) = 0 + 0
TMP_95(uint256) = TMP_94 + 0
TMP_96(uint256) = TMP_95 + 0
TMP_97(uint256) = TMP_96 + 0
TMP_98(uint256) = TMP_97 + 0
TMP_99(uint256) = TMP_98 + 0
TMP_100(uint256) = TMP_99 + 0
bonusMultiplier(uint256) := TMP_100(uint256)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->14;
}
// Function: 7919.sol-YetAnotherUselessToken-getStats()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(totalContribution,totalIssued,totalBonusTokensIssued,purchasingAllowed)

IRs:
RETURN totalContribution,totalIssued,totalBonusTokensIssued,purchasingAllowed"];
}
// Function: 7919.sol-YetAnotherUselessToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_101(bool) = msg.sender == owner
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 7919.sol-YetAnotherUselessToken-purchasingAllowed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
purchasingAllowed

IRs:
RETURN purchasingAllowed"];
}
// Function: 7919.sol-YetAnotherUselessToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_22(uint256) = a + b
c(uint256) := TMP_22(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_23(bool) = c >= a
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7919.sol-YetAnotherUselessToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_34(bool) = b > 0
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a / b

IRs:
TMP_36(uint256) = a / b
c(uint256) := TMP_36(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7919.sol-YetAnotherUselessToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a * b

IRs:
TMP_28(uint256) = a * b
c(uint256) := TMP_28(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(a == 0 || c / a == b)

IRs:
TMP_29(bool) = a == 0
TMP_30(uint256) = c / a
TMP_31(bool) = TMP_30 == b
TMP_32(bool) = TMP_29 || TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7919.sol-YetAnotherUselessToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_25(bool) = b <= a
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c = a - b

IRs:
TMP_27(uint256) = a - b
c(uint256) := TMP_27(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 7919.sol-YetAnotherUselessToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply * (10 ** decimals) - balances[address(0)]

IRs:
TMP_48(uint256) = 10 ** decimals
TMP_49(uint256) = _totalSupply * TMP_48
TMP_50 = CONVERT 0 to address
REF_1(uint256) -> balances[TMP_50]
TMP_51(uint256) = TMP_49 - REF_1
RETURN TMP_51"];
}
// Function: 7919.sol-YetAnotherUselessToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],tokens)

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_4(uint256) -> balances[msg.sender]
TMP_52(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_4,tokens)
REF_3(uint256) (->balances) := TMP_52(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_5(uint256) -> balances[to]
REF_6(uint256) -> balances[to]
TMP_53(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_6,tokens)
REF_5(uint256) (->balances) := TMP_53(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 7919.sol-YetAnotherUselessToken-transferAnyERC20Token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20Interface(tokenAddress).transfer(owner,tokens)

IRs:
TMP_63 = CONVERT tokenAddress to ERC20Interface
TMP_64(bool) = HIGH_LEVEL_CALL, dest:TMP_63(ERC20Interface), function:transfer, arguments:['owner', 'tokens']  
RETURN TMP_64"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 7919.sol-YetAnotherUselessToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = safeSub(balances[from],tokens)

IRs:
REF_9(uint256) -> balances[from]
REF_10(uint256) -> balances[from]
TMP_56(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_10,tokens)
REF_9(uint256) (->balances) := TMP_56(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[from][msg.sender] = safeSub(allowed[from][msg.sender],tokens)

IRs:
REF_11(mapping(address => uint256)) -> allowed[from]
REF_12(uint256) -> REF_11[msg.sender]
REF_13(mapping(address => uint256)) -> allowed[from]
REF_14(uint256) -> REF_13[msg.sender]
TMP_57(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_14,tokens)
REF_12(uint256) (->allowed) := TMP_57(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_15(uint256) -> balances[to]
REF_16(uint256) -> balances[to]
TMP_58(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_16,tokens)
REF_15(uint256) (->balances) := TMP_58(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from,to,tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 7919.sol-YetAnotherUselessToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
}
