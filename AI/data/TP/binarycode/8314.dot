digraph G {
// Function: 8314.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8314.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8314.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8314.sol-TokenContract-balanceOf(address)
digraph{
}
// Function: 8314.sol-TokenContract-transfer(address,uint256)
digraph{
}
// Function: 8314.sol-Vault-addMembers(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_member.length > 0)

IRs:
REF_8 -> LENGTH _member
TMP_24(bool) = REF_8 > 0
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_member.length == _tokens.length)

IRs:
REF_9 -> LENGTH _member
REF_10 -> LENGTH _tokens
TMP_26(bool) = REF_9 == REF_10
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < _member.length

IRs:
REF_11 -> LENGTH _member
TMP_28(bool) = i < REF_11
CONDITION TMP_28"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
member.memberAddress = _member[i]

IRs:
REF_12(address) -> member.memberAddress
REF_13(address) -> _member[i]
REF_12(address) (->member) := REF_13(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
member.tokens = _tokens[i]

IRs:
REF_14(uint256) -> member.tokens
REF_15(uint256) -> _tokens[i]
REF_14(uint256) (->member) := REF_15(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
team.push(member)

IRs:
REF_17 -> LENGTH team
TMP_30(uint256) := REF_17(uint256)
TMP_31(uint256) = TMP_30 + 1
REF_17(uint256) (->team) := TMP_31(uint256)
REF_18(Vault.Member) -> team[TMP_30]
REF_18(Vault.Member) (->team) := member(Vault.Member)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_32(uint256) := i(uint256)
i(uint256) = i + 1"];
11->7;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
12->1;
}
// Function: 8314.sol-Vault-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseDate = 1561426200

IRs:
releaseDate(uint256) := 1561426200(uint256)"];
}
// Function: 8314.sol-Vault-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_34(bool) = msg.sender == owner
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8314.sol-Vault-releaseTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(releaseDate > block.timestamp)

IRs:
TMP_12(bool) = releaseDate > block.timestamp
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->9;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < team.length

IRs:
REF_0 -> LENGTH team
TMP_14(bool) = i < REF_0
CONDITION TMP_14"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(tkn.transfer(team[i].memberAddress,team[i].tokens))

IRs:
REF_2(Vault.Member) -> team[i]
REF_3(address) -> REF_2.memberAddress
REF_4(Vault.Member) -> team[i]
REF_5(uint256) -> REF_4.tokens
TMP_15(bool) = HIGH_LEVEL_CALL, dest:tkn(TokenContract), function:transfer, arguments:['REF_3', 'REF_5']  
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_17(uint256) := i(uint256)
i(uint256) = i + 1"];
8->6;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
amount = tkn.balanceOf(address(this))

IRs:
TMP_18 = CONVERT this to address
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:tkn(TokenContract), function:balanceOf, arguments:['TMP_18']  
amount(uint256) := TMP_19(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(tkn.transfer(owner,amount))

IRs:
TMP_20(bool) = HIGH_LEVEL_CALL, dest:tkn(TokenContract), function:transfer, arguments:['owner', 'amount']  
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_22(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
12->1;
}
// Function: 8314.sol-Vault-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_7 = CONVERT 0 to address
TMP_8(bool) = newOwner != TMP_7
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
}
