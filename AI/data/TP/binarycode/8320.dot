digraph G {
// Function: 8320.sol-ESSENTIA_PE-EMGwithdraw(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp > pubEnd)

IRs:
TMP_59(bool) = block.timestamp > pubEnd
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(weiValue > 0)

IRs:
TMP_61(bool) = weiValue > 0
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
FWDaddrETH.transfer(weiValue)

IRs:
Transfer dest:FWDaddrETH value:weiValue"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8320.sol-ESSENTIA_PE-buy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp < pubEnd)

IRs:
TMP_31(bool) = block.timestamp < pubEnd
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_33(bool) = msg.value > 0
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value + totalSold <= maxCap)

IRs:
TMP_35(uint256) = msg.value + totalSold
TMP_36(bool) = TMP_35 <= maxCap
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokenAmount = (msg.value * tokenUnit) / tokenPrice

IRs:
TMP_38(uint256) = msg.value * tokenUnit
TMP_39(uint256) = TMP_38 / tokenPrice
tokenAmount(uint256) := TMP_39(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(tokenAmount <= essToken.balanceOf(this))

IRs:
TMP_40(uint256) = HIGH_LEVEL_CALL, dest:essToken(TokenCHK), function:balanceOf, arguments:['this']  
TMP_41(bool) = tokenAmount <= TMP_40
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
transferBuy(msg.sender,tokenAmount)

IRs:
TMP_43(bool) = INTERNAL_CALL, ESSENTIA_PE.transferBuy(address,uint256)(msg.sender,tokenAmount)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
totalSold = totalSold.add(msg.value)

IRs:
TMP_44(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSold', 'msg.value'] 
totalSold(uint256) := TMP_44(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
FWDaddrETH.transfer(msg.value)

IRs:
Transfer dest:FWDaddrETH value:msg.value"];
}
// Function: 8320.sol-ESSENTIA_PE-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8320.sol-ESSENTIA_PE-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
FWDaddrETH = toETHaddr

IRs:
FWDaddrETH(address) := toETHaddr(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ESSgenesis = addrESSgenesis

IRs:
ESSgenesis(address) := addrESSgenesis(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
essToken = TokenCHK(addrESSgenesis)

IRs:
TMP_24 = CONVERT addrESSgenesis to TokenCHK
essToken(TokenCHK) := TMP_24(TokenCHK)"];
}
// Function: 8320.sol-ESSENTIA_PE-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buy()

IRs:
INTERNAL_CALL, ESSENTIA_PE.buy()()"];
}
// Function: 8320.sol-ESSENTIA_PE-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_67(bool) = msg.sender == owner
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8320.sol-ESSENTIA_PE-setFWDaddrETH(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
FWDaddrETH = _value

IRs:
FWDaddrETH(address) := _value(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8320.sol-ESSENTIA_PE-setGenesis(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ESSgenesis = _value

IRs:
ESSgenesis(address) := _value(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8320.sol-ESSENTIA_PE-setMaxCap(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
maxCap = _value

IRs:
maxCap(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8320.sol-ESSENTIA_PE-setPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenPrice = _value

IRs:
tokenPrice(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8320.sol-ESSENTIA_PE-setPubEnd(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pubEnd = _value

IRs:
pubEnd(uint256) := _value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8320.sol-ESSENTIA_PE-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = ESSENTIA Public Engagement

IRs:
name(string) := ESSENTIA Public Engagement(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
tokenPrice = 0

IRs:
tokenPrice(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
maxCap = 0

IRs:
maxCap(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
pubEnd = 0

IRs:
pubEnd(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
contractAddr = this

IRs:
contractAddr(address) := this(address)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
tokenUnit = uint256(10) ** decimals

IRs:
TMP_65 = CONVERT 10 to uint256
TMP_66(uint256) = TMP_65 ** decimals
tokenUnit(uint256) := TMP_66(uint256)"];
}
// Function: 8320.sol-ESSENTIA_PE-transferBuy(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_55 = CONVERT 0 to address
TMP_56(bool) = _to != TMP_55
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sold[_to] = sold[_to].add(_value)

IRs:
REF_7(uint256) -> sold[_to]
REF_8(uint256) -> sold[_to]
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', '_value'] 
REF_7(uint256) (->sold) := TMP_58(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8320.sol-ESSENTIA_PE-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = newOwner != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8320.sol-ESSENTIA_PE-withdrawPUB()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp > pubEnd)

IRs:
TMP_46(bool) = block.timestamp > pubEnd
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(sold[msg.sender] > 0)

IRs:
REF_3(uint256) -> sold[msg.sender]
TMP_48(bool) = REF_3 > 0
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! ESSgenesis.call(bytes4(keccak256()(transfer(address,uint256))),msg.sender,sold[msg.sender])

IRs:
TMP_50(bytes32) = SOLIDITY_CALL keccak256()(transfer(address,uint256))
TMP_51 = CONVERT TMP_50 to bytes4
REF_5(uint256) -> sold[msg.sender]
TMP_52(bool) = LOW_LEVEL_CALL, dest:ESSgenesis, function:call, arguments:['TMP_51', 'msg.sender', 'REF_5']  
TMP_53 = UnaryType.BANG TMP_52 
CONDITION TMP_53"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_54(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
delete sold[msg.sender]

IRs:
REF_6(uint256) -> sold[msg.sender]
sold = delete REF_6 "];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8320.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8320.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8320.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8320.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 8320.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 8320.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 8320.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 8320.sol-TokenCHK-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balance

IRs:
RETURN balance"];
}
}
