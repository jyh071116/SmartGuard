digraph G {
// Function: 8497.sol-CryptoQuantumTradingFund-CryptoQuantumTradingFund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[creatorsAddress] = creatorsLocked

IRs:
REF_21(uint256) -> balances[creatorsAddress]
REF_21(uint256) (->balances) := creatorsLocked(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[owner] = _totalBalance

IRs:
REF_22(uint256) -> balances[owner]
REF_22(uint256) (->balances) := _totalBalance(uint256)"];
}
// Function: 8497.sol-CryptoQuantumTradingFund-Save()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_30(bool) = msg.sender != owner
CONDITION TMP_30"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_31(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_32 = CONVERT this to address
TMP_33(uint256) = SOLIDITY_CALL balance(address)(TMP_32)
Transfer dest:owner value:TMP_33"];
}
// Function: 8497.sol-CryptoQuantumTradingFund-TryUnLockCreatorBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: BEGIN_LOOP 1
"];
1->2;
2[label="Node Type: IF_LOOP 2

EXPRESSION:
unLockIdx > 0 && block.timestamp >= nextUnLockTime

IRs:
TMP_25(bool) = unLockIdx > 0
TMP_26(bool) = block.timestamp >= nextUnLockTime
TMP_27(bool) = TMP_25 && TMP_26
CONDITION TMP_27"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
append = creatorsLocked / unLockIdx

IRs:
TMP_28(uint256) = creatorsLocked / unLockIdx
append(uint256) := TMP_28(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
creatorsLocked -= append

IRs:
creatorsLocked(uint256) = creatorsLocked - append"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
unLockIdx -= 1

IRs:
unLockIdx(uint256) = unLockIdx - 1"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
nextUnLockTime = block.timestamp + ONE_YEAR_TIME_LEN

IRs:
TMP_29(uint256) = block.timestamp + ONE_YEAR_TIME_LEN
nextUnLockTime(uint256) := TMP_29(uint256)"];
6->2;
7[label="Node Type: END_LOOP 7
"];
}
// Function: 8497.sol-CryptoQuantumTradingFund-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[tokenOwner][spender]

IRs:
REF_19(mapping(address => uint256)) -> allowed[tokenOwner]
REF_20(uint256) -> REF_19[spender]
RETURN REF_20"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 8497.sol-CryptoQuantumTradingFund-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_17(mapping(address => uint256)) -> allowed[msg.sender]
REF_18(uint256) -> REF_17[spender]
REF_18(uint256) (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 8497.sol-CryptoQuantumTradingFund-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[tokenOwner]

IRs:
REF_0(uint256) -> balances[tokenOwner]
RETURN REF_0"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 8497.sol-CryptoQuantumTradingFund-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_35(bool) = msg.sender != owner
CONDITION TMP_35"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_36(None) = SOLIDITY_CALL revert()()"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 8497.sol-CryptoQuantumTradingFund-destruct()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_37(bool) = msg.sender != owner
CONDITION TMP_37"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_38(None) = SOLIDITY_CALL revert()()"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_39(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 8497.sol-CryptoQuantumTradingFund-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 8497.sol-CryptoQuantumTradingFund-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ONE_DAY_TIME_LEN = 86400

IRs:
ONE_DAY_TIME_LEN(uint256) := 86400(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ONE_YEAR_TIME_LEN = 946080000

IRs:
ONE_YEAR_TIME_LEN(uint256) := 946080000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
MAX_UINT32 = 0xFFFFFFFF

IRs:
MAX_UINT32(uint32) := 4294967295(uint256)"];
}
// Function: 8497.sol-CryptoQuantumTradingFund-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = CryptoQuantumTradingFund

IRs:
name(string) := CryptoQuantumTradingFund(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = CQTF

IRs:
symbol(string) := CQTF(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
fixTotalBalance = 100000000000000000000000000

IRs:
fixTotalBalance(uint256) := 100000000000000000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
_totalBalance = 92000000000000000000000000

IRs:
_totalBalance(uint256) := 92000000000000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
creatorsLocked = 8000000000000000000000000

IRs:
creatorsLocked(uint256) := 8000000000000000000000000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
owner = 0x0

IRs:
owner(address) := 0(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
creatorsAddress = 0xbcabf04377034e4eC3C20ACaD2CA093559Ee9742

IRs:
creatorsAddress(address) := 1077124622249568069932416412423236170854121248578(address)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
unLockIdx = 2

IRs:
unLockIdx(uint256) := 2(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
nextUnLockTime = block.timestamp + ONE_YEAR_TIME_LEN

IRs:
TMP_40(uint256) = block.timestamp + ONE_YEAR_TIME_LEN
nextUnLockTime(uint256) := TMP_40(uint256)"];
}
// Function: 8497.sol-CryptoQuantumTradingFund-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
fixTotalBalance

IRs:
RETURN fixTotalBalance"];
}
// Function: 8497.sol-CryptoQuantumTradingFund-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= tokens && tokens > 0 && balances[to] + tokens > balances[to]

IRs:
REF_1(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_1 >= tokens
TMP_1(bool) = tokens > 0
TMP_2(bool) = TMP_0 && TMP_1
REF_2(uint256) -> balances[to]
TMP_3(uint256) = REF_2 + tokens
REF_3(uint256) -> balances[to]
TMP_4(bool) = TMP_3 > REF_3
TMP_5(bool) = TMP_2 && TMP_4
CONDITION TMP_5"];
1->2[label="True"];
1->12[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
msg.sender == creatorsAddress

IRs:
TMP_6(bool) = msg.sender == creatorsAddress
CONDITION TMP_6"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
TryUnLockCreatorBalance()

IRs:
INTERNAL_CALL, CryptoQuantumTradingFund.TryUnLockCreatorBalance()()"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
balances[msg.sender] < (creatorsLocked + tokens)

IRs:
REF_4(uint256) -> balances[msg.sender]
TMP_8(uint256) = creatorsLocked + tokens
TMP_9(bool) = REF_4 < TMP_8
CONDITION TMP_9"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] -= tokens

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = REF_5 - tokens"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[to] += tokens

IRs:
REF_6(uint256) -> balances[to]
REF_6(-> balances) = REF_6 + tokens"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: RETURN 12

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: RETURN 14

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 8497.sol-CryptoQuantumTradingFund-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[from] >= tokens && allowed[from][msg.sender] >= tokens && tokens > 0 && balances[to] + tokens > balances[to]

IRs:
REF_7(uint256) -> balances[from]
TMP_11(bool) = REF_7 >= tokens
REF_8(mapping(address => uint256)) -> allowed[from]
REF_9(uint256) -> REF_8[msg.sender]
TMP_12(bool) = REF_9 >= tokens
TMP_13(bool) = TMP_11 && TMP_12
TMP_14(bool) = tokens > 0
TMP_15(bool) = TMP_13 && TMP_14
REF_10(uint256) -> balances[to]
TMP_16(uint256) = REF_10 + tokens
REF_11(uint256) -> balances[to]
TMP_17(bool) = TMP_16 > REF_11
TMP_18(bool) = TMP_15 && TMP_17
CONDITION TMP_18"];
1->2[label="True"];
1->13[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
from == creatorsAddress

IRs:
TMP_19(bool) = from == creatorsAddress
CONDITION TMP_19"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
TryUnLockCreatorBalance()

IRs:
INTERNAL_CALL, CryptoQuantumTradingFund.TryUnLockCreatorBalance()()"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
balances[from] < (creatorsLocked + tokens)

IRs:
REF_12(uint256) -> balances[from]
TMP_21(uint256) = creatorsLocked + tokens
TMP_22(bool) = REF_12 < TMP_21
CONDITION TMP_22"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[from] -= tokens

IRs:
REF_13(uint256) -> balances[from]
REF_13(-> balances) = REF_13 - tokens"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
allowed[from][msg.sender] -= tokens

IRs:
REF_14(mapping(address => uint256)) -> allowed[from]
REF_15(uint256) -> REF_14[msg.sender]
REF_15(-> allowed) = REF_15 - tokens"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[to] += tokens

IRs:
REF_16(uint256) -> balances[to]
REF_16(-> balances) = REF_16 + tokens"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from,to,tokens)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
true

IRs:
RETURN True"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
15[label="Node Type: RETURN 15

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 8497.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 8497.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 8497.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 8497.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 8497.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 8497.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
}
