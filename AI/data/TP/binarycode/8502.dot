digraph G {
// Function: 8502.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 8502.sol-Lottery-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
poohContract = POOH(0x4C29d75cc423E8Adaa3839892feb66977e295829)

IRs:
TMP_0 = CONVERT 434816389843919781411962377363169052084140595241 to POOH
poohContract(POOH) := TMP_0(POOH)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
openToPublic = false

IRs:
openToPublic(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8502.sol-Lottery-deposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= 1000000000000000)

IRs:
TMP_1(bool) = msg.value >= 1000000000000000
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
customerAddress = msg.sender

IRs:
customerAddress(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
poohContract.buy.value(msg.value)(customerAddress)

IRs:
TMP_4(uint256) = HIGH_LEVEL_CALL, dest:poohContract(POOH), function:buy, arguments:['customerAddress'] value:msg.value "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Deposit(msg.value,msg.sender)

IRs:
Emit Deposit(msg.value,msg.sender)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
msg.value > 1000000000000000

IRs:
TMP_6(bool) = msg.value > 1000000000000000
CONDITION TMP_6"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
extraTickets = SafeMath.div(msg.value,1000000000000000)

IRs:
TMP_7(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['msg.value', '1000000000000000'] 
extraTickets(uint256) := TMP_7(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ticketNumber += extraTickets

IRs:
ticketNumber(uint256) = ticketNumber + extraTickets"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
ticketNumber >= winningNumber

IRs:
TMP_8(bool) = ticketNumber >= winningNumber
CONDITION TMP_8"];
9->10[label="True"];
9->15[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
poohContract.exit()

IRs:
HIGH_LEVEL_CALL, dest:poohContract(POOH), function:exit, arguments:[]  "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
payDev(owner)

IRs:
INTERNAL_CALL, Lottery.payDev(address)(owner)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
payWinner(customerAddress)

IRs:
INTERNAL_CALL, Lottery.payWinner(address)(customerAddress)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
poohContract.buy.value(address(this).balance)(customerAddress)

IRs:
TMP_12 = CONVERT this to address
TMP_13(uint256) = SOLIDITY_CALL balance(address)(TMP_12)
TMP_15(uint256) = HIGH_LEVEL_CALL, dest:poohContract(POOH), function:buy, arguments:['customerAddress'] value:TMP_13 "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
resetLottery()

IRs:
INTERNAL_CALL, Lottery.resetLottery()()"];
14->16;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
ticketNumber ++

IRs:
TMP_17(uint256) := ticketNumber(uint256)
ticketNumber(uint256) = ticketNumber + 1"];
15->16;
16[label="Node Type: END_IF 16
"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
isOpenToPublic()

IRs:
MODIFIER_CALL, Lottery.isOpenToPublic()()"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
onlyHuman()

IRs:
MODIFIER_CALL, Lottery.onlyHuman()()"];
18->1;
}
// Function: 8502.sol-Lottery-ethBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
address(this).balance

IRs:
TMP_22 = CONVERT this to address
TMP_23(uint256) = SOLIDITY_CALL balance(address)(TMP_22)
RETURN TMP_23"];
}
// Function: 8502.sol-Lottery-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 8502.sol-Lottery-isOpenToPublic()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(openToPublic)

IRs:
TMP_48(None) = SOLIDITY_CALL require(bool)(openToPublic)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8502.sol-Lottery-myDividends()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
poohContract.myDividends(true)

IRs:
TMP_21(uint256) = HIGH_LEVEL_CALL, dest:poohContract(POOH), function:myDividends, arguments:['True']  
RETURN TMP_21"];
}
// Function: 8502.sol-Lottery-myTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
poohContract.myTokens()

IRs:
TMP_20(uint256) = HIGH_LEVEL_CALL, dest:poohContract(POOH), function:myTokens, arguments:[]  
RETURN TMP_20"];
}
// Function: 8502.sol-Lottery-notPooh(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(aContract != address(poohContract))

IRs:
TMP_45 = CONVERT poohContract to address
TMP_46(bool) = aContract != TMP_45
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8502.sol-Lottery-onlyHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == tx.origin)

IRs:
TMP_49(bool) = msg.sender == tx.origin
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8502.sol-Lottery-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_43(bool) = msg.sender == owner
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8502.sol-Lottery-openToThePublic()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
openToPublic = true

IRs:
openToPublic(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
resetLottery()

IRs:
INTERNAL_CALL, Lottery.resetLottery()()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Lottery.onlyOwner()()"];
3->1;
}
// Function: 8502.sol-Lottery-payDev(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balance = SafeMath.div(address(this).balance,10)

IRs:
TMP_35 = CONVERT this to address
TMP_36(uint256) = SOLIDITY_CALL balance(address)(TMP_35)
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_36', '10'] 
balance(uint256) := TMP_37(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dev.transfer(balance)

IRs:
Transfer dest:dev value:balance"];
}
// Function: 8502.sol-Lottery-payWinner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balance = SafeMath.sub(address(this).balance,50000000000000000)

IRs:
TMP_30 = CONVERT this to address
TMP_31(uint256) = SOLIDITY_CALL balance(address)(TMP_30)
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_31', '50000000000000000'] 
balance(uint256) := TMP_32(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
winner.transfer(balance)

IRs:
Transfer dest:winner value:balance"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
WinnerPaid(balance,winner)

IRs:
Emit WinnerPaid(balance,winner)"];
}
// Function: 8502.sol-Lottery-resetLottery()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ticketNumber = 1

IRs:
ticketNumber(uint256) := 1(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
winningNumber = uint256(keccak256()(block.timestamp,block.difficulty)) % 300

IRs:
TMP_39(bytes32) = SOLIDITY_CALL keccak256()(block.timestamp,block.difficulty)
TMP_40 = CONVERT TMP_39 to uint256
TMP_41(uint256) = TMP_40 % 300
winningNumber(uint256) := TMP_41(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
isOpenToPublic()

IRs:
MODIFIER_CALL, Lottery.isOpenToPublic()()"];
3->1;
}
// Function: 8502.sol-Lottery-returnAnyERC20Token(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20Interface(tokenAddress).transfer(tokenOwner,tokens)

IRs:
TMP_26 = CONVERT tokenAddress to ERC20Interface
TMP_27(bool) = HIGH_LEVEL_CALL, dest:TMP_26(ERC20Interface), function:transfer, arguments:['tokenOwner', 'tokens']  
RETURN TMP_27"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Lottery.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
notPooh(tokenAddress)

IRs:
MODIFIER_CALL, Lottery.notPooh(address)(tokenAddress)"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 8502.sol-Lottery-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
openToPublic = false

IRs:
openToPublic(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ticketNumber = 0

IRs:
ticketNumber(uint256) := 0(uint256)"];
}
// Function: 8502.sol-POOH-buy(address)
digraph{
}
// Function: 8502.sol-POOH-exit()
digraph{
}
// Function: 8502.sol-POOH-myDividends(bool)
digraph{
}
// Function: 8502.sol-POOH-myTokens()
digraph{
}
// Function: 8502.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_51(uint256) = a / b
c(uint256) := TMP_51(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 8502.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_52(bool) = b <= a
TMP_53(None) = SOLIDITY_CALL assert(bool)(TMP_52)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_54(uint256) = a - b
RETURN TMP_54"];
}
}
