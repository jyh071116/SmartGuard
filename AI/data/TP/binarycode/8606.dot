digraph G {
// Function: 8606.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_35(uint256) -> balances[_owner]
RETURN REF_35"];
}
// Function: 8606.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 8606.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_118 = CONVERT 0 to address
TMP_119(bool) = _to != TMP_118
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_28(uint256) -> balances[msg.sender]
TMP_121(bool) = _value <= REF_28
TMP_122(None) = SOLIDITY_CALL require(bool)(TMP_121)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_29(uint256) -> balances[msg.sender]
REF_30(uint256) -> balances[msg.sender]
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_30', '_value'] 
REF_29(uint256) (->balances) := TMP_123(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_32(uint256) -> balances[_to]
REF_33(uint256) -> balances[_to]
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_33', '_value'] 
REF_32(uint256) (->balances) := TMP_124(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8606.sol-BurnableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_86(uint256) -> balances[_who]
TMP_160(bool) = _value <= REF_86
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_87(uint256) -> balances[_who]
REF_88(uint256) -> balances[_who]
TMP_162(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_88', '_value'] 
REF_87(uint256) (->balances) := TMP_162(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_163(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_165 = CONVERT 0 to address
Emit Transfer(_who,TMP_165,_value)"];
}
// Function: 8606.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 8606.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8606.sol-BurnableToken-totalSupply()
digraph{
}
// Function: 8606.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 8606.sol-Claimable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8606.sol-Claimable-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_176 = CONVERT 0 to address
pendingOwner(address) := TMP_176(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 8606.sol-Claimable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_178(bool) = msg.sender == owner
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8606.sol-Claimable-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_180(bool) = msg.sender == pendingOwner
TMP_181(None) = SOLIDITY_CALL require(bool)(TMP_180)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8606.sol-Claimable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pendingOwner = newOwner

IRs:
pendingOwner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8606.sol-DateTime-getDay(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseTimestamp(timestamp).day

IRs:
TMP_77(DateTime._DateTime) = INTERNAL_CALL, DateTime.parseTimestamp(uint256)(timestamp)
REF_13(uint8) -> TMP_77.day
RETURN REF_13"];
}
// Function: 8606.sol-DateTime-getDaysInMonth(uint8,uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12

IRs:
TMP_18(bool) = month == 1
TMP_19(bool) = month == 3
TMP_20(bool) = TMP_18 || TMP_19
TMP_21(bool) = month == 5
TMP_22(bool) = TMP_20 || TMP_21
TMP_23(bool) = month == 7
TMP_24(bool) = TMP_22 || TMP_23
TMP_25(bool) = month == 8
TMP_26(bool) = TMP_24 || TMP_25
TMP_27(bool) = month == 10
TMP_28(bool) = TMP_26 || TMP_27
TMP_29(bool) = month == 12
TMP_30(bool) = TMP_28 || TMP_29
CONDITION TMP_30"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
31

IRs:
RETURN 31"];
3[label="Node Type: IF 3

EXPRESSION:
month == 4 || month == 6 || month == 9 || month == 11

IRs:
TMP_31(bool) = month == 4
TMP_32(bool) = month == 6
TMP_33(bool) = TMP_31 || TMP_32
TMP_34(bool) = month == 9
TMP_35(bool) = TMP_33 || TMP_34
TMP_36(bool) = month == 11
TMP_37(bool) = TMP_35 || TMP_36
CONDITION TMP_37"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
30

IRs:
RETURN 30"];
5[label="Node Type: IF 5

EXPRESSION:
isLeapYear(year)

IRs:
TMP_38(bool) = INTERNAL_CALL, DateTime.isLeapYear(uint16)(year)
CONDITION TMP_38"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
29

IRs:
RETURN 29"];
7[label="Node Type: RETURN 7

EXPRESSION:
28

IRs:
RETURN 28"];
}
// Function: 8606.sol-DateTime-getHour(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint8((timestamp / 60 / 60) % 24)

IRs:
TMP_78(uint256) = timestamp / 60
TMP_79(uint256) = TMP_78 / 60
TMP_80(uint256) = TMP_79 % 24
TMP_81 = CONVERT TMP_80 to uint8
RETURN TMP_81"];
}
// Function: 8606.sol-DateTime-getMinute(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint8((timestamp / 60) % 60)

IRs:
TMP_82(uint256) = timestamp / 60
TMP_83(uint256) = TMP_82 % 60
TMP_84 = CONVERT TMP_83 to uint8
RETURN TMP_84"];
}
// Function: 8606.sol-DateTime-getMonth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseTimestamp(timestamp).month

IRs:
TMP_76(DateTime._DateTime) = INTERNAL_CALL, DateTime.parseTimestamp(uint256)(timestamp)
REF_12(uint8) -> TMP_76.month
RETURN REF_12"];
}
// Function: 8606.sol-DateTime-getSecond(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint8(timestamp % 60)

IRs:
TMP_85(uint256) = timestamp % 60
TMP_86 = CONVERT TMP_85 to uint8
RETURN TMP_86"];
}
// Function: 8606.sol-DateTime-getWeekday(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint8((timestamp / DAY_IN_SECONDS + 4) % 7)

IRs:
TMP_87(uint256) = timestamp / DAY_IN_SECONDS
TMP_88(uint256) = TMP_87 + 4
TMP_89(uint256) = TMP_88 % 7
TMP_90 = CONVERT TMP_89 to uint8
RETURN TMP_90"];
}
// Function: 8606.sol-DateTime-getYear(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
secondsAccountedFor = 0

IRs:
secondsAccountedFor(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS)

IRs:
TMP_62(uint256) = timestamp / YEAR_IN_SECONDS
TMP_63(uint16) = ORIGIN_YEAR + TMP_62
TMP_64 = CONVERT TMP_63 to uint16
year(uint16) := TMP_64(uint16)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR)

IRs:
TMP_65(uint256) = INTERNAL_CALL, DateTime.leapYearsBefore(uint256)(year)
TMP_66(uint256) = INTERNAL_CALL, DateTime.leapYearsBefore(uint256)(ORIGIN_YEAR)
TMP_67(uint256) = TMP_65 - TMP_66
numLeapYears(uint256) := TMP_67(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears

IRs:
TMP_68(uint256) = LEAP_YEAR_IN_SECONDS * numLeapYears
secondsAccountedFor(uint256) = secondsAccountedFor + TMP_68"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears)

IRs:
TMP_69(uint16) = year - ORIGIN_YEAR
TMP_70(uint16) = TMP_69 - numLeapYears
TMP_71(uint256) = YEAR_IN_SECONDS * TMP_70
secondsAccountedFor(uint256) = secondsAccountedFor + TMP_71"];
7->8;
8[label="Node Type: BEGIN_LOOP 8
"];
8->9;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
secondsAccountedFor > timestamp

IRs:
TMP_72(bool) = secondsAccountedFor > timestamp
CONDITION TMP_72"];
9->10[label="True"];
9->15[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
isLeapYear(uint16(year - 1))

IRs:
TMP_73(uint16) = year - 1
TMP_74 = CONVERT TMP_73 to uint16
TMP_75(bool) = INTERNAL_CALL, DateTime.isLeapYear(uint16)(TMP_74)
CONDITION TMP_75"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
secondsAccountedFor -= LEAP_YEAR_IN_SECONDS

IRs:
secondsAccountedFor(uint256) = secondsAccountedFor - LEAP_YEAR_IN_SECONDS"];
11->13;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
secondsAccountedFor -= YEAR_IN_SECONDS

IRs:
secondsAccountedFor(uint256) = secondsAccountedFor - YEAR_IN_SECONDS"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
year -= 1

IRs:
year(uint16) = year - 1"];
14->9;
15[label="Node Type: END_LOOP 15
"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
year

IRs:
RETURN year"];
}
// Function: 8606.sol-DateTime-isLeapYear(uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
year % 4 != 0

IRs:
TMP_7(uint16) = year % 4
TMP_8(bool) = TMP_7 != 0
CONDITION TMP_8"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
year % 100 != 0

IRs:
TMP_9(uint16) = year % 100
TMP_10(bool) = TMP_9 != 0
CONDITION TMP_10"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
year % 400 != 0

IRs:
TMP_11(uint16) = year % 400
TMP_12(bool) = TMP_11 != 0
CONDITION TMP_12"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8606.sol-DateTime-leapYearsBefore(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
year -= 1

IRs:
year(uint256) = year - 1"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
year / 4 - year / 100 + year / 400

IRs:
TMP_13(uint256) = year / 4
TMP_14(uint256) = year / 100
TMP_15(uint256) = TMP_13 - TMP_14
TMP_16(uint256) = year / 400
TMP_17(uint256) = TMP_15 + TMP_16
RETURN TMP_17"];
}
// Function: 8606.sol-DateTime-parseTimestamp(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
secondsAccountedFor = 0

IRs:
secondsAccountedFor(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dt.year = getYear(timestamp)

IRs:
REF_0(uint16) -> dt.year
TMP_39(uint16) = INTERNAL_CALL, DateTime.getYear(uint256)(timestamp)
REF_0(uint16) (->dt) := TMP_39(uint16)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR)

IRs:
REF_1(uint16) -> dt.year
TMP_40(uint256) = INTERNAL_CALL, DateTime.leapYearsBefore(uint256)(REF_1)
TMP_41(uint256) = INTERNAL_CALL, DateTime.leapYearsBefore(uint256)(ORIGIN_YEAR)
TMP_42(uint256) = TMP_40 - TMP_41
buf(uint256) := TMP_42(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf

IRs:
TMP_43(uint256) = LEAP_YEAR_IN_SECONDS * buf
secondsAccountedFor(uint256) = secondsAccountedFor + TMP_43"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf)

IRs:
REF_2(uint16) -> dt.year
TMP_44(uint16) = REF_2 - ORIGIN_YEAR
TMP_45(uint16) = TMP_44 - buf
TMP_46(uint256) = YEAR_IN_SECONDS * TMP_45
secondsAccountedFor(uint256) = secondsAccountedFor + TMP_46"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->22;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i = 1

IRs:
i(uint8) := 1(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i <= 12

IRs:
TMP_47(bool) = i <= 12
CONDITION TMP_47"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i,dt.year)

IRs:
REF_3(uint16) -> dt.year
TMP_48(uint8) = INTERNAL_CALL, DateTime.getDaysInMonth(uint8,uint16)(i,REF_3)
TMP_49(uint256) = DAY_IN_SECONDS * TMP_48
secondsInMonth(uint256) := TMP_49(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
secondsInMonth + secondsAccountedFor > timestamp

IRs:
TMP_50(uint256) = secondsInMonth + secondsAccountedFor
TMP_51(bool) = TMP_50 > timestamp
CONDITION TMP_51"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
dt.month = i

IRs:
REF_4(uint8) -> dt.month
REF_4(uint8) (->dt) := i(uint8)"];
15->16;
16[label="Node Type: BREAK 16
"];
16->10;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
secondsAccountedFor += secondsInMonth

IRs:
secondsAccountedFor(uint256) = secondsAccountedFor + secondsInMonth"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i ++

IRs:
TMP_52(uint8) := i(uint8)
i(uint8) = i + 1"];
19->12;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->30;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 1

IRs:
i(uint8) := 1(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i <= getDaysInMonth(dt.month,dt.year)

IRs:
REF_5(uint8) -> dt.month
REF_6(uint16) -> dt.year
TMP_53(uint8) = INTERNAL_CALL, DateTime.getDaysInMonth(uint8,uint16)(REF_5,REF_6)
TMP_54(bool) = i <= TMP_53
CONDITION TMP_54"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: IF 24

EXPRESSION:
DAY_IN_SECONDS + secondsAccountedFor > timestamp

IRs:
TMP_55(uint256) = DAY_IN_SECONDS + secondsAccountedFor
TMP_56(bool) = TMP_55 > timestamp
CONDITION TMP_56"];
24->25[label="True"];
24->27[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
dt.day = i

IRs:
REF_7(uint8) -> dt.day
REF_7(uint8) (->dt) := i(uint8)"];
25->26;
26[label="Node Type: BREAK 26
"];
26->21;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
secondsAccountedFor += DAY_IN_SECONDS

IRs:
secondsAccountedFor(uint256) = secondsAccountedFor + DAY_IN_SECONDS"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i ++

IRs:
TMP_57(uint8) := i(uint8)
i(uint8) = i + 1"];
29->23;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
dt.hour = getHour(timestamp)

IRs:
REF_8(uint8) -> dt.hour
TMP_58(uint8) = INTERNAL_CALL, DateTime.getHour(uint256)(timestamp)
REF_8(uint8) (->dt) := TMP_58(uint8)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
dt.minute = getMinute(timestamp)

IRs:
REF_9(uint8) -> dt.minute
TMP_59(uint8) = INTERNAL_CALL, DateTime.getMinute(uint256)(timestamp)
REF_9(uint8) (->dt) := TMP_59(uint8)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
dt.second = getSecond(timestamp)

IRs:
REF_10(uint8) -> dt.second
TMP_60(uint8) = INTERNAL_CALL, DateTime.getSecond(uint256)(timestamp)
REF_10(uint8) (->dt) := TMP_60(uint8)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
dt.weekday = getWeekday(timestamp)

IRs:
REF_11(uint8) -> dt.weekday
TMP_61(uint8) = INTERNAL_CALL, DateTime.getWeekday(uint256)(timestamp)
REF_11(uint8) (->dt) := TMP_61(uint8)"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
dt

IRs:
RETURN dt"];
}
// Function: 8606.sol-DateTime-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
DAY_IN_SECONDS = 86400

IRs:
DAY_IN_SECONDS(uint256) := 86400(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
YEAR_IN_SECONDS = 31536000

IRs:
YEAR_IN_SECONDS(uint256) := 31536000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
LEAP_YEAR_IN_SECONDS = 31622400

IRs:
LEAP_YEAR_IN_SECONDS(uint256) := 31622400(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
HOUR_IN_SECONDS = 3600

IRs:
HOUR_IN_SECONDS(uint256) := 3600(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MINUTE_IN_SECONDS = 60

IRs:
MINUTE_IN_SECONDS(uint256) := 60(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
ORIGIN_YEAR = 1970

IRs:
ORIGIN_YEAR(uint16) := 1970(uint256)"];
}
// Function: 8606.sol-DateTime-toTimestamp(uint16,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
toTimestamp(year,month,day,0,0,0)

IRs:
TMP_91(uint256) = INTERNAL_CALL, DateTime.toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)(year,month,day,0,0,0)
RETURN TMP_91"];
2[label="Node Type: RETURN 2

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
}
// Function: 8606.sol-DateTime-toTimestamp(uint16,uint8,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
toTimestamp(year,month,day,hour,0,0)

IRs:
TMP_92(uint256) = INTERNAL_CALL, DateTime.toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)(year,month,day,hour,0,0)
RETURN TMP_92"];
2[label="Node Type: RETURN 2

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
}
// Function: 8606.sol-DateTime-toTimestamp(uint16,uint8,uint8,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
toTimestamp(year,month,day,hour,minute,0)

IRs:
TMP_93(uint256) = INTERNAL_CALL, DateTime.toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)(year,month,day,hour,minute,0)
RETURN TMP_93"];
2[label="Node Type: RETURN 2

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
}
// Function: 8606.sol-DateTime-toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->11;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
i = ORIGIN_YEAR

IRs:
i(uint16) := ORIGIN_YEAR(uint16)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < year

IRs:
TMP_94(bool) = i < year
CONDITION TMP_94"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
isLeapYear(i)

IRs:
TMP_95(bool) = INTERNAL_CALL, DateTime.isLeapYear(uint16)(i)
CONDITION TMP_95"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
timestamp += LEAP_YEAR_IN_SECONDS

IRs:
timestamp(uint256) = timestamp + LEAP_YEAR_IN_SECONDS"];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
timestamp += YEAR_IN_SECONDS

IRs:
timestamp(uint256) = timestamp + YEAR_IN_SECONDS"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_96(uint16) := i(uint16)
i(uint16) = i + 1"];
10->5;
11[label="Node Type: NEW VARIABLE 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
monthDayCounts[0] = 31

IRs:
REF_14(uint8) -> monthDayCounts[0]
REF_14(uint8) (->monthDayCounts) := 31(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
isLeapYear(year)

IRs:
TMP_97(bool) = INTERNAL_CALL, DateTime.isLeapYear(uint16)(year)
CONDITION TMP_97"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
monthDayCounts[1] = 29

IRs:
REF_15(uint8) -> monthDayCounts[1]
REF_15(uint8) (->monthDayCounts) := 29(uint256)"];
14->16;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
monthDayCounts[1] = 28

IRs:
REF_16(uint8) -> monthDayCounts[1]
REF_16(uint8) (->monthDayCounts) := 28(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
monthDayCounts[2] = 31

IRs:
REF_17(uint8) -> monthDayCounts[2]
REF_17(uint8) (->monthDayCounts) := 31(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
monthDayCounts[3] = 30

IRs:
REF_18(uint8) -> monthDayCounts[3]
REF_18(uint8) (->monthDayCounts) := 30(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
monthDayCounts[4] = 31

IRs:
REF_19(uint8) -> monthDayCounts[4]
REF_19(uint8) (->monthDayCounts) := 31(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
monthDayCounts[5] = 30

IRs:
REF_20(uint8) -> monthDayCounts[5]
REF_20(uint8) (->monthDayCounts) := 30(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
monthDayCounts[6] = 31

IRs:
REF_21(uint8) -> monthDayCounts[6]
REF_21(uint8) (->monthDayCounts) := 31(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
monthDayCounts[7] = 31

IRs:
REF_22(uint8) -> monthDayCounts[7]
REF_22(uint8) (->monthDayCounts) := 31(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
monthDayCounts[8] = 30

IRs:
REF_23(uint8) -> monthDayCounts[8]
REF_23(uint8) (->monthDayCounts) := 30(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
monthDayCounts[9] = 31

IRs:
REF_24(uint8) -> monthDayCounts[9]
REF_24(uint8) (->monthDayCounts) := 31(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
monthDayCounts[10] = 30

IRs:
REF_25(uint8) -> monthDayCounts[10]
REF_25(uint8) (->monthDayCounts) := 30(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
monthDayCounts[11] = 31

IRs:
REF_26(uint8) -> monthDayCounts[11]
REF_26(uint8) (->monthDayCounts) := 31(uint256)"];
26->29;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->33;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 1

IRs:
i(uint16) := 1(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < month

IRs:
TMP_98(bool) = i < month
CONDITION TMP_98"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1]

IRs:
TMP_99(uint16) = i - 1
REF_27(uint8) -> monthDayCounts[TMP_99]
TMP_100(uint256) = DAY_IN_SECONDS * REF_27
timestamp(uint256) = timestamp + TMP_100"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_101(uint16) := i(uint16)
i(uint16) = i + 1"];
32->30;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
timestamp += DAY_IN_SECONDS * (day - 1)

IRs:
TMP_102(uint8) = day - 1
TMP_103(uint256) = DAY_IN_SECONDS * TMP_102
timestamp(uint256) = timestamp + TMP_103"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
timestamp += HOUR_IN_SECONDS * (hour)

IRs:
TMP_104(uint256) = HOUR_IN_SECONDS * hour
timestamp(uint256) = timestamp + TMP_104"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
timestamp += MINUTE_IN_SECONDS * (minute)

IRs:
TMP_105(uint256) = MINUTE_IN_SECONDS * minute
timestamp(uint256) = timestamp + TMP_105"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
timestamp += second

IRs:
timestamp(uint256) = timestamp + second"];
36->37;
37[label="Node Type: RETURN 37

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
38[label="Node Type: RETURN 38

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
}
// Function: 8606.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 8606.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 8606.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 8606.sol-ERC20-totalSupply()
digraph{
}
// Function: 8606.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 8606.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 8606.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 8606.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 8606.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 8606.sol-Operational-Operational(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operator = _operator

IRs:
operator(address) := _operator(address)"];
}
// Function: 8606.sol-Operational-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8606.sol-Operational-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_184 = CONVERT 0 to address
pendingOwner(address) := TMP_184(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 8606.sol-Operational-onlyOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == operator)

IRs:
TMP_199(bool) = msg.sender == operator
TMP_200(None) = SOLIDITY_CALL require(bool)(TMP_199)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8606.sol-Operational-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_197(bool) = msg.sender == owner
TMP_198(None) = SOLIDITY_CALL require(bool)(TMP_197)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8606.sol-Operational-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_195(bool) = msg.sender == pendingOwner
TMP_196(None) = SOLIDITY_CALL require(bool)(TMP_195)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8606.sol-Operational-transferOperator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOperator != address(0))

IRs:
TMP_191 = CONVERT 0 to address
TMP_192(bool) = newOperator != TMP_191
TMP_193(None) = SOLIDITY_CALL require(bool)(TMP_192)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operator = newOperator

IRs:
operator(address) := newOperator(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8606.sol-Operational-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_186 = CONVERT 0 to address
TMP_187(bool) = newOwner != TMP_186
TMP_188(None) = SOLIDITY_CALL require(bool)(TMP_187)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8606.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8606.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8606.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8606.sol-ReentrancyGuard-nonReentrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! reentrancyLock)

IRs:
TMP_167 = UnaryType.BANG reentrancyLock 
TMP_168(None) = SOLIDITY_CALL require(bool)(TMP_167)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reentrancyLock = true

IRs:
reentrancyLock(bool) := True(bool)"];
2->3;
3[label="Node Type: _ 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reentrancyLock = false

IRs:
reentrancyLock(bool) := False(bool)"];
}
// Function: 8606.sol-ReentrancyGuard-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
reentrancyLock = false

IRs:
reentrancyLock(bool) := False(bool)"];
}
// Function: 8606.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_115(uint256) = a + b
c(uint256) := TMP_115(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_116(bool) = c >= a
TMP_117(None) = SOLIDITY_CALL assert(bool)(TMP_116)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 8606.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_111(uint256) = a / b
RETURN TMP_111"];
}
// Function: 8606.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_106(bool) = a == 0
CONDITION TMP_106"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_107(uint256) = a * b
c(uint256) := TMP_107(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_108(uint256) = c / a
TMP_109(bool) = TMP_108 == b
TMP_110(None) = SOLIDITY_CALL assert(bool)(TMP_109)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 8606.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_112(bool) = b <= a
TMP_113(None) = SOLIDITY_CALL assert(bool)(TMP_112)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_114(uint256) = a - b
RETURN TMP_114"];
}
// Function: 8606.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_60(mapping(address => uint256)) -> allowed[_owner]
REF_61(uint256) -> REF_60[_spender]
RETURN REF_61"];
}
// Function: 8606.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_58(mapping(address => uint256)) -> allowed[msg.sender]
REF_59(uint256) -> REF_58[_spender]
REF_59(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8606.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 8606.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_69(mapping(address => uint256)) -> allowed[msg.sender]
REF_70(uint256) -> REF_69[_spender]
oldValue(uint256) := REF_70(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_148(bool) = _subtractedValue > oldValue
CONDITION TMP_148"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_71(mapping(address => uint256)) -> allowed[msg.sender]
REF_72(uint256) -> REF_71[_spender]
REF_72(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_74(uint256) (->allowed) := TMP_149(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_76(mapping(address => uint256)) -> allowed[msg.sender]
REF_77(uint256) -> REF_76[_spender]
Emit Approval(msg.sender,_spender,REF_77)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8606.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_62(mapping(address => uint256)) -> allowed[msg.sender]
REF_63(uint256) -> REF_62[_spender]
REF_64(mapping(address => uint256)) -> allowed[msg.sender]
REF_65(uint256) -> REF_64[_spender]
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_65', '_addedValue'] 
REF_63(uint256) (->allowed) := TMP_146(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_67(mapping(address => uint256)) -> allowed[msg.sender]
REF_68(uint256) -> REF_67[_spender]
Emit Approval(msg.sender,_spender,REF_68)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8606.sol-StandardToken-totalSupply()
digraph{
}
// Function: 8606.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 8606.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_134 = CONVERT 0 to address
TMP_135(bool) = _to != TMP_134
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_44(uint256) -> balances[_from]
TMP_137(bool) = _value <= REF_44
TMP_138(None) = SOLIDITY_CALL require(bool)(TMP_137)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_45(mapping(address => uint256)) -> allowed[_from]
REF_46(uint256) -> REF_45[msg.sender]
TMP_139(bool) = _value <= REF_46
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_47(uint256) -> balances[_from]
REF_48(uint256) -> balances[_from]
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_48', '_value'] 
REF_47(uint256) (->balances) := TMP_141(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_50(uint256) -> balances[_to]
REF_51(uint256) -> balances[_to]
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_51', '_value'] 
REF_50(uint256) (->balances) := TMP_142(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_53(mapping(address => uint256)) -> allowed[_from]
REF_54(uint256) -> REF_53[msg.sender]
REF_55(mapping(address => uint256)) -> allowed[_from]
REF_56(uint256) -> REF_55[msg.sender]
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_56', '_value'] 
REF_54(uint256) (->allowed) := TMP_143(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8606.sol-YunMint-Operational(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operator = _operator

IRs:
operator(address) := _operator(address)"];
}
// Function: 8606.sol-YunMint-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8606.sol-YunMint-YunMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
createTime = block.timestamp

IRs:
createTime(uint256) := block.timestamp(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = valueTotal

IRs:
totalSupply_(uint256) := valueTotal(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
firstReleaseAmount = 200000 * (10 ** 8)

IRs:
TMP_247(uint256) = 10 ** 8
TMP_248(uint256) = 200000 * TMP_247
firstReleaseAmount(uint256) := TMP_248(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validAddress(_operator)

IRs:
MODIFIER_CALL, YunMint.validAddress(address)(_operator)"];
4->1;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Operational(_operator)

IRs:
INTERNAL_CALL, Operational.Operational(address)(_operator)"];
5->4;
}
// Function: 8606.sol-YunMint-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_133(uint256) -> balances[_who]
TMP_227(bool) = _value <= REF_133
TMP_228(None) = SOLIDITY_CALL require(bool)(TMP_227)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_134(uint256) -> balances[_who]
REF_135(uint256) -> balances[_who]
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_135', '_value'] 
REF_134(uint256) (->balances) := TMP_229(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_230(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_230(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_232 = CONVERT 0 to address
Emit Transfer(_who,TMP_232,_value)"];
}
// Function: 8606.sol-YunMint-allowance(address,address)
digraph{
}
// Function: 8606.sol-YunMint-approve(address,uint256)
digraph{
}
// Function: 8606.sol-YunMint-balanceOf(address)
digraph{
}
// Function: 8606.sol-YunMint-batchTransfer(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _to.length

IRs:
REF_138 -> LENGTH _to
TMP_251(bool) = i < REF_138
CONDITION TMP_251"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(transfer(_to[i],_amount[i]))

IRs:
REF_139(address) -> _to[i]
REF_140(uint256) -> _amount[i]
TMP_252(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(REF_139,REF_140)
TMP_253(None) = SOLIDITY_CALL require(bool)(TMP_252)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_254(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 8606.sol-YunMint-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8606.sol-YunMint-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_240 = CONVERT 0 to address
pendingOwner(address) := TMP_240(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 8606.sol-YunMint-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_116(mapping(address => uint256)) -> allowed[msg.sender]
REF_117(uint256) -> REF_116[_spender]
oldValue(uint256) := REF_117(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_215(bool) = _subtractedValue > oldValue
CONDITION TMP_215"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_118(mapping(address => uint256)) -> allowed[msg.sender]
REF_119(uint256) -> REF_118[_spender]
REF_119(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_120(mapping(address => uint256)) -> allowed[msg.sender]
REF_121(uint256) -> REF_120[_spender]
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_121(uint256) (->allowed) := TMP_216(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_123(mapping(address => uint256)) -> allowed[msg.sender]
REF_124(uint256) -> REF_123[_spender]
Emit Approval(msg.sender,_spender,REF_124)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8606.sol-YunMint-freeze(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_158(uint256) -> balances[msg.sender]
TMP_290(bool) = REF_158 >= _value
TMP_291(None) = SOLIDITY_CALL require(bool)(TMP_290)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_unFrozenTime > createTime)

IRs:
TMP_292(bool) = _unFrozenTime > createTime
TMP_293(None) = SOLIDITY_CALL require(bool)(TMP_292)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_unFrozenTime > block.timestamp)

IRs:
TMP_294(bool) = _unFrozenTime > block.timestamp
TMP_295(None) = SOLIDITY_CALL require(bool)(TMP_294)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_159(uint256) -> balances[msg.sender]
REF_160(uint256) -> balances[msg.sender]
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_160', '_value'] 
REF_159(uint256) (->balances) := TMP_296(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
frozenBalances[frozenBalanceCount] = FrozenBalance({owner:msg.sender,value:_value,unFrozenTime:_unFrozenTime})

IRs:
REF_162(YunMint.FrozenBalance) -> frozenBalances[frozenBalanceCount]
TMP_297(YunMint.FrozenBalance) = new FrozenBalance(msg.sender,_value,_unFrozenTime)
REF_162(YunMint.FrozenBalance) (->frozenBalances) := TMP_297(YunMint.FrozenBalance)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
frozenBalanceCount ++

IRs:
TMP_298(uint256) := frozenBalanceCount(uint256)
frozenBalanceCount(uint256) = frozenBalanceCount + 1"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Freeze(msg.sender,_value,_unFrozenTime)

IRs:
Emit Freeze(msg.sender,_value,_unFrozenTime)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
9->1;
}
// Function: 8606.sol-YunMint-frozenBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < frozenBalanceCount

IRs:
TMP_301(bool) = i < frozenBalanceCount
CONDITION TMP_301"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
frozenBalance = frozenBalances[i]

IRs:
REF_163(YunMint.FrozenBalance) -> frozenBalances[i]
frozenBalance(YunMint.FrozenBalance) := REF_163(YunMint.FrozenBalance)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_owner == frozenBalance.owner

IRs:
REF_164(address) -> frozenBalance.owner
TMP_302(bool) = _owner == REF_164
CONDITION TMP_302"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
value = value.add(frozenBalance.value)

IRs:
REF_166(uint256) -> frozenBalance.value
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['value', 'REF_166'] 
value(uint256) := TMP_303(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_304(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: RETURN 10

EXPRESSION:
value

IRs:
RETURN value"];
11[label="Node Type: RETURN 11

EXPRESSION:
value

IRs:
RETURN value"];
}
// Function: 8606.sol-YunMint-hasItBeenReleased(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
exist = false

IRs:
exist(bool) := False(bool)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(lastReleaseTime.parseTimestamp().year == timestamp.parseTimestamp().year) && (lastReleaseTime.parseTimestamp().month == timestamp.parseTimestamp().month) && (lastReleaseTime.parseTimestamp().day == timestamp.parseTimestamp().day)

IRs:
TMP_279(DateTime._DateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['lastReleaseTime'] 
REF_147(uint16) -> TMP_279.year
TMP_280(DateTime._DateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_149(uint16) -> TMP_280.year
TMP_281(bool) = REF_147 == REF_149
TMP_282(DateTime._DateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['lastReleaseTime'] 
REF_151(uint8) -> TMP_282.month
TMP_283(DateTime._DateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_153(uint8) -> TMP_283.month
TMP_284(bool) = REF_151 == REF_153
TMP_285(bool) = TMP_281 && TMP_284
TMP_286(DateTime._DateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['lastReleaseTime'] 
REF_155(uint8) -> TMP_286.day
TMP_287(DateTime._DateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_157(uint8) -> TMP_287.day
TMP_288(bool) = REF_155 == REF_157
TMP_289(bool) = TMP_285 && TMP_288
CONDITION TMP_289"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
exist = true

IRs:
exist(bool) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
exist

IRs:
RETURN exist"];
6[label="Node Type: RETURN 6

EXPRESSION:
_exist

IRs:
RETURN _exist"];
}
// Function: 8606.sol-YunMint-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_109(mapping(address => uint256)) -> allowed[msg.sender]
REF_110(uint256) -> REF_109[_spender]
REF_111(mapping(address => uint256)) -> allowed[msg.sender]
REF_112(uint256) -> REF_111[_spender]
TMP_213(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_112', '_addedValue'] 
REF_110(uint256) (->allowed) := TMP_213(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_114(mapping(address => uint256)) -> allowed[msg.sender]
REF_115(uint256) -> REF_114[_spender]
Emit Approval(msg.sender,_spender,REF_115)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8606.sol-YunMint-nonReentrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! reentrancyLock)

IRs:
TMP_316 = UnaryType.BANG reentrancyLock 
TMP_317(None) = SOLIDITY_CALL require(bool)(TMP_316)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reentrancyLock = true

IRs:
reentrancyLock(bool) := True(bool)"];
2->3;
3[label="Node Type: _ 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reentrancyLock = false

IRs:
reentrancyLock(bool) := False(bool)"];
}
// Function: 8606.sol-YunMint-onlyOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == operator)

IRs:
TMP_318(bool) = msg.sender == operator
TMP_319(None) = SOLIDITY_CALL require(bool)(TMP_318)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8606.sol-YunMint-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_322(bool) = msg.sender == owner
TMP_323(None) = SOLIDITY_CALL require(bool)(TMP_322)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8606.sol-YunMint-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_320(bool) = msg.sender == pendingOwner
TMP_321(None) = SOLIDITY_CALL require(bool)(TMP_320)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8606.sol-YunMint-release(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(timestamp <= block.timestamp)

IRs:
TMP_255(bool) = timestamp <= block.timestamp
TMP_256(None) = SOLIDITY_CALL require(bool)(TMP_255)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
lastReleaseTime > 0

IRs:
TMP_257(bool) = lastReleaseTime > 0
CONDITION TMP_257"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(timestamp > lastReleaseTime)

IRs:
TMP_258(bool) = timestamp > lastReleaseTime
TMP_259(None) = SOLIDITY_CALL require(bool)(TMP_258)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(! hasItBeenReleased(timestamp))

IRs:
TMP_260(bool) = INTERNAL_CALL, YunMint.hasItBeenReleased(uint256)(timestamp)
TMP_261 = UnaryType.BANG TMP_260 
TMP_262(None) = SOLIDITY_CALL require(bool)(TMP_261)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
cycleCount = releasedCount.div(30)

IRs:
TMP_263(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['releasedCount', '30'] 
cycleCount(uint256) := TMP_263(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(cycleCount < 100)

IRs:
TMP_264(bool) = cycleCount < 100
TMP_265(None) = SOLIDITY_CALL require(bool)(TMP_264)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(releasedSupply < valueTotal)

IRs:
TMP_266(bool) = releasedSupply < valueTotal
TMP_267(None) = SOLIDITY_CALL require(bool)(TMP_266)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
curReleaseAmount = firstReleaseAmount - (cycleCount * 2000 * (10 ** 8))

IRs:
TMP_268(uint256) = cycleCount * 2000
TMP_269(uint256) = 10 ** 8
TMP_270(uint256) = TMP_268 * TMP_269
TMP_271(uint256) = firstReleaseAmount - TMP_270
curReleaseAmount(uint256) := TMP_271(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[owner] = balances[owner].add(curReleaseAmount)

IRs:
REF_142(uint256) -> balances[owner]
REF_143(uint256) -> balances[owner]
TMP_272(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_143', 'curReleaseAmount'] 
REF_142(uint256) (->balances) := TMP_272(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
releasedSupply = releasedSupply.add(curReleaseAmount)

IRs:
TMP_273(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['releasedSupply', 'curReleaseAmount'] 
releasedSupply(uint256) := TMP_273(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
lastReleaseTime = timestamp

IRs:
lastReleaseTime(uint256) := timestamp(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
releasedCount = releasedCount + 1

IRs:
TMP_274(uint256) = releasedCount + 1
releasedCount(uint256) := TMP_274(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Release(msg.sender,curReleaseAmount,lastReleaseTime)

IRs:
Emit Release(msg.sender,curReleaseAmount,lastReleaseTime)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Transfer(address(0),owner,curReleaseAmount)

IRs:
TMP_276 = CONVERT 0 to address
Emit Transfer(TMP_276,owner,curReleaseAmount)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
true

IRs:
RETURN True"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
onlyOperator()

IRs:
MODIFIER_CALL, Operational.onlyOperator()()"];
17->1;
}
// Function: 8606.sol-YunMint-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
valueTotal = 303000000 * (10 ** 8)

IRs:
TMP_314(uint256) = 10 ** 8
TMP_315(uint256) = 303000000 * TMP_314
valueTotal(uint256) := TMP_315(uint256)"];
}
// Function: 8606.sol-YunMint-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
frozenBalanceCount = 0

IRs:
frozenBalanceCount(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
releasedCount = 0

IRs:
releasedCount(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
cycleCount = 0

IRs:
cycleCount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
createTime = 0

IRs:
createTime(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
lastReleaseTime = 0

IRs:
lastReleaseTime(uint256) := 0(uint256)"];
}
// Function: 8606.sol-YunMint-totalSupply()
digraph{
}
// Function: 8606.sol-YunMint-transfer(address,uint256)
digraph{
}
// Function: 8606.sol-YunMint-transferFrom(address,address,uint256)
digraph{
}
// Function: 8606.sol-YunMint-transferOperator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOperator != address(0))

IRs:
TMP_234 = CONVERT 0 to address
TMP_235(bool) = newOperator != TMP_234
TMP_236(None) = SOLIDITY_CALL require(bool)(TMP_235)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operator = newOperator

IRs:
operator(address) := newOperator(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8606.sol-YunMint-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_242 = CONVERT 0 to address
TMP_243(bool) = newOwner != TMP_242
TMP_244(None) = SOLIDITY_CALL require(bool)(TMP_243)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8606.sol-YunMint-unFrozenBalanceByIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
frozenBalance = frozenBalances[index]

IRs:
REF_171(YunMint.FrozenBalance) -> frozenBalances[index]
frozenBalance(YunMint.FrozenBalance) := REF_171(YunMint.FrozenBalance)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[frozenBalance.owner] = balances[frozenBalance.owner].add(frozenBalance.value)

IRs:
REF_172(address) -> frozenBalance.owner
REF_173(uint256) -> balances[REF_172]
REF_174(address) -> frozenBalance.owner
REF_175(uint256) -> balances[REF_174]
REF_177(uint256) -> frozenBalance.value
TMP_309(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_175', 'REF_177'] 
REF_173(uint256) (->balances) := TMP_309(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Unfreeze(frozenBalance.owner,frozenBalance.value,frozenBalance.unFrozenTime)

IRs:
REF_178(address) -> frozenBalance.owner
REF_179(uint256) -> frozenBalance.value
REF_180(uint256) -> frozenBalance.unFrozenTime
Emit Unfreeze(REF_178,REF_179,REF_180)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
frozenBalances[index] = frozenBalances[frozenBalanceCount - 1]

IRs:
REF_181(YunMint.FrozenBalance) -> frozenBalances[index]
TMP_311(uint256) = frozenBalanceCount - 1
REF_182(YunMint.FrozenBalance) -> frozenBalances[TMP_311]
REF_181(YunMint.FrozenBalance) (->frozenBalances) := REF_182(YunMint.FrozenBalance)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete frozenBalances[frozenBalanceCount - 1]

IRs:
TMP_312(uint256) = frozenBalanceCount - 1
REF_183(YunMint.FrozenBalance) -> frozenBalances[TMP_312]
frozenBalances = delete REF_183 "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
frozenBalanceCount --

IRs:
TMP_313(uint256) := frozenBalanceCount(uint256)
frozenBalanceCount(uint256) = frozenBalanceCount - 1"];
}
// Function: 8606.sol-YunMint-unfreeze()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
index = 0

IRs:
index(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: BEGIN_LOOP 2
"];
2->3;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
index < frozenBalanceCount

IRs:
TMP_305(bool) = index < frozenBalanceCount
CONDITION TMP_305"];
3->4[label="True"];
3->9[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
now >= frozenBalances[index].unFrozenTime

IRs:
REF_167(YunMint.FrozenBalance) -> frozenBalances[index]
REF_168(uint256) -> REF_167.unFrozenTime
TMP_306(bool) = now >= REF_168
CONDITION TMP_306"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
releaseAmount += frozenBalances[index].value

IRs:
REF_169(YunMint.FrozenBalance) -> frozenBalances[index]
REF_170(uint256) -> REF_169.value
releaseAmount(uint256) = releaseAmount + REF_170"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
unFrozenBalanceByIndex(index)

IRs:
INTERNAL_CALL, YunMint.unFrozenBalanceByIndex(uint256)(index)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
index ++

IRs:
TMP_308(uint256) := index(uint256)
index(uint256) = index + 1"];
7->8;
8[label="Node Type: END_IF 8
"];
8->3;
9[label="Node Type: END_LOOP 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
releaseAmount

IRs:
RETURN releaseAmount"];
11[label="Node Type: RETURN 11

EXPRESSION:
releaseAmount

IRs:
RETURN releaseAmount"];
}
// Function: 8606.sol-YunMint-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(0x0 != _address)

IRs:
TMP_324(bool) = 0 != _address
TMP_325(None) = SOLIDITY_CALL assert(bool)(TMP_324)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8606.sol-YunToken-Operational(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
operator = _operator

IRs:
operator(address) := _operator(address)"];
}
// Function: 8606.sol-YunToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8606.sol-YunToken-YunMint(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
createTime = block.timestamp

IRs:
createTime(uint256) := block.timestamp(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = valueTotal

IRs:
totalSupply_(uint256) := valueTotal(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
firstReleaseAmount = 200000 * (10 ** 8)

IRs:
TMP_326(uint256) = 10 ** 8
TMP_327(uint256) = 200000 * TMP_326
firstReleaseAmount(uint256) := TMP_327(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validAddress(_operator)

IRs:
MODIFIER_CALL, YunMint.validAddress(address)(_operator)"];
4->1;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Operational(_operator)

IRs:
INTERNAL_CALL, Operational.Operational(address)(_operator)"];
5->4;
}
// Function: 8606.sol-YunToken-YunToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
YunMint(_operator)

IRs:
INTERNAL_CALL, YunMint.YunMint(address)(_operator)"];
}
// Function: 8606.sol-YunToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_272(uint256) -> balances[_who]
TMP_419(bool) = _value <= REF_272
TMP_420(None) = SOLIDITY_CALL require(bool)(TMP_419)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_273(uint256) -> balances[_who]
REF_274(uint256) -> balances[_who]
TMP_421(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_274', '_value'] 
REF_273(uint256) (->balances) := TMP_421(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_422(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_424 = CONVERT 0 to address
Emit Transfer(_who,TMP_424,_value)"];
}
// Function: 8606.sol-YunToken-allowance(address,address)
digraph{
}
// Function: 8606.sol-YunToken-approve(address,uint256)
digraph{
}
// Function: 8606.sol-YunToken-balanceOf(address)
digraph{
}
// Function: 8606.sol-YunToken-batchTransfer(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _to.length

IRs:
REF_184 -> LENGTH _to
TMP_330(bool) = i < REF_184
CONDITION TMP_330"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(transfer(_to[i],_amount[i]))

IRs:
REF_185(address) -> _to[i]
REF_186(uint256) -> _amount[i]
TMP_331(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(REF_185,REF_186)
TMP_332(None) = SOLIDITY_CALL require(bool)(TMP_331)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_333(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 8606.sol-YunToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8606.sol-YunToken-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_432 = CONVERT 0 to address
pendingOwner(address) := TMP_432(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 8606.sol-YunToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_255(mapping(address => uint256)) -> allowed[msg.sender]
REF_256(uint256) -> REF_255[_spender]
oldValue(uint256) := REF_256(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_407(bool) = _subtractedValue > oldValue
CONDITION TMP_407"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_257(mapping(address => uint256)) -> allowed[msg.sender]
REF_258(uint256) -> REF_257[_spender]
REF_258(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_259(mapping(address => uint256)) -> allowed[msg.sender]
REF_260(uint256) -> REF_259[_spender]
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_260(uint256) (->allowed) := TMP_408(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_262(mapping(address => uint256)) -> allowed[msg.sender]
REF_263(uint256) -> REF_262[_spender]
Emit Approval(msg.sender,_spender,REF_263)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8606.sol-YunToken-freeze(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_204(uint256) -> balances[msg.sender]
TMP_369(bool) = REF_204 >= _value
TMP_370(None) = SOLIDITY_CALL require(bool)(TMP_369)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_unFrozenTime > createTime)

IRs:
TMP_371(bool) = _unFrozenTime > createTime
TMP_372(None) = SOLIDITY_CALL require(bool)(TMP_371)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_unFrozenTime > block.timestamp)

IRs:
TMP_373(bool) = _unFrozenTime > block.timestamp
TMP_374(None) = SOLIDITY_CALL require(bool)(TMP_373)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_205(uint256) -> balances[msg.sender]
REF_206(uint256) -> balances[msg.sender]
TMP_375(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_206', '_value'] 
REF_205(uint256) (->balances) := TMP_375(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
frozenBalances[frozenBalanceCount] = FrozenBalance({owner:msg.sender,value:_value,unFrozenTime:_unFrozenTime})

IRs:
REF_208(YunMint.FrozenBalance) -> frozenBalances[frozenBalanceCount]
TMP_376(YunMint.FrozenBalance) = new FrozenBalance(msg.sender,_value,_unFrozenTime)
REF_208(YunMint.FrozenBalance) (->frozenBalances) := TMP_376(YunMint.FrozenBalance)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
frozenBalanceCount ++

IRs:
TMP_377(uint256) := frozenBalanceCount(uint256)
frozenBalanceCount(uint256) = frozenBalanceCount + 1"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Freeze(msg.sender,_value,_unFrozenTime)

IRs:
Emit Freeze(msg.sender,_value,_unFrozenTime)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
9->1;
}
// Function: 8606.sol-YunToken-frozenBalanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < frozenBalanceCount

IRs:
TMP_380(bool) = i < frozenBalanceCount
CONDITION TMP_380"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
frozenBalance = frozenBalances[i]

IRs:
REF_209(YunMint.FrozenBalance) -> frozenBalances[i]
frozenBalance(YunMint.FrozenBalance) := REF_209(YunMint.FrozenBalance)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_owner == frozenBalance.owner

IRs:
REF_210(address) -> frozenBalance.owner
TMP_381(bool) = _owner == REF_210
CONDITION TMP_381"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
value = value.add(frozenBalance.value)

IRs:
REF_212(uint256) -> frozenBalance.value
TMP_382(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['value', 'REF_212'] 
value(uint256) := TMP_382(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_383(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: RETURN 10

EXPRESSION:
value

IRs:
RETURN value"];
11[label="Node Type: RETURN 11

EXPRESSION:
value

IRs:
RETURN value"];
}
// Function: 8606.sol-YunToken-hasItBeenReleased(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
exist = false

IRs:
exist(bool) := False(bool)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(lastReleaseTime.parseTimestamp().year == timestamp.parseTimestamp().year) && (lastReleaseTime.parseTimestamp().month == timestamp.parseTimestamp().month) && (lastReleaseTime.parseTimestamp().day == timestamp.parseTimestamp().day)

IRs:
TMP_358(DateTime._DateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['lastReleaseTime'] 
REF_193(uint16) -> TMP_358.year
TMP_359(DateTime._DateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_195(uint16) -> TMP_359.year
TMP_360(bool) = REF_193 == REF_195
TMP_361(DateTime._DateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['lastReleaseTime'] 
REF_197(uint8) -> TMP_361.month
TMP_362(DateTime._DateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_199(uint8) -> TMP_362.month
TMP_363(bool) = REF_197 == REF_199
TMP_364(bool) = TMP_360 && TMP_363
TMP_365(DateTime._DateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['lastReleaseTime'] 
REF_201(uint8) -> TMP_365.day
TMP_366(DateTime._DateTime) = LIBRARY_CALL, dest:DateTime, function:DateTime.parseTimestamp(uint256), arguments:['timestamp'] 
REF_203(uint8) -> TMP_366.day
TMP_367(bool) = REF_201 == REF_203
TMP_368(bool) = TMP_364 && TMP_367
CONDITION TMP_368"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
exist = true

IRs:
exist(bool) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
exist

IRs:
RETURN exist"];
6[label="Node Type: RETURN 6

EXPRESSION:
_exist

IRs:
RETURN _exist"];
}
// Function: 8606.sol-YunToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_248(mapping(address => uint256)) -> allowed[msg.sender]
REF_249(uint256) -> REF_248[_spender]
REF_250(mapping(address => uint256)) -> allowed[msg.sender]
REF_251(uint256) -> REF_250[_spender]
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_251', '_addedValue'] 
REF_249(uint256) (->allowed) := TMP_405(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_253(mapping(address => uint256)) -> allowed[msg.sender]
REF_254(uint256) -> REF_253[_spender]
Emit Approval(msg.sender,_spender,REF_254)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8606.sol-YunToken-nonReentrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! reentrancyLock)

IRs:
TMP_444 = UnaryType.BANG reentrancyLock 
TMP_445(None) = SOLIDITY_CALL require(bool)(TMP_444)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reentrancyLock = true

IRs:
reentrancyLock(bool) := True(bool)"];
2->3;
3[label="Node Type: _ 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reentrancyLock = false

IRs:
reentrancyLock(bool) := False(bool)"];
}
// Function: 8606.sol-YunToken-onlyOperator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == operator)

IRs:
TMP_446(bool) = msg.sender == operator
TMP_447(None) = SOLIDITY_CALL require(bool)(TMP_446)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8606.sol-YunToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_450(bool) = msg.sender == owner
TMP_451(None) = SOLIDITY_CALL require(bool)(TMP_450)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8606.sol-YunToken-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_448(bool) = msg.sender == pendingOwner
TMP_449(None) = SOLIDITY_CALL require(bool)(TMP_448)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8606.sol-YunToken-release(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(timestamp <= block.timestamp)

IRs:
TMP_334(bool) = timestamp <= block.timestamp
TMP_335(None) = SOLIDITY_CALL require(bool)(TMP_334)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
lastReleaseTime > 0

IRs:
TMP_336(bool) = lastReleaseTime > 0
CONDITION TMP_336"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(timestamp > lastReleaseTime)

IRs:
TMP_337(bool) = timestamp > lastReleaseTime
TMP_338(None) = SOLIDITY_CALL require(bool)(TMP_337)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(! hasItBeenReleased(timestamp))

IRs:
TMP_339(bool) = INTERNAL_CALL, YunMint.hasItBeenReleased(uint256)(timestamp)
TMP_340 = UnaryType.BANG TMP_339 
TMP_341(None) = SOLIDITY_CALL require(bool)(TMP_340)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
cycleCount = releasedCount.div(30)

IRs:
TMP_342(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['releasedCount', '30'] 
cycleCount(uint256) := TMP_342(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(cycleCount < 100)

IRs:
TMP_343(bool) = cycleCount < 100
TMP_344(None) = SOLIDITY_CALL require(bool)(TMP_343)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(releasedSupply < valueTotal)

IRs:
TMP_345(bool) = releasedSupply < valueTotal
TMP_346(None) = SOLIDITY_CALL require(bool)(TMP_345)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
curReleaseAmount = firstReleaseAmount - (cycleCount * 2000 * (10 ** 8))

IRs:
TMP_347(uint256) = cycleCount * 2000
TMP_348(uint256) = 10 ** 8
TMP_349(uint256) = TMP_347 * TMP_348
TMP_350(uint256) = firstReleaseAmount - TMP_349
curReleaseAmount(uint256) := TMP_350(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[owner] = balances[owner].add(curReleaseAmount)

IRs:
REF_188(uint256) -> balances[owner]
REF_189(uint256) -> balances[owner]
TMP_351(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_189', 'curReleaseAmount'] 
REF_188(uint256) (->balances) := TMP_351(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
releasedSupply = releasedSupply.add(curReleaseAmount)

IRs:
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['releasedSupply', 'curReleaseAmount'] 
releasedSupply(uint256) := TMP_352(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
lastReleaseTime = timestamp

IRs:
lastReleaseTime(uint256) := timestamp(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
releasedCount = releasedCount + 1

IRs:
TMP_353(uint256) = releasedCount + 1
releasedCount(uint256) := TMP_353(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Release(msg.sender,curReleaseAmount,lastReleaseTime)

IRs:
Emit Release(msg.sender,curReleaseAmount,lastReleaseTime)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Transfer(address(0),owner,curReleaseAmount)

IRs:
TMP_355 = CONVERT 0 to address
Emit Transfer(TMP_355,owner,curReleaseAmount)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
true

IRs:
RETURN True"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
onlyOperator()

IRs:
MODIFIER_CALL, Operational.onlyOperator()()"];
17->1;
}
// Function: 8606.sol-YunToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
valueTotal = 303000000 * (10 ** 8)

IRs:
TMP_440(uint256) = 10 ** 8
TMP_441(uint256) = 303000000 * TMP_440
valueTotal(uint256) := TMP_441(uint256)"];
}
// Function: 8606.sol-YunToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
frozenBalanceCount = 0

IRs:
frozenBalanceCount(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
releasedCount = 0

IRs:
releasedCount(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
cycleCount = 0

IRs:
cycleCount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
createTime = 0

IRs:
createTime(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
lastReleaseTime = 0

IRs:
lastReleaseTime(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
standard = 2018062301

IRs:
standard(string) := 2018062301(string)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
name = YunToken

IRs:
name(string) := YunToken(string)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
symbol = YUN

IRs:
symbol(string) := YUN(string)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
}
// Function: 8606.sol-YunToken-totalSupply()
digraph{
}
// Function: 8606.sol-YunToken-transfer(address,uint256)
digraph{
}
// Function: 8606.sol-YunToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 8606.sol-YunToken-transferOperator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOperator != address(0))

IRs:
TMP_426 = CONVERT 0 to address
TMP_427(bool) = newOperator != TMP_426
TMP_428(None) = SOLIDITY_CALL require(bool)(TMP_427)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
operator = newOperator

IRs:
operator(address) := newOperator(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8606.sol-YunToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_434 = CONVERT 0 to address
TMP_435(bool) = newOwner != TMP_434
TMP_436(None) = SOLIDITY_CALL require(bool)(TMP_435)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8606.sol-YunToken-unFrozenBalanceByIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
frozenBalance = frozenBalances[index]

IRs:
REF_217(YunMint.FrozenBalance) -> frozenBalances[index]
frozenBalance(YunMint.FrozenBalance) := REF_217(YunMint.FrozenBalance)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[frozenBalance.owner] = balances[frozenBalance.owner].add(frozenBalance.value)

IRs:
REF_218(address) -> frozenBalance.owner
REF_219(uint256) -> balances[REF_218]
REF_220(address) -> frozenBalance.owner
REF_221(uint256) -> balances[REF_220]
REF_223(uint256) -> frozenBalance.value
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_221', 'REF_223'] 
REF_219(uint256) (->balances) := TMP_388(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Unfreeze(frozenBalance.owner,frozenBalance.value,frozenBalance.unFrozenTime)

IRs:
REF_224(address) -> frozenBalance.owner
REF_225(uint256) -> frozenBalance.value
REF_226(uint256) -> frozenBalance.unFrozenTime
Emit Unfreeze(REF_224,REF_225,REF_226)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
frozenBalances[index] = frozenBalances[frozenBalanceCount - 1]

IRs:
REF_227(YunMint.FrozenBalance) -> frozenBalances[index]
TMP_390(uint256) = frozenBalanceCount - 1
REF_228(YunMint.FrozenBalance) -> frozenBalances[TMP_390]
REF_227(YunMint.FrozenBalance) (->frozenBalances) := REF_228(YunMint.FrozenBalance)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete frozenBalances[frozenBalanceCount - 1]

IRs:
TMP_391(uint256) = frozenBalanceCount - 1
REF_229(YunMint.FrozenBalance) -> frozenBalances[TMP_391]
frozenBalances = delete REF_229 "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
frozenBalanceCount --

IRs:
TMP_392(uint256) := frozenBalanceCount(uint256)
frozenBalanceCount(uint256) = frozenBalanceCount - 1"];
}
// Function: 8606.sol-YunToken-unfreeze()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
index = 0

IRs:
index(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: BEGIN_LOOP 2
"];
2->3;
3[label="Node Type: IF_LOOP 3

EXPRESSION:
index < frozenBalanceCount

IRs:
TMP_384(bool) = index < frozenBalanceCount
CONDITION TMP_384"];
3->4[label="True"];
3->9[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
now >= frozenBalances[index].unFrozenTime

IRs:
REF_213(YunMint.FrozenBalance) -> frozenBalances[index]
REF_214(uint256) -> REF_213.unFrozenTime
TMP_385(bool) = now >= REF_214
CONDITION TMP_385"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
releaseAmount += frozenBalances[index].value

IRs:
REF_215(YunMint.FrozenBalance) -> frozenBalances[index]
REF_216(uint256) -> REF_215.value
releaseAmount(uint256) = releaseAmount + REF_216"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
unFrozenBalanceByIndex(index)

IRs:
INTERNAL_CALL, YunMint.unFrozenBalanceByIndex(uint256)(index)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
index ++

IRs:
TMP_387(uint256) := index(uint256)
index(uint256) = index + 1"];
7->8;
8[label="Node Type: END_IF 8
"];
8->3;
9[label="Node Type: END_LOOP 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
releaseAmount

IRs:
RETURN releaseAmount"];
11[label="Node Type: RETURN 11

EXPRESSION:
releaseAmount

IRs:
RETURN releaseAmount"];
}
// Function: 8606.sol-YunToken-validAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(0x0 != _address)

IRs:
TMP_442(bool) = 0 != _address
TMP_443(None) = SOLIDITY_CALL assert(bool)(TMP_442)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
