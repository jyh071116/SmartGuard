digraph G {
// Function: 8614.sol-ApprovedWithdrawer-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_91 = CONVERT 0 to address
TMP_92(bool) = _newOwner != TMP_91
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 8614.sol-ApprovedWithdrawer-addApprovedWalletAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(walletAddress != address(0))

IRs:
TMP_100 = CONVERT 0 to address
TMP_101(bool) = walletAddress != TMP_100
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WalletApproved(walletAddress)

IRs:
Emit WalletApproved(walletAddress)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
withdrawerWhitelist[walletAddress] = true

IRs:
REF_5(bool) -> withdrawerWhitelist[walletAddress]
REF_5(bool) (->withdrawerWhitelist) := True(bool)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8614.sol-ApprovedWithdrawer-changePrimaryApprovedWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(walletAddress != address(0))

IRs:
TMP_95 = CONVERT 0 to address
TMP_96(bool) = walletAddress != TMP_95
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ChangePrimaryApprovedWallet(walletAddress)

IRs:
Emit ChangePrimaryApprovedWallet(walletAddress)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
primaryWallet = walletAddress

IRs:
primaryWallet(address) := walletAddress(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8614.sol-ApprovedWithdrawer-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
primaryWallet = msg.sender

IRs:
primaryWallet(address) := msg.sender(address)"];
}
// Function: 8614.sol-ApprovedWithdrawer-deleteApprovedWalletAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(walletAddress != address(0))

IRs:
TMP_105 = CONVERT 0 to address
TMP_106(bool) = walletAddress != TMP_105
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(walletAddress != msg.sender)

IRs:
TMP_108(bool) = walletAddress != msg.sender
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
WalletRemoved(walletAddress)

IRs:
Emit WalletRemoved(walletAddress)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete withdrawerWhitelist[walletAddress]

IRs:
REF_6(bool) -> withdrawerWhitelist[walletAddress]
withdrawerWhitelist = delete REF_6 "];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 8614.sol-ApprovedWithdrawer-isApprovedWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(withdrawerWhitelist[walletCheck] || walletCheck == primaryWallet)

IRs:
REF_7(bool) -> withdrawerWhitelist[walletCheck]
TMP_112(bool) = walletCheck == primaryWallet
TMP_113(bool) = REF_7 || TMP_112
RETURN TMP_113"];
}
// Function: 8614.sol-ApprovedWithdrawer-onlyApprovedWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(withdrawerWhitelist[_to] == true || primaryWallet == _to)

IRs:
REF_8(bool) -> withdrawerWhitelist[_to]
TMP_116(bool) = REF_8 == True
TMP_117(bool) = primaryWallet == _to
TMP_118(bool) = TMP_116 || TMP_117
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-ApprovedWithdrawer-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_114(bool) = msg.sender == owner
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-ApprovedWithdrawer-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_87 = CONVERT 0 to address
owner(address) := TMP_87(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8614.sol-ApprovedWithdrawer-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8614.sol-Arbitrator-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_57 = CONVERT 0 to address
TMP_58(bool) = _newOwner != TMP_57
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 8614.sol-Arbitrator-addArbitrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newArbitrator != address(0))

IRs:
TMP_66 = CONVERT 0 to address
TMP_67(bool) = newArbitrator != TMP_66
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ArbitratorAdded(newArbitrator)

IRs:
Emit ArbitratorAdded(newArbitrator)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
aribitratorWhitelist[newArbitrator] = true

IRs:
REF_1(bool) -> aribitratorWhitelist[newArbitrator]
REF_1(bool) (->aribitratorWhitelist) := True(bool)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8614.sol-Arbitrator-changePrimaryArbitrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(walletAddress != address(0))

IRs:
TMP_61 = CONVERT 0 to address
TMP_62(bool) = walletAddress != TMP_61
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ChangePrimaryArbitratorWallet(walletAddress)

IRs:
Emit ChangePrimaryArbitratorWallet(walletAddress)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
primaryArbitrator = walletAddress

IRs:
primaryArbitrator(address) := walletAddress(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8614.sol-Arbitrator-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
primaryArbitrator = msg.sender

IRs:
primaryArbitrator(address) := msg.sender(address)"];
}
// Function: 8614.sol-Arbitrator-deleteArbitrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(arbitrator != address(0))

IRs:
TMP_71 = CONVERT 0 to address
TMP_72(bool) = arbitrator != TMP_71
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(arbitrator != msg.sender)

IRs:
TMP_74(bool) = arbitrator != msg.sender
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ArbitratorRemoved(arbitrator)

IRs:
Emit ArbitratorRemoved(arbitrator)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete aribitratorWhitelist[arbitrator]

IRs:
REF_2(bool) -> aribitratorWhitelist[arbitrator]
aribitratorWhitelist = delete REF_2 "];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 8614.sol-Arbitrator-isArbitrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(aribitratorWhitelist[arbitratorCheck] || arbitratorCheck == primaryArbitrator)

IRs:
REF_3(bool) -> aribitratorWhitelist[arbitratorCheck]
TMP_78(bool) = arbitratorCheck == primaryArbitrator
TMP_79(bool) = REF_3 || TMP_78
RETURN TMP_79"];
}
// Function: 8614.sol-Arbitrator-onlyArbitrator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(aribitratorWhitelist[msg.sender] == true || msg.sender == primaryArbitrator)

IRs:
REF_4(bool) -> aribitratorWhitelist[msg.sender]
TMP_82(bool) = REF_4 == True
TMP_83(bool) = msg.sender == primaryArbitrator
TMP_84(bool) = TMP_82 || TMP_83
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-Arbitrator-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_80(bool) = msg.sender == owner
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-Arbitrator-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_53 = CONVERT 0 to address
owner(address) := TMP_53(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8614.sol-Arbitrator-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8614.sol-CoinSparrow-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_131 = CONVERT 0 to address
TMP_132(bool) = _newOwner != TMP_131
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 8614.sol-CoinSparrow-addApprovedWalletAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(walletAddress != address(0))

IRs:
TMP_140 = CONVERT 0 to address
TMP_141(bool) = walletAddress != TMP_140
TMP_142(None) = SOLIDITY_CALL require(bool)(TMP_141)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
WalletApproved(walletAddress)

IRs:
Emit WalletApproved(walletAddress)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
withdrawerWhitelist[walletAddress] = true

IRs:
REF_9(bool) -> withdrawerWhitelist[walletAddress]
REF_9(bool) (->withdrawerWhitelist) := True(bool)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8614.sol-CoinSparrow-addArbitrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newArbitrator != address(0))

IRs:
TMP_159 = CONVERT 0 to address
TMP_160(bool) = newArbitrator != TMP_159
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ArbitratorAdded(newArbitrator)

IRs:
Emit ArbitratorAdded(newArbitrator)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
aribitratorWhitelist[newArbitrator] = true

IRs:
REF_12(bool) -> aribitratorWhitelist[newArbitrator]
REF_12(bool) (->aribitratorWhitelist) := True(bool)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8614.sol-CoinSparrow-changePrimaryApprovedWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(walletAddress != address(0))

IRs:
TMP_135 = CONVERT 0 to address
TMP_136(bool) = walletAddress != TMP_135
TMP_137(None) = SOLIDITY_CALL require(bool)(TMP_136)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ChangePrimaryApprovedWallet(walletAddress)

IRs:
Emit ChangePrimaryApprovedWallet(walletAddress)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
primaryWallet = walletAddress

IRs:
primaryWallet(address) := walletAddress(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8614.sol-CoinSparrow-changePrimaryArbitrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(walletAddress != address(0))

IRs:
TMP_154 = CONVERT 0 to address
TMP_155(bool) = walletAddress != TMP_154
TMP_156(None) = SOLIDITY_CALL require(bool)(TMP_155)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ChangePrimaryArbitratorWallet(walletAddress)

IRs:
Emit ChangePrimaryArbitratorWallet(walletAddress)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
primaryArbitrator = walletAddress

IRs:
primaryArbitrator(address) := walletAddress(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8614.sol-CoinSparrow-checkRefundSignature(uint8,bytes,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
percHash = keccak256()(abi.encodePacked(_contractorPercent))

IRs:
TMP_435(bytes) = SOLIDITY_CALL abi.encodePacked()(_contractorPercent)
TMP_436(bytes32) = SOLIDITY_CALL keccak256()(TMP_435)
percHash(bytes32) := TMP_436(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
msgHash = keccak256()(abi.encodePacked(Ethereum Signed Message:
32,percHash))

IRs:
TMP_437(bytes) = SOLIDITY_CALL abi.encodePacked()(Ethereum Signed Message:
32,percHash)
TMP_438(bytes32) = SOLIDITY_CALL keccak256()(TMP_437)
msgHash(bytes32) := TMP_438(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
addr = ECRecovery.recover(msgHash,_sigMsg)

IRs:
TMP_439(address) = LIBRARY_CALL, dest:ECRecovery, function:ECRecovery.recover(bytes32,bytes), arguments:['msgHash', '_sigMsg'] 
addr(address) := TMP_439(address)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
addr == _signer

IRs:
TMP_440(bool) = addr == _signer
RETURN TMP_440"];
}
// Function: 8614.sol-CoinSparrow-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
primaryArbitrator = msg.sender

IRs:
primaryArbitrator(address) := msg.sender(address)"];
}
// Function: 8614.sol-CoinSparrow-constructor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_maxSend > 0)

IRs:
TMP_173(bool) = _maxSend > 0
TMP_174(None) = SOLIDITY_CALL require(bool)(TMP_173)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MAX_SEND = _maxSend

IRs:
MAX_SEND(uint256) := _maxSend(uint256)"];
}
// Function: 8614.sol-CoinSparrow-contractorCancel(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_282(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_282(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
jobValue = hirerEscrowMap[_hirer][jobHash]

IRs:
REF_85(mapping(bytes32 => uint256)) -> hirerEscrowMap[_hirer]
REF_86(uint256) -> REF_85[jobHash]
jobValue(uint256) := REF_86(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(jobEscrows[jobHash].exists)

IRs:
REF_87(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_88(bool) -> REF_87.exists
TMP_283(None) = SOLIDITY_CALL require(bool)(REF_88)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(jobValue > 0 && jobValue == _value)

IRs:
TMP_284(bool) = jobValue > 0
TMP_285(bool) = jobValue == _value
TMP_286(bool) = TMP_284 && TMP_285
TMP_287(None) = SOLIDITY_CALL require(bool)(TMP_286)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(jobValue >= jobValue.sub(_fee))

IRs:
TMP_288(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['jobValue', '_fee'] 
TMP_289(bool) = jobValue >= TMP_288
TMP_290(None) = SOLIDITY_CALL require(bool)(TMP_289)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(totalInEscrow >= jobValue && totalInEscrow > 0)

IRs:
TMP_291(bool) = totalInEscrow >= jobValue
TMP_292(bool) = totalInEscrow > 0
TMP_293(bool) = TMP_291 && TMP_292
TMP_294(None) = SOLIDITY_CALL require(bool)(TMP_293)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
delete jobEscrows[jobHash]

IRs:
REF_90(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
jobEscrows = delete REF_90 "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete hirerEscrowMap[_hirer][jobHash]

IRs:
REF_91(mapping(bytes32 => uint256)) -> hirerEscrowMap[_hirer]
REF_92(uint256) -> REF_91[jobHash]
REF_91 = delete REF_92 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
CancelledByContractor(jobHash,msg.sender)

IRs:
Emit CancelledByContractor(jobHash,msg.sender)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalInEscrow = totalInEscrow.sub(jobValue)

IRs:
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalInEscrow', 'jobValue'] 
totalInEscrow(uint256) := TMP_296(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_hirer.transfer(jobValue)

IRs:
Transfer dest:_hirer value:jobValue"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyContractor(_contractor)

IRs:
MODIFIER_CALL, CoinSparrow.onlyContractor(address)(_contractor)"];
12->1;
}
// Function: 8614.sol-CoinSparrow-contractorReleaseFunds(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_220(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_220(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(jobEscrows[jobHash].exists)

IRs:
REF_35(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_36(bool) -> REF_35.exists
TMP_221(None) = SOLIDITY_CALL require(bool)(REF_36)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(jobEscrows[jobHash].status == STATUS_JOB_COMPLETED)

IRs:
REF_37(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_38(uint8) -> REF_37.status
TMP_222(bool) = REF_38 == STATUS_JOB_COMPLETED
TMP_223(None) = SOLIDITY_CALL require(bool)(TMP_222)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(block.timestamp > jobEscrows[jobHash].jobCompleteDate + 2419200)

IRs:
REF_39(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_40(uint32) -> REF_39.jobCompleteDate
TMP_224(uint32) = REF_40 + 2419200
TMP_225(bool) = block.timestamp > TMP_224
TMP_226(None) = SOLIDITY_CALL require(bool)(TMP_225)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
jobValue = hirerEscrowMap[_hirer][jobHash]

IRs:
REF_41(mapping(bytes32 => uint256)) -> hirerEscrowMap[_hirer]
REF_42(uint256) -> REF_41[jobHash]
jobValue(uint256) := REF_42(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(jobValue > 0 && jobValue == _value)

IRs:
TMP_227(bool) = jobValue > 0
TMP_228(bool) = jobValue == _value
TMP_229(bool) = TMP_227 && TMP_228
TMP_230(None) = SOLIDITY_CALL require(bool)(TMP_229)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(jobValue >= jobValue.sub(_fee))

IRs:
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['jobValue', '_fee'] 
TMP_232(bool) = jobValue >= TMP_231
TMP_233(None) = SOLIDITY_CALL require(bool)(TMP_232)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(totalInEscrow >= jobValue && totalInEscrow > 0)

IRs:
TMP_234(bool) = totalInEscrow >= jobValue
TMP_235(bool) = totalInEscrow > 0
TMP_236(bool) = TMP_234 && TMP_235
TMP_237(None) = SOLIDITY_CALL require(bool)(TMP_236)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ContractorReleased(jobHash,_hirer,_contractor,jobValue)

IRs:
Emit ContractorReleased(jobHash,_hirer,_contractor,jobValue)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
AddFeesToCoinSparrowPool(jobHash,_fee)

IRs:
Emit AddFeesToCoinSparrowPool(jobHash,_fee)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete jobEscrows[jobHash]

IRs:
REF_44(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
jobEscrows = delete REF_44 "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
delete hirerEscrowMap[_hirer][jobHash]

IRs:
REF_45(mapping(bytes32 => uint256)) -> hirerEscrowMap[_hirer]
REF_46(uint256) -> REF_45[jobHash]
REF_45 = delete REF_46 "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
feesAvailableForWithdraw = feesAvailableForWithdraw.add(_fee)

IRs:
TMP_240(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['feesAvailableForWithdraw', '_fee'] 
feesAvailableForWithdraw(uint256) := TMP_240(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
totalInEscrow = totalInEscrow.sub(jobValue)

IRs:
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalInEscrow', 'jobValue'] 
totalInEscrow(uint256) := TMP_241(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_contractor.transfer(jobValue.sub(_fee))

IRs:
TMP_242(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['jobValue', '_fee'] 
Transfer dest:_contractor value:TMP_242"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyContractor(_contractor)

IRs:
MODIFIER_CALL, CoinSparrow.onlyContractor(address)(_contractor)"];
16->1;
}
// Function: 8614.sol-CoinSparrow-createJobEscrow(bytes16,address,address,uint256,uint256,uint32,uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == _value && msg.value > 0)

IRs:
TMP_176(bool) = msg.value == _value
TMP_177(bool) = msg.value > 0
TMP_178(bool) = TMP_176 && TMP_177
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_fee < _value)

IRs:
TMP_180(bool) = _fee < _value
TMP_181(None) = SOLIDITY_CALL require(bool)(TMP_180)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value <= MAX_SEND)

IRs:
TMP_182(bool) = msg.value <= MAX_SEND
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_jobStartedWindowInSeconds > 0)

IRs:
TMP_184(bool) = _jobStartedWindowInSeconds > 0
TMP_185(None) = SOLIDITY_CALL require(bool)(TMP_184)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_secondsToComplete > 0)

IRs:
TMP_186(bool) = _secondsToComplete > 0
TMP_187(None) = SOLIDITY_CALL require(bool)(TMP_186)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_188(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_188(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(! jobEscrows[jobHash].exists)

IRs:
REF_15(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_16(bool) -> REF_15.exists
TMP_189 = UnaryType.BANG REF_16 
TMP_190(None) = SOLIDITY_CALL require(bool)(TMP_189)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
jobEscrows[jobHash] = JobEscrow(true,uint32(block.timestamp) + _jobStartedWindowInSeconds,STATUS_JOB_CREATED,0,_secondsToComplete,0)

IRs:
REF_17(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
TMP_191 = CONVERT block.timestamp to uint32
TMP_192(uint32) = TMP_191 + _jobStartedWindowInSeconds
TMP_193(CoinSparrow.JobEscrow) = new JobEscrow(True,TMP_192,STATUS_JOB_CREATED,0,_secondsToComplete,0)
REF_17(CoinSparrow.JobEscrow) (->jobEscrows) := TMP_193(CoinSparrow.JobEscrow)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalInEscrow = totalInEscrow.add(msg.value)

IRs:
TMP_194(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalInEscrow', 'msg.value'] 
totalInEscrow(uint256) := TMP_194(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
hirerEscrowMap[msg.sender][jobHash] = msg.value

IRs:
REF_19(mapping(bytes32 => uint256)) -> hirerEscrowMap[msg.sender]
REF_20(uint256) -> REF_19[jobHash]
REF_20(uint256) (->hirerEscrowMap) := msg.value(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
JobCreated(jobHash,msg.sender,msg.value)

IRs:
Emit JobCreated(jobHash,msg.sender,msg.value)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyHirer(_hirer)

IRs:
MODIFIER_CALL, CoinSparrow.onlyHirer(address)(_hirer)"];
13->1;
}
// Function: 8614.sol-CoinSparrow-deleteApprovedWalletAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(walletAddress != address(0))

IRs:
TMP_145 = CONVERT 0 to address
TMP_146(bool) = walletAddress != TMP_145
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(walletAddress != msg.sender)

IRs:
TMP_148(bool) = walletAddress != msg.sender
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
WalletRemoved(walletAddress)

IRs:
Emit WalletRemoved(walletAddress)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete withdrawerWhitelist[walletAddress]

IRs:
REF_10(bool) -> withdrawerWhitelist[walletAddress]
withdrawerWhitelist = delete REF_10 "];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 8614.sol-CoinSparrow-deleteArbitrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(arbitrator != address(0))

IRs:
TMP_164 = CONVERT 0 to address
TMP_165(bool) = arbitrator != TMP_164
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(arbitrator != msg.sender)

IRs:
TMP_167(bool) = arbitrator != msg.sender
TMP_168(None) = SOLIDITY_CALL require(bool)(TMP_167)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ArbitratorRemoved(arbitrator)

IRs:
Emit ArbitratorRemoved(arbitrator)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete aribitratorWhitelist[arbitrator]

IRs:
REF_13(bool) -> aribitratorWhitelist[arbitrator]
aribitratorWhitelist = delete REF_13 "];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 8614.sol-CoinSparrow-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
LogFallbackFunctionCalled(msg.sender,msg.value)

IRs:
Emit LogFallbackFunctionCalled(msg.sender,msg.value)"];
}
// Function: 8614.sol-CoinSparrow-getActualCompletionDate(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_432(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_432(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
jobCompleteDate = 0

IRs:
jobCompleteDate(uint32) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
jobEscrows[jobHash].exists

IRs:
REF_187(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_188(bool) -> REF_187.exists
CONDITION REF_188"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jobCompleteDate = jobEscrows[jobHash].jobCompleteDate

IRs:
REF_189(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_190(uint32) -> REF_189.jobCompleteDate
jobCompleteDate(uint32) := REF_190(uint32)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
jobCompleteDate

IRs:
RETURN jobCompleteDate"];
}
// Function: 8614.sol-CoinSparrow-getAgreedCompletionDate(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_431(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_431(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
agreedCompletionDate = 0

IRs:
agreedCompletionDate(uint32) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
jobEscrows[jobHash].exists

IRs:
REF_183(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_184(bool) -> REF_183.exists
CONDITION REF_184"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
agreedCompletionDate = jobEscrows[jobHash].agreedCompletionDate

IRs:
REF_185(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_186(uint32) -> REF_185.agreedCompletionDate
agreedCompletionDate(uint32) := REF_186(uint32)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
agreedCompletionDate

IRs:
RETURN agreedCompletionDate"];
}
// Function: 8614.sol-CoinSparrow-getContractVersion()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
COINSPARROW_CONTRACT_VERSION

IRs:
RETURN COINSPARROW_CONTRACT_VERSION"];
}
// Function: 8614.sol-CoinSparrow-getJobCanCancelAfter(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_429(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_429(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
hirerCanCancelAfter = 0

IRs:
hirerCanCancelAfter(uint32) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
jobEscrows[jobHash].exists

IRs:
REF_175(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_176(bool) -> REF_175.exists
CONDITION REF_176"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
hirerCanCancelAfter = jobEscrows[jobHash].hirerCanCancelAfter

IRs:
REF_177(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_178(uint32) -> REF_177.hirerCanCancelAfter
hirerCanCancelAfter(uint32) := REF_178(uint32)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
hirerCanCancelAfter

IRs:
RETURN hirerCanCancelAfter"];
}
// Function: 8614.sol-CoinSparrow-getJobHash(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(abi.encodePacked(_jobId,_hirer,_contractor,_value,_fee))

IRs:
TMP_441(bytes) = SOLIDITY_CALL abi.encodePacked()(_jobId,_hirer,_contractor,_value,_fee)
TMP_442(bytes32) = SOLIDITY_CALL keccak256()(TMP_441)
RETURN TMP_442"];
}
// Function: 8614.sol-CoinSparrow-getJobStatus(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_428(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_428(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
status = STATUS_JOB_NOT_EXIST

IRs:
status(uint8) := STATUS_JOB_NOT_EXIST(uint8)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
jobEscrows[jobHash].exists

IRs:
REF_171(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_172(bool) -> REF_171.exists
CONDITION REF_172"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
status = jobEscrows[jobHash].status

IRs:
REF_173(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_174(uint8) -> REF_173.status
status(uint8) := REF_174(uint8)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
status

IRs:
RETURN status"];
}
// Function: 8614.sol-CoinSparrow-getJobValue(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_433(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_433(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = 0

IRs:
amount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
jobEscrows[jobHash].exists

IRs:
REF_191(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_192(bool) -> REF_191.exists
CONDITION REF_192"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
amount = hirerEscrowMap[_hirer][jobHash]

IRs:
REF_193(mapping(bytes32 => uint256)) -> hirerEscrowMap[_hirer]
REF_194(uint256) -> REF_193[jobHash]
amount(uint256) := REF_194(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
amount

IRs:
RETURN amount"];
}
// Function: 8614.sol-CoinSparrow-getMaxSend()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
MAX_SEND

IRs:
RETURN MAX_SEND"];
}
// Function: 8614.sol-CoinSparrow-getSecondsToComplete(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_430(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_430(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
secondsToComplete = 0

IRs:
secondsToComplete(uint32) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
jobEscrows[jobHash].exists

IRs:
REF_179(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_180(bool) -> REF_179.exists
CONDITION REF_180"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
secondsToComplete = jobEscrows[jobHash].secondsToComplete

IRs:
REF_181(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_182(uint32) -> REF_181.secondsToComplete
secondsToComplete(uint32) := REF_182(uint32)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
secondsToComplete

IRs:
RETURN secondsToComplete"];
}
// Function: 8614.sol-CoinSparrow-hirerCancel(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_299(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_299(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(jobEscrows[jobHash].exists)

IRs:
REF_95(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_96(bool) -> REF_95.exists
TMP_300(None) = SOLIDITY_CALL require(bool)(REF_96)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(jobEscrows[jobHash].hirerCanCancelAfter > 0)

IRs:
REF_97(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_98(uint32) -> REF_97.hirerCanCancelAfter
TMP_301(bool) = REF_98 > 0
TMP_302(None) = SOLIDITY_CALL require(bool)(TMP_301)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(jobEscrows[jobHash].status == STATUS_JOB_CREATED)

IRs:
REF_99(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_100(uint8) -> REF_99.status
TMP_303(bool) = REF_100 == STATUS_JOB_CREATED
TMP_304(None) = SOLIDITY_CALL require(bool)(TMP_303)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(jobEscrows[jobHash].hirerCanCancelAfter < block.timestamp)

IRs:
REF_101(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_102(uint32) -> REF_101.hirerCanCancelAfter
TMP_305(bool) = REF_102 < block.timestamp
TMP_306(None) = SOLIDITY_CALL require(bool)(TMP_305)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
jobValue = hirerEscrowMap[_hirer][jobHash]

IRs:
REF_103(mapping(bytes32 => uint256)) -> hirerEscrowMap[_hirer]
REF_104(uint256) -> REF_103[jobHash]
jobValue(uint256) := REF_104(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(jobValue > 0 && jobValue == _value)

IRs:
TMP_307(bool) = jobValue > 0
TMP_308(bool) = jobValue == _value
TMP_309(bool) = TMP_307 && TMP_308
TMP_310(None) = SOLIDITY_CALL require(bool)(TMP_309)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(jobValue >= jobValue.sub(_fee))

IRs:
TMP_311(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['jobValue', '_fee'] 
TMP_312(bool) = jobValue >= TMP_311
TMP_313(None) = SOLIDITY_CALL require(bool)(TMP_312)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(totalInEscrow >= jobValue && totalInEscrow > 0)

IRs:
TMP_314(bool) = totalInEscrow >= jobValue
TMP_315(bool) = totalInEscrow > 0
TMP_316(bool) = TMP_314 && TMP_315
TMP_317(None) = SOLIDITY_CALL require(bool)(TMP_316)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
delete jobEscrows[jobHash]

IRs:
REF_106(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
jobEscrows = delete REF_106 "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete hirerEscrowMap[msg.sender][jobHash]

IRs:
REF_107(mapping(bytes32 => uint256)) -> hirerEscrowMap[msg.sender]
REF_108(uint256) -> REF_107[jobHash]
REF_107 = delete REF_108 "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
CancelledByHirer(jobHash,msg.sender)

IRs:
Emit CancelledByHirer(jobHash,msg.sender)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
totalInEscrow = totalInEscrow.sub(jobValue)

IRs:
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalInEscrow', 'jobValue'] 
totalInEscrow(uint256) := TMP_319(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_hirer.transfer(jobValue)

IRs:
Transfer dest:_hirer value:jobValue"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyHirer(_hirer)

IRs:
MODIFIER_CALL, CoinSparrow.onlyHirer(address)(_hirer)"];
15->1;
}
// Function: 8614.sol-CoinSparrow-hirerLastResortRefund(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_245(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_245(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(jobEscrows[jobHash].exists)

IRs:
REF_51(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_52(bool) -> REF_51.exists
TMP_246(None) = SOLIDITY_CALL require(bool)(REF_52)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(jobEscrows[jobHash].status == STATUS_JOB_STARTED)

IRs:
REF_53(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_54(uint8) -> REF_53.status
TMP_247(bool) = REF_54 == STATUS_JOB_STARTED
TMP_248(None) = SOLIDITY_CALL require(bool)(TMP_247)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(block.timestamp > jobEscrows[jobHash].agreedCompletionDate + 2419200)

IRs:
REF_55(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_56(uint32) -> REF_55.agreedCompletionDate
TMP_249(uint32) = REF_56 + 2419200
TMP_250(bool) = block.timestamp > TMP_249
TMP_251(None) = SOLIDITY_CALL require(bool)(TMP_250)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
jobValue = hirerEscrowMap[msg.sender][jobHash]

IRs:
REF_57(mapping(bytes32 => uint256)) -> hirerEscrowMap[msg.sender]
REF_58(uint256) -> REF_57[jobHash]
jobValue(uint256) := REF_58(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(jobValue > 0 && jobValue == _value)

IRs:
TMP_252(bool) = jobValue > 0
TMP_253(bool) = jobValue == _value
TMP_254(bool) = TMP_252 && TMP_253
TMP_255(None) = SOLIDITY_CALL require(bool)(TMP_254)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(jobValue >= jobValue.sub(_fee))

IRs:
TMP_256(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['jobValue', '_fee'] 
TMP_257(bool) = jobValue >= TMP_256
TMP_258(None) = SOLIDITY_CALL require(bool)(TMP_257)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(totalInEscrow >= jobValue && totalInEscrow > 0)

IRs:
TMP_259(bool) = totalInEscrow >= jobValue
TMP_260(bool) = totalInEscrow > 0
TMP_261(bool) = TMP_259 && TMP_260
TMP_262(None) = SOLIDITY_CALL require(bool)(TMP_261)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
HirerLastResortRefund(jobHash,_hirer,_contractor,jobValue)

IRs:
Emit HirerLastResortRefund(jobHash,_hirer,_contractor,jobValue)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
delete jobEscrows[jobHash]

IRs:
REF_60(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
jobEscrows = delete REF_60 "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete hirerEscrowMap[_hirer][jobHash]

IRs:
REF_61(mapping(bytes32 => uint256)) -> hirerEscrowMap[_hirer]
REF_62(uint256) -> REF_61[jobHash]
REF_61 = delete REF_62 "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
totalInEscrow = totalInEscrow.sub(jobValue)

IRs:
TMP_264(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalInEscrow', 'jobValue'] 
totalInEscrow(uint256) := TMP_264(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_hirer.transfer(jobValue)

IRs:
Transfer dest:_hirer value:jobValue"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyHirer(_hirer)

IRs:
MODIFIER_CALL, CoinSparrow.onlyHirer(address)(_hirer)"];
14->1;
}
// Function: 8614.sol-CoinSparrow-hirerReleaseFunds(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_198(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_198(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(jobEscrows[jobHash].exists)

IRs:
REF_21(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_22(bool) -> REF_21.exists
TMP_199(None) = SOLIDITY_CALL require(bool)(REF_22)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(hirerEscrowMap[msg.sender][jobHash] > 0)

IRs:
REF_23(mapping(bytes32 => uint256)) -> hirerEscrowMap[msg.sender]
REF_24(uint256) -> REF_23[jobHash]
TMP_200(bool) = REF_24 > 0
TMP_201(None) = SOLIDITY_CALL require(bool)(TMP_200)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
jobValue = hirerEscrowMap[msg.sender][jobHash]

IRs:
REF_25(mapping(bytes32 => uint256)) -> hirerEscrowMap[msg.sender]
REF_26(uint256) -> REF_25[jobHash]
jobValue(uint256) := REF_26(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(jobValue > 0 && jobValue == _value)

IRs:
TMP_202(bool) = jobValue > 0
TMP_203(bool) = jobValue == _value
TMP_204(bool) = TMP_202 && TMP_203
TMP_205(None) = SOLIDITY_CALL require(bool)(TMP_204)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(jobValue >= jobValue.sub(_fee))

IRs:
TMP_206(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['jobValue', '_fee'] 
TMP_207(bool) = jobValue >= TMP_206
TMP_208(None) = SOLIDITY_CALL require(bool)(TMP_207)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(totalInEscrow >= jobValue && totalInEscrow > 0)

IRs:
TMP_209(bool) = totalInEscrow >= jobValue
TMP_210(bool) = totalInEscrow > 0
TMP_211(bool) = TMP_209 && TMP_210
TMP_212(None) = SOLIDITY_CALL require(bool)(TMP_211)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
HirerReleased(jobHash,msg.sender,_contractor,jobValue)

IRs:
Emit HirerReleased(jobHash,msg.sender,_contractor,jobValue)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
AddFeesToCoinSparrowPool(jobHash,_fee)

IRs:
Emit AddFeesToCoinSparrowPool(jobHash,_fee)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
delete jobEscrows[jobHash]

IRs:
REF_28(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
jobEscrows = delete REF_28 "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete hirerEscrowMap[msg.sender][jobHash]

IRs:
REF_29(mapping(bytes32 => uint256)) -> hirerEscrowMap[msg.sender]
REF_30(uint256) -> REF_29[jobHash]
REF_29 = delete REF_30 "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
feesAvailableForWithdraw = feesAvailableForWithdraw.add(_fee)

IRs:
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['feesAvailableForWithdraw', '_fee'] 
feesAvailableForWithdraw(uint256) := TMP_215(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
totalInEscrow = totalInEscrow.sub(jobValue)

IRs:
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalInEscrow', 'jobValue'] 
totalInEscrow(uint256) := TMP_216(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_contractor.transfer(jobValue.sub(_fee))

IRs:
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['jobValue', '_fee'] 
Transfer dest:_contractor value:TMP_217"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyHirer(_hirer)

IRs:
MODIFIER_CALL, CoinSparrow.onlyHirer(address)(_hirer)"];
15->1;
}
// Function: 8614.sol-CoinSparrow-howManyFees()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
feesAvailableForWithdraw

IRs:
RETURN feesAvailableForWithdraw"];
}
// Function: 8614.sol-CoinSparrow-howMuchInEscrow()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalInEscrow

IRs:
RETURN totalInEscrow"];
}
// Function: 8614.sol-CoinSparrow-isApprovedWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(withdrawerWhitelist[walletCheck] || walletCheck == primaryWallet)

IRs:
REF_11(bool) -> withdrawerWhitelist[walletCheck]
TMP_152(bool) = walletCheck == primaryWallet
TMP_153(bool) = REF_11 || TMP_152
RETURN TMP_153"];
}
// Function: 8614.sol-CoinSparrow-isArbitrator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(aribitratorWhitelist[arbitratorCheck] || arbitratorCheck == primaryArbitrator)

IRs:
REF_14(bool) -> aribitratorWhitelist[arbitratorCheck]
TMP_171(bool) = arbitratorCheck == primaryArbitrator
TMP_172(bool) = REF_14 || TMP_171
RETURN TMP_172"];
}
// Function: 8614.sol-CoinSparrow-jobCompleted(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_275(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_275(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(jobEscrows[jobHash].exists)

IRs:
REF_77(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_78(bool) -> REF_77.exists
TMP_276(None) = SOLIDITY_CALL require(bool)(REF_78)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(jobEscrows[jobHash].status == STATUS_JOB_STARTED)

IRs:
REF_79(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_80(uint8) -> REF_79.status
TMP_277(bool) = REF_80 == STATUS_JOB_STARTED
TMP_278(None) = SOLIDITY_CALL require(bool)(TMP_277)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jobEscrows[jobHash].status = STATUS_JOB_COMPLETED

IRs:
REF_81(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_82(uint8) -> REF_81.status
REF_82(uint8) (->jobEscrows) := STATUS_JOB_COMPLETED(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
jobEscrows[jobHash].jobCompleteDate = uint32(block.timestamp)

IRs:
REF_83(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_84(uint32) -> REF_83.jobCompleteDate
TMP_279 = CONVERT block.timestamp to uint32
REF_84(uint32) (->jobEscrows) := TMP_279(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ContractorCompletedJob(jobHash,msg.sender)

IRs:
Emit ContractorCompletedJob(jobHash,msg.sender)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyContractor(_contractor)

IRs:
MODIFIER_CALL, CoinSparrow.onlyContractor(address)(_contractor)"];
7->1;
}
// Function: 8614.sol-CoinSparrow-jobStarted(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_267(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_267(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(jobEscrows[jobHash].exists)

IRs:
REF_65(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_66(bool) -> REF_65.exists
TMP_268(None) = SOLIDITY_CALL require(bool)(REF_66)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(jobEscrows[jobHash].status == STATUS_JOB_CREATED)

IRs:
REF_67(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_68(uint8) -> REF_67.status
TMP_269(bool) = REF_68 == STATUS_JOB_CREATED
TMP_270(None) = SOLIDITY_CALL require(bool)(TMP_269)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jobEscrows[jobHash].status = STATUS_JOB_STARTED

IRs:
REF_69(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_70(uint8) -> REF_69.status
REF_70(uint8) (->jobEscrows) := STATUS_JOB_STARTED(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
jobEscrows[jobHash].hirerCanCancelAfter = 0

IRs:
REF_71(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_72(uint32) -> REF_71.hirerCanCancelAfter
REF_72(uint32) (->jobEscrows) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
jobEscrows[jobHash].agreedCompletionDate = uint32(block.timestamp) + jobEscrows[jobHash].secondsToComplete

IRs:
REF_73(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_74(uint32) -> REF_73.agreedCompletionDate
TMP_271 = CONVERT block.timestamp to uint32
REF_75(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_76(uint32) -> REF_75.secondsToComplete
TMP_272(uint32) = TMP_271 + REF_76
REF_74(uint32) (->jobEscrows) := TMP_272(uint32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ContractorStartedJob(jobHash,msg.sender)

IRs:
Emit ContractorStartedJob(jobHash,msg.sender)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyContractor(_contractor)

IRs:
MODIFIER_CALL, CoinSparrow.onlyContractor(address)(_contractor)"];
8->1;
}
// Function: 8614.sol-CoinSparrow-onlyApprovedWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(withdrawerWhitelist[_to] == true || primaryWallet == _to)

IRs:
REF_199(bool) -> withdrawerWhitelist[_to]
TMP_448(bool) = REF_199 == True
TMP_449(bool) = primaryWallet == _to
TMP_450(bool) = TMP_448 || TMP_449
TMP_451(None) = SOLIDITY_CALL require(bool)(TMP_450)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-CoinSparrow-onlyArbitrator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(aribitratorWhitelist[msg.sender] == true || msg.sender == primaryArbitrator)

IRs:
REF_200(bool) -> aribitratorWhitelist[msg.sender]
TMP_452(bool) = REF_200 == True
TMP_453(bool) = msg.sender == primaryArbitrator
TMP_454(bool) = TMP_452 || TMP_453
TMP_455(None) = SOLIDITY_CALL require(bool)(TMP_454)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-CoinSparrow-onlyContractor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _contractor)

IRs:
TMP_458(bool) = msg.sender == _contractor
TMP_459(None) = SOLIDITY_CALL require(bool)(TMP_458)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-CoinSparrow-onlyHirer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _hirer)

IRs:
TMP_456(bool) = msg.sender == _hirer
TMP_457(None) = SOLIDITY_CALL require(bool)(TMP_456)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-CoinSparrow-onlyHirerOrContractor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _hirer || msg.sender == _contractor)

IRs:
TMP_460(bool) = msg.sender == _hirer
TMP_461(bool) = msg.sender == _contractor
TMP_462(bool) = TMP_460 || TMP_461
TMP_463(None) = SOLIDITY_CALL require(bool)(TMP_462)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-CoinSparrow-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_446(bool) = msg.sender == owner
TMP_447(None) = SOLIDITY_CALL require(bool)(TMP_446)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-CoinSparrow-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 8614.sol-CoinSparrow-processMutuallyAgreedJobCancellation(bytes16,address,address,uint256,uint256,uint8,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_331(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_331(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(jobEscrows[jobHash].exists)

IRs:
REF_119(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_120(bool) -> REF_119.exists
TMP_332(None) = SOLIDITY_CALL require(bool)(REF_120)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == _hirer || msg.sender == _contractor)

IRs:
TMP_333(bool) = msg.sender == _hirer
TMP_334(bool) = msg.sender == _contractor
TMP_335(bool) = TMP_333 || TMP_334
TMP_336(None) = SOLIDITY_CALL require(bool)(TMP_335)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_contractorPercent <= 100 && _contractorPercent >= 0)

IRs:
TMP_337(bool) = _contractorPercent <= 100
TMP_338(bool) = _contractorPercent >= 0
TMP_339(bool) = TMP_337 && TMP_338
TMP_340(None) = SOLIDITY_CALL require(bool)(TMP_339)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(checkRefundSignature(_contractorPercent,_hirerMsgSig,_hirer) && checkRefundSignature(_contractorPercent,_contractorMsgSig,_contractor))

IRs:
TMP_341(bool) = INTERNAL_CALL, CoinSparrow.checkRefundSignature(uint8,bytes,address)(_contractorPercent,_hirerMsgSig,_hirer)
TMP_342(bool) = INTERNAL_CALL, CoinSparrow.checkRefundSignature(uint8,bytes,address)(_contractorPercent,_contractorMsgSig,_contractor)
TMP_343(bool) = TMP_341 && TMP_342
TMP_344(None) = SOLIDITY_CALL require(bool)(TMP_343)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
jobValue = hirerEscrowMap[_hirer][jobHash]

IRs:
REF_121(mapping(bytes32 => uint256)) -> hirerEscrowMap[_hirer]
REF_122(uint256) -> REF_121[jobHash]
jobValue(uint256) := REF_122(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(jobValue > 0 && jobValue == _value)

IRs:
TMP_345(bool) = jobValue > 0
TMP_346(bool) = jobValue == _value
TMP_347(bool) = TMP_345 && TMP_346
TMP_348(None) = SOLIDITY_CALL require(bool)(TMP_347)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(jobValue >= jobValue.sub(_fee))

IRs:
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['jobValue', '_fee'] 
TMP_350(bool) = jobValue >= TMP_349
TMP_351(None) = SOLIDITY_CALL require(bool)(TMP_350)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(totalInEscrow >= jobValue && totalInEscrow > 0)

IRs:
TMP_352(bool) = totalInEscrow >= jobValue
TMP_353(bool) = totalInEscrow > 0
TMP_354(bool) = TMP_352 && TMP_353
TMP_355(None) = SOLIDITY_CALL require(bool)(TMP_354)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalInEscrow = totalInEscrow.sub(jobValue)

IRs:
TMP_356(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalInEscrow', 'jobValue'] 
totalInEscrow(uint256) := TMP_356(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
feesAvailableForWithdraw = feesAvailableForWithdraw.add(_fee)

IRs:
TMP_357(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['feesAvailableForWithdraw', '_fee'] 
feesAvailableForWithdraw(uint256) := TMP_357(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
delete jobEscrows[jobHash]

IRs:
REF_126(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
jobEscrows = delete REF_126 "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
delete hirerEscrowMap[_hirer][jobHash]

IRs:
REF_127(mapping(bytes32 => uint256)) -> hirerEscrowMap[_hirer]
REF_128(uint256) -> REF_127[jobHash]
REF_127 = delete REF_128 "];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
contractorAmount = jobValue.sub(_fee).mul(_contractorPercent).div(100)

IRs:
TMP_358(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['jobValue', '_fee'] 
TMP_359(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_358', '_contractorPercent'] 
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_359', '100'] 
contractorAmount(uint256) := TMP_360(uint256)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
hirerAmount = jobValue.sub(_fee).mul(100 - _contractorPercent).div(100)

IRs:
TMP_361(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['jobValue', '_fee'] 
TMP_362(uint256) = 100 - _contractorPercent
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_361', 'TMP_362'] 
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_363', '100'] 
hirerAmount(uint256) := TMP_364(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
MutuallyAgreedCancellation(jobHash,msg.sender,hirerAmount,contractorAmount)

IRs:
Emit MutuallyAgreedCancellation(jobHash,msg.sender,hirerAmount,contractorAmount)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
AddFeesToCoinSparrowPool(jobHash,_fee)

IRs:
Emit AddFeesToCoinSparrowPool(jobHash,_fee)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
contractorAmount > 0

IRs:
TMP_367(bool) = contractorAmount > 0
CONDITION TMP_367"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_contractor.transfer(contractorAmount)

IRs:
Transfer dest:_contractor value:contractorAmount"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
hirerAmount > 0

IRs:
TMP_369(bool) = hirerAmount > 0
CONDITION TMP_369"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_hirer.transfer(hirerAmount)

IRs:
Transfer dest:_hirer value:hirerAmount"];
22->23;
23[label="Node Type: END_IF 23
"];
}
// Function: 8614.sol-CoinSparrow-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_127 = CONVERT 0 to address
owner(address) := TMP_127(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8614.sol-CoinSparrow-requestDispute(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_371(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_371(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(jobEscrows[jobHash].exists)

IRs:
REF_137(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_138(bool) -> REF_137.exists
TMP_372(None) = SOLIDITY_CALL require(bool)(REF_138)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(jobEscrows[jobHash].status == STATUS_JOB_STARTED || jobEscrows[jobHash].status == STATUS_JOB_COMPLETED || jobEscrows[jobHash].status == STATUS_HIRER_REQUEST_CANCEL || jobEscrows[jobHash].status == STATUS_CONTRACTOR_REQUEST_CANCEL)

IRs:
REF_139(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_140(uint8) -> REF_139.status
TMP_373(bool) = REF_140 == STATUS_JOB_STARTED
REF_141(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_142(uint8) -> REF_141.status
TMP_374(bool) = REF_142 == STATUS_JOB_COMPLETED
TMP_375(bool) = TMP_373 || TMP_374
REF_143(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_144(uint8) -> REF_143.status
TMP_376(bool) = REF_144 == STATUS_HIRER_REQUEST_CANCEL
TMP_377(bool) = TMP_375 || TMP_376
REF_145(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_146(uint8) -> REF_145.status
TMP_378(bool) = REF_146 == STATUS_CONTRACTOR_REQUEST_CANCEL
TMP_379(bool) = TMP_377 || TMP_378
TMP_380(None) = SOLIDITY_CALL require(bool)(TMP_379)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
jobEscrows[jobHash].status = STATUS_JOB_IN_DISPUTE

IRs:
REF_147(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_148(uint8) -> REF_147.status
REF_148(uint8) (->jobEscrows) := STATUS_JOB_IN_DISPUTE(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
DisputeRequested(jobHash,msg.sender)

IRs:
Emit DisputeRequested(jobHash,msg.sender)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyHirerOrContractor(_hirer,_contractor)

IRs:
MODIFIER_CALL, CoinSparrow.onlyHirerOrContractor(address,address)(_hirer,_contractor)"];
6->1;
}
// Function: 8614.sol-CoinSparrow-requestMutualJobCancellation(bytes16,address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_322(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_322(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(jobEscrows[jobHash].exists)

IRs:
REF_111(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_112(bool) -> REF_111.exists
TMP_323(None) = SOLIDITY_CALL require(bool)(REF_112)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(jobEscrows[jobHash].status == STATUS_JOB_STARTED)

IRs:
REF_113(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_114(uint8) -> REF_113.status
TMP_324(bool) = REF_114 == STATUS_JOB_STARTED
TMP_325(None) = SOLIDITY_CALL require(bool)(TMP_324)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.sender == _hirer

IRs:
TMP_326(bool) = msg.sender == _hirer
CONDITION TMP_326"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
jobEscrows[jobHash].status = STATUS_HIRER_REQUEST_CANCEL

IRs:
REF_115(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_116(uint8) -> REF_115.status
REF_116(uint8) (->jobEscrows) := STATUS_HIRER_REQUEST_CANCEL(uint8)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
HirerRequestedCancel(jobHash,msg.sender)

IRs:
Emit HirerRequestedCancel(jobHash,msg.sender)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
msg.sender == _contractor

IRs:
TMP_328(bool) = msg.sender == _contractor
CONDITION TMP_328"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
jobEscrows[jobHash].status = STATUS_CONTRACTOR_REQUEST_CANCEL

IRs:
REF_117(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_118(uint8) -> REF_117.status
REF_118(uint8) (->jobEscrows) := STATUS_CONTRACTOR_REQUEST_CANCEL(uint8)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ContractorRequestedCancel(jobHash,msg.sender)

IRs:
Emit ContractorRequestedCancel(jobHash,msg.sender)"];
10->11;
11[label="Node Type: END_IF 11
"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyHirerOrContractor(_hirer,_contractor)

IRs:
MODIFIER_CALL, CoinSparrow.onlyHirerOrContractor(address,address)(_hirer,_contractor)"];
12->1;
}
// Function: 8614.sol-CoinSparrow-resolveDispute(bytes16,address,address,uint256,uint256,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->19;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
jobHash = getJobHash(_jobId,_hirer,_contractor,_value,_fee)

IRs:
TMP_383(bytes32) = INTERNAL_CALL, CoinSparrow.getJobHash(bytes16,address,address,uint256,uint256)(_jobId,_hirer,_contractor,_value,_fee)
jobHash(bytes32) := TMP_383(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(jobEscrows[jobHash].exists)

IRs:
REF_149(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_150(bool) -> REF_149.exists
TMP_384(None) = SOLIDITY_CALL require(bool)(REF_150)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(jobEscrows[jobHash].status == STATUS_JOB_IN_DISPUTE)

IRs:
REF_151(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
REF_152(uint8) -> REF_151.status
TMP_385(bool) = REF_152 == STATUS_JOB_IN_DISPUTE
TMP_386(None) = SOLIDITY_CALL require(bool)(TMP_385)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_contractorPercent <= 100)

IRs:
TMP_387(bool) = _contractorPercent <= 100
TMP_388(None) = SOLIDITY_CALL require(bool)(TMP_387)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
jobValue = hirerEscrowMap[_hirer][jobHash]

IRs:
REF_153(mapping(bytes32 => uint256)) -> hirerEscrowMap[_hirer]
REF_154(uint256) -> REF_153[jobHash]
jobValue(uint256) := REF_154(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(jobValue > 0 && jobValue == _value)

IRs:
TMP_389(bool) = jobValue > 0
TMP_390(bool) = jobValue == _value
TMP_391(bool) = TMP_389 && TMP_390
TMP_392(None) = SOLIDITY_CALL require(bool)(TMP_391)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(jobValue >= jobValue.sub(_fee))

IRs:
TMP_393(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['jobValue', '_fee'] 
TMP_394(bool) = jobValue >= TMP_393
TMP_395(None) = SOLIDITY_CALL require(bool)(TMP_394)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(totalInEscrow >= jobValue && totalInEscrow > 0)

IRs:
TMP_396(bool) = totalInEscrow >= jobValue
TMP_397(bool) = totalInEscrow > 0
TMP_398(bool) = TMP_396 && TMP_397
TMP_399(None) = SOLIDITY_CALL require(bool)(TMP_398)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalInEscrow = totalInEscrow.sub(jobValue)

IRs:
TMP_400(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalInEscrow', 'jobValue'] 
totalInEscrow(uint256) := TMP_400(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
feesAvailableForWithdraw = feesAvailableForWithdraw.add(_fee)

IRs:
TMP_401(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['feesAvailableForWithdraw', '_fee'] 
feesAvailableForWithdraw(uint256) := TMP_401(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
delete jobEscrows[jobHash]

IRs:
REF_158(CoinSparrow.JobEscrow) -> jobEscrows[jobHash]
jobEscrows = delete REF_158 "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
delete hirerEscrowMap[_hirer][jobHash]

IRs:
REF_159(mapping(bytes32 => uint256)) -> hirerEscrowMap[_hirer]
REF_160(uint256) -> REF_159[jobHash]
REF_159 = delete REF_160 "];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
contractorAmount = jobValue.sub(_fee).mul(_contractorPercent).div(100)

IRs:
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['jobValue', '_fee'] 
TMP_403(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_402', '_contractorPercent'] 
TMP_404(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_403', '100'] 
contractorAmount(uint256) := TMP_404(uint256)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
hirerAmount = jobValue.sub(_fee).mul(100 - _contractorPercent).div(100)

IRs:
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['jobValue', '_fee'] 
TMP_406(uint256) = 100 - _contractorPercent
TMP_407(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_405', 'TMP_406'] 
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_407', '100'] 
hirerAmount(uint256) := TMP_408(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
DisputeResolved(jobHash,msg.sender,hirerAmount,contractorAmount)

IRs:
Emit DisputeResolved(jobHash,msg.sender,hirerAmount,contractorAmount)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
AddFeesToCoinSparrowPool(jobHash,_fee)

IRs:
Emit AddFeesToCoinSparrowPool(jobHash,_fee)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_contractor.transfer(contractorAmount)

IRs:
Transfer dest:_contractor value:contractorAmount"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_hirer.transfer(hirerAmount)

IRs:
Transfer dest:_hirer value:hirerAmount"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
onlyArbitrator()

IRs:
MODIFIER_CALL, Arbitrator.onlyArbitrator()()"];
19->1;
}
// Function: 8614.sol-CoinSparrow-setMaxSend(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_maxSend > 0)

IRs:
TMP_425(bool) = _maxSend > 0
TMP_426(None) = SOLIDITY_CALL require(bool)(TMP_425)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MAX_SEND = _maxSend

IRs:
MAX_SEND(uint256) := _maxSend(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8614.sol-CoinSparrow-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
STATUS_JOB_NOT_EXIST = 1

IRs:
STATUS_JOB_NOT_EXIST(uint8) := 1(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
STATUS_JOB_CREATED = 2

IRs:
STATUS_JOB_CREATED(uint8) := 2(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
STATUS_JOB_STARTED = 3

IRs:
STATUS_JOB_STARTED(uint8) := 3(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
STATUS_HIRER_REQUEST_CANCEL = 4

IRs:
STATUS_HIRER_REQUEST_CANCEL(uint8) := 4(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
STATUS_JOB_COMPLETED = 5

IRs:
STATUS_JOB_COMPLETED(uint8) := 5(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
STATUS_JOB_IN_DISPUTE = 6

IRs:
STATUS_JOB_IN_DISPUTE(uint8) := 6(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
STATUS_HIRER_CANCELLED = 7

IRs:
STATUS_HIRER_CANCELLED(uint8) := 7(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
STATUS_CONTRACTOR_CANCELLED = 8

IRs:
STATUS_CONTRACTOR_CANCELLED(uint8) := 8(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
STATUS_FINISHED_FUNDS_RELEASED = 9

IRs:
STATUS_FINISHED_FUNDS_RELEASED(uint8) := 9(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
STATUS_FINISHED_FUNDS_RELEASED_BY_CONTRACTOR = 10

IRs:
STATUS_FINISHED_FUNDS_RELEASED_BY_CONTRACTOR(uint8) := 10(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
STATUS_CONTRACTOR_REQUEST_CANCEL = 11

IRs:
STATUS_CONTRACTOR_REQUEST_CANCEL(uint8) := 11(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
STATUS_MUTUAL_CANCELLATION_PROCESSED = 12

IRs:
STATUS_MUTUAL_CANCELLATION_PROCESSED(uint8) := 12(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
COINSPARROW_CONTRACT_VERSION = 1

IRs:
COINSPARROW_CONTRACT_VERSION(uint8) := 1(uint256)"];
}
// Function: 8614.sol-CoinSparrow-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 8614.sol-CoinSparrow-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8614.sol-CoinSparrow-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 8614.sol-CoinSparrow-validateRefundSignature(uint8,bytes,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
checkRefundSignature(_contractorPercent,_sigMsg,_signer)

IRs:
TMP_434(bool) = INTERNAL_CALL, CoinSparrow.checkRefundSignature(uint8,bytes,address)(_contractorPercent,_sigMsg,_signer)
RETURN TMP_434"];
}
// Function: 8614.sol-CoinSparrow-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_443 = UnaryType.BANG paused 
TMP_444(None) = SOLIDITY_CALL require(bool)(TMP_443)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-CoinSparrow-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_445(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-CoinSparrow-withdrawFees(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_414(bool) = _amount > 0
TMP_415(None) = SOLIDITY_CALL require(bool)(TMP_414)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= feesAvailableForWithdraw && feesAvailableForWithdraw > 0)

IRs:
TMP_416(bool) = _amount <= feesAvailableForWithdraw
TMP_417(bool) = feesAvailableForWithdraw > 0
TMP_418(bool) = TMP_416 && TMP_417
TMP_419(None) = SOLIDITY_CALL require(bool)(TMP_418)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
feesAvailableForWithdraw = feesAvailableForWithdraw.sub(_amount)

IRs:
TMP_420(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['feesAvailableForWithdraw', '_amount'] 
feesAvailableForWithdraw(uint256) := TMP_420(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
WithdrawFeesFromCoinSparrowPool(msg.sender,_to,_amount)

IRs:
Emit WithdrawFeesFromCoinSparrowPool(msg.sender,_to,_amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_to.transfer(_amount)

IRs:
Transfer dest:_to value:_amount"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyApprovedWallet(_to)

IRs:
MODIFIER_CALL, ApprovedWithdrawer.onlyApprovedWallet(address)(_to)"];
7->1;
}
// Function: 8614.sol-ECRecovery-recover(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_0 -> LENGTH sig
TMP_23(bool) = REF_0 != 65
CONDITION TMP_23"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(address(0))

IRs:
TMP_24 = CONVERT 0 to address
RETURN TMP_24"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_25(bool) = v < 27
CONDITION TMP_25"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_26(bool) = v != 27
TMP_27(bool) = v != 28
TMP_28(bool) = TMP_26 && TMP_27
CONDITION TMP_28"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(address(0))

IRs:
TMP_29 = CONVERT 0 to address
RETURN TMP_29"];
14[label="Node Type: RETURN 14

EXPRESSION:
ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)

IRs:
TMP_30(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TMP_30"];
}
// Function: 8614.sol-ECRecovery-toEthSignedMessageHash(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(Ethereum Signed Message:
32,hash)

IRs:
TMP_31(bytes32) = SOLIDITY_CALL keccak256()(Ethereum Signed Message:
32,hash)
RETURN TMP_31"];
}
// Function: 8614.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = _newOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 8614.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8614.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_1 = CONVERT 0 to address
owner(address) := TMP_1(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8614.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8614.sol-Pausable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_37 = CONVERT 0 to address
TMP_38(bool) = _newOwner != TMP_37
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 8614.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8614.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_47(bool) = msg.sender == owner
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 8614.sol-Pausable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_33 = CONVERT 0 to address
owner(address) := TMP_33(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8614.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 8614.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8614.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 8614.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_49 = UnaryType.BANG paused 
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_51(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8614.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_20(uint256) = a + b
c(uint256) := TMP_20(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_21(bool) = c >= a
TMP_22(None) = SOLIDITY_CALL assert(bool)(TMP_21)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 8614.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_16(uint256) = a / b
RETURN TMP_16"];
}
// Function: 8614.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_11(bool) = a == 0
CONDITION TMP_11"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_12(uint256) = a * b
c(uint256) := TMP_12(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_13(uint256) = c / a
TMP_14(bool) = TMP_13 == b
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 8614.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_17(bool) = b <= a
TMP_18(None) = SOLIDITY_CALL assert(bool)(TMP_17)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_19(uint256) = a - b
RETURN TMP_19"];
}
}
