digraph G {
// Function: 8750.sol-Erc20Wrapper-allowance(address,address)
digraph{
}
// Function: 8750.sol-Erc20Wrapper-approve(address,uint256)
digraph{
}
// Function: 8750.sol-Erc20Wrapper-balanceOf(address)
digraph{
}
// Function: 8750.sol-Erc20Wrapper-totalSupply()
digraph{
}
// Function: 8750.sol-Erc20Wrapper-transfer(address,uint256)
digraph{
}
// Function: 8750.sol-Erc20Wrapper-transferFrom(address,address,uint256)
digraph{
}
// Function: 8750.sol-LemurTokenSale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! hasClosed())

IRs:
TMP_43(bool) = INTERNAL_CALL, LemurTokenSale.hasClosed()()
TMP_44 = UnaryType.BANG TMP_43 
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(token != address(0) && wallet != address(0) && rate > 0)

IRs:
TMP_46 = CONVERT 0 to address
TMP_47(bool) = token != TMP_46
TMP_48 = CONVERT 0 to address
TMP_49(bool) = wallet != TMP_48
TMP_50(bool) = TMP_47 && TMP_49
TMP_51(bool) = rate > 0
TMP_52(bool) = TMP_50 && TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_54 = CONVERT 0 to address
TMP_55(bool) = _beneficiary != TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
amount = msg.value

IRs:
amount(uint256) := msg.value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(amount >= 10000000000000000)

IRs:
TMP_57(bool) = amount >= 10000000000000000
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tokenAmount = amount.mul(rate)

IRs:
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amount', 'rate'] 
tokenAmount(uint256) := TMP_59(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
amountRaised = amountRaised.add(amount)

IRs:
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['amountRaised', 'amount'] 
amountRaised(uint256) := TMP_60(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(token.transfer(_beneficiary,tokenAmount))

IRs:
TMP_61(bool) = HIGH_LEVEL_CALL, dest:token(Erc20Wrapper), function:transfer, arguments:['_beneficiary', 'tokenAmount']  
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
TokenPurchase(msg.sender,_beneficiary,amount,tokenAmount)

IRs:
Emit TokenPurchase(msg.sender,_beneficiary,amount,tokenAmount)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
wallet.transfer(amount)

IRs:
Transfer dest:wallet value:amount"];
}
// Function: 8750.sol-LemurTokenSale-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
openingTime = block.timestamp

IRs:
openingTime(uint256) := block.timestamp(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
closingTime = openingTime.add(7776000)

IRs:
TMP_24(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['openingTime', '7776000'] 
closingTime(uint256) := TMP_24(uint256)"];
}
// Function: 8750.sol-LemurTokenSale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, LemurTokenSale.buyTokens(address)(msg.sender)"];
}
// Function: 8750.sol-LemurTokenSale-hasClosed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
block.timestamp > closingTime

IRs:
TMP_41(bool) = block.timestamp > closingTime
RETURN TMP_41"];
}
// Function: 8750.sol-LemurTokenSale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_65(bool) = msg.sender == owner
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8750.sol-LemurTokenSale-setClosingTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_days >= 1)

IRs:
TMP_36(bool) = _days >= 1
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
closingTime = openingTime.add(_days.mul(86400))

IRs:
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_days', '86400'] 
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['openingTime', 'TMP_38'] 
closingTime(uint256) := TMP_39(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8750.sol-LemurTokenSale-setRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_33(bool) = _rate > 0
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8750.sol-LemurTokenSale-setToken(Erc20Wrapper)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token != address(0))

IRs:
TMP_25 = CONVERT 0 to address
TMP_26(bool) = _token != TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token = _token

IRs:
token(Erc20Wrapper) := _token(Erc20Wrapper)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8750.sol-LemurTokenSale-setWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_wallet != address(0))

IRs:
TMP_29 = CONVERT 0 to address
TMP_30(bool) = _wallet != TMP_29
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8750.sol-LemurTokenSale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = _newOwner != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8750.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8750.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8750.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8750.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = _x + _y

IRs:
TMP_9(uint256) = _x + _y
z(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_10(bool) = z >= _x
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
4[label="Node Type: RETURN 4

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 8750.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_x / _y

IRs:
TMP_5(uint256) = _x / _y
RETURN TMP_5"];
}
// Function: 8750.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_x == 0

IRs:
TMP_0(bool) = _x == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
z = _x * _y

IRs:
TMP_1(uint256) = _x * _y
z(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(z / _x == _y)

IRs:
TMP_2(uint256) = z / _x
TMP_3(bool) = TMP_2 == _y
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
7[label="Node Type: RETURN 7

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 8750.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_y <= _x)

IRs:
TMP_6(bool) = _y <= _x
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_8(uint256) = _x - _y
RETURN TMP_8"];
}
}
