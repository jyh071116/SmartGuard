digraph G {
// Function: 8826.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
}
// Function: 8826.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 8826.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _to != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_15(bool) = _value <= REF_0
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-BurnableToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_58(uint256) -> balances[_who]
TMP_61(bool) = _value <= REF_58
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_59(uint256) -> balances[_who]
REF_60(uint256) -> balances[_who]
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_60', '_value'] 
REF_59(uint256) (->balances) := TMP_63(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_64(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_66 = CONVERT 0 to address
Emit Transfer(_who,TMP_66,_value)"];
}
// Function: 8826.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 8826.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 8826.sol-BurnableToken-totalSupply()
digraph{
}
// Function: 8826.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 8826.sol-ContractSpendToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8826.sol-ContractSpendToken-addContract(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_contractAdd != address(0x0))

IRs:
TMP_217 = CONVERT 0 to address
TMP_218(bool) = _contractAdd != TMP_217
TMP_219(None) = SOLIDITY_CALL require(bool)(TMP_218)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_220 = CONVERT 0 to address
TMP_221(bool) = _to != TMP_220
TMP_222(None) = SOLIDITY_CALL require(bool)(TMP_221)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
contractToReceiver[_contractAdd] = _to

IRs:
REF_201(address) -> contractToReceiver[_contractAdd]
REF_201(address) (->contractToReceiver) := _to(address)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 8826.sol-ContractSpendToken-allowance(address,address)
digraph{
}
// Function: 8826.sol-ContractSpendToken-approve(address,uint256)
digraph{
}
// Function: 8826.sol-ContractSpendToken-balanceOf(address)
digraph{
}
// Function: 8826.sol-ContractSpendToken-contractSpend(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_to = contractToReceiver[msg.sender]

IRs:
REF_203(address) -> contractToReceiver[msg.sender]
_to(address) := REF_203(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_226 = CONVERT 0 to address
TMP_227(bool) = _to != TMP_226
TMP_228(None) = SOLIDITY_CALL require(bool)(TMP_227)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_204(uint256) -> balances[_from]
TMP_229(bool) = _value <= REF_204
TMP_230(None) = SOLIDITY_CALL require(bool)(TMP_229)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_205(uint256) -> balances[_from]
REF_206(uint256) -> balances[_from]
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_206', '_value'] 
REF_205(uint256) (->balances) := TMP_231(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_208(uint256) -> balances[_to]
REF_209(uint256) -> balances[_to]
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_209', '_value'] 
REF_208(uint256) (->balances) := TMP_232(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-ContractSpendToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_184(mapping(address => uint256)) -> allowed[msg.sender]
REF_185(uint256) -> REF_184[_spender]
oldValue(uint256) := REF_185(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_206(bool) = _subtractedValue > oldValue
CONDITION TMP_206"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_186(mapping(address => uint256)) -> allowed[msg.sender]
REF_187(uint256) -> REF_186[_spender]
REF_187(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_188(mapping(address => uint256)) -> allowed[msg.sender]
REF_189(uint256) -> REF_188[_spender]
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_189(uint256) (->allowed) := TMP_207(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_191(mapping(address => uint256)) -> allowed[msg.sender]
REF_192(uint256) -> REF_191[_spender]
Emit Approval(msg.sender,_spender,REF_192)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-ContractSpendToken-getContractReceiver(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
contractToReceiver[_contractAdd]

IRs:
REF_211(address) -> contractToReceiver[_contractAdd]
RETURN REF_211"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8826.sol-ContractSpendToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_177(mapping(address => uint256)) -> allowed[msg.sender]
REF_178(uint256) -> REF_177[_spender]
REF_179(mapping(address => uint256)) -> allowed[msg.sender]
REF_180(uint256) -> REF_179[_spender]
TMP_204(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_180', '_addedValue'] 
REF_178(uint256) (->allowed) := TMP_204(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_182(mapping(address => uint256)) -> allowed[msg.sender]
REF_183(uint256) -> REF_182[_spender]
Emit Approval(msg.sender,_spender,REF_183)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-ContractSpendToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_235(bool) = msg.sender == owner
TMP_236(None) = SOLIDITY_CALL require(bool)(TMP_235)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8826.sol-ContractSpendToken-removeContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractToReceiver[_contractAdd] = address(0x0)

IRs:
REF_202(address) -> contractToReceiver[_contractAdd]
TMP_224 = CONVERT 0 to address
REF_202(address) (->contractToReceiver) := TMP_224(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8826.sol-ContractSpendToken-totalSupply()
digraph{
}
// Function: 8826.sol-ContractSpendToken-transfer(address,uint256)
digraph{
}
// Function: 8826.sol-ContractSpendToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 8826.sol-ContractSpendToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_187 = CONVERT 0 to address
TMP_188(bool) = newOwner != TMP_187
TMP_189(None) = SOLIDITY_CALL require(bool)(TMP_188)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8826.sol-ContractiumToken-ContractiumToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply_ = INITIAL_SUPPLY

IRs:
totalSupply_(uint256) := INITIAL_SUPPLY(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = INITIAL_SUPPLY

IRs:
REF_277(uint256) -> balances[msg.sender]
REF_277(uint256) (->balances) := INITIAL_SUPPLY(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0x0,msg.sender,INITIAL_SUPPLY)

IRs:
Emit Transfer(0,msg.sender,INITIAL_SUPPLY)"];
}
// Function: 8826.sol-ContractiumToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8826.sol-ContractiumToken-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_272(uint256) -> balances[_who]
TMP_333(bool) = _value <= REF_272
TMP_334(None) = SOLIDITY_CALL require(bool)(TMP_333)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_273(uint256) -> balances[_who]
REF_274(uint256) -> balances[_who]
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_274', '_value'] 
REF_273(uint256) (->balances) := TMP_335(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_336(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_336(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_338 = CONVERT 0 to address
Emit Transfer(_who,TMP_338,_value)"];
}
// Function: 8826.sol-ContractiumToken-addContract(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_contractAdd != address(0x0))

IRs:
TMP_237 = CONVERT 0 to address
TMP_238(bool) = _contractAdd != TMP_237
TMP_239(None) = SOLIDITY_CALL require(bool)(TMP_238)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_240 = CONVERT 0 to address
TMP_241(bool) = _to != TMP_240
TMP_242(None) = SOLIDITY_CALL require(bool)(TMP_241)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
contractToReceiver[_contractAdd] = _to

IRs:
REF_212(address) -> contractToReceiver[_contractAdd]
REF_212(address) (->contractToReceiver) := _to(address)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 8826.sol-ContractiumToken-allowance(address,address)
digraph{
}
// Function: 8826.sol-ContractiumToken-approve(address,uint256)
digraph{
}
// Function: 8826.sol-ContractiumToken-balanceOf(address)
digraph{
}
// Function: 8826.sol-ContractiumToken-batchTransfer(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
cnt = _receivers.length

IRs:
REF_291 -> LENGTH _receivers
cnt(uint256) := REF_291(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(cnt > 0 && cnt <= 20)

IRs:
TMP_356(bool) = cnt > 0
TMP_357(bool) = cnt <= 20
TMP_358(bool) = TMP_356 && TMP_357
TMP_359(None) = SOLIDITY_CALL require(bool)(TMP_358)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(cnt == _amounts.length)

IRs:
REF_292 -> LENGTH _amounts
TMP_360(bool) = cnt == REF_292
TMP_361(None) = SOLIDITY_CALL require(bool)(TMP_360)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
cnt = uint8(cnt)

IRs:
TMP_362 = CONVERT cnt to uint8
cnt(uint256) := TMP_362(uint8)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
totalAmount = 0

IRs:
totalAmount(uint256) := 0(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < cnt

IRs:
TMP_363(bool) = i < cnt
CONDITION TMP_363"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalAmount = totalAmount.add(_amounts[i])

IRs:
REF_294(uint256) -> _amounts[i]
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalAmount', 'REF_294'] 
totalAmount(uint256) := TMP_364(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_365(uint8) := i(uint8)
i(uint8) = i + 1"];
11->9;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(totalAmount <= balances[msg.sender])

IRs:
REF_295(uint256) -> balances[msg.sender]
TMP_366(bool) = totalAmount <= REF_295
TMP_367(None) = SOLIDITY_CALL require(bool)(TMP_366)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(totalAmount)

IRs:
REF_296(uint256) -> balances[msg.sender]
REF_297(uint256) -> balances[msg.sender]
TMP_368(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_297', 'totalAmount'] 
REF_296(uint256) (->balances) := TMP_368(uint256)"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
i < cnt

IRs:
TMP_369(bool) = i < cnt
CONDITION TMP_369"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
balances[_receivers[i]] = balances[_receivers[i]].add(_amounts[i])

IRs:
REF_299(address) -> _receivers[i]
REF_300(uint256) -> balances[REF_299]
REF_301(address) -> _receivers[i]
REF_302(uint256) -> balances[REF_301]
REF_304(uint256) -> _amounts[i]
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_302', 'REF_304'] 
REF_300(uint256) (->balances) := TMP_370(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Transfer(msg.sender,_receivers[i],_amounts[i])

IRs:
REF_305(address) -> _receivers[i]
REF_306(uint256) -> _amounts[i]
Emit Transfer(msg.sender,REF_305,REF_306)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_372(uint8) := i(uint8)
i(uint8) = i + 1"];
20->17;
21[label="Node Type: RETURN 21

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-ContractiumToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 8826.sol-ContractiumToken-burnRemainTokenOffering()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
currentTokenOfferingRaised < currentTotalTokenOffering

IRs:
TMP_329(bool) = currentTokenOfferingRaised < currentTotalTokenOffering
CONDITION TMP_329"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
remainTokenOffering = currentTotalTokenOffering.sub(currentTokenOfferingRaised)

IRs:
TMP_330(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['currentTotalTokenOffering', 'currentTokenOfferingRaised'] 
remainTokenOffering(uint256) := TMP_330(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(owner,remainTokenOffering)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(owner,remainTokenOffering)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 8826.sol-ContractiumToken-contractSpend(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_to = contractToReceiver[msg.sender]

IRs:
REF_214(address) -> contractToReceiver[msg.sender]
_to(address) := REF_214(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_246 = CONVERT 0 to address
TMP_247(bool) = _to != TMP_246
TMP_248(None) = SOLIDITY_CALL require(bool)(TMP_247)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_215(uint256) -> balances[_from]
TMP_249(bool) = _value <= REF_215
TMP_250(None) = SOLIDITY_CALL require(bool)(TMP_249)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_216(uint256) -> balances[_from]
REF_217(uint256) -> balances[_from]
TMP_251(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_217', '_value'] 
REF_216(uint256) (->balances) := TMP_251(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_219(uint256) -> balances[_to]
REF_220(uint256) -> balances[_to]
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_220', '_value'] 
REF_219(uint256) (->balances) := TMP_252(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-ContractiumToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_248(mapping(address => uint256)) -> allowed[msg.sender]
REF_249(uint256) -> REF_248[_spender]
oldValue(uint256) := REF_249(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_274(bool) = _subtractedValue > oldValue
CONDITION TMP_274"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_250(mapping(address => uint256)) -> allowed[msg.sender]
REF_251(uint256) -> REF_250[_spender]
REF_251(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_252(mapping(address => uint256)) -> allowed[msg.sender]
REF_253(uint256) -> REF_252[_spender]
TMP_275(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_253(uint256) (->allowed) := TMP_275(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_255(mapping(address => uint256)) -> allowed[msg.sender]
REF_256(uint256) -> REF_255[_spender]
Emit Approval(msg.sender,_spender,REF_256)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-ContractiumToken-endOffering()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
isBurnInClose

IRs:
CONDITION isBurnInClose"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
burnRemainTokenOffering()

IRs:
INTERNAL_CALL, TokenOffering.burnRemainTokenOffering()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
OfferingCloses(endTime,currentTokenOfferingRaised)

IRs:
Emit OfferingCloses(endTime,currentTokenOfferingRaised)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
resetOfferingStatus()

IRs:
INTERNAL_CALL, TokenOffering.resetOfferingStatus()()"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 8826.sol-ContractiumToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender != owner)

IRs:
TMP_341(bool) = msg.sender != owner
TMP_342(None) = SOLIDITY_CALL require(bool)(TMP_341)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = msg.value.mul(unitsOneEthCanBuy)

IRs:
TMP_343(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['msg.value', 'unitsOneEthCanBuy'] 
amount(uint256) := TMP_343(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountBonus = msg.value.mul(bonusRateOneEth)

IRs:
TMP_344(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['msg.value', 'bonusRateOneEth'] 
amountBonus(uint256) := TMP_344(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
amount = amount.add(amountBonus)

IRs:
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['amount', 'amountBonus'] 
amount(uint256) := TMP_345(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
preValidatePurchase(amount)

IRs:
INTERNAL_CALL, TokenOffering.preValidatePurchase(uint256)(amount)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(balances[owner] >= amount)

IRs:
REF_281(uint256) -> balances[owner]
TMP_347(bool) = REF_281 >= amount
TMP_348(None) = SOLIDITY_CALL require(bool)(TMP_347)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
totalWeiRaised = totalWeiRaised.add(msg.value)

IRs:
TMP_349(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalWeiRaised', 'msg.value'] 
totalWeiRaised(uint256) := TMP_349(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
currentTokenOfferingRaised = currentTokenOfferingRaised.add(amount)

IRs:
TMP_350(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['currentTokenOfferingRaised', 'amount'] 
currentTokenOfferingRaised(uint256) := TMP_350(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[owner] = balances[owner].sub(amount)

IRs:
REF_284(uint256) -> balances[owner]
REF_285(uint256) -> balances[owner]
TMP_351(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_285', 'amount'] 
REF_284(uint256) (->balances) := TMP_351(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(amount)

IRs:
REF_287(uint256) -> balances[msg.sender]
REF_288(uint256) -> balances[msg.sender]
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_288', 'amount'] 
REF_287(uint256) (->balances) := TMP_352(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Transfer(owner,msg.sender,amount)

IRs:
Emit Transfer(owner,msg.sender,amount)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
BuyToken(msg.sender,msg.value,amount)

IRs:
Emit BuyToken(msg.sender,msg.value,amount)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
owner.transfer(msg.value)

IRs:
Transfer dest:owner value:msg.value"];
}
// Function: 8826.sol-ContractiumToken-getContractReceiver(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
contractToReceiver[_contractAdd]

IRs:
REF_222(address) -> contractToReceiver[_contractAdd]
RETURN REF_222"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8826.sol-ContractiumToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_241(mapping(address => uint256)) -> allowed[msg.sender]
REF_242(uint256) -> REF_241[_spender]
REF_243(mapping(address => uint256)) -> allowed[msg.sender]
REF_244(uint256) -> REF_243[_spender]
TMP_272(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_244', '_addedValue'] 
REF_242(uint256) (->allowed) := TMP_272(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_246(mapping(address => uint256)) -> allowed[msg.sender]
REF_247(uint256) -> REF_246[_spender]
Emit Approval(msg.sender,_spender,REF_247)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-ContractiumToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_376(bool) = msg.sender == owner
TMP_377(None) = SOLIDITY_CALL require(bool)(TMP_376)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8826.sol-ContractiumToken-preValidatePurchase(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_289(bool) = _amount > 0
TMP_290(None) = SOLIDITY_CALL require(bool)(TMP_289)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(isOfferingStarted)

IRs:
TMP_291(None) = SOLIDITY_CALL require(bool)(isOfferingStarted)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(offeringEnabled)

IRs:
TMP_292(None) = SOLIDITY_CALL require(bool)(offeringEnabled)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(currentTokenOfferingRaised.add(_amount) <= currentTotalTokenOffering)

IRs:
TMP_293(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['currentTokenOfferingRaised', '_amount'] 
TMP_294(bool) = TMP_293 <= currentTotalTokenOffering
TMP_295(None) = SOLIDITY_CALL require(bool)(TMP_294)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(block.timestamp >= startTime && block.timestamp <= endTime)

IRs:
TMP_296(bool) = block.timestamp >= startTime
TMP_297(bool) = block.timestamp <= endTime
TMP_298(bool) = TMP_296 && TMP_297
TMP_299(None) = SOLIDITY_CALL require(bool)(TMP_298)"];
}
// Function: 8826.sol-ContractiumToken-removeContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractToReceiver[_contractAdd] = address(0x0)

IRs:
REF_213(address) -> contractToReceiver[_contractAdd]
TMP_244 = CONVERT 0 to address
REF_213(address) (->contractToReceiver) := TMP_244(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8826.sol-ContractiumToken-resetOfferingStatus()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isOfferingStarted = false

IRs:
isOfferingStarted(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
startTime = 0

IRs:
startTime(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
endTime = 0

IRs:
endTime(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
currentTotalTokenOffering = 0

IRs:
currentTotalTokenOffering(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
currentTokenOfferingRaised = 0

IRs:
currentTokenOfferingRaised(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
bonusRateOneEth = 0

IRs:
bonusRateOneEth(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
offeringEnabled = false

IRs:
offeringEnabled(bool) := False(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isBurnInClose = false

IRs:
isBurnInClose(bool) := False(bool)"];
}
// Function: 8826.sol-ContractiumToken-resumeOffering()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
offeringEnabled = true

IRs:
offeringEnabled(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8826.sol-ContractiumToken-setBonusRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bonusRateOneEth = _bonusRateOneEth

IRs:
bonusRateOneEth(uint256) := _bonusRateOneEth(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8826.sol-ContractiumToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Contractium

IRs:
name(string) := Contractium(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = CTU

IRs:
symbol(string) := CTU(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
INITIAL_SUPPLY = 3000000000 * (10 ** uint256(decimals))

IRs:
TMP_373 = CONVERT decimals to uint256
TMP_374(uint256) = 10 ** TMP_373
TMP_375(uint256) = 3000000000 * TMP_374
INITIAL_SUPPLY(uint256) := TMP_375(uint256)"];
}
// Function: 8826.sol-ContractiumToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isBurnInClose = false

IRs:
isBurnInClose(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
isOfferingStarted = false

IRs:
isOfferingStarted(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
unitsOneEthCanBuy = 15000

IRs:
unitsOneEthCanBuy(uint256) := 15000(uint256)"];
}
// Function: 8826.sol-ContractiumToken-startOffering(uint256,uint256,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tokenOffering <= balances[owner])

IRs:
REF_270(uint256) -> balances[owner]
TMP_302(bool) = _tokenOffering <= REF_270
TMP_303(None) = SOLIDITY_CALL require(bool)(TMP_302)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_startTime <= _endTime)

IRs:
TMP_304(bool) = _startTime <= _endTime
TMP_305(None) = SOLIDITY_CALL require(bool)(TMP_304)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_startTime >= block.timestamp)

IRs:
TMP_306(bool) = _startTime >= block.timestamp
TMP_307(None) = SOLIDITY_CALL require(bool)(TMP_306)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(! isOfferingStarted)

IRs:
TMP_308 = UnaryType.BANG isOfferingStarted 
TMP_309(None) = SOLIDITY_CALL require(bool)(TMP_308)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isOfferingStarted = true

IRs:
isOfferingStarted(bool) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isBurnInClose = _isBurnInClose

IRs:
isBurnInClose(bool) := _isBurnInClose(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
currentTokenOfferingRaised = 0

IRs:
currentTokenOfferingRaised(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
currentTotalTokenOffering = _tokenOffering

IRs:
currentTotalTokenOffering(uint256) := _tokenOffering(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
offeringEnabled = true

IRs:
offeringEnabled(bool) := True(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
setBonusRate(_bonusRateOneEth)

IRs:
INTERNAL_CALL, TokenOffering.setBonusRate(uint256)(_bonusRateOneEth)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
OfferingOpens(startTime,endTime,currentTotalTokenOffering,bonusRateOneEth)

IRs:
Emit OfferingOpens(startTime,endTime,currentTotalTokenOffering,bonusRateOneEth)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
15->1;
}
// Function: 8826.sol-ContractiumToken-stopOffering()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
offeringEnabled = false

IRs:
offeringEnabled(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8826.sol-ContractiumToken-totalSupply()
digraph{
}
// Function: 8826.sol-ContractiumToken-transfer(address,uint256)
digraph{
}
// Function: 8826.sol-ContractiumToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 8826.sol-ContractiumToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_255 = CONVERT 0 to address
TMP_256(bool) = newOwner != TMP_255
TMP_257(None) = SOLIDITY_CALL require(bool)(TMP_256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8826.sol-ContractiumToken-updateBurnableStatus(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOfferingStarted)

IRs:
TMP_323(None) = SOLIDITY_CALL require(bool)(isOfferingStarted)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBurnInClose = _isBurnInClose

IRs:
isBurnInClose(bool) := _isBurnInClose(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8826.sol-ContractiumToken-updateEndTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOfferingStarted)

IRs:
TMP_319(None) = SOLIDITY_CALL require(bool)(isOfferingStarted)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= startTime)

IRs:
TMP_320(bool) = _endTime >= startTime
TMP_321(None) = SOLIDITY_CALL require(bool)(TMP_320)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8826.sol-ContractiumToken-updateStartTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOfferingStarted)

IRs:
TMP_313(None) = SOLIDITY_CALL require(bool)(isOfferingStarted)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_startTime <= endTime)

IRs:
TMP_314(bool) = _startTime <= endTime
TMP_315(None) = SOLIDITY_CALL require(bool)(TMP_314)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_startTime >= block.timestamp)

IRs:
TMP_316(bool) = _startTime >= block.timestamp
TMP_317(None) = SOLIDITY_CALL require(bool)(TMP_316)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 8826.sol-ContractiumToken-withdrawToken(address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
result = transfer(_to,_amountToken)

IRs:
TMP_285(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(_to,_amountToken)
result(bool) := TMP_285(bool)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
result

IRs:
CONDITION result"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
withdrawTracks[_withdrawId] = TrackInfo(_to,_amountToken,_withdrawId)

IRs:
REF_265(WithdrawTrack.TrackInfo) -> withdrawTracks[_withdrawId]
TMP_286(WithdrawTrack.TrackInfo) = new TrackInfo(_to,_amountToken,_withdrawId)
REF_265(WithdrawTrack.TrackInfo) (->withdrawTracks) := TMP_286(WithdrawTrack.TrackInfo)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
result

IRs:
RETURN result"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 8826.sol-ContractiumToken-withdrawTrackOf(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
track = withdrawTracks[_withdrawId]

IRs:
REF_266(WithdrawTrack.TrackInfo) -> withdrawTracks[_withdrawId]
track(WithdrawTrack.TrackInfo) := REF_266(WithdrawTrack.TrackInfo)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(track.to,track.amountToken)

IRs:
REF_267(address) -> track.to
REF_268(uint256) -> track.amountToken
RETURN REF_267,REF_268"];
3[label="Node Type: RETURN 3

EXPRESSION:
(to,amountToken)

IRs:
RETURN to,amountToken"];
}
// Function: 8826.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 8826.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 8826.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 8826.sol-ERC20-totalSupply()
digraph{
}
// Function: 8826.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 8826.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 8826.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 8826.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 8826.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 8826.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8826.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_50(bool) = msg.sender == owner
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8826.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_45 = CONVERT 0 to address
TMP_46(bool) = newOwner != TMP_45
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8826.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 8826.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 8826.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 8826.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 8826.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_32(mapping(address => uint256)) -> allowed[_owner]
REF_33(uint256) -> REF_32[_spender]
RETURN REF_33"];
}
// Function: 8826.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_30(mapping(address => uint256)) -> allowed[msg.sender]
REF_31(uint256) -> REF_30[_spender]
REF_31(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 8826.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_41(mapping(address => uint256)) -> allowed[msg.sender]
REF_42(uint256) -> REF_41[_spender]
oldValue(uint256) := REF_42(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_42(bool) = _subtractedValue > oldValue
CONDITION TMP_42"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_43(mapping(address => uint256)) -> allowed[msg.sender]
REF_44(uint256) -> REF_43[_spender]
REF_44(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_45(mapping(address => uint256)) -> allowed[msg.sender]
REF_46(uint256) -> REF_45[_spender]
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_46(uint256) (->allowed) := TMP_43(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_48(mapping(address => uint256)) -> allowed[msg.sender]
REF_49(uint256) -> REF_48[_spender]
Emit Approval(msg.sender,_spender,REF_49)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_37', '_addedValue'] 
REF_35(uint256) (->allowed) := TMP_40(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_39(mapping(address => uint256)) -> allowed[msg.sender]
REF_40(uint256) -> REF_39[_spender]
Emit Approval(msg.sender,_spender,REF_40)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-StandardToken-totalSupply()
digraph{
}
// Function: 8826.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 8826.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = _to != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_16(uint256) -> balances[_from]
TMP_31(bool) = _value <= REF_16
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_17(mapping(address => uint256)) -> allowed[_from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_33(bool) = _value <= REF_18
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_19(uint256) -> balances[_from]
REF_20(uint256) -> balances[_from]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_20', '_value'] 
REF_19(uint256) (->balances) := TMP_35(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_22(uint256) -> balances[_to]
REF_23(uint256) -> balances[_to]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_23', '_value'] 
REF_22(uint256) (->balances) := TMP_36(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
REF_27(mapping(address => uint256)) -> allowed[_from]
REF_28(uint256) -> REF_27[msg.sender]
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_28', '_value'] 
REF_26(uint256) (->allowed) := TMP_37(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-TokenOffering-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8826.sol-TokenOffering-_burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= balances[_who])

IRs:
REF_63(uint256) -> balances[_who]
TMP_69(bool) = _value <= REF_63
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_who] = balances[_who].sub(_value)

IRs:
REF_64(uint256) -> balances[_who]
REF_65(uint256) -> balances[_who]
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_65', '_value'] 
REF_64(uint256) (->balances) := TMP_71(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply_ = totalSupply_.sub(_value)

IRs:
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_value'] 
totalSupply_(uint256) := TMP_72(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_who,_value)

IRs:
Emit Burn(_who,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_who,address(0),_value)

IRs:
TMP_74 = CONVERT 0 to address
Emit Transfer(_who,TMP_74,_value)"];
}
// Function: 8826.sol-TokenOffering-allowance(address,address)
digraph{
}
// Function: 8826.sol-TokenOffering-approve(address,uint256)
digraph{
}
// Function: 8826.sol-TokenOffering-balanceOf(address)
digraph{
}
// Function: 8826.sol-TokenOffering-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_burn(msg.sender,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(msg.sender,_value)"];
}
// Function: 8826.sol-TokenOffering-burnRemainTokenOffering()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
currentTokenOfferingRaised < currentTotalTokenOffering

IRs:
TMP_147(bool) = currentTokenOfferingRaised < currentTotalTokenOffering
CONDITION TMP_147"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
remainTokenOffering = currentTotalTokenOffering.sub(currentTokenOfferingRaised)

IRs:
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['currentTotalTokenOffering', 'currentTokenOfferingRaised'] 
remainTokenOffering(uint256) := TMP_148(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(owner,remainTokenOffering)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(owner,remainTokenOffering)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 8826.sol-TokenOffering-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_101(mapping(address => uint256)) -> allowed[msg.sender]
REF_102(uint256) -> REF_101[_spender]
oldValue(uint256) := REF_102(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_103(bool) = _subtractedValue > oldValue
CONDITION TMP_103"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_103(mapping(address => uint256)) -> allowed[msg.sender]
REF_104(uint256) -> REF_103[_spender]
REF_104(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_105(mapping(address => uint256)) -> allowed[msg.sender]
REF_106(uint256) -> REF_105[_spender]
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_106(uint256) (->allowed) := TMP_104(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_108(mapping(address => uint256)) -> allowed[msg.sender]
REF_109(uint256) -> REF_108[_spender]
Emit Approval(msg.sender,_spender,REF_109)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-TokenOffering-endOffering()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
isBurnInClose

IRs:
CONDITION isBurnInClose"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
burnRemainTokenOffering()

IRs:
INTERNAL_CALL, TokenOffering.burnRemainTokenOffering()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
OfferingCloses(endTime,currentTokenOfferingRaised)

IRs:
Emit OfferingCloses(endTime,currentTokenOfferingRaised)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
resetOfferingStatus()

IRs:
INTERNAL_CALL, TokenOffering.resetOfferingStatus()()"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 8826.sol-TokenOffering-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_94(mapping(address => uint256)) -> allowed[msg.sender]
REF_95(uint256) -> REF_94[_spender]
REF_96(mapping(address => uint256)) -> allowed[msg.sender]
REF_97(uint256) -> REF_96[_spender]
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_97', '_addedValue'] 
REF_95(uint256) (->allowed) := TMP_101(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_99(mapping(address => uint256)) -> allowed[msg.sender]
REF_100(uint256) -> REF_99[_spender]
Emit Approval(msg.sender,_spender,REF_100)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-TokenOffering-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_150(bool) = msg.sender == owner
TMP_151(None) = SOLIDITY_CALL require(bool)(TMP_150)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8826.sol-TokenOffering-preValidatePurchase(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_107(bool) = _amount > 0
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(isOfferingStarted)

IRs:
TMP_109(None) = SOLIDITY_CALL require(bool)(isOfferingStarted)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(offeringEnabled)

IRs:
TMP_110(None) = SOLIDITY_CALL require(bool)(offeringEnabled)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(currentTokenOfferingRaised.add(_amount) <= currentTotalTokenOffering)

IRs:
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['currentTokenOfferingRaised', '_amount'] 
TMP_112(bool) = TMP_111 <= currentTotalTokenOffering
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(block.timestamp >= startTime && block.timestamp <= endTime)

IRs:
TMP_114(bool) = block.timestamp >= startTime
TMP_115(bool) = block.timestamp <= endTime
TMP_116(bool) = TMP_114 && TMP_115
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
}
// Function: 8826.sol-TokenOffering-resetOfferingStatus()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isOfferingStarted = false

IRs:
isOfferingStarted(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
startTime = 0

IRs:
startTime(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
endTime = 0

IRs:
endTime(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
currentTotalTokenOffering = 0

IRs:
currentTotalTokenOffering(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
currentTokenOfferingRaised = 0

IRs:
currentTokenOfferingRaised(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
bonusRateOneEth = 0

IRs:
bonusRateOneEth(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
offeringEnabled = false

IRs:
offeringEnabled(bool) := False(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isBurnInClose = false

IRs:
isBurnInClose(bool) := False(bool)"];
}
// Function: 8826.sol-TokenOffering-resumeOffering()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
offeringEnabled = true

IRs:
offeringEnabled(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8826.sol-TokenOffering-setBonusRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bonusRateOneEth = _bonusRateOneEth

IRs:
bonusRateOneEth(uint256) := _bonusRateOneEth(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8826.sol-TokenOffering-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isBurnInClose = false

IRs:
isBurnInClose(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
isOfferingStarted = false

IRs:
isOfferingStarted(bool) := False(bool)"];
}
// Function: 8826.sol-TokenOffering-startOffering(uint256,uint256,uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tokenOffering <= balances[owner])

IRs:
REF_111(uint256) -> balances[owner]
TMP_120(bool) = _tokenOffering <= REF_111
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_startTime <= _endTime)

IRs:
TMP_122(bool) = _startTime <= _endTime
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_startTime >= block.timestamp)

IRs:
TMP_124(bool) = _startTime >= block.timestamp
TMP_125(None) = SOLIDITY_CALL require(bool)(TMP_124)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(! isOfferingStarted)

IRs:
TMP_126 = UnaryType.BANG isOfferingStarted 
TMP_127(None) = SOLIDITY_CALL require(bool)(TMP_126)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isOfferingStarted = true

IRs:
isOfferingStarted(bool) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
isBurnInClose = _isBurnInClose

IRs:
isBurnInClose(bool) := _isBurnInClose(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
currentTokenOfferingRaised = 0

IRs:
currentTokenOfferingRaised(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
currentTotalTokenOffering = _tokenOffering

IRs:
currentTotalTokenOffering(uint256) := _tokenOffering(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
offeringEnabled = true

IRs:
offeringEnabled(bool) := True(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
setBonusRate(_bonusRateOneEth)

IRs:
INTERNAL_CALL, TokenOffering.setBonusRate(uint256)(_bonusRateOneEth)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
OfferingOpens(startTime,endTime,currentTotalTokenOffering,bonusRateOneEth)

IRs:
Emit OfferingOpens(startTime,endTime,currentTotalTokenOffering,bonusRateOneEth)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
15->1;
}
// Function: 8826.sol-TokenOffering-stopOffering()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
offeringEnabled = false

IRs:
offeringEnabled(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 8826.sol-TokenOffering-totalSupply()
digraph{
}
// Function: 8826.sol-TokenOffering-transfer(address,uint256)
digraph{
}
// Function: 8826.sol-TokenOffering-transferFrom(address,address,uint256)
digraph{
}
// Function: 8826.sol-TokenOffering-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_84 = CONVERT 0 to address
TMP_85(bool) = newOwner != TMP_84
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8826.sol-TokenOffering-updateBurnableStatus(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOfferingStarted)

IRs:
TMP_141(None) = SOLIDITY_CALL require(bool)(isOfferingStarted)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isBurnInClose = _isBurnInClose

IRs:
isBurnInClose(bool) := _isBurnInClose(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 8826.sol-TokenOffering-updateEndTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOfferingStarted)

IRs:
TMP_137(None) = SOLIDITY_CALL require(bool)(isOfferingStarted)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= startTime)

IRs:
TMP_138(bool) = _endTime >= startTime
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8826.sol-TokenOffering-updateStartTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOfferingStarted)

IRs:
TMP_131(None) = SOLIDITY_CALL require(bool)(isOfferingStarted)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_startTime <= endTime)

IRs:
TMP_132(bool) = _startTime <= endTime
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_startTime >= block.timestamp)

IRs:
TMP_134(bool) = _startTime >= block.timestamp
TMP_135(None) = SOLIDITY_CALL require(bool)(TMP_134)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 8826.sol-WithdrawTrack-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8826.sol-WithdrawTrack-allowance(address,address)
digraph{
}
// Function: 8826.sol-WithdrawTrack-approve(address,uint256)
digraph{
}
// Function: 8826.sol-WithdrawTrack-balanceOf(address)
digraph{
}
// Function: 8826.sol-WithdrawTrack-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_138(mapping(address => uint256)) -> allowed[msg.sender]
REF_139(uint256) -> REF_138[_spender]
oldValue(uint256) := REF_139(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_171(bool) = _subtractedValue > oldValue
CONDITION TMP_171"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_140(mapping(address => uint256)) -> allowed[msg.sender]
REF_141(uint256) -> REF_140[_spender]
REF_141(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_142(mapping(address => uint256)) -> allowed[msg.sender]
REF_143(uint256) -> REF_142[_spender]
TMP_172(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_143(uint256) (->allowed) := TMP_172(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_145(mapping(address => uint256)) -> allowed[msg.sender]
REF_146(uint256) -> REF_145[_spender]
Emit Approval(msg.sender,_spender,REF_146)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-WithdrawTrack-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_131(mapping(address => uint256)) -> allowed[msg.sender]
REF_132(uint256) -> REF_131[_spender]
REF_133(mapping(address => uint256)) -> allowed[msg.sender]
REF_134(uint256) -> REF_133[_spender]
TMP_169(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_134', '_addedValue'] 
REF_132(uint256) (->allowed) := TMP_169(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_136(mapping(address => uint256)) -> allowed[msg.sender]
REF_137(uint256) -> REF_136[_spender]
Emit Approval(msg.sender,_spender,REF_137)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8826.sol-WithdrawTrack-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_185(bool) = msg.sender == owner
TMP_186(None) = SOLIDITY_CALL require(bool)(TMP_185)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8826.sol-WithdrawTrack-totalSupply()
digraph{
}
// Function: 8826.sol-WithdrawTrack-transfer(address,uint256)
digraph{
}
// Function: 8826.sol-WithdrawTrack-transferFrom(address,address,uint256)
digraph{
}
// Function: 8826.sol-WithdrawTrack-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_152 = CONVERT 0 to address
TMP_153(bool) = newOwner != TMP_152
TMP_154(None) = SOLIDITY_CALL require(bool)(TMP_153)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8826.sol-WithdrawTrack-withdrawToken(address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
result = transfer(_to,_amountToken)

IRs:
TMP_182(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(_to,_amountToken)
result(bool) := TMP_182(bool)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
result

IRs:
CONDITION result"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
withdrawTracks[_withdrawId] = TrackInfo(_to,_amountToken,_withdrawId)

IRs:
REF_155(WithdrawTrack.TrackInfo) -> withdrawTracks[_withdrawId]
TMP_183(WithdrawTrack.TrackInfo) = new TrackInfo(_to,_amountToken,_withdrawId)
REF_155(WithdrawTrack.TrackInfo) (->withdrawTracks) := TMP_183(WithdrawTrack.TrackInfo)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
result

IRs:
RETURN result"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 8826.sol-WithdrawTrack-withdrawTrackOf(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
track = withdrawTracks[_withdrawId]

IRs:
REF_156(WithdrawTrack.TrackInfo) -> withdrawTracks[_withdrawId]
track(WithdrawTrack.TrackInfo) := REF_156(WithdrawTrack.TrackInfo)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(track.to,track.amountToken)

IRs:
REF_157(address) -> track.to
REF_158(uint256) -> track.amountToken
RETURN REF_157,REF_158"];
3[label="Node Type: RETURN 3

EXPRESSION:
(to,amountToken)

IRs:
RETURN to,amountToken"];
}
}
