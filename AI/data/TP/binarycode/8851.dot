digraph G {
// Function: 8851.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 8851.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 8851.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 8851.sol-ERC20-totalSupply()
digraph{
}
// Function: 8851.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 8851.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 8851.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 8851.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8851.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8851.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 8851.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 8851.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 8851.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 8851.sol-mameCoin-airdrop(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp > lockups[msg.sender])

IRs:
REF_45(uint256) -> lockups[msg.sender]
TMP_76(bool) = block.timestamp > REF_45
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_receivers.length > 0)

IRs:
REF_46 -> LENGTH _receivers
TMP_78(bool) = REF_46 > 0
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_80(bool) = _amount > 0
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_total = 0

IRs:
_total(uint256) := 0(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->13;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < _receivers.length

IRs:
REF_47 -> LENGTH _receivers
TMP_82(bool) = i < REF_47
CONDITION TMP_82"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(_receivers[i] != address(0))

IRs:
REF_48(address) -> _receivers[i]
TMP_83 = CONVERT 0 to address
TMP_84(bool) = REF_48 != TMP_83
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(block.timestamp > lockups[_receivers[i]])

IRs:
REF_49(address) -> _receivers[i]
REF_50(uint256) -> lockups[REF_49]
TMP_86(bool) = block.timestamp > REF_50
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_total = _total.add(_amount)

IRs:
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_total', '_amount'] 
_total(uint256) := TMP_88(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_89(uint256) := i(uint256)
i(uint256) = i + 1"];
12->8;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool)(_total <= balances[msg.sender])

IRs:
REF_52(uint256) -> balances[msg.sender]
TMP_90(bool) = _total <= REF_52
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_total)

IRs:
REF_53(uint256) -> balances[msg.sender]
REF_54(uint256) -> balances[msg.sender]
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_54', '_total'] 
REF_53(uint256) (->balances) := TMP_92(uint256)"];
14->17;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->22;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _receivers.length

IRs:
REF_56 -> LENGTH _receivers
TMP_93(bool) = i < REF_56
CONDITION TMP_93"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
balances[_receivers[i]] = balances[_receivers[i]].add(_amount)

IRs:
REF_57(address) -> _receivers[i]
REF_58(uint256) -> balances[REF_57]
REF_59(address) -> _receivers[i]
REF_60(uint256) -> balances[REF_59]
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_60', '_amount'] 
REF_58(uint256) (->balances) := TMP_94(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
Transfer(msg.sender,_receivers[i],_amount)

IRs:
REF_62(address) -> _receivers[i]
Emit Transfer(msg.sender,REF_62,_amount)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_96(uint256) := i(uint256)
i(uint256) = i + 1"];
21->18;
22[label="Node Type: RETURN 22

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8851.sol-mameCoin-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_29(mapping(address => uint256)) -> allowed[_owner]
REF_30(uint256) -> REF_29[_spender]
RETURN REF_30"];
}
// Function: 8851.sol-mameCoin-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _amount

IRs:
REF_27(mapping(address => uint256)) -> allowed[msg.sender]
REF_28(uint256) -> REF_27[_spender]
REF_28(uint256) (->allowed) := _amount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_amount)

IRs:
Emit Approval(msg.sender,_spender,_amount)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8851.sol-mameCoin-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_1(uint256) -> balances[_owner]
RETURN REF_1"];
}
// Function: 8851.sol-mameCoin-burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount <= balances[_to])

IRs:
REF_31(uint256) -> balances[_to]
TMP_54(bool) = _amount <= REF_31
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(block.timestamp > lockups[_to])

IRs:
REF_32(uint256) -> lockups[_to]
TMP_56(bool) = block.timestamp > REF_32
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].sub(_amount)

IRs:
REF_33(uint256) -> balances[_to]
REF_34(uint256) -> balances[_to]
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_34', '_amount'] 
REF_33(uint256) (->balances) := TMP_58(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply_ = totalSupply_.sub(_amount)

IRs:
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_59(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(_to,_amount)

IRs:
Emit Burn(_to,_amount)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_to,address(0),_amount)

IRs:
TMP_61 = CONVERT 0 to address
Emit Transfer(_to,TMP_61,_amount)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 8851.sol-mameCoin-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = totalSupply_

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(uint256) (->balances) := totalSupply_(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(address(0),msg.sender,totalSupply_)

IRs:
TMP_24 = CONVERT 0 to address
Emit Transfer(TMP_24,msg.sender,totalSupply_)"];
}
// Function: 8851.sol-mameCoin-distribute(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp > lockups[msg.sender])

IRs:
REF_63(uint256) -> lockups[msg.sender]
TMP_97(bool) = block.timestamp > REF_63
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_receivers.length > 0)

IRs:
REF_64 -> LENGTH _receivers
TMP_99(bool) = REF_64 > 0
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_amounts.length > 0)

IRs:
REF_65 -> LENGTH _amounts
TMP_101(bool) = REF_65 > 0
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_receivers.length == _amounts.length)

IRs:
REF_66 -> LENGTH _receivers
REF_67 -> LENGTH _amounts
TMP_103(bool) = REF_66 == REF_67
TMP_104(None) = SOLIDITY_CALL require(bool)(TMP_103)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_total = 0

IRs:
_total(uint256) := 0(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->15;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < _receivers.length

IRs:
REF_68 -> LENGTH _receivers
TMP_105(bool) = i < REF_68
CONDITION TMP_105"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(_receivers[i] != address(0))

IRs:
REF_69(address) -> _receivers[i]
TMP_106 = CONVERT 0 to address
TMP_107(bool) = REF_69 != TMP_106
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(block.timestamp > lockups[_receivers[i]])

IRs:
REF_70(address) -> _receivers[i]
REF_71(uint256) -> lockups[REF_70]
TMP_109(bool) = block.timestamp > REF_71
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(_amounts[i] > 0)

IRs:
REF_72(uint256) -> _amounts[i]
TMP_111(bool) = REF_72 > 0
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_total = _total.add(_amounts[i])

IRs:
REF_74(uint256) -> _amounts[i]
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_total', 'REF_74'] 
_total(uint256) := TMP_113(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_114(uint256) := i(uint256)
i(uint256) = i + 1"];
14->9;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
require(bool)(_total <= balances[msg.sender])

IRs:
REF_75(uint256) -> balances[msg.sender]
TMP_115(bool) = _total <= REF_75
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_total)

IRs:
REF_76(uint256) -> balances[msg.sender]
REF_77(uint256) -> balances[msg.sender]
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_77', '_total'] 
REF_76(uint256) (->balances) := TMP_117(uint256)"];
16->19;
17[label="Node Type: BEGIN_LOOP 17
"];
17->20;
18[label="Node Type: END_LOOP 18
"];
18->24;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
19->17;
20[label="Node Type: IF_LOOP 20

EXPRESSION:
i < _receivers.length

IRs:
REF_79 -> LENGTH _receivers
TMP_118(bool) = i < REF_79
CONDITION TMP_118"];
20->21[label="True"];
20->18[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
balances[_receivers[i]] = balances[_receivers[i]].add(_amounts[i])

IRs:
REF_80(address) -> _receivers[i]
REF_81(uint256) -> balances[REF_80]
REF_82(address) -> _receivers[i]
REF_83(uint256) -> balances[REF_82]
REF_85(uint256) -> _amounts[i]
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_83', 'REF_85'] 
REF_81(uint256) (->balances) := TMP_119(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Transfer(msg.sender,_receivers[i],_amounts[i])

IRs:
REF_86(address) -> _receivers[i]
REF_87(uint256) -> _amounts[i]
Emit Transfer(msg.sender,REF_86,REF_87)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i ++

IRs:
TMP_121(uint256) := i(uint256)
i(uint256) = i + 1"];
23->20;
24[label="Node Type: RETURN 24

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8851.sol-mameCoin-lockup(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(lockups[_to] < _lockupTimeUntil)

IRs:
REF_43(uint256) -> lockups[_to]
TMP_72(bool) = REF_43 < _lockupTimeUntil
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lockups[_to] = _lockupTimeUntil

IRs:
REF_44(uint256) -> lockups[_to]
REF_44(uint256) (->lockups) := _lockupTimeUntil(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Lockup(_to,_lockupTimeUntil)

IRs:
Emit Lockup(_to,_lockupTimeUntil)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 8851.sol-mameCoin-lockupOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
lockups[_owner]

IRs:
REF_42(uint256) -> lockups[_owner]
RETURN REF_42"];
}
// Function: 8851.sol-mameCoin-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_125(bool) = msg.sender == owner
TMP_126(None) = SOLIDITY_CALL require(bool)(TMP_125)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 8851.sol-mameCoin-refund(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp > lockups[_to])

IRs:
REF_37(uint256) -> lockups[_to]
TMP_64(bool) = block.timestamp > REF_37
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = totalSupply_.add(_amount)

IRs:
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', '_amount'] 
totalSupply_(uint256) := TMP_66(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_39(uint256) -> balances[_to]
REF_40(uint256) -> balances[_to]
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_40', '_amount'] 
REF_39(uint256) (->balances) := TMP_67(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Refund(_to,_amount)

IRs:
Emit Refund(_to,_amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),_to,_amount)

IRs:
TMP_69 = CONVERT 0 to address
Emit Transfer(TMP_69,_to,_amount)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 8851.sol-mameCoin-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = mameCoin

IRs:
name(string) := mameCoin(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = MAME

IRs:
symbol(string) := MAME(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
}
// Function: 8851.sol-mameCoin-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply_ = 25000000000 * (10 ** uint256(decimals))

IRs:
TMP_122 = CONVERT decimals to uint256
TMP_123(uint256) = 10 ** TMP_122
TMP_124(uint256) = 25000000000 * TMP_123
totalSupply_(uint256) := TMP_124(uint256)"];
}
// Function: 8851.sol-mameCoin-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 8851.sol-mameCoin-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_26 = CONVERT 0 to address
TMP_27(bool) = _to != TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[msg.sender])

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_29(bool) = _amount <= REF_2
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(block.timestamp > lockups[msg.sender])

IRs:
REF_3(uint256) -> lockups[msg.sender]
TMP_31(bool) = block.timestamp > REF_3
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(block.timestamp > lockups[_to])

IRs:
REF_4(uint256) -> lockups[_to]
TMP_33(bool) = block.timestamp > REF_4
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_amount)

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_6(uint256) -> balances[msg.sender]
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_6', '_amount'] 
REF_5(uint256) (->balances) := TMP_35(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_8(uint256) -> balances[_to]
REF_9(uint256) -> balances[_to]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_9', '_amount'] 
REF_8(uint256) (->balances) := TMP_36(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8851.sol-mameCoin-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_38 = CONVERT 0 to address
TMP_39(bool) = _to != TMP_38
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[_from])

IRs:
REF_11(uint256) -> balances[_from]
TMP_41(bool) = _amount <= REF_11
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_amount <= allowed[_from][msg.sender])

IRs:
REF_12(mapping(address => uint256)) -> allowed[_from]
REF_13(uint256) -> REF_12[msg.sender]
TMP_43(bool) = _amount <= REF_13
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(block.timestamp > lockups[_from])

IRs:
REF_14(uint256) -> lockups[_from]
TMP_45(bool) = block.timestamp > REF_14
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(block.timestamp > lockups[_to])

IRs:
REF_15(uint256) -> lockups[_to]
TMP_47(bool) = block.timestamp > REF_15
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_from] = balances[_from].sub(_amount)

IRs:
REF_16(uint256) -> balances[_from]
REF_17(uint256) -> balances[_from]
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_17', '_amount'] 
REF_16(uint256) (->balances) := TMP_49(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_19(uint256) -> balances[_to]
REF_20(uint256) -> balances[_to]
TMP_50(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_20', '_amount'] 
REF_19(uint256) (->balances) := TMP_50(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount)

IRs:
REF_22(mapping(address => uint256)) -> allowed[_from]
REF_23(uint256) -> REF_22[msg.sender]
REF_24(mapping(address => uint256)) -> allowed[_from]
REF_25(uint256) -> REF_24[msg.sender]
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_25', '_amount'] 
REF_23(uint256) (->allowed) := TMP_51(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(_from,_to,_amount)

IRs:
Emit Transfer(_from,_to,_amount)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 8851.sol-mameCoin-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = newOwner != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
}
