digraph G {
// Function: 9230.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 9230.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 9230.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 9230.sol-ERC20-totalSupply()
digraph{
}
// Function: 9230.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 9230.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 9230.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 9230.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 9230.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 9230.sol-Ownable-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = _newOwner != TMP_5
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 9230.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9230.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_9(bool) = msg.sender == owner
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9230.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_1 = CONVERT 0 to address
owner(address) := TMP_1(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9230.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9230.sol-SafeERC20-safeApprove(ERC20,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.approve(spender,value))

IRs:
TMP_65(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:approve, arguments:['spender', 'value']  
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
}
// Function: 9230.sol-SafeERC20-safeTransfer(ERC20Basic,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.transfer(to,value))

IRs:
TMP_61(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['to', 'value']  
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
}
// Function: 9230.sol-SafeERC20-safeTransferFrom(ERC20,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.transferFrom(from,to,value))

IRs:
TMP_63(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transferFrom, arguments:['from', 'to', 'value']  
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
}
// Function: 9230.sol-Tokenlock-_transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_16 = CONVERT 0 to address
TMP_17(bool) = _newOwner != TMP_16
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,_newOwner)

IRs:
Emit OwnershipTransferred(owner,_newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = _newOwner

IRs:
owner(address) := _newOwner(address)"];
}
// Function: 9230.sol-Tokenlock-close()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
withdraw()

IRs:
INTERNAL_CALL, Tokenlock.withdraw()()"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_57(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9230.sol-Tokenlock-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9230.sol-Tokenlock-constructor(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token != address(0))

IRs:
TMP_20 = CONVERT 0 to address
TMP_21(bool) = token != TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Token = ERC20(token)

IRs:
TMP_23 = CONVERT token to ERC20
Token(ERC20) := TMP_23(ERC20)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
interval = time

IRs:
interval(uint256) := time(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
locker = owner

IRs:
locker(address) := owner(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
distributor = owner

IRs:
distributor(address) := owner(address)"];
}
// Function: 9230.sol-Tokenlock-lock(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == locker)

IRs:
TMP_32(bool) = msg.sender == locker
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(beneficiary != address(0))

IRs:
TMP_34 = CONVERT 0 to address
TMP_35(bool) = beneficiary != TMP_34
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyers[beneficiary] += amount

IRs:
REF_0(uint256) -> buyers[beneficiary]
REF_0(-> buyers) = REF_0 + amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
TokenLocked(beneficiary,buyers[beneficiary])

IRs:
REF_1(uint256) -> buyers[beneficiary]
Emit TokenLocked(beneficiary,REF_1)"];
}
// Function: 9230.sol-Tokenlock-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_59(bool) = msg.sender == owner
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9230.sol-Tokenlock-release(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == distributor)

IRs:
TMP_43(bool) = msg.sender == distributor
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(started)

IRs:
TMP_45(None) = SOLIDITY_CALL require(bool)(started)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(block.timestamp >= releaseTime)

IRs:
TMP_46(bool) = block.timestamp >= releaseTime
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
amount = buyers[beneficiary]

IRs:
REF_2(uint256) -> buyers[beneficiary]
amount(uint256) := REF_2(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
buyers[beneficiary] = 0

IRs:
REF_3(uint256) -> buyers[beneficiary]
REF_3(uint256) (->buyers) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Token.safeTransfer(beneficiary,amount)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['Token', 'beneficiary', 'amount'] "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
TokenReleased(beneficiary,amount)

IRs:
Emit TokenReleased(beneficiary,amount)"];
}
// Function: 9230.sol-Tokenlock-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_12 = CONVERT 0 to address
owner(address) := TMP_12(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9230.sol-Tokenlock-setDistributor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addr != address(0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = addr != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
distributor = addr

IRs:
distributor(address) := addr(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9230.sol-Tokenlock-setLocker(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addr != address(0))

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = addr != TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
locker = addr

IRs:
locker(address) := addr(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9230.sol-Tokenlock-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
started = false

IRs:
started(bool) := False(bool)"];
}
// Function: 9230.sol-Tokenlock-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! started)

IRs:
TMP_38 = UnaryType.BANG started 
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
started = true

IRs:
started(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
releaseTime = block.timestamp + interval

IRs:
TMP_40(uint256) = block.timestamp + interval
releaseTime(uint256) := TMP_40(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LockStarted(block.timestamp,interval)

IRs:
Emit LockStarted(block.timestamp,interval)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 9230.sol-Tokenlock-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transferOwnership(_newOwner)

IRs:
INTERNAL_CALL, Ownable._transferOwnership(address)(_newOwner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9230.sol-Tokenlock-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp >= releaseTime)

IRs:
TMP_50(bool) = block.timestamp >= releaseTime
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Token.safeTransfer(owner,Token.balanceOf(address(this)))

IRs:
TMP_52 = CONVERT this to address
TMP_53(uint256) = HIGH_LEVEL_CALL, dest:Token(ERC20), function:balanceOf, arguments:['TMP_52']  
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(ERC20Basic,address,uint256), arguments:['Token', 'owner', 'TMP_53'] "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
}
