digraph G {
// Function: 9334.sol-CrowdsaleExt-CrowdsaleExt(string,address,PricingStrategy,address,uint256,uint256,uint256,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token = FractionalERC20Ext(_token)

IRs:
TMP_74 = CONVERT _token to FractionalERC20Ext
token(FractionalERC20Ext) := TMP_74(FractionalERC20Ext)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setPricingStrategy(_pricingStrategy)

IRs:
INTERNAL_CALL, CrowdsaleExt.setPricingStrategy(PricingStrategy)(_pricingStrategy)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
multisigWallet = _multisigWallet

IRs:
multisigWallet(address) := _multisigWallet(address)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
multisigWallet == 0

IRs:
TMP_76(bool) = multisigWallet == 0
CONDITION TMP_76"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: THROW 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_start == 0

IRs:
TMP_77(bool) = _start == 0
CONDITION TMP_77"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: THROW 10
"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
startsAt = _start

IRs:
startsAt(uint256) := _start(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_end == 0

IRs:
TMP_78(bool) = _end == 0
CONDITION TMP_78"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: THROW 14
"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
endsAt = _end

IRs:
endsAt(uint256) := _end(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
startsAt >= endsAt

IRs:
TMP_79(bool) = startsAt >= endsAt
CONDITION TMP_79"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: THROW 18
"];
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
minimumFundingGoal = _minimumFundingGoal

IRs:
minimumFundingGoal(uint256) := _minimumFundingGoal(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isUpdatable = _isUpdatable

IRs:
isUpdatable(bool) := _isUpdatable(bool)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isWhiteListed = _isWhiteListed

IRs:
isWhiteListed(bool) := _isWhiteListed(bool)"];
}
// Function: 9334.sol-CrowdsaleExt-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9334.sol-CrowdsaleExt-areReservedTokensDistributed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
finalizeAgent.reservedTokensAreDistributed()

IRs:
TMP_118(bool) = HIGH_LEVEL_CALL, dest:finalizeAgent(FinalizeAgent), function:reservedTokensAreDistributed, arguments:[]  
RETURN TMP_118"];
}
// Function: 9334.sol-CrowdsaleExt-assignTokens(address,uint256)
digraph{
}
// Function: 9334.sol-CrowdsaleExt-buy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
invest(msg.sender)

IRs:
INTERNAL_CALL, CrowdsaleExt.invest(address)(msg.sender)"];
}
// Function: 9334.sol-CrowdsaleExt-canDistributeReservedTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
lastTierCntrct = CrowdsaleExt(getLastTier())

IRs:
TMP_119(address) = INTERNAL_CALL, CrowdsaleExt.getLastTier()()
TMP_120 = CONVERT TMP_119 to CrowdsaleExt
lastTierCntrct(CrowdsaleExt) := TMP_120(CrowdsaleExt)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(lastTierCntrct.getState() == State.Success) && ! lastTierCntrct.halted() && ! lastTierCntrct.finalized() && ! lastTierCntrct.areReservedTokensDistributed()

IRs:
TMP_121(CrowdsaleExt.State) = HIGH_LEVEL_CALL, dest:lastTierCntrct(CrowdsaleExt), function:getState, arguments:[]  
REF_25(CrowdsaleExt.State) -> State.Success
TMP_122(bool) = TMP_121 == REF_25
TMP_123(bool) = HIGH_LEVEL_CALL, dest:lastTierCntrct(CrowdsaleExt), function:halted, arguments:[]  
TMP_124 = UnaryType.BANG TMP_123 
TMP_125(bool) = TMP_122 && TMP_124
TMP_126(bool) = HIGH_LEVEL_CALL, dest:lastTierCntrct(CrowdsaleExt), function:finalized, arguments:[]  
TMP_127 = UnaryType.BANG TMP_126 
TMP_128(bool) = TMP_125 && TMP_127
TMP_129(bool) = HIGH_LEVEL_CALL, dest:lastTierCntrct(CrowdsaleExt), function:areReservedTokensDistributed, arguments:[]  
TMP_130 = UnaryType.BANG TMP_129 
TMP_131(bool) = TMP_128 && TMP_130
CONDITION TMP_131"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 9334.sol-CrowdsaleExt-distributeReservedTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
finalized

IRs:
CONDITION finalized"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(finalizeAgent) != address(0)

IRs:
TMP_111 = CONVERT finalizeAgent to address
TMP_112 = CONVERT 0 to address
TMP_113(bool) = TMP_111 != TMP_112
CONDITION TMP_113"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
finalizeAgent.distributeReservedTokens(reservedTokensDistributionBatch)

IRs:
HIGH_LEVEL_CALL, dest:finalizeAgent(FinalizeAgent), function:distributeReservedTokens, arguments:['reservedTokensDistributionBatch']  "];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
inState(State.Success)

IRs:
REF_22(CrowdsaleExt.State) -> State.Success
MODIFIER_CALL, CrowdsaleExt.inState(CrowdsaleExt.State)(REF_22)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
stopInEmergency()

IRs:
MODIFIER_CALL, Haltable.stopInEmergency()()"];
9->1;
}
// Function: 9334.sol-CrowdsaleExt-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: THROW 1
"];
}
// Function: 9334.sol-CrowdsaleExt-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
finalized

IRs:
CONDITION finalized"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(finalizeAgent) != address(0)

IRs:
TMP_132 = CONVERT finalizeAgent to address
TMP_133 = CONVERT 0 to address
TMP_134(bool) = TMP_132 != TMP_133
CONDITION TMP_134"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
finalizeAgent.finalizeCrowdsale()

IRs:
HIGH_LEVEL_CALL, dest:finalizeAgent(FinalizeAgent), function:finalizeCrowdsale, arguments:[]  "];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
finalized = true

IRs:
finalized(bool) := True(bool)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
inState(State.Success)

IRs:
REF_30(CrowdsaleExt.State) -> State.Success
MODIFIER_CALL, CrowdsaleExt.inState(CrowdsaleExt.State)(REF_30)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
stopInEmergency()

IRs:
MODIFIER_CALL, Haltable.stopInEmergency()()"];
10->1;
}
// Function: 9334.sol-CrowdsaleExt-getLastTier()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
joinedCrowdsalesLen > 0

IRs:
TMP_208(bool) = joinedCrowdsalesLen > 0
CONDITION TMP_208"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
joinedCrowdsales[joinedCrowdsalesLen - 1]

IRs:
TMP_209(uint8) = joinedCrowdsalesLen - 1
REF_68(address) -> joinedCrowdsales[TMP_209]
RETURN REF_68"];
3[label="Node Type: RETURN 3

EXPRESSION:
address(0)

IRs:
TMP_210 = CONVERT 0 to address
RETURN TMP_210"];
}
// Function: 9334.sol-CrowdsaleExt-getState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
finalized

IRs:
CONDITION finalized"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
State.Finalized

IRs:
REF_86(CrowdsaleExt.State) -> State.Finalized
RETURN REF_86"];
3[label="Node Type: IF 3

EXPRESSION:
address(finalizeAgent) == 0

IRs:
TMP_295 = CONVERT finalizeAgent to address
TMP_296(bool) = TMP_295 == 0
CONDITION TMP_296"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
State.Preparing

IRs:
REF_87(CrowdsaleExt.State) -> State.Preparing
RETURN REF_87"];
5[label="Node Type: IF 5

EXPRESSION:
! finalizeAgent.isSane()

IRs:
TMP_297(bool) = HIGH_LEVEL_CALL, dest:finalizeAgent(FinalizeAgent), function:isSane, arguments:[]  
TMP_298 = UnaryType.BANG TMP_297 
CONDITION TMP_298"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
State.Preparing

IRs:
REF_89(CrowdsaleExt.State) -> State.Preparing
RETURN REF_89"];
7[label="Node Type: IF 7

EXPRESSION:
! pricingStrategy.isSane(address(this))

IRs:
TMP_299 = CONVERT this to address
TMP_300(bool) = HIGH_LEVEL_CALL, dest:pricingStrategy(PricingStrategy), function:isSane, arguments:['TMP_299']  
TMP_301 = UnaryType.BANG TMP_300 
CONDITION TMP_301"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
State.Preparing

IRs:
REF_91(CrowdsaleExt.State) -> State.Preparing
RETURN REF_91"];
9[label="Node Type: IF 9

EXPRESSION:
block.timestamp < startsAt

IRs:
TMP_302(bool) = block.timestamp < startsAt
CONDITION TMP_302"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
State.PreFunding

IRs:
REF_92(CrowdsaleExt.State) -> State.PreFunding
RETURN REF_92"];
11[label="Node Type: IF 11

EXPRESSION:
block.timestamp <= endsAt && ! isCrowdsaleFull()

IRs:
TMP_303(bool) = block.timestamp <= endsAt
TMP_304(bool) = INTERNAL_CALL, CrowdsaleExt.isCrowdsaleFull()()
TMP_305 = UnaryType.BANG TMP_304 
TMP_306(bool) = TMP_303 && TMP_305
CONDITION TMP_306"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
State.Funding

IRs:
REF_93(CrowdsaleExt.State) -> State.Funding
RETURN REF_93"];
13[label="Node Type: IF 13

EXPRESSION:
isMinimumGoalReached()

IRs:
TMP_307(bool) = INTERNAL_CALL, CrowdsaleExt.isMinimumGoalReached()()
CONDITION TMP_307"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
State.Success

IRs:
REF_94(CrowdsaleExt.State) -> State.Success
RETURN REF_94"];
15[label="Node Type: RETURN 15

EXPRESSION:
State.Failure

IRs:
REF_95(CrowdsaleExt.State) -> State.Failure
RETURN REF_95"];
}
// Function: 9334.sol-CrowdsaleExt-getTierPosition(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
joinedCrowdsaleState[addr].position

IRs:
REF_66(CrowdsaleExt.JoinedCrowdsaleStatus) -> joinedCrowdsaleState[addr]
REF_67(uint8) -> REF_66.position
RETURN REF_67"];
}
// Function: 9334.sol-CrowdsaleExt-halt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = true

IRs:
halted(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9334.sol-CrowdsaleExt-inState(CrowdsaleExt.State)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getState() != state

IRs:
TMP_313(CrowdsaleExt.State) = INTERNAL_CALL, CrowdsaleExt.getState()()
TMP_314(bool) = TMP_313 != state
CONDITION TMP_314"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-CrowdsaleExt-invest(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
investInternal(addr,0)

IRs:
INTERNAL_CALL, CrowdsaleExt.investInternal(address,uint128)(addr,0)"];
}
// Function: 9334.sol-CrowdsaleExt-investInternal(address,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->44;
1[label="Node Type: IF 1

EXPRESSION:
getState() == State.PreFunding

IRs:
TMP_80(CrowdsaleExt.State) = INTERNAL_CALL, CrowdsaleExt.getState()()
REF_0(CrowdsaleExt.State) -> State.PreFunding
TMP_81(bool) = TMP_80 == REF_0
CONDITION TMP_81"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: IF 3

EXPRESSION:
getState() == State.Funding

IRs:
TMP_82(CrowdsaleExt.State) = INTERNAL_CALL, CrowdsaleExt.getState()()
REF_1(CrowdsaleExt.State) -> State.Funding
TMP_83(bool) = TMP_82 == REF_1
CONDITION TMP_83"];
3->4[label="True"];
3->9[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
isWhiteListed

IRs:
CONDITION isWhiteListed"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
! earlyParticipantWhitelist[receiver].status

IRs:
REF_2(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[receiver]
REF_3(bool) -> REF_2.status
TMP_84 = UnaryType.BANG REF_3 
CONDITION TMP_84"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->10;
9[label="Node Type: THROW 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised,tokensSold,msg.sender,token.decimals())

IRs:
TMP_85(uint256) = HIGH_LEVEL_CALL, dest:token(FractionalERC20Ext), function:decimals, arguments:[]  
TMP_86(uint256) = HIGH_LEVEL_CALL, dest:pricingStrategy(PricingStrategy), function:calculatePrice, arguments:['weiAmount', 'weiRaised', 'tokensSold', 'msg.sender', 'TMP_85']  
tokenAmount(uint256) := TMP_86(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
tokenAmount == 0

IRs:
TMP_87(bool) = tokenAmount == 0
CONDITION TMP_87"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
isWhiteListed

IRs:
CONDITION isWhiteListed"];
17->18[label="True"];
17->25[label="False"];
18[label="Node Type: IF 18

EXPRESSION:
tokenAmount < earlyParticipantWhitelist[receiver].minCap && tokenAmountOf[receiver] == 0

IRs:
REF_6(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[receiver]
REF_7(uint256) -> REF_6.minCap
TMP_88(bool) = tokenAmount < REF_7
REF_8(uint256) -> tokenAmountOf[receiver]
TMP_89(bool) = REF_8 == 0
TMP_90(bool) = TMP_88 && TMP_89
CONDITION TMP_90"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: THROW 19
"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
isBreakingInvestorCap(receiver,tokenAmount)

IRs:
TMP_91(bool) = INTERNAL_CALL, CrowdsaleExt.isBreakingInvestorCap(address,uint256)(receiver,tokenAmount)
CONDITION TMP_91"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: THROW 22
"];
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
updateInheritedEarlyParticipantWhitelist(receiver,tokenAmount)

IRs:
INTERNAL_CALL, CrowdsaleExt.updateInheritedEarlyParticipantWhitelist(address,uint256)(receiver,tokenAmount)"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
tokenAmount < token.minCap() && tokenAmountOf[receiver] == 0

IRs:
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:token(FractionalERC20Ext), function:minCap, arguments:[]  
TMP_94(bool) = tokenAmount < TMP_93
REF_10(uint256) -> tokenAmountOf[receiver]
TMP_95(bool) = REF_10 == 0
TMP_96(bool) = TMP_94 && TMP_95
CONDITION TMP_96"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: THROW 26
"];
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
investedAmountOf[receiver] == 0

IRs:
REF_11(uint256) -> investedAmountOf[receiver]
TMP_97(bool) = REF_11 == 0
CONDITION TMP_97"];
29->30[label="True"];
29->31[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
investorCount ++

IRs:
TMP_98(uint256) := investorCount(uint256)
investorCount(uint256) = investorCount + 1"];
30->31;
31[label="Node Type: END_IF 31
"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
investedAmountOf[receiver] = investedAmountOf[receiver].plus(weiAmount)

IRs:
REF_12(uint256) -> investedAmountOf[receiver]
REF_13(uint256) -> investedAmountOf[receiver]
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['REF_13', 'weiAmount'] 
REF_12(uint256) (->investedAmountOf) := TMP_99(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
tokenAmountOf[receiver] = tokenAmountOf[receiver].plus(tokenAmount)

IRs:
REF_15(uint256) -> tokenAmountOf[receiver]
REF_16(uint256) -> tokenAmountOf[receiver]
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['REF_16', 'tokenAmount'] 
REF_15(uint256) (->tokenAmountOf) := TMP_100(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
weiRaised = weiRaised.plus(weiAmount)

IRs:
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_101(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
tokensSold = tokensSold.plus(tokenAmount)

IRs:
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['tokensSold', 'tokenAmount'] 
tokensSold(uint256) := TMP_102(uint256)"];
35->36;
36[label="Node Type: IF 36

EXPRESSION:
isBreakingCap(weiAmount,tokenAmount,weiRaised,tokensSold)

IRs:
TMP_103(bool) = INTERNAL_CALL, CrowdsaleExt.isBreakingCap(uint256,uint256,uint256,uint256)(weiAmount,tokenAmount,weiRaised,tokensSold)
CONDITION TMP_103"];
36->37[label="True"];
36->38[label="False"];
37[label="Node Type: THROW 37
"];
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
assignTokens(receiver,tokenAmount)

IRs:
INTERNAL_CALL, CrowdsaleExt.assignTokens(address,uint256)(receiver,tokenAmount)"];
39->40;
40[label="Node Type: IF 40

EXPRESSION:
! multisigWallet.send(weiAmount)

IRs:
TMP_105 = SEND dest:multisigWallet value:weiAmount
TMP_106 = UnaryType.BANG TMP_105 
CONDITION TMP_106"];
40->41[label="True"];
40->42[label="False"];
41[label="Node Type: THROW 41
"];
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
Invested(receiver,weiAmount,tokenAmount,customerId)

IRs:
Emit Invested(receiver,weiAmount,tokenAmount,customerId)"];
44[label="Node Type: EXPRESSION 44

EXPRESSION:
stopInEmergency()

IRs:
MODIFIER_CALL, Haltable.stopInEmergency()()"];
44->1;
}
// Function: 9334.sol-CrowdsaleExt-isAddressWhitelisted(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < whitelistedParticipants.length

IRs:
REF_61 -> LENGTH whitelistedParticipants
TMP_205(bool) = i < REF_61
CONDITION TMP_205"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
whitelistedParticipants[i] == addr

IRs:
REF_62(address) -> whitelistedParticipants[i]
TMP_206(bool) = REF_62 == addr
CONDITION TMP_206"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: BREAK 7
"];
7->2;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_207(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 9334.sol-CrowdsaleExt-isBreakingCap(uint256,uint256,uint256,uint256)
digraph{
}
// Function: 9334.sol-CrowdsaleExt-isBreakingInvestorCap(address,uint256)
digraph{
}
// Function: 9334.sol-CrowdsaleExt-isCrowdsale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9334.sol-CrowdsaleExt-isCrowdsaleFull()
digraph{
}
// Function: 9334.sol-CrowdsaleExt-isFinalizerSane()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
finalizeAgent.isSane()

IRs:
TMP_292(bool) = HIGH_LEVEL_CALL, dest:finalizeAgent(FinalizeAgent), function:isSane, arguments:[]  
RETURN TMP_292"];
2[label="Node Type: RETURN 2

EXPRESSION:
sane

IRs:
RETURN sane"];
}
// Function: 9334.sol-CrowdsaleExt-isMinimumGoalReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
weiRaised >= minimumFundingGoal

IRs:
TMP_291(bool) = weiRaised >= minimumFundingGoal
RETURN TMP_291"];
2[label="Node Type: RETURN 2

EXPRESSION:
reached

IRs:
RETURN reached"];
}
// Function: 9334.sol-CrowdsaleExt-isPricingSane()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
pricingStrategy.isSane(address(this))

IRs:
TMP_293 = CONVERT this to address
TMP_294(bool) = HIGH_LEVEL_CALL, dest:pricingStrategy(PricingStrategy), function:isSane, arguments:['TMP_293']  
RETURN TMP_294"];
2[label="Node Type: RETURN 2

EXPRESSION:
sane

IRs:
RETURN sane"];
}
// Function: 9334.sol-CrowdsaleExt-isTierJoined(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
joinedCrowdsaleState[addr].isJoined

IRs:
REF_64(CrowdsaleExt.JoinedCrowdsaleStatus) -> joinedCrowdsaleState[addr]
REF_65(bool) -> REF_64.isJoined
RETURN REF_65"];
}
// Function: 9334.sol-CrowdsaleExt-onlyInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! halted

IRs:
TMP_310 = UnaryType.BANG halted 
CONDITION TMP_310"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-CrowdsaleExt-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_311(bool) = msg.sender == owner
TMP_312(None) = SOLIDITY_CALL require(bool)(TMP_311)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9334.sol-CrowdsaleExt-setEarlyParticipantWhitelist(address,bool,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: IF 1

EXPRESSION:
! isWhiteListed

IRs:
TMP_150 = UnaryType.BANG isWhiteListed 
CONDITION TMP_150"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(addr != address(0))

IRs:
TMP_151 = CONVERT 0 to address
TMP_152(bool) = addr != TMP_151
TMP_153(None) = SOLIDITY_CALL assert(bool)(TMP_152)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(maxCap > 0)

IRs:
TMP_154(bool) = maxCap > 0
TMP_155(None) = SOLIDITY_CALL assert(bool)(TMP_154)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(minCap <= maxCap)

IRs:
TMP_156(bool) = minCap <= maxCap
TMP_157(None) = SOLIDITY_CALL assert(bool)(TMP_156)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(now <= endsAt)

IRs:
TMP_158(bool) = now <= endsAt
TMP_159(None) = SOLIDITY_CALL assert(bool)(TMP_158)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! isAddressWhitelisted(addr)

IRs:
TMP_160(bool) = INTERNAL_CALL, CrowdsaleExt.isAddressWhitelisted(address)(addr)
TMP_161 = UnaryType.BANG TMP_160 
CONDITION TMP_161"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whitelistedParticipants.push(addr)

IRs:
REF_33 -> LENGTH whitelistedParticipants
TMP_163(uint256) := REF_33(uint256)
TMP_164(uint256) = TMP_163 + 1
REF_33(uint256) (->whitelistedParticipants) := TMP_164(uint256)
REF_34(address) -> whitelistedParticipants[TMP_163]
REF_34(address) (->whitelistedParticipants) := addr(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Whitelisted(addr,status,minCap,maxCap)

IRs:
Emit Whitelisted(addr,status,minCap,maxCap)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
WhitelistItemChanged(addr,status,minCap,maxCap)

IRs:
Emit WhitelistItemChanged(addr,status,minCap,maxCap)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
earlyParticipantWhitelist[addr] = WhiteListData(status,minCap,maxCap)

IRs:
REF_35(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[addr]
TMP_167(CrowdsaleExt.WhiteListData) = new WhiteListData(status,minCap,maxCap)
REF_35(CrowdsaleExt.WhiteListData) (->earlyParticipantWhitelist) := TMP_167(CrowdsaleExt.WhiteListData)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
14->1;
}
// Function: 9334.sol-CrowdsaleExt-setEarlyParticipantWhitelistMultiple(address[],bool[],uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: IF 1

EXPRESSION:
! isWhiteListed

IRs:
TMP_169 = UnaryType.BANG isWhiteListed 
CONDITION TMP_169"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(now <= endsAt)

IRs:
TMP_170(bool) = now <= endsAt
TMP_171(None) = SOLIDITY_CALL assert(bool)(TMP_170)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(addrs.length == statuses.length)

IRs:
REF_36 -> LENGTH addrs
REF_37 -> LENGTH statuses
TMP_172(bool) = REF_36 == REF_37
TMP_173(None) = SOLIDITY_CALL assert(bool)(TMP_172)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(statuses.length == minCaps.length)

IRs:
REF_38 -> LENGTH statuses
REF_39 -> LENGTH minCaps
TMP_174(bool) = REF_38 == REF_39
TMP_175(None) = SOLIDITY_CALL assert(bool)(TMP_174)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(minCaps.length == maxCaps.length)

IRs:
REF_40 -> LENGTH minCaps
REF_41 -> LENGTH maxCaps
TMP_176(bool) = REF_40 == REF_41
TMP_177(None) = SOLIDITY_CALL assert(bool)(TMP_176)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
iterator = 0

IRs:
iterator(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
iterator < addrs.length

IRs:
REF_42 -> LENGTH addrs
TMP_178(bool) = iterator < REF_42
CONDITION TMP_178"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
setEarlyParticipantWhitelist(addrs[iterator],statuses[iterator],minCaps[iterator],maxCaps[iterator])

IRs:
REF_43(address) -> addrs[iterator]
REF_44(bool) -> statuses[iterator]
REF_45(uint256) -> minCaps[iterator]
REF_46(uint256) -> maxCaps[iterator]
INTERNAL_CALL, CrowdsaleExt.setEarlyParticipantWhitelist(address,bool,uint256,uint256)(REF_43,REF_44,REF_45,REF_46)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
iterator ++

IRs:
TMP_180(uint256) := iterator(uint256)
iterator(uint256) = iterator + 1"];
13->11;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
14->1;
}
// Function: 9334.sol-CrowdsaleExt-setEndsAt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! finalized)

IRs:
TMP_256 = UnaryType.BANG finalized 
TMP_257(None) = SOLIDITY_CALL assert(bool)(TMP_256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(isUpdatable)

IRs:
TMP_258(None) = SOLIDITY_CALL assert(bool)(isUpdatable)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(now <= time)

IRs:
TMP_259(bool) = now <= time
TMP_260(None) = SOLIDITY_CALL assert(bool)(TMP_259)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(startsAt <= time)

IRs:
TMP_261(bool) = startsAt <= time
TMP_262(None) = SOLIDITY_CALL assert(bool)(TMP_261)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(now <= endsAt)

IRs:
TMP_263(bool) = now <= endsAt
TMP_264(None) = SOLIDITY_CALL assert(bool)(TMP_263)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
lastTierCntrct = CrowdsaleExt(getLastTier())

IRs:
TMP_265(address) = INTERNAL_CALL, CrowdsaleExt.getLastTier()()
TMP_266 = CONVERT TMP_265 to CrowdsaleExt
lastTierCntrct(CrowdsaleExt) := TMP_266(CrowdsaleExt)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
lastTierCntrct.finalized()

IRs:
TMP_267(bool) = HIGH_LEVEL_CALL, dest:lastTierCntrct(CrowdsaleExt), function:finalized, arguments:[]  
CONDITION TMP_267"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
tierPosition = getTierPosition(this)

IRs:
TMP_268(uint8) = INTERNAL_CALL, CrowdsaleExt.getTierPosition(address)(this)
tierPosition(uint8) := TMP_268(uint8)"];
10->13;
11[label="Node Type: BEGIN_LOOP 11
"];
11->14;
12[label="Node Type: END_LOOP 12
"];
12->18;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
j = tierPosition + 1

IRs:
TMP_269(uint8) = tierPosition + 1
j(uint8) := TMP_269(uint8)"];
13->11;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
j < joinedCrowdsalesLen

IRs:
TMP_270(bool) = j < joinedCrowdsalesLen
CONDITION TMP_270"];
14->15[label="True"];
14->12[label="False"];
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
crowdsale = CrowdsaleExt(joinedCrowdsales[j])

IRs:
REF_81(address) -> joinedCrowdsales[j]
TMP_271 = CONVERT REF_81 to CrowdsaleExt
crowdsale(CrowdsaleExt) := TMP_271(CrowdsaleExt)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
assert(bool)(time <= crowdsale.startsAt())

IRs:
TMP_272(uint256) = HIGH_LEVEL_CALL, dest:crowdsale(CrowdsaleExt), function:startsAt, arguments:[]  
TMP_273(bool) = time <= TMP_272
TMP_274(None) = SOLIDITY_CALL assert(bool)(TMP_273)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
j ++

IRs:
TMP_275(uint8) := j(uint8)
j(uint8) = j + 1"];
17->14;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
endsAt = time

IRs:
endsAt(uint256) := time(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
EndsAtChanged(endsAt)

IRs:
Emit EndsAtChanged(endsAt)"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
20->1;
}
// Function: 9334.sol-CrowdsaleExt-setFinalizeAgent(FinalizeAgent)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(address(addr) != address(0))

IRs:
TMP_139 = CONVERT addr to address
TMP_140 = CONVERT 0 to address
TMP_141(bool) = TMP_139 != TMP_140
TMP_142(None) = SOLIDITY_CALL assert(bool)(TMP_141)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(address(finalizeAgent) == address(0))

IRs:
TMP_143 = CONVERT finalizeAgent to address
TMP_144 = CONVERT 0 to address
TMP_145(bool) = TMP_143 == TMP_144
TMP_146(None) = SOLIDITY_CALL assert(bool)(TMP_145)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
finalizeAgent = addr

IRs:
finalizeAgent(FinalizeAgent) := addr(FinalizeAgent)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! finalizeAgent.isFinalizeAgent()

IRs:
TMP_147(bool) = HIGH_LEVEL_CALL, dest:finalizeAgent(FinalizeAgent), function:isFinalizeAgent, arguments:[]  
TMP_148 = UnaryType.BANG TMP_147 
CONDITION TMP_148"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 9334.sol-CrowdsaleExt-setJoinedCrowdsales(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(addr != address(0))

IRs:
TMP_211 = CONVERT 0 to address
TMP_212(bool) = addr != TMP_211
TMP_213(None) = SOLIDITY_CALL assert(bool)(TMP_212)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(joinedCrowdsalesLen <= joinedCrowdsalesLenMax)

IRs:
TMP_214(bool) = joinedCrowdsalesLen <= joinedCrowdsalesLenMax
TMP_215(None) = SOLIDITY_CALL assert(bool)(TMP_214)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(! isTierJoined(addr))

IRs:
TMP_216(bool) = INTERNAL_CALL, CrowdsaleExt.isTierJoined(address)(addr)
TMP_217 = UnaryType.BANG TMP_216 
TMP_218(None) = SOLIDITY_CALL assert(bool)(TMP_217)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
joinedCrowdsales.push(addr)

IRs:
REF_70 -> LENGTH joinedCrowdsales
TMP_220(uint256) := REF_70(uint256)
TMP_221(uint256) = TMP_220 + 1
REF_70(uint256) (->joinedCrowdsales) := TMP_221(uint256)
REF_71(address) -> joinedCrowdsales[TMP_220]
REF_71(address) (->joinedCrowdsales) := addr(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
joinedCrowdsaleState[addr] = JoinedCrowdsaleStatus(true,joinedCrowdsalesLen)

IRs:
REF_72(CrowdsaleExt.JoinedCrowdsaleStatus) -> joinedCrowdsaleState[addr]
TMP_222(CrowdsaleExt.JoinedCrowdsaleStatus) = new JoinedCrowdsaleStatus(True,joinedCrowdsalesLen)
REF_72(CrowdsaleExt.JoinedCrowdsaleStatus) (->joinedCrowdsaleState) := TMP_222(CrowdsaleExt.JoinedCrowdsaleStatus)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
joinedCrowdsalesLen ++

IRs:
TMP_223(uint8) := joinedCrowdsalesLen(uint8)
joinedCrowdsalesLen(uint8) = joinedCrowdsalesLen + 1"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 9334.sol-CrowdsaleExt-setMultisig(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
investorCount > MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE

IRs:
TMP_289(bool) = investorCount > MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE
CONDITION TMP_289"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
multisigWallet = addr

IRs:
multisigWallet(address) := addr(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 9334.sol-CrowdsaleExt-setPricingStrategy(PricingStrategy)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(address(_pricingStrategy) != address(0))

IRs:
TMP_278 = CONVERT _pricingStrategy to address
TMP_279 = CONVERT 0 to address
TMP_280(bool) = TMP_278 != TMP_279
TMP_281(None) = SOLIDITY_CALL assert(bool)(TMP_280)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(address(pricingStrategy) == address(0))

IRs:
TMP_282 = CONVERT pricingStrategy to address
TMP_283 = CONVERT 0 to address
TMP_284(bool) = TMP_282 == TMP_283
TMP_285(None) = SOLIDITY_CALL assert(bool)(TMP_284)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pricingStrategy = _pricingStrategy

IRs:
pricingStrategy(PricingStrategy) := _pricingStrategy(PricingStrategy)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! pricingStrategy.isPricingStrategy()

IRs:
TMP_286(bool) = HIGH_LEVEL_CALL, dest:pricingStrategy(PricingStrategy), function:isPricingStrategy, arguments:[]  
TMP_287 = UnaryType.BANG TMP_286 
CONDITION TMP_287"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 9334.sol-CrowdsaleExt-setStartsAt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! finalized)

IRs:
TMP_235 = UnaryType.BANG finalized 
TMP_236(None) = SOLIDITY_CALL assert(bool)(TMP_235)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(isUpdatable)

IRs:
TMP_237(None) = SOLIDITY_CALL assert(bool)(isUpdatable)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(now <= time)

IRs:
TMP_238(bool) = now <= time
TMP_239(None) = SOLIDITY_CALL assert(bool)(TMP_238)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(time <= endsAt)

IRs:
TMP_240(bool) = time <= endsAt
TMP_241(None) = SOLIDITY_CALL assert(bool)(TMP_240)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(now <= startsAt)

IRs:
TMP_242(bool) = now <= startsAt
TMP_243(None) = SOLIDITY_CALL assert(bool)(TMP_242)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
lastTierCntrct = CrowdsaleExt(getLastTier())

IRs:
TMP_244(address) = INTERNAL_CALL, CrowdsaleExt.getLastTier()()
TMP_245 = CONVERT TMP_244 to CrowdsaleExt
lastTierCntrct(CrowdsaleExt) := TMP_245(CrowdsaleExt)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
lastTierCntrct.finalized()

IRs:
TMP_246(bool) = HIGH_LEVEL_CALL, dest:lastTierCntrct(CrowdsaleExt), function:finalized, arguments:[]  
CONDITION TMP_246"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
tierPosition = getTierPosition(this)

IRs:
TMP_247(uint8) = INTERNAL_CALL, CrowdsaleExt.getTierPosition(address)(this)
tierPosition(uint8) := TMP_247(uint8)"];
10->13;
11[label="Node Type: BEGIN_LOOP 11
"];
11->14;
12[label="Node Type: END_LOOP 12
"];
12->18;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
j = 0

IRs:
j(uint8) := 0(uint256)"];
13->11;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
j < tierPosition

IRs:
TMP_248(bool) = j < tierPosition
CONDITION TMP_248"];
14->15[label="True"];
14->12[label="False"];
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
crowdsale = CrowdsaleExt(joinedCrowdsales[j])

IRs:
REF_78(address) -> joinedCrowdsales[j]
TMP_249 = CONVERT REF_78 to CrowdsaleExt
crowdsale(CrowdsaleExt) := TMP_249(CrowdsaleExt)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
assert(bool)(time >= crowdsale.endsAt())

IRs:
TMP_250(uint256) = HIGH_LEVEL_CALL, dest:crowdsale(CrowdsaleExt), function:endsAt, arguments:[]  
TMP_251(bool) = time >= TMP_250
TMP_252(None) = SOLIDITY_CALL assert(bool)(TMP_251)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
j ++

IRs:
TMP_253(uint8) := j(uint8)
j(uint8) = j + 1"];
17->14;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
startsAt = time

IRs:
startsAt(uint256) := time(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
StartsAtChanged(startsAt)

IRs:
Emit StartsAtChanged(startsAt)"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
20->1;
}
// Function: 9334.sol-CrowdsaleExt-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5

IRs:
MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE(uint256) := 5(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
tokensSold = 0

IRs:
tokensSold(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
weiRaised = 0

IRs:
weiRaised(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
investorCount = 0

IRs:
investorCount(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
joinedCrowdsalesLen = 0

IRs:
joinedCrowdsalesLen(uint8) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
joinedCrowdsalesLenMax = 50

IRs:
joinedCrowdsalesLenMax(uint8) := 50(uint256)"];
}
// Function: 9334.sol-CrowdsaleExt-stopInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted

IRs:
CONDITION halted"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-CrowdsaleExt-stopNonOwnersInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted && msg.sender != owner

IRs:
TMP_308(bool) = msg.sender != owner
TMP_309(bool) = halted && TMP_308
CONDITION TMP_309"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-CrowdsaleExt-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_69 = CONVERT 0 to address
TMP_70(bool) = newOwner != TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9334.sol-CrowdsaleExt-unhalt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = false

IRs:
halted(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyInEmergency()

IRs:
MODIFIER_CALL, Haltable.onlyInEmergency()()"];
3->1;
}
// Function: 9334.sol-CrowdsaleExt-updateEarlyParticipantWhitelist(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isWhiteListed

IRs:
TMP_192 = UnaryType.BANG isWhiteListed 
CONDITION TMP_192"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(addr != address(0))

IRs:
TMP_193 = CONVERT 0 to address
TMP_194(bool) = addr != TMP_193
TMP_195(None) = SOLIDITY_CALL assert(bool)(TMP_194)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(now <= endsAt)

IRs:
TMP_196(bool) = now <= endsAt
TMP_197(None) = SOLIDITY_CALL assert(bool)(TMP_196)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(isTierJoined(msg.sender))

IRs:
TMP_198(bool) = INTERNAL_CALL, CrowdsaleExt.isTierJoined(address)(msg.sender)
TMP_199(None) = SOLIDITY_CALL assert(bool)(TMP_198)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
tokensBought < earlyParticipantWhitelist[addr].minCap && tokenAmountOf[addr] == 0

IRs:
REF_52(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[addr]
REF_53(uint256) -> REF_52.minCap
TMP_200(bool) = tokensBought < REF_53
REF_54(uint256) -> tokenAmountOf[addr]
TMP_201(bool) = REF_54 == 0
TMP_202(bool) = TMP_200 && TMP_201
CONDITION TMP_202"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
newMaxCap = earlyParticipantWhitelist[addr].maxCap

IRs:
REF_55(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[addr]
REF_56(uint256) -> REF_55.maxCap
newMaxCap(uint256) := REF_56(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
newMaxCap = newMaxCap.minus(tokensBought)

IRs:
TMP_203(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.minus(uint256,uint256), arguments:['newMaxCap', 'tokensBought'] 
newMaxCap(uint256) := TMP_203(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
earlyParticipantWhitelist[addr] = WhiteListData(earlyParticipantWhitelist[addr].status,0,newMaxCap)

IRs:
REF_58(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[addr]
REF_59(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[addr]
REF_60(bool) -> REF_59.status
TMP_204(CrowdsaleExt.WhiteListData) = new WhiteListData(REF_60,0,newMaxCap)
REF_58(CrowdsaleExt.WhiteListData) (->earlyParticipantWhitelist) := TMP_204(CrowdsaleExt.WhiteListData)"];
}
// Function: 9334.sol-CrowdsaleExt-updateInheritedEarlyParticipantWhitelist(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isWhiteListed

IRs:
TMP_182 = UnaryType.BANG isWhiteListed 
CONDITION TMP_182"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
tokensBought < earlyParticipantWhitelist[reciever].minCap && tokenAmountOf[reciever] == 0

IRs:
REF_47(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[reciever]
REF_48(uint256) -> REF_47.minCap
TMP_183(bool) = tokensBought < REF_48
REF_49(uint256) -> tokenAmountOf[reciever]
TMP_184(bool) = REF_49 == 0
TMP_185(bool) = TMP_183 && TMP_184
CONDITION TMP_185"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
tierPosition = getTierPosition(this)

IRs:
TMP_186(uint8) = INTERNAL_CALL, CrowdsaleExt.getTierPosition(address)(this)
tierPosition(uint8) := TMP_186(uint8)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
j = tierPosition + 1

IRs:
TMP_187(uint8) = tierPosition + 1
j(uint8) := TMP_187(uint8)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
j < joinedCrowdsalesLen

IRs:
TMP_188(bool) = j < joinedCrowdsalesLen
CONDITION TMP_188"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
crowdsale = CrowdsaleExt(joinedCrowdsales[j])

IRs:
REF_50(address) -> joinedCrowdsales[j]
TMP_189 = CONVERT REF_50 to CrowdsaleExt
crowdsale(CrowdsaleExt) := TMP_189(CrowdsaleExt)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
crowdsale.updateEarlyParticipantWhitelist(reciever,tokensBought)

IRs:
HIGH_LEVEL_CALL, dest:crowdsale(CrowdsaleExt), function:updateEarlyParticipantWhitelist, arguments:['reciever', 'tokensBought']  "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
j ++

IRs:
TMP_191(uint8) := j(uint8)
j(uint8) = j + 1"];
14->11;
}
// Function: 9334.sol-CrowdsaleExt-updateJoinedCrowdsalesMultiple(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(addrs.length > 0)

IRs:
REF_73 -> LENGTH addrs
TMP_225(bool) = REF_73 > 0
TMP_226(None) = SOLIDITY_CALL assert(bool)(TMP_225)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(joinedCrowdsalesLen == 0)

IRs:
TMP_227(bool) = joinedCrowdsalesLen == 0
TMP_228(None) = SOLIDITY_CALL assert(bool)(TMP_227)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(addrs.length <= joinedCrowdsalesLenMax)

IRs:
REF_74 -> LENGTH addrs
TMP_229(bool) = REF_74 <= joinedCrowdsalesLenMax
TMP_230(None) = SOLIDITY_CALL assert(bool)(TMP_229)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
iter = 0

IRs:
iter(uint8) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
iter < addrs.length

IRs:
REF_75 -> LENGTH addrs
TMP_231(bool) = iter < REF_75
CONDITION TMP_231"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
setJoinedCrowdsales(addrs[iter])

IRs:
REF_76(address) -> addrs[iter]
INTERNAL_CALL, CrowdsaleExt.setJoinedCrowdsales(address)(REF_76)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iter ++

IRs:
TMP_233(uint8) := iter(uint8)
iter(uint8) = iter + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
// Function: 9334.sol-CrowdsaleExt-whitelistedParticipantsLength()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
whitelistedParticipants.length

IRs:
REF_63 -> LENGTH whitelistedParticipants
RETURN REF_63"];
}
// Function: 9334.sol-CrowdsaleTokenExt-CrowdsaleTokenExt(string,string,uint256,uint256,bool,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = _initialSupply

IRs:
totalSupply(uint256) := _initialSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint256) := _decimals(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
minCap = _globalMinCap

IRs:
minCap(uint256) := _globalMinCap(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[owner] = totalSupply

IRs:
REF_266(uint256) -> balances[owner]
REF_266(uint256) (->balances) := totalSupply(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
totalSupply > 0

IRs:
TMP_639(bool) = totalSupply > 0
CONDITION TMP_639"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Minted(owner,totalSupply)

IRs:
Emit Minted(owner,totalSupply)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
! _mintable

IRs:
TMP_641 = UnaryType.BANG _mintable 
CONDITION TMP_641"];
11->12[label="True"];
11->16[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
totalSupply == 0

IRs:
TMP_642(bool) = totalSupply == 0
CONDITION TMP_642"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: THROW 14
"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
UpgradeableToken(msg.sender)

IRs:
INTERNAL_CALL, UpgradeableToken.UpgradeableToken(address)(msg.sender)"];
17->1;
}
// Function: 9334.sol-CrowdsaleTokenExt-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9334.sol-CrowdsaleTokenExt-UpgradeableToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradeMaster = _upgradeMaster

IRs:
upgradeMaster(address) := _upgradeMaster(address)"];
}
// Function: 9334.sol-CrowdsaleTokenExt-allowance(address,address)
digraph{
}
// Function: 9334.sol-CrowdsaleTokenExt-approve(address,uint256)
digraph{
}
// Function: 9334.sol-CrowdsaleTokenExt-areTokensDistributedForAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].isDistributed

IRs:
REF_236(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_237(bool) -> REF_236.isDistributed
RETURN REF_237"];
2[label="Node Type: RETURN 2

EXPRESSION:
isDistributed

IRs:
RETURN isDistributed"];
}
// Function: 9334.sol-CrowdsaleTokenExt-balanceOf(address)
digraph{
}
// Function: 9334.sol-CrowdsaleTokenExt-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
mintingFinished

IRs:
CONDITION mintingFinished"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-CrowdsaleTokenExt-canTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! released

IRs:
TMP_661 = UnaryType.BANG released 
CONDITION TMP_661"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
! transferAgents[_sender]

IRs:
REF_270(bool) -> transferAgents[_sender]
TMP_662 = UnaryType.BANG REF_270 
CONDITION TMP_662"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 9334.sol-CrowdsaleTokenExt-canUpgrade()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
released && super.canUpgrade()

IRs:
TMP_646(bool) = INTERNAL_CALL, UpgradeableToken.canUpgrade()()
TMP_647(bool) = released && TMP_646
RETURN TMP_647"];
}
// Function: 9334.sol-CrowdsaleTokenExt-claimTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token != address(0))

IRs:
TMP_650 = CONVERT 0 to address
TMP_651(bool) = _token != TMP_650
TMP_652(None) = SOLIDITY_CALL require(bool)(TMP_651)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_653 = CONVERT _token to ERC20
token(ERC20) := TMP_653(ERC20)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
balance = token.balanceOf(this)

IRs:
TMP_654(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20), function:balanceOf, arguments:['this']  
balance(uint256) := TMP_654(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.transfer(owner,balance)

IRs:
TMP_655(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['owner', 'balance']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ClaimedTokens(_token,owner,balance)

IRs:
Emit ClaimedTokens(_token,owner,balance)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 9334.sol-CrowdsaleTokenExt-finalizeReservedAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
reservedTokensData = reservedTokensList[addr]

IRs:
REF_232(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
reservedTokensData(MintableTokenExt.ReservedTokensData) := REF_232(MintableTokenExt.ReservedTokensData)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reservedTokensData.isDistributed = true

IRs:
REF_233(bool) -> reservedTokensData.isDistributed
REF_233(bool) (->reservedTokensData) := True(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableTokenExt.onlyMintAgent()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
4->1;
}
// Function: 9334.sol-CrowdsaleTokenExt-getReservedPercentageDecimals(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].inPercentageDecimals

IRs:
REF_242(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_243(uint256) -> REF_242.inPercentageDecimals
RETURN REF_243"];
2[label="Node Type: RETURN 2

EXPRESSION:
inPercentageDecimals

IRs:
RETURN inPercentageDecimals"];
}
// Function: 9334.sol-CrowdsaleTokenExt-getReservedPercentageUnit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].inPercentageUnit

IRs:
REF_240(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_241(uint256) -> REF_240.inPercentageUnit
RETURN REF_241"];
2[label="Node Type: RETURN 2

EXPRESSION:
inPercentageUnit

IRs:
RETURN inPercentageUnit"];
}
// Function: 9334.sol-CrowdsaleTokenExt-getReservedTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].inTokens

IRs:
REF_238(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_239(uint256) -> REF_238.inTokens
RETURN REF_239"];
2[label="Node Type: RETURN 2

EXPRESSION:
inTokens

IRs:
RETURN inTokens"];
}
// Function: 9334.sol-CrowdsaleTokenExt-getUpgradeState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_544(bool) = INTERNAL_CALL, CrowdsaleTokenExt.canUpgrade()()
TMP_545 = UnaryType.BANG TMP_544 
CONDITION TMP_545"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
UpgradeState.NotAllowed

IRs:
REF_209(UpgradeableToken.UpgradeState) -> UpgradeState.NotAllowed
RETURN REF_209"];
3[label="Node Type: IF 3

EXPRESSION:
address(upgradeAgent) == 0x00

IRs:
TMP_546 = CONVERT upgradeAgent to address
TMP_547(bool) = TMP_546 == 0
CONDITION TMP_547"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
UpgradeState.WaitingForAgent

IRs:
REF_210(UpgradeableToken.UpgradeState) -> UpgradeState.WaitingForAgent
RETURN REF_210"];
5[label="Node Type: IF 5

EXPRESSION:
totalUpgraded == 0

IRs:
TMP_548(bool) = totalUpgraded == 0
CONDITION TMP_548"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
UpgradeState.ReadyToUpgrade

IRs:
REF_211(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
RETURN REF_211"];
7[label="Node Type: RETURN 7

EXPRESSION:
UpgradeState.Upgrading

IRs:
REF_212(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
RETURN REF_212"];
}
// Function: 9334.sol-CrowdsaleTokenExt-inReleaseState(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
releaseState != released

IRs:
TMP_663(bool) = releaseState != released
CONDITION TMP_663"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-CrowdsaleTokenExt-isAddressReserved(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].isReserved

IRs:
REF_234(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_235(bool) -> REF_234.isReserved
RETURN REF_235"];
2[label="Node Type: RETURN 2

EXPRESSION:
isReserved

IRs:
RETURN isReserved"];
}
// Function: 9334.sol-CrowdsaleTokenExt-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 9334.sol-CrowdsaleTokenExt-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_586(bool) = a >= b
CONDITION TMP_586"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-CrowdsaleTokenExt-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_584(bool) = a >= b
CONDITION TMP_584"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-CrowdsaleTokenExt-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_587(bool) = a < b
CONDITION TMP_587"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-CrowdsaleTokenExt-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_585(bool) = a < b
CONDITION TMP_585"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-CrowdsaleTokenExt-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.plus(amount)

IRs:
TMP_605(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['totalSupply', 'amount'] 
totalSupply(uint256) := TMP_605(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[receiver] = balances[receiver].plus(amount)

IRs:
REF_257(uint256) -> balances[receiver]
REF_258(uint256) -> balances[receiver]
TMP_606(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['REF_258', 'amount'] 
REF_257(uint256) (->balances) := TMP_606(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0,receiver,amount)

IRs:
Emit Transfer(0,receiver,amount)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableTokenExt.onlyMintAgent()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
5->1;
}
// Function: 9334.sol-CrowdsaleTokenExt-onlyMintAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! mintAgents[msg.sender]

IRs:
REF_269(bool) -> mintAgents[msg.sender]
TMP_658 = UnaryType.BANG REF_269 
CONDITION TMP_658"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-CrowdsaleTokenExt-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_659(bool) = msg.sender == owner
TMP_660(None) = SOLIDITY_CALL require(bool)(TMP_659)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9334.sol-CrowdsaleTokenExt-onlyReleaseAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != releaseAgent

IRs:
TMP_664(bool) = msg.sender != releaseAgent
CONDITION TMP_664"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-CrowdsaleTokenExt-releaseTokenTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
super.releaseTokenTransfer()

IRs:
INTERNAL_CALL, ReleasableToken.releaseTokenTransfer()()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyReleaseAgent()

IRs:
MODIFIER_CALL, ReleasableToken.onlyReleaseAgent()()"];
3->1;
}
// Function: 9334.sol-CrowdsaleTokenExt-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_579(uint256) = a + b
c(uint256) := TMP_579(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_580(bool) = c >= a
TMP_581(bool) = c >= b
TMP_582(bool) = TMP_580 && TMP_581
TMP_583(None) = SOLIDITY_CALL assert(bool)(TMP_582)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-CrowdsaleTokenExt-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_568(bool) = b > 0
TMP_569(None) = SOLIDITY_CALL assert(bool)(TMP_568)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_570(uint256) = a / b
c(uint256) := TMP_570(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_571(uint256) = b * c
TMP_572(uint256) = a % b
TMP_573(uint256) = TMP_571 + TMP_572
TMP_574(bool) = a == TMP_573
TMP_575(None) = SOLIDITY_CALL assert(bool)(TMP_574)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-CrowdsaleTokenExt-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_562(uint256) = a * b
c(uint256) := TMP_562(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_563(bool) = a == 0
TMP_564(uint256) = c / a
TMP_565(bool) = TMP_564 == b
TMP_566(bool) = TMP_563 || TMP_565
TMP_567(None) = SOLIDITY_CALL assert(bool)(TMP_566)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-CrowdsaleTokenExt-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_576(bool) = b <= a
TMP_577(None) = SOLIDITY_CALL assert(bool)(TMP_576)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_578(uint256) = a - b
RETURN TMP_578"];
}
// Function: 9334.sol-CrowdsaleTokenExt-setMintAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAgents[addr] = state

IRs:
REF_260(bool) -> mintAgents[addr]
REF_260(bool) (->mintAgents) := state(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintingAgentChanged(addr,state)

IRs:
Emit MintingAgentChanged(addr,state)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
4->1;
}
// Function: 9334.sol-CrowdsaleTokenExt-setReleaseAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseAgent = addr

IRs:
releaseAgent(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 9334.sol-CrowdsaleTokenExt-setReservedTokensList(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(addr != address(0))

IRs:
TMP_613 = CONVERT 0 to address
TMP_614(bool) = addr != TMP_613
TMP_615(None) = SOLIDITY_CALL assert(bool)(TMP_614)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! isAddressReserved(addr)

IRs:
TMP_616(bool) = INTERNAL_CALL, MintableTokenExt.isAddressReserved(address)(addr)
TMP_617 = UnaryType.BANG TMP_616 
CONDITION TMP_617"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
reservedTokensDestinations.push(addr)

IRs:
REF_262 -> LENGTH reservedTokensDestinations
TMP_619(uint256) := REF_262(uint256)
TMP_620(uint256) = TMP_619 + 1
REF_262(uint256) (->reservedTokensDestinations) := TMP_620(uint256)
REF_263(address) -> reservedTokensDestinations[TMP_619]
REF_263(address) (->reservedTokensDestinations) := addr(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reservedTokensDestinationsLen ++

IRs:
TMP_621(uint256) := reservedTokensDestinationsLen(uint256)
reservedTokensDestinationsLen(uint256) = reservedTokensDestinationsLen + 1"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
reservedTokensList[addr] = ReservedTokensData(inTokens,inPercentageUnit,inPercentageDecimals,true,false)

IRs:
REF_264(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
TMP_622(MintableTokenExt.ReservedTokensData) = new ReservedTokensData(inTokens,inPercentageUnit,inPercentageDecimals,True,False)
REF_264(MintableTokenExt.ReservedTokensData) (->reservedTokensList) := TMP_622(MintableTokenExt.ReservedTokensData)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 9334.sol-CrowdsaleTokenExt-setReservedTokensListMultiple(address[],uint256[],uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! reservedTokensDestinationsAreSet)

IRs:
TMP_590 = UnaryType.BANG reservedTokensDestinationsAreSet 
TMP_591(None) = SOLIDITY_CALL assert(bool)(TMP_590)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(addrs.length == inTokens.length)

IRs:
REF_244 -> LENGTH addrs
REF_245 -> LENGTH inTokens
TMP_592(bool) = REF_244 == REF_245
TMP_593(None) = SOLIDITY_CALL assert(bool)(TMP_592)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(inTokens.length == inPercentageUnit.length)

IRs:
REF_246 -> LENGTH inTokens
REF_247 -> LENGTH inPercentageUnit
TMP_594(bool) = REF_246 == REF_247
TMP_595(None) = SOLIDITY_CALL assert(bool)(TMP_594)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(inPercentageUnit.length == inPercentageDecimals.length)

IRs:
REF_248 -> LENGTH inPercentageUnit
REF_249 -> LENGTH inPercentageDecimals
TMP_596(bool) = REF_248 == REF_249
TMP_597(None) = SOLIDITY_CALL assert(bool)(TMP_596)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->13;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
iterator = 0

IRs:
iterator(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
iterator < addrs.length

IRs:
REF_250 -> LENGTH addrs
TMP_598(bool) = iterator < REF_250
CONDITION TMP_598"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
addrs[iterator] != address(0)

IRs:
REF_251(address) -> addrs[iterator]
TMP_599 = CONVERT 0 to address
TMP_600(bool) = REF_251 != TMP_599
CONDITION TMP_600"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
setReservedTokensList(addrs[iterator],inTokens[iterator],inPercentageUnit[iterator],inPercentageDecimals[iterator])

IRs:
REF_252(address) -> addrs[iterator]
REF_253(uint256) -> inTokens[iterator]
REF_254(uint256) -> inPercentageUnit[iterator]
REF_255(uint256) -> inPercentageDecimals[iterator]
INTERNAL_CALL, MintableTokenExt.setReservedTokensList(address,uint256,uint256,uint256)(REF_252,REF_253,REF_254,REF_255)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
iterator ++

IRs:
TMP_602(uint256) := iterator(uint256)
iterator(uint256) = iterator + 1"];
12->8;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
reservedTokensDestinationsAreSet = true

IRs:
reservedTokensDestinationsAreSet(bool) := True(bool)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
15->1;
}
// Function: 9334.sol-CrowdsaleTokenExt-setTokenInformation(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
UpdatedTokenInformation(name,symbol)

IRs:
Emit UpdatedTokenInformation(name,symbol)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9334.sol-CrowdsaleTokenExt-setTransferAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferAgents[addr] = state

IRs:
REF_265(bool) -> transferAgents[addr]
REF_265(bool) (->transferAgents) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 9334.sol-CrowdsaleTokenExt-setUpgradeAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_532(bool) = INTERNAL_CALL, CrowdsaleTokenExt.canUpgrade()()
TMP_533 = UnaryType.BANG TMP_532 
CONDITION TMP_533"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
agent == 0x0

IRs:
TMP_534(bool) = agent == 0
CONDITION TMP_534"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_535(bool) = msg.sender != upgradeMaster
CONDITION TMP_535"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
getUpgradeState() == UpgradeState.Upgrading

IRs:
TMP_536(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
REF_206(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_537(bool) = TMP_536 == REF_206
CONDITION TMP_537"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: THROW 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
upgradeAgent = UpgradeAgent(agent)

IRs:
TMP_538 = CONVERT agent to UpgradeAgent
upgradeAgent(UpgradeAgent) := TMP_538(UpgradeAgent)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! upgradeAgent.isUpgradeAgent()

IRs:
TMP_539(bool) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:isUpgradeAgent, arguments:[]  
TMP_540 = UnaryType.BANG TMP_539 
CONDITION TMP_540"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
upgradeAgent.originalSupply() != totalSupply

IRs:
TMP_541(uint256) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:originalSupply, arguments:[]  
TMP_542(bool) = TMP_541 != totalSupply
CONDITION TMP_542"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: THROW 18
"];
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
UpgradeAgentSet(upgradeAgent)

IRs:
Emit UpgradeAgentSet(upgradeAgent)"];
}
// Function: 9334.sol-CrowdsaleTokenExt-setUpgradeMaster(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
master == 0x0

IRs:
TMP_549(bool) = master == 0
CONDITION TMP_549"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_550(bool) = msg.sender != upgradeMaster
CONDITION TMP_550"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
upgradeMaster = master

IRs:
upgradeMaster(address) := master(address)"];
}
// Function: 9334.sol-CrowdsaleTokenExt-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
released = false

IRs:
released(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
reservedTokensDestinationsLen = 0

IRs:
reservedTokensDestinationsLen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
reservedTokensDestinationsAreSet = false

IRs:
reservedTokensDestinationsAreSet(bool) := False(bool)"];
}
// Function: 9334.sol-CrowdsaleTokenExt-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_635(bool) = INTERNAL_CALL, ERC20Basic.transfer(address,uint256)(_to,_value)
RETURN TMP_635"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(msg.sender)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(msg.sender)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9334.sol-CrowdsaleTokenExt-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_637(bool) = INTERNAL_CALL, ERC20.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_637"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_from)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(_from)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9334.sol-CrowdsaleTokenExt-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_625 = CONVERT 0 to address
TMP_626(bool) = newOwner != TMP_625
TMP_627(None) = SOLIDITY_CALL require(bool)(TMP_626)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9334.sol-CrowdsaleTokenExt-upgrade(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
state = getUpgradeState()

IRs:
TMP_521(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
state(UpgradeableToken.UpgradeState) := TMP_521(UpgradeableToken.UpgradeState)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! (state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)

IRs:
REF_201(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
TMP_522(bool) = state == REF_201
REF_202(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_523(bool) = state == REF_202
TMP_524(bool) = TMP_522 || TMP_523
TMP_525 = UnaryType.BANG TMP_524 
CONDITION TMP_525"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
value == 0

IRs:
TMP_526(bool) = value == 0
CONDITION TMP_526"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],value)

IRs:
REF_203(uint256) -> balances[msg.sender]
REF_204(uint256) -> balances[msg.sender]
TMP_527(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_204,value)
REF_203(uint256) (->balances) := TMP_527(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalSupply = safeSub(totalSupply,value)

IRs:
TMP_528(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(totalSupply,value)
totalSupply(uint256) := TMP_528(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalUpgraded = safeAdd(totalUpgraded,value)

IRs:
TMP_529(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalUpgraded,value)
totalUpgraded(uint256) := TMP_529(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
upgradeAgent.upgradeFrom(msg.sender,value)

IRs:
HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:upgradeFrom, arguments:['msg.sender', 'value']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Upgrade(msg.sender,upgradeAgent,value)

IRs:
Emit Upgrade(msg.sender,upgradeAgent,value)"];
}
// Function: 9334.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 9334.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 9334.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 9334.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 9334.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 9334.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 9334.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 9334.sol-FinalizeAgent-distributeReservedTokens(uint256)
digraph{
}
// Function: 9334.sol-FinalizeAgent-finalizeCrowdsale()
digraph{
}
// Function: 9334.sol-FinalizeAgent-isFinalizeAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9334.sol-FinalizeAgent-isSane()
digraph{
}
// Function: 9334.sol-FinalizeAgent-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
reservedTokensAreDistributed = false

IRs:
reservedTokensAreDistributed(bool) := False(bool)"];
}
// Function: 9334.sol-FractionalERC20Ext-allowance(address,address)
digraph{
}
// Function: 9334.sol-FractionalERC20Ext-approve(address,uint256)
digraph{
}
// Function: 9334.sol-FractionalERC20Ext-balanceOf(address)
digraph{
}
// Function: 9334.sol-FractionalERC20Ext-transfer(address,uint256)
digraph{
}
// Function: 9334.sol-FractionalERC20Ext-transferFrom(address,address,uint256)
digraph{
}
// Function: 9334.sol-Haltable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9334.sol-Haltable-halt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = true

IRs:
halted(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9334.sol-Haltable-onlyInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! halted

IRs:
TMP_65 = UnaryType.BANG halted 
CONDITION TMP_65"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-Haltable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_61(bool) = msg.sender == owner
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9334.sol-Haltable-stopInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted

IRs:
CONDITION halted"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-Haltable-stopNonOwnersInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted && msg.sender != owner

IRs:
TMP_63(bool) = msg.sender != owner
TMP_64(bool) = halted && TMP_63
CONDITION TMP_64"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-Haltable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_53 = CONVERT 0 to address
TMP_54(bool) = newOwner != TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9334.sol-Haltable-unhalt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = false

IRs:
halted(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyInEmergency()

IRs:
MODIFIER_CALL, Haltable.onlyInEmergency()()"];
3->1;
}
// Function: 9334.sol-MintableTokenExt-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9334.sol-MintableTokenExt-allowance(address,address)
digraph{
}
// Function: 9334.sol-MintableTokenExt-approve(address,uint256)
digraph{
}
// Function: 9334.sol-MintableTokenExt-areTokensDistributedForAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].isDistributed

IRs:
REF_171(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_172(bool) -> REF_171.isDistributed
RETURN REF_172"];
2[label="Node Type: RETURN 2

EXPRESSION:
isDistributed

IRs:
RETURN isDistributed"];
}
// Function: 9334.sol-MintableTokenExt-balanceOf(address)
digraph{
}
// Function: 9334.sol-MintableTokenExt-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
mintingFinished

IRs:
CONDITION mintingFinished"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-MintableTokenExt-finalizeReservedAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
reservedTokensData = reservedTokensList[addr]

IRs:
REF_167(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
reservedTokensData(MintableTokenExt.ReservedTokensData) := REF_167(MintableTokenExt.ReservedTokensData)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
reservedTokensData.isDistributed = true

IRs:
REF_168(bool) -> reservedTokensData.isDistributed
REF_168(bool) (->reservedTokensData) := True(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableTokenExt.onlyMintAgent()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
4->1;
}
// Function: 9334.sol-MintableTokenExt-getReservedPercentageDecimals(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].inPercentageDecimals

IRs:
REF_177(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_178(uint256) -> REF_177.inPercentageDecimals
RETURN REF_178"];
2[label="Node Type: RETURN 2

EXPRESSION:
inPercentageDecimals

IRs:
RETURN inPercentageDecimals"];
}
// Function: 9334.sol-MintableTokenExt-getReservedPercentageUnit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].inPercentageUnit

IRs:
REF_175(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_176(uint256) -> REF_175.inPercentageUnit
RETURN REF_176"];
2[label="Node Type: RETURN 2

EXPRESSION:
inPercentageUnit

IRs:
RETURN inPercentageUnit"];
}
// Function: 9334.sol-MintableTokenExt-getReservedTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].inTokens

IRs:
REF_173(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_174(uint256) -> REF_173.inTokens
RETURN REF_174"];
2[label="Node Type: RETURN 2

EXPRESSION:
inTokens

IRs:
RETURN inTokens"];
}
// Function: 9334.sol-MintableTokenExt-isAddressReserved(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
reservedTokensList[addr].isReserved

IRs:
REF_169(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
REF_170(bool) -> REF_169.isReserved
RETURN REF_170"];
2[label="Node Type: RETURN 2

EXPRESSION:
isReserved

IRs:
RETURN isReserved"];
}
// Function: 9334.sol-MintableTokenExt-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 9334.sol-MintableTokenExt-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_479(bool) = a >= b
CONDITION TMP_479"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-MintableTokenExt-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_477(bool) = a >= b
CONDITION TMP_477"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-MintableTokenExt-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_480(bool) = a < b
CONDITION TMP_480"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-MintableTokenExt-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_478(bool) = a < b
CONDITION TMP_478"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-MintableTokenExt-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.plus(amount)

IRs:
TMP_498(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['totalSupply', 'amount'] 
totalSupply(uint256) := TMP_498(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[receiver] = balances[receiver].plus(amount)

IRs:
REF_192(uint256) -> balances[receiver]
REF_193(uint256) -> balances[receiver]
TMP_499(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['REF_193', 'amount'] 
REF_192(uint256) (->balances) := TMP_499(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0,receiver,amount)

IRs:
Emit Transfer(0,receiver,amount)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableTokenExt.onlyMintAgent()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
5->1;
}
// Function: 9334.sol-MintableTokenExt-onlyMintAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! mintAgents[msg.sender]

IRs:
REF_200(bool) -> mintAgents[msg.sender]
TMP_520 = UnaryType.BANG REF_200 
CONDITION TMP_520"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-MintableTokenExt-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_518(bool) = msg.sender == owner
TMP_519(None) = SOLIDITY_CALL require(bool)(TMP_518)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9334.sol-MintableTokenExt-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_472(uint256) = a + b
c(uint256) := TMP_472(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_473(bool) = c >= a
TMP_474(bool) = c >= b
TMP_475(bool) = TMP_473 && TMP_474
TMP_476(None) = SOLIDITY_CALL assert(bool)(TMP_475)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-MintableTokenExt-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_461(bool) = b > 0
TMP_462(None) = SOLIDITY_CALL assert(bool)(TMP_461)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_463(uint256) = a / b
c(uint256) := TMP_463(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_464(uint256) = b * c
TMP_465(uint256) = a % b
TMP_466(uint256) = TMP_464 + TMP_465
TMP_467(bool) = a == TMP_466
TMP_468(None) = SOLIDITY_CALL assert(bool)(TMP_467)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-MintableTokenExt-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_455(uint256) = a * b
c(uint256) := TMP_455(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_456(bool) = a == 0
TMP_457(uint256) = c / a
TMP_458(bool) = TMP_457 == b
TMP_459(bool) = TMP_456 || TMP_458
TMP_460(None) = SOLIDITY_CALL assert(bool)(TMP_459)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-MintableTokenExt-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_469(bool) = b <= a
TMP_470(None) = SOLIDITY_CALL assert(bool)(TMP_469)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_471(uint256) = a - b
RETURN TMP_471"];
}
// Function: 9334.sol-MintableTokenExt-setMintAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintAgents[addr] = state

IRs:
REF_195(bool) -> mintAgents[addr]
REF_195(bool) (->mintAgents) := state(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintingAgentChanged(addr,state)

IRs:
Emit MintingAgentChanged(addr,state)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
4->1;
}
// Function: 9334.sol-MintableTokenExt-setReservedTokensList(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(addr != address(0))

IRs:
TMP_506 = CONVERT 0 to address
TMP_507(bool) = addr != TMP_506
TMP_508(None) = SOLIDITY_CALL assert(bool)(TMP_507)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! isAddressReserved(addr)

IRs:
TMP_509(bool) = INTERNAL_CALL, MintableTokenExt.isAddressReserved(address)(addr)
TMP_510 = UnaryType.BANG TMP_509 
CONDITION TMP_510"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
reservedTokensDestinations.push(addr)

IRs:
REF_197 -> LENGTH reservedTokensDestinations
TMP_512(uint256) := REF_197(uint256)
TMP_513(uint256) = TMP_512 + 1
REF_197(uint256) (->reservedTokensDestinations) := TMP_513(uint256)
REF_198(address) -> reservedTokensDestinations[TMP_512]
REF_198(address) (->reservedTokensDestinations) := addr(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reservedTokensDestinationsLen ++

IRs:
TMP_514(uint256) := reservedTokensDestinationsLen(uint256)
reservedTokensDestinationsLen(uint256) = reservedTokensDestinationsLen + 1"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
reservedTokensList[addr] = ReservedTokensData(inTokens,inPercentageUnit,inPercentageDecimals,true,false)

IRs:
REF_199(MintableTokenExt.ReservedTokensData) -> reservedTokensList[addr]
TMP_515(MintableTokenExt.ReservedTokensData) = new ReservedTokensData(inTokens,inPercentageUnit,inPercentageDecimals,True,False)
REF_199(MintableTokenExt.ReservedTokensData) (->reservedTokensList) := TMP_515(MintableTokenExt.ReservedTokensData)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 9334.sol-MintableTokenExt-setReservedTokensListMultiple(address[],uint256[],uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! reservedTokensDestinationsAreSet)

IRs:
TMP_483 = UnaryType.BANG reservedTokensDestinationsAreSet 
TMP_484(None) = SOLIDITY_CALL assert(bool)(TMP_483)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(addrs.length == inTokens.length)

IRs:
REF_179 -> LENGTH addrs
REF_180 -> LENGTH inTokens
TMP_485(bool) = REF_179 == REF_180
TMP_486(None) = SOLIDITY_CALL assert(bool)(TMP_485)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(inTokens.length == inPercentageUnit.length)

IRs:
REF_181 -> LENGTH inTokens
REF_182 -> LENGTH inPercentageUnit
TMP_487(bool) = REF_181 == REF_182
TMP_488(None) = SOLIDITY_CALL assert(bool)(TMP_487)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(inPercentageUnit.length == inPercentageDecimals.length)

IRs:
REF_183 -> LENGTH inPercentageUnit
REF_184 -> LENGTH inPercentageDecimals
TMP_489(bool) = REF_183 == REF_184
TMP_490(None) = SOLIDITY_CALL assert(bool)(TMP_489)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->13;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
iterator = 0

IRs:
iterator(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
iterator < addrs.length

IRs:
REF_185 -> LENGTH addrs
TMP_491(bool) = iterator < REF_185
CONDITION TMP_491"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
addrs[iterator] != address(0)

IRs:
REF_186(address) -> addrs[iterator]
TMP_492 = CONVERT 0 to address
TMP_493(bool) = REF_186 != TMP_492
CONDITION TMP_493"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
setReservedTokensList(addrs[iterator],inTokens[iterator],inPercentageUnit[iterator],inPercentageDecimals[iterator])

IRs:
REF_187(address) -> addrs[iterator]
REF_188(uint256) -> inTokens[iterator]
REF_189(uint256) -> inPercentageUnit[iterator]
REF_190(uint256) -> inPercentageDecimals[iterator]
INTERNAL_CALL, MintableTokenExt.setReservedTokensList(address,uint256,uint256,uint256)(REF_187,REF_188,REF_189,REF_190)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
iterator ++

IRs:
TMP_495(uint256) := iterator(uint256)
iterator(uint256) = iterator + 1"];
12->8;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
reservedTokensDestinationsAreSet = true

IRs:
reservedTokensDestinationsAreSet(bool) := True(bool)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableTokenExt.canMint()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
15->1;
}
// Function: 9334.sol-MintableTokenExt-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
reservedTokensDestinationsLen = 0

IRs:
reservedTokensDestinationsLen(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
reservedTokensDestinationsAreSet = false

IRs:
reservedTokensDestinationsAreSet(bool) := False(bool)"];
}
// Function: 9334.sol-MintableTokenExt-transfer(address,uint256)
digraph{
}
// Function: 9334.sol-MintableTokenExt-transferFrom(address,address,uint256)
digraph{
}
// Function: 9334.sol-MintableTokenExt-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_439 = CONVERT 0 to address
TMP_440(bool) = newOwner != TMP_439
TMP_441(None) = SOLIDITY_CALL require(bool)(TMP_440)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9334.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9334.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_31(bool) = msg.sender == owner
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9334.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_26 = CONVERT 0 to address
TMP_27(bool) = newOwner != TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9334.sol-PricingStrategy-calculatePrice(uint256,uint256,uint256,address,uint256)
digraph{
}
// Function: 9334.sol-PricingStrategy-isPresalePurchase(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 9334.sol-PricingStrategy-isPricingStrategy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9334.sol-PricingStrategy-isSane(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9334.sol-PricingStrategy-updateRate(uint256)
digraph{
}
// Function: 9334.sol-ReleasableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9334.sol-ReleasableToken-allowance(address,address)
digraph{
}
// Function: 9334.sol-ReleasableToken-approve(address,uint256)
digraph{
}
// Function: 9334.sol-ReleasableToken-balanceOf(address)
digraph{
}
// Function: 9334.sol-ReleasableToken-canTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! released

IRs:
TMP_435 = UnaryType.BANG released 
CONDITION TMP_435"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
! transferAgents[_sender]

IRs:
REF_147(bool) -> transferAgents[_sender]
TMP_436 = UnaryType.BANG REF_147 
CONDITION TMP_436"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 9334.sol-ReleasableToken-inReleaseState(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
releaseState != released

IRs:
TMP_437(bool) = releaseState != released
CONDITION TMP_437"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-ReleasableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_433(bool) = msg.sender == owner
TMP_434(None) = SOLIDITY_CALL require(bool)(TMP_433)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9334.sol-ReleasableToken-onlyReleaseAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != releaseAgent

IRs:
TMP_438(bool) = msg.sender != releaseAgent
CONDITION TMP_438"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9334.sol-ReleasableToken-releaseTokenTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
released = true

IRs:
released(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyReleaseAgent()

IRs:
MODIFIER_CALL, ReleasableToken.onlyReleaseAgent()()"];
2->1;
}
// Function: 9334.sol-ReleasableToken-setReleaseAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseAgent = addr

IRs:
releaseAgent(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 9334.sol-ReleasableToken-setTransferAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferAgents[addr] = state

IRs:
REF_146(bool) -> transferAgents[addr]
REF_146(bool) (->transferAgents) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 9334.sol-ReleasableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
released = false

IRs:
released(bool) := False(bool)"];
}
// Function: 9334.sol-ReleasableToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_429(bool) = INTERNAL_CALL, ERC20Basic.transfer(address,uint256)(_to,_value)
RETURN TMP_429"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(msg.sender)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(msg.sender)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9334.sol-ReleasableToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_431(bool) = INTERNAL_CALL, ERC20.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_431"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_from)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(_from)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9334.sol-ReleasableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_419 = CONVERT 0 to address
TMP_420(bool) = newOwner != TMP_419
TMP_421(None) = SOLIDITY_CALL require(bool)(TMP_420)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9334.sol-ReservedTokensFinalizeAgent-ReservedTokensFinalizeAgent(CrowdsaleTokenExt,CrowdsaleExt)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = _token

IRs:
token(CrowdsaleTokenExt) := _token(CrowdsaleTokenExt)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
crowdsale = _crowdsale

IRs:
crowdsale(CrowdsaleExt) := _crowdsale(CrowdsaleExt)"];
}
// Function: 9334.sol-ReservedTokensFinalizeAgent-distributeReservedTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == address(crowdsale))

IRs:
TMP_668 = CONVERT crowdsale to address
TMP_669(bool) = msg.sender == TMP_668
TMP_670(None) = SOLIDITY_CALL assert(bool)(TMP_669)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(reservedTokensDistributionBatch > 0)

IRs:
TMP_671(bool) = reservedTokensDistributionBatch > 0
TMP_672(None) = SOLIDITY_CALL assert(bool)(TMP_671)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(! reservedTokensAreDistributed)

IRs:
TMP_673 = UnaryType.BANG reservedTokensAreDistributed 
TMP_674(None) = SOLIDITY_CALL assert(bool)(TMP_673)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(distributedReservedTokensDestinationsLen < token.reservedTokensDestinationsLen())

IRs:
TMP_675(uint256) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:reservedTokensDestinationsLen, arguments:[]  
TMP_676(bool) = distributedReservedTokensDestinationsLen < TMP_675
TMP_677(None) = SOLIDITY_CALL assert(bool)(TMP_676)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
tokensSold = 0

IRs:
tokensSold(uint256) := 0(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->13;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < crowdsale.joinedCrowdsalesLen()

IRs:
TMP_678(uint8) = HIGH_LEVEL_CALL, dest:crowdsale(CrowdsaleExt), function:joinedCrowdsalesLen, arguments:[]  
TMP_679(bool) = i < TMP_678
CONDITION TMP_679"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
tier = CrowdsaleExt(crowdsale.joinedCrowdsales(i))

IRs:
TMP_680(address) = HIGH_LEVEL_CALL, dest:crowdsale(CrowdsaleExt), function:joinedCrowdsales, arguments:['i']  
TMP_681 = CONVERT TMP_680 to CrowdsaleExt
tier(CrowdsaleExt) := TMP_681(CrowdsaleExt)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
tokensSold = tokensSold.plus(tier.tokensSold())

IRs:
TMP_682(uint256) = HIGH_LEVEL_CALL, dest:tier(CrowdsaleExt), function:tokensSold, arguments:[]  
TMP_683(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['tokensSold', 'TMP_682'] 
tokensSold(uint256) := TMP_683(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_684(uint8) := i(uint8)
i(uint8) = i + 1"];
12->9;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
startLooping = distributedReservedTokensDestinationsLen

IRs:
startLooping(uint256) := distributedReservedTokensDestinationsLen(uint256)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
batch = token.reservedTokensDestinationsLen().minus(distributedReservedTokensDestinationsLen)

IRs:
TMP_685(uint256) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:reservedTokensDestinationsLen, arguments:[]  
TMP_686(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.minus(uint256,uint256), arguments:['TMP_685', 'distributedReservedTokensDestinationsLen'] 
batch(uint256) := TMP_686(uint256)"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
batch >= reservedTokensDistributionBatch

IRs:
TMP_687(bool) = batch >= reservedTokensDistributionBatch
CONDITION TMP_687"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
batch = reservedTokensDistributionBatch

IRs:
batch(uint256) := reservedTokensDistributionBatch(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
endLooping = startLooping + batch

IRs:
TMP_688(uint256) = startLooping + batch
endLooping(uint256) := TMP_688(uint256)"];
18->21;
19[label="Node Type: BEGIN_LOOP 19
"];
19->22;
20[label="Node Type: END_LOOP 20
"];
20->40;
21[label="Node Type: NEW VARIABLE 21

EXPRESSION:
j = startLooping

IRs:
j(uint256) := startLooping(uint256)"];
21->19;
22[label="Node Type: IF_LOOP 22

EXPRESSION:
j < endLooping

IRs:
TMP_689(bool) = j < endLooping
CONDITION TMP_689"];
22->23[label="True"];
22->20[label="False"];
23[label="Node Type: NEW VARIABLE 23

EXPRESSION:
reservedAddr = token.reservedTokensDestinations(j)

IRs:
TMP_690(address) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:reservedTokensDestinations, arguments:['j']  
reservedAddr(address) := TMP_690(address)"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
! token.areTokensDistributedForAddress(reservedAddr)

IRs:
TMP_691(bool) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:areTokensDistributedForAddress, arguments:['reservedAddr']  
TMP_692 = UnaryType.BANG TMP_691 
CONDITION TMP_692"];
24->25[label="True"];
24->38[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: NEW VARIABLE 26

EXPRESSION:
allocatedBonusInTokens = token.getReservedTokens(reservedAddr)

IRs:
TMP_693(uint256) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:getReservedTokens, arguments:['reservedAddr']  
allocatedBonusInTokens(uint256) := TMP_693(uint256)"];
26->27;
27[label="Node Type: NEW VARIABLE 27

EXPRESSION:
percentsOfTokensUnit = token.getReservedPercentageUnit(reservedAddr)

IRs:
TMP_694(uint256) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:getReservedPercentageUnit, arguments:['reservedAddr']  
percentsOfTokensUnit(uint256) := TMP_694(uint256)"];
27->28;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
percentsOfTokensDecimals = token.getReservedPercentageDecimals(reservedAddr)

IRs:
TMP_695(uint256) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:getReservedPercentageDecimals, arguments:['reservedAddr']  
percentsOfTokensDecimals(uint256) := TMP_695(uint256)"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
percentsOfTokensUnit > 0

IRs:
TMP_696(bool) = percentsOfTokensUnit > 0
CONDITION TMP_696"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
allocatedBonusInPercentage = tokensSold * percentsOfTokensUnit / 10 ** percentsOfTokensDecimals / 100

IRs:
TMP_697(uint256) = tokensSold * percentsOfTokensUnit
TMP_698(uint256) = 10 ** percentsOfTokensDecimals
TMP_699(uint256) = TMP_697 / TMP_698
TMP_700(uint256) = TMP_699 / 100
allocatedBonusInPercentage(uint256) := TMP_700(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
token.mint(reservedAddr,allocatedBonusInPercentage)

IRs:
HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:mint, arguments:['reservedAddr', 'allocatedBonusInPercentage']  "];
31->32;
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: IF 33

EXPRESSION:
allocatedBonusInTokens > 0

IRs:
TMP_702(bool) = allocatedBonusInTokens > 0
CONDITION TMP_702"];
33->34[label="True"];
33->35[label="False"];
34[label="Node Type: EXPRESSION 34

EXPRESSION:
token.mint(reservedAddr,allocatedBonusInTokens)

IRs:
HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:mint, arguments:['reservedAddr', 'allocatedBonusInTokens']  "];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
token.finalizeReservedAddress(reservedAddr)

IRs:
HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:finalizeReservedAddress, arguments:['reservedAddr']  "];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
distributedReservedTokensDestinationsLen ++

IRs:
TMP_705(uint256) := distributedReservedTokensDestinationsLen(uint256)
distributedReservedTokensDestinationsLen(uint256) = distributedReservedTokensDestinationsLen + 1"];
37->38;
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
j ++

IRs:
TMP_706(uint256) := j(uint256)
j(uint256) = j + 1"];
39->22;
40[label="Node Type: IF 40

EXPRESSION:
distributedReservedTokensDestinationsLen == token.reservedTokensDestinationsLen()

IRs:
TMP_707(uint256) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:reservedTokensDestinationsLen, arguments:[]  
TMP_708(bool) = distributedReservedTokensDestinationsLen == TMP_707
CONDITION TMP_708"];
40->41[label="True"];
40->42[label="False"];
41[label="Node Type: EXPRESSION 41

EXPRESSION:
reservedTokensAreDistributed = true

IRs:
reservedTokensAreDistributed(bool) := True(bool)"];
41->42;
42[label="Node Type: END_IF 42
"];
}
// Function: 9334.sol-ReservedTokensFinalizeAgent-finalizeCrowdsale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == address(crowdsale))

IRs:
TMP_709 = CONVERT crowdsale to address
TMP_710(bool) = msg.sender == TMP_709
TMP_711(None) = SOLIDITY_CALL assert(bool)(TMP_710)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
token.reservedTokensDestinationsLen() > 0

IRs:
TMP_712(uint256) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:reservedTokensDestinationsLen, arguments:[]  
TMP_713(bool) = TMP_712 > 0
CONDITION TMP_713"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(reservedTokensAreDistributed)

IRs:
TMP_714(None) = SOLIDITY_CALL assert(bool)(reservedTokensAreDistributed)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
token.releaseTokenTransfer()

IRs:
HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:releaseTokenTransfer, arguments:[]  "];
}
// Function: 9334.sol-ReservedTokensFinalizeAgent-isFinalizeAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9334.sol-ReservedTokensFinalizeAgent-isSane()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(token.releaseAgent() == address(this))

IRs:
TMP_665(address) = HIGH_LEVEL_CALL, dest:token(CrowdsaleTokenExt), function:releaseAgent, arguments:[]  
TMP_666 = CONVERT this to address
TMP_667(bool) = TMP_665 == TMP_666
RETURN TMP_667"];
}
// Function: 9334.sol-ReservedTokensFinalizeAgent-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
reservedTokensAreDistributed = false

IRs:
reservedTokensAreDistributed(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
distributedReservedTokensDestinationsLen = 0

IRs:
distributedReservedTokensDestinationsLen(uint256) := 0(uint256)"];
}
// Function: 9334.sol-SafeMath-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_24(bool) = a >= b
CONDITION TMP_24"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-SafeMath-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_22(bool) = a >= b
CONDITION TMP_22"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-SafeMath-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_25(bool) = a < b
CONDITION TMP_25"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-SafeMath-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_23(bool) = a < b
CONDITION TMP_23"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_17(uint256) = a + b
c(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_18(bool) = c >= a
TMP_19(bool) = c >= b
TMP_20(bool) = TMP_18 && TMP_19
TMP_21(None) = SOLIDITY_CALL assert(bool)(TMP_20)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-SafeMath-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_6(bool) = b > 0
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_8(uint256) = a / b
c(uint256) := TMP_8(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_9(uint256) = b * c
TMP_10(uint256) = a % b
TMP_11(uint256) = TMP_9 + TMP_10
TMP_12(bool) = a == TMP_11
TMP_13(None) = SOLIDITY_CALL assert(bool)(TMP_12)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_14(bool) = b <= a
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_16(uint256) = a - b
RETURN TMP_16"];
}
// Function: 9334.sol-SafeMathLibExt-divides(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_39(bool) = b > 0
TMP_40(None) = SOLIDITY_CALL assert(bool)(TMP_39)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_41(uint256) = a / b
c(uint256) := TMP_41(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_42(uint256) = b * c
TMP_43(uint256) = a % b
TMP_44(uint256) = TMP_42 + TMP_43
TMP_45(bool) = a == TMP_44
TMP_46(None) = SOLIDITY_CALL assert(bool)(TMP_45)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-SafeMathLibExt-minus(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_47(bool) = b <= a
TMP_48(None) = SOLIDITY_CALL assert(bool)(TMP_47)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_49(uint256) = a - b
RETURN TMP_49"];
}
// Function: 9334.sol-SafeMathLibExt-plus(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_50(uint256) = a + b
c(uint256) := TMP_50(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_51(bool) = c >= a
TMP_52(None) = SOLIDITY_CALL assert(bool)(TMP_51)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-SafeMathLibExt-times(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_33(uint256) = a * b
c(uint256) := TMP_33(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_34(bool) = a == 0
TMP_35(uint256) = c / a
TMP_36(bool) = TMP_35 == b
TMP_37(bool) = TMP_34 || TMP_36
TMP_38(None) = SOLIDITY_CALL assert(bool)(TMP_37)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_113(mapping(address => uint256)) -> allowed[_owner]
REF_114(uint256) -> REF_113[_spender]
RETURN REF_114"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 9334.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_value != 0) && (allowed[msg.sender][_spender] != 0)

IRs:
TMP_348(bool) = _value != 0
REF_109(mapping(address => uint256)) -> allowed[msg.sender]
REF_110(uint256) -> REF_109[_spender]
TMP_349(bool) = REF_110 != 0
TMP_350(bool) = TMP_348 && TMP_349
CONDITION TMP_350"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_111(mapping(address => uint256)) -> allowed[msg.sender]
REF_112(uint256) -> REF_111[_spender]
REF_112(uint256) (->allowed) := _value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9334.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_108(uint256) -> balances[_owner]
RETURN REF_108"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 9334.sol-StandardToken-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 9334.sol-StandardToken-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_339(bool) = a >= b
CONDITION TMP_339"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-StandardToken-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_337(bool) = a >= b
CONDITION TMP_337"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-StandardToken-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_340(bool) = a < b
CONDITION TMP_340"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-StandardToken-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_338(bool) = a < b
CONDITION TMP_338"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-StandardToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_332(uint256) = a + b
c(uint256) := TMP_332(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_333(bool) = c >= a
TMP_334(bool) = c >= b
TMP_335(bool) = TMP_333 && TMP_334
TMP_336(None) = SOLIDITY_CALL assert(bool)(TMP_335)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-StandardToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_321(bool) = b > 0
TMP_322(None) = SOLIDITY_CALL assert(bool)(TMP_321)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_323(uint256) = a / b
c(uint256) := TMP_323(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_324(uint256) = b * c
TMP_325(uint256) = a % b
TMP_326(uint256) = TMP_324 + TMP_325
TMP_327(bool) = a == TMP_326
TMP_328(None) = SOLIDITY_CALL assert(bool)(TMP_327)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-StandardToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_315(uint256) = a * b
c(uint256) := TMP_315(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_316(bool) = a == 0
TMP_317(uint256) = c / a
TMP_318(bool) = TMP_317 == b
TMP_319(bool) = TMP_316 || TMP_318
TMP_320(None) = SOLIDITY_CALL assert(bool)(TMP_319)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-StandardToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_329(bool) = b <= a
TMP_330(None) = SOLIDITY_CALL assert(bool)(TMP_329)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_331(uint256) = a - b
RETURN TMP_331"];
}
// Function: 9334.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_value)

IRs:
REF_96(uint256) -> balances[msg.sender]
REF_97(uint256) -> balances[msg.sender]
TMP_341(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_97,_value)
REF_96(uint256) (->balances) := TMP_341(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_98(uint256) -> balances[_to]
REF_99(uint256) -> balances[_to]
TMP_342(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_99,_value)
REF_98(uint256) (->balances) := TMP_342(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9334.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_100(mapping(address => uint256)) -> allowed[_from]
REF_101(uint256) -> REF_100[msg.sender]
_allowance(uint256) := REF_101(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_102(uint256) -> balances[_to]
REF_103(uint256) -> balances[_to]
TMP_344(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_103,_value)
REF_102(uint256) (->balances) := TMP_344(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = safeSub(balances[_from],_value)

IRs:
REF_104(uint256) -> balances[_from]
REF_105(uint256) -> balances[_from]
TMP_345(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_105,_value)
REF_104(uint256) (->balances) := TMP_345(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] = safeSub(_allowance,_value)

IRs:
REF_106(mapping(address => uint256)) -> allowed[_from]
REF_107(uint256) -> REF_106[msg.sender]
TMP_346(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(_allowance,_value)
REF_107(uint256) (->allowed) := TMP_346(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9334.sol-UpgradeAgent-isUpgradeAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9334.sol-UpgradeAgent-upgradeFrom(address,uint256)
digraph{
}
// Function: 9334.sol-UpgradeableToken-UpgradeableToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
upgradeMaster = _upgradeMaster

IRs:
upgradeMaster(address) := _upgradeMaster(address)"];
}
// Function: 9334.sol-UpgradeableToken-allowance(address,address)
digraph{
}
// Function: 9334.sol-UpgradeableToken-approve(address,uint256)
digraph{
}
// Function: 9334.sol-UpgradeableToken-balanceOf(address)
digraph{
}
// Function: 9334.sol-UpgradeableToken-canUpgrade()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9334.sol-UpgradeableToken-getUpgradeState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_412(bool) = INTERNAL_CALL, UpgradeableToken.canUpgrade()()
TMP_413 = UnaryType.BANG TMP_412 
CONDITION TMP_413"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
UpgradeState.NotAllowed

IRs:
REF_142(UpgradeableToken.UpgradeState) -> UpgradeState.NotAllowed
RETURN REF_142"];
3[label="Node Type: IF 3

EXPRESSION:
address(upgradeAgent) == 0x00

IRs:
TMP_414 = CONVERT upgradeAgent to address
TMP_415(bool) = TMP_414 == 0
CONDITION TMP_415"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
UpgradeState.WaitingForAgent

IRs:
REF_143(UpgradeableToken.UpgradeState) -> UpgradeState.WaitingForAgent
RETURN REF_143"];
5[label="Node Type: IF 5

EXPRESSION:
totalUpgraded == 0

IRs:
TMP_416(bool) = totalUpgraded == 0
CONDITION TMP_416"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
UpgradeState.ReadyToUpgrade

IRs:
REF_144(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
RETURN REF_144"];
7[label="Node Type: RETURN 7

EXPRESSION:
UpgradeState.Upgrading

IRs:
REF_145(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
RETURN REF_145"];
}
// Function: 9334.sol-UpgradeableToken-isToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
2[label="Node Type: RETURN 2

EXPRESSION:
weAre

IRs:
RETURN weAre"];
}
// Function: 9334.sol-UpgradeableToken-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_387(bool) = a >= b
CONDITION TMP_387"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-UpgradeableToken-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_385(bool) = a >= b
CONDITION TMP_385"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-UpgradeableToken-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_388(bool) = a < b
CONDITION TMP_388"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-UpgradeableToken-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_386(bool) = a < b
CONDITION TMP_386"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9334.sol-UpgradeableToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_380(uint256) = a + b
c(uint256) := TMP_380(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a && c >= b)

IRs:
TMP_381(bool) = c >= a
TMP_382(bool) = c >= b
TMP_383(bool) = TMP_381 && TMP_382
TMP_384(None) = SOLIDITY_CALL assert(bool)(TMP_383)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-UpgradeableToken-safeDiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_369(bool) = b > 0
TMP_370(None) = SOLIDITY_CALL assert(bool)(TMP_369)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_371(uint256) = a / b
c(uint256) := TMP_371(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_372(uint256) = b * c
TMP_373(uint256) = a % b
TMP_374(uint256) = TMP_372 + TMP_373
TMP_375(bool) = a == TMP_374
TMP_376(None) = SOLIDITY_CALL assert(bool)(TMP_375)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-UpgradeableToken-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_363(uint256) = a * b
c(uint256) := TMP_363(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_364(bool) = a == 0
TMP_365(uint256) = c / a
TMP_366(bool) = TMP_365 == b
TMP_367(bool) = TMP_364 || TMP_366
TMP_368(None) = SOLIDITY_CALL assert(bool)(TMP_367)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9334.sol-UpgradeableToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_377(bool) = b <= a
TMP_378(None) = SOLIDITY_CALL assert(bool)(TMP_377)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_379(uint256) = a - b
RETURN TMP_379"];
}
// Function: 9334.sol-UpgradeableToken-setUpgradeAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! canUpgrade()

IRs:
TMP_400(bool) = INTERNAL_CALL, UpgradeableToken.canUpgrade()()
TMP_401 = UnaryType.BANG TMP_400 
CONDITION TMP_401"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
agent == 0x0

IRs:
TMP_402(bool) = agent == 0
CONDITION TMP_402"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_403(bool) = msg.sender != upgradeMaster
CONDITION TMP_403"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
getUpgradeState() == UpgradeState.Upgrading

IRs:
TMP_404(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
REF_139(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_405(bool) = TMP_404 == REF_139
CONDITION TMP_405"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: THROW 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
upgradeAgent = UpgradeAgent(agent)

IRs:
TMP_406 = CONVERT agent to UpgradeAgent
upgradeAgent(UpgradeAgent) := TMP_406(UpgradeAgent)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! upgradeAgent.isUpgradeAgent()

IRs:
TMP_407(bool) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:isUpgradeAgent, arguments:[]  
TMP_408 = UnaryType.BANG TMP_407 
CONDITION TMP_408"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
upgradeAgent.originalSupply() != totalSupply

IRs:
TMP_409(uint256) = HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:originalSupply, arguments:[]  
TMP_410(bool) = TMP_409 != totalSupply
CONDITION TMP_410"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: THROW 18
"];
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
UpgradeAgentSet(upgradeAgent)

IRs:
Emit UpgradeAgentSet(upgradeAgent)"];
}
// Function: 9334.sol-UpgradeableToken-setUpgradeMaster(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
master == 0x0

IRs:
TMP_417(bool) = master == 0
CONDITION TMP_417"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.sender != upgradeMaster

IRs:
TMP_418(bool) = msg.sender != upgradeMaster
CONDITION TMP_418"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
upgradeMaster = master

IRs:
upgradeMaster(address) := master(address)"];
}
// Function: 9334.sol-UpgradeableToken-transfer(address,uint256)
digraph{
}
// Function: 9334.sol-UpgradeableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 9334.sol-UpgradeableToken-upgrade(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
state = getUpgradeState()

IRs:
TMP_389(UpgradeableToken.UpgradeState) = INTERNAL_CALL, UpgradeableToken.getUpgradeState()()
state(UpgradeableToken.UpgradeState) := TMP_389(UpgradeableToken.UpgradeState)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! (state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)

IRs:
REF_134(UpgradeableToken.UpgradeState) -> UpgradeState.ReadyToUpgrade
TMP_390(bool) = state == REF_134
REF_135(UpgradeableToken.UpgradeState) -> UpgradeState.Upgrading
TMP_391(bool) = state == REF_135
TMP_392(bool) = TMP_390 || TMP_391
TMP_393 = UnaryType.BANG TMP_392 
CONDITION TMP_393"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
value == 0

IRs:
TMP_394(bool) = value == 0
CONDITION TMP_394"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],value)

IRs:
REF_136(uint256) -> balances[msg.sender]
REF_137(uint256) -> balances[msg.sender]
TMP_395(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_137,value)
REF_136(uint256) (->balances) := TMP_395(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalSupply = safeSub(totalSupply,value)

IRs:
TMP_396(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(totalSupply,value)
totalSupply(uint256) := TMP_396(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalUpgraded = safeAdd(totalUpgraded,value)

IRs:
TMP_397(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalUpgraded,value)
totalUpgraded(uint256) := TMP_397(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
upgradeAgent.upgradeFrom(msg.sender,value)

IRs:
HIGH_LEVEL_CALL, dest:upgradeAgent(UpgradeAgent), function:upgradeFrom, arguments:['msg.sender', 'value']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Upgrade(msg.sender,upgradeAgent,value)

IRs:
Emit Upgrade(msg.sender,upgradeAgent,value)"];
}
}
