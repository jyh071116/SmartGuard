digraph G {
// Function: 9428.sol-Buffer-append(Buffer.buffer,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
data.length + buf.buf.length > buf.capacity

IRs:
REF_2 -> LENGTH data
REF_3(bytes) -> buf.buf
REF_4 -> LENGTH REF_3
TMP_7(uint256) = REF_2 + REF_4
REF_5(uint256) -> buf.capacity
TMP_8(bool) = TMP_7 > REF_5
CONDITION TMP_8"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
resize(buf,max(buf.capacity,data.length) * 2)

IRs:
REF_6(uint256) -> buf.capacity
REF_7 -> LENGTH data
TMP_9(uint256) = INTERNAL_CALL, Buffer.max(uint256,uint256)(REF_6,REF_7)
TMP_10(uint256) = TMP_9 * 2
INTERNAL_CALL, Buffer.resize(Buffer.buffer,uint256)(buf,TMP_10)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
len = data.length

IRs:
REF_8 -> LENGTH data
len(uint256) := REF_8(uint256)"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: BEGIN_LOOP 9
"];
9->11;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
len >= 32

IRs:
TMP_12(bool) = len >= 32
CONDITION TMP_12"];
11->12[label="True"];
11->10[label="False"];
12[label="Node Type: INLINE ASM 12
"];
12->13;
13[label="Node Type: END INLINE ASM 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
dest += 32

IRs:
dest(uint256) = dest + 32"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
src += 32

IRs:
src(uint256) = src + 32"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
len -= 32

IRs:
len(uint256) = len - 32"];
16->11;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
mask = 256 ** (32 - len) - 1

IRs:
TMP_13(uint256) = 32 - len
TMP_14(uint256) = 256 ** TMP_13
TMP_15(uint256) = TMP_14 - 1
mask(uint256) := TMP_15(uint256)"];
17->18;
18[label="Node Type: INLINE ASM 18
"];
18->19;
19[label="Node Type: END INLINE ASM 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
buf

IRs:
RETURN buf"];
}
// Function: 9428.sol-Buffer-append(Buffer.buffer,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buf.buf.length + 1 > buf.capacity

IRs:
REF_9(bytes) -> buf.buf
REF_10 -> LENGTH REF_9
TMP_16(uint256) = REF_10 + 1
REF_11(uint256) -> buf.capacity
TMP_17(bool) = TMP_16 > REF_11
CONDITION TMP_17"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
resize(buf,buf.capacity * 2)

IRs:
REF_12(uint256) -> buf.capacity
TMP_18(uint256) = REF_12 * 2
INTERNAL_CALL, Buffer.resize(Buffer.buffer,uint256)(buf,TMP_18)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
}
// Function: 9428.sol-Buffer-appendInt(Buffer.buffer,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
len + buf.buf.length > buf.capacity

IRs:
REF_13(bytes) -> buf.buf
REF_14 -> LENGTH REF_13
TMP_20(uint256) = len + REF_14
REF_15(uint256) -> buf.capacity
TMP_21(bool) = TMP_20 > REF_15
CONDITION TMP_21"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
resize(buf,max(buf.capacity,len) * 2)

IRs:
REF_16(uint256) -> buf.capacity
TMP_22(uint256) = INTERNAL_CALL, Buffer.max(uint256,uint256)(REF_16,len)
TMP_23(uint256) = TMP_22 * 2
INTERNAL_CALL, Buffer.resize(Buffer.buffer,uint256)(buf,TMP_23)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
mask = 256 ** len - 1

IRs:
TMP_25(uint256) = 256 ** len
TMP_26(uint256) = TMP_25 - 1
mask(uint256) := TMP_26(uint256)"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
buf

IRs:
RETURN buf"];
}
// Function: 9428.sol-Buffer-init(Buffer.buffer,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
capacity % 32 != 0

IRs:
TMP_0(uint256) = capacity % 32
TMP_1(bool) = TMP_0 != 0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
capacity += 32 - (capacity % 32)

IRs:
TMP_2(uint256) = capacity % 32
TMP_3(uint256) = 32 - TMP_2
capacity(uint256) = capacity + TMP_3"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
buf.capacity = capacity

IRs:
REF_0(uint256) -> buf.capacity
REF_0(uint256) (->buf) := capacity(uint256)"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
}
// Function: 9428.sol-Buffer-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a > b

IRs:
TMP_6(bool) = a > b
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
a

IRs:
RETURN a"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9428.sol-Buffer-resize(Buffer.buffer,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldbuf = buf.buf

IRs:
REF_1(bytes) -> buf.buf
oldbuf(bytes) := REF_1(bytes)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
init(buf,capacity)

IRs:
INTERNAL_CALL, Buffer.init(Buffer.buffer,uint256)(buf,capacity)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
append(buf,oldbuf)

IRs:
TMP_5(Buffer.buffer) = INTERNAL_CALL, Buffer.append(Buffer.buffer,bytes)(buf,oldbuf)"];
}
// Function: 9428.sol-CBOR-encodeBytes(Buffer.buffer,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeType(buf,MAJOR_TYPE_BYTES,value.length)

IRs:
REF_27 -> LENGTH value
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_BYTES,REF_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buf.append(value)

IRs:
TMP_69(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,bytes), arguments:['buf', 'value'] "];
}
// Function: 9428.sol-CBOR-encodeIndefiniteLengthType(Buffer.buffer,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buf.append(uint8((major << 5) | 31))

IRs:
TMP_56(uint8) = major << 5
TMP_57(uint8) = TMP_56 | 31
TMP_58 = CONVERT TMP_57 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_58'] "];
}
// Function: 9428.sol-CBOR-encodeInt(Buffer.buffer,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value >= 0

IRs:
TMP_61(bool) = value >= 0
CONDITION TMP_61"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
encodeType(buf,MAJOR_TYPE_INT,uint256(value))

IRs:
TMP_62 = CONVERT value to uint256
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_INT,TMP_62)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
encodeType(buf,MAJOR_TYPE_NEGATIVE_INT,uint256(- 1 - value))

IRs:
TMP_64(uint256) = 0 - 1
TMP_65(uint256) = TMP_64 - value
TMP_66 = CONVERT TMP_65 to uint256
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_NEGATIVE_INT,TMP_66)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 9428.sol-CBOR-encodeString(Buffer.buffer,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeType(buf,MAJOR_TYPE_STRING,bytes(value).length)

IRs:
TMP_70 = CONVERT value to bytes
REF_29 -> LENGTH TMP_70
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_STRING,REF_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buf.append(bytes(value))

IRs:
TMP_72 = CONVERT value to bytes
TMP_73(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,bytes), arguments:['buf', 'TMP_72'] "];
}
// Function: 9428.sol-CBOR-encodeType(Buffer.buffer,uint8,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value <= 23

IRs:
TMP_27(bool) = value <= 23
CONDITION TMP_27"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buf.append(uint8((major << 5) | value))

IRs:
TMP_28(uint8) = major << 5
TMP_29(uint8) = TMP_28 | value
TMP_30 = CONVERT TMP_29 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_30'] "];
2->19;
3[label="Node Type: IF 3

EXPRESSION:
value <= 0xFF

IRs:
TMP_32(bool) = value <= 255
CONDITION TMP_32"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
buf.append(uint8((major << 5) | 24))

IRs:
TMP_33(uint8) = major << 5
TMP_34(uint8) = TMP_33 | 24
TMP_35 = CONVERT TMP_34 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_35'] "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
buf.appendInt(value,1)

IRs:
TMP_37(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.appendInt(Buffer.buffer,uint256,uint256), arguments:['buf', 'value', '1'] "];
5->18;
6[label="Node Type: IF 6

EXPRESSION:
value <= 0xFFFF

IRs:
TMP_38(bool) = value <= 65535
CONDITION TMP_38"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
buf.append(uint8((major << 5) | 25))

IRs:
TMP_39(uint8) = major << 5
TMP_40(uint8) = TMP_39 | 25
TMP_41 = CONVERT TMP_40 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_41'] "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
buf.appendInt(value,2)

IRs:
TMP_43(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.appendInt(Buffer.buffer,uint256,uint256), arguments:['buf', 'value', '2'] "];
8->17;
9[label="Node Type: IF 9

EXPRESSION:
value <= 0xFFFFFFFF

IRs:
TMP_44(bool) = value <= 4294967295
CONDITION TMP_44"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buf.append(uint8((major << 5) | 26))

IRs:
TMP_45(uint8) = major << 5
TMP_46(uint8) = TMP_45 | 26
TMP_47 = CONVERT TMP_46 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_47'] "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buf.appendInt(value,4)

IRs:
TMP_49(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.appendInt(Buffer.buffer,uint256,uint256), arguments:['buf', 'value', '4'] "];
11->16;
12[label="Node Type: IF 12

EXPRESSION:
value <= 0xFFFFFFFFFFFFFFFF

IRs:
TMP_50(bool) = value <= 18446744073709551615
CONDITION TMP_50"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
buf.append(uint8((major << 5) | 27))

IRs:
TMP_51(uint8) = major << 5
TMP_52(uint8) = TMP_51 | 27
TMP_53 = CONVERT TMP_52 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_53'] "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
buf.appendInt(value,8)

IRs:
TMP_55(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.appendInt(Buffer.buffer,uint256,uint256), arguments:['buf', 'value', '8'] "];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 9428.sol-CBOR-encodeUInt(Buffer.buffer,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeType(buf,MAJOR_TYPE_INT,value)

IRs:
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_INT,value)"];
}
// Function: 9428.sol-CBOR-endSequence(Buffer.buffer)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeIndefiniteLengthType(buf,MAJOR_TYPE_CONTENT_FREE)

IRs:
INTERNAL_CALL, CBOR.encodeIndefiniteLengthType(Buffer.buffer,uint8)(buf,MAJOR_TYPE_CONTENT_FREE)"];
}
// Function: 9428.sol-CBOR-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAJOR_TYPE_INT = 0

IRs:
MAJOR_TYPE_INT(uint8) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
MAJOR_TYPE_NEGATIVE_INT = 1

IRs:
MAJOR_TYPE_NEGATIVE_INT(uint8) := 1(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
MAJOR_TYPE_BYTES = 2

IRs:
MAJOR_TYPE_BYTES(uint8) := 2(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
MAJOR_TYPE_STRING = 3

IRs:
MAJOR_TYPE_STRING(uint8) := 3(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MAJOR_TYPE_ARRAY = 4

IRs:
MAJOR_TYPE_ARRAY(uint8) := 4(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
MAJOR_TYPE_MAP = 5

IRs:
MAJOR_TYPE_MAP(uint8) := 5(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MAJOR_TYPE_CONTENT_FREE = 7

IRs:
MAJOR_TYPE_CONTENT_FREE(uint8) := 7(uint256)"];
}
// Function: 9428.sol-CBOR-startArray(Buffer.buffer)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeIndefiniteLengthType(buf,MAJOR_TYPE_ARRAY)

IRs:
INTERNAL_CALL, CBOR.encodeIndefiniteLengthType(Buffer.buffer,uint8)(buf,MAJOR_TYPE_ARRAY)"];
}
// Function: 9428.sol-CBOR-startMap(Buffer.buffer)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeIndefiniteLengthType(buf,MAJOR_TYPE_MAP)

IRs:
INTERNAL_CALL, CBOR.encodeIndefiniteLengthType(Buffer.buffer,uint8)(buf,MAJOR_TYPE_MAP)"];
}
// Function: 9428.sol-DiceRoll-DiceRoll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
houseEdge = 20

IRs:
houseEdge(uint16) := 20(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
maxProfitAsPercentOfHouse = 100

IRs:
maxProfitAsPercentOfHouse(uint16) := 100(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
minBet = 100000000000000000

IRs:
minBet(uint256) := 100000000000000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
maxBet = 1000000000000000000

IRs:
maxBet(uint256) := 1000000000000000000(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
jackpotOfHouseEdge = 500

IRs:
jackpotOfHouseEdge(uint16) := 500(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
minJackpotBet = 100000000000000000

IRs:
minJackpotBet(uint256) := 100000000000000000(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
jackpotPersent = 100

IRs:
jackpotPersent(uint16) := 100(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
oraclizeGasLimit = 300000

IRs:
oraclizeGasLimit(uint256) := 300000(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
oraclizeFee = 1200000000000000

IRs:
oraclizeFee(uint256) := 1200000000000000(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
oraclize_setCustomGasPrice(4000000000)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setCustomGasPrice(uint256)(4000000000)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
nextJackpotTime = uint64(block.timestamp)

IRs:
TMP_1391 = CONVERT block.timestamp to uint64
nextJackpotTime(uint64) := TMP_1391(uint64)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setProof(proofType_Ledger)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setProof(bytes1)(proofType_Ledger)"];
}
// Function: 9428.sol-DiceRoll-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_776 = new bytes(0)
INTERNAL_CALL, DiceRoll.__callback(bytes32,string,bytes)(myid,result,TMP_776)"];
}
// Function: 9428.sol-DiceRoll-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->49;
1[label="Node Type: IF 1

EXPRESSION:
oraclize_randomDS_proofVerify__returnCode(queryId,result,proof) != 0

IRs:
TMP_1399(uint8) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)(queryId,result,proof)
TMP_1400(bool) = TMP_1399 != 0
CONDITION TMP_1400"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
! refundPaused

IRs:
TMP_1401 = UnaryType.BANG refundPaused 
CONDITION TMP_1401"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
playerAddress[queryId].transfer(playerBetAmount[queryId])

IRs:
REF_827(address) -> playerAddress[queryId]
REF_829(uint256) -> playerBetAmount[queryId]
Transfer dest:REF_827 value:REF_829"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogRefund(queryId,playerBetAmount[queryId])

IRs:
REF_830(uint256) -> playerBetAmount[queryId]
Emit LogRefund(queryId,REF_830)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->48;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tempStart = playerNumberStart[queryId]

IRs:
REF_831(uint8) -> playerNumberStart[queryId]
tempStart(uint8) := REF_831(uint8)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
tempEnd = playerNumberEnd[queryId]

IRs:
REF_832(uint8) -> playerNumberEnd[queryId]
tempEnd(uint8) := REF_832(uint8)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
tempAddress = playerAddress[queryId]

IRs:
REF_833(address) -> playerAddress[queryId]
tempAddress(address) := REF_833(address)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
tempAmount = playerBetAmount[queryId]

IRs:
REF_834(uint256) -> playerBetAmount[queryId]
tempAmount(uint256) := REF_834(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
random = uint8(uint256(keccak256()(result)) % 100) + 1

IRs:
TMP_1404(bytes32) = SOLIDITY_CALL keccak256()(result)
TMP_1405 = CONVERT TMP_1404 to uint256
TMP_1406(uint256) = TMP_1405 % 100
TMP_1407 = CONVERT TMP_1406 to uint8
TMP_1408(uint8) = TMP_1407 + 1
random(uint8) := TMP_1408(uint8)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
delete playerAddress[queryId]

IRs:
REF_835(address) -> playerAddress[queryId]
playerAddress = delete REF_835 "];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
delete playerBetAmount[queryId]

IRs:
REF_836(uint256) -> playerBetAmount[queryId]
playerBetAmount = delete REF_836 "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
delete playerNumberStart[queryId]

IRs:
REF_837(uint8) -> playerNumberStart[queryId]
playerNumberStart = delete REF_837 "];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
delete playerNumberEnd[queryId]

IRs:
REF_838(uint8) -> playerNumberEnd[queryId]
playerNumberEnd = delete REF_838 "];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
tempEnd == 0

IRs:
TMP_1409(bool) = tempEnd == 0
CONDITION TMP_1409"];
18->19[label="True"];
18->32[label="False"];
19[label="Node Type: IF 19

EXPRESSION:
random % 2 == tempStart

IRs:
TMP_1410(uint8) = random % 2
TMP_1411(bool) = TMP_1410 == tempStart
CONDITION TMP_1411"];
19->20[label="True"];
19->28[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
probability = 50

IRs:
probability(uint8) := 50(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
playerProfit = getProfit(probability,tempAmount)

IRs:
TMP_1412(uint256) = INTERNAL_CALL, DiceRoll.getProfit(uint8,uint256)(probability,tempAmount)
playerProfit(uint256) := TMP_1412(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
totalWeiWon = safeAdd(totalWeiWon,playerProfit)

IRs:
TMP_1413(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalWeiWon,playerProfit)
totalWeiWon(uint256) := TMP_1413(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, DiceRoll.setMaxProfit()()"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
LogResult(queryId,tempAddress,random,playerProfit,1,0,0,tempStart,tempAmount)

IRs:
Emit LogResult(queryId,tempAddress,random,playerProfit,1,0,0,tempStart,tempAmount)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
houseEdgeFee = getHouseEdgeFee(probability,tempAmount)

IRs:
TMP_1416(uint256) = INTERNAL_CALL, DiceRoll.getHouseEdgeFee(uint8,uint256)(probability,tempAmount)
houseEdgeFee(uint256) := TMP_1416(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
increaseJackpot(houseEdgeFee * jackpotOfHouseEdge / 1000,queryId,tempAddress,tempAmount)

IRs:
TMP_1417(uint256) = houseEdgeFee * jackpotOfHouseEdge
TMP_1418(uint256) = TMP_1417 / 1000
INTERNAL_CALL, DiceRoll.increaseJackpot(uint256,bytes32,address,uint256)(TMP_1418,queryId,tempAddress,tempAmount)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
tempAddress.transfer(safeAdd(playerProfit,tempAmount))

IRs:
TMP_1420(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(playerProfit,tempAmount)
Transfer dest:tempAddress value:TMP_1420"];
27->31;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
LogResult(queryId,tempAddress,random,0,0,0,0,tempEnd,tempAmount)

IRs:
Emit LogResult(queryId,tempAddress,random,0,0,0,0,tempEnd,tempAmount)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, DiceRoll.setMaxProfit()()"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
tempAddress.transfer(1)

IRs:
Transfer dest:tempAddress value:1"];
30->31;
31[label="Node Type: END_IF 31
"];
31->47;
32[label="Node Type: IF 32

EXPRESSION:
tempEnd != 0 && tempStart != 0

IRs:
TMP_1425(bool) = tempEnd != 0
TMP_1426(bool) = tempStart != 0
TMP_1427(bool) = TMP_1425 && TMP_1426
CONDITION TMP_1427"];
32->33[label="True"];
32->46[label="False"];
33[label="Node Type: IF 33

EXPRESSION:
tempStart <= random && random <= tempEnd

IRs:
TMP_1428(bool) = tempStart <= random
TMP_1429(bool) = random <= tempEnd
TMP_1430(bool) = TMP_1428 && TMP_1429
CONDITION TMP_1430"];
33->34[label="True"];
33->42[label="False"];
34[label="Node Type: EXPRESSION 34

EXPRESSION:
probability = tempEnd - tempStart + 1

IRs:
TMP_1431(uint8) = tempEnd - tempStart
TMP_1432(uint8) = TMP_1431 + 1
probability(uint8) := TMP_1432(uint8)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
playerProfit = getProfit(probability,tempAmount)

IRs:
TMP_1433(uint256) = INTERNAL_CALL, DiceRoll.getProfit(uint8,uint256)(probability,tempAmount)
playerProfit(uint256) := TMP_1433(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
totalWeiWon = safeAdd(totalWeiWon,playerProfit)

IRs:
TMP_1434(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalWeiWon,playerProfit)
totalWeiWon(uint256) := TMP_1434(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, DiceRoll.setMaxProfit()()"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
LogResult(queryId,tempAddress,random,playerProfit,1,tempStart,tempEnd,2,tempAmount)

IRs:
Emit LogResult(queryId,tempAddress,random,playerProfit,1,tempStart,tempEnd,2,tempAmount)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
houseEdgeFee = getHouseEdgeFee(probability,tempAmount)

IRs:
TMP_1437(uint256) = INTERNAL_CALL, DiceRoll.getHouseEdgeFee(uint8,uint256)(probability,tempAmount)
houseEdgeFee(uint256) := TMP_1437(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
increaseJackpot(houseEdgeFee * jackpotOfHouseEdge / 1000,queryId,tempAddress,tempAmount)

IRs:
TMP_1438(uint256) = houseEdgeFee * jackpotOfHouseEdge
TMP_1439(uint256) = TMP_1438 / 1000
INTERNAL_CALL, DiceRoll.increaseJackpot(uint256,bytes32,address,uint256)(TMP_1439,queryId,tempAddress,tempAmount)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
tempAddress.transfer(safeAdd(playerProfit,tempAmount))

IRs:
TMP_1441(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(playerProfit,tempAmount)
Transfer dest:tempAddress value:TMP_1441"];
41->45;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
LogResult(queryId,tempAddress,random,0,0,tempStart,tempEnd,2,tempAmount)

IRs:
Emit LogResult(queryId,tempAddress,random,0,0,tempStart,tempEnd,2,tempAmount)"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, DiceRoll.setMaxProfit()()"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
tempAddress.transfer(1)

IRs:
Transfer dest:tempAddress value:1"];
44->45;
45[label="Node Type: END_IF 45
"];
45->46;
46[label="Node Type: END_IF 46
"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
49[label="Node Type: EXPRESSION 49

EXPRESSION:
onlyOraclize()

IRs:
MODIFIER_CALL, DiceRoll.onlyOraclize()()"];
49->1;
}
// Function: 9428.sol-DiceRoll-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Buffer.init(buf,1024)

IRs:
LIBRARY_CALL, dest:Buffer, function:Buffer.init(Buffer.buffer,uint256), arguments:['buf', '1024'] "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buf.startArray()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.startArray(Buffer.buffer), arguments:['buf'] "];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arr.length

IRs:
REF_783 -> LENGTH arr
TMP_1200(bool) = i < REF_783
CONDITION TMP_1200"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
buf.encodeBytes(arr[i])

IRs:
REF_785(bytes) -> arr[i]
LIBRARY_CALL, dest:CBOR, function:CBOR.encodeBytes(Buffer.buffer,bytes), arguments:['buf', 'REF_785'] "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_1202(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buf.endSequence()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.endSequence(Buffer.buffer), arguments:['buf'] "];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
buf.buf

IRs:
REF_787(bytes) -> buf.buf
RETURN REF_787"];
}
// Function: 9428.sol-DiceRoll-betIsValid(uint256,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_betSize >= minBet && _betSize <= maxBet && _start >= minNumber && _end <= maxNumber && _start < _end)

IRs:
TMP_1567(bool) = _betSize >= minBet
TMP_1568(bool) = _betSize <= maxBet
TMP_1569(bool) = TMP_1567 && TMP_1568
TMP_1570(bool) = _start >= minNumber
TMP_1571(bool) = TMP_1569 && TMP_1570
TMP_1572(bool) = _end <= maxNumber
TMP_1573(bool) = TMP_1571 && TMP_1572
TMP_1574(bool) = _start < _end
TMP_1575(bool) = TMP_1573 && TMP_1574
TMP_1576(None) = SOLIDITY_CALL require(bool)(TMP_1575)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9428.sol-DiceRoll-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_1367(uint256) = length + toOffset
minLength(uint256) := TMP_1367(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to.length >= minLength)

IRs:
REF_817 -> LENGTH to
TMP_1368(bool) = REF_817 >= minLength
TMP_1369(None) = SOLIDITY_CALL require(bool)(TMP_1368)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_1370(uint256) = 32 + fromOffset
i(uint256) := TMP_1370(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_1371(uint256) = 32 + toOffset
j(uint256) := TMP_1371(uint256)"];
4->5;
5[label="Node Type: BEGIN_LOOP 5
"];
5->6;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_1372(uint256) = 32 + fromOffset
TMP_1373(uint256) = TMP_1372 + length
TMP_1374(bool) = i < TMP_1373
CONDITION TMP_1374"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
10->6;
11[label="Node Type: END_LOOP 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 9428.sol-DiceRoll-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_1555(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1556 = CONVERT TMP_1555 to OraclizeI
oraclize(OraclizeI) := TMP_1556(OraclizeI)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9428.sol-DiceRoll-createWinner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmNow = uint64(block.timestamp)

IRs:
TMP_1455 = CONVERT block.timestamp to uint64
tmNow(uint64) := TMP_1455(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(tmNow >= nextJackpotTime)

IRs:
TMP_1456(bool) = tmNow >= nextJackpotTime
TMP_1457(None) = SOLIDITY_CALL require(bool)(TMP_1456)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(jackpotPlayer.length > 0)

IRs:
REF_846 -> LENGTH jackpotPlayer
TMP_1458(bool) = REF_846 > 0
TMP_1459(None) = SOLIDITY_CALL require(bool)(TMP_1458)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
random = rand() % jackpotPlayer.length

IRs:
TMP_1460(uint256) = INTERNAL_CALL, DiceRoll.rand()()
REF_847 -> LENGTH jackpotPlayer
TMP_1461(uint256) = TMP_1460 % REF_847
random(uint256) := TMP_1461(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
winner = jackpotPlayer[random - 1]

IRs:
TMP_1462(uint256) = random - 1
REF_848(address) -> jackpotPlayer[TMP_1462]
winner(address) := REF_848(address)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
amount = jackpotBlance * jackpotPersent / 1000

IRs:
TMP_1463(uint256) = jackpotBlance * jackpotPersent
TMP_1464(uint256) = TMP_1463 / 1000
amount(uint256) := TMP_1464(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(jackpotBlance > amount)

IRs:
TMP_1465(bool) = jackpotBlance > amount
TMP_1466(None) = SOLIDITY_CALL require(bool)(TMP_1465)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
winner.transfer(amount)

IRs:
Transfer dest:winner value:amount"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
SendJackpotSuccesss(winner,amount,JackpotPeriods)

IRs:
Emit SendJackpotSuccesss(winner,amount,JackpotPeriods)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
jackpotBlance = safeSub(jackpotBlance,amount)

IRs:
TMP_1469(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(jackpotBlance,amount)
jackpotBlance(uint256) := TMP_1469(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
jackpotPlayer.length = 0

IRs:
REF_850 -> LENGTH jackpotPlayer
REF_850(uint256) (->jackpotPlayer) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
nextJackpotTime = uint64(block.timestamp) + 72000

IRs:
TMP_1470 = CONVERT block.timestamp to uint64
TMP_1471(uint64) = TMP_1470 + 72000
nextJackpotTime(uint64) := TMP_1471(uint64)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
JackpotPeriods += 1

IRs:
JackpotPeriods(uint256) = JackpotPeriods + 1"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DiceRoll.onlyOwner()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
jackpotAreActive()

IRs:
MODIFIER_CALL, DiceRoll.jackpotAreActive()()"];
15->1;
}
// Function: 9428.sol-DiceRoll-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_818 -> LENGTH sig
TMP_1375(bool) = REF_818 != 65
CONDITION TMP_1375"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_1376(bool) = v < 27
CONDITION TMP_1376"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_1377(bool) = v != 27
TMP_1378(bool) = v != 28
TMP_1379(bool) = TMP_1377 && TMP_1378
CONDITION TMP_1379"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_5(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_5"];
}
// Function: 9428.sol-DiceRoll-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, DiceRoll.setMaxProfit()()"];
}
// Function: 9428.sol-DiceRoll-gameIsActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! gamePaused)

IRs:
TMP_1585 = UnaryType.BANG gamePaused 
TMP_1586(None) = SOLIDITY_CALL require(bool)(TMP_1585)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9428.sol-DiceRoll-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 9428.sol-DiceRoll-getHouseEdgeFee(uint8,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(_betValue * (100 - _probability) / _probability + _betValue) * houseEdge / 1000

IRs:
TMP_1476(uint256) = 100 - _probability
TMP_1477(uint256) = _betValue * TMP_1476
TMP_1478(uint256) = TMP_1477 / _probability
TMP_1479(uint256) = TMP_1478 + _betValue
TMP_1480(uint256) = TMP_1479 * houseEdge
TMP_1481(uint256) = TMP_1480 / 1000
RETURN TMP_1481"];
}
// Function: 9428.sol-DiceRoll-getProfit(uint8,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tempProfit = ((_betValue * (100 - _probability) / _probability + _betValue) * (1000 - houseEdge) / 1000) - _betValue

IRs:
TMP_1482(uint256) = 100 - _probability
TMP_1483(uint256) = _betValue * TMP_1482
TMP_1484(uint256) = TMP_1483 / _probability
TMP_1485(uint256) = TMP_1484 + _betValue
TMP_1486(uint256) = 1000 - houseEdge
TMP_1487(uint256) = TMP_1485 * TMP_1486
TMP_1488(uint256) = TMP_1487 / 1000
TMP_1489(uint256) = TMP_1488 - _betValue
tempProfit(uint256) := TMP_1489(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tempProfit > maxProfit

IRs:
TMP_1490(bool) = tempProfit > maxProfit
CONDITION TMP_1490"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tempProfit = maxProfit

IRs:
tempProfit(uint256) := maxProfit(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
tempProfit

IRs:
RETURN tempProfit"];
}
// Function: 9428.sol-DiceRoll-increaseJackpot(uint256,bytes32,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(increaseAmount < maxProfit)

IRs:
TMP_1447(bool) = increaseAmount < maxProfit
TMP_1448(None) = SOLIDITY_CALL require(bool)(TMP_1447)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogJackpot(_queryId,_address,increaseAmount)

IRs:
Emit LogJackpot(_queryId,_address,increaseAmount)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
jackpotBlance = safeAdd(jackpotBlance,increaseAmount)

IRs:
TMP_1450(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(jackpotBlance,increaseAmount)
jackpotBlance(uint256) := TMP_1450(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_amount >= minJackpotBet

IRs:
TMP_1451(bool) = _amount >= minJackpotBet
CONDITION TMP_1451"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
jackpotPlayer.push(_address)

IRs:
REF_844 -> LENGTH jackpotPlayer
TMP_1453(uint256) := REF_844(uint256)
TMP_1454(uint256) = TMP_1453 + 1
REF_844(uint256) (->jackpotPlayer) := TMP_1454(uint256)
REF_845(address) -> jackpotPlayer[TMP_1453]
REF_845(address) (->jackpotPlayer) := _address(address)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 9428.sol-DiceRoll-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_1109 = CONVERT _haystack to bytes
h(bytes) := TMP_1109(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_1110 = CONVERT _needle to bytes
n(bytes) := TMP_1110(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_735 -> LENGTH h
TMP_1111(bool) = REF_735 < 1
REF_736 -> LENGTH n
TMP_1112(bool) = REF_736 < 1
TMP_1113(bool) = TMP_1111 || TMP_1112
REF_737 -> LENGTH n
REF_738 -> LENGTH h
TMP_1114(bool) = REF_737 > REF_738
TMP_1115(bool) = TMP_1113 || TMP_1114
CONDITION TMP_1115"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_1116(uint256) = 0 - 1
RETURN TMP_1116"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_739 -> LENGTH h
TMP_1117(uint256) = 2 ** 128
TMP_1118(uint256) = TMP_1117 - 1
TMP_1119(bool) = REF_739 > TMP_1118
CONDITION TMP_1119"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_1120(uint256) = 0 - 1
RETURN TMP_1120"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_740 -> LENGTH h
TMP_1121(bool) = i < REF_740
CONDITION TMP_1121"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_741(None) -> h[i]
REF_742(None) -> n[0]
TMP_1122(bool) = REF_741 == REF_742
CONDITION TMP_1122"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_743 -> LENGTH n
TMP_1123(bool) = subindex < REF_743
TMP_1124(uint256) = i + subindex
REF_744 -> LENGTH h
TMP_1125(bool) = TMP_1124 < REF_744
TMP_1126(bool) = TMP_1123 && TMP_1125
TMP_1127(uint256) = i + subindex
REF_745(None) -> h[TMP_1127]
REF_746(None) -> n[subindex]
TMP_1128(bool) = REF_745 == REF_746
TMP_1129(bool) = TMP_1126 && TMP_1128
CONDITION TMP_1129"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_1130(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_747 -> LENGTH n
TMP_1131(bool) = subindex == REF_747
CONDITION TMP_1131"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_1132 = CONVERT i to int256
RETURN TMP_1132"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_1133(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_1134(uint256) = 0 - 1
RETURN TMP_1134"];
}
// Function: 9428.sol-DiceRoll-jackpotAreActive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! jackpotPaused)

IRs:
TMP_1587 = UnaryType.BANG jackpotPaused 
TMP_1588(None) = SOLIDITY_CALL require(bool)(TMP_1587)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9428.sol-DiceRoll-matchBytes32Prefix(bytes32,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(prefix.length == n_random_bytes)

IRs:
REF_804 -> LENGTH prefix
TMP_1292(bool) = REF_804 == n_random_bytes
TMP_1293(None) = SOLIDITY_CALL require(bool)(TMP_1292)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < n_random_bytes

IRs:
TMP_1294(bool) = i < n_random_bytes
CONDITION TMP_1294"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_805(None) -> content[i]
REF_806(None) -> prefix[i]
TMP_1295(bool) = REF_805 != REF_806
CONDITION TMP_1295"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1296(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: RETURN 11

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 9428.sol-DiceRoll-oddEven(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalWeiWagered += msg.value

IRs:
totalWeiWagered(uint256) = totalWeiWagered + msg.value"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
queryId = oraclize_newRandomDSQuery(0,30,oraclizeGasLimit)

IRs:
TMP_1396(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)(0,30,oraclizeGasLimit)
queryId(bytes32) := TMP_1396(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
playerAddress[queryId] = msg.sender

IRs:
REF_823(address) -> playerAddress[queryId]
REF_823(address) (->playerAddress) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
playerBetAmount[queryId] = msg.value

IRs:
REF_824(uint256) -> playerBetAmount[queryId]
REF_824(uint256) (->playerBetAmount) := msg.value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
playerNumberStart[queryId] = oddeven

IRs:
REF_825(uint8) -> playerNumberStart[queryId]
REF_825(uint8) (->playerNumberStart) := oddeven(uint8)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
playerNumberEnd[queryId] = 0

IRs:
REF_826(uint8) -> playerNumberEnd[queryId]
REF_826(uint8) (->playerNumberEnd) := 0(uint256)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
gameIsActive()

IRs:
MODIFIER_CALL, DiceRoll.gameIsActive()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oddEvenBetIsValid(msg.value,oddeven)

IRs:
MODIFIER_CALL, DiceRoll.oddEvenBetIsValid(uint256,uint8)(msg.value,oddeven)"];
8->1;
}
// Function: 9428.sol-DiceRoll-oddEvenBetIsValid(uint256,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_betSize >= minBet && _betSize <= maxBet && (_oddeven == 1 || _oddeven == 0))

IRs:
TMP_1577(bool) = _betSize >= minBet
TMP_1578(bool) = _betSize <= maxBet
TMP_1579(bool) = TMP_1577 && TMP_1578
TMP_1580(bool) = _oddeven == 1
TMP_1581(bool) = _oddeven == 0
TMP_1582(bool) = TMP_1580 || TMP_1581
TMP_1583(bool) = TMP_1579 && TMP_1582
TMP_1584(None) = SOLIDITY_CALL require(bool)(TMP_1583)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9428.sol-DiceRoll-onlyOraclize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == oraclize_cbAddress())

IRs:
TMP_1591(address) = INTERNAL_CALL, usingOraclize.oraclize_cbAddress()()
TMP_1592(bool) = msg.sender == TMP_1591
TMP_1593(None) = SOLIDITY_CALL require(bool)(TMP_1592)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9428.sol-DiceRoll-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_1589(bool) = msg.sender == owner
TMP_1590(None) = SOLIDITY_CALL require(bool)(TMP_1589)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9428.sol-DiceRoll-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_1543 = CONVERT OAR to address
TMP_1544(bool) = TMP_1543 == 0
TMP_1545 = CONVERT OAR to address
TMP_1546(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_1545)
TMP_1547(bool) = TMP_1546 == 0
TMP_1548(bool) = TMP_1544 || TMP_1547
CONDITION TMP_1548"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_1549(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_1550 = CONVERT oraclize to address
TMP_1551(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1552(bool) = TMP_1550 != TMP_1551
CONDITION TMP_1552"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_1553(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1554 = CONVERT TMP_1553 to OraclizeI
oraclize(OraclizeI) := TMP_1554(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 9428.sol-DiceRoll-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_1062(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_1062"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9428.sol-DiceRoll-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 9428.sol-DiceRoll-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_778(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_778"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9428.sol-DiceRoll-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_780(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_780"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9428.sol-DiceRoll-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_nbytes > 0) && (_nbytes <= 32))

IRs:
TMP_1204(bool) = _nbytes > 0
TMP_1205(bool) = _nbytes <= 32
TMP_1206(bool) = TMP_1204 && TMP_1205
TMP_1207(None) = SOLIDITY_CALL require(bool)(TMP_1206)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_delay *= 10

IRs:
_delay(uint256) = _delay * 10"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_1209 = new bytes(1)
nbytes(bytes) := TMP_1209(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_788(bytes1) -> nbytes[0]
TMP_1210 = CONVERT _nbytes to bytes1
REF_788(bytes1) (->nbytes) := TMP_1210(bytes1)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
unonce = new bytes(32)

IRs:
TMP_1212 = new bytes(32)
unonce(bytes) := TMP_1212(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
sessionKeyHash = new bytes(32)

IRs:
TMP_1214 = new bytes(32)
sessionKeyHash(bytes) := TMP_1214(bytes)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_1215(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_1215(bytes32)"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
delay = new bytes(32)

IRs:
TMP_1217 = new bytes(32)
delay(bytes) := TMP_1217(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
delay_bytes8 = new bytes(8)

IRs:
TMP_1219 = new bytes(8)
delay_bytes8(bytes) := TMP_1219(bytes)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
copyBytes(delay,24,8,delay_bytes8,0)

IRs:
TMP_1220(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(delay,24,8,delay_bytes8,0)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash,delay)

IRs:
args(bytes[4]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)', 'delay(bytes)']"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
queryId = oraclize_query(random,args,_customGasLimit)

IRs:
TMP_1221(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[4],uint256)(random,args,_customGasLimit)
queryId(bytes32) := TMP_1221(bytes32)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
delay_bytes8_left = new bytes(8)

IRs:
TMP_1223 = new bytes(8)
delay_bytes8_left(bytes) := TMP_1223(bytes)"];
17->18;
18[label="Node Type: INLINE ASM 18
"];
18->19;
19[label="Node Type: END INLINE ASM 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,keccak256()(delay_bytes8_left,args[1],sha256()(args[0]),args[2]))

IRs:
REF_789(bytes) -> args[1]
REF_790(bytes) -> args[0]
TMP_1224(bytes32) = SOLIDITY_CALL sha256()(REF_790)
REF_791(bytes) -> args[2]
TMP_1225(bytes32) = SOLIDITY_CALL keccak256()(delay_bytes8_left,REF_789,TMP_1224,REF_791)
INTERNAL_CALL, usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_1225)"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_983(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_983(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_598(bytes) -> dynargs[0]
REF_599(bytes) -> args[0]
REF_598(bytes) (->dynargs) := REF_599(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_984(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_984"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_995(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_995(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_604(bytes) -> dynargs[0]
REF_605(bytes) -> args[0]
REF_604(bytes) (->dynargs) := REF_605(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_996(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_996"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_999(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_999(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_606(bytes) -> dynargs[0]
REF_607(bytes) -> args[0]
REF_606(bytes) (->dynargs) := REF_607(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_608(bytes) -> dynargs[1]
REF_609(bytes) -> args[1]
REF_608(bytes) (->dynargs) := REF_609(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1000(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1000"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1011(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1011(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_618(bytes) -> dynargs[0]
REF_619(bytes) -> args[0]
REF_618(bytes) (->dynargs) := REF_619(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_620(bytes) -> dynargs[1]
REF_621(bytes) -> args[1]
REF_620(bytes) (->dynargs) := REF_621(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1012(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1012"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1015(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1015(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_622(bytes) -> dynargs[0]
REF_623(bytes) -> args[0]
REF_622(bytes) (->dynargs) := REF_623(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_624(bytes) -> dynargs[1]
REF_625(bytes) -> args[1]
REF_624(bytes) (->dynargs) := REF_625(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_626(bytes) -> dynargs[2]
REF_627(bytes) -> args[2]
REF_626(bytes) (->dynargs) := REF_627(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1016(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1016"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1027(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1027(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_640(bytes) -> dynargs[0]
REF_641(bytes) -> args[0]
REF_640(bytes) (->dynargs) := REF_641(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_642(bytes) -> dynargs[1]
REF_643(bytes) -> args[1]
REF_642(bytes) (->dynargs) := REF_643(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_644(bytes) -> dynargs[2]
REF_645(bytes) -> args[2]
REF_644(bytes) (->dynargs) := REF_645(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1028(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1028"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1031(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1031(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_646(bytes) -> dynargs[0]
REF_647(bytes) -> args[0]
REF_646(bytes) (->dynargs) := REF_647(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_648(bytes) -> dynargs[1]
REF_649(bytes) -> args[1]
REF_648(bytes) (->dynargs) := REF_649(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_650(bytes) -> dynargs[2]
REF_651(bytes) -> args[2]
REF_650(bytes) (->dynargs) := REF_651(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_652(bytes) -> dynargs[3]
REF_653(bytes) -> args[3]
REF_652(bytes) (->dynargs) := REF_653(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1032(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1032"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1043(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1043(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_670(bytes) -> dynargs[0]
REF_671(bytes) -> args[0]
REF_670(bytes) (->dynargs) := REF_671(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_672(bytes) -> dynargs[1]
REF_673(bytes) -> args[1]
REF_672(bytes) (->dynargs) := REF_673(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_674(bytes) -> dynargs[2]
REF_675(bytes) -> args[2]
REF_674(bytes) (->dynargs) := REF_675(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_676(bytes) -> dynargs[3]
REF_677(bytes) -> args[3]
REF_676(bytes) (->dynargs) := REF_677(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1044(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1044"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1047(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1047(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_678(bytes) -> dynargs[0]
REF_679(bytes) -> args[0]
REF_678(bytes) (->dynargs) := REF_679(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_680(bytes) -> dynargs[1]
REF_681(bytes) -> args[1]
REF_680(bytes) (->dynargs) := REF_681(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_682(bytes) -> dynargs[2]
REF_683(bytes) -> args[2]
REF_682(bytes) (->dynargs) := REF_683(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_684(bytes) -> dynargs[3]
REF_685(bytes) -> args[3]
REF_684(bytes) (->dynargs) := REF_685(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_686(bytes) -> dynargs[4]
REF_687(bytes) -> args[4]
REF_686(bytes) (->dynargs) := REF_687(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1048(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1048"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1059(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1059(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_708(bytes) -> dynargs[0]
REF_709(bytes) -> args[0]
REF_708(bytes) (->dynargs) := REF_709(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_710(bytes) -> dynargs[1]
REF_711(bytes) -> args[1]
REF_710(bytes) (->dynargs) := REF_711(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_712(bytes) -> dynargs[2]
REF_713(bytes) -> args[2]
REF_712(bytes) (->dynargs) := REF_713(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_714(bytes) -> dynargs[3]
REF_715(bytes) -> args[3]
REF_714(bytes) (->dynargs) := REF_715(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_716(bytes) -> dynargs[4]
REF_717(bytes) -> args[4]
REF_716(bytes) (->dynargs) := REF_717(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1060(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1060"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_950(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_950(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_951(uint256) = tx.gasprice * 200000
TMP_952(uint256) = 1000000000000000000 + TMP_951
TMP_953(bool) = price > TMP_952
CONDITION TMP_953"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_954(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_954(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_956(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_956"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_974(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_974(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_975(uint256) = tx.gasprice * gaslimit
TMP_976(uint256) = 1000000000000000000 + TMP_975
TMP_977(bool) = price > TMP_976
CONDITION TMP_977"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_978(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_978(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_980(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_980"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_782(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_782(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_783(uint256) = tx.gasprice * 200000
TMP_784(uint256) = 1000000000000000000 + TMP_783
TMP_785(bool) = price > TMP_784
CONDITION TMP_785"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_787(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_787"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_810(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_810(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_811(uint256) = tx.gasprice * 200000
TMP_812(uint256) = 1000000000000000000 + TMP_811
TMP_813(bool) = price > TMP_812
CONDITION TMP_813"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_815(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_815"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_831(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_831(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_832(uint256) = tx.gasprice * gaslimit
TMP_833(uint256) = 1000000000000000000 + TMP_832
TMP_834(bool) = price > TMP_833
CONDITION TMP_834"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_836(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_836"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_803(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_803(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_804(uint256) = tx.gasprice * gaslimit
TMP_805(uint256) = 1000000000000000000 + TMP_804
TMP_806(bool) = price > TMP_805
CONDITION TMP_806"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_808(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_808"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_871(string[])  = new string[](1)
dynargs(string[]) = ['TMP_871(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_466(string) -> dynargs[0]
REF_467(string) -> args[0]
REF_466(string) (->dynargs) := REF_467(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_872(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_872"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_883(string[])  = new string[](1)
dynargs(string[]) = ['TMP_883(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_472(string) -> dynargs[0]
REF_473(string) -> args[0]
REF_472(string) (->dynargs) := REF_473(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_884(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_884"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_887(string[])  = new string[](2)
dynargs(string[]) = ['TMP_887(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_474(string) -> dynargs[0]
REF_475(string) -> args[0]
REF_474(string) (->dynargs) := REF_475(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_476(string) -> dynargs[1]
REF_477(string) -> args[1]
REF_476(string) (->dynargs) := REF_477(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_888(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_888"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_899(string[])  = new string[](2)
dynargs(string[]) = ['TMP_899(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_486(string) -> dynargs[0]
REF_487(string) -> args[0]
REF_486(string) (->dynargs) := REF_487(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_488(string) -> dynargs[1]
REF_489(string) -> args[1]
REF_488(string) (->dynargs) := REF_489(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_900(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_900"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_903(string[])  = new string[](3)
dynargs(string[]) = ['TMP_903(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_490(string) -> dynargs[0]
REF_491(string) -> args[0]
REF_490(string) (->dynargs) := REF_491(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_492(string) -> dynargs[1]
REF_493(string) -> args[1]
REF_492(string) (->dynargs) := REF_493(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_494(string) -> dynargs[2]
REF_495(string) -> args[2]
REF_494(string) (->dynargs) := REF_495(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_904(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_904"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_915(string[])  = new string[](3)
dynargs(string[]) = ['TMP_915(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_508(string) -> dynargs[0]
REF_509(string) -> args[0]
REF_508(string) (->dynargs) := REF_509(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_510(string) -> dynargs[1]
REF_511(string) -> args[1]
REF_510(string) (->dynargs) := REF_511(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_512(string) -> dynargs[2]
REF_513(string) -> args[2]
REF_512(string) (->dynargs) := REF_513(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_916(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_916"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_919(string[])  = new string[](4)
dynargs(string[]) = ['TMP_919(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_514(string) -> dynargs[0]
REF_515(string) -> args[0]
REF_514(string) (->dynargs) := REF_515(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_516(string) -> dynargs[1]
REF_517(string) -> args[1]
REF_516(string) (->dynargs) := REF_517(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_518(string) -> dynargs[2]
REF_519(string) -> args[2]
REF_518(string) (->dynargs) := REF_519(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_520(string) -> dynargs[3]
REF_521(string) -> args[3]
REF_520(string) (->dynargs) := REF_521(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_920(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_920"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_931(string[])  = new string[](4)
dynargs(string[]) = ['TMP_931(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_538(string) -> dynargs[0]
REF_539(string) -> args[0]
REF_538(string) (->dynargs) := REF_539(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_540(string) -> dynargs[1]
REF_541(string) -> args[1]
REF_540(string) (->dynargs) := REF_541(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_542(string) -> dynargs[2]
REF_543(string) -> args[2]
REF_542(string) (->dynargs) := REF_543(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_544(string) -> dynargs[3]
REF_545(string) -> args[3]
REF_544(string) (->dynargs) := REF_545(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_932(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_932"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_935(string[])  = new string[](5)
dynargs(string[]) = ['TMP_935(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_546(string) -> dynargs[0]
REF_547(string) -> args[0]
REF_546(string) (->dynargs) := REF_547(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_548(string) -> dynargs[1]
REF_549(string) -> args[1]
REF_548(string) (->dynargs) := REF_549(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_550(string) -> dynargs[2]
REF_551(string) -> args[2]
REF_550(string) (->dynargs) := REF_551(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_552(string) -> dynargs[3]
REF_553(string) -> args[3]
REF_552(string) (->dynargs) := REF_553(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_554(string) -> dynargs[4]
REF_555(string) -> args[4]
REF_554(string) (->dynargs) := REF_555(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_936(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_936"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_947(string[])  = new string[](5)
dynargs(string[]) = ['TMP_947(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_576(string) -> dynargs[0]
REF_577(string) -> args[0]
REF_576(string) (->dynargs) := REF_577(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_578(string) -> dynargs[1]
REF_579(string) -> args[1]
REF_578(string) (->dynargs) := REF_579(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_580(string) -> dynargs[2]
REF_581(string) -> args[2]
REF_580(string) (->dynargs) := REF_581(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_582(string) -> dynargs[3]
REF_583(string) -> args[3]
REF_582(string) (->dynargs) := REF_583(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_584(string) -> dynargs[4]
REF_585(string) -> args[4]
REF_584(string) (->dynargs) := REF_585(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_948(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_948"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_838(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_838(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_839(uint256) = tx.gasprice * 200000
TMP_840(uint256) = 1000000000000000000 + TMP_839
TMP_841(bool) = price > TMP_840
CONDITION TMP_841"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_842(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_842(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_844(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_844"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_862(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_862(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_863(uint256) = tx.gasprice * gaslimit
TMP_864(uint256) = 1000000000000000000 + TMP_863
TMP_865(bool) = price > TMP_864
CONDITION TMP_865"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_866(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_866(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_868(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_868"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_987(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_987(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_600(bytes) -> dynargs[0]
REF_601(bytes) -> args[0]
REF_600(bytes) (->dynargs) := REF_601(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_988(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_988"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_991(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_991(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_602(bytes) -> dynargs[0]
REF_603(bytes) -> args[0]
REF_602(bytes) (->dynargs) := REF_603(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_992(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_992"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1003(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1003(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_610(bytes) -> dynargs[0]
REF_611(bytes) -> args[0]
REF_610(bytes) (->dynargs) := REF_611(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_612(bytes) -> dynargs[1]
REF_613(bytes) -> args[1]
REF_612(bytes) (->dynargs) := REF_613(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1004(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1004"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1007(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1007(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_614(bytes) -> dynargs[0]
REF_615(bytes) -> args[0]
REF_614(bytes) (->dynargs) := REF_615(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_616(bytes) -> dynargs[1]
REF_617(bytes) -> args[1]
REF_616(bytes) (->dynargs) := REF_617(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1008(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1008"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1019(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1019(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_628(bytes) -> dynargs[0]
REF_629(bytes) -> args[0]
REF_628(bytes) (->dynargs) := REF_629(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_630(bytes) -> dynargs[1]
REF_631(bytes) -> args[1]
REF_630(bytes) (->dynargs) := REF_631(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_632(bytes) -> dynargs[2]
REF_633(bytes) -> args[2]
REF_632(bytes) (->dynargs) := REF_633(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1020(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1020"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1023(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1023(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_634(bytes) -> dynargs[0]
REF_635(bytes) -> args[0]
REF_634(bytes) (->dynargs) := REF_635(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_636(bytes) -> dynargs[1]
REF_637(bytes) -> args[1]
REF_636(bytes) (->dynargs) := REF_637(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_638(bytes) -> dynargs[2]
REF_639(bytes) -> args[2]
REF_638(bytes) (->dynargs) := REF_639(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1024(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1024"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1035(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1035(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_654(bytes) -> dynargs[0]
REF_655(bytes) -> args[0]
REF_654(bytes) (->dynargs) := REF_655(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_656(bytes) -> dynargs[1]
REF_657(bytes) -> args[1]
REF_656(bytes) (->dynargs) := REF_657(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_658(bytes) -> dynargs[2]
REF_659(bytes) -> args[2]
REF_658(bytes) (->dynargs) := REF_659(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_660(bytes) -> dynargs[3]
REF_661(bytes) -> args[3]
REF_660(bytes) (->dynargs) := REF_661(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1036(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1036"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1039(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1039(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_662(bytes) -> dynargs[0]
REF_663(bytes) -> args[0]
REF_662(bytes) (->dynargs) := REF_663(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_664(bytes) -> dynargs[1]
REF_665(bytes) -> args[1]
REF_664(bytes) (->dynargs) := REF_665(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_666(bytes) -> dynargs[2]
REF_667(bytes) -> args[2]
REF_666(bytes) (->dynargs) := REF_667(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_668(bytes) -> dynargs[3]
REF_669(bytes) -> args[3]
REF_668(bytes) (->dynargs) := REF_669(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1040(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1040"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1051(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1051(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_688(bytes) -> dynargs[0]
REF_689(bytes) -> args[0]
REF_688(bytes) (->dynargs) := REF_689(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_690(bytes) -> dynargs[1]
REF_691(bytes) -> args[1]
REF_690(bytes) (->dynargs) := REF_691(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_692(bytes) -> dynargs[2]
REF_693(bytes) -> args[2]
REF_692(bytes) (->dynargs) := REF_693(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_694(bytes) -> dynargs[3]
REF_695(bytes) -> args[3]
REF_694(bytes) (->dynargs) := REF_695(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_696(bytes) -> dynargs[4]
REF_697(bytes) -> args[4]
REF_696(bytes) (->dynargs) := REF_697(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1052(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1052"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1055(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1055(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_698(bytes) -> dynargs[0]
REF_699(bytes) -> args[0]
REF_698(bytes) (->dynargs) := REF_699(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_700(bytes) -> dynargs[1]
REF_701(bytes) -> args[1]
REF_700(bytes) (->dynargs) := REF_701(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_702(bytes) -> dynargs[2]
REF_703(bytes) -> args[2]
REF_702(bytes) (->dynargs) := REF_703(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_704(bytes) -> dynargs[3]
REF_705(bytes) -> args[3]
REF_704(bytes) (->dynargs) := REF_705(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_706(bytes) -> dynargs[4]
REF_707(bytes) -> args[4]
REF_706(bytes) (->dynargs) := REF_707(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1056(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1056"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_958(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_958(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_959(uint256) = tx.gasprice * 200000
TMP_960(uint256) = 1000000000000000000 + TMP_959
TMP_961(bool) = price > TMP_960
CONDITION TMP_961"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_962(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_962(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_964(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_964"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_966(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_966(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_967(uint256) = tx.gasprice * gaslimit
TMP_968(uint256) = 1000000000000000000 + TMP_967
TMP_969(bool) = price > TMP_968
CONDITION TMP_969"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_970(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_970(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_972(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_972"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_789(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_789(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_790(uint256) = tx.gasprice * 200000
TMP_791(uint256) = 1000000000000000000 + TMP_790
TMP_792(bool) = price > TMP_791
CONDITION TMP_792"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_794(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_794"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_817(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_817(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_818(uint256) = tx.gasprice * 200000
TMP_819(uint256) = 1000000000000000000 + TMP_818
TMP_820(bool) = price > TMP_819
CONDITION TMP_820"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_822(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_822"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_824(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_824(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_825(uint256) = tx.gasprice * gaslimit
TMP_826(uint256) = 1000000000000000000 + TMP_825
TMP_827(bool) = price > TMP_826
CONDITION TMP_827"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_829(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_829"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_796(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_796(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_797(uint256) = tx.gasprice * gaslimit
TMP_798(uint256) = 1000000000000000000 + TMP_797
TMP_799(bool) = price > TMP_798
CONDITION TMP_799"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_801(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_801"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_875(string[])  = new string[](1)
dynargs(string[]) = ['TMP_875(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_468(string) -> dynargs[0]
REF_469(string) -> args[0]
REF_468(string) (->dynargs) := REF_469(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_876(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_876"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_879(string[])  = new string[](1)
dynargs(string[]) = ['TMP_879(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_470(string) -> dynargs[0]
REF_471(string) -> args[0]
REF_470(string) (->dynargs) := REF_471(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_880(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_880"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_891(string[])  = new string[](2)
dynargs(string[]) = ['TMP_891(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_478(string) -> dynargs[0]
REF_479(string) -> args[0]
REF_478(string) (->dynargs) := REF_479(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_480(string) -> dynargs[1]
REF_481(string) -> args[1]
REF_480(string) (->dynargs) := REF_481(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_892(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_892"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_895(string[])  = new string[](2)
dynargs(string[]) = ['TMP_895(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_482(string) -> dynargs[0]
REF_483(string) -> args[0]
REF_482(string) (->dynargs) := REF_483(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_484(string) -> dynargs[1]
REF_485(string) -> args[1]
REF_484(string) (->dynargs) := REF_485(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_896(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_896"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_907(string[])  = new string[](3)
dynargs(string[]) = ['TMP_907(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_496(string) -> dynargs[0]
REF_497(string) -> args[0]
REF_496(string) (->dynargs) := REF_497(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_498(string) -> dynargs[1]
REF_499(string) -> args[1]
REF_498(string) (->dynargs) := REF_499(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_500(string) -> dynargs[2]
REF_501(string) -> args[2]
REF_500(string) (->dynargs) := REF_501(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_908(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_908"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_911(string[])  = new string[](3)
dynargs(string[]) = ['TMP_911(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_502(string) -> dynargs[0]
REF_503(string) -> args[0]
REF_502(string) (->dynargs) := REF_503(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_504(string) -> dynargs[1]
REF_505(string) -> args[1]
REF_504(string) (->dynargs) := REF_505(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_506(string) -> dynargs[2]
REF_507(string) -> args[2]
REF_506(string) (->dynargs) := REF_507(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_912(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_912"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_923(string[])  = new string[](4)
dynargs(string[]) = ['TMP_923(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_522(string) -> dynargs[0]
REF_523(string) -> args[0]
REF_522(string) (->dynargs) := REF_523(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_524(string) -> dynargs[1]
REF_525(string) -> args[1]
REF_524(string) (->dynargs) := REF_525(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_526(string) -> dynargs[2]
REF_527(string) -> args[2]
REF_526(string) (->dynargs) := REF_527(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_528(string) -> dynargs[3]
REF_529(string) -> args[3]
REF_528(string) (->dynargs) := REF_529(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_924(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_924"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_927(string[])  = new string[](4)
dynargs(string[]) = ['TMP_927(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_530(string) -> dynargs[0]
REF_531(string) -> args[0]
REF_530(string) (->dynargs) := REF_531(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_532(string) -> dynargs[1]
REF_533(string) -> args[1]
REF_532(string) (->dynargs) := REF_533(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_534(string) -> dynargs[2]
REF_535(string) -> args[2]
REF_534(string) (->dynargs) := REF_535(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_536(string) -> dynargs[3]
REF_537(string) -> args[3]
REF_536(string) (->dynargs) := REF_537(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_928(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_928"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_939(string[])  = new string[](5)
dynargs(string[]) = ['TMP_939(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_556(string) -> dynargs[0]
REF_557(string) -> args[0]
REF_556(string) (->dynargs) := REF_557(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_558(string) -> dynargs[1]
REF_559(string) -> args[1]
REF_558(string) (->dynargs) := REF_559(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_560(string) -> dynargs[2]
REF_561(string) -> args[2]
REF_560(string) (->dynargs) := REF_561(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_562(string) -> dynargs[3]
REF_563(string) -> args[3]
REF_562(string) (->dynargs) := REF_563(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_564(string) -> dynargs[4]
REF_565(string) -> args[4]
REF_564(string) (->dynargs) := REF_565(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_940(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_940"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_943(string[])  = new string[](5)
dynargs(string[]) = ['TMP_943(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_566(string) -> dynargs[0]
REF_567(string) -> args[0]
REF_566(string) (->dynargs) := REF_567(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_568(string) -> dynargs[1]
REF_569(string) -> args[1]
REF_568(string) (->dynargs) := REF_569(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_570(string) -> dynargs[2]
REF_571(string) -> args[2]
REF_570(string) (->dynargs) := REF_571(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_572(string) -> dynargs[3]
REF_573(string) -> args[3]
REF_572(string) (->dynargs) := REF_573(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_574(string) -> dynargs[4]
REF_575(string) -> args[4]
REF_574(string) (->dynargs) := REF_575(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_944(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_944"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_846(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_846(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_847(uint256) = tx.gasprice * 200000
TMP_848(uint256) = 1000000000000000000 + TMP_847
TMP_849(bool) = price > TMP_848
CONDITION TMP_849"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_850(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_850(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_852(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_852"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_854(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_854(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_855(uint256) = tx.gasprice * gaslimit
TMP_856(uint256) = 1000000000000000000 + TMP_855
TMP_857(bool) = price > TMP_856
CONDITION TMP_857"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_858(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_858(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_860(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_860"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-DiceRoll-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_1068(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_1068"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9428.sol-DiceRoll-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_proof[0] == L) && (_proof[1] == P) && (_proof[2] == 1))

IRs:
REF_855(None) -> _proof[0]
TMP_1557(bool) = REF_855 == L
REF_856(None) -> _proof[1]
TMP_1558(bool) = REF_856 == P
TMP_1559(bool) = TMP_1557 && TMP_1558
REF_857(None) -> _proof[2]
TMP_1560(bool) = REF_857 == 1
TMP_1561(bool) = TMP_1559 && TMP_1560
TMP_1562(None) = SOLIDITY_CALL require(bool)(TMP_1561)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_1563 = CONVERT _result to bytes
TMP_1564(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_1565(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_1563,TMP_1564)
proofVerified(bool) := TMP_1565(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(proofVerified)

IRs:
TMP_1566(None) = SOLIDITY_CALL require(bool)(proofVerified)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9428.sol-DiceRoll-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_1297(uint256) = 3 + 65
TMP_1298(uint256) = 3 + 65
TMP_1299(uint256) = TMP_1298 + 1
REF_807(None) -> proof[TMP_1299]
TMP_1300 = CONVERT REF_807 to uint256
TMP_1301(uint256) = TMP_1300 + 2
TMP_1302(uint256) = TMP_1297 + TMP_1301
TMP_1303(uint256) = TMP_1302 + 32
ledgerProofLength(uint256) := TMP_1303(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_1305 = new bytes(32)
keyhash(bytes) := TMP_1305(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_1306(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! (keccak256()(keyhash) == keccak256()(sha256()(context_name,queryId)))

IRs:
TMP_1307(bytes32) = SOLIDITY_CALL keccak256()(keyhash)
TMP_1308(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_1309(bytes32) = SOLIDITY_CALL keccak256()(TMP_1308)
TMP_1310(bool) = TMP_1307 == TMP_1309
TMP_1311 = UnaryType.BANG TMP_1310 
CONDITION TMP_1311"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_1313(uint256) = 32 + 8
TMP_1314(uint256) = TMP_1313 + 1
TMP_1315(uint256) = TMP_1314 + 32
TMP_1316(uint256) = ledgerProofLength + TMP_1315
TMP_1317(uint256) = TMP_1316 + 1
REF_808(None) -> proof[TMP_1317]
TMP_1318 = CONVERT REF_808 to uint256
TMP_1319(uint256) = TMP_1318 + 2
TMP_1320 = new bytes(TMP_1319)
sig1(bytes) := TMP_1320(bytes)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_1321(uint256) = 32 + 8
TMP_1322(uint256) = TMP_1321 + 1
TMP_1323(uint256) = TMP_1322 + 32
TMP_1324(uint256) = ledgerProofLength + TMP_1323
REF_809 -> LENGTH sig1
TMP_1325(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1324,REF_809,sig1,0)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! matchBytes32Prefix(sha256()(sig1),result,uint256(proof[ledgerProofLength + 32 + 8]))

IRs:
TMP_1326(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_1327(uint256) = ledgerProofLength + 32
TMP_1328(uint256) = TMP_1327 + 8
REF_810(None) -> proof[TMP_1328]
TMP_1329 = CONVERT REF_810 to uint256
TMP_1330(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256)(TMP_1326,result,TMP_1329)
TMP_1331 = UnaryType.BANG TMP_1330 
CONDITION TMP_1331"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_1333(uint256) = 8 + 1
TMP_1334(uint256) = TMP_1333 + 32
TMP_1335 = new bytes(TMP_1334)
commitmentSlice1(bytes) := TMP_1335(bytes)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_1336(uint256) = ledgerProofLength + 32
TMP_1337(uint256) = 8 + 1
TMP_1338(uint256) = TMP_1337 + 32
TMP_1339(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1336,TMP_1338,commitmentSlice1,0)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_1341 = new bytes(64)
sessionPubkey(bytes) := TMP_1341(bytes)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_1342(uint256) = ledgerProofLength + 32
TMP_1343(uint256) = 8 + 1
TMP_1344(uint256) = TMP_1343 + 32
TMP_1345(uint256) = TMP_1342 + TMP_1344
REF_811 -> LENGTH sig1
TMP_1346(uint256) = TMP_1345 + REF_811
TMP_1347(uint256) = TMP_1346 + 65
sig2offset(uint256) := TMP_1347(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_1348(uint256) = sig2offset - 64
TMP_1349(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1348,64,sessionPubkey,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_1350(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_1350(bytes32)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
oraclize_randomDS_args[queryId] == keccak256()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_812(bytes32) -> oraclize_randomDS_args[queryId]
TMP_1351(bytes32) = SOLIDITY_CALL keccak256()(commitmentSlice1,sessionPubkeyHash)
TMP_1352(bool) = REF_812 == TMP_1351
CONDITION TMP_1352"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_813(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_813 "];
19->21;
20[label="Node Type: RETURN 20

EXPRESSION:
false

IRs:
RETURN False"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_1354(uint256) = 32 + 8
TMP_1355(uint256) = TMP_1354 + 1
TMP_1356(uint256) = TMP_1355 + 32
TMP_1357 = new bytes(TMP_1356)
tosign1(bytes) := TMP_1357(bytes)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_1358(uint256) = 32 + 8
TMP_1359(uint256) = TMP_1358 + 1
TMP_1360(uint256) = TMP_1359 + 32
TMP_1361(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_1360,tosign1,0)"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
! verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_1362(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_1363(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1362,sig1,sessionPubkey)
TMP_1364 = UnaryType.BANG TMP_1363 
CONDITION TMP_1364"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: RETURN 25

EXPRESSION:
false

IRs:
RETURN False"];
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: IF 27

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_814(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1365(bool) = REF_814 == False
CONDITION TMP_1365"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_815(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1366(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_815(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_1366(bool)"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: RETURN 30

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_816(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_816"];
}
// Function: 9428.sol-DiceRoll-oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_801(None) -> _proof[0]
TMP_1283(bool) = REF_801 != L
REF_802(None) -> _proof[1]
TMP_1284(bool) = REF_802 != P
TMP_1285(bool) = TMP_1283 || TMP_1284
REF_803(None) -> _proof[2]
TMP_1286(bool) = REF_803 != 1
TMP_1287(bool) = TMP_1285 || TMP_1286
CONDITION TMP_1287"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_1288 = CONVERT _result to bytes
TMP_1289(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_1290(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_1288,TMP_1289)
proofVerified(bool) := TMP_1290(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_1291(bool) = proofVerified == False
CONDITION TMP_1291"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
2

IRs:
RETURN 2"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 9428.sol-DiceRoll-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_1248(uint256) = sig2offset + 1
REF_795(None) -> proof[TMP_1248]
TMP_1249 = CONVERT REF_795 to uint256
TMP_1250(uint256) = TMP_1249 + 2
TMP_1251 = new bytes(TMP_1250)
sig2(bytes) := TMP_1251(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_796 -> LENGTH sig2
TMP_1252(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_796,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_1254 = new bytes(64)
appkey1_pubkey(bytes) := TMP_1254(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_1255(uint256) = 3 + 1
TMP_1256(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1255,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_1258(uint256) = 1 + 65
TMP_1259(uint256) = TMP_1258 + 32
TMP_1260 = new bytes(TMP_1259)
tosign2(bytes) := TMP_1260(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = bytes1(1)

IRs:
REF_797(bytes1) -> tosign2[0]
TMP_1261 = CONVERT 1 to bytes1
REF_797(bytes1) (->tosign2) := TMP_1261(bytes1)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_1262(uint256) = sig2offset - 65
TMP_1263(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1262,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_1264(uint256) = 1 + 65
TMP_1265(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_1264)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_1266(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_1267(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1266,sig2,appkey1_pubkey)
sigok(bool) := TMP_1267(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_1268(bool) = sigok == False
CONDITION TMP_1268"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_1270(uint256) = 1 + 65
TMP_1271 = new bytes(TMP_1270)
tosign3(bytes) := TMP_1271(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_798(uint256) -> tosign3[0]
REF_798(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_1272(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_1274(uint256) = 3 + 65
TMP_1275(uint256) = TMP_1274 + 1
REF_799(None) -> proof[TMP_1275]
TMP_1276 = CONVERT REF_799 to uint256
TMP_1277(uint256) = TMP_1276 + 2
TMP_1278 = new bytes(TMP_1277)
sig3(bytes) := TMP_1278(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_1279(uint256) = 3 + 65
REF_800 -> LENGTH sig3
TMP_1280(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1279,REF_800,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_1281(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_1282(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1281,sig3,LEDGERKEY)
sigok(bool) := TMP_1282(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 9428.sol-DiceRoll-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_randomDS_args[queryId] = commitment

IRs:
REF_792(bytes32) -> oraclize_randomDS_args[queryId]
REF_792(bytes32) (->oraclize_randomDS_args) := commitment(bytes32)"];
}
// Function: 9428.sol-DiceRoll-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_1066"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9428.sol-DiceRoll-oraclize_setNetwork()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_750(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_751(bool) = TMP_750 > 0
CONDITION TMP_751"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_752 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_752(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_754(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_755(bool) = TMP_754 > 0
CONDITION TMP_755"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_756 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_756(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_758(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_759(bool) = TMP_758 > 0
CONDITION TMP_759"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_760 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_760(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_762(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_763(bool) = TMP_762 > 0
CONDITION TMP_763"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_764 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_764(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_766(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_767(bool) = TMP_766 > 0
CONDITION TMP_767"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_768 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_768(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_769(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_770(bool) = TMP_769 > 0
CONDITION TMP_770"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_771 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_771(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_772(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_773(bool) = TMP_772 > 0
CONDITION TMP_773"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_774 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_774(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 9428.sol-DiceRoll-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_setNetwork()

IRs:
TMP_749(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork()()
RETURN TMP_749"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
networkID
"];
}
// Function: 9428.sol-DiceRoll-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 9428.sol-DiceRoll-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_1064"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9428.sol-DiceRoll-ownerChangeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DiceRoll.onlyOwner()()"];
2->1;
}
// Function: 9428.sol-DiceRoll-ownerPauseGame(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gamePaused = newStatus

IRs:
gamePaused(bool) := newStatus(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DiceRoll.onlyOwner()()"];
2->1;
}
// Function: 9428.sol-DiceRoll-ownerPauseJackpot(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
jackpotPaused = newStatus

IRs:
jackpotPaused(bool) := newStatus(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DiceRoll.onlyOwner()()"];
2->1;
}
// Function: 9428.sol-DiceRoll-ownerSetHouseEdge(uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newHouseEdge <= 1000)

IRs:
TMP_1511(bool) = newHouseEdge <= 1000
TMP_1512(None) = SOLIDITY_CALL require(bool)(TMP_1511)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
houseEdge = newHouseEdge

IRs:
houseEdge(uint16) := newHouseEdge(uint16)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DiceRoll.onlyOwner()()"];
3->1;
}
// Function: 9428.sol-DiceRoll-ownerSetJackpotOfHouseEdge(uint16)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newProportion < 1000)

IRs:
TMP_1523(bool) = newProportion < 1000
TMP_1524(None) = SOLIDITY_CALL require(bool)(TMP_1523)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
jackpotOfHouseEdge = newProportion

IRs:
jackpotOfHouseEdge(uint16) := newProportion(uint16)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DiceRoll.onlyOwner()()"];
3->1;
}
// Function: 9428.sol-DiceRoll-ownerSetMaxBet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
maxBet = newMaxBet

IRs:
maxBet(uint256) := newMaxBet(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DiceRoll.onlyOwner()()"];
2->1;
}
// Function: 9428.sol-DiceRoll-ownerSetMaxProfitAsPercentOfHouse(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newMaxProfitAsPercent <= 1000)

IRs:
TMP_1517(bool) = newMaxProfitAsPercent <= 1000
TMP_1518(None) = SOLIDITY_CALL require(bool)(TMP_1517)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
maxProfitAsPercentOfHouse = newMaxProfitAsPercent

IRs:
maxProfitAsPercentOfHouse(uint16) := newMaxProfitAsPercent(uint8)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, DiceRoll.setMaxProfit()()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DiceRoll.onlyOwner()()"];
4->1;
}
// Function: 9428.sol-DiceRoll-ownerSetMinBet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minBet = newMinimumBet

IRs:
minBet(uint256) := newMinimumBet(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DiceRoll.onlyOwner()()"];
2->1;
}
// Function: 9428.sol-DiceRoll-ownerSetMinJackpoBet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newVal <= 1000000000000000000)

IRs:
TMP_1514(bool) = newVal <= 1000000000000000000
TMP_1515(None) = SOLIDITY_CALL require(bool)(TMP_1514)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
minJackpotBet = newVal

IRs:
minJackpotBet(uint256) := newVal(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DiceRoll.onlyOwner()()"];
3->1;
}
// Function: 9428.sol-DiceRoll-ownerSetOraclizeGas(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newGasLimit > 50000 && newGasLimit < 300000)

IRs:
TMP_1500(bool) = newGasLimit > 50000
TMP_1501(bool) = newGasLimit < 300000
TMP_1502(bool) = TMP_1500 && TMP_1501
TMP_1503(None) = SOLIDITY_CALL require(bool)(TMP_1502)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(newPrice > 1000000000 && newPrice < 15000000000)

IRs:
TMP_1504(bool) = newPrice > 1000000000
TMP_1505(bool) = newPrice < 15000000000
TMP_1506(bool) = TMP_1504 && TMP_1505
TMP_1507(None) = SOLIDITY_CALL require(bool)(TMP_1506)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setCustomGasPrice(newPrice)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setCustomGasPrice(uint256)(newPrice)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeGasLimit = newGasLimit

IRs:
oraclizeGasLimit(uint256) := newGasLimit(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeFee = newGasLimit * newPrice

IRs:
TMP_1509(uint256) = newGasLimit * newPrice
oraclizeFee(uint256) := TMP_1509(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DiceRoll.onlyOwner()()"];
6->1;
}
// Function: 9428.sol-DiceRoll-ownerTransferEther(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sendTo.transfer(amount)

IRs:
Transfer dest:sendTo value:amount"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
setMaxProfit()

IRs:
INTERNAL_CALL, DiceRoll.setMaxProfit()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LogOwnerTransfer(sendTo,amount)

IRs:
Emit LogOwnerTransfer(sendTo,amount)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DiceRoll.onlyOwner()()"];
4->1;
}
// Function: 9428.sol-DiceRoll-ownerkill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_1533(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, DiceRoll.onlyOwner()()"];
2->1;
}
// Function: 9428.sol-DiceRoll-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_1070 = CONVERT _a to bytes
tmp(bytes) := TMP_1070(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_1071(uint256) = 2 * 20
TMP_1072(uint256) = 2 + TMP_1071
TMP_1073(bool) = i < TMP_1072
CONDITION TMP_1073"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_722(None) -> tmp[i]
TMP_1074 = CONVERT REF_722 to uint160
b1(uint160) := TMP_1074(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_1075(uint256) = i + 1
REF_723(None) -> tmp[TMP_1075]
TMP_1076 = CONVERT REF_723 to uint160
b2(uint160) := TMP_1076(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_1077(bool) = b1 >= 97
TMP_1078(bool) = b1 <= 102
TMP_1079(bool) = TMP_1077 && TMP_1078
CONDITION TMP_1079"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_1080(bool) = b1 >= 65
TMP_1081(bool) = b1 <= 70
TMP_1082(bool) = TMP_1080 && TMP_1081
CONDITION TMP_1082"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_1083(bool) = b1 >= 48
TMP_1084(bool) = b1 <= 57
TMP_1085(bool) = TMP_1083 && TMP_1084
CONDITION TMP_1085"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_1086(bool) = b2 >= 97
TMP_1087(bool) = b2 <= 102
TMP_1088(bool) = TMP_1086 && TMP_1087
CONDITION TMP_1088"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_1089(bool) = b2 >= 65
TMP_1090(bool) = b2 <= 70
TMP_1091(bool) = TMP_1089 && TMP_1090
CONDITION TMP_1091"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_1092(bool) = b2 >= 48
TMP_1093(bool) = b2 <= 57
TMP_1094(bool) = TMP_1092 && TMP_1093
CONDITION TMP_1094"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_1095(uint160) = b1 * 16
TMP_1096(uint160) = TMP_1095 + b2
iaddr(uint160) = iaddr + TMP_1096"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_1097 = CONVERT iaddr to address
RETURN TMP_1097"];
}
// Function: 9428.sol-DiceRoll-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_1166(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_1166"];
}
// Function: 9428.sol-DiceRoll-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_1167 = CONVERT _a to bytes
bresult(bytes) := TMP_1167(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_768 -> LENGTH bresult
TMP_1168(bool) = i < REF_768
CONDITION TMP_1168"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_769(None) -> bresult[i]
TMP_1169(bool) = REF_769 >= 48
REF_770(None) -> bresult[i]
TMP_1170(bool) = REF_770 <= 57
TMP_1171(bool) = TMP_1169 && TMP_1170
CONDITION TMP_1171"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_1172(bool) = _b == 0
CONDITION TMP_1172"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_1173(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_771(None) -> bresult[i]
TMP_1174 = CONVERT REF_771 to uint256
TMP_1175(uint256) = TMP_1174 - 48
mint(uint256) = mint + TMP_1175"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_772(None) -> bresult[i]
TMP_1176(bool) = REF_772 == 46
CONDITION TMP_1176"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_1177(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_1178(bool) = _b > 0
CONDITION TMP_1178"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_1179(uint256) = 10 ** _b
mint(uint256) = mint * TMP_1179"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 9428.sol-DiceRoll-playerRoll(uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalWeiWagered += msg.value

IRs:
totalWeiWagered(uint256) = totalWeiWagered + msg.value"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
queryId = oraclize_newRandomDSQuery(0,30,oraclizeGasLimit)

IRs:
TMP_1393(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)(0,30,oraclizeGasLimit)
queryId(bytes32) := TMP_1393(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
playerAddress[queryId] = msg.sender

IRs:
REF_819(address) -> playerAddress[queryId]
REF_819(address) (->playerAddress) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
playerBetAmount[queryId] = msg.value

IRs:
REF_820(uint256) -> playerBetAmount[queryId]
REF_820(uint256) (->playerBetAmount) := msg.value(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
playerNumberStart[queryId] = start

IRs:
REF_821(uint8) -> playerNumberStart[queryId]
REF_821(uint8) (->playerNumberStart) := start(uint8)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
playerNumberEnd[queryId] = end

IRs:
REF_822(uint8) -> playerNumberEnd[queryId]
REF_822(uint8) (->playerNumberEnd) := end(uint8)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
gameIsActive()

IRs:
MODIFIER_CALL, DiceRoll.gameIsActive()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
betIsValid(msg.value,start,end)

IRs:
MODIFIER_CALL, DiceRoll.betIsValid(uint256,uint8,uint8)(msg.value,start,end)"];
8->1;
}
// Function: 9428.sol-DiceRoll-rand()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
seed = uint256(keccak256()(seed,block.blockhash(block.number - 1),block.coinbase,block.difficulty))

IRs:
TMP_1491(uint256) = block.number - 1
TMP_1492(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_1491)
TMP_1493(bytes32) = SOLIDITY_CALL keccak256()(seed,TMP_1492,block.coinbase,block.difficulty)
TMP_1494 = CONVERT TMP_1493 to uint256
seed(uint256) := TMP_1494(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
seed

IRs:
RETURN seed"];
}
// Function: 9428.sol-DiceRoll-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeToAdd(a,b))

IRs:
TMP_1382(bool) = INTERNAL_CALL, SafeMath.safeToAdd(uint256,uint256)(a,b)
TMP_1383(None) = SOLIDITY_CALL require(bool)(TMP_1382)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a + b

IRs:
TMP_1384(uint256) = a + b
RETURN TMP_1384"];
}
// Function: 9428.sol-DiceRoll-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeToSubtract(a,b))

IRs:
TMP_1386(bool) = INTERNAL_CALL, SafeMath.safeToSubtract(uint256,uint256)(a,b)
TMP_1387(None) = SOLIDITY_CALL require(bool)(TMP_1386)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_1388(uint256) = a - b
RETURN TMP_1388"];
}
// Function: 9428.sol-DiceRoll-safeToAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(a + b >= a)

IRs:
TMP_1380(uint256) = a + b
TMP_1381(bool) = TMP_1380 >= a
RETURN TMP_1381"];
}
// Function: 9428.sol-DiceRoll-safeToSubtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(b <= a)

IRs:
TMP_1385(bool) = b <= a
RETURN TMP_1385"];
}
// Function: 9428.sol-DiceRoll-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 9428.sol-DiceRoll-sendValueToJackpot()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
jackpotBlance = safeAdd(jackpotBlance,msg.value)

IRs:
TMP_1474(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(jackpotBlance,msg.value)
jackpotBlance(uint256) := TMP_1474(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
jackpotAreActive()

IRs:
MODIFIER_CALL, DiceRoll.jackpotAreActive()()"];
2->1;
}
// Function: 9428.sol-DiceRoll-setMaxProfit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
maxProfit = (address(this).balance - jackpotBlance) * maxProfitAsPercentOfHouse / 1000

IRs:
TMP_1495 = CONVERT this to address
TMP_1496(uint256) = SOLIDITY_CALL balance(address)(TMP_1495)
TMP_1497(uint256) = TMP_1496 - jackpotBlance
TMP_1498(uint256) = TMP_1497 * maxProfitAsPercentOfHouse
TMP_1499(uint256) = TMP_1498 / 1000
maxProfit(uint256) := TMP_1499(uint256)"];
}
// Function: 9428.sol-DiceRoll-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_1535(uint256) = 60 * 60
TMP_1536(uint256) = TMP_1535 * 24
day(uint256) := TMP_1536(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_1537(uint256) = 60 * 60
TMP_1538(uint256) = TMP_1537 * 24
TMP_1539(uint256) = TMP_1538 * 7
week(uint256) := TMP_1539(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_1540(uint256) = 60 * 60
TMP_1541(uint256) = TMP_1540 * 24
TMP_1542(uint256) = TMP_1541 * 30
month(uint256) := TMP_1542(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
maxNumber = 99

IRs:
maxNumber(uint8) := 99(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
minNumber = 1

IRs:
minNumber(uint8) := 1(uint256)"];
}
// Function: 9428.sol-DiceRoll-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
gamePaused = false

IRs:
gamePaused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
jackpotPaused = false

IRs:
jackpotPaused(bool) := False(bool)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
refundPaused = false

IRs:
refundPaused(bool) := False(bool)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
JackpotPeriods = 1

IRs:
JackpotPeriods(uint256) := 1(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
jackpotPersent = 100

IRs:
jackpotPersent(uint16) := 100(uint256)"];
}
// Function: 9428.sol-DiceRoll-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_1098 = CONVERT _a to bytes
a(bytes) := TMP_1098(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_1099 = CONVERT _b to bytes
b(bytes) := TMP_1099(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_724 -> LENGTH a
minLength(uint256) := REF_724(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_725 -> LENGTH b
TMP_1100(bool) = REF_725 < minLength
CONDITION TMP_1100"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_726 -> LENGTH b
minLength(uint256) := REF_726(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_1101(bool) = i < minLength
CONDITION TMP_1101"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_727(None) -> a[i]
REF_728(None) -> b[i]
TMP_1102(bool) = REF_727 < REF_728
CONDITION TMP_1102"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_1103(uint256) = 0 - 1
RETURN TMP_1103"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_729(None) -> a[i]
REF_730(None) -> b[i]
TMP_1104(bool) = REF_729 > REF_730
CONDITION TMP_1104"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_1105(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_731 -> LENGTH a
REF_732 -> LENGTH b
TMP_1106(bool) = REF_731 < REF_732
CONDITION TMP_1106"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_1107(uint256) = 0 - 1
RETURN TMP_1107"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_733 -> LENGTH a
REF_734 -> LENGTH b
TMP_1108(bool) = REF_733 > REF_734
CONDITION TMP_1108"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 9428.sol-DiceRoll-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_1165(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_1165"];
}
// Function: 9428.sol-DiceRoll-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_1164(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_1164"];
}
// Function: 9428.sol-DiceRoll-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_1163(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_1163"];
}
// Function: 9428.sol-DiceRoll-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_1135 = CONVERT _a to bytes
_ba(bytes) := TMP_1135(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_1136 = CONVERT _b to bytes
_bb(bytes) := TMP_1136(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_1137 = CONVERT _c to bytes
_bc(bytes) := TMP_1137(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_1138 = CONVERT _d to bytes
_bd(bytes) := TMP_1138(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_1139 = CONVERT _e to bytes
_be(bytes) := TMP_1139(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_748 -> LENGTH _ba
REF_749 -> LENGTH _bb
TMP_1141(uint256) = REF_748 + REF_749
REF_750 -> LENGTH _bc
TMP_1142(uint256) = TMP_1141 + REF_750
REF_751 -> LENGTH _bd
TMP_1143(uint256) = TMP_1142 + REF_751
REF_752 -> LENGTH _be
TMP_1144(uint256) = TMP_1143 + REF_752
TMP_1145 = new string(TMP_1144)
abcde(string) := TMP_1145(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_1146 = CONVERT abcde to bytes
babcde(bytes) := TMP_1146(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_753 -> LENGTH _ba
TMP_1147(bool) = i < REF_753
CONDITION TMP_1147"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_1148(uint256) := k(uint256)
k(uint256) = k + 1
REF_754(None) -> babcde[TMP_1148]
REF_755(None) -> _ba[i]
REF_754(None) (->babcde) := REF_755(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_1149(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_756 -> LENGTH _bb
TMP_1150(bool) = i < REF_756
CONDITION TMP_1150"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_1151(uint256) := k(uint256)
k(uint256) = k + 1
REF_757(None) -> babcde[TMP_1151]
REF_758(None) -> _bb[i]
REF_757(None) (->babcde) := REF_758(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_1152(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_759 -> LENGTH _bc
TMP_1153(bool) = i < REF_759
CONDITION TMP_1153"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_1154(uint256) := k(uint256)
k(uint256) = k + 1
REF_760(None) -> babcde[TMP_1154]
REF_761(None) -> _bc[i]
REF_760(None) (->babcde) := REF_761(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_1155(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_762 -> LENGTH _bd
TMP_1156(bool) = i < REF_762
CONDITION TMP_1156"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_1157(uint256) := k(uint256)
k(uint256) = k + 1
REF_763(None) -> babcde[TMP_1157]
REF_764(None) -> _bd[i]
REF_763(None) (->babcde) := REF_764(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_1158(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_765 -> LENGTH _be
TMP_1159(bool) = i < REF_765
CONDITION TMP_1159"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_1160(uint256) := k(uint256)
k(uint256) = k + 1
REF_766(None) -> babcde[TMP_1160]
REF_767(None) -> _be[i]
REF_766(None) (->babcde) := REF_767(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_1161(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_1162 = CONVERT babcde to string
RETURN TMP_1162"];
}
// Function: 9428.sol-DiceRoll-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Buffer.init(buf,1024)

IRs:
LIBRARY_CALL, dest:Buffer, function:Buffer.init(Buffer.buffer,uint256), arguments:['buf', '1024'] "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buf.startArray()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.startArray(Buffer.buffer), arguments:['buf'] "];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arr.length

IRs:
REF_776 -> LENGTH arr
TMP_1194(bool) = i < REF_776
CONDITION TMP_1194"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
buf.encodeString(arr[i])

IRs:
REF_778(string) -> arr[i]
LIBRARY_CALL, dest:CBOR, function:CBOR.encodeString(Buffer.buffer,string), arguments:['buf', 'REF_778'] "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_1196(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buf.endSequence()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.endSequence(Buffer.buffer), arguments:['buf'] "];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
buf.buf

IRs:
REF_780(bytes) -> buf.buf
RETURN REF_780"];
}
// Function: 9428.sol-DiceRoll-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_1180(bool) = i == 0
CONDITION TMP_1180"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_1181(bool) = j != 0
CONDITION TMP_1181"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_1182(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_1184 = new bytes(len)
bstr(bytes) := TMP_1184(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_1185(uint256) = len - 1
k(uint256) := TMP_1185(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_1186(bool) = i != 0
CONDITION TMP_1186"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_1187(uint256) := k(uint256)
k(uint256) = k - 1
REF_773(bytes1) -> bstr[TMP_1187]
TMP_1188(uint256) = i % 10
TMP_1189(uint256) = 48 + TMP_1188
TMP_1190 = CONVERT TMP_1189 to bytes1
REF_773(bytes1) (->bstr) := TMP_1190(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_1191 = CONVERT bstr to string
RETURN TMP_1191"];
}
// Function: 9428.sol-DiceRoll-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_1228 = new bytes(32)
sigr_(bytes) := TMP_1228(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_793(None) -> dersig[3]
TMP_1229 = CONVERT REF_793 to uint256
TMP_1230(uint256) = TMP_1229 - 32
TMP_1231(uint256) = 4 + TMP_1230
offset(uint256) := TMP_1231(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_1232(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_1232(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_1234 = new bytes(32)
sigs_(bytes) := TMP_1234(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_1235(uint256) = 32 + 2
offset(uint256) = offset + TMP_1235"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_1236(uint256) = offset - 1
REF_794(None) -> dersig[TMP_1236]
TMP_1237 = CONVERT REF_794 to uint256
TMP_1238(uint256) = TMP_1237 - 32
TMP_1239(uint256) = offset + TMP_1238
TMP_1240(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_1239,32,sigs_,0)
sigs_(bytes) := TMP_1240(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_3(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_3 index: 0 
signer(address)= UNPACK TUPLE_3 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(keccak256()(pubkey)) == signer

IRs:
TMP_1241(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_1242 = CONVERT TMP_1241 to address
TMP_1243(bool) = TMP_1242 == signer
CONDITION TMP_1243"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_4(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_4 index: 0 
signer(address)= UNPACK TUPLE_4 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(keccak256()(pubkey)) == signer)

IRs:
TMP_1244(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_1245 = CONVERT TMP_1244 to address
TMP_1246(bool) = TMP_1245 == signer
RETURN TMP_1246"];
}
// Function: 9428.sol-OraclizeAddrResolverI-getAddress()
digraph{
}
// Function: 9428.sol-OraclizeI-getPrice(string)
digraph{
}
// Function: 9428.sol-OraclizeI-getPrice(string,uint256)
digraph{
}
// Function: 9428.sol-OraclizeI-query(uint256,string,string)
digraph{
}
// Function: 9428.sol-OraclizeI-query2(uint256,string,string,string)
digraph{
}
// Function: 9428.sol-OraclizeI-query2_withGasLimit(uint256,string,string,string,uint256)
digraph{
}
// Function: 9428.sol-OraclizeI-queryN(uint256,string,bytes)
digraph{
}
// Function: 9428.sol-OraclizeI-queryN_withGasLimit(uint256,string,bytes,uint256)
digraph{
}
// Function: 9428.sol-OraclizeI-query_withGasLimit(uint256,string,string,uint256)
digraph{
}
// Function: 9428.sol-OraclizeI-randomDS_getSessionPubKeyHash()
digraph{
}
// Function: 9428.sol-OraclizeI-setCustomGasPrice(uint256)
digraph{
}
// Function: 9428.sol-OraclizeI-setProofType(bytes1)
digraph{
}
// Function: 9428.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeToAdd(a,b))

IRs:
TMP_742(bool) = INTERNAL_CALL, SafeMath.safeToAdd(uint256,uint256)(a,b)
TMP_743(None) = SOLIDITY_CALL require(bool)(TMP_742)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a + b

IRs:
TMP_744(uint256) = a + b
RETURN TMP_744"];
}
// Function: 9428.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(safeToSubtract(a,b))

IRs:
TMP_746(bool) = INTERNAL_CALL, SafeMath.safeToSubtract(uint256,uint256)(a,b)
TMP_747(None) = SOLIDITY_CALL require(bool)(TMP_746)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_748(uint256) = a - b
RETURN TMP_748"];
}
// Function: 9428.sol-SafeMath-safeToAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(a + b >= a)

IRs:
TMP_740(uint256) = a + b
TMP_741(bool) = TMP_740 >= a
RETURN TMP_741"];
}
// Function: 9428.sol-SafeMath-safeToSubtract(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(b <= a)

IRs:
TMP_745(bool) = b <= a
RETURN TMP_745"];
}
// Function: 9428.sol-usingOraclize-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_104 = new bytes(0)
INTERNAL_CALL, usingOraclize.__callback(bytes32,string,bytes)(myid,result,TMP_104)"];
}
// Function: 9428.sol-usingOraclize-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1
"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
myid
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
result
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
proof
"];
}
// Function: 9428.sol-usingOraclize-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Buffer.init(buf,1024)

IRs:
LIBRARY_CALL, dest:Buffer, function:Buffer.init(Buffer.buffer,uint256), arguments:['buf', '1024'] "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buf.startArray()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.startArray(Buffer.buffer), arguments:['buf'] "];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arr.length

IRs:
REF_386 -> LENGTH arr
TMP_528(bool) = i < REF_386
CONDITION TMP_528"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
buf.encodeBytes(arr[i])

IRs:
REF_388(bytes) -> arr[i]
LIBRARY_CALL, dest:CBOR, function:CBOR.encodeBytes(Buffer.buffer,bytes), arguments:['buf', 'REF_388'] "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_530(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buf.endSequence()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.endSequence(Buffer.buffer), arguments:['buf'] "];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
buf.buf

IRs:
REF_390(bytes) -> buf.buf
RETURN REF_390"];
}
// Function: 9428.sol-usingOraclize-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_695(uint256) = length + toOffset
minLength(uint256) := TMP_695(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to.length >= minLength)

IRs:
REF_420 -> LENGTH to
TMP_696(bool) = REF_420 >= minLength
TMP_697(None) = SOLIDITY_CALL require(bool)(TMP_696)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_698(uint256) = 32 + fromOffset
i(uint256) := TMP_698(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_699(uint256) = 32 + toOffset
j(uint256) := TMP_699(uint256)"];
4->5;
5[label="Node Type: BEGIN_LOOP 5
"];
5->6;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_700(uint256) = 32 + fromOffset
TMP_701(uint256) = TMP_700 + length
TMP_702(bool) = i < TMP_701
CONDITION TMP_702"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
10->6;
11[label="Node Type: END_LOOP 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 9428.sol-usingOraclize-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_728(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_729 = CONVERT TMP_728 to OraclizeI
oraclize(OraclizeI) := TMP_729(OraclizeI)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9428.sol-usingOraclize-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_421 -> LENGTH sig
TMP_703(bool) = REF_421 != 65
CONDITION TMP_703"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_704(bool) = v < 27
CONDITION TMP_704"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_705(bool) = v != 27
TMP_706(bool) = v != 28
TMP_707(bool) = TMP_705 && TMP_706
CONDITION TMP_707"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_2(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_2"];
}
// Function: 9428.sol-usingOraclize-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 9428.sol-usingOraclize-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_437 = CONVERT _haystack to bytes
h(bytes) := TMP_437(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_438 = CONVERT _needle to bytes
n(bytes) := TMP_438(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_338 -> LENGTH h
TMP_439(bool) = REF_338 < 1
REF_339 -> LENGTH n
TMP_440(bool) = REF_339 < 1
TMP_441(bool) = TMP_439 || TMP_440
REF_340 -> LENGTH n
REF_341 -> LENGTH h
TMP_442(bool) = REF_340 > REF_341
TMP_443(bool) = TMP_441 || TMP_442
CONDITION TMP_443"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_444(uint256) = 0 - 1
RETURN TMP_444"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_342 -> LENGTH h
TMP_445(uint256) = 2 ** 128
TMP_446(uint256) = TMP_445 - 1
TMP_447(bool) = REF_342 > TMP_446
CONDITION TMP_447"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_448(uint256) = 0 - 1
RETURN TMP_448"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_343 -> LENGTH h
TMP_449(bool) = i < REF_343
CONDITION TMP_449"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_344(None) -> h[i]
REF_345(None) -> n[0]
TMP_450(bool) = REF_344 == REF_345
CONDITION TMP_450"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_346 -> LENGTH n
TMP_451(bool) = subindex < REF_346
TMP_452(uint256) = i + subindex
REF_347 -> LENGTH h
TMP_453(bool) = TMP_452 < REF_347
TMP_454(bool) = TMP_451 && TMP_453
TMP_455(uint256) = i + subindex
REF_348(None) -> h[TMP_455]
REF_349(None) -> n[subindex]
TMP_456(bool) = REF_348 == REF_349
TMP_457(bool) = TMP_454 && TMP_456
CONDITION TMP_457"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_458(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_350 -> LENGTH n
TMP_459(bool) = subindex == REF_350
CONDITION TMP_459"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_460 = CONVERT i to int256
RETURN TMP_460"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_461(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_462(uint256) = 0 - 1
RETURN TMP_462"];
}
// Function: 9428.sol-usingOraclize-matchBytes32Prefix(bytes32,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(prefix.length == n_random_bytes)

IRs:
REF_407 -> LENGTH prefix
TMP_620(bool) = REF_407 == n_random_bytes
TMP_621(None) = SOLIDITY_CALL require(bool)(TMP_620)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < n_random_bytes

IRs:
TMP_622(bool) = i < n_random_bytes
CONDITION TMP_622"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_408(None) -> content[i]
REF_409(None) -> prefix[i]
TMP_623(bool) = REF_408 != REF_409
CONDITION TMP_623"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_624(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: RETURN 11

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 9428.sol-usingOraclize-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_716 = CONVERT OAR to address
TMP_717(bool) = TMP_716 == 0
TMP_718 = CONVERT OAR to address
TMP_719(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_718)
TMP_720(bool) = TMP_719 == 0
TMP_721(bool) = TMP_717 || TMP_720
CONDITION TMP_721"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_722(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_723 = CONVERT oraclize to address
TMP_724(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_725(bool) = TMP_723 != TMP_724
CONDITION TMP_725"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_726(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_727 = CONVERT TMP_726 to OraclizeI
oraclize(OraclizeI) := TMP_727(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 9428.sol-usingOraclize-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_390(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_390"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9428.sol-usingOraclize-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 9428.sol-usingOraclize-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_106"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9428.sol-usingOraclize-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_108(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_108"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9428.sol-usingOraclize-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_nbytes > 0) && (_nbytes <= 32))

IRs:
TMP_532(bool) = _nbytes > 0
TMP_533(bool) = _nbytes <= 32
TMP_534(bool) = TMP_532 && TMP_533
TMP_535(None) = SOLIDITY_CALL require(bool)(TMP_534)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_delay *= 10

IRs:
_delay(uint256) = _delay * 10"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_537 = new bytes(1)
nbytes(bytes) := TMP_537(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_391(bytes1) -> nbytes[0]
TMP_538 = CONVERT _nbytes to bytes1
REF_391(bytes1) (->nbytes) := TMP_538(bytes1)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
unonce = new bytes(32)

IRs:
TMP_540 = new bytes(32)
unonce(bytes) := TMP_540(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
sessionKeyHash = new bytes(32)

IRs:
TMP_542 = new bytes(32)
sessionKeyHash(bytes) := TMP_542(bytes)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_543(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_543(bytes32)"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
delay = new bytes(32)

IRs:
TMP_545 = new bytes(32)
delay(bytes) := TMP_545(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
delay_bytes8 = new bytes(8)

IRs:
TMP_547 = new bytes(8)
delay_bytes8(bytes) := TMP_547(bytes)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
copyBytes(delay,24,8,delay_bytes8,0)

IRs:
TMP_548(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(delay,24,8,delay_bytes8,0)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash,delay)

IRs:
args(bytes[4]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)', 'delay(bytes)']"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
queryId = oraclize_query(random,args,_customGasLimit)

IRs:
TMP_549(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[4],uint256)(random,args,_customGasLimit)
queryId(bytes32) := TMP_549(bytes32)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
delay_bytes8_left = new bytes(8)

IRs:
TMP_551 = new bytes(8)
delay_bytes8_left(bytes) := TMP_551(bytes)"];
17->18;
18[label="Node Type: INLINE ASM 18
"];
18->19;
19[label="Node Type: END INLINE ASM 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,keccak256()(delay_bytes8_left,args[1],sha256()(args[0]),args[2]))

IRs:
REF_392(bytes) -> args[1]
REF_393(bytes) -> args[0]
TMP_552(bytes32) = SOLIDITY_CALL sha256()(REF_393)
REF_394(bytes) -> args[2]
TMP_553(bytes32) = SOLIDITY_CALL keccak256()(delay_bytes8_left,REF_392,TMP_552,REF_394)
INTERNAL_CALL, usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_553)"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_311(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_311(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_201(bytes) -> dynargs[0]
REF_202(bytes) -> args[0]
REF_201(bytes) (->dynargs) := REF_202(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_312(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_312"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_323(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_323(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_207(bytes) -> dynargs[0]
REF_208(bytes) -> args[0]
REF_207(bytes) (->dynargs) := REF_208(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_324(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_324"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_327(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_327(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_209(bytes) -> dynargs[0]
REF_210(bytes) -> args[0]
REF_209(bytes) (->dynargs) := REF_210(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_211(bytes) -> dynargs[1]
REF_212(bytes) -> args[1]
REF_211(bytes) (->dynargs) := REF_212(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_328(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_328"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_339(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_339(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_221(bytes) -> dynargs[0]
REF_222(bytes) -> args[0]
REF_221(bytes) (->dynargs) := REF_222(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_223(bytes) -> dynargs[1]
REF_224(bytes) -> args[1]
REF_223(bytes) (->dynargs) := REF_224(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_340(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_340"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_343(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_343(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_225(bytes) -> dynargs[0]
REF_226(bytes) -> args[0]
REF_225(bytes) (->dynargs) := REF_226(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_227(bytes) -> dynargs[1]
REF_228(bytes) -> args[1]
REF_227(bytes) (->dynargs) := REF_228(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_229(bytes) -> dynargs[2]
REF_230(bytes) -> args[2]
REF_229(bytes) (->dynargs) := REF_230(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_344(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_344"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_355(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_355(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_243(bytes) -> dynargs[0]
REF_244(bytes) -> args[0]
REF_243(bytes) (->dynargs) := REF_244(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_245(bytes) -> dynargs[1]
REF_246(bytes) -> args[1]
REF_245(bytes) (->dynargs) := REF_246(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_247(bytes) -> dynargs[2]
REF_248(bytes) -> args[2]
REF_247(bytes) (->dynargs) := REF_248(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_356(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_356"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_359(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_359(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_249(bytes) -> dynargs[0]
REF_250(bytes) -> args[0]
REF_249(bytes) (->dynargs) := REF_250(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_251(bytes) -> dynargs[1]
REF_252(bytes) -> args[1]
REF_251(bytes) (->dynargs) := REF_252(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_253(bytes) -> dynargs[2]
REF_254(bytes) -> args[2]
REF_253(bytes) (->dynargs) := REF_254(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_255(bytes) -> dynargs[3]
REF_256(bytes) -> args[3]
REF_255(bytes) (->dynargs) := REF_256(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_360(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_360"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_371(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_371(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_273(bytes) -> dynargs[0]
REF_274(bytes) -> args[0]
REF_273(bytes) (->dynargs) := REF_274(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_275(bytes) -> dynargs[1]
REF_276(bytes) -> args[1]
REF_275(bytes) (->dynargs) := REF_276(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_277(bytes) -> dynargs[2]
REF_278(bytes) -> args[2]
REF_277(bytes) (->dynargs) := REF_278(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_279(bytes) -> dynargs[3]
REF_280(bytes) -> args[3]
REF_279(bytes) (->dynargs) := REF_280(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_372(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_372"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_375(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_375(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_281(bytes) -> dynargs[0]
REF_282(bytes) -> args[0]
REF_281(bytes) (->dynargs) := REF_282(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_283(bytes) -> dynargs[1]
REF_284(bytes) -> args[1]
REF_283(bytes) (->dynargs) := REF_284(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_285(bytes) -> dynargs[2]
REF_286(bytes) -> args[2]
REF_285(bytes) (->dynargs) := REF_286(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_287(bytes) -> dynargs[3]
REF_288(bytes) -> args[3]
REF_287(bytes) (->dynargs) := REF_288(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_289(bytes) -> dynargs[4]
REF_290(bytes) -> args[4]
REF_289(bytes) (->dynargs) := REF_290(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_376(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_376"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_387(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_387(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_311(bytes) -> dynargs[0]
REF_312(bytes) -> args[0]
REF_311(bytes) (->dynargs) := REF_312(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_313(bytes) -> dynargs[1]
REF_314(bytes) -> args[1]
REF_313(bytes) (->dynargs) := REF_314(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_315(bytes) -> dynargs[2]
REF_316(bytes) -> args[2]
REF_315(bytes) (->dynargs) := REF_316(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_317(bytes) -> dynargs[3]
REF_318(bytes) -> args[3]
REF_317(bytes) (->dynargs) := REF_318(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_319(bytes) -> dynargs[4]
REF_320(bytes) -> args[4]
REF_319(bytes) (->dynargs) := REF_320(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_388(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_388"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_278(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_278(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_279(uint256) = tx.gasprice * 200000
TMP_280(uint256) = 1000000000000000000 + TMP_279
TMP_281(bool) = price > TMP_280
CONDITION TMP_281"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_282(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_282(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_284(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_284"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_302(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_302(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_303(uint256) = tx.gasprice * gaslimit
TMP_304(uint256) = 1000000000000000000 + TMP_303
TMP_305(bool) = price > TMP_304
CONDITION TMP_305"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_306(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_306(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_308(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_308"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_110(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_110(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_111(uint256) = tx.gasprice * 200000
TMP_112(uint256) = 1000000000000000000 + TMP_111
TMP_113(bool) = price > TMP_112
CONDITION TMP_113"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_115(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_115"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_138(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_138(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_139(uint256) = tx.gasprice * 200000
TMP_140(uint256) = 1000000000000000000 + TMP_139
TMP_141(bool) = price > TMP_140
CONDITION TMP_141"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_143(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_143"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_159(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_159(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_160(uint256) = tx.gasprice * gaslimit
TMP_161(uint256) = 1000000000000000000 + TMP_160
TMP_162(bool) = price > TMP_161
CONDITION TMP_162"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_164(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_164"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_131(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_131(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_132(uint256) = tx.gasprice * gaslimit
TMP_133(uint256) = 1000000000000000000 + TMP_132
TMP_134(bool) = price > TMP_133
CONDITION TMP_134"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_136(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_136"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_199(string[])  = new string[](1)
dynargs(string[]) = ['TMP_199(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_69(string) -> dynargs[0]
REF_70(string) -> args[0]
REF_69(string) (->dynargs) := REF_70(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_200(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_200"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_211(string[])  = new string[](1)
dynargs(string[]) = ['TMP_211(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_75(string) -> dynargs[0]
REF_76(string) -> args[0]
REF_75(string) (->dynargs) := REF_76(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_212(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_212"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_215(string[])  = new string[](2)
dynargs(string[]) = ['TMP_215(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_77(string) -> dynargs[0]
REF_78(string) -> args[0]
REF_77(string) (->dynargs) := REF_78(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_79(string) -> dynargs[1]
REF_80(string) -> args[1]
REF_79(string) (->dynargs) := REF_80(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_216(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_216"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_227(string[])  = new string[](2)
dynargs(string[]) = ['TMP_227(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_89(string) -> dynargs[0]
REF_90(string) -> args[0]
REF_89(string) (->dynargs) := REF_90(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_91(string) -> dynargs[1]
REF_92(string) -> args[1]
REF_91(string) (->dynargs) := REF_92(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_228(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_228"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_231(string[])  = new string[](3)
dynargs(string[]) = ['TMP_231(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_93(string) -> dynargs[0]
REF_94(string) -> args[0]
REF_93(string) (->dynargs) := REF_94(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_95(string) -> dynargs[1]
REF_96(string) -> args[1]
REF_95(string) (->dynargs) := REF_96(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_97(string) -> dynargs[2]
REF_98(string) -> args[2]
REF_97(string) (->dynargs) := REF_98(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_232(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_232"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_243(string[])  = new string[](3)
dynargs(string[]) = ['TMP_243(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_111(string) -> dynargs[0]
REF_112(string) -> args[0]
REF_111(string) (->dynargs) := REF_112(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_113(string) -> dynargs[1]
REF_114(string) -> args[1]
REF_113(string) (->dynargs) := REF_114(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_115(string) -> dynargs[2]
REF_116(string) -> args[2]
REF_115(string) (->dynargs) := REF_116(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_244(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_244"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_247(string[])  = new string[](4)
dynargs(string[]) = ['TMP_247(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_117(string) -> dynargs[0]
REF_118(string) -> args[0]
REF_117(string) (->dynargs) := REF_118(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_119(string) -> dynargs[1]
REF_120(string) -> args[1]
REF_119(string) (->dynargs) := REF_120(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_121(string) -> dynargs[2]
REF_122(string) -> args[2]
REF_121(string) (->dynargs) := REF_122(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_123(string) -> dynargs[3]
REF_124(string) -> args[3]
REF_123(string) (->dynargs) := REF_124(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_248(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_248"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_259(string[])  = new string[](4)
dynargs(string[]) = ['TMP_259(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_141(string) -> dynargs[0]
REF_142(string) -> args[0]
REF_141(string) (->dynargs) := REF_142(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_143(string) -> dynargs[1]
REF_144(string) -> args[1]
REF_143(string) (->dynargs) := REF_144(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_145(string) -> dynargs[2]
REF_146(string) -> args[2]
REF_145(string) (->dynargs) := REF_146(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_147(string) -> dynargs[3]
REF_148(string) -> args[3]
REF_147(string) (->dynargs) := REF_148(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_260(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_260"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_263(string[])  = new string[](5)
dynargs(string[]) = ['TMP_263(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_149(string) -> dynargs[0]
REF_150(string) -> args[0]
REF_149(string) (->dynargs) := REF_150(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_151(string) -> dynargs[1]
REF_152(string) -> args[1]
REF_151(string) (->dynargs) := REF_152(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_153(string) -> dynargs[2]
REF_154(string) -> args[2]
REF_153(string) (->dynargs) := REF_154(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_155(string) -> dynargs[3]
REF_156(string) -> args[3]
REF_155(string) (->dynargs) := REF_156(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_157(string) -> dynargs[4]
REF_158(string) -> args[4]
REF_157(string) (->dynargs) := REF_158(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_264(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_264"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_275(string[])  = new string[](5)
dynargs(string[]) = ['TMP_275(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_179(string) -> dynargs[0]
REF_180(string) -> args[0]
REF_179(string) (->dynargs) := REF_180(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_181(string) -> dynargs[1]
REF_182(string) -> args[1]
REF_181(string) (->dynargs) := REF_182(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_183(string) -> dynargs[2]
REF_184(string) -> args[2]
REF_183(string) (->dynargs) := REF_184(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_185(string) -> dynargs[3]
REF_186(string) -> args[3]
REF_185(string) (->dynargs) := REF_186(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_187(string) -> dynargs[4]
REF_188(string) -> args[4]
REF_187(string) (->dynargs) := REF_188(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_276(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_276"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_166(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_166(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_167(uint256) = tx.gasprice * 200000
TMP_168(uint256) = 1000000000000000000 + TMP_167
TMP_169(bool) = price > TMP_168
CONDITION TMP_169"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_170(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_170(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_172(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_172"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_190(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_190(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_191(uint256) = tx.gasprice * gaslimit
TMP_192(uint256) = 1000000000000000000 + TMP_191
TMP_193(bool) = price > TMP_192
CONDITION TMP_193"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_194(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_194(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_196(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_196"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_315(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_315(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_203(bytes) -> dynargs[0]
REF_204(bytes) -> args[0]
REF_203(bytes) (->dynargs) := REF_204(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_316(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_316"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_319(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_319(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_205(bytes) -> dynargs[0]
REF_206(bytes) -> args[0]
REF_205(bytes) (->dynargs) := REF_206(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_320(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_320"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_331(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_331(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_213(bytes) -> dynargs[0]
REF_214(bytes) -> args[0]
REF_213(bytes) (->dynargs) := REF_214(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_215(bytes) -> dynargs[1]
REF_216(bytes) -> args[1]
REF_215(bytes) (->dynargs) := REF_216(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_332(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_332"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_335(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_335(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_217(bytes) -> dynargs[0]
REF_218(bytes) -> args[0]
REF_217(bytes) (->dynargs) := REF_218(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_219(bytes) -> dynargs[1]
REF_220(bytes) -> args[1]
REF_219(bytes) (->dynargs) := REF_220(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_336(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_336"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_347(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_347(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_231(bytes) -> dynargs[0]
REF_232(bytes) -> args[0]
REF_231(bytes) (->dynargs) := REF_232(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_233(bytes) -> dynargs[1]
REF_234(bytes) -> args[1]
REF_233(bytes) (->dynargs) := REF_234(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_235(bytes) -> dynargs[2]
REF_236(bytes) -> args[2]
REF_235(bytes) (->dynargs) := REF_236(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_348(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_348"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_351(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_351(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_237(bytes) -> dynargs[0]
REF_238(bytes) -> args[0]
REF_237(bytes) (->dynargs) := REF_238(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_239(bytes) -> dynargs[1]
REF_240(bytes) -> args[1]
REF_239(bytes) (->dynargs) := REF_240(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_241(bytes) -> dynargs[2]
REF_242(bytes) -> args[2]
REF_241(bytes) (->dynargs) := REF_242(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_352(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_352"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_363(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_363(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_257(bytes) -> dynargs[0]
REF_258(bytes) -> args[0]
REF_257(bytes) (->dynargs) := REF_258(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_259(bytes) -> dynargs[1]
REF_260(bytes) -> args[1]
REF_259(bytes) (->dynargs) := REF_260(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_261(bytes) -> dynargs[2]
REF_262(bytes) -> args[2]
REF_261(bytes) (->dynargs) := REF_262(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_263(bytes) -> dynargs[3]
REF_264(bytes) -> args[3]
REF_263(bytes) (->dynargs) := REF_264(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_364(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_364"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_367(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_367(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_265(bytes) -> dynargs[0]
REF_266(bytes) -> args[0]
REF_265(bytes) (->dynargs) := REF_266(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_267(bytes) -> dynargs[1]
REF_268(bytes) -> args[1]
REF_267(bytes) (->dynargs) := REF_268(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_269(bytes) -> dynargs[2]
REF_270(bytes) -> args[2]
REF_269(bytes) (->dynargs) := REF_270(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_271(bytes) -> dynargs[3]
REF_272(bytes) -> args[3]
REF_271(bytes) (->dynargs) := REF_272(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_368(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_368"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_379(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_379(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_291(bytes) -> dynargs[0]
REF_292(bytes) -> args[0]
REF_291(bytes) (->dynargs) := REF_292(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_293(bytes) -> dynargs[1]
REF_294(bytes) -> args[1]
REF_293(bytes) (->dynargs) := REF_294(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_295(bytes) -> dynargs[2]
REF_296(bytes) -> args[2]
REF_295(bytes) (->dynargs) := REF_296(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_297(bytes) -> dynargs[3]
REF_298(bytes) -> args[3]
REF_297(bytes) (->dynargs) := REF_298(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_299(bytes) -> dynargs[4]
REF_300(bytes) -> args[4]
REF_299(bytes) (->dynargs) := REF_300(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_380(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_380"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_383(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_383(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_301(bytes) -> dynargs[0]
REF_302(bytes) -> args[0]
REF_301(bytes) (->dynargs) := REF_302(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_303(bytes) -> dynargs[1]
REF_304(bytes) -> args[1]
REF_303(bytes) (->dynargs) := REF_304(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_305(bytes) -> dynargs[2]
REF_306(bytes) -> args[2]
REF_305(bytes) (->dynargs) := REF_306(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_307(bytes) -> dynargs[3]
REF_308(bytes) -> args[3]
REF_307(bytes) (->dynargs) := REF_308(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_309(bytes) -> dynargs[4]
REF_310(bytes) -> args[4]
REF_309(bytes) (->dynargs) := REF_310(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_384(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_384"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_286(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_286(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_287(uint256) = tx.gasprice * 200000
TMP_288(uint256) = 1000000000000000000 + TMP_287
TMP_289(bool) = price > TMP_288
CONDITION TMP_289"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_290(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_290(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_292(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_292"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_294(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_294(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_295(uint256) = tx.gasprice * gaslimit
TMP_296(uint256) = 1000000000000000000 + TMP_295
TMP_297(bool) = price > TMP_296
CONDITION TMP_297"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_298(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_298(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_300(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_300"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_117(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_117(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_118(uint256) = tx.gasprice * 200000
TMP_119(uint256) = 1000000000000000000 + TMP_118
TMP_120(bool) = price > TMP_119
CONDITION TMP_120"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_122(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_122"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_145(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_145(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_146(uint256) = tx.gasprice * 200000
TMP_147(uint256) = 1000000000000000000 + TMP_146
TMP_148(bool) = price > TMP_147
CONDITION TMP_148"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_150(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_150"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_152(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_152(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_153(uint256) = tx.gasprice * gaslimit
TMP_154(uint256) = 1000000000000000000 + TMP_153
TMP_155(bool) = price > TMP_154
CONDITION TMP_155"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_157(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_157"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_124(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_124(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_125(uint256) = tx.gasprice * gaslimit
TMP_126(uint256) = 1000000000000000000 + TMP_125
TMP_127(bool) = price > TMP_126
CONDITION TMP_127"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_129(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_129"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_203(string[])  = new string[](1)
dynargs(string[]) = ['TMP_203(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_71(string) -> dynargs[0]
REF_72(string) -> args[0]
REF_71(string) (->dynargs) := REF_72(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_204(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_204"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_207(string[])  = new string[](1)
dynargs(string[]) = ['TMP_207(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_73(string) -> dynargs[0]
REF_74(string) -> args[0]
REF_73(string) (->dynargs) := REF_74(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_208(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_208"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_219(string[])  = new string[](2)
dynargs(string[]) = ['TMP_219(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_81(string) -> dynargs[0]
REF_82(string) -> args[0]
REF_81(string) (->dynargs) := REF_82(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_83(string) -> dynargs[1]
REF_84(string) -> args[1]
REF_83(string) (->dynargs) := REF_84(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_220(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_220"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_223(string[])  = new string[](2)
dynargs(string[]) = ['TMP_223(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_85(string) -> dynargs[0]
REF_86(string) -> args[0]
REF_85(string) (->dynargs) := REF_86(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_87(string) -> dynargs[1]
REF_88(string) -> args[1]
REF_87(string) (->dynargs) := REF_88(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_224(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_224"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_235(string[])  = new string[](3)
dynargs(string[]) = ['TMP_235(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_99(string) -> dynargs[0]
REF_100(string) -> args[0]
REF_99(string) (->dynargs) := REF_100(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_101(string) -> dynargs[1]
REF_102(string) -> args[1]
REF_101(string) (->dynargs) := REF_102(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_103(string) -> dynargs[2]
REF_104(string) -> args[2]
REF_103(string) (->dynargs) := REF_104(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_236(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_236"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_239(string[])  = new string[](3)
dynargs(string[]) = ['TMP_239(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_105(string) -> dynargs[0]
REF_106(string) -> args[0]
REF_105(string) (->dynargs) := REF_106(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_107(string) -> dynargs[1]
REF_108(string) -> args[1]
REF_107(string) (->dynargs) := REF_108(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_109(string) -> dynargs[2]
REF_110(string) -> args[2]
REF_109(string) (->dynargs) := REF_110(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_240(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_240"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_251(string[])  = new string[](4)
dynargs(string[]) = ['TMP_251(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_125(string) -> dynargs[0]
REF_126(string) -> args[0]
REF_125(string) (->dynargs) := REF_126(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_127(string) -> dynargs[1]
REF_128(string) -> args[1]
REF_127(string) (->dynargs) := REF_128(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_129(string) -> dynargs[2]
REF_130(string) -> args[2]
REF_129(string) (->dynargs) := REF_130(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_131(string) -> dynargs[3]
REF_132(string) -> args[3]
REF_131(string) (->dynargs) := REF_132(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_252(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_252"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_255(string[])  = new string[](4)
dynargs(string[]) = ['TMP_255(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_133(string) -> dynargs[0]
REF_134(string) -> args[0]
REF_133(string) (->dynargs) := REF_134(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_135(string) -> dynargs[1]
REF_136(string) -> args[1]
REF_135(string) (->dynargs) := REF_136(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_137(string) -> dynargs[2]
REF_138(string) -> args[2]
REF_137(string) (->dynargs) := REF_138(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_139(string) -> dynargs[3]
REF_140(string) -> args[3]
REF_139(string) (->dynargs) := REF_140(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_256(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_256"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_267(string[])  = new string[](5)
dynargs(string[]) = ['TMP_267(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_159(string) -> dynargs[0]
REF_160(string) -> args[0]
REF_159(string) (->dynargs) := REF_160(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_161(string) -> dynargs[1]
REF_162(string) -> args[1]
REF_161(string) (->dynargs) := REF_162(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_163(string) -> dynargs[2]
REF_164(string) -> args[2]
REF_163(string) (->dynargs) := REF_164(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_165(string) -> dynargs[3]
REF_166(string) -> args[3]
REF_165(string) (->dynargs) := REF_166(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_167(string) -> dynargs[4]
REF_168(string) -> args[4]
REF_167(string) (->dynargs) := REF_168(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_268(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_268"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_271(string[])  = new string[](5)
dynargs(string[]) = ['TMP_271(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_169(string) -> dynargs[0]
REF_170(string) -> args[0]
REF_169(string) (->dynargs) := REF_170(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_171(string) -> dynargs[1]
REF_172(string) -> args[1]
REF_171(string) (->dynargs) := REF_172(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_173(string) -> dynargs[2]
REF_174(string) -> args[2]
REF_173(string) (->dynargs) := REF_174(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_175(string) -> dynargs[3]
REF_176(string) -> args[3]
REF_175(string) (->dynargs) := REF_176(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_177(string) -> dynargs[4]
REF_178(string) -> args[4]
REF_177(string) (->dynargs) := REF_178(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_272(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_272"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_174(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_174(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_175(uint256) = tx.gasprice * 200000
TMP_176(uint256) = 1000000000000000000 + TMP_175
TMP_177(bool) = price > TMP_176
CONDITION TMP_177"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_178(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_178(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_180(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_180"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_182(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_182(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_183(uint256) = tx.gasprice * gaslimit
TMP_184(uint256) = 1000000000000000000 + TMP_183
TMP_185(bool) = price > TMP_184
CONDITION TMP_185"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_186(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_186(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_188(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_188"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9428.sol-usingOraclize-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_396(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_396"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9428.sol-usingOraclize-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_proof[0] == L) && (_proof[1] == P) && (_proof[2] == 1))

IRs:
REF_425(None) -> _proof[0]
TMP_730(bool) = REF_425 == L
REF_426(None) -> _proof[1]
TMP_731(bool) = REF_426 == P
TMP_732(bool) = TMP_730 && TMP_731
REF_427(None) -> _proof[2]
TMP_733(bool) = REF_427 == 1
TMP_734(bool) = TMP_732 && TMP_733
TMP_735(None) = SOLIDITY_CALL require(bool)(TMP_734)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_736 = CONVERT _result to bytes
TMP_737(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_738(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_736,TMP_737)
proofVerified(bool) := TMP_738(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(proofVerified)

IRs:
TMP_739(None) = SOLIDITY_CALL require(bool)(proofVerified)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9428.sol-usingOraclize-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_625(uint256) = 3 + 65
TMP_626(uint256) = 3 + 65
TMP_627(uint256) = TMP_626 + 1
REF_410(None) -> proof[TMP_627]
TMP_628 = CONVERT REF_410 to uint256
TMP_629(uint256) = TMP_628 + 2
TMP_630(uint256) = TMP_625 + TMP_629
TMP_631(uint256) = TMP_630 + 32
ledgerProofLength(uint256) := TMP_631(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_633 = new bytes(32)
keyhash(bytes) := TMP_633(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_634(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! (keccak256()(keyhash) == keccak256()(sha256()(context_name,queryId)))

IRs:
TMP_635(bytes32) = SOLIDITY_CALL keccak256()(keyhash)
TMP_636(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_637(bytes32) = SOLIDITY_CALL keccak256()(TMP_636)
TMP_638(bool) = TMP_635 == TMP_637
TMP_639 = UnaryType.BANG TMP_638 
CONDITION TMP_639"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_641(uint256) = 32 + 8
TMP_642(uint256) = TMP_641 + 1
TMP_643(uint256) = TMP_642 + 32
TMP_644(uint256) = ledgerProofLength + TMP_643
TMP_645(uint256) = TMP_644 + 1
REF_411(None) -> proof[TMP_645]
TMP_646 = CONVERT REF_411 to uint256
TMP_647(uint256) = TMP_646 + 2
TMP_648 = new bytes(TMP_647)
sig1(bytes) := TMP_648(bytes)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_649(uint256) = 32 + 8
TMP_650(uint256) = TMP_649 + 1
TMP_651(uint256) = TMP_650 + 32
TMP_652(uint256) = ledgerProofLength + TMP_651
REF_412 -> LENGTH sig1
TMP_653(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_652,REF_412,sig1,0)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! matchBytes32Prefix(sha256()(sig1),result,uint256(proof[ledgerProofLength + 32 + 8]))

IRs:
TMP_654(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_655(uint256) = ledgerProofLength + 32
TMP_656(uint256) = TMP_655 + 8
REF_413(None) -> proof[TMP_656]
TMP_657 = CONVERT REF_413 to uint256
TMP_658(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256)(TMP_654,result,TMP_657)
TMP_659 = UnaryType.BANG TMP_658 
CONDITION TMP_659"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_661(uint256) = 8 + 1
TMP_662(uint256) = TMP_661 + 32
TMP_663 = new bytes(TMP_662)
commitmentSlice1(bytes) := TMP_663(bytes)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_664(uint256) = ledgerProofLength + 32
TMP_665(uint256) = 8 + 1
TMP_666(uint256) = TMP_665 + 32
TMP_667(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_664,TMP_666,commitmentSlice1,0)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_669 = new bytes(64)
sessionPubkey(bytes) := TMP_669(bytes)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_670(uint256) = ledgerProofLength + 32
TMP_671(uint256) = 8 + 1
TMP_672(uint256) = TMP_671 + 32
TMP_673(uint256) = TMP_670 + TMP_672
REF_414 -> LENGTH sig1
TMP_674(uint256) = TMP_673 + REF_414
TMP_675(uint256) = TMP_674 + 65
sig2offset(uint256) := TMP_675(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_676(uint256) = sig2offset - 64
TMP_677(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_676,64,sessionPubkey,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_678(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_678(bytes32)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
oraclize_randomDS_args[queryId] == keccak256()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_415(bytes32) -> oraclize_randomDS_args[queryId]
TMP_679(bytes32) = SOLIDITY_CALL keccak256()(commitmentSlice1,sessionPubkeyHash)
TMP_680(bool) = REF_415 == TMP_679
CONDITION TMP_680"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_416(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_416 "];
19->21;
20[label="Node Type: RETURN 20

EXPRESSION:
false

IRs:
RETURN False"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_682(uint256) = 32 + 8
TMP_683(uint256) = TMP_682 + 1
TMP_684(uint256) = TMP_683 + 32
TMP_685 = new bytes(TMP_684)
tosign1(bytes) := TMP_685(bytes)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_686(uint256) = 32 + 8
TMP_687(uint256) = TMP_686 + 1
TMP_688(uint256) = TMP_687 + 32
TMP_689(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_688,tosign1,0)"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
! verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_690(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_691(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_690,sig1,sessionPubkey)
TMP_692 = UnaryType.BANG TMP_691 
CONDITION TMP_692"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: RETURN 25

EXPRESSION:
false

IRs:
RETURN False"];
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: IF 27

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_417(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_693(bool) = REF_417 == False
CONDITION TMP_693"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_418(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_694(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_418(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_694(bool)"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: RETURN 30

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_419(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_419"];
}
// Function: 9428.sol-usingOraclize-oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_404(None) -> _proof[0]
TMP_611(bool) = REF_404 != L
REF_405(None) -> _proof[1]
TMP_612(bool) = REF_405 != P
TMP_613(bool) = TMP_611 || TMP_612
REF_406(None) -> _proof[2]
TMP_614(bool) = REF_406 != 1
TMP_615(bool) = TMP_613 || TMP_614
CONDITION TMP_615"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_616 = CONVERT _result to bytes
TMP_617(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_618(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_616,TMP_617)
proofVerified(bool) := TMP_618(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_619(bool) = proofVerified == False
CONDITION TMP_619"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
2

IRs:
RETURN 2"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 9428.sol-usingOraclize-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_576(uint256) = sig2offset + 1
REF_398(None) -> proof[TMP_576]
TMP_577 = CONVERT REF_398 to uint256
TMP_578(uint256) = TMP_577 + 2
TMP_579 = new bytes(TMP_578)
sig2(bytes) := TMP_579(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_399 -> LENGTH sig2
TMP_580(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_399,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_582 = new bytes(64)
appkey1_pubkey(bytes) := TMP_582(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_583(uint256) = 3 + 1
TMP_584(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_583,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_586(uint256) = 1 + 65
TMP_587(uint256) = TMP_586 + 32
TMP_588 = new bytes(TMP_587)
tosign2(bytes) := TMP_588(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = bytes1(1)

IRs:
REF_400(bytes1) -> tosign2[0]
TMP_589 = CONVERT 1 to bytes1
REF_400(bytes1) (->tosign2) := TMP_589(bytes1)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_590(uint256) = sig2offset - 65
TMP_591(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_590,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_592(uint256) = 1 + 65
TMP_593(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_592)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_594(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_595(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_594,sig2,appkey1_pubkey)
sigok(bool) := TMP_595(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_596(bool) = sigok == False
CONDITION TMP_596"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_598(uint256) = 1 + 65
TMP_599 = new bytes(TMP_598)
tosign3(bytes) := TMP_599(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_401(uint256) -> tosign3[0]
REF_401(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_600(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_602(uint256) = 3 + 65
TMP_603(uint256) = TMP_602 + 1
REF_402(None) -> proof[TMP_603]
TMP_604 = CONVERT REF_402 to uint256
TMP_605(uint256) = TMP_604 + 2
TMP_606 = new bytes(TMP_605)
sig3(bytes) := TMP_606(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_607(uint256) = 3 + 65
REF_403 -> LENGTH sig3
TMP_608(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_607,REF_403,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_609(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_610(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_609,sig3,LEDGERKEY)
sigok(bool) := TMP_610(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 9428.sol-usingOraclize-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_randomDS_args[queryId] = commitment

IRs:
REF_395(bytes32) -> oraclize_randomDS_args[queryId]
REF_395(bytes32) (->oraclize_randomDS_args) := commitment(bytes32)"];
}
// Function: 9428.sol-usingOraclize-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_394"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9428.sol-usingOraclize-oraclize_setNetwork()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_78(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_79(bool) = TMP_78 > 0
CONDITION TMP_79"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_80 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_80(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_82(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_83(bool) = TMP_82 > 0
CONDITION TMP_83"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_84 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_84(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_86(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_87(bool) = TMP_86 > 0
CONDITION TMP_87"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_88 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_88(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_90(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_91(bool) = TMP_90 > 0
CONDITION TMP_91"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_92 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_92(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_94(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_95(bool) = TMP_94 > 0
CONDITION TMP_95"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_96 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_96(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_97(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_98(bool) = TMP_97 > 0
CONDITION TMP_98"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_99 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_99(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_100(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_101(bool) = TMP_100 > 0
CONDITION TMP_101"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_102 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_102(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 9428.sol-usingOraclize-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_setNetwork()

IRs:
TMP_77(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork()()
RETURN TMP_77"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
networkID
"];
}
// Function: 9428.sol-usingOraclize-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 9428.sol-usingOraclize-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_392"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9428.sol-usingOraclize-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_398 = CONVERT _a to bytes
tmp(bytes) := TMP_398(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_399(uint256) = 2 * 20
TMP_400(uint256) = 2 + TMP_399
TMP_401(bool) = i < TMP_400
CONDITION TMP_401"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_325(None) -> tmp[i]
TMP_402 = CONVERT REF_325 to uint160
b1(uint160) := TMP_402(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_403(uint256) = i + 1
REF_326(None) -> tmp[TMP_403]
TMP_404 = CONVERT REF_326 to uint160
b2(uint160) := TMP_404(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_405(bool) = b1 >= 97
TMP_406(bool) = b1 <= 102
TMP_407(bool) = TMP_405 && TMP_406
CONDITION TMP_407"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_408(bool) = b1 >= 65
TMP_409(bool) = b1 <= 70
TMP_410(bool) = TMP_408 && TMP_409
CONDITION TMP_410"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_411(bool) = b1 >= 48
TMP_412(bool) = b1 <= 57
TMP_413(bool) = TMP_411 && TMP_412
CONDITION TMP_413"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_414(bool) = b2 >= 97
TMP_415(bool) = b2 <= 102
TMP_416(bool) = TMP_414 && TMP_415
CONDITION TMP_416"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_417(bool) = b2 >= 65
TMP_418(bool) = b2 <= 70
TMP_419(bool) = TMP_417 && TMP_418
CONDITION TMP_419"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_420(bool) = b2 >= 48
TMP_421(bool) = b2 <= 57
TMP_422(bool) = TMP_420 && TMP_421
CONDITION TMP_422"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_423(uint160) = b1 * 16
TMP_424(uint160) = TMP_423 + b2
iaddr(uint160) = iaddr + TMP_424"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_425 = CONVERT iaddr to address
RETURN TMP_425"];
}
// Function: 9428.sol-usingOraclize-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_494(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_494"];
}
// Function: 9428.sol-usingOraclize-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_495 = CONVERT _a to bytes
bresult(bytes) := TMP_495(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_371 -> LENGTH bresult
TMP_496(bool) = i < REF_371
CONDITION TMP_496"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_372(None) -> bresult[i]
TMP_497(bool) = REF_372 >= 48
REF_373(None) -> bresult[i]
TMP_498(bool) = REF_373 <= 57
TMP_499(bool) = TMP_497 && TMP_498
CONDITION TMP_499"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_500(bool) = _b == 0
CONDITION TMP_500"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_501(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_374(None) -> bresult[i]
TMP_502 = CONVERT REF_374 to uint256
TMP_503(uint256) = TMP_502 - 48
mint(uint256) = mint + TMP_503"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_375(None) -> bresult[i]
TMP_504(bool) = REF_375 == 46
CONDITION TMP_504"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_505(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_506(bool) = _b > 0
CONDITION TMP_506"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_507(uint256) = 10 ** _b
mint(uint256) = mint * TMP_507"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 9428.sol-usingOraclize-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 9428.sol-usingOraclize-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_708(uint256) = 60 * 60
TMP_709(uint256) = TMP_708 * 24
day(uint256) := TMP_709(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_710(uint256) = 60 * 60
TMP_711(uint256) = TMP_710 * 24
TMP_712(uint256) = TMP_711 * 7
week(uint256) := TMP_712(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_713(uint256) = 60 * 60
TMP_714(uint256) = TMP_713 * 24
TMP_715(uint256) = TMP_714 * 30
month(uint256) := TMP_715(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
}
// Function: 9428.sol-usingOraclize-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_426 = CONVERT _a to bytes
a(bytes) := TMP_426(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_427 = CONVERT _b to bytes
b(bytes) := TMP_427(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_327 -> LENGTH a
minLength(uint256) := REF_327(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_328 -> LENGTH b
TMP_428(bool) = REF_328 < minLength
CONDITION TMP_428"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_329 -> LENGTH b
minLength(uint256) := REF_329(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_429(bool) = i < minLength
CONDITION TMP_429"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_330(None) -> a[i]
REF_331(None) -> b[i]
TMP_430(bool) = REF_330 < REF_331
CONDITION TMP_430"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_431(uint256) = 0 - 1
RETURN TMP_431"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_332(None) -> a[i]
REF_333(None) -> b[i]
TMP_432(bool) = REF_332 > REF_333
CONDITION TMP_432"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_433(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_334 -> LENGTH a
REF_335 -> LENGTH b
TMP_434(bool) = REF_334 < REF_335
CONDITION TMP_434"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_435(uint256) = 0 - 1
RETURN TMP_435"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_336 -> LENGTH a
REF_337 -> LENGTH b
TMP_436(bool) = REF_336 > REF_337
CONDITION TMP_436"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 9428.sol-usingOraclize-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_493(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_493"];
}
// Function: 9428.sol-usingOraclize-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_492(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_492"];
}
// Function: 9428.sol-usingOraclize-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_491(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_491"];
}
// Function: 9428.sol-usingOraclize-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_463 = CONVERT _a to bytes
_ba(bytes) := TMP_463(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_464 = CONVERT _b to bytes
_bb(bytes) := TMP_464(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_465 = CONVERT _c to bytes
_bc(bytes) := TMP_465(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_466 = CONVERT _d to bytes
_bd(bytes) := TMP_466(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_467 = CONVERT _e to bytes
_be(bytes) := TMP_467(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_351 -> LENGTH _ba
REF_352 -> LENGTH _bb
TMP_469(uint256) = REF_351 + REF_352
REF_353 -> LENGTH _bc
TMP_470(uint256) = TMP_469 + REF_353
REF_354 -> LENGTH _bd
TMP_471(uint256) = TMP_470 + REF_354
REF_355 -> LENGTH _be
TMP_472(uint256) = TMP_471 + REF_355
TMP_473 = new string(TMP_472)
abcde(string) := TMP_473(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_474 = CONVERT abcde to bytes
babcde(bytes) := TMP_474(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_356 -> LENGTH _ba
TMP_475(bool) = i < REF_356
CONDITION TMP_475"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_476(uint256) := k(uint256)
k(uint256) = k + 1
REF_357(None) -> babcde[TMP_476]
REF_358(None) -> _ba[i]
REF_357(None) (->babcde) := REF_358(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_477(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_359 -> LENGTH _bb
TMP_478(bool) = i < REF_359
CONDITION TMP_478"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_479(uint256) := k(uint256)
k(uint256) = k + 1
REF_360(None) -> babcde[TMP_479]
REF_361(None) -> _bb[i]
REF_360(None) (->babcde) := REF_361(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_480(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_362 -> LENGTH _bc
TMP_481(bool) = i < REF_362
CONDITION TMP_481"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_482(uint256) := k(uint256)
k(uint256) = k + 1
REF_363(None) -> babcde[TMP_482]
REF_364(None) -> _bc[i]
REF_363(None) (->babcde) := REF_364(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_483(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_365 -> LENGTH _bd
TMP_484(bool) = i < REF_365
CONDITION TMP_484"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_485(uint256) := k(uint256)
k(uint256) = k + 1
REF_366(None) -> babcde[TMP_485]
REF_367(None) -> _bd[i]
REF_366(None) (->babcde) := REF_367(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_486(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_368 -> LENGTH _be
TMP_487(bool) = i < REF_368
CONDITION TMP_487"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_488(uint256) := k(uint256)
k(uint256) = k + 1
REF_369(None) -> babcde[TMP_488]
REF_370(None) -> _be[i]
REF_369(None) (->babcde) := REF_370(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_489(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_490 = CONVERT babcde to string
RETURN TMP_490"];
}
// Function: 9428.sol-usingOraclize-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Buffer.init(buf,1024)

IRs:
LIBRARY_CALL, dest:Buffer, function:Buffer.init(Buffer.buffer,uint256), arguments:['buf', '1024'] "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buf.startArray()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.startArray(Buffer.buffer), arguments:['buf'] "];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arr.length

IRs:
REF_379 -> LENGTH arr
TMP_522(bool) = i < REF_379
CONDITION TMP_522"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
buf.encodeString(arr[i])

IRs:
REF_381(string) -> arr[i]
LIBRARY_CALL, dest:CBOR, function:CBOR.encodeString(Buffer.buffer,string), arguments:['buf', 'REF_381'] "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_524(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buf.endSequence()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.endSequence(Buffer.buffer), arguments:['buf'] "];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
buf.buf

IRs:
REF_383(bytes) -> buf.buf
RETURN REF_383"];
}
// Function: 9428.sol-usingOraclize-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_508(bool) = i == 0
CONDITION TMP_508"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_509(bool) = j != 0
CONDITION TMP_509"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_510(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_512 = new bytes(len)
bstr(bytes) := TMP_512(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_513(uint256) = len - 1
k(uint256) := TMP_513(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_514(bool) = i != 0
CONDITION TMP_514"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_515(uint256) := k(uint256)
k(uint256) = k - 1
REF_376(bytes1) -> bstr[TMP_515]
TMP_516(uint256) = i % 10
TMP_517(uint256) = 48 + TMP_516
TMP_518 = CONVERT TMP_517 to bytes1
REF_376(bytes1) (->bstr) := TMP_518(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_519 = CONVERT bstr to string
RETURN TMP_519"];
}
// Function: 9428.sol-usingOraclize-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_556 = new bytes(32)
sigr_(bytes) := TMP_556(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_396(None) -> dersig[3]
TMP_557 = CONVERT REF_396 to uint256
TMP_558(uint256) = TMP_557 - 32
TMP_559(uint256) = 4 + TMP_558
offset(uint256) := TMP_559(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_560(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_560(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_562 = new bytes(32)
sigs_(bytes) := TMP_562(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_563(uint256) = 32 + 2
offset(uint256) = offset + TMP_563"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_564(uint256) = offset - 1
REF_397(None) -> dersig[TMP_564]
TMP_565 = CONVERT REF_397 to uint256
TMP_566(uint256) = TMP_565 - 32
TMP_567(uint256) = offset + TMP_566
TMP_568(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_567,32,sigs_,0)
sigs_(bytes) := TMP_568(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_0(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_0 index: 0 
signer(address)= UNPACK TUPLE_0 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(keccak256()(pubkey)) == signer

IRs:
TMP_569(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_570 = CONVERT TMP_569 to address
TMP_571(bool) = TMP_570 == signer
CONDITION TMP_571"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_1(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_1 index: 0 
signer(address)= UNPACK TUPLE_1 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(keccak256()(pubkey)) == signer)

IRs:
TMP_572(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_573 = CONVERT TMP_572 to address
TMP_574(bool) = TMP_573 == signer
RETURN TMP_574"];
}
}
