digraph G {
// Function: 9445.sol-ADEToken-ADEToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = 36000000000000000

IRs:
totalSupply(uint256) := 36000000000000000(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = ADE Token

IRs:
name(string) := ADE Token(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = ADE

IRs:
symbol(string) := ADE(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
airAmount = 100000000

IRs:
airAmount(uint256) := 100000000(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
airSender = 0x8888888888888888888888888888888888888888

IRs:
airSender(address) := 779467539909814889708631910782017610483164022920(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
airLimitCount = 1

IRs:
airLimitCount(uint256) := 1(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balanceOf[0xf03A4f01713F38EB7d63C6e691C956E8C56630F7] = 3600000000000000

IRs:
REF_142(uint256) -> balanceOf[1371458110580638270636732581372784688201585799415]
REF_142(uint256) (->balanceOf) := 3600000000000000(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(address(0),0xf03A4f01713F38EB7d63C6e691C956E8C56630F7,3600000000000000)

IRs:
TMP_178 = CONVERT 0 to address
Emit Transfer(TMP_178,1371458110580638270636732581372784688201585799415,3600000000000000)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
lockedAddresses[0xf03A4f01713F38EB7d63C6e691C956E8C56630F7].push(LockMeta({remain:3600000000000000,endtime:1559923200}))

IRs:
REF_143(LockToken.LockMeta[]) -> lockedAddresses[1371458110580638270636732581372784688201585799415]
TMP_180(LockToken.LockMeta) = new LockMeta(3600000000000000,1559923200)
REF_145 -> LENGTH REF_143
TMP_182(uint256) := REF_145(uint256)
TMP_183(uint256) = TMP_182 + 1
REF_145(uint256) (->lockedAddresses) := TMP_183(uint256)
REF_146(LockToken.LockMeta) -> REF_143[TMP_182]
REF_146(LockToken.LockMeta) (->lockedAddresses) := TMP_180(LockToken.LockMeta)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
lockedAddresses[0xf03A4f01713F38EB7d63C6e691C956E8C56630F7].push(LockMeta({remain:3240000000000000,endtime:1562515200}))

IRs:
REF_147(LockToken.LockMeta[]) -> lockedAddresses[1371458110580638270636732581372784688201585799415]
TMP_184(LockToken.LockMeta) = new LockMeta(3240000000000000,1562515200)
REF_149 -> LENGTH REF_147
TMP_186(uint256) := REF_149(uint256)
TMP_187(uint256) = TMP_186 + 1
REF_149(uint256) (->lockedAddresses) := TMP_187(uint256)
REF_150(LockToken.LockMeta) -> REF_147[TMP_186]
REF_150(LockToken.LockMeta) (->lockedAddresses) := TMP_184(LockToken.LockMeta)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
lockedAddresses[0xf03A4f01713F38EB7d63C6e691C956E8C56630F7].push(LockMeta({remain:2880000000000000,endtime:1565193600}))

IRs:
REF_151(LockToken.LockMeta[]) -> lockedAddresses[1371458110580638270636732581372784688201585799415]
TMP_188(LockToken.LockMeta) = new LockMeta(2880000000000000,1565193600)
REF_153 -> LENGTH REF_151
TMP_190(uint256) := REF_153(uint256)
TMP_191(uint256) = TMP_190 + 1
REF_153(uint256) (->lockedAddresses) := TMP_191(uint256)
REF_154(LockToken.LockMeta) -> REF_151[TMP_190]
REF_154(LockToken.LockMeta) (->lockedAddresses) := TMP_188(LockToken.LockMeta)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
lockedAddresses[0xf03A4f01713F38EB7d63C6e691C956E8C56630F7].push(LockMeta({remain:2520000000000000,endtime:1567872000}))

IRs:
REF_155(LockToken.LockMeta[]) -> lockedAddresses[1371458110580638270636732581372784688201585799415]
TMP_192(LockToken.LockMeta) = new LockMeta(2520000000000000,1567872000)
REF_157 -> LENGTH REF_155
TMP_194(uint256) := REF_157(uint256)
TMP_195(uint256) = TMP_194 + 1
REF_157(uint256) (->lockedAddresses) := TMP_195(uint256)
REF_158(LockToken.LockMeta) -> REF_155[TMP_194]
REF_158(LockToken.LockMeta) (->lockedAddresses) := TMP_192(LockToken.LockMeta)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
lockedAddresses[0xf03A4f01713F38EB7d63C6e691C956E8C56630F7].push(LockMeta({remain:2160000000000000,endtime:1570464000}))

IRs:
REF_159(LockToken.LockMeta[]) -> lockedAddresses[1371458110580638270636732581372784688201585799415]
TMP_196(LockToken.LockMeta) = new LockMeta(2160000000000000,1570464000)
REF_161 -> LENGTH REF_159
TMP_198(uint256) := REF_161(uint256)
TMP_199(uint256) = TMP_198 + 1
REF_161(uint256) (->lockedAddresses) := TMP_199(uint256)
REF_162(LockToken.LockMeta) -> REF_159[TMP_198]
REF_162(LockToken.LockMeta) (->lockedAddresses) := TMP_196(LockToken.LockMeta)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
lockedAddresses[0xf03A4f01713F38EB7d63C6e691C956E8C56630F7].push(LockMeta({remain:1800000000000000,endtime:1573142400}))

IRs:
REF_163(LockToken.LockMeta[]) -> lockedAddresses[1371458110580638270636732581372784688201585799415]
TMP_200(LockToken.LockMeta) = new LockMeta(1800000000000000,1573142400)
REF_165 -> LENGTH REF_163
TMP_202(uint256) := REF_165(uint256)
TMP_203(uint256) = TMP_202 + 1
REF_165(uint256) (->lockedAddresses) := TMP_203(uint256)
REF_166(LockToken.LockMeta) -> REF_163[TMP_202]
REF_166(LockToken.LockMeta) (->lockedAddresses) := TMP_200(LockToken.LockMeta)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
lockedAddresses[0xf03A4f01713F38EB7d63C6e691C956E8C56630F7].push(LockMeta({remain:1440000000000000,endtime:1575734400}))

IRs:
REF_167(LockToken.LockMeta[]) -> lockedAddresses[1371458110580638270636732581372784688201585799415]
TMP_204(LockToken.LockMeta) = new LockMeta(1440000000000000,1575734400)
REF_169 -> LENGTH REF_167
TMP_206(uint256) := REF_169(uint256)
TMP_207(uint256) = TMP_206 + 1
REF_169(uint256) (->lockedAddresses) := TMP_207(uint256)
REF_170(LockToken.LockMeta) -> REF_167[TMP_206]
REF_170(LockToken.LockMeta) (->lockedAddresses) := TMP_204(LockToken.LockMeta)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
lockedAddresses[0xf03A4f01713F38EB7d63C6e691C956E8C56630F7].push(LockMeta({remain:1080000000000000,endtime:1578412800}))

IRs:
REF_171(LockToken.LockMeta[]) -> lockedAddresses[1371458110580638270636732581372784688201585799415]
TMP_208(LockToken.LockMeta) = new LockMeta(1080000000000000,1578412800)
REF_173 -> LENGTH REF_171
TMP_210(uint256) := REF_173(uint256)
TMP_211(uint256) = TMP_210 + 1
REF_173(uint256) (->lockedAddresses) := TMP_211(uint256)
REF_174(LockToken.LockMeta) -> REF_171[TMP_210]
REF_174(LockToken.LockMeta) (->lockedAddresses) := TMP_208(LockToken.LockMeta)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
lockedAddresses[0xf03A4f01713F38EB7d63C6e691C956E8C56630F7].push(LockMeta({remain:720000000000000,endtime:1581091200}))

IRs:
REF_175(LockToken.LockMeta[]) -> lockedAddresses[1371458110580638270636732581372784688201585799415]
TMP_212(LockToken.LockMeta) = new LockMeta(720000000000000,1581091200)
REF_177 -> LENGTH REF_175
TMP_214(uint256) := REF_177(uint256)
TMP_215(uint256) = TMP_214 + 1
REF_177(uint256) (->lockedAddresses) := TMP_215(uint256)
REF_178(LockToken.LockMeta) -> REF_175[TMP_214]
REF_178(LockToken.LockMeta) (->lockedAddresses) := TMP_212(LockToken.LockMeta)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
lockedAddresses[0xf03A4f01713F38EB7d63C6e691C956E8C56630F7].push(LockMeta({remain:360000000000000,endtime:1583596800}))

IRs:
REF_179(LockToken.LockMeta[]) -> lockedAddresses[1371458110580638270636732581372784688201585799415]
TMP_216(LockToken.LockMeta) = new LockMeta(360000000000000,1583596800)
REF_181 -> LENGTH REF_179
TMP_218(uint256) := REF_181(uint256)
TMP_219(uint256) = TMP_218 + 1
REF_181(uint256) (->lockedAddresses) := TMP_219(uint256)
REF_182(LockToken.LockMeta) -> REF_179[TMP_218]
REF_182(LockToken.LockMeta) (->lockedAddresses) := TMP_216(LockToken.LockMeta)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
balanceOf[0x76d2dbf2b1e589ff28EcC9203EA781f490696d20] = 3600000000000000

IRs:
REF_183(uint256) -> balanceOf[678363227624321535220854630311981856316444994848]
REF_183(uint256) (->balanceOf) := 3600000000000000(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Transfer(address(0),0x76d2dbf2b1e589ff28EcC9203EA781f490696d20,3600000000000000)

IRs:
TMP_220 = CONVERT 0 to address
Emit Transfer(TMP_220,678363227624321535220854630311981856316444994848,3600000000000000)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
lockedAddresses[0x76d2dbf2b1e589ff28EcC9203EA781f490696d20].push(LockMeta({remain:3600000000000000,endtime:1544198400}))

IRs:
REF_184(LockToken.LockMeta[]) -> lockedAddresses[678363227624321535220854630311981856316444994848]
TMP_222(LockToken.LockMeta) = new LockMeta(3600000000000000,1544198400)
REF_186 -> LENGTH REF_184
TMP_224(uint256) := REF_186(uint256)
TMP_225(uint256) = TMP_224 + 1
REF_186(uint256) (->lockedAddresses) := TMP_225(uint256)
REF_187(LockToken.LockMeta) -> REF_184[TMP_224]
REF_187(LockToken.LockMeta) (->lockedAddresses) := TMP_222(LockToken.LockMeta)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
lockedAddresses[0x76d2dbf2b1e589ff28EcC9203EA781f490696d20].push(LockMeta({remain:3240000000000000,endtime:1546876800}))

IRs:
REF_188(LockToken.LockMeta[]) -> lockedAddresses[678363227624321535220854630311981856316444994848]
TMP_226(LockToken.LockMeta) = new LockMeta(3240000000000000,1546876800)
REF_190 -> LENGTH REF_188
TMP_228(uint256) := REF_190(uint256)
TMP_229(uint256) = TMP_228 + 1
REF_190(uint256) (->lockedAddresses) := TMP_229(uint256)
REF_191(LockToken.LockMeta) -> REF_188[TMP_228]
REF_191(LockToken.LockMeta) (->lockedAddresses) := TMP_226(LockToken.LockMeta)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
lockedAddresses[0x76d2dbf2b1e589ff28EcC9203EA781f490696d20].push(LockMeta({remain:2880000000000000,endtime:1549555200}))

IRs:
REF_192(LockToken.LockMeta[]) -> lockedAddresses[678363227624321535220854630311981856316444994848]
TMP_230(LockToken.LockMeta) = new LockMeta(2880000000000000,1549555200)
REF_194 -> LENGTH REF_192
TMP_232(uint256) := REF_194(uint256)
TMP_233(uint256) = TMP_232 + 1
REF_194(uint256) (->lockedAddresses) := TMP_233(uint256)
REF_195(LockToken.LockMeta) -> REF_192[TMP_232]
REF_195(LockToken.LockMeta) (->lockedAddresses) := TMP_230(LockToken.LockMeta)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
lockedAddresses[0x76d2dbf2b1e589ff28EcC9203EA781f490696d20].push(LockMeta({remain:2520000000000000,endtime:1551974400}))

IRs:
REF_196(LockToken.LockMeta[]) -> lockedAddresses[678363227624321535220854630311981856316444994848]
TMP_234(LockToken.LockMeta) = new LockMeta(2520000000000000,1551974400)
REF_198 -> LENGTH REF_196
TMP_236(uint256) := REF_198(uint256)
TMP_237(uint256) = TMP_236 + 1
REF_198(uint256) (->lockedAddresses) := TMP_237(uint256)
REF_199(LockToken.LockMeta) -> REF_196[TMP_236]
REF_199(LockToken.LockMeta) (->lockedAddresses) := TMP_234(LockToken.LockMeta)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
lockedAddresses[0x76d2dbf2b1e589ff28EcC9203EA781f490696d20].push(LockMeta({remain:2160000000000000,endtime:1554652800}))

IRs:
REF_200(LockToken.LockMeta[]) -> lockedAddresses[678363227624321535220854630311981856316444994848]
TMP_238(LockToken.LockMeta) = new LockMeta(2160000000000000,1554652800)
REF_202 -> LENGTH REF_200
TMP_240(uint256) := REF_202(uint256)
TMP_241(uint256) = TMP_240 + 1
REF_202(uint256) (->lockedAddresses) := TMP_241(uint256)
REF_203(LockToken.LockMeta) -> REF_200[TMP_240]
REF_203(LockToken.LockMeta) (->lockedAddresses) := TMP_238(LockToken.LockMeta)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
lockedAddresses[0x76d2dbf2b1e589ff28EcC9203EA781f490696d20].push(LockMeta({remain:1800000000000000,endtime:1557244800}))

IRs:
REF_204(LockToken.LockMeta[]) -> lockedAddresses[678363227624321535220854630311981856316444994848]
TMP_242(LockToken.LockMeta) = new LockMeta(1800000000000000,1557244800)
REF_206 -> LENGTH REF_204
TMP_244(uint256) := REF_206(uint256)
TMP_245(uint256) = TMP_244 + 1
REF_206(uint256) (->lockedAddresses) := TMP_245(uint256)
REF_207(LockToken.LockMeta) -> REF_204[TMP_244]
REF_207(LockToken.LockMeta) (->lockedAddresses) := TMP_242(LockToken.LockMeta)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
lockedAddresses[0x76d2dbf2b1e589ff28EcC9203EA781f490696d20].push(LockMeta({remain:1440000000000000,endtime:1559923200}))

IRs:
REF_208(LockToken.LockMeta[]) -> lockedAddresses[678363227624321535220854630311981856316444994848]
TMP_246(LockToken.LockMeta) = new LockMeta(1440000000000000,1559923200)
REF_210 -> LENGTH REF_208
TMP_248(uint256) := REF_210(uint256)
TMP_249(uint256) = TMP_248 + 1
REF_210(uint256) (->lockedAddresses) := TMP_249(uint256)
REF_211(LockToken.LockMeta) -> REF_208[TMP_248]
REF_211(LockToken.LockMeta) (->lockedAddresses) := TMP_246(LockToken.LockMeta)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
lockedAddresses[0x76d2dbf2b1e589ff28EcC9203EA781f490696d20].push(LockMeta({remain:1080000000000000,endtime:1562515200}))

IRs:
REF_212(LockToken.LockMeta[]) -> lockedAddresses[678363227624321535220854630311981856316444994848]
TMP_250(LockToken.LockMeta) = new LockMeta(1080000000000000,1562515200)
REF_214 -> LENGTH REF_212
TMP_252(uint256) := REF_214(uint256)
TMP_253(uint256) = TMP_252 + 1
REF_214(uint256) (->lockedAddresses) := TMP_253(uint256)
REF_215(LockToken.LockMeta) -> REF_212[TMP_252]
REF_215(LockToken.LockMeta) (->lockedAddresses) := TMP_250(LockToken.LockMeta)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
lockedAddresses[0x76d2dbf2b1e589ff28EcC9203EA781f490696d20].push(LockMeta({remain:720000000000000,endtime:1565193600}))

IRs:
REF_216(LockToken.LockMeta[]) -> lockedAddresses[678363227624321535220854630311981856316444994848]
TMP_254(LockToken.LockMeta) = new LockMeta(720000000000000,1565193600)
REF_218 -> LENGTH REF_216
TMP_256(uint256) := REF_218(uint256)
TMP_257(uint256) = TMP_256 + 1
REF_218(uint256) (->lockedAddresses) := TMP_257(uint256)
REF_219(LockToken.LockMeta) -> REF_216[TMP_256]
REF_219(LockToken.LockMeta) (->lockedAddresses) := TMP_254(LockToken.LockMeta)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
lockedAddresses[0x76d2dbf2b1e589ff28EcC9203EA781f490696d20].push(LockMeta({remain:360000000000000,endtime:1567872000}))

IRs:
REF_220(LockToken.LockMeta[]) -> lockedAddresses[678363227624321535220854630311981856316444994848]
TMP_258(LockToken.LockMeta) = new LockMeta(360000000000000,1567872000)
REF_222 -> LENGTH REF_220
TMP_260(uint256) := REF_222(uint256)
TMP_261(uint256) = TMP_260 + 1
REF_222(uint256) (->lockedAddresses) := TMP_261(uint256)
REF_223(LockToken.LockMeta) -> REF_220[TMP_260]
REF_223(LockToken.LockMeta) (->lockedAddresses) := TMP_258(LockToken.LockMeta)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
balanceOf[0x62d545CD7e67abA36e92c46cfA764c0f1626A9Ae] = 3600000000000000

IRs:
REF_224(uint256) -> balanceOf[564237234941658821639180818393622638188588083630]
REF_224(uint256) (->balanceOf) := 3600000000000000(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
Transfer(address(0),0x62d545CD7e67abA36e92c46cfA764c0f1626A9Ae,3600000000000000)

IRs:
TMP_262 = CONVERT 0 to address
Emit Transfer(TMP_262,564237234941658821639180818393622638188588083630,3600000000000000)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
balanceOf[0x8EaA35b0794ebFD412765DFb2Faa770Abae0f36b] = 10800000000000000

IRs:
REF_225(uint256) -> balanceOf[814472493142831857140668458280893673319184790379]
REF_225(uint256) (->balanceOf) := 10800000000000000(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
Transfer(address(0),0x8EaA35b0794ebFD412765DFb2Faa770Abae0f36b,10800000000000000)

IRs:
TMP_264 = CONVERT 0 to address
Emit Transfer(TMP_264,814472493142831857140668458280893673319184790379,10800000000000000)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
balanceOf[0x8ECeAd3B4c2aD7C4854a42F93A956F5e3CAE9Fd2] = 3564000000000000

IRs:
REF_226(uint256) -> balanceOf[815285733571252144102049988981772434107131666386]
REF_226(uint256) (->balanceOf) := 3564000000000000(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
Transfer(address(0),0x8ECeAd3B4c2aD7C4854a42F93A956F5e3CAE9Fd2,3564000000000000)

IRs:
TMP_266 = CONVERT 0 to address
Emit Transfer(TMP_266,815285733571252144102049988981772434107131666386,3564000000000000)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
lockedAddresses[0x8ECeAd3B4c2aD7C4854a42F93A956F5e3CAE9Fd2].push(LockMeta({remain:1663200000000000,endtime:1536336000}))

IRs:
REF_227(LockToken.LockMeta[]) -> lockedAddresses[815285733571252144102049988981772434107131666386]
TMP_268(LockToken.LockMeta) = new LockMeta(1663200000000000,1536336000)
REF_229 -> LENGTH REF_227
TMP_270(uint256) := REF_229(uint256)
TMP_271(uint256) = TMP_270 + 1
REF_229(uint256) (->lockedAddresses) := TMP_271(uint256)
REF_230(LockToken.LockMeta) -> REF_227[TMP_270]
REF_230(LockToken.LockMeta) (->lockedAddresses) := TMP_268(LockToken.LockMeta)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
lockedAddresses[0x8ECeAd3B4c2aD7C4854a42F93A956F5e3CAE9Fd2].push(LockMeta({remain:1188000000000000,endtime:1544198400}))

IRs:
REF_231(LockToken.LockMeta[]) -> lockedAddresses[815285733571252144102049988981772434107131666386]
TMP_272(LockToken.LockMeta) = new LockMeta(1188000000000000,1544198400)
REF_233 -> LENGTH REF_231
TMP_274(uint256) := REF_233(uint256)
TMP_275(uint256) = TMP_274 + 1
REF_233(uint256) (->lockedAddresses) := TMP_275(uint256)
REF_234(LockToken.LockMeta) -> REF_231[TMP_274]
REF_234(LockToken.LockMeta) (->lockedAddresses) := TMP_272(LockToken.LockMeta)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
balanceOf[0xC458A9017d796b2b4b76b416f814E1A8Ce82e310] = 10836000000000000

IRs:
REF_235(uint256) -> balanceOf[1120939379142332017029763742689904583148222735120]
REF_235(uint256) (->balanceOf) := 10836000000000000(uint256)"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
Transfer(address(0),0xC458A9017d796b2b4b76b416f814E1A8Ce82e310,10836000000000000)

IRs:
TMP_276 = CONVERT 0 to address
Emit Transfer(TMP_276,1120939379142332017029763742689904583148222735120,10836000000000000)"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
lockedAddresses[0xC458A9017d796b2b4b76b416f814E1A8Ce82e310].push(LockMeta({remain:2167200000000000,endtime:1536336000}))

IRs:
REF_236(LockToken.LockMeta[]) -> lockedAddresses[1120939379142332017029763742689904583148222735120]
TMP_278(LockToken.LockMeta) = new LockMeta(2167200000000000,1536336000)
REF_238 -> LENGTH REF_236
TMP_280(uint256) := REF_238(uint256)
TMP_281(uint256) = TMP_280 + 1
REF_238(uint256) (->lockedAddresses) := TMP_281(uint256)
REF_239(LockToken.LockMeta) -> REF_236[TMP_280]
REF_239(LockToken.LockMeta) (->lockedAddresses) := TMP_278(LockToken.LockMeta)"];
}
// Function: 9445.sol-ADEToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_132 = CONVERT 0 to address
TMP_133(bool) = _to != TMP_132
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_104(uint256) -> balanceOf[_from]
TMP_135(bool) = REF_104 >= _value
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_value)

IRs:
REF_105(uint256) -> balanceOf[_from]
REF_106(uint256) -> balanceOf[_from]
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_106', '_value'] 
REF_105(uint256) (->balanceOf) := TMP_137(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_value)

IRs:
REF_108(uint256) -> balanceOf[_to]
REF_109(uint256) -> balanceOf[_to]
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_109', '_value'] 
REF_108(uint256) (->balanceOf) := TMP_138(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 9445.sol-ADEToken-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(airAmount > 0)

IRs:
TMP_146(bool) = airAmount > 0
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
airLimitCount > 0 && airCountOf[msg.sender] >= airLimitCount

IRs:
TMP_148(bool) = airLimitCount > 0
REF_120(uint256) -> airCountOf[msg.sender]
TMP_149(bool) = REF_120 >= airLimitCount
TMP_150(bool) = TMP_148 && TMP_149
CONDITION TMP_150"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_151(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_transfer(airSender,msg.sender,airAmount)

IRs:
INTERNAL_CALL, LockToken._transfer(address,address,uint256)(airSender,msg.sender,airAmount)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
airCountOf[msg.sender] = airCountOf[msg.sender].add(1)

IRs:
REF_121(uint256) -> airCountOf[msg.sender]
REF_122(uint256) -> airCountOf[msg.sender]
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_122', '1'] 
REF_121(uint256) (->airCountOf) := TMP_153(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Airdrop(msg.sender,airCountOf[msg.sender],airAmount)

IRs:
REF_124(uint256) -> airCountOf[msg.sender]
Emit Airdrop(msg.sender,REF_124,airAmount)"];
}
// Function: 9445.sol-ADEToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_118(mapping(address => uint256)) -> allowance[msg.sender]
REF_119(uint256) -> REF_118[_spender]
REF_119(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-ADEToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_125(uint256) -> balanceOf[msg.sender]
TMP_165(bool) = REF_125 >= _value
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value)

IRs:
REF_126(uint256) -> balanceOf[msg.sender]
REF_127(uint256) -> balanceOf[msg.sender]
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_127', '_value'] 
REF_126(uint256) (->balanceOf) := TMP_167(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_168(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_168(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-ADEToken-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_130(uint256) -> balanceOf[_from]
TMP_170(bool) = REF_130 >= _value
TMP_171(None) = SOLIDITY_CALL require(bool)(TMP_170)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_131(mapping(address => uint256)) -> allowance[_from]
REF_132(uint256) -> REF_131[msg.sender]
TMP_172(bool) = _value <= REF_132
TMP_173(None) = SOLIDITY_CALL require(bool)(TMP_172)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_value)

IRs:
REF_133(uint256) -> balanceOf[_from]
REF_134(uint256) -> balanceOf[_from]
TMP_174(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_134', '_value'] 
REF_133(uint256) (->balanceOf) := TMP_174(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_136(mapping(address => uint256)) -> allowance[_from]
REF_137(uint256) -> REF_136[msg.sender]
REF_138(mapping(address => uint256)) -> allowance[_from]
REF_139(uint256) -> REF_138[msg.sender]
TMP_175(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_139', '_value'] 
REF_137(uint256) (->allowance) := TMP_175(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_176(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_176(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-ADEToken-changeAirAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
airAmount = newAirAmount

IRs:
airAmount(uint256) := newAirAmount(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9445.sol-ADEToken-changeAirLimitCount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
airLimitCount = newAirLimitCount

IRs:
airLimitCount(uint256) := newAirLimitCount(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9445.sol-ADEToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
airdrop()

IRs:
INTERNAL_CALL, AirdropToken.airdrop()()"];
}
// Function: 9445.sol-ADEToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_283(bool) = msg.sender == owner
TMP_284(None) = SOLIDITY_CALL require(bool)(TMP_283)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9445.sol-ADEToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_163 = CONVERT 0 to address
owner(address) := TMP_163(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9445.sol-ADEToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, LockToken._transfer(address,address,uint256)(msg.sender,_to,_value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-ADEToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_111(mapping(address => uint256)) -> allowance[_from]
REF_112(uint256) -> REF_111[msg.sender]
TMP_141(bool) = _value <= REF_112
TMP_142(None) = SOLIDITY_CALL require(bool)(TMP_141)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_113(mapping(address => uint256)) -> allowance[_from]
REF_114(uint256) -> REF_113[msg.sender]
REF_115(mapping(address => uint256)) -> allowance[_from]
REF_116(uint256) -> REF_115[msg.sender]
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_116', '_value'] 
REF_114(uint256) (->allowance) := TMP_143(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, LockToken._transfer(address,address,uint256)(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-ADEToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_157 = CONVERT 0 to address
TMP_158(bool) = newOwner != TMP_157
TMP_159(None) = SOLIDITY_CALL require(bool)(TMP_158)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9445.sol-AirdropToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_71 = CONVERT 0 to address
TMP_72(bool) = _to != TMP_71
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_49(uint256) -> balanceOf[_from]
TMP_74(bool) = REF_49 >= _value
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_value)

IRs:
REF_50(uint256) -> balanceOf[_from]
REF_51(uint256) -> balanceOf[_from]
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_51', '_value'] 
REF_50(uint256) (->balanceOf) := TMP_76(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_value)

IRs:
REF_53(uint256) -> balanceOf[_to]
REF_54(uint256) -> balanceOf[_to]
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_54', '_value'] 
REF_53(uint256) (->balanceOf) := TMP_77(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 9445.sol-AirdropToken-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(airAmount > 0)

IRs:
TMP_85(bool) = airAmount > 0
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
airLimitCount > 0 && airCountOf[msg.sender] >= airLimitCount

IRs:
TMP_87(bool) = airLimitCount > 0
REF_65(uint256) -> airCountOf[msg.sender]
TMP_88(bool) = REF_65 >= airLimitCount
TMP_89(bool) = TMP_87 && TMP_88
CONDITION TMP_89"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_90(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_transfer(airSender,msg.sender,airAmount)

IRs:
INTERNAL_CALL, BaseToken._transfer(address,address,uint256)(airSender,msg.sender,airAmount)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
airCountOf[msg.sender] = airCountOf[msg.sender].add(1)

IRs:
REF_66(uint256) -> airCountOf[msg.sender]
REF_67(uint256) -> airCountOf[msg.sender]
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_67', '1'] 
REF_66(uint256) (->airCountOf) := TMP_92(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Airdrop(msg.sender,airCountOf[msg.sender],airAmount)

IRs:
REF_69(uint256) -> airCountOf[msg.sender]
Emit Airdrop(msg.sender,REF_69,airAmount)"];
}
// Function: 9445.sol-AirdropToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_63(mapping(address => uint256)) -> allowance[msg.sender]
REF_64(uint256) -> REF_63[_spender]
REF_64(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-AirdropToken-changeAirAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
airAmount = newAirAmount

IRs:
airAmount(uint256) := newAirAmount(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9445.sol-AirdropToken-changeAirLimitCount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
airLimitCount = newAirLimitCount

IRs:
airLimitCount(uint256) := newAirLimitCount(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9445.sol-AirdropToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_96(bool) = msg.sender == owner
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9445.sol-AirdropToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_69 = CONVERT 0 to address
owner(address) := TMP_69(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9445.sol-AirdropToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, BaseToken._transfer(address,address,uint256)(msg.sender,_to,_value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-AirdropToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_56(mapping(address => uint256)) -> allowance[_from]
REF_57(uint256) -> REF_56[msg.sender]
TMP_80(bool) = _value <= REF_57
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_58(mapping(address => uint256)) -> allowance[_from]
REF_59(uint256) -> REF_58[msg.sender]
REF_60(mapping(address => uint256)) -> allowance[_from]
REF_61(uint256) -> REF_60[msg.sender]
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_61', '_value'] 
REF_59(uint256) (->allowance) := TMP_82(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, BaseToken._transfer(address,address,uint256)(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-AirdropToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_63 = CONVERT 0 to address
TMP_64(bool) = newOwner != TMP_63
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9445.sol-BaseToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _to != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_0(uint256) -> balanceOf[_from]
TMP_15(bool) = REF_0 >= _value
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_value)

IRs:
REF_1(uint256) -> balanceOf[_from]
REF_2(uint256) -> balanceOf[_from]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balanceOf) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_value)

IRs:
REF_4(uint256) -> balanceOf[_to]
REF_5(uint256) -> balanceOf[_to]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balanceOf) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 9445.sol-BaseToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_14(mapping(address => uint256)) -> allowance[msg.sender]
REF_15(uint256) -> REF_14[_spender]
REF_15(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-BaseToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, BaseToken._transfer(address,address,uint256)(msg.sender,_to,_value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-BaseToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_7(mapping(address => uint256)) -> allowance[_from]
REF_8(uint256) -> REF_7[msg.sender]
TMP_21(bool) = _value <= REF_8
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_9(mapping(address => uint256)) -> allowance[_from]
REF_10(uint256) -> REF_9[msg.sender]
REF_11(mapping(address => uint256)) -> allowance[_from]
REF_12(uint256) -> REF_11[msg.sender]
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_12', '_value'] 
REF_10(uint256) (->allowance) := TMP_23(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, BaseToken._transfer(address,address,uint256)(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-BurnToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_36 = CONVERT 0 to address
TMP_37(bool) = _to != TMP_36
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_16(uint256) -> balanceOf[_from]
TMP_39(bool) = REF_16 >= _value
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_value)

IRs:
REF_17(uint256) -> balanceOf[_from]
REF_18(uint256) -> balanceOf[_from]
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_18', '_value'] 
REF_17(uint256) (->balanceOf) := TMP_41(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_value)

IRs:
REF_20(uint256) -> balanceOf[_to]
REF_21(uint256) -> balanceOf[_to]
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_21', '_value'] 
REF_20(uint256) (->balanceOf) := TMP_42(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
}
// Function: 9445.sol-BurnToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_30(mapping(address => uint256)) -> allowance[msg.sender]
REF_31(uint256) -> REF_30[_spender]
REF_31(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-BurnToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_32(uint256) -> balanceOf[msg.sender]
TMP_50(bool) = REF_32 >= _value
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value)

IRs:
REF_33(uint256) -> balanceOf[msg.sender]
REF_34(uint256) -> balanceOf[msg.sender]
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_34', '_value'] 
REF_33(uint256) (->balanceOf) := TMP_52(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_53(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-BurnToken-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_37(uint256) -> balanceOf[_from]
TMP_55(bool) = REF_37 >= _value
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_38(mapping(address => uint256)) -> allowance[_from]
REF_39(uint256) -> REF_38[msg.sender]
TMP_57(bool) = _value <= REF_39
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_value)

IRs:
REF_40(uint256) -> balanceOf[_from]
REF_41(uint256) -> balanceOf[_from]
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_41', '_value'] 
REF_40(uint256) (->balanceOf) := TMP_59(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_43(mapping(address => uint256)) -> allowance[_from]
REF_44(uint256) -> REF_43[msg.sender]
REF_45(mapping(address => uint256)) -> allowance[_from]
REF_46(uint256) -> REF_45[msg.sender]
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_46', '_value'] 
REF_44(uint256) (->allowance) := TMP_60(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_61(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-BurnToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, BaseToken._transfer(address,address,uint256)(msg.sender,_to,_value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-BurnToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_23(mapping(address => uint256)) -> allowance[_from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_45(bool) = _value <= REF_24
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_25(mapping(address => uint256)) -> allowance[_from]
REF_26(uint256) -> REF_25[msg.sender]
REF_27(mapping(address => uint256)) -> allowance[_from]
REF_28(uint256) -> REF_27[msg.sender]
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_28', '_value'] 
REF_26(uint256) (->allowance) := TMP_47(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, BaseToken._transfer(address,address,uint256)(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-LockToken-_transfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_86(uint256) -> balanceOf[_from]
TMP_112(bool) = REF_86 >= _value
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
remain = balanceOf[_from].sub(_value)

IRs:
REF_87(uint256) -> balanceOf[_from]
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_87', '_value'] 
remain(uint256) := TMP_114(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
length = lockedAddresses[_from].length

IRs:
REF_89(LockToken.LockMeta[]) -> lockedAddresses[_from]
REF_90 -> LENGTH REF_89
length(uint256) := REF_90(uint256)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->13;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < length

IRs:
TMP_115(bool) = i < length
CONDITION TMP_115"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
meta = lockedAddresses[_from][i]

IRs:
REF_91(LockToken.LockMeta[]) -> lockedAddresses[_from]
REF_92(LockToken.LockMeta) -> REF_91[i]
meta(LockToken.LockMeta) := REF_92(LockToken.LockMeta)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
block.timestamp < meta.endtime && remain < meta.remain

IRs:
REF_93(uint256) -> meta.endtime
TMP_116(bool) = block.timestamp < REF_93
REF_94(uint256) -> meta.remain
TMP_117(bool) = remain < REF_94
TMP_118(bool) = TMP_116 && TMP_117
CONDITION TMP_118"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
revert()()

IRs:
TMP_119(None) = SOLIDITY_CALL revert()()"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_120(uint256) := i(uint256)
i(uint256) = i + 1"];
12->7;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
super._transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, BaseToken._transfer(address,address,uint256)(_from,_to,_value)"];
}
// Function: 9445.sol-LockToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_84(mapping(address => uint256)) -> allowance[msg.sender]
REF_85(uint256) -> REF_84[_spender]
REF_85(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-LockToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,_to,_value)

IRs:
INTERNAL_CALL, LockToken._transfer(address,address,uint256)(msg.sender,_to,_value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-LockToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowance[_from][msg.sender])

IRs:
REF_77(mapping(address => uint256)) -> allowance[_from]
REF_78(uint256) -> REF_77[msg.sender]
TMP_107(bool) = _value <= REF_78
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_79(mapping(address => uint256)) -> allowance[_from]
REF_80(uint256) -> REF_79[msg.sender]
REF_81(mapping(address => uint256)) -> allowance[_from]
REF_82(uint256) -> REF_81[msg.sender]
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_82', '_value'] 
REF_80(uint256) (->allowance) := TMP_109(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, LockToken._transfer(address,address,uint256)(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9445.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_34(bool) = msg.sender == owner
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9445.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipRenounced(owner)

IRs:
Emit OwnershipRenounced(owner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = address(0)

IRs:
TMP_32 = CONVERT 0 to address
owner(address) := TMP_32(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9445.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_26 = CONVERT 0 to address
TMP_27(bool) = newOwner != TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9445.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9445.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 9445.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9445.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
