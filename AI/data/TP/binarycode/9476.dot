digraph G {
// Function: 9476.sol-Token-allowance(address,address)
digraph{
}
// Function: 9476.sol-Token-approve(address,uint256)
digraph{
}
// Function: 9476.sol-Token-balanceOf(address)
digraph{
}
// Function: 9476.sol-Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
}
// Function: 9476.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 9476.sol-Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 9476.sol-WaltonTokenLocker-WaltonTokenLocker()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
beneficiary = address(0x732f589BA0b134DC35454716c4C87A06C890445b)

IRs:
TMP_0 = CONVERT 657589792507597940223159268721791022875265746011 to address
beneficiary(address) := TMP_0(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
releaseTime = 1563379200

IRs:
releaseTime(uint256) := 1563379200(uint256)"];
}
// Function: 9476.sol-WaltonTokenLocker-currentTimestamp()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
block.timestamp

IRs:
RETURN block.timestamp"];
2[label="Node Type: RETURN 2

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
}
// Function: 9476.sol-WaltonTokenLocker-release()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
block.timestamp < releaseTime

IRs:
TMP_1(bool) = block.timestamp < releaseTime
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
totalTokenBalance = token.balanceOf(this)

IRs:
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:token(Token), function:balanceOf, arguments:['this']  
totalTokenBalance(uint256) := TMP_2(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
totalTokenBalance > 0

IRs:
TMP_3(bool) = totalTokenBalance > 0
CONDITION TMP_3"];
5->6[label="True"];
5->9[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
! token.transfer(beneficiary,totalTokenBalance)

IRs:
TMP_4(bool) = HIGH_LEVEL_CALL, dest:token(Token), function:transfer, arguments:['beneficiary', 'totalTokenBalance']  
TMP_5 = UnaryType.BANG TMP_4 
CONDITION TMP_5"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: THROW 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
}
// Function: 9476.sol-WaltonTokenLocker-releaseTimestamp()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
releaseTime

IRs:
RETURN releaseTime"];
2[label="Node Type: RETURN 2

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
}
// Function: 9476.sol-WaltonTokenLocker-secondsRemaining()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
block.timestamp < releaseTime

IRs:
TMP_6(bool) = block.timestamp < releaseTime
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
releaseTime - block.timestamp

IRs:
TMP_7(uint256) = releaseTime - block.timestamp
RETURN TMP_7"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: RETURN 5

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
}
// Function: 9476.sol-WaltonTokenLocker-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = team locker v2

IRs:
name(string) := team locker v2(string)"];
}
// Function: 9476.sol-WaltonTokenLocker-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
token = Token(0xb7cB1C96dB6B22b0D3d9536E0108d062BD488F74)

IRs:
TMP_9 = CONVERT 1049274852814082687312479702772054231713353076596 to Token
token(Token) := TMP_9(Token)"];
}
// Function: 9476.sol-WaltonTokenLocker-tokenLocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
token.balanceOf(this)

IRs:
TMP_8(uint256) = HIGH_LEVEL_CALL, dest:token(Token), function:balanceOf, arguments:['this']  
RETURN TMP_8"];
2[label="Node Type: RETURN 2

EXPRESSION:
amount

IRs:
RETURN amount"];
}
}
