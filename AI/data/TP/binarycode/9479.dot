digraph G {
// Function: 9479.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 9479.sol-BasicToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply_

IRs:
RETURN totalSupply_"];
}
// Function: 9479.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_35 = CONVERT 0 to address
TMP_36(bool) = _to != TMP_35
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_38(bool) = _value <= REF_0
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_40(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_41(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9479.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 9479.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 9479.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 9479.sol-ERC20-totalSupply()
digraph{
}
// Function: 9479.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 9479.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 9479.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 9479.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 9479.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 9479.sol-GeneNuggetsToken-GeneNuggetsToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 9479.sol-GeneNuggetsToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9479.sol-GeneNuggetsToken-addCustomerService(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
CustomerService[cs] = block.timestamp

IRs:
REF_92(uint256) -> CustomerService[cs]
REF_92(uint256) (->CustomerService) := block.timestamp(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCFO()

IRs:
MODIFIER_CALL, GeneNuggetsToken.onlyCFO()()"];
2->1;
}
// Function: 9479.sol-GeneNuggetsToken-allowance(address,address)
digraph{
}
// Function: 9479.sol-GeneNuggetsToken-approve(address,uint256)
digraph{
}
// Function: 9479.sol-GeneNuggetsToken-balanceOf(address)
digraph{
}
// Function: 9479.sol-GeneNuggetsToken-calTotalSupply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenAmount = 0

IRs:
tokenAmount(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->12;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < MINING_LAYERS.length

IRs:
REF_95 -> LENGTH MINING_LAYERS
TMP_124(bool) = i < REF_95
CONDITION TMP_124"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
_userAmount < MINING_LAYERS[i + 1]

IRs:
TMP_125(uint8) = i + 1
REF_96(uint256) -> MINING_LAYERS[TMP_125]
TMP_126(bool) = _userAmount < REF_96
CONDITION TMP_126"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokenAmount = tokenAmount.add(MINING_REWARDS[i].mul(_userAmount.sub(MINING_LAYERS[i])))

IRs:
REF_98(uint256) -> MINING_REWARDS[i]
REF_101(uint256) -> MINING_LAYERS[i]
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_userAmount', 'REF_101'] 
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_98', 'TMP_127'] 
TMP_129(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokenAmount', 'TMP_128'] 
tokenAmount(uint256) := TMP_129(uint256)"];
7->8;
8[label="Node Type: BREAK 8
"];
8->3;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
tokenAmount = tokenAmount.add(MINING_REWARDS[i].mul(MINING_LAYERS[i + 1].sub(MINING_LAYERS[i])))

IRs:
REF_103(uint256) -> MINING_REWARDS[i]
TMP_130(uint8) = i + 1
REF_105(uint256) -> MINING_LAYERS[TMP_130]
REF_107(uint256) -> MINING_LAYERS[i]
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_105', 'REF_107'] 
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_103', 'TMP_131'] 
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokenAmount', 'TMP_132'] 
tokenAmount(uint256) := TMP_133(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_134(uint8) := i(uint8)
i(uint8) = i + 1"];
11->5;
12[label="Node Type: RETURN 12

EXPRESSION:
tokenAmount

IRs:
RETURN tokenAmount"];
13[label="Node Type: RETURN 13

EXPRESSION:
ret

IRs:
RETURN ret"];
}
// Function: 9479.sol-GeneNuggetsToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
oldValue(uint256) := REF_76(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_82(bool) = _subtractedValue > oldValue
CONDITION TMP_82"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
REF_78(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_79(mapping(address => uint256)) -> allowed[msg.sender]
REF_80(uint256) -> REF_79[_spender]
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_80(uint256) (->allowed) := TMP_83(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(uint256) -> REF_82[_spender]
Emit Approval(msg.sender,_spender,REF_83)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9479.sol-GeneNuggetsToken-destory(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _amount && _amount > destroyThreshold && circulatingSupply >= _amount)

IRs:
REF_114(uint256) -> balances[msg.sender]
TMP_149(bool) = REF_114 >= _amount
TMP_150(bool) = _amount > destroyThreshold
TMP_151(bool) = TMP_149 && TMP_150
TMP_152(bool) = circulatingSupply >= _amount
TMP_153(bool) = TMP_151 && TMP_152
TMP_154(None) = SOLIDITY_CALL require(bool)(TMP_153)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
circulatingSupply = circulatingSupply.sub(_amount)

IRs:
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['circulatingSupply', '_amount'] 
circulatingSupply(uint256) := TMP_155(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_amount)

IRs:
REF_116(uint256) -> balances[msg.sender]
REF_117(uint256) -> balances[msg.sender]
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_117', '_amount'] 
REF_116(uint256) (->balances) := TMP_156(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Destory(msg.sender,_amount)

IRs:
Emit Destory(msg.sender,_amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,0x0,_amount)

IRs:
Emit Transfer(msg.sender,0,_amount)"];
}
// Function: 9479.sol-GeneNuggetsToken-emergencyERC20Drain(ERC20,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token.transfer(owner,amount)

IRs:
TMP_159(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['owner', 'amount']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9479.sol-GeneNuggetsToken-exchange(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((block.timestamp - CustomerService[msg.sender]) > exchangeInterval)

IRs:
REF_108(uint256) -> CustomerService[msg.sender]
TMP_135(uint256) = block.timestamp - REF_108
TMP_136(bool) = TMP_135 > exchangeInterval
TMP_137(None) = SOLIDITY_CALL require(bool)(TMP_136)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= exchangeLimit && _amount >= exchangeThreshold)

IRs:
TMP_138(bool) = _amount <= exchangeLimit
TMP_139(bool) = _amount >= exchangeThreshold
TMP_140(bool) = TMP_138 && TMP_139
TMP_141(None) = SOLIDITY_CALL require(bool)(TMP_140)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
circulatingSupply = circulatingSupply.add(_amount)

IRs:
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['circulatingSupply', '_amount'] 
circulatingSupply(uint256) := TMP_142(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[user] = balances[user].add(_amount)

IRs:
REF_110(uint256) -> balances[user]
REF_111(uint256) -> balances[user]
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_111', '_amount'] 
REF_110(uint256) (->balances) := TMP_143(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
CustomerService[msg.sender] = block.timestamp

IRs:
REF_113(uint256) -> CustomerService[msg.sender]
REF_113(uint256) (->CustomerService) := block.timestamp(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Exchange(user,_amount)

IRs:
Emit Exchange(user,_amount)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(address(0),user,_amount)

IRs:
TMP_145 = CONVERT 0 to address
Emit Transfer(TMP_145,user,_amount)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyCustomerService()

IRs:
MODIFIER_CALL, GeneNuggetsToken.onlyCustomerService()()"];
9->1;
}
// Function: 9479.sol-GeneNuggetsToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_104(None) = SOLIDITY_CALL revert()()"];
}
// Function: 9479.sol-GeneNuggetsToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
REF_70(mapping(address => uint256)) -> allowed[msg.sender]
REF_71(uint256) -> REF_70[_spender]
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', '_addedValue'] 
REF_69(uint256) (->allowed) := TMP_80(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
Emit Approval(msg.sender,_spender,REF_74)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9479.sol-GeneNuggetsToken-onlyCFO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == CFO)

IRs:
TMP_182(bool) = msg.sender == CFO
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9479.sol-GeneNuggetsToken-onlyCustomerService()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(CustomerService[msg.sender] != 0)

IRs:
REF_120(uint256) -> CustomerService[msg.sender]
TMP_184(bool) = REF_120 != 0
TMP_185(None) = SOLIDITY_CALL require(bool)(TMP_184)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9479.sol-GeneNuggetsToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_180(bool) = msg.sender == owner
TMP_181(None) = SOLIDITY_CALL require(bool)(TMP_180)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9479.sol-GeneNuggetsToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 9479.sol-GeneNuggetsToken-removeCustomerService(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
CustomerService[cs] = 0

IRs:
REF_93(uint256) -> CustomerService[cs]
REF_93(uint256) (->CustomerService) := 0(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCFO()

IRs:
MODIFIER_CALL, GeneNuggetsToken.onlyCFO()()"];
2->1;
}
// Function: 9479.sol-GeneNuggetsToken-setCFO(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
CFO = newCFO

IRs:
CFO(address) := newCFO(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9479.sol-GeneNuggetsToken-setDestroyThreshold(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
destroyThreshold = newThreshold

IRs:
destroyThreshold(uint256) := newThreshold(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCFO()

IRs:
MODIFIER_CALL, GeneNuggetsToken.onlyCFO()()"];
2->1;
}
// Function: 9479.sol-GeneNuggetsToken-setExchangeInterval(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
exchangeInterval = newInterval

IRs:
exchangeInterval(uint256) := newInterval(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCFO()

IRs:
MODIFIER_CALL, GeneNuggetsToken.onlyCFO()()"];
2->1;
}
// Function: 9479.sol-GeneNuggetsToken-setExchangeLimit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
exchangeLimit = newLimit

IRs:
exchangeLimit(uint256) := newLimit(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCFO()

IRs:
MODIFIER_CALL, GeneNuggetsToken.onlyCFO()()"];
2->1;
}
// Function: 9479.sol-GeneNuggetsToken-setExchangeThreshold(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
exchangeThreshold = newThreshold

IRs:
exchangeThreshold(uint256) := newThreshold(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyCFO()

IRs:
MODIFIER_CALL, GeneNuggetsToken.onlyCFO()()"];
2->1;
}
// Function: 9479.sol-GeneNuggetsToken-setName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = newName

IRs:
name(string) := newName(string)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9479.sol-GeneNuggetsToken-setSymbol(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = newSymbol

IRs:
symbol(string) := newSymbol(string)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9479.sol-GeneNuggetsToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Gene Nuggets

IRs:
name(string) := Gene Nuggets(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = GNUS

IRs:
symbol(string) := GNUS(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 6

IRs:
decimals(uint8) := 6(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
decimalFactor = 10 ** uint256(decimals)

IRs:
TMP_161 = CONVERT decimals to uint256
TMP_162(uint256) = 10 ** TMP_161
decimalFactor(uint256) := TMP_162(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
CAP = 30e8 * decimalFactor

IRs:
TMP_163(uint256) = 3000000000 * decimalFactor
CAP(uint256) := TMP_163(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
exchangeLimit = 10000 * decimalFactor

IRs:
TMP_164(uint256) = 10000 * decimalFactor
exchangeLimit(uint256) := TMP_164(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
exchangeThreshold = 2000 * decimalFactor

IRs:
TMP_165(uint256) = 2000 * decimalFactor
exchangeThreshold(uint256) := TMP_165(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
exchangeInterval = 60

IRs:
exchangeInterval(uint256) := 60(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
destroyThreshold = 100 * decimalFactor

IRs:
TMP_166(uint256) = 100 * decimalFactor
destroyThreshold(uint256) := TMP_166(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
MINING_LAYERS = (0,10e4,30e4,100e4,300e4,600e4,1000e4,2000e4,3000e4,2 ** 256 - 1)

IRs:
TMP_167(uint256) = 2 ** 256
TMP_168(uint256) = TMP_167 - 1
MINING_LAYERS(uint256[10]) = ['0(uint256)', '100000(uint256)', '300000(uint256)', '1000000(uint256)', '3000000(uint256)', '6000000(uint256)', '10000000(uint256)', '20000000(uint256)', '30000000(uint256)', 'TMP_168(uint256)']"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
MINING_REWARDS = (1000 * decimalFactor,600 * decimalFactor,300 * decimalFactor,200 * decimalFactor,180 * decimalFactor,160 * decimalFactor,60 * decimalFactor,39 * decimalFactor,0)

IRs:
TMP_169(uint256) = 1000 * decimalFactor
TMP_170(uint256) = 600 * decimalFactor
TMP_171(uint256) = 300 * decimalFactor
TMP_172(uint256) = 200 * decimalFactor
TMP_173(uint256) = 180 * decimalFactor
TMP_174(uint256) = 160 * decimalFactor
TMP_175(uint256) = 60 * decimalFactor
TMP_176(uint256) = 39 * decimalFactor
MINING_REWARDS(uint256[9]) = ['TMP_169(uint256)', 'TMP_170(uint256)', 'TMP_171(uint256)', 'TMP_172(uint256)', 'TMP_173(uint256)', 'TMP_174(uint256)', 'TMP_175(uint256)', 'TMP_176(uint256)', '0(uint256)']"];
}
// Function: 9479.sol-GeneNuggetsToken-totalSupply()
digraph{
}
// Function: 9479.sol-GeneNuggetsToken-transfer(address,uint256)
digraph{
}
// Function: 9479.sol-GeneNuggetsToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 9479.sol-GeneNuggetsToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_99 = CONVERT 0 to address
TMP_100(bool) = newOwner != TMP_99
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9479.sol-GeneNuggetsToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 9479.sol-GeneNuggetsToken-updateTotal(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_userAmount > totalUsers)

IRs:
TMP_114(bool) = _userAmount > totalUsers
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newTotalSupply = calTotalSupply(_userAmount)

IRs:
TMP_116(uint256) = INTERNAL_CALL, GeneNuggetsToken.calTotalSupply(uint256)(_userAmount)
newTotalSupply(uint256) := TMP_116(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(newTotalSupply <= CAP && newTotalSupply > totalSupply_)

IRs:
TMP_117(bool) = newTotalSupply <= CAP
TMP_118(bool) = newTotalSupply > totalSupply_
TMP_119(bool) = TMP_117 && TMP_118
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_amount = newTotalSupply.sub(totalSupply_)

IRs:
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['newTotalSupply', 'totalSupply_'] 
_amount(uint256) := TMP_121(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply_ = newTotalSupply

IRs:
totalSupply_(uint256) := newTotalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalUsers = _userAmount

IRs:
totalUsers(uint256) := _userAmount(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
UpdateTotal(_amount,totalSupply_)

IRs:
Emit UpdateTotal(_amount,totalSupply_)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyCFO()

IRs:
MODIFIER_CALL, GeneNuggetsToken.onlyCFO()()"];
8->1;
}
// Function: 9479.sol-GeneNuggetsToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_177 = UnaryType.BANG paused 
TMP_178(None) = SOLIDITY_CALL require(bool)(TMP_177)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9479.sol-GeneNuggetsToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_179(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9479.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9479.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9479.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9479.sol-Pausable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9479.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_30(bool) = msg.sender == owner
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9479.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 9479.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 9479.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = newOwner != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9479.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 9479.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_32 = UnaryType.BANG paused 
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9479.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_34(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9479.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9479.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9479.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9479.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 9479.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_32(mapping(address => uint256)) -> allowed[_owner]
REF_33(uint256) -> REF_32[_spender]
RETURN REF_33"];
}
// Function: 9479.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_30(mapping(address => uint256)) -> allowed[msg.sender]
REF_31(uint256) -> REF_30[_spender]
REF_31(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9479.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 9479.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_41(mapping(address => uint256)) -> allowed[msg.sender]
REF_42(uint256) -> REF_41[_spender]
oldValue(uint256) := REF_42(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_65(bool) = _subtractedValue > oldValue
CONDITION TMP_65"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_43(mapping(address => uint256)) -> allowed[msg.sender]
REF_44(uint256) -> REF_43[_spender]
REF_44(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_45(mapping(address => uint256)) -> allowed[msg.sender]
REF_46(uint256) -> REF_45[_spender]
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_46(uint256) (->allowed) := TMP_66(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_48(mapping(address => uint256)) -> allowed[msg.sender]
REF_49(uint256) -> REF_48[_spender]
Emit Approval(msg.sender,_spender,REF_49)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9479.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_37', '_addedValue'] 
REF_35(uint256) (->allowed) := TMP_63(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_39(mapping(address => uint256)) -> allowed[msg.sender]
REF_40(uint256) -> REF_39[_spender]
Emit Approval(msg.sender,_spender,REF_40)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9479.sol-StandardToken-totalSupply()
digraph{
}
// Function: 9479.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 9479.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_51 = CONVERT 0 to address
TMP_52(bool) = _to != TMP_51
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[_from])

IRs:
REF_16(uint256) -> balances[_from]
TMP_54(bool) = _value <= REF_16
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_17(mapping(address => uint256)) -> allowed[_from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_56(bool) = _value <= REF_18
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_19(uint256) -> balances[_from]
REF_20(uint256) -> balances[_from]
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_20', '_value'] 
REF_19(uint256) (->balances) := TMP_58(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_22(uint256) -> balances[_to]
REF_23(uint256) -> balances[_to]
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_23', '_value'] 
REF_22(uint256) (->balances) := TMP_59(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
REF_27(mapping(address => uint256)) -> allowed[_from]
REF_28(uint256) -> REF_27[msg.sender]
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_28', '_value'] 
REF_26(uint256) (->allowed) := TMP_60(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
}
