digraph G {
// Function: 9521.sol-Token-allowance(address,address)
digraph{
}
// Function: 9521.sol-Token-approve(address,uint256)
digraph{
}
// Function: 9521.sol-Token-balanceOf(address)
digraph{
}
// Function: 9521.sol-Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
}
// Function: 9521.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 9521.sol-Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 9521.sol-WaltonTokenLocker-WaltonTokenLocker()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
beneficiary = address(0xa43e4646ee8ebd9AD01BFe87995802D984902e25)

IRs:
TMP_0 = CONVERT 937663254614296903083649282260152284594463321637 to address
beneficiary(address) := TMP_0(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
releaseTime = 1563379200

IRs:
releaseTime(uint256) := 1563379200(uint256)"];
}
// Function: 9521.sol-WaltonTokenLocker-currentTimestamp()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
block.timestamp

IRs:
RETURN block.timestamp"];
2[label="Node Type: RETURN 2

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
}
// Function: 9521.sol-WaltonTokenLocker-release()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
block.timestamp < releaseTime

IRs:
TMP_1(bool) = block.timestamp < releaseTime
CONDITION TMP_1"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalTokenBalance = token.balanceOf(this)

IRs:
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:token(Token), function:balanceOf, arguments:['this']  
totalTokenBalance(uint256) := TMP_2(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
totalEthBalance = this.balance

IRs:
REF_1(uint256) = SOLIDITY_CALL balance(address)(this)
totalEthBalance(uint256) := REF_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f05286dcc10>])"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
totalTokenBalance > 0

IRs:
TMP_3(bool) = totalTokenBalance > 0
CONDITION TMP_3"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
! token.transfer(beneficiary,totalTokenBalance)

IRs:
TMP_4(bool) = HIGH_LEVEL_CALL, dest:token(Token), function:transfer, arguments:['beneficiary', 'totalTokenBalance']  
TMP_5 = UnaryType.BANG TMP_4 
CONDITION TMP_5"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: THROW 10
"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
totalEthBalance > 0

IRs:
TMP_6(bool) = totalEthBalance > 0
CONDITION TMP_6"];
13->14[label="True"];
13->17[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
! beneficiary.send(totalEthBalance)

IRs:
TMP_7 = SEND dest:beneficiary value:totalEthBalance
TMP_8 = UnaryType.BANG TMP_7 
CONDITION TMP_8"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
}
// Function: 9521.sol-WaltonTokenLocker-releaseTimestamp()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
releaseTime

IRs:
RETURN releaseTime"];
2[label="Node Type: RETURN 2

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
}
// Function: 9521.sol-WaltonTokenLocker-secondsRemaining()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
releaseTime - block.timestamp

IRs:
TMP_9(uint256) = releaseTime - block.timestamp
RETURN TMP_9"];
2[label="Node Type: RETURN 2

EXPRESSION:
timestamp

IRs:
RETURN timestamp"];
}
// Function: 9521.sol-WaltonTokenLocker-setReleaseTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseTime = _releaseTime

IRs:
releaseTime(uint256) := _releaseTime(uint256)"];
}
// Function: 9521.sol-WaltonTokenLocker-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
token = Token(0xb7cB1C96dB6B22b0D3d9536E0108d062BD488F74)

IRs:
TMP_10 = CONVERT 1049274852814082687312479702772054231713353076596 to Token
token(Token) := TMP_10(Token)"];
}
}
