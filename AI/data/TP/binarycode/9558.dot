digraph G {
// Function: 9558.sol-ArtNoyToken-endIco()
digraph{
}
// Function: 9558.sol-ArtNoyToken-getOwner()
digraph{
}
// Function: 9558.sol-ArtNoyToken-icoSucceed()
digraph{
}
// Function: 9558.sol-ArtNoyToken-sendCrowdsaleTokens(address,uint256)
digraph{
}
// Function: 9558.sol-ArtNoyToken-setCrowdsaleContract(address)
digraph{
}
// Function: 9558.sol-Buffer-append(Buffer.buffer,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
data.length + buf.buf.length > buf.capacity

IRs:
REF_2 -> LENGTH data
REF_3(bytes) -> buf.buf
REF_4 -> LENGTH REF_3
TMP_40(uint256) = REF_2 + REF_4
REF_5(uint256) -> buf.capacity
TMP_41(bool) = TMP_40 > REF_5
CONDITION TMP_41"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
resize(buf,max(buf.capacity,data.length) * 2)

IRs:
REF_6(uint256) -> buf.capacity
REF_7 -> LENGTH data
TMP_42(uint256) = INTERNAL_CALL, Buffer.max(uint256,uint256)(REF_6,REF_7)
TMP_43(uint256) = TMP_42 * 2
INTERNAL_CALL, Buffer.resize(Buffer.buffer,uint256)(buf,TMP_43)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
len = data.length

IRs:
REF_8 -> LENGTH data
len(uint256) := REF_8(uint256)"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: BEGIN_LOOP 9
"];
9->11;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
len >= 32

IRs:
TMP_45(bool) = len >= 32
CONDITION TMP_45"];
11->12[label="True"];
11->10[label="False"];
12[label="Node Type: INLINE ASM 12
"];
12->13;
13[label="Node Type: END INLINE ASM 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
dest += 32

IRs:
dest(uint256) = dest + 32"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
src += 32

IRs:
src(uint256) = src + 32"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
len -= 32

IRs:
len(uint256) = len - 32"];
16->11;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
mask = 256 ** (32 - len) - 1

IRs:
TMP_46(uint256) = 32 - len
TMP_47(uint256) = 256 ** TMP_46
TMP_48(uint256) = TMP_47 - 1
mask(uint256) := TMP_48(uint256)"];
17->18;
18[label="Node Type: INLINE ASM 18
"];
18->19;
19[label="Node Type: END INLINE ASM 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
buf

IRs:
RETURN buf"];
}
// Function: 9558.sol-Buffer-append(Buffer.buffer,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
buf.buf.length + 1 > buf.capacity

IRs:
REF_9(bytes) -> buf.buf
REF_10 -> LENGTH REF_9
TMP_49(uint256) = REF_10 + 1
REF_11(uint256) -> buf.capacity
TMP_50(bool) = TMP_49 > REF_11
CONDITION TMP_50"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
resize(buf,buf.capacity * 2)

IRs:
REF_12(uint256) -> buf.capacity
TMP_51(uint256) = REF_12 * 2
INTERNAL_CALL, Buffer.resize(Buffer.buffer,uint256)(buf,TMP_51)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
}
// Function: 9558.sol-Buffer-appendInt(Buffer.buffer,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
len + buf.buf.length > buf.capacity

IRs:
REF_13(bytes) -> buf.buf
REF_14 -> LENGTH REF_13
TMP_53(uint256) = len + REF_14
REF_15(uint256) -> buf.capacity
TMP_54(bool) = TMP_53 > REF_15
CONDITION TMP_54"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
resize(buf,max(buf.capacity,len) * 2)

IRs:
REF_16(uint256) -> buf.capacity
TMP_55(uint256) = INTERNAL_CALL, Buffer.max(uint256,uint256)(REF_16,len)
TMP_56(uint256) = TMP_55 * 2
INTERNAL_CALL, Buffer.resize(Buffer.buffer,uint256)(buf,TMP_56)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
mask = 256 ** len - 1

IRs:
TMP_58(uint256) = 256 ** len
TMP_59(uint256) = TMP_58 - 1
mask(uint256) := TMP_59(uint256)"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
buf

IRs:
RETURN buf"];
}
// Function: 9558.sol-Buffer-init(Buffer.buffer,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
capacity % 32 != 0

IRs:
TMP_33(uint256) = capacity % 32
TMP_34(bool) = TMP_33 != 0
CONDITION TMP_34"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
capacity += 32 - (capacity % 32)

IRs:
TMP_35(uint256) = capacity % 32
TMP_36(uint256) = 32 - TMP_35
capacity(uint256) = capacity + TMP_36"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
buf.capacity = capacity

IRs:
REF_0(uint256) -> buf.capacity
REF_0(uint256) (->buf) := capacity(uint256)"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
}
// Function: 9558.sol-Buffer-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a > b

IRs:
TMP_39(bool) = a > b
CONDITION TMP_39"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
a

IRs:
RETURN a"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 9558.sol-Buffer-resize(Buffer.buffer,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldbuf = buf.buf

IRs:
REF_1(bytes) -> buf.buf
oldbuf(bytes) := REF_1(bytes)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
init(buf,capacity)

IRs:
INTERNAL_CALL, Buffer.init(Buffer.buffer,uint256)(buf,capacity)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
append(buf,oldbuf)

IRs:
TMP_38(Buffer.buffer) = INTERNAL_CALL, Buffer.append(Buffer.buffer,bytes)(buf,oldbuf)"];
}
// Function: 9558.sol-CBOR-encodeBytes(Buffer.buffer,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeType(buf,MAJOR_TYPE_BYTES,value.length)

IRs:
REF_27 -> LENGTH value
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_BYTES,REF_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buf.append(value)

IRs:
TMP_102(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,bytes), arguments:['buf', 'value'] "];
}
// Function: 9558.sol-CBOR-encodeIndefiniteLengthType(Buffer.buffer,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buf.append(uint8((major << 5) | 31))

IRs:
TMP_89(uint8) = major << 5
TMP_90(uint8) = TMP_89 | 31
TMP_91 = CONVERT TMP_90 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_91'] "];
}
// Function: 9558.sol-CBOR-encodeInt(Buffer.buffer,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value >= 0

IRs:
TMP_94(bool) = value >= 0
CONDITION TMP_94"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
encodeType(buf,MAJOR_TYPE_INT,uint256(value))

IRs:
TMP_95 = CONVERT value to uint256
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_INT,TMP_95)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
encodeType(buf,MAJOR_TYPE_NEGATIVE_INT,uint256(- 1 - value))

IRs:
TMP_97(uint256) = 0 - 1
TMP_98(uint256) = TMP_97 - value
TMP_99 = CONVERT TMP_98 to uint256
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_NEGATIVE_INT,TMP_99)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 9558.sol-CBOR-encodeString(Buffer.buffer,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeType(buf,MAJOR_TYPE_STRING,bytes(value).length)

IRs:
TMP_103 = CONVERT value to bytes
REF_29 -> LENGTH TMP_103
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_STRING,REF_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buf.append(bytes(value))

IRs:
TMP_105 = CONVERT value to bytes
TMP_106(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,bytes), arguments:['buf', 'TMP_105'] "];
}
// Function: 9558.sol-CBOR-encodeType(Buffer.buffer,uint8,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value <= 23

IRs:
TMP_60(bool) = value <= 23
CONDITION TMP_60"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buf.append(uint8((major << 5) | value))

IRs:
TMP_61(uint8) = major << 5
TMP_62(uint8) = TMP_61 | value
TMP_63 = CONVERT TMP_62 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_63'] "];
2->19;
3[label="Node Type: IF 3

EXPRESSION:
value <= 0xFF

IRs:
TMP_65(bool) = value <= 255
CONDITION TMP_65"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
buf.append(uint8((major << 5) | 24))

IRs:
TMP_66(uint8) = major << 5
TMP_67(uint8) = TMP_66 | 24
TMP_68 = CONVERT TMP_67 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_68'] "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
buf.appendInt(value,1)

IRs:
TMP_70(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.appendInt(Buffer.buffer,uint256,uint256), arguments:['buf', 'value', '1'] "];
5->18;
6[label="Node Type: IF 6

EXPRESSION:
value <= 0xFFFF

IRs:
TMP_71(bool) = value <= 65535
CONDITION TMP_71"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
buf.append(uint8((major << 5) | 25))

IRs:
TMP_72(uint8) = major << 5
TMP_73(uint8) = TMP_72 | 25
TMP_74 = CONVERT TMP_73 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_74'] "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
buf.appendInt(value,2)

IRs:
TMP_76(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.appendInt(Buffer.buffer,uint256,uint256), arguments:['buf', 'value', '2'] "];
8->17;
9[label="Node Type: IF 9

EXPRESSION:
value <= 0xFFFFFFFF

IRs:
TMP_77(bool) = value <= 4294967295
CONDITION TMP_77"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buf.append(uint8((major << 5) | 26))

IRs:
TMP_78(uint8) = major << 5
TMP_79(uint8) = TMP_78 | 26
TMP_80 = CONVERT TMP_79 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_80'] "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buf.appendInt(value,4)

IRs:
TMP_82(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.appendInt(Buffer.buffer,uint256,uint256), arguments:['buf', 'value', '4'] "];
11->16;
12[label="Node Type: IF 12

EXPRESSION:
value <= 0xFFFFFFFFFFFFFFFF

IRs:
TMP_83(bool) = value <= 18446744073709551615
CONDITION TMP_83"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
buf.append(uint8((major << 5) | 27))

IRs:
TMP_84(uint8) = major << 5
TMP_85(uint8) = TMP_84 | 27
TMP_86 = CONVERT TMP_85 to uint8
LIBRARY_CALL, dest:Buffer, function:Buffer.append(Buffer.buffer,uint8), arguments:['buf', 'TMP_86'] "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
buf.appendInt(value,8)

IRs:
TMP_88(Buffer.buffer) = LIBRARY_CALL, dest:Buffer, function:Buffer.appendInt(Buffer.buffer,uint256,uint256), arguments:['buf', 'value', '8'] "];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 9558.sol-CBOR-encodeUInt(Buffer.buffer,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeType(buf,MAJOR_TYPE_INT,value)

IRs:
INTERNAL_CALL, CBOR.encodeType(Buffer.buffer,uint8,uint256)(buf,MAJOR_TYPE_INT,value)"];
}
// Function: 9558.sol-CBOR-endSequence(Buffer.buffer)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeIndefiniteLengthType(buf,MAJOR_TYPE_CONTENT_FREE)

IRs:
INTERNAL_CALL, CBOR.encodeIndefiniteLengthType(Buffer.buffer,uint8)(buf,MAJOR_TYPE_CONTENT_FREE)"];
}
// Function: 9558.sol-CBOR-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAJOR_TYPE_INT = 0

IRs:
MAJOR_TYPE_INT(uint8) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
MAJOR_TYPE_NEGATIVE_INT = 1

IRs:
MAJOR_TYPE_NEGATIVE_INT(uint8) := 1(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
MAJOR_TYPE_BYTES = 2

IRs:
MAJOR_TYPE_BYTES(uint8) := 2(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
MAJOR_TYPE_STRING = 3

IRs:
MAJOR_TYPE_STRING(uint8) := 3(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
MAJOR_TYPE_ARRAY = 4

IRs:
MAJOR_TYPE_ARRAY(uint8) := 4(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
MAJOR_TYPE_MAP = 5

IRs:
MAJOR_TYPE_MAP(uint8) := 5(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
MAJOR_TYPE_CONTENT_FREE = 7

IRs:
MAJOR_TYPE_CONTENT_FREE(uint8) := 7(uint256)"];
}
// Function: 9558.sol-CBOR-startArray(Buffer.buffer)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeIndefiniteLengthType(buf,MAJOR_TYPE_ARRAY)

IRs:
INTERNAL_CALL, CBOR.encodeIndefiniteLengthType(Buffer.buffer,uint8)(buf,MAJOR_TYPE_ARRAY)"];
}
// Function: 9558.sol-CBOR-startMap(Buffer.buffer)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
encodeIndefiniteLengthType(buf,MAJOR_TYPE_MAP)

IRs:
INTERNAL_CALL, CBOR.encodeIndefiniteLengthType(Buffer.buffer,uint8)(buf,MAJOR_TYPE_MAP)"];
}
// Function: 9558.sol-Crowdsale-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_800 = new bytes(0)
INTERNAL_CALL, Crowdsale.__callback(bytes32,string,bytes)(myid,result,TMP_800)"];
}
// Function: 9558.sol-Crowdsale-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == oraclize_cbAddress())

IRs:
TMP_1526(address) = INTERNAL_CALL, usingOraclize.oraclize_cbAddress()()
TMP_1527(bool) = msg.sender == TMP_1526
TMP_1528(None) = SOLIDITY_CALL require(bool)(TMP_1527)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
price = 10 ** 23 / parseInt(result,5)

IRs:
TMP_1529(uint256) = 10 ** 23
TMP_1530(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(result,5)
TMP_1531(uint256) = TMP_1529 / TMP_1530
price(uint256) := TMP_1531(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(price > 0)

IRs:
TMP_1532(bool) = price > 0
TMP_1533(None) = SOLIDITY_CALL require(bool)(TMP_1532)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenPrice = price

IRs:
tokenPrice(uint256) := price(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
priceUpdateAt = block.timestamp

IRs:
priceUpdateAt(uint256) := block.timestamp(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
updateFlag

IRs:
CONDITION updateFlag"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
update()

IRs:
INTERNAL_CALL, Crowdsale.update()()"];
7->8;
8[label="Node Type: END_IF 8
"];
}
// Function: 9558.sol-Crowdsale-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newOwner

IRs:
TMP_1408(bool) = msg.sender == newOwner
CONDITION TMP_1408"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 9558.sol-Crowdsale-acceptSupport()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newTechSupport

IRs:
TMP_1413(bool) = msg.sender == newTechSupport
CONDITION TMP_1413"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
techSupport = newTechSupport

IRs:
techSupport(address) := newTechSupport(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 9558.sol-Crowdsale-addEtherForOraclize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclizeBalance = oraclizeBalance.add(msg.value)

IRs:
TMP_1516(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['oraclizeBalance', 'msg.value'] 
oraclizeBalance(uint256) := TMP_1516(uint256)"];
}
// Function: 9558.sol-Crowdsale-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Buffer.init(buf,1024)

IRs:
LIBRARY_CALL, dest:Buffer, function:Buffer.init(Buffer.buffer,uint256), arguments:['buf', '1024'] "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buf.startArray()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.startArray(Buffer.buffer), arguments:['buf'] "];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arr.length

IRs:
REF_783 -> LENGTH arr
TMP_1224(bool) = i < REF_783
CONDITION TMP_1224"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
buf.encodeBytes(arr[i])

IRs:
REF_785(bytes) -> arr[i]
LIBRARY_CALL, dest:CBOR, function:CBOR.encodeBytes(Buffer.buffer,bytes), arguments:['buf', 'REF_785'] "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_1226(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buf.endSequence()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.endSequence(Buffer.buffer), arguments:['buf'] "];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
buf.buf

IRs:
REF_787(bytes) -> buf.buf
RETURN REF_787"];
}
// Function: 9558.sol-Crowdsale-buy(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
currentPhase = getCurrentPhase(_time)

IRs:
TMP_1444(uint8) = INTERNAL_CALL, Crowdsale.getCurrentPhase(uint256)(_time)
currentPhase(uint8) := TMP_1444(uint8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(currentPhase != 0)

IRs:
TMP_1445(bool) = currentPhase != 0
TMP_1446(None) = SOLIDITY_CALL require(bool)(TMP_1445)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
tokensToSend = calculateTokensWithBonus(_value)

IRs:
TMP_1447(uint256) = INTERNAL_CALL, Crowdsale.calculateTokensWithBonus(uint256)(_value)
tokensToSend(uint256) := TMP_1447(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ethCollected = ethCollected.add(_value)

IRs:
TMP_1448(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['ethCollected', '_value'] 
ethCollected(uint256) := TMP_1448(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokensSold = tokensSold.add(tokensToSend)

IRs:
TMP_1449(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensSold', 'tokensToSend'] 
tokensSold(uint256) := TMP_1449(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
currentPhase == 1

IRs:
TMP_1450(bool) = currentPhase == 1
CONDITION TMP_1450"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(preIcoTokensSold.add(tokensToSend) <= PRE_ICO_MAX_CAP)

IRs:
TMP_1451(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['preIcoTokensSold', 'tokensToSend'] 
TMP_1452(bool) = TMP_1451 <= PRE_ICO_MAX_CAP
TMP_1453(None) = SOLIDITY_CALL require(bool)(TMP_1452)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
preIcoTokensSold = preIcoTokensSold.add(tokensToSend)

IRs:
TMP_1454(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['preIcoTokensSold', 'tokensToSend'] 
preIcoTokensSold(uint256) := TMP_1454(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
distributionAddress.transfer(address(this).balance.sub(oraclizeBalance))

IRs:
TMP_1455 = CONVERT this to address
TMP_1456(uint256) = SOLIDITY_CALL balance(address)(TMP_1455)
TMP_1457(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_1456', 'oraclizeBalance'] 
Transfer dest:distributionAddress value:TMP_1457"];
9->18;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
contributorsBalances[_address] = contributorsBalances[_address].add(_value)

IRs:
REF_828(uint256) -> contributorsBalances[_address]
REF_829(uint256) -> contributorsBalances[_address]
TMP_1459(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_829', '_value'] 
REF_828(uint256) (->contributorsBalances) := TMP_1459(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
tokensSold >= ICO_MIN_CAP

IRs:
TMP_1460(bool) = tokensSold >= ICO_MIN_CAP
CONDITION TMP_1460"];
11->12[label="True"];
11->17[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
! areTokensSended

IRs:
TMP_1461 = UnaryType.BANG areTokensSended 
CONDITION TMP_1461"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
token.icoSucceed()

IRs:
HIGH_LEVEL_CALL, dest:token(ArtNoyToken), function:icoSucceed, arguments:[]  "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
areTokensSended = true

IRs:
areTokensSended(bool) := True(bool)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
distributionAddress.transfer(address(this).balance.sub(oraclizeBalance))

IRs:
TMP_1463 = CONVERT this to address
TMP_1464(uint256) = SOLIDITY_CALL balance(address)(TMP_1463)
TMP_1465(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_1464', 'oraclizeBalance'] 
Transfer dest:distributionAddress value:TMP_1465"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
OnSuccessfullyBuy(_address,_value,true,tokensToSend)

IRs:
Emit OnSuccessfullyBuy(_address,_value,True,tokensToSend)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
token.sendCrowdsaleTokens(_address,tokensToSend)

IRs:
HIGH_LEVEL_CALL, dest:token(ArtNoyToken), function:sendCrowdsaleTokens, arguments:['_address', 'tokensToSend']  "];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9558.sol-Crowdsale-calculateTokensWithBonus(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
buffer = _value.mul(uint256(10).pow(decimals)) / (tokenPrice)

IRs:
TMP_1473 = CONVERT 10 to uint256
TMP_1474(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.pow(uint256,uint256), arguments:['TMP_1473', 'decimals'] 
TMP_1475(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_value', 'TMP_1474'] 
TMP_1476(uint256) = TMP_1475 / tokenPrice
buffer(uint256) := TMP_1476(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
buffer.add(buffer.mul(getTimeBasedBonus(now)) / 100)

IRs:
TMP_1477(uint256) = INTERNAL_CALL, Crowdsale.getTimeBasedBonus(uint256)(now)
TMP_1478(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['buffer', 'TMP_1477'] 
TMP_1479(uint256) = TMP_1478 / 100
TMP_1480(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['buffer', 'TMP_1479'] 
RETURN TMP_1480"];
}
// Function: 9558.sol-Crowdsale-calculateTokensWithoutBonus(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_value.mul(uint256(10).pow(decimals)) / (tokenPrice)

IRs:
TMP_1469 = CONVERT 10 to uint256
TMP_1470(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.pow(uint256,uint256), arguments:['TMP_1469', 'decimals'] 
TMP_1471(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_value', 'TMP_1470'] 
TMP_1472(uint256) = TMP_1471 / tokenPrice
RETURN TMP_1472"];
}
// Function: 9558.sol-Crowdsale-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_1414(bool) = msg.value > 0
TMP_1415(None) = SOLIDITY_CALL require(bool)(TMP_1414)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token = ArtNoyToken(_tokenAddress)

IRs:
TMP_1416 = CONVERT _tokenAddress to ArtNoyToken
token(ArtNoyToken) := TMP_1416(ArtNoyToken)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
techSupport = 0x08531Ea431B6adAa46D2e7a75f48A8d9Ce412FDc

IRs:
techSupport(address) := 47525557259035577925202216977777136642004430812(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.setCrowdsaleContract(this)

IRs:
HIGH_LEVEL_CALL, dest:token(ArtNoyToken), function:setCrowdsaleContract, arguments:['this']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
owner = token.getOwner()

IRs:
TMP_1418(address) = HIGH_LEVEL_CALL, dest:token(ArtNoyToken), function:getOwner, arguments:[]  
owner(address) := TMP_1418(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
distributionAddress = _distributionAddress

IRs:
distributionAddress(address) := _distributionAddress(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_1419(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_1420(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1421 = CONVERT TMP_1420 to OraclizeI
oraclize(OraclizeI) := TMP_1421(OraclizeI)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
oraclizeBalance = msg.value

IRs:
oraclizeBalance(uint256) := msg.value(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tokenPrice = startingExchangePrice

IRs:
tokenPrice(uint256) := startingExchangePrice(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
oraclize_query(URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0)

IRs:
TMP_1422(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string)(URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0)"];
}
// Function: 9558.sol-Crowdsale-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_1391(uint256) = length + toOffset
minLength(uint256) := TMP_1391(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to.length >= minLength)

IRs:
REF_817 -> LENGTH to
TMP_1392(bool) = REF_817 >= minLength
TMP_1393(None) = SOLIDITY_CALL require(bool)(TMP_1392)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_1394(uint256) = 32 + fromOffset
i(uint256) := TMP_1394(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_1395(uint256) = 32 + toOffset
j(uint256) := TMP_1395(uint256)"];
4->5;
5[label="Node Type: BEGIN_LOOP 5
"];
5->6;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_1396(uint256) = 32 + fromOffset
TMP_1397(uint256) = TMP_1396 + length
TMP_1398(bool) = i < TMP_1397
CONDITION TMP_1398"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
10->6;
11[label="Node Type: END_LOOP 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 9558.sol-Crowdsale-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_1555(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1556 = CONVERT TMP_1555 to OraclizeI
oraclize(OraclizeI) := TMP_1556(OraclizeI)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9558.sol-Crowdsale-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_818 -> LENGTH sig
TMP_1399(bool) = REF_818 != 65
CONDITION TMP_1399"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_1400(bool) = v < 27
CONDITION TMP_1400"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_1401(bool) = v != 27
TMP_1402(bool) = v != 28
TMP_1403(bool) = TMP_1401 && TMP_1402
CONDITION TMP_1403"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_5(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_5"];
}
// Function: 9558.sol-Crowdsale-endIco()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > ICO_FINISH)

IRs:
TMP_1500(bool) = now > ICO_FINISH
TMP_1501(None) = SOLIDITY_CALL require(bool)(TMP_1500)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.endIco()

IRs:
HIGH_LEVEL_CALL, dest:token(ArtNoyToken), function:endIco, arguments:[]  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
IcoEnded()

IRs:
Emit IcoEnded()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9558.sol-Crowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= minDeposit)

IRs:
TMP_1440(bool) = msg.value >= minDeposit
TMP_1441(None) = SOLIDITY_CALL require(bool)(TMP_1440)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(buy(msg.sender,msg.value,now))

IRs:
TMP_1442(bool) = INTERNAL_CALL, Crowdsale.buy(address,uint256,uint256)(msg.sender,msg.value,now)
TMP_1443(None) = SOLIDITY_CALL require(bool)(TMP_1442)"];
}
// Function: 9558.sol-Crowdsale-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 9558.sol-Crowdsale-getCurrentPhase(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_time == 0

IRs:
TMP_1423(bool) = _time == 0
CONDITION TMP_1423"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_time = now

IRs:
_time(uint256) := now(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
PRE_ICO_START < _time && _time <= PRE_ICO_FINISH

IRs:
TMP_1424(bool) = PRE_ICO_START < _time
TMP_1425(bool) = _time <= PRE_ICO_FINISH
TMP_1426(bool) = TMP_1424 && TMP_1425
CONDITION TMP_1426"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
1

IRs:
RETURN 1"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
ICO_START < _time && _time <= ICO_FINISH

IRs:
TMP_1427(bool) = ICO_START < _time
TMP_1428(bool) = _time <= ICO_FINISH
TMP_1429(bool) = TMP_1427 && TMP_1428
CONDITION TMP_1429"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
2

IRs:
RETURN 2"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 9558.sol-Crowdsale-getTimeBasedBonus(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_time == 0

IRs:
TMP_1430(bool) = _time == 0
CONDITION TMP_1430"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_time = now

IRs:
_time(uint256) := now(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
phase = getCurrentPhase(_time)

IRs:
TMP_1431(uint8) = INTERNAL_CALL, Crowdsale.getCurrentPhase(uint256)(_time)
phase(uint8) := TMP_1431(uint8)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
phase == 1

IRs:
TMP_1432(bool) = phase == 1
CONDITION TMP_1432"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
20

IRs:
RETURN 20"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
phase == 2

IRs:
TMP_1433(bool) = phase == 2
CONDITION TMP_1433"];
8->9[label="True"];
8->18[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
ICO_START + 7776000 <= _time

IRs:
TMP_1434(uint256) = ICO_START + 7776000
TMP_1435(bool) = TMP_1434 <= _time
CONDITION TMP_1435"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
20

IRs:
RETURN 20"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
ICO_START + 15552000 <= _time

IRs:
TMP_1436(uint256) = ICO_START + 15552000
TMP_1437(bool) = TMP_1436 <= _time
CONDITION TMP_1437"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
10

IRs:
RETURN 10"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
ICO_START + 31536000 <= _time

IRs:
TMP_1438(uint256) = ICO_START + 31536000
TMP_1439(bool) = TMP_1438 <= _time
CONDITION TMP_1439"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: RETURN 16

EXPRESSION:
5

IRs:
RETURN 5"];
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 9558.sol-Crowdsale-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_1133 = CONVERT _haystack to bytes
h(bytes) := TMP_1133(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_1134 = CONVERT _needle to bytes
n(bytes) := TMP_1134(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_735 -> LENGTH h
TMP_1135(bool) = REF_735 < 1
REF_736 -> LENGTH n
TMP_1136(bool) = REF_736 < 1
TMP_1137(bool) = TMP_1135 || TMP_1136
REF_737 -> LENGTH n
REF_738 -> LENGTH h
TMP_1138(bool) = REF_737 > REF_738
TMP_1139(bool) = TMP_1137 || TMP_1138
CONDITION TMP_1139"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_1140(uint256) = 0 - 1
RETURN TMP_1140"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_739 -> LENGTH h
TMP_1141(uint256) = 2 ** 128
TMP_1142(uint256) = TMP_1141 - 1
TMP_1143(bool) = REF_739 > TMP_1142
CONDITION TMP_1143"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_1144(uint256) = 0 - 1
RETURN TMP_1144"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_740 -> LENGTH h
TMP_1145(bool) = i < REF_740
CONDITION TMP_1145"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_741(None) -> h[i]
REF_742(None) -> n[0]
TMP_1146(bool) = REF_741 == REF_742
CONDITION TMP_1146"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_743 -> LENGTH n
TMP_1147(bool) = subindex < REF_743
TMP_1148(uint256) = i + subindex
REF_744 -> LENGTH h
TMP_1149(bool) = TMP_1148 < REF_744
TMP_1150(bool) = TMP_1147 && TMP_1149
TMP_1151(uint256) = i + subindex
REF_745(None) -> h[TMP_1151]
REF_746(None) -> n[subindex]
TMP_1152(bool) = REF_745 == REF_746
TMP_1153(bool) = TMP_1150 && TMP_1152
CONDITION TMP_1153"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_1154(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_747 -> LENGTH n
TMP_1155(bool) = subindex == REF_747
CONDITION TMP_1155"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_1156 = CONVERT i to int256
RETURN TMP_1156"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_1157(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_1158(uint256) = 0 - 1
RETURN TMP_1158"];
}
// Function: 9558.sol-Crowdsale-isIcoTrue()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
tokensSold >= ICO_MIN_CAP

IRs:
TMP_1481(bool) = tokensSold >= ICO_MIN_CAP
CONDITION TMP_1481"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 9558.sol-Crowdsale-manualSendEther(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokensToSend = calculateTokensWithBonus(_value)

IRs:
TMP_1490(uint256) = INTERNAL_CALL, Crowdsale.calculateTokensWithBonus(uint256)(_value)
tokensToSend(uint256) := TMP_1490(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ethCollected = ethCollected.add(_value)

IRs:
TMP_1491(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['ethCollected', '_value'] 
ethCollected(uint256) := TMP_1491(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokensSold = tokensSold.add(tokensToSend)

IRs:
TMP_1492(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensSold', 'tokensToSend'] 
tokensSold(uint256) := TMP_1492(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.sendCrowdsaleTokens(_address,tokensToSend)

IRs:
HIGH_LEVEL_CALL, dest:token(ArtNoyToken), function:sendCrowdsaleTokens, arguments:['_address', 'tokensToSend']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
OnSuccessfullyBuy(_address,0,false,tokensToSend)

IRs:
Emit OnSuccessfullyBuy(_address,0,False,tokensToSend)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyTechSupport()

IRs:
MODIFIER_CALL, Ownable.onlyTechSupport()()"];
6->1;
}
// Function: 9558.sol-Crowdsale-manualSendTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokensSold = tokensSold.add(_value)

IRs:
TMP_1496(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensSold', '_value'] 
tokensSold(uint256) := TMP_1496(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.sendCrowdsaleTokens(_address,_value)

IRs:
HIGH_LEVEL_CALL, dest:token(ArtNoyToken), function:sendCrowdsaleTokens, arguments:['_address', '_value']  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OnSuccessfullyBuy(_address,0,false,_value)

IRs:
Emit OnSuccessfullyBuy(_address,0,False,_value)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyTechSupport()

IRs:
MODIFIER_CALL, Ownable.onlyTechSupport()()"];
4->1;
}
// Function: 9558.sol-Crowdsale-matchBytes32Prefix(bytes32,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(prefix.length == n_random_bytes)

IRs:
REF_804 -> LENGTH prefix
TMP_1316(bool) = REF_804 == n_random_bytes
TMP_1317(None) = SOLIDITY_CALL require(bool)(TMP_1316)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < n_random_bytes

IRs:
TMP_1318(bool) = i < n_random_bytes
CONDITION TMP_1318"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_805(None) -> content[i]
REF_806(None) -> prefix[i]
TMP_1319(bool) = REF_805 != REF_806
CONDITION TMP_1319"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1320(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: RETURN 11

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 9558.sol-Crowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_1567(bool) = msg.sender == owner
TMP_1568(None) = SOLIDITY_CALL require(bool)(TMP_1567)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9558.sol-Crowdsale-onlyTechSupport()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == techSupport || msg.sender == owner)

IRs:
TMP_1569(bool) = msg.sender == techSupport
TMP_1570(bool) = msg.sender == owner
TMP_1571(bool) = TMP_1569 || TMP_1570
TMP_1572(None) = SOLIDITY_CALL require(bool)(TMP_1571)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9558.sol-Crowdsale-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_1543 = CONVERT OAR to address
TMP_1544(bool) = TMP_1543 == 0
TMP_1545 = CONVERT OAR to address
TMP_1546(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_1545)
TMP_1547(bool) = TMP_1546 == 0
TMP_1548(bool) = TMP_1544 || TMP_1547
CONDITION TMP_1548"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_1549(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_1550 = CONVERT oraclize to address
TMP_1551(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1552(bool) = TMP_1550 != TMP_1551
CONDITION TMP_1552"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_1553(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1554 = CONVERT TMP_1553 to OraclizeI
oraclize(OraclizeI) := TMP_1554(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 9558.sol-Crowdsale-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_1086(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_1086"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9558.sol-Crowdsale-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 9558.sol-Crowdsale-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_802(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_802"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9558.sol-Crowdsale-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_804(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_804"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9558.sol-Crowdsale-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_nbytes > 0) && (_nbytes <= 32))

IRs:
TMP_1228(bool) = _nbytes > 0
TMP_1229(bool) = _nbytes <= 32
TMP_1230(bool) = TMP_1228 && TMP_1229
TMP_1231(None) = SOLIDITY_CALL require(bool)(TMP_1230)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_delay *= 10

IRs:
_delay(uint256) = _delay * 10"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_1233 = new bytes(1)
nbytes(bytes) := TMP_1233(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_788(bytes1) -> nbytes[0]
TMP_1234 = CONVERT _nbytes to bytes1
REF_788(bytes1) (->nbytes) := TMP_1234(bytes1)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
unonce = new bytes(32)

IRs:
TMP_1236 = new bytes(32)
unonce(bytes) := TMP_1236(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
sessionKeyHash = new bytes(32)

IRs:
TMP_1238 = new bytes(32)
sessionKeyHash(bytes) := TMP_1238(bytes)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_1239(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_1239(bytes32)"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
delay = new bytes(32)

IRs:
TMP_1241 = new bytes(32)
delay(bytes) := TMP_1241(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
delay_bytes8 = new bytes(8)

IRs:
TMP_1243 = new bytes(8)
delay_bytes8(bytes) := TMP_1243(bytes)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
copyBytes(delay,24,8,delay_bytes8,0)

IRs:
TMP_1244(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(delay,24,8,delay_bytes8,0)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash,delay)

IRs:
args(bytes[4]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)', 'delay(bytes)']"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
queryId = oraclize_query(random,args,_customGasLimit)

IRs:
TMP_1245(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[4],uint256)(random,args,_customGasLimit)
queryId(bytes32) := TMP_1245(bytes32)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
delay_bytes8_left = new bytes(8)

IRs:
TMP_1247 = new bytes(8)
delay_bytes8_left(bytes) := TMP_1247(bytes)"];
17->18;
18[label="Node Type: INLINE ASM 18
"];
18->19;
19[label="Node Type: END INLINE ASM 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,keccak256()(delay_bytes8_left,args[1],sha256()(args[0]),args[2]))

IRs:
REF_789(bytes) -> args[1]
REF_790(bytes) -> args[0]
TMP_1248(bytes32) = SOLIDITY_CALL sha256()(REF_790)
REF_791(bytes) -> args[2]
TMP_1249(bytes32) = SOLIDITY_CALL keccak256()(delay_bytes8_left,REF_789,TMP_1248,REF_791)
INTERNAL_CALL, usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_1249)"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1007(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1007(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_598(bytes) -> dynargs[0]
REF_599(bytes) -> args[0]
REF_598(bytes) (->dynargs) := REF_599(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1008(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1008"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1019(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1019(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_604(bytes) -> dynargs[0]
REF_605(bytes) -> args[0]
REF_604(bytes) (->dynargs) := REF_605(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1020(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1020"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1023(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1023(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_606(bytes) -> dynargs[0]
REF_607(bytes) -> args[0]
REF_606(bytes) (->dynargs) := REF_607(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_608(bytes) -> dynargs[1]
REF_609(bytes) -> args[1]
REF_608(bytes) (->dynargs) := REF_609(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1024(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1024"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1035(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1035(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_618(bytes) -> dynargs[0]
REF_619(bytes) -> args[0]
REF_618(bytes) (->dynargs) := REF_619(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_620(bytes) -> dynargs[1]
REF_621(bytes) -> args[1]
REF_620(bytes) (->dynargs) := REF_621(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1036(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1036"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1039(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1039(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_622(bytes) -> dynargs[0]
REF_623(bytes) -> args[0]
REF_622(bytes) (->dynargs) := REF_623(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_624(bytes) -> dynargs[1]
REF_625(bytes) -> args[1]
REF_624(bytes) (->dynargs) := REF_625(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_626(bytes) -> dynargs[2]
REF_627(bytes) -> args[2]
REF_626(bytes) (->dynargs) := REF_627(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1040(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1040"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1051(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1051(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_640(bytes) -> dynargs[0]
REF_641(bytes) -> args[0]
REF_640(bytes) (->dynargs) := REF_641(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_642(bytes) -> dynargs[1]
REF_643(bytes) -> args[1]
REF_642(bytes) (->dynargs) := REF_643(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_644(bytes) -> dynargs[2]
REF_645(bytes) -> args[2]
REF_644(bytes) (->dynargs) := REF_645(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1052(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1052"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1055(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1055(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_646(bytes) -> dynargs[0]
REF_647(bytes) -> args[0]
REF_646(bytes) (->dynargs) := REF_647(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_648(bytes) -> dynargs[1]
REF_649(bytes) -> args[1]
REF_648(bytes) (->dynargs) := REF_649(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_650(bytes) -> dynargs[2]
REF_651(bytes) -> args[2]
REF_650(bytes) (->dynargs) := REF_651(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_652(bytes) -> dynargs[3]
REF_653(bytes) -> args[3]
REF_652(bytes) (->dynargs) := REF_653(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1056(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1056"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1067(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1067(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_670(bytes) -> dynargs[0]
REF_671(bytes) -> args[0]
REF_670(bytes) (->dynargs) := REF_671(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_672(bytes) -> dynargs[1]
REF_673(bytes) -> args[1]
REF_672(bytes) (->dynargs) := REF_673(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_674(bytes) -> dynargs[2]
REF_675(bytes) -> args[2]
REF_674(bytes) (->dynargs) := REF_675(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_676(bytes) -> dynargs[3]
REF_677(bytes) -> args[3]
REF_676(bytes) (->dynargs) := REF_677(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1068(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1068"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1071(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1071(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_678(bytes) -> dynargs[0]
REF_679(bytes) -> args[0]
REF_678(bytes) (->dynargs) := REF_679(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_680(bytes) -> dynargs[1]
REF_681(bytes) -> args[1]
REF_680(bytes) (->dynargs) := REF_681(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_682(bytes) -> dynargs[2]
REF_683(bytes) -> args[2]
REF_682(bytes) (->dynargs) := REF_683(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_684(bytes) -> dynargs[3]
REF_685(bytes) -> args[3]
REF_684(bytes) (->dynargs) := REF_685(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_686(bytes) -> dynargs[4]
REF_687(bytes) -> args[4]
REF_686(bytes) (->dynargs) := REF_687(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1072(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1072"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1083(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1083(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_708(bytes) -> dynargs[0]
REF_709(bytes) -> args[0]
REF_708(bytes) (->dynargs) := REF_709(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_710(bytes) -> dynargs[1]
REF_711(bytes) -> args[1]
REF_710(bytes) (->dynargs) := REF_711(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_712(bytes) -> dynargs[2]
REF_713(bytes) -> args[2]
REF_712(bytes) (->dynargs) := REF_713(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_714(bytes) -> dynargs[3]
REF_715(bytes) -> args[3]
REF_714(bytes) (->dynargs) := REF_715(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_716(bytes) -> dynargs[4]
REF_717(bytes) -> args[4]
REF_716(bytes) (->dynargs) := REF_717(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1084(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1084"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_974(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_974(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_975(uint256) = tx.gasprice * 200000
TMP_976(uint256) = 1000000000000000000 + TMP_975
TMP_977(bool) = price > TMP_976
CONDITION TMP_977"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_978(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_978(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_980(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_980"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_998(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_998(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_999(uint256) = tx.gasprice * gaslimit
TMP_1000(uint256) = 1000000000000000000 + TMP_999
TMP_1001(bool) = price > TMP_1000
CONDITION TMP_1001"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_1002(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_1002(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_1004(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_1004"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_806(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_806(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_807(uint256) = tx.gasprice * 200000
TMP_808(uint256) = 1000000000000000000 + TMP_807
TMP_809(bool) = price > TMP_808
CONDITION TMP_809"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_811(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_811"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_834(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_834(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_835(uint256) = tx.gasprice * 200000
TMP_836(uint256) = 1000000000000000000 + TMP_835
TMP_837(bool) = price > TMP_836
CONDITION TMP_837"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_839(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_839"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_855(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_855(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_856(uint256) = tx.gasprice * gaslimit
TMP_857(uint256) = 1000000000000000000 + TMP_856
TMP_858(bool) = price > TMP_857
CONDITION TMP_858"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_860(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_860"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_827(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_827(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_828(uint256) = tx.gasprice * gaslimit
TMP_829(uint256) = 1000000000000000000 + TMP_828
TMP_830(bool) = price > TMP_829
CONDITION TMP_830"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_832(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_832"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_895(string[])  = new string[](1)
dynargs(string[]) = ['TMP_895(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_466(string) -> dynargs[0]
REF_467(string) -> args[0]
REF_466(string) (->dynargs) := REF_467(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_896(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_896"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_907(string[])  = new string[](1)
dynargs(string[]) = ['TMP_907(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_472(string) -> dynargs[0]
REF_473(string) -> args[0]
REF_472(string) (->dynargs) := REF_473(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_908(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_908"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_911(string[])  = new string[](2)
dynargs(string[]) = ['TMP_911(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_474(string) -> dynargs[0]
REF_475(string) -> args[0]
REF_474(string) (->dynargs) := REF_475(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_476(string) -> dynargs[1]
REF_477(string) -> args[1]
REF_476(string) (->dynargs) := REF_477(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_912(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_912"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_923(string[])  = new string[](2)
dynargs(string[]) = ['TMP_923(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_486(string) -> dynargs[0]
REF_487(string) -> args[0]
REF_486(string) (->dynargs) := REF_487(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_488(string) -> dynargs[1]
REF_489(string) -> args[1]
REF_488(string) (->dynargs) := REF_489(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_924(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_924"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_927(string[])  = new string[](3)
dynargs(string[]) = ['TMP_927(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_490(string) -> dynargs[0]
REF_491(string) -> args[0]
REF_490(string) (->dynargs) := REF_491(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_492(string) -> dynargs[1]
REF_493(string) -> args[1]
REF_492(string) (->dynargs) := REF_493(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_494(string) -> dynargs[2]
REF_495(string) -> args[2]
REF_494(string) (->dynargs) := REF_495(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_928(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_928"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_939(string[])  = new string[](3)
dynargs(string[]) = ['TMP_939(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_508(string) -> dynargs[0]
REF_509(string) -> args[0]
REF_508(string) (->dynargs) := REF_509(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_510(string) -> dynargs[1]
REF_511(string) -> args[1]
REF_510(string) (->dynargs) := REF_511(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_512(string) -> dynargs[2]
REF_513(string) -> args[2]
REF_512(string) (->dynargs) := REF_513(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_940(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_940"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_943(string[])  = new string[](4)
dynargs(string[]) = ['TMP_943(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_514(string) -> dynargs[0]
REF_515(string) -> args[0]
REF_514(string) (->dynargs) := REF_515(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_516(string) -> dynargs[1]
REF_517(string) -> args[1]
REF_516(string) (->dynargs) := REF_517(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_518(string) -> dynargs[2]
REF_519(string) -> args[2]
REF_518(string) (->dynargs) := REF_519(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_520(string) -> dynargs[3]
REF_521(string) -> args[3]
REF_520(string) (->dynargs) := REF_521(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_944(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_944"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_955(string[])  = new string[](4)
dynargs(string[]) = ['TMP_955(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_538(string) -> dynargs[0]
REF_539(string) -> args[0]
REF_538(string) (->dynargs) := REF_539(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_540(string) -> dynargs[1]
REF_541(string) -> args[1]
REF_540(string) (->dynargs) := REF_541(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_542(string) -> dynargs[2]
REF_543(string) -> args[2]
REF_542(string) (->dynargs) := REF_543(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_544(string) -> dynargs[3]
REF_545(string) -> args[3]
REF_544(string) (->dynargs) := REF_545(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_956(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_956"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_959(string[])  = new string[](5)
dynargs(string[]) = ['TMP_959(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_546(string) -> dynargs[0]
REF_547(string) -> args[0]
REF_546(string) (->dynargs) := REF_547(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_548(string) -> dynargs[1]
REF_549(string) -> args[1]
REF_548(string) (->dynargs) := REF_549(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_550(string) -> dynargs[2]
REF_551(string) -> args[2]
REF_550(string) (->dynargs) := REF_551(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_552(string) -> dynargs[3]
REF_553(string) -> args[3]
REF_552(string) (->dynargs) := REF_553(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_554(string) -> dynargs[4]
REF_555(string) -> args[4]
REF_554(string) (->dynargs) := REF_555(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_960(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_960"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_971(string[])  = new string[](5)
dynargs(string[]) = ['TMP_971(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_576(string) -> dynargs[0]
REF_577(string) -> args[0]
REF_576(string) (->dynargs) := REF_577(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_578(string) -> dynargs[1]
REF_579(string) -> args[1]
REF_578(string) (->dynargs) := REF_579(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_580(string) -> dynargs[2]
REF_581(string) -> args[2]
REF_580(string) (->dynargs) := REF_581(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_582(string) -> dynargs[3]
REF_583(string) -> args[3]
REF_582(string) (->dynargs) := REF_583(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_584(string) -> dynargs[4]
REF_585(string) -> args[4]
REF_584(string) (->dynargs) := REF_585(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_972(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_972"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_862(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_862(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_863(uint256) = tx.gasprice * 200000
TMP_864(uint256) = 1000000000000000000 + TMP_863
TMP_865(bool) = price > TMP_864
CONDITION TMP_865"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_866(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_866(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_868(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_868"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_886(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_886(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_887(uint256) = tx.gasprice * gaslimit
TMP_888(uint256) = 1000000000000000000 + TMP_887
TMP_889(bool) = price > TMP_888
CONDITION TMP_889"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_890(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_890(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_892(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_892"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1011(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1011(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_600(bytes) -> dynargs[0]
REF_601(bytes) -> args[0]
REF_600(bytes) (->dynargs) := REF_601(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1012(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1012"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1015(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1015(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_602(bytes) -> dynargs[0]
REF_603(bytes) -> args[0]
REF_602(bytes) (->dynargs) := REF_603(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1016(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1016"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1027(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1027(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_610(bytes) -> dynargs[0]
REF_611(bytes) -> args[0]
REF_610(bytes) (->dynargs) := REF_611(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_612(bytes) -> dynargs[1]
REF_613(bytes) -> args[1]
REF_612(bytes) (->dynargs) := REF_613(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1028(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1028"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1031(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1031(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_614(bytes) -> dynargs[0]
REF_615(bytes) -> args[0]
REF_614(bytes) (->dynargs) := REF_615(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_616(bytes) -> dynargs[1]
REF_617(bytes) -> args[1]
REF_616(bytes) (->dynargs) := REF_617(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1032(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1032"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1043(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1043(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_628(bytes) -> dynargs[0]
REF_629(bytes) -> args[0]
REF_628(bytes) (->dynargs) := REF_629(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_630(bytes) -> dynargs[1]
REF_631(bytes) -> args[1]
REF_630(bytes) (->dynargs) := REF_631(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_632(bytes) -> dynargs[2]
REF_633(bytes) -> args[2]
REF_632(bytes) (->dynargs) := REF_633(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1044(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1044"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1047(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1047(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_634(bytes) -> dynargs[0]
REF_635(bytes) -> args[0]
REF_634(bytes) (->dynargs) := REF_635(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_636(bytes) -> dynargs[1]
REF_637(bytes) -> args[1]
REF_636(bytes) (->dynargs) := REF_637(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_638(bytes) -> dynargs[2]
REF_639(bytes) -> args[2]
REF_638(bytes) (->dynargs) := REF_639(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1048(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1048"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1059(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1059(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_654(bytes) -> dynargs[0]
REF_655(bytes) -> args[0]
REF_654(bytes) (->dynargs) := REF_655(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_656(bytes) -> dynargs[1]
REF_657(bytes) -> args[1]
REF_656(bytes) (->dynargs) := REF_657(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_658(bytes) -> dynargs[2]
REF_659(bytes) -> args[2]
REF_658(bytes) (->dynargs) := REF_659(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_660(bytes) -> dynargs[3]
REF_661(bytes) -> args[3]
REF_660(bytes) (->dynargs) := REF_661(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1060(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1060"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1063(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1063(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_662(bytes) -> dynargs[0]
REF_663(bytes) -> args[0]
REF_662(bytes) (->dynargs) := REF_663(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_664(bytes) -> dynargs[1]
REF_665(bytes) -> args[1]
REF_664(bytes) (->dynargs) := REF_665(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_666(bytes) -> dynargs[2]
REF_667(bytes) -> args[2]
REF_666(bytes) (->dynargs) := REF_667(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_668(bytes) -> dynargs[3]
REF_669(bytes) -> args[3]
REF_668(bytes) (->dynargs) := REF_669(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1064(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1064"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1075(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1075(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_688(bytes) -> dynargs[0]
REF_689(bytes) -> args[0]
REF_688(bytes) (->dynargs) := REF_689(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_690(bytes) -> dynargs[1]
REF_691(bytes) -> args[1]
REF_690(bytes) (->dynargs) := REF_691(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_692(bytes) -> dynargs[2]
REF_693(bytes) -> args[2]
REF_692(bytes) (->dynargs) := REF_693(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_694(bytes) -> dynargs[3]
REF_695(bytes) -> args[3]
REF_694(bytes) (->dynargs) := REF_695(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_696(bytes) -> dynargs[4]
REF_697(bytes) -> args[4]
REF_696(bytes) (->dynargs) := REF_697(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1076(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1076"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1079(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1079(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_698(bytes) -> dynargs[0]
REF_699(bytes) -> args[0]
REF_698(bytes) (->dynargs) := REF_699(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_700(bytes) -> dynargs[1]
REF_701(bytes) -> args[1]
REF_700(bytes) (->dynargs) := REF_701(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_702(bytes) -> dynargs[2]
REF_703(bytes) -> args[2]
REF_702(bytes) (->dynargs) := REF_703(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_704(bytes) -> dynargs[3]
REF_705(bytes) -> args[3]
REF_704(bytes) (->dynargs) := REF_705(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_706(bytes) -> dynargs[4]
REF_707(bytes) -> args[4]
REF_706(bytes) (->dynargs) := REF_707(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1080(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1080"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_982(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_982(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_983(uint256) = tx.gasprice * 200000
TMP_984(uint256) = 1000000000000000000 + TMP_983
TMP_985(bool) = price > TMP_984
CONDITION TMP_985"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_986(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_986(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_988(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_988"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_990(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_990(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_991(uint256) = tx.gasprice * gaslimit
TMP_992(uint256) = 1000000000000000000 + TMP_991
TMP_993(bool) = price > TMP_992
CONDITION TMP_993"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_994(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_994(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_996(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_996"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_813(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_813(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_814(uint256) = tx.gasprice * 200000
TMP_815(uint256) = 1000000000000000000 + TMP_814
TMP_816(bool) = price > TMP_815
CONDITION TMP_816"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_818(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_818"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_841(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_841(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_842(uint256) = tx.gasprice * 200000
TMP_843(uint256) = 1000000000000000000 + TMP_842
TMP_844(bool) = price > TMP_843
CONDITION TMP_844"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_846(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_846"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_848(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_848(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_849(uint256) = tx.gasprice * gaslimit
TMP_850(uint256) = 1000000000000000000 + TMP_849
TMP_851(bool) = price > TMP_850
CONDITION TMP_851"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_853(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_853"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_820(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_820(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_821(uint256) = tx.gasprice * gaslimit
TMP_822(uint256) = 1000000000000000000 + TMP_821
TMP_823(bool) = price > TMP_822
CONDITION TMP_823"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_825(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_825"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_899(string[])  = new string[](1)
dynargs(string[]) = ['TMP_899(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_468(string) -> dynargs[0]
REF_469(string) -> args[0]
REF_468(string) (->dynargs) := REF_469(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_900(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_900"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_903(string[])  = new string[](1)
dynargs(string[]) = ['TMP_903(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_470(string) -> dynargs[0]
REF_471(string) -> args[0]
REF_470(string) (->dynargs) := REF_471(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_904(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_904"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_915(string[])  = new string[](2)
dynargs(string[]) = ['TMP_915(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_478(string) -> dynargs[0]
REF_479(string) -> args[0]
REF_478(string) (->dynargs) := REF_479(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_480(string) -> dynargs[1]
REF_481(string) -> args[1]
REF_480(string) (->dynargs) := REF_481(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_916(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_916"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_919(string[])  = new string[](2)
dynargs(string[]) = ['TMP_919(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_482(string) -> dynargs[0]
REF_483(string) -> args[0]
REF_482(string) (->dynargs) := REF_483(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_484(string) -> dynargs[1]
REF_485(string) -> args[1]
REF_484(string) (->dynargs) := REF_485(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_920(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_920"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_931(string[])  = new string[](3)
dynargs(string[]) = ['TMP_931(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_496(string) -> dynargs[0]
REF_497(string) -> args[0]
REF_496(string) (->dynargs) := REF_497(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_498(string) -> dynargs[1]
REF_499(string) -> args[1]
REF_498(string) (->dynargs) := REF_499(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_500(string) -> dynargs[2]
REF_501(string) -> args[2]
REF_500(string) (->dynargs) := REF_501(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_932(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_932"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_935(string[])  = new string[](3)
dynargs(string[]) = ['TMP_935(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_502(string) -> dynargs[0]
REF_503(string) -> args[0]
REF_502(string) (->dynargs) := REF_503(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_504(string) -> dynargs[1]
REF_505(string) -> args[1]
REF_504(string) (->dynargs) := REF_505(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_506(string) -> dynargs[2]
REF_507(string) -> args[2]
REF_506(string) (->dynargs) := REF_507(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_936(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_936"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_947(string[])  = new string[](4)
dynargs(string[]) = ['TMP_947(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_522(string) -> dynargs[0]
REF_523(string) -> args[0]
REF_522(string) (->dynargs) := REF_523(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_524(string) -> dynargs[1]
REF_525(string) -> args[1]
REF_524(string) (->dynargs) := REF_525(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_526(string) -> dynargs[2]
REF_527(string) -> args[2]
REF_526(string) (->dynargs) := REF_527(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_528(string) -> dynargs[3]
REF_529(string) -> args[3]
REF_528(string) (->dynargs) := REF_529(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_948(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_948"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_951(string[])  = new string[](4)
dynargs(string[]) = ['TMP_951(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_530(string) -> dynargs[0]
REF_531(string) -> args[0]
REF_530(string) (->dynargs) := REF_531(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_532(string) -> dynargs[1]
REF_533(string) -> args[1]
REF_532(string) (->dynargs) := REF_533(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_534(string) -> dynargs[2]
REF_535(string) -> args[2]
REF_534(string) (->dynargs) := REF_535(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_536(string) -> dynargs[3]
REF_537(string) -> args[3]
REF_536(string) (->dynargs) := REF_537(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_952(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_952"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_963(string[])  = new string[](5)
dynargs(string[]) = ['TMP_963(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_556(string) -> dynargs[0]
REF_557(string) -> args[0]
REF_556(string) (->dynargs) := REF_557(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_558(string) -> dynargs[1]
REF_559(string) -> args[1]
REF_558(string) (->dynargs) := REF_559(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_560(string) -> dynargs[2]
REF_561(string) -> args[2]
REF_560(string) (->dynargs) := REF_561(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_562(string) -> dynargs[3]
REF_563(string) -> args[3]
REF_562(string) (->dynargs) := REF_563(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_564(string) -> dynargs[4]
REF_565(string) -> args[4]
REF_564(string) (->dynargs) := REF_565(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_964(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_964"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_967(string[])  = new string[](5)
dynargs(string[]) = ['TMP_967(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_566(string) -> dynargs[0]
REF_567(string) -> args[0]
REF_566(string) (->dynargs) := REF_567(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_568(string) -> dynargs[1]
REF_569(string) -> args[1]
REF_568(string) (->dynargs) := REF_569(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_570(string) -> dynargs[2]
REF_571(string) -> args[2]
REF_570(string) (->dynargs) := REF_571(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_572(string) -> dynargs[3]
REF_573(string) -> args[3]
REF_572(string) (->dynargs) := REF_573(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_574(string) -> dynargs[4]
REF_575(string) -> args[4]
REF_574(string) (->dynargs) := REF_575(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_968(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_968"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_870(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_870(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_871(uint256) = tx.gasprice * 200000
TMP_872(uint256) = 1000000000000000000 + TMP_871
TMP_873(bool) = price > TMP_872
CONDITION TMP_873"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_874(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_874(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_876(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_876"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_878(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_878(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_879(uint256) = tx.gasprice * gaslimit
TMP_880(uint256) = 1000000000000000000 + TMP_879
TMP_881(bool) = price > TMP_880
CONDITION TMP_881"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_882(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_882(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_884(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_884"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-Crowdsale-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_1092(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_1092"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9558.sol-Crowdsale-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_proof[0] == L) && (_proof[1] == P) && (_proof[2] == 1))

IRs:
REF_859(None) -> _proof[0]
TMP_1557(bool) = REF_859 == L
REF_860(None) -> _proof[1]
TMP_1558(bool) = REF_860 == P
TMP_1559(bool) = TMP_1557 && TMP_1558
REF_861(None) -> _proof[2]
TMP_1560(bool) = REF_861 == 1
TMP_1561(bool) = TMP_1559 && TMP_1560
TMP_1562(None) = SOLIDITY_CALL require(bool)(TMP_1561)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_1563 = CONVERT _result to bytes
TMP_1564(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_1565(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_1563,TMP_1564)
proofVerified(bool) := TMP_1565(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(proofVerified)

IRs:
TMP_1566(None) = SOLIDITY_CALL require(bool)(proofVerified)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9558.sol-Crowdsale-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_1321(uint256) = 3 + 65
TMP_1322(uint256) = 3 + 65
TMP_1323(uint256) = TMP_1322 + 1
REF_807(None) -> proof[TMP_1323]
TMP_1324 = CONVERT REF_807 to uint256
TMP_1325(uint256) = TMP_1324 + 2
TMP_1326(uint256) = TMP_1321 + TMP_1325
TMP_1327(uint256) = TMP_1326 + 32
ledgerProofLength(uint256) := TMP_1327(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_1329 = new bytes(32)
keyhash(bytes) := TMP_1329(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_1330(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! (keccak256()(keyhash) == keccak256()(sha256()(context_name,queryId)))

IRs:
TMP_1331(bytes32) = SOLIDITY_CALL keccak256()(keyhash)
TMP_1332(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_1333(bytes32) = SOLIDITY_CALL keccak256()(TMP_1332)
TMP_1334(bool) = TMP_1331 == TMP_1333
TMP_1335 = UnaryType.BANG TMP_1334 
CONDITION TMP_1335"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_1337(uint256) = 32 + 8
TMP_1338(uint256) = TMP_1337 + 1
TMP_1339(uint256) = TMP_1338 + 32
TMP_1340(uint256) = ledgerProofLength + TMP_1339
TMP_1341(uint256) = TMP_1340 + 1
REF_808(None) -> proof[TMP_1341]
TMP_1342 = CONVERT REF_808 to uint256
TMP_1343(uint256) = TMP_1342 + 2
TMP_1344 = new bytes(TMP_1343)
sig1(bytes) := TMP_1344(bytes)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_1345(uint256) = 32 + 8
TMP_1346(uint256) = TMP_1345 + 1
TMP_1347(uint256) = TMP_1346 + 32
TMP_1348(uint256) = ledgerProofLength + TMP_1347
REF_809 -> LENGTH sig1
TMP_1349(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1348,REF_809,sig1,0)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! matchBytes32Prefix(sha256()(sig1),result,uint256(proof[ledgerProofLength + 32 + 8]))

IRs:
TMP_1350(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_1351(uint256) = ledgerProofLength + 32
TMP_1352(uint256) = TMP_1351 + 8
REF_810(None) -> proof[TMP_1352]
TMP_1353 = CONVERT REF_810 to uint256
TMP_1354(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256)(TMP_1350,result,TMP_1353)
TMP_1355 = UnaryType.BANG TMP_1354 
CONDITION TMP_1355"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_1357(uint256) = 8 + 1
TMP_1358(uint256) = TMP_1357 + 32
TMP_1359 = new bytes(TMP_1358)
commitmentSlice1(bytes) := TMP_1359(bytes)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_1360(uint256) = ledgerProofLength + 32
TMP_1361(uint256) = 8 + 1
TMP_1362(uint256) = TMP_1361 + 32
TMP_1363(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1360,TMP_1362,commitmentSlice1,0)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_1365 = new bytes(64)
sessionPubkey(bytes) := TMP_1365(bytes)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_1366(uint256) = ledgerProofLength + 32
TMP_1367(uint256) = 8 + 1
TMP_1368(uint256) = TMP_1367 + 32
TMP_1369(uint256) = TMP_1366 + TMP_1368
REF_811 -> LENGTH sig1
TMP_1370(uint256) = TMP_1369 + REF_811
TMP_1371(uint256) = TMP_1370 + 65
sig2offset(uint256) := TMP_1371(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_1372(uint256) = sig2offset - 64
TMP_1373(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1372,64,sessionPubkey,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_1374(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_1374(bytes32)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
oraclize_randomDS_args[queryId] == keccak256()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_812(bytes32) -> oraclize_randomDS_args[queryId]
TMP_1375(bytes32) = SOLIDITY_CALL keccak256()(commitmentSlice1,sessionPubkeyHash)
TMP_1376(bool) = REF_812 == TMP_1375
CONDITION TMP_1376"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_813(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_813 "];
19->21;
20[label="Node Type: RETURN 20

EXPRESSION:
false

IRs:
RETURN False"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_1378(uint256) = 32 + 8
TMP_1379(uint256) = TMP_1378 + 1
TMP_1380(uint256) = TMP_1379 + 32
TMP_1381 = new bytes(TMP_1380)
tosign1(bytes) := TMP_1381(bytes)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_1382(uint256) = 32 + 8
TMP_1383(uint256) = TMP_1382 + 1
TMP_1384(uint256) = TMP_1383 + 32
TMP_1385(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_1384,tosign1,0)"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
! verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_1386(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_1387(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1386,sig1,sessionPubkey)
TMP_1388 = UnaryType.BANG TMP_1387 
CONDITION TMP_1388"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: RETURN 25

EXPRESSION:
false

IRs:
RETURN False"];
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: IF 27

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_814(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1389(bool) = REF_814 == False
CONDITION TMP_1389"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_815(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1390(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_815(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_1390(bool)"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: RETURN 30

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_816(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_816"];
}
// Function: 9558.sol-Crowdsale-oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_801(None) -> _proof[0]
TMP_1307(bool) = REF_801 != L
REF_802(None) -> _proof[1]
TMP_1308(bool) = REF_802 != P
TMP_1309(bool) = TMP_1307 || TMP_1308
REF_803(None) -> _proof[2]
TMP_1310(bool) = REF_803 != 1
TMP_1311(bool) = TMP_1309 || TMP_1310
CONDITION TMP_1311"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_1312 = CONVERT _result to bytes
TMP_1313(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_1314(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_1312,TMP_1313)
proofVerified(bool) := TMP_1314(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_1315(bool) = proofVerified == False
CONDITION TMP_1315"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
2

IRs:
RETURN 2"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 9558.sol-Crowdsale-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_1272(uint256) = sig2offset + 1
REF_795(None) -> proof[TMP_1272]
TMP_1273 = CONVERT REF_795 to uint256
TMP_1274(uint256) = TMP_1273 + 2
TMP_1275 = new bytes(TMP_1274)
sig2(bytes) := TMP_1275(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_796 -> LENGTH sig2
TMP_1276(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_796,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_1278 = new bytes(64)
appkey1_pubkey(bytes) := TMP_1278(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_1279(uint256) = 3 + 1
TMP_1280(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1279,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_1282(uint256) = 1 + 65
TMP_1283(uint256) = TMP_1282 + 32
TMP_1284 = new bytes(TMP_1283)
tosign2(bytes) := TMP_1284(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = bytes1(1)

IRs:
REF_797(bytes1) -> tosign2[0]
TMP_1285 = CONVERT 1 to bytes1
REF_797(bytes1) (->tosign2) := TMP_1285(bytes1)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_1286(uint256) = sig2offset - 65
TMP_1287(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1286,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_1288(uint256) = 1 + 65
TMP_1289(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_1288)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_1290(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_1291(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1290,sig2,appkey1_pubkey)
sigok(bool) := TMP_1291(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_1292(bool) = sigok == False
CONDITION TMP_1292"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_1294(uint256) = 1 + 65
TMP_1295 = new bytes(TMP_1294)
tosign3(bytes) := TMP_1295(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_798(uint256) -> tosign3[0]
REF_798(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_1296(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_1298(uint256) = 3 + 65
TMP_1299(uint256) = TMP_1298 + 1
REF_799(None) -> proof[TMP_1299]
TMP_1300 = CONVERT REF_799 to uint256
TMP_1301(uint256) = TMP_1300 + 2
TMP_1302 = new bytes(TMP_1301)
sig3(bytes) := TMP_1302(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_1303(uint256) = 3 + 65
REF_800 -> LENGTH sig3
TMP_1304(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1303,REF_800,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_1305(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_1306(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1305,sig3,LEDGERKEY)
sigok(bool) := TMP_1306(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 9558.sol-Crowdsale-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_randomDS_args[queryId] = commitment

IRs:
REF_792(bytes32) -> oraclize_randomDS_args[queryId]
REF_792(bytes32) (->oraclize_randomDS_args) := commitment(bytes32)"];
}
// Function: 9558.sol-Crowdsale-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_1090"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9558.sol-Crowdsale-oraclize_setNetwork()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_774(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_775(bool) = TMP_774 > 0
CONDITION TMP_775"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_776 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_776(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_778(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_779(bool) = TMP_778 > 0
CONDITION TMP_779"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_780 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_780(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_782(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_783(bool) = TMP_782 > 0
CONDITION TMP_783"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_784 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_784(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_786(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_787(bool) = TMP_786 > 0
CONDITION TMP_787"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_788 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_788(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_790(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_791(bool) = TMP_790 > 0
CONDITION TMP_791"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_792 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_792(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_793(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_794(bool) = TMP_793 > 0
CONDITION TMP_794"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_795 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_795(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_796(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_797(bool) = TMP_796 > 0
CONDITION TMP_797"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_798 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_798(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 9558.sol-Crowdsale-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_setNetwork()

IRs:
TMP_773(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork()()
RETURN TMP_773"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
networkID
"];
}
// Function: 9558.sol-Crowdsale-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 9558.sol-Crowdsale-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_1088"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9558.sol-Crowdsale-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_1094 = CONVERT _a to bytes
tmp(bytes) := TMP_1094(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_1095(uint256) = 2 * 20
TMP_1096(uint256) = 2 + TMP_1095
TMP_1097(bool) = i < TMP_1096
CONDITION TMP_1097"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_722(None) -> tmp[i]
TMP_1098 = CONVERT REF_722 to uint160
b1(uint160) := TMP_1098(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_1099(uint256) = i + 1
REF_723(None) -> tmp[TMP_1099]
TMP_1100 = CONVERT REF_723 to uint160
b2(uint160) := TMP_1100(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_1101(bool) = b1 >= 97
TMP_1102(bool) = b1 <= 102
TMP_1103(bool) = TMP_1101 && TMP_1102
CONDITION TMP_1103"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_1104(bool) = b1 >= 65
TMP_1105(bool) = b1 <= 70
TMP_1106(bool) = TMP_1104 && TMP_1105
CONDITION TMP_1106"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_1107(bool) = b1 >= 48
TMP_1108(bool) = b1 <= 57
TMP_1109(bool) = TMP_1107 && TMP_1108
CONDITION TMP_1109"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_1110(bool) = b2 >= 97
TMP_1111(bool) = b2 <= 102
TMP_1112(bool) = TMP_1110 && TMP_1111
CONDITION TMP_1112"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_1113(bool) = b2 >= 65
TMP_1114(bool) = b2 <= 70
TMP_1115(bool) = TMP_1113 && TMP_1114
CONDITION TMP_1115"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_1116(bool) = b2 >= 48
TMP_1117(bool) = b2 <= 57
TMP_1118(bool) = TMP_1116 && TMP_1117
CONDITION TMP_1118"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_1119(uint160) = b1 * 16
TMP_1120(uint160) = TMP_1119 + b2
iaddr(uint160) = iaddr + TMP_1120"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_1121 = CONVERT iaddr to address
RETURN TMP_1121"];
}
// Function: 9558.sol-Crowdsale-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_1190(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_1190"];
}
// Function: 9558.sol-Crowdsale-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_1191 = CONVERT _a to bytes
bresult(bytes) := TMP_1191(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_768 -> LENGTH bresult
TMP_1192(bool) = i < REF_768
CONDITION TMP_1192"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_769(None) -> bresult[i]
TMP_1193(bool) = REF_769 >= 48
REF_770(None) -> bresult[i]
TMP_1194(bool) = REF_770 <= 57
TMP_1195(bool) = TMP_1193 && TMP_1194
CONDITION TMP_1195"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_1196(bool) = _b == 0
CONDITION TMP_1196"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_1197(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_771(None) -> bresult[i]
TMP_1198 = CONVERT REF_771 to uint256
TMP_1199(uint256) = TMP_1198 - 48
mint(uint256) = mint + TMP_1199"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_772(None) -> bresult[i]
TMP_1200(bool) = REF_772 == 46
CONDITION TMP_1200"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_1201(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_1202(bool) = _b > 0
CONDITION TMP_1202"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_1203(uint256) = 10 ** _b
mint(uint256) = mint * TMP_1203"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 9558.sol-Crowdsale-refund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > ICO_FINISH && ! isIcoTrue())

IRs:
TMP_1482(bool) = now > ICO_FINISH
TMP_1483(bool) = INTERNAL_CALL, Crowdsale.isIcoTrue()()
TMP_1484 = UnaryType.BANG TMP_1483 
TMP_1485(bool) = TMP_1482 && TMP_1484
TMP_1486(None) = SOLIDITY_CALL require(bool)(TMP_1485)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(contributorsBalances[msg.sender] != 0)

IRs:
REF_841(uint256) -> contributorsBalances[msg.sender]
TMP_1487(bool) = REF_841 != 0
TMP_1488(None) = SOLIDITY_CALL require(bool)(TMP_1487)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
balance = contributorsBalances[msg.sender]

IRs:
REF_842(uint256) -> contributorsBalances[msg.sender]
balance(uint256) := REF_842(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
contributorsBalances[msg.sender] = 0

IRs:
REF_843(uint256) -> contributorsBalances[msg.sender]
REF_843(uint256) (->contributorsBalances) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
msg.sender.transfer(balance)

IRs:
Transfer dest:msg.sender value:balance"];
}
// Function: 9558.sol-Crowdsale-requestOraclizeBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateFlag = false

IRs:
updateFlag(bool) := False(bool)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
address(this).balance >= oraclizeBalance

IRs:
TMP_1517 = CONVERT this to address
TMP_1518(uint256) = SOLIDITY_CALL balance(address)(TMP_1517)
TMP_1519(bool) = TMP_1518 >= oraclizeBalance
CONDITION TMP_1519"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner.transfer(oraclizeBalance)

IRs:
Transfer dest:owner value:oraclizeBalance"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_1521 = CONVERT this to address
TMP_1522(uint256) = SOLIDITY_CALL balance(address)(TMP_1521)
Transfer dest:owner value:TMP_1522"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeBalance = 0

IRs:
oraclizeBalance(uint256) := 0(uint256)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 9558.sol-Crowdsale-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 9558.sol-Crowdsale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_1535(uint256) = 60 * 60
TMP_1536(uint256) = TMP_1535 * 24
day(uint256) := TMP_1536(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_1537(uint256) = 60 * 60
TMP_1538(uint256) = TMP_1537 * 24
TMP_1539(uint256) = TMP_1538 * 7
week(uint256) := TMP_1539(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_1540(uint256) = 60 * 60
TMP_1541(uint256) = TMP_1540 * 24
TMP_1542(uint256) = TMP_1541 * 30
month(uint256) := TMP_1542(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
PRE_ICO_START = 1528243201

IRs:
PRE_ICO_START(uint256) := 1528243201(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
PRE_ICO_FINISH = 1530403199

IRs:
PRE_ICO_FINISH(uint256) := 1530403199(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
PRE_ICO_MIN_CAP = 0

IRs:
PRE_ICO_MIN_CAP(uint256) := 0(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
PRE_ICO_MAX_CAP = 5000000000000000000000000

IRs:
PRE_ICO_MAX_CAP(uint256) := 5000000000000000000000000(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
ICO_START = 1530403201

IRs:
ICO_START(uint256) := 1530403201(uint256)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
ICO_FINISH = 1544918399

IRs:
ICO_FINISH(uint256) := 1544918399(uint256)"];
19->20;
20[label="Node Type: OTHER_ENTRYPOINT 20

EXPRESSION:
ICO_MIN_CAP = 10000000000000000000000

IRs:
ICO_MIN_CAP(uint256) := 10000000000000000000000(uint256)"];
20->21;
21[label="Node Type: OTHER_ENTRYPOINT 21

EXPRESSION:
ICO_MAX_CAP = 55000000000000000000000000

IRs:
ICO_MAX_CAP(uint256) := 55000000000000000000000000(uint256)"];
}
// Function: 9558.sol-Crowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
startingExchangePrice = 1902877214779731

IRs:
startingExchangePrice(uint256) := 1902877214779731(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
minDeposit = 10000000000000000

IRs:
minDeposit(uint256) := 10000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
areTokensSended = false

IRs:
areTokensSended(bool) := False(bool)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
updateFlag = true

IRs:
updateFlag(bool) := True(bool)"];
}
// Function: 9558.sol-Crowdsale-startOraclize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_time != 0)

IRs:
TMP_1508(bool) = _time != 0
TMP_1509(None) = SOLIDITY_CALL require(bool)(TMP_1508)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! updateFlag)

IRs:
TMP_1510 = UnaryType.BANG updateFlag 
TMP_1511(None) = SOLIDITY_CALL require(bool)(TMP_1510)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
updateFlag = true

IRs:
updateFlag(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclize_query(_time,URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0)

IRs:
TMP_1512(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string)(_time,URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeBalance = oraclizeBalance.sub(oraclize_getPrice(URL))

IRs:
TMP_1513(uint256) = INTERNAL_CALL, usingOraclize.oraclize_getPrice(string)(URL)
TMP_1514(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oraclizeBalance', 'TMP_1513'] 
oraclizeBalance(uint256) := TMP_1514(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 9558.sol-Crowdsale-stopOraclize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateFlag = false

IRs:
updateFlag(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9558.sol-Crowdsale-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_1122 = CONVERT _a to bytes
a(bytes) := TMP_1122(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_1123 = CONVERT _b to bytes
b(bytes) := TMP_1123(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_724 -> LENGTH a
minLength(uint256) := REF_724(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_725 -> LENGTH b
TMP_1124(bool) = REF_725 < minLength
CONDITION TMP_1124"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_726 -> LENGTH b
minLength(uint256) := REF_726(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_1125(bool) = i < minLength
CONDITION TMP_1125"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_727(None) -> a[i]
REF_728(None) -> b[i]
TMP_1126(bool) = REF_727 < REF_728
CONDITION TMP_1126"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_1127(uint256) = 0 - 1
RETURN TMP_1127"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_729(None) -> a[i]
REF_730(None) -> b[i]
TMP_1128(bool) = REF_729 > REF_730
CONDITION TMP_1128"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_1129(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_731 -> LENGTH a
REF_732 -> LENGTH b
TMP_1130(bool) = REF_731 < REF_732
CONDITION TMP_1130"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_1131(uint256) = 0 - 1
RETURN TMP_1131"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_733 -> LENGTH a
REF_734 -> LENGTH b
TMP_1132(bool) = REF_733 > REF_734
CONDITION TMP_1132"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 9558.sol-Crowdsale-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_1189(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_1189"];
}
// Function: 9558.sol-Crowdsale-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_1188(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_1188"];
}
// Function: 9558.sol-Crowdsale-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_1187(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_1187"];
}
// Function: 9558.sol-Crowdsale-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_1159 = CONVERT _a to bytes
_ba(bytes) := TMP_1159(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_1160 = CONVERT _b to bytes
_bb(bytes) := TMP_1160(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_1161 = CONVERT _c to bytes
_bc(bytes) := TMP_1161(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_1162 = CONVERT _d to bytes
_bd(bytes) := TMP_1162(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_1163 = CONVERT _e to bytes
_be(bytes) := TMP_1163(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_748 -> LENGTH _ba
REF_749 -> LENGTH _bb
TMP_1165(uint256) = REF_748 + REF_749
REF_750 -> LENGTH _bc
TMP_1166(uint256) = TMP_1165 + REF_750
REF_751 -> LENGTH _bd
TMP_1167(uint256) = TMP_1166 + REF_751
REF_752 -> LENGTH _be
TMP_1168(uint256) = TMP_1167 + REF_752
TMP_1169 = new string(TMP_1168)
abcde(string) := TMP_1169(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_1170 = CONVERT abcde to bytes
babcde(bytes) := TMP_1170(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_753 -> LENGTH _ba
TMP_1171(bool) = i < REF_753
CONDITION TMP_1171"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_1172(uint256) := k(uint256)
k(uint256) = k + 1
REF_754(None) -> babcde[TMP_1172]
REF_755(None) -> _ba[i]
REF_754(None) (->babcde) := REF_755(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_1173(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_756 -> LENGTH _bb
TMP_1174(bool) = i < REF_756
CONDITION TMP_1174"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_1175(uint256) := k(uint256)
k(uint256) = k + 1
REF_757(None) -> babcde[TMP_1175]
REF_758(None) -> _bb[i]
REF_757(None) (->babcde) := REF_758(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_1176(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_759 -> LENGTH _bc
TMP_1177(bool) = i < REF_759
CONDITION TMP_1177"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_1178(uint256) := k(uint256)
k(uint256) = k + 1
REF_760(None) -> babcde[TMP_1178]
REF_761(None) -> _bc[i]
REF_760(None) (->babcde) := REF_761(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_1179(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_762 -> LENGTH _bd
TMP_1180(bool) = i < REF_762
CONDITION TMP_1180"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_1181(uint256) := k(uint256)
k(uint256) = k + 1
REF_763(None) -> babcde[TMP_1181]
REF_764(None) -> _bd[i]
REF_763(None) (->babcde) := REF_764(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_1182(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_765 -> LENGTH _be
TMP_1183(bool) = i < REF_765
CONDITION TMP_1183"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_1184(uint256) := k(uint256)
k(uint256) = k + 1
REF_766(None) -> babcde[TMP_1184]
REF_767(None) -> _be[i]
REF_766(None) (->babcde) := REF_767(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_1185(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_1186 = CONVERT babcde to string
RETURN TMP_1186"];
}
// Function: 9558.sol-Crowdsale-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Buffer.init(buf,1024)

IRs:
LIBRARY_CALL, dest:Buffer, function:Buffer.init(Buffer.buffer,uint256), arguments:['buf', '1024'] "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buf.startArray()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.startArray(Buffer.buffer), arguments:['buf'] "];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arr.length

IRs:
REF_776 -> LENGTH arr
TMP_1218(bool) = i < REF_776
CONDITION TMP_1218"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
buf.encodeString(arr[i])

IRs:
REF_778(string) -> arr[i]
LIBRARY_CALL, dest:CBOR, function:CBOR.encodeString(Buffer.buffer,string), arguments:['buf', 'REF_778'] "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_1220(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buf.endSequence()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.endSequence(Buffer.buffer), arguments:['buf'] "];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
buf.buf

IRs:
REF_780(bytes) -> buf.buf
RETURN REF_780"];
}
// Function: 9558.sol-Crowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_1404 = CONVERT 0 to address
TMP_1405(bool) = _newOwner != TMP_1404
TMP_1406(None) = SOLIDITY_CALL require(bool)(TMP_1405)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9558.sol-Crowdsale-transferTechSupport(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == techSupport)

IRs:
TMP_1409(bool) = msg.sender == owner
TMP_1410(bool) = msg.sender == techSupport
TMP_1411(bool) = TMP_1409 || TMP_1410
TMP_1412(None) = SOLIDITY_CALL require(bool)(TMP_1411)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newTechSupport = _newSupport

IRs:
newTechSupport(address) := _newSupport(address)"];
}
// Function: 9558.sol-Crowdsale-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_1204(bool) = i == 0
CONDITION TMP_1204"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_1205(bool) = j != 0
CONDITION TMP_1205"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_1206(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_1208 = new bytes(len)
bstr(bytes) := TMP_1208(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_1209(uint256) = len - 1
k(uint256) := TMP_1209(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_1210(bool) = i != 0
CONDITION TMP_1210"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_1211(uint256) := k(uint256)
k(uint256) = k - 1
REF_773(bytes1) -> bstr[TMP_1211]
TMP_1212(uint256) = i % 10
TMP_1213(uint256) = 48 + TMP_1212
TMP_1214 = CONVERT TMP_1213 to bytes1
REF_773(bytes1) (->bstr) := TMP_1214(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_1215 = CONVERT bstr to string
RETURN TMP_1215"];
}
// Function: 9558.sol-Crowdsale-update()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_query(86400,URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0)

IRs:
TMP_1505(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string)(86400,URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeBalance = oraclizeBalance.sub(oraclize_getPrice(URL))

IRs:
TMP_1506(uint256) = INTERNAL_CALL, usingOraclize.oraclize_getPrice(string)(URL)
TMP_1507(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oraclizeBalance', 'TMP_1506'] 
oraclizeBalance(uint256) := TMP_1507(uint256)"];
}
// Function: 9558.sol-Crowdsale-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_1252 = new bytes(32)
sigr_(bytes) := TMP_1252(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_793(None) -> dersig[3]
TMP_1253 = CONVERT REF_793 to uint256
TMP_1254(uint256) = TMP_1253 - 32
TMP_1255(uint256) = 4 + TMP_1254
offset(uint256) := TMP_1255(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_1256(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_1256(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_1258 = new bytes(32)
sigs_(bytes) := TMP_1258(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_1259(uint256) = 32 + 2
offset(uint256) = offset + TMP_1259"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_1260(uint256) = offset - 1
REF_794(None) -> dersig[TMP_1260]
TMP_1261 = CONVERT REF_794 to uint256
TMP_1262(uint256) = TMP_1261 - 32
TMP_1263(uint256) = offset + TMP_1262
TMP_1264(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_1263,32,sigs_,0)
sigs_(bytes) := TMP_1264(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_3(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_3 index: 0 
signer(address)= UNPACK TUPLE_3 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(keccak256()(pubkey)) == signer

IRs:
TMP_1265(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_1266 = CONVERT TMP_1265 to address
TMP_1267(bool) = TMP_1266 == signer
CONDITION TMP_1267"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_4(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_4 index: 0 
signer(address)= UNPACK TUPLE_4 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(keccak256()(pubkey)) == signer)

IRs:
TMP_1268(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_1269 = CONVERT TMP_1268 to address
TMP_1270(bool) = TMP_1269 == signer
RETURN TMP_1270"];
}
// Function: 9558.sol-OraclizeAddrResolverI-getAddress()
digraph{
}
// Function: 9558.sol-OraclizeI-getPrice(string)
digraph{
}
// Function: 9558.sol-OraclizeI-getPrice(string,uint256)
digraph{
}
// Function: 9558.sol-OraclizeI-query(uint256,string,string)
digraph{
}
// Function: 9558.sol-OraclizeI-query2(uint256,string,string,string)
digraph{
}
// Function: 9558.sol-OraclizeI-query2_withGasLimit(uint256,string,string,string,uint256)
digraph{
}
// Function: 9558.sol-OraclizeI-queryN(uint256,string,bytes)
digraph{
}
// Function: 9558.sol-OraclizeI-queryN_withGasLimit(uint256,string,bytes,uint256)
digraph{
}
// Function: 9558.sol-OraclizeI-query_withGasLimit(uint256,string,string,uint256)
digraph{
}
// Function: 9558.sol-OraclizeI-randomDS_getSessionPubKeyHash()
digraph{
}
// Function: 9558.sol-OraclizeI-setCustomGasPrice(uint256)
digraph{
}
// Function: 9558.sol-OraclizeI-setProofType(bytes1)
digraph{
}
// Function: 9558.sol-Ownable-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newOwner

IRs:
TMP_21(bool) = msg.sender == newOwner
CONDITION TMP_21"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 9558.sol-Ownable-acceptSupport()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newTechSupport

IRs:
TMP_26(bool) = msg.sender == newTechSupport
CONDITION TMP_26"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
techSupport = newTechSupport

IRs:
techSupport(address) := newTechSupport(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 9558.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_27(bool) = msg.sender == owner
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9558.sol-Ownable-onlyTechSupport()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == techSupport || msg.sender == owner)

IRs:
TMP_29(bool) = msg.sender == techSupport
TMP_30(bool) = msg.sender == owner
TMP_31(bool) = TMP_29 || TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9558.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newOwner != address(0))

IRs:
TMP_17 = CONVERT 0 to address
TMP_18(bool) = _newOwner != TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9558.sol-Ownable-transferTechSupport(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == techSupport)

IRs:
TMP_22(bool) = msg.sender == owner
TMP_23(bool) = msg.sender == techSupport
TMP_24(bool) = TMP_22 || TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newTechSupport = _newSupport

IRs:
newTechSupport(address) := _newSupport(address)"];
}
// Function: 9558.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9558.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0 || b == 0

IRs:
TMP_0(bool) = a == 0
TMP_1(bool) = b == 0
TMP_2(bool) = TMP_0 || TMP_1
CONDITION TMP_2"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_3(uint256) = a * b
c(uint256) := TMP_3(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_4(uint256) = c / a
TMP_5(bool) = TMP_4 == b
TMP_6(None) = SOLIDITY_CALL assert(bool)(TMP_5)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9558.sol-SafeMath-pow(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
b == 0

IRs:
TMP_13(bool) = b == 0
CONDITION TMP_13"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a ** b

IRs:
TMP_14(uint256) = a ** b
c(uint256) := TMP_14(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_15(bool) = c >= a
TMP_16(None) = SOLIDITY_CALL assert(bool)(TMP_15)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9558.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 9558.sol-usingOraclize-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_137 = new bytes(0)
INTERNAL_CALL, usingOraclize.__callback(bytes32,string,bytes)(myid,result,TMP_137)"];
}
// Function: 9558.sol-usingOraclize-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1
"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
myid
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
result
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
proof
"];
}
// Function: 9558.sol-usingOraclize-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Buffer.init(buf,1024)

IRs:
LIBRARY_CALL, dest:Buffer, function:Buffer.init(Buffer.buffer,uint256), arguments:['buf', '1024'] "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buf.startArray()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.startArray(Buffer.buffer), arguments:['buf'] "];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arr.length

IRs:
REF_386 -> LENGTH arr
TMP_561(bool) = i < REF_386
CONDITION TMP_561"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
buf.encodeBytes(arr[i])

IRs:
REF_388(bytes) -> arr[i]
LIBRARY_CALL, dest:CBOR, function:CBOR.encodeBytes(Buffer.buffer,bytes), arguments:['buf', 'REF_388'] "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_563(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buf.endSequence()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.endSequence(Buffer.buffer), arguments:['buf'] "];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
buf.buf

IRs:
REF_390(bytes) -> buf.buf
RETURN REF_390"];
}
// Function: 9558.sol-usingOraclize-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_728(uint256) = length + toOffset
minLength(uint256) := TMP_728(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to.length >= minLength)

IRs:
REF_420 -> LENGTH to
TMP_729(bool) = REF_420 >= minLength
TMP_730(None) = SOLIDITY_CALL require(bool)(TMP_729)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_731(uint256) = 32 + fromOffset
i(uint256) := TMP_731(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_732(uint256) = 32 + toOffset
j(uint256) := TMP_732(uint256)"];
4->5;
5[label="Node Type: BEGIN_LOOP 5
"];
5->6;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_733(uint256) = 32 + fromOffset
TMP_734(uint256) = TMP_733 + length
TMP_735(bool) = i < TMP_734
CONDITION TMP_735"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
10->6;
11[label="Node Type: END_LOOP 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 9558.sol-usingOraclize-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_761(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_762 = CONVERT TMP_761 to OraclizeI
oraclize(OraclizeI) := TMP_762(OraclizeI)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9558.sol-usingOraclize-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_421 -> LENGTH sig
TMP_736(bool) = REF_421 != 65
CONDITION TMP_736"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_737(bool) = v < 27
CONDITION TMP_737"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_738(bool) = v != 27
TMP_739(bool) = v != 28
TMP_740(bool) = TMP_738 && TMP_739
CONDITION TMP_740"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_2(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_2"];
}
// Function: 9558.sol-usingOraclize-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 9558.sol-usingOraclize-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_470 = CONVERT _haystack to bytes
h(bytes) := TMP_470(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_471 = CONVERT _needle to bytes
n(bytes) := TMP_471(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_338 -> LENGTH h
TMP_472(bool) = REF_338 < 1
REF_339 -> LENGTH n
TMP_473(bool) = REF_339 < 1
TMP_474(bool) = TMP_472 || TMP_473
REF_340 -> LENGTH n
REF_341 -> LENGTH h
TMP_475(bool) = REF_340 > REF_341
TMP_476(bool) = TMP_474 || TMP_475
CONDITION TMP_476"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_477(uint256) = 0 - 1
RETURN TMP_477"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_342 -> LENGTH h
TMP_478(uint256) = 2 ** 128
TMP_479(uint256) = TMP_478 - 1
TMP_480(bool) = REF_342 > TMP_479
CONDITION TMP_480"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_481(uint256) = 0 - 1
RETURN TMP_481"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_343 -> LENGTH h
TMP_482(bool) = i < REF_343
CONDITION TMP_482"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_344(None) -> h[i]
REF_345(None) -> n[0]
TMP_483(bool) = REF_344 == REF_345
CONDITION TMP_483"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_346 -> LENGTH n
TMP_484(bool) = subindex < REF_346
TMP_485(uint256) = i + subindex
REF_347 -> LENGTH h
TMP_486(bool) = TMP_485 < REF_347
TMP_487(bool) = TMP_484 && TMP_486
TMP_488(uint256) = i + subindex
REF_348(None) -> h[TMP_488]
REF_349(None) -> n[subindex]
TMP_489(bool) = REF_348 == REF_349
TMP_490(bool) = TMP_487 && TMP_489
CONDITION TMP_490"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_491(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_350 -> LENGTH n
TMP_492(bool) = subindex == REF_350
CONDITION TMP_492"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_493 = CONVERT i to int256
RETURN TMP_493"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_494(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_495(uint256) = 0 - 1
RETURN TMP_495"];
}
// Function: 9558.sol-usingOraclize-matchBytes32Prefix(bytes32,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(prefix.length == n_random_bytes)

IRs:
REF_407 -> LENGTH prefix
TMP_653(bool) = REF_407 == n_random_bytes
TMP_654(None) = SOLIDITY_CALL require(bool)(TMP_653)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < n_random_bytes

IRs:
TMP_655(bool) = i < n_random_bytes
CONDITION TMP_655"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_408(None) -> content[i]
REF_409(None) -> prefix[i]
TMP_656(bool) = REF_408 != REF_409
CONDITION TMP_656"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_657(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: RETURN 11

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 9558.sol-usingOraclize-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_749 = CONVERT OAR to address
TMP_750(bool) = TMP_749 == 0
TMP_751 = CONVERT OAR to address
TMP_752(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_751)
TMP_753(bool) = TMP_752 == 0
TMP_754(bool) = TMP_750 || TMP_753
CONDITION TMP_754"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_755(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(oraclize) != OAR.getAddress()

IRs:
TMP_756 = CONVERT oraclize to address
TMP_757(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_758(bool) = TMP_756 != TMP_757
CONDITION TMP_758"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_759(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_760 = CONVERT TMP_759 to OraclizeI
oraclize(OraclizeI) := TMP_760(OraclizeI)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 9558.sol-usingOraclize-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_423(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_423"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9558.sol-usingOraclize-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 9558.sol-usingOraclize-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_139(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_139"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9558.sol-usingOraclize-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_141(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_141"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9558.sol-usingOraclize-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_nbytes > 0) && (_nbytes <= 32))

IRs:
TMP_565(bool) = _nbytes > 0
TMP_566(bool) = _nbytes <= 32
TMP_567(bool) = TMP_565 && TMP_566
TMP_568(None) = SOLIDITY_CALL require(bool)(TMP_567)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_delay *= 10

IRs:
_delay(uint256) = _delay * 10"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_570 = new bytes(1)
nbytes(bytes) := TMP_570(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_391(bytes1) -> nbytes[0]
TMP_571 = CONVERT _nbytes to bytes1
REF_391(bytes1) (->nbytes) := TMP_571(bytes1)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
unonce = new bytes(32)

IRs:
TMP_573 = new bytes(32)
unonce(bytes) := TMP_573(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
sessionKeyHash = new bytes(32)

IRs:
TMP_575 = new bytes(32)
sessionKeyHash(bytes) := TMP_575(bytes)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_576(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_576(bytes32)"];
7->8;
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
delay = new bytes(32)

IRs:
TMP_578 = new bytes(32)
delay(bytes) := TMP_578(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
delay_bytes8 = new bytes(8)

IRs:
TMP_580 = new bytes(8)
delay_bytes8(bytes) := TMP_580(bytes)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
copyBytes(delay,24,8,delay_bytes8,0)

IRs:
TMP_581(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(delay,24,8,delay_bytes8,0)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash,delay)

IRs:
args(bytes[4]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)', 'delay(bytes)']"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
queryId = oraclize_query(random,args,_customGasLimit)

IRs:
TMP_582(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[4],uint256)(random,args,_customGasLimit)
queryId(bytes32) := TMP_582(bytes32)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
delay_bytes8_left = new bytes(8)

IRs:
TMP_584 = new bytes(8)
delay_bytes8_left(bytes) := TMP_584(bytes)"];
17->18;
18[label="Node Type: INLINE ASM 18
"];
18->19;
19[label="Node Type: END INLINE ASM 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,keccak256()(delay_bytes8_left,args[1],sha256()(args[0]),args[2]))

IRs:
REF_392(bytes) -> args[1]
REF_393(bytes) -> args[0]
TMP_585(bytes32) = SOLIDITY_CALL sha256()(REF_393)
REF_394(bytes) -> args[2]
TMP_586(bytes32) = SOLIDITY_CALL keccak256()(delay_bytes8_left,REF_392,TMP_585,REF_394)
INTERNAL_CALL, usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_586)"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_344(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_344(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_201(bytes) -> dynargs[0]
REF_202(bytes) -> args[0]
REF_201(bytes) (->dynargs) := REF_202(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_345(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_345"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_356(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_356(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_207(bytes) -> dynargs[0]
REF_208(bytes) -> args[0]
REF_207(bytes) (->dynargs) := REF_208(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_357(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_357"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_360(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_360(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_209(bytes) -> dynargs[0]
REF_210(bytes) -> args[0]
REF_209(bytes) (->dynargs) := REF_210(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_211(bytes) -> dynargs[1]
REF_212(bytes) -> args[1]
REF_211(bytes) (->dynargs) := REF_212(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_361(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_361"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_372(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_372(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_221(bytes) -> dynargs[0]
REF_222(bytes) -> args[0]
REF_221(bytes) (->dynargs) := REF_222(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_223(bytes) -> dynargs[1]
REF_224(bytes) -> args[1]
REF_223(bytes) (->dynargs) := REF_224(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_373(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_373"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_376(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_376(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_225(bytes) -> dynargs[0]
REF_226(bytes) -> args[0]
REF_225(bytes) (->dynargs) := REF_226(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_227(bytes) -> dynargs[1]
REF_228(bytes) -> args[1]
REF_227(bytes) (->dynargs) := REF_228(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_229(bytes) -> dynargs[2]
REF_230(bytes) -> args[2]
REF_229(bytes) (->dynargs) := REF_230(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_377(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_377"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_388(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_388(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_243(bytes) -> dynargs[0]
REF_244(bytes) -> args[0]
REF_243(bytes) (->dynargs) := REF_244(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_245(bytes) -> dynargs[1]
REF_246(bytes) -> args[1]
REF_245(bytes) (->dynargs) := REF_246(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_247(bytes) -> dynargs[2]
REF_248(bytes) -> args[2]
REF_247(bytes) (->dynargs) := REF_248(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_389(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_389"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_392(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_392(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_249(bytes) -> dynargs[0]
REF_250(bytes) -> args[0]
REF_249(bytes) (->dynargs) := REF_250(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_251(bytes) -> dynargs[1]
REF_252(bytes) -> args[1]
REF_251(bytes) (->dynargs) := REF_252(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_253(bytes) -> dynargs[2]
REF_254(bytes) -> args[2]
REF_253(bytes) (->dynargs) := REF_254(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_255(bytes) -> dynargs[3]
REF_256(bytes) -> args[3]
REF_255(bytes) (->dynargs) := REF_256(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_393(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_393"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_404(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_404(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_273(bytes) -> dynargs[0]
REF_274(bytes) -> args[0]
REF_273(bytes) (->dynargs) := REF_274(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_275(bytes) -> dynargs[1]
REF_276(bytes) -> args[1]
REF_275(bytes) (->dynargs) := REF_276(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_277(bytes) -> dynargs[2]
REF_278(bytes) -> args[2]
REF_277(bytes) (->dynargs) := REF_278(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_279(bytes) -> dynargs[3]
REF_280(bytes) -> args[3]
REF_279(bytes) (->dynargs) := REF_280(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_405(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_405"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_408(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_408(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_281(bytes) -> dynargs[0]
REF_282(bytes) -> args[0]
REF_281(bytes) (->dynargs) := REF_282(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_283(bytes) -> dynargs[1]
REF_284(bytes) -> args[1]
REF_283(bytes) (->dynargs) := REF_284(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_285(bytes) -> dynargs[2]
REF_286(bytes) -> args[2]
REF_285(bytes) (->dynargs) := REF_286(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_287(bytes) -> dynargs[3]
REF_288(bytes) -> args[3]
REF_287(bytes) (->dynargs) := REF_288(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_289(bytes) -> dynargs[4]
REF_290(bytes) -> args[4]
REF_289(bytes) (->dynargs) := REF_290(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_409(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_409"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_420(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_420(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_311(bytes) -> dynargs[0]
REF_312(bytes) -> args[0]
REF_311(bytes) (->dynargs) := REF_312(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_313(bytes) -> dynargs[1]
REF_314(bytes) -> args[1]
REF_313(bytes) (->dynargs) := REF_314(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_315(bytes) -> dynargs[2]
REF_316(bytes) -> args[2]
REF_315(bytes) (->dynargs) := REF_316(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_317(bytes) -> dynargs[3]
REF_318(bytes) -> args[3]
REF_317(bytes) (->dynargs) := REF_318(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_319(bytes) -> dynargs[4]
REF_320(bytes) -> args[4]
REF_319(bytes) (->dynargs) := REF_320(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_421(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_421"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_311(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_311(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_312(uint256) = tx.gasprice * 200000
TMP_313(uint256) = 1000000000000000000 + TMP_312
TMP_314(bool) = price > TMP_313
CONDITION TMP_314"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_315(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_315(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_317(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_317"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_335(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_335(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_336(uint256) = tx.gasprice * gaslimit
TMP_337(uint256) = 1000000000000000000 + TMP_336
TMP_338(bool) = price > TMP_337
CONDITION TMP_338"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_339(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_339(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_341(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_341"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_143(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_143(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_144(uint256) = tx.gasprice * 200000
TMP_145(uint256) = 1000000000000000000 + TMP_144
TMP_146(bool) = price > TMP_145
CONDITION TMP_146"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_148(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_148"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_171(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_171(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_172(uint256) = tx.gasprice * 200000
TMP_173(uint256) = 1000000000000000000 + TMP_172
TMP_174(bool) = price > TMP_173
CONDITION TMP_174"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_176(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_176"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_192(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_192(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_193(uint256) = tx.gasprice * gaslimit
TMP_194(uint256) = 1000000000000000000 + TMP_193
TMP_195(bool) = price > TMP_194
CONDITION TMP_195"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_197(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_197"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_164(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_164(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_165(uint256) = tx.gasprice * gaslimit
TMP_166(uint256) = 1000000000000000000 + TMP_165
TMP_167(bool) = price > TMP_166
CONDITION TMP_167"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_169(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_169"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_232(string[])  = new string[](1)
dynargs(string[]) = ['TMP_232(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_69(string) -> dynargs[0]
REF_70(string) -> args[0]
REF_69(string) (->dynargs) := REF_70(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_233(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_233"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_244(string[])  = new string[](1)
dynargs(string[]) = ['TMP_244(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_75(string) -> dynargs[0]
REF_76(string) -> args[0]
REF_75(string) (->dynargs) := REF_76(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_245(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_245"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_248(string[])  = new string[](2)
dynargs(string[]) = ['TMP_248(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_77(string) -> dynargs[0]
REF_78(string) -> args[0]
REF_77(string) (->dynargs) := REF_78(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_79(string) -> dynargs[1]
REF_80(string) -> args[1]
REF_79(string) (->dynargs) := REF_80(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_249(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_249"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_260(string[])  = new string[](2)
dynargs(string[]) = ['TMP_260(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_89(string) -> dynargs[0]
REF_90(string) -> args[0]
REF_89(string) (->dynargs) := REF_90(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_91(string) -> dynargs[1]
REF_92(string) -> args[1]
REF_91(string) (->dynargs) := REF_92(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_261(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_261"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_264(string[])  = new string[](3)
dynargs(string[]) = ['TMP_264(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_93(string) -> dynargs[0]
REF_94(string) -> args[0]
REF_93(string) (->dynargs) := REF_94(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_95(string) -> dynargs[1]
REF_96(string) -> args[1]
REF_95(string) (->dynargs) := REF_96(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_97(string) -> dynargs[2]
REF_98(string) -> args[2]
REF_97(string) (->dynargs) := REF_98(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_265(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_265"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_276(string[])  = new string[](3)
dynargs(string[]) = ['TMP_276(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_111(string) -> dynargs[0]
REF_112(string) -> args[0]
REF_111(string) (->dynargs) := REF_112(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_113(string) -> dynargs[1]
REF_114(string) -> args[1]
REF_113(string) (->dynargs) := REF_114(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_115(string) -> dynargs[2]
REF_116(string) -> args[2]
REF_115(string) (->dynargs) := REF_116(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_277(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_277"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_280(string[])  = new string[](4)
dynargs(string[]) = ['TMP_280(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_117(string) -> dynargs[0]
REF_118(string) -> args[0]
REF_117(string) (->dynargs) := REF_118(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_119(string) -> dynargs[1]
REF_120(string) -> args[1]
REF_119(string) (->dynargs) := REF_120(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_121(string) -> dynargs[2]
REF_122(string) -> args[2]
REF_121(string) (->dynargs) := REF_122(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_123(string) -> dynargs[3]
REF_124(string) -> args[3]
REF_123(string) (->dynargs) := REF_124(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_281(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_281"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_292(string[])  = new string[](4)
dynargs(string[]) = ['TMP_292(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_141(string) -> dynargs[0]
REF_142(string) -> args[0]
REF_141(string) (->dynargs) := REF_142(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_143(string) -> dynargs[1]
REF_144(string) -> args[1]
REF_143(string) (->dynargs) := REF_144(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_145(string) -> dynargs[2]
REF_146(string) -> args[2]
REF_145(string) (->dynargs) := REF_146(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_147(string) -> dynargs[3]
REF_148(string) -> args[3]
REF_147(string) (->dynargs) := REF_148(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_293(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_293"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_296(string[])  = new string[](5)
dynargs(string[]) = ['TMP_296(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_149(string) -> dynargs[0]
REF_150(string) -> args[0]
REF_149(string) (->dynargs) := REF_150(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_151(string) -> dynargs[1]
REF_152(string) -> args[1]
REF_151(string) (->dynargs) := REF_152(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_153(string) -> dynargs[2]
REF_154(string) -> args[2]
REF_153(string) (->dynargs) := REF_154(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_155(string) -> dynargs[3]
REF_156(string) -> args[3]
REF_155(string) (->dynargs) := REF_156(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_157(string) -> dynargs[4]
REF_158(string) -> args[4]
REF_157(string) (->dynargs) := REF_158(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_297(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_297"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_308(string[])  = new string[](5)
dynargs(string[]) = ['TMP_308(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_179(string) -> dynargs[0]
REF_180(string) -> args[0]
REF_179(string) (->dynargs) := REF_180(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_181(string) -> dynargs[1]
REF_182(string) -> args[1]
REF_181(string) (->dynargs) := REF_182(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_183(string) -> dynargs[2]
REF_184(string) -> args[2]
REF_183(string) (->dynargs) := REF_184(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_185(string) -> dynargs[3]
REF_186(string) -> args[3]
REF_185(string) (->dynargs) := REF_186(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_187(string) -> dynargs[4]
REF_188(string) -> args[4]
REF_187(string) (->dynargs) := REF_188(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_309(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_309"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_199(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_199(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_200(uint256) = tx.gasprice * 200000
TMP_201(uint256) = 1000000000000000000 + TMP_200
TMP_202(bool) = price > TMP_201
CONDITION TMP_202"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_203(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_203(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_205(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_205"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_223(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_223(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_224(uint256) = tx.gasprice * gaslimit
TMP_225(uint256) = 1000000000000000000 + TMP_224
TMP_226(bool) = price > TMP_225
CONDITION TMP_226"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_227(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_227(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_229(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_229"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_348(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_348(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_203(bytes) -> dynargs[0]
REF_204(bytes) -> args[0]
REF_203(bytes) (->dynargs) := REF_204(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_349(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_349"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_352(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_352(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_205(bytes) -> dynargs[0]
REF_206(bytes) -> args[0]
REF_205(bytes) (->dynargs) := REF_206(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_353(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_353"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_364(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_364(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_213(bytes) -> dynargs[0]
REF_214(bytes) -> args[0]
REF_213(bytes) (->dynargs) := REF_214(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_215(bytes) -> dynargs[1]
REF_216(bytes) -> args[1]
REF_215(bytes) (->dynargs) := REF_216(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_365(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_365"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_368(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_368(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_217(bytes) -> dynargs[0]
REF_218(bytes) -> args[0]
REF_217(bytes) (->dynargs) := REF_218(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_219(bytes) -> dynargs[1]
REF_220(bytes) -> args[1]
REF_219(bytes) (->dynargs) := REF_220(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_369(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_369"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_380(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_380(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_231(bytes) -> dynargs[0]
REF_232(bytes) -> args[0]
REF_231(bytes) (->dynargs) := REF_232(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_233(bytes) -> dynargs[1]
REF_234(bytes) -> args[1]
REF_233(bytes) (->dynargs) := REF_234(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_235(bytes) -> dynargs[2]
REF_236(bytes) -> args[2]
REF_235(bytes) (->dynargs) := REF_236(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_381(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_381"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_384(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_384(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_237(bytes) -> dynargs[0]
REF_238(bytes) -> args[0]
REF_237(bytes) (->dynargs) := REF_238(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_239(bytes) -> dynargs[1]
REF_240(bytes) -> args[1]
REF_239(bytes) (->dynargs) := REF_240(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_241(bytes) -> dynargs[2]
REF_242(bytes) -> args[2]
REF_241(bytes) (->dynargs) := REF_242(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_385(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_385"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_396(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_396(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_257(bytes) -> dynargs[0]
REF_258(bytes) -> args[0]
REF_257(bytes) (->dynargs) := REF_258(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_259(bytes) -> dynargs[1]
REF_260(bytes) -> args[1]
REF_259(bytes) (->dynargs) := REF_260(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_261(bytes) -> dynargs[2]
REF_262(bytes) -> args[2]
REF_261(bytes) (->dynargs) := REF_262(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_263(bytes) -> dynargs[3]
REF_264(bytes) -> args[3]
REF_263(bytes) (->dynargs) := REF_264(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_397(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_397"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_400(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_400(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_265(bytes) -> dynargs[0]
REF_266(bytes) -> args[0]
REF_265(bytes) (->dynargs) := REF_266(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_267(bytes) -> dynargs[1]
REF_268(bytes) -> args[1]
REF_267(bytes) (->dynargs) := REF_268(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_269(bytes) -> dynargs[2]
REF_270(bytes) -> args[2]
REF_269(bytes) (->dynargs) := REF_270(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_271(bytes) -> dynargs[3]
REF_272(bytes) -> args[3]
REF_271(bytes) (->dynargs) := REF_272(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_401(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_401"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_412(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_412(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_291(bytes) -> dynargs[0]
REF_292(bytes) -> args[0]
REF_291(bytes) (->dynargs) := REF_292(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_293(bytes) -> dynargs[1]
REF_294(bytes) -> args[1]
REF_293(bytes) (->dynargs) := REF_294(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_295(bytes) -> dynargs[2]
REF_296(bytes) -> args[2]
REF_295(bytes) (->dynargs) := REF_296(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_297(bytes) -> dynargs[3]
REF_298(bytes) -> args[3]
REF_297(bytes) (->dynargs) := REF_298(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_299(bytes) -> dynargs[4]
REF_300(bytes) -> args[4]
REF_299(bytes) (->dynargs) := REF_300(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_413(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_413"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_416(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_416(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_301(bytes) -> dynargs[0]
REF_302(bytes) -> args[0]
REF_301(bytes) (->dynargs) := REF_302(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_303(bytes) -> dynargs[1]
REF_304(bytes) -> args[1]
REF_303(bytes) (->dynargs) := REF_304(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_305(bytes) -> dynargs[2]
REF_306(bytes) -> args[2]
REF_305(bytes) (->dynargs) := REF_306(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_307(bytes) -> dynargs[3]
REF_308(bytes) -> args[3]
REF_307(bytes) (->dynargs) := REF_308(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_309(bytes) -> dynargs[4]
REF_310(bytes) -> args[4]
REF_309(bytes) (->dynargs) := REF_310(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_417(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_417"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_319(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_320(uint256) = tx.gasprice * 200000
TMP_321(uint256) = 1000000000000000000 + TMP_320
TMP_322(bool) = price > TMP_321
CONDITION TMP_322"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_323(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_323(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_325(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_325"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_327(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_327(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_328(uint256) = tx.gasprice * gaslimit
TMP_329(uint256) = 1000000000000000000 + TMP_328
TMP_330(bool) = price > TMP_329
CONDITION TMP_330"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_331(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_331(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_333(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_333"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_150(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_150(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_151(uint256) = tx.gasprice * 200000
TMP_152(uint256) = 1000000000000000000 + TMP_151
TMP_153(bool) = price > TMP_152
CONDITION TMP_153"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_155(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_155"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_178(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_178(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_179(uint256) = tx.gasprice * 200000
TMP_180(uint256) = 1000000000000000000 + TMP_179
TMP_181(bool) = price > TMP_180
CONDITION TMP_181"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_183(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_183"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_185(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_185(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_186(uint256) = tx.gasprice * gaslimit
TMP_187(uint256) = 1000000000000000000 + TMP_186
TMP_188(bool) = price > TMP_187
CONDITION TMP_188"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_190(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_190"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_157(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_157(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_158(uint256) = tx.gasprice * gaslimit
TMP_159(uint256) = 1000000000000000000 + TMP_158
TMP_160(bool) = price > TMP_159
CONDITION TMP_160"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_162(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_162"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_236(string[])  = new string[](1)
dynargs(string[]) = ['TMP_236(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_71(string) -> dynargs[0]
REF_72(string) -> args[0]
REF_71(string) (->dynargs) := REF_72(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_237(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_237"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_240(string[])  = new string[](1)
dynargs(string[]) = ['TMP_240(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_73(string) -> dynargs[0]
REF_74(string) -> args[0]
REF_73(string) (->dynargs) := REF_74(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_241(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_241"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_252(string[])  = new string[](2)
dynargs(string[]) = ['TMP_252(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_81(string) -> dynargs[0]
REF_82(string) -> args[0]
REF_81(string) (->dynargs) := REF_82(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_83(string) -> dynargs[1]
REF_84(string) -> args[1]
REF_83(string) (->dynargs) := REF_84(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_253(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_253"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_256(string[])  = new string[](2)
dynargs(string[]) = ['TMP_256(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_85(string) -> dynargs[0]
REF_86(string) -> args[0]
REF_85(string) (->dynargs) := REF_86(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_87(string) -> dynargs[1]
REF_88(string) -> args[1]
REF_87(string) (->dynargs) := REF_88(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_257(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_257"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_268(string[])  = new string[](3)
dynargs(string[]) = ['TMP_268(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_99(string) -> dynargs[0]
REF_100(string) -> args[0]
REF_99(string) (->dynargs) := REF_100(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_101(string) -> dynargs[1]
REF_102(string) -> args[1]
REF_101(string) (->dynargs) := REF_102(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_103(string) -> dynargs[2]
REF_104(string) -> args[2]
REF_103(string) (->dynargs) := REF_104(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_269(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_269"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_272(string[])  = new string[](3)
dynargs(string[]) = ['TMP_272(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_105(string) -> dynargs[0]
REF_106(string) -> args[0]
REF_105(string) (->dynargs) := REF_106(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_107(string) -> dynargs[1]
REF_108(string) -> args[1]
REF_107(string) (->dynargs) := REF_108(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_109(string) -> dynargs[2]
REF_110(string) -> args[2]
REF_109(string) (->dynargs) := REF_110(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_273(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_273"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_284(string[])  = new string[](4)
dynargs(string[]) = ['TMP_284(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_125(string) -> dynargs[0]
REF_126(string) -> args[0]
REF_125(string) (->dynargs) := REF_126(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_127(string) -> dynargs[1]
REF_128(string) -> args[1]
REF_127(string) (->dynargs) := REF_128(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_129(string) -> dynargs[2]
REF_130(string) -> args[2]
REF_129(string) (->dynargs) := REF_130(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_131(string) -> dynargs[3]
REF_132(string) -> args[3]
REF_131(string) (->dynargs) := REF_132(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_285(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_285"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_288(string[])  = new string[](4)
dynargs(string[]) = ['TMP_288(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_133(string) -> dynargs[0]
REF_134(string) -> args[0]
REF_133(string) (->dynargs) := REF_134(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_135(string) -> dynargs[1]
REF_136(string) -> args[1]
REF_135(string) (->dynargs) := REF_136(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_137(string) -> dynargs[2]
REF_138(string) -> args[2]
REF_137(string) (->dynargs) := REF_138(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_139(string) -> dynargs[3]
REF_140(string) -> args[3]
REF_139(string) (->dynargs) := REF_140(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_289(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_289"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_300(string[])  = new string[](5)
dynargs(string[]) = ['TMP_300(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_159(string) -> dynargs[0]
REF_160(string) -> args[0]
REF_159(string) (->dynargs) := REF_160(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_161(string) -> dynargs[1]
REF_162(string) -> args[1]
REF_161(string) (->dynargs) := REF_162(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_163(string) -> dynargs[2]
REF_164(string) -> args[2]
REF_163(string) (->dynargs) := REF_164(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_165(string) -> dynargs[3]
REF_166(string) -> args[3]
REF_165(string) (->dynargs) := REF_166(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_167(string) -> dynargs[4]
REF_168(string) -> args[4]
REF_167(string) (->dynargs) := REF_168(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_301(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_301"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_304(string[])  = new string[](5)
dynargs(string[]) = ['TMP_304(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_169(string) -> dynargs[0]
REF_170(string) -> args[0]
REF_169(string) (->dynargs) := REF_170(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_171(string) -> dynargs[1]
REF_172(string) -> args[1]
REF_171(string) (->dynargs) := REF_172(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_173(string) -> dynargs[2]
REF_174(string) -> args[2]
REF_173(string) (->dynargs) := REF_174(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_175(string) -> dynargs[3]
REF_176(string) -> args[3]
REF_175(string) (->dynargs) := REF_176(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_177(string) -> dynargs[4]
REF_178(string) -> args[4]
REF_177(string) (->dynargs) := REF_178(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_305(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_305"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_207(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_207(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_208(uint256) = tx.gasprice * 200000
TMP_209(uint256) = 1000000000000000000 + TMP_208
TMP_210(bool) = price > TMP_209
CONDITION TMP_210"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_211(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_211(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_213(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_213"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_215(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_215(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_216(uint256) = tx.gasprice * gaslimit
TMP_217(uint256) = 1000000000000000000 + TMP_216
TMP_218(bool) = price > TMP_217
CONDITION TMP_218"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_219(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_219(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_221(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_221"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 9558.sol-usingOraclize-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_429(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_429"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9558.sol-usingOraclize-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_proof[0] == L) && (_proof[1] == P) && (_proof[2] == 1))

IRs:
REF_425(None) -> _proof[0]
TMP_763(bool) = REF_425 == L
REF_426(None) -> _proof[1]
TMP_764(bool) = REF_426 == P
TMP_765(bool) = TMP_763 && TMP_764
REF_427(None) -> _proof[2]
TMP_766(bool) = REF_427 == 1
TMP_767(bool) = TMP_765 && TMP_766
TMP_768(None) = SOLIDITY_CALL require(bool)(TMP_767)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_769 = CONVERT _result to bytes
TMP_770(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_771(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_769,TMP_770)
proofVerified(bool) := TMP_771(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(proofVerified)

IRs:
TMP_772(None) = SOLIDITY_CALL require(bool)(proofVerified)"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9558.sol-usingOraclize-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_658(uint256) = 3 + 65
TMP_659(uint256) = 3 + 65
TMP_660(uint256) = TMP_659 + 1
REF_410(None) -> proof[TMP_660]
TMP_661 = CONVERT REF_410 to uint256
TMP_662(uint256) = TMP_661 + 2
TMP_663(uint256) = TMP_658 + TMP_662
TMP_664(uint256) = TMP_663 + 32
ledgerProofLength(uint256) := TMP_664(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_666 = new bytes(32)
keyhash(bytes) := TMP_666(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_667(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! (keccak256()(keyhash) == keccak256()(sha256()(context_name,queryId)))

IRs:
TMP_668(bytes32) = SOLIDITY_CALL keccak256()(keyhash)
TMP_669(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_670(bytes32) = SOLIDITY_CALL keccak256()(TMP_669)
TMP_671(bool) = TMP_668 == TMP_670
TMP_672 = UnaryType.BANG TMP_671 
CONDITION TMP_672"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_674(uint256) = 32 + 8
TMP_675(uint256) = TMP_674 + 1
TMP_676(uint256) = TMP_675 + 32
TMP_677(uint256) = ledgerProofLength + TMP_676
TMP_678(uint256) = TMP_677 + 1
REF_411(None) -> proof[TMP_678]
TMP_679 = CONVERT REF_411 to uint256
TMP_680(uint256) = TMP_679 + 2
TMP_681 = new bytes(TMP_680)
sig1(bytes) := TMP_681(bytes)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_682(uint256) = 32 + 8
TMP_683(uint256) = TMP_682 + 1
TMP_684(uint256) = TMP_683 + 32
TMP_685(uint256) = ledgerProofLength + TMP_684
REF_412 -> LENGTH sig1
TMP_686(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_685,REF_412,sig1,0)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! matchBytes32Prefix(sha256()(sig1),result,uint256(proof[ledgerProofLength + 32 + 8]))

IRs:
TMP_687(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_688(uint256) = ledgerProofLength + 32
TMP_689(uint256) = TMP_688 + 8
REF_413(None) -> proof[TMP_689]
TMP_690 = CONVERT REF_413 to uint256
TMP_691(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256)(TMP_687,result,TMP_690)
TMP_692 = UnaryType.BANG TMP_691 
CONDITION TMP_692"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_694(uint256) = 8 + 1
TMP_695(uint256) = TMP_694 + 32
TMP_696 = new bytes(TMP_695)
commitmentSlice1(bytes) := TMP_696(bytes)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_697(uint256) = ledgerProofLength + 32
TMP_698(uint256) = 8 + 1
TMP_699(uint256) = TMP_698 + 32
TMP_700(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_697,TMP_699,commitmentSlice1,0)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_702 = new bytes(64)
sessionPubkey(bytes) := TMP_702(bytes)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_703(uint256) = ledgerProofLength + 32
TMP_704(uint256) = 8 + 1
TMP_705(uint256) = TMP_704 + 32
TMP_706(uint256) = TMP_703 + TMP_705
REF_414 -> LENGTH sig1
TMP_707(uint256) = TMP_706 + REF_414
TMP_708(uint256) = TMP_707 + 65
sig2offset(uint256) := TMP_708(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_709(uint256) = sig2offset - 64
TMP_710(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_709,64,sessionPubkey,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_711(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_711(bytes32)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
oraclize_randomDS_args[queryId] == keccak256()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_415(bytes32) -> oraclize_randomDS_args[queryId]
TMP_712(bytes32) = SOLIDITY_CALL keccak256()(commitmentSlice1,sessionPubkeyHash)
TMP_713(bool) = REF_415 == TMP_712
CONDITION TMP_713"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_416(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_416 "];
19->21;
20[label="Node Type: RETURN 20

EXPRESSION:
false

IRs:
RETURN False"];
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_715(uint256) = 32 + 8
TMP_716(uint256) = TMP_715 + 1
TMP_717(uint256) = TMP_716 + 32
TMP_718 = new bytes(TMP_717)
tosign1(bytes) := TMP_718(bytes)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_719(uint256) = 32 + 8
TMP_720(uint256) = TMP_719 + 1
TMP_721(uint256) = TMP_720 + 32
TMP_722(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_721,tosign1,0)"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
! verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_723(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_724(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_723,sig1,sessionPubkey)
TMP_725 = UnaryType.BANG TMP_724 
CONDITION TMP_725"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: RETURN 25

EXPRESSION:
false

IRs:
RETURN False"];
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: IF 27

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_417(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_726(bool) = REF_417 == False
CONDITION TMP_726"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_418(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_727(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_418(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_727(bool)"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: RETURN 30

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_419(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_419"];
}
// Function: 9558.sol-usingOraclize-oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_404(None) -> _proof[0]
TMP_644(bool) = REF_404 != L
REF_405(None) -> _proof[1]
TMP_645(bool) = REF_405 != P
TMP_646(bool) = TMP_644 || TMP_645
REF_406(None) -> _proof[2]
TMP_647(bool) = REF_406 != 1
TMP_648(bool) = TMP_646 || TMP_647
CONDITION TMP_648"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
1

IRs:
RETURN 1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_649 = CONVERT _result to bytes
TMP_650(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_651(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_649,TMP_650)
proofVerified(bool) := TMP_651(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_652(bool) = proofVerified == False
CONDITION TMP_652"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
2

IRs:
RETURN 2"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 9558.sol-usingOraclize-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_609(uint256) = sig2offset + 1
REF_398(None) -> proof[TMP_609]
TMP_610 = CONVERT REF_398 to uint256
TMP_611(uint256) = TMP_610 + 2
TMP_612 = new bytes(TMP_611)
sig2(bytes) := TMP_612(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_399 -> LENGTH sig2
TMP_613(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_399,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_615 = new bytes(64)
appkey1_pubkey(bytes) := TMP_615(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_616(uint256) = 3 + 1
TMP_617(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_616,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_619(uint256) = 1 + 65
TMP_620(uint256) = TMP_619 + 32
TMP_621 = new bytes(TMP_620)
tosign2(bytes) := TMP_621(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = bytes1(1)

IRs:
REF_400(bytes1) -> tosign2[0]
TMP_622 = CONVERT 1 to bytes1
REF_400(bytes1) (->tosign2) := TMP_622(bytes1)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_623(uint256) = sig2offset - 65
TMP_624(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_623,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_625(uint256) = 1 + 65
TMP_626(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_625)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_627(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_628(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_627,sig2,appkey1_pubkey)
sigok(bool) := TMP_628(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_629(bool) = sigok == False
CONDITION TMP_629"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_631(uint256) = 1 + 65
TMP_632 = new bytes(TMP_631)
tosign3(bytes) := TMP_632(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_401(uint256) -> tosign3[0]
REF_401(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_633(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_635(uint256) = 3 + 65
TMP_636(uint256) = TMP_635 + 1
REF_402(None) -> proof[TMP_636]
TMP_637 = CONVERT REF_402 to uint256
TMP_638(uint256) = TMP_637 + 2
TMP_639 = new bytes(TMP_638)
sig3(bytes) := TMP_639(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_640(uint256) = 3 + 65
REF_403 -> LENGTH sig3
TMP_641(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_640,REF_403,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_642(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_643(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_642,sig3,LEDGERKEY)
sigok(bool) := TMP_643(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 9558.sol-usingOraclize-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_randomDS_args[queryId] = commitment

IRs:
REF_395(bytes32) -> oraclize_randomDS_args[queryId]
REF_395(bytes32) (->oraclize_randomDS_args) := commitment(bytes32)"];
}
// Function: 9558.sol-usingOraclize-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_427"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9558.sol-usingOraclize-oraclize_setNetwork()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_111(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_112(bool) = TMP_111 > 0
CONDITION TMP_112"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_113 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_113(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_115(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_116(bool) = TMP_115 > 0
CONDITION TMP_116"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_117 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_117(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_119(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_120(bool) = TMP_119 > 0
CONDITION TMP_120"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_121 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_121(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_123(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_124(bool) = TMP_123 > 0
CONDITION TMP_124"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_125 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_125(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_127(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_128(bool) = TMP_127 > 0
CONDITION TMP_128"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_129 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_129(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_130(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_131(bool) = TMP_130 > 0
CONDITION TMP_131"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_132 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_132(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_133(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_134(bool) = TMP_133 > 0
CONDITION TMP_134"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_135 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_135(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 9558.sol-usingOraclize-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_setNetwork()

IRs:
TMP_110(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork()()
RETURN TMP_110"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
networkID
"];
}
// Function: 9558.sol-usingOraclize-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 9558.sol-usingOraclize-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_425"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 9558.sol-usingOraclize-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_431 = CONVERT _a to bytes
tmp(bytes) := TMP_431(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_432(uint256) = 2 * 20
TMP_433(uint256) = 2 + TMP_432
TMP_434(bool) = i < TMP_433
CONDITION TMP_434"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_325(None) -> tmp[i]
TMP_435 = CONVERT REF_325 to uint160
b1(uint160) := TMP_435(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_436(uint256) = i + 1
REF_326(None) -> tmp[TMP_436]
TMP_437 = CONVERT REF_326 to uint160
b2(uint160) := TMP_437(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_438(bool) = b1 >= 97
TMP_439(bool) = b1 <= 102
TMP_440(bool) = TMP_438 && TMP_439
CONDITION TMP_440"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_441(bool) = b1 >= 65
TMP_442(bool) = b1 <= 70
TMP_443(bool) = TMP_441 && TMP_442
CONDITION TMP_443"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_444(bool) = b1 >= 48
TMP_445(bool) = b1 <= 57
TMP_446(bool) = TMP_444 && TMP_445
CONDITION TMP_446"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_447(bool) = b2 >= 97
TMP_448(bool) = b2 <= 102
TMP_449(bool) = TMP_447 && TMP_448
CONDITION TMP_449"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_450(bool) = b2 >= 65
TMP_451(bool) = b2 <= 70
TMP_452(bool) = TMP_450 && TMP_451
CONDITION TMP_452"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_453(bool) = b2 >= 48
TMP_454(bool) = b2 <= 57
TMP_455(bool) = TMP_453 && TMP_454
CONDITION TMP_455"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_456(uint160) = b1 * 16
TMP_457(uint160) = TMP_456 + b2
iaddr(uint160) = iaddr + TMP_457"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_458 = CONVERT iaddr to address
RETURN TMP_458"];
}
// Function: 9558.sol-usingOraclize-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_527(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_527"];
}
// Function: 9558.sol-usingOraclize-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_528 = CONVERT _a to bytes
bresult(bytes) := TMP_528(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_371 -> LENGTH bresult
TMP_529(bool) = i < REF_371
CONDITION TMP_529"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_372(None) -> bresult[i]
TMP_530(bool) = REF_372 >= 48
REF_373(None) -> bresult[i]
TMP_531(bool) = REF_373 <= 57
TMP_532(bool) = TMP_530 && TMP_531
CONDITION TMP_532"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_533(bool) = _b == 0
CONDITION TMP_533"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_534(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_374(None) -> bresult[i]
TMP_535 = CONVERT REF_374 to uint256
TMP_536(uint256) = TMP_535 - 48
mint(uint256) = mint + TMP_536"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_375(None) -> bresult[i]
TMP_537(bool) = REF_375 == 46
CONDITION TMP_537"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_538(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_539(bool) = _b > 0
CONDITION TMP_539"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_540(uint256) = 10 ** _b
mint(uint256) = mint * TMP_540"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 9558.sol-usingOraclize-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 9558.sol-usingOraclize-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_741(uint256) = 60 * 60
TMP_742(uint256) = TMP_741 * 24
day(uint256) := TMP_742(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_743(uint256) = 60 * 60
TMP_744(uint256) = TMP_743 * 24
TMP_745(uint256) = TMP_744 * 7
week(uint256) := TMP_745(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_746(uint256) = 60 * 60
TMP_747(uint256) = TMP_746 * 24
TMP_748(uint256) = TMP_747 * 30
month(uint256) := TMP_748(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
}
// Function: 9558.sol-usingOraclize-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_459 = CONVERT _a to bytes
a(bytes) := TMP_459(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_460 = CONVERT _b to bytes
b(bytes) := TMP_460(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_327 -> LENGTH a
minLength(uint256) := REF_327(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_328 -> LENGTH b
TMP_461(bool) = REF_328 < minLength
CONDITION TMP_461"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_329 -> LENGTH b
minLength(uint256) := REF_329(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_462(bool) = i < minLength
CONDITION TMP_462"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_330(None) -> a[i]
REF_331(None) -> b[i]
TMP_463(bool) = REF_330 < REF_331
CONDITION TMP_463"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_464(uint256) = 0 - 1
RETURN TMP_464"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_332(None) -> a[i]
REF_333(None) -> b[i]
TMP_465(bool) = REF_332 > REF_333
CONDITION TMP_465"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_466(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_334 -> LENGTH a
REF_335 -> LENGTH b
TMP_467(bool) = REF_334 < REF_335
CONDITION TMP_467"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_468(uint256) = 0 - 1
RETURN TMP_468"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_336 -> LENGTH a
REF_337 -> LENGTH b
TMP_469(bool) = REF_336 > REF_337
CONDITION TMP_469"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 9558.sol-usingOraclize-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_526(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_526"];
}
// Function: 9558.sol-usingOraclize-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_525(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_525"];
}
// Function: 9558.sol-usingOraclize-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_524(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_524"];
}
// Function: 9558.sol-usingOraclize-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_496 = CONVERT _a to bytes
_ba(bytes) := TMP_496(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_497 = CONVERT _b to bytes
_bb(bytes) := TMP_497(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_498 = CONVERT _c to bytes
_bc(bytes) := TMP_498(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_499 = CONVERT _d to bytes
_bd(bytes) := TMP_499(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_500 = CONVERT _e to bytes
_be(bytes) := TMP_500(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_351 -> LENGTH _ba
REF_352 -> LENGTH _bb
TMP_502(uint256) = REF_351 + REF_352
REF_353 -> LENGTH _bc
TMP_503(uint256) = TMP_502 + REF_353
REF_354 -> LENGTH _bd
TMP_504(uint256) = TMP_503 + REF_354
REF_355 -> LENGTH _be
TMP_505(uint256) = TMP_504 + REF_355
TMP_506 = new string(TMP_505)
abcde(string) := TMP_506(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_507 = CONVERT abcde to bytes
babcde(bytes) := TMP_507(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_356 -> LENGTH _ba
TMP_508(bool) = i < REF_356
CONDITION TMP_508"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_509(uint256) := k(uint256)
k(uint256) = k + 1
REF_357(None) -> babcde[TMP_509]
REF_358(None) -> _ba[i]
REF_357(None) (->babcde) := REF_358(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_510(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_359 -> LENGTH _bb
TMP_511(bool) = i < REF_359
CONDITION TMP_511"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_512(uint256) := k(uint256)
k(uint256) = k + 1
REF_360(None) -> babcde[TMP_512]
REF_361(None) -> _bb[i]
REF_360(None) (->babcde) := REF_361(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_513(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_362 -> LENGTH _bc
TMP_514(bool) = i < REF_362
CONDITION TMP_514"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_515(uint256) := k(uint256)
k(uint256) = k + 1
REF_363(None) -> babcde[TMP_515]
REF_364(None) -> _bc[i]
REF_363(None) (->babcde) := REF_364(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_516(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_365 -> LENGTH _bd
TMP_517(bool) = i < REF_365
CONDITION TMP_517"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_518(uint256) := k(uint256)
k(uint256) = k + 1
REF_366(None) -> babcde[TMP_518]
REF_367(None) -> _bd[i]
REF_366(None) (->babcde) := REF_367(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_519(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_368 -> LENGTH _be
TMP_520(bool) = i < REF_368
CONDITION TMP_520"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_521(uint256) := k(uint256)
k(uint256) = k + 1
REF_369(None) -> babcde[TMP_521]
REF_370(None) -> _be[i]
REF_369(None) (->babcde) := REF_370(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_522(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_523 = CONVERT babcde to string
RETURN TMP_523"];
}
// Function: 9558.sol-usingOraclize-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Buffer.init(buf,1024)

IRs:
LIBRARY_CALL, dest:Buffer, function:Buffer.init(Buffer.buffer,uint256), arguments:['buf', '1024'] "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buf.startArray()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.startArray(Buffer.buffer), arguments:['buf'] "];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arr.length

IRs:
REF_379 -> LENGTH arr
TMP_555(bool) = i < REF_379
CONDITION TMP_555"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
buf.encodeString(arr[i])

IRs:
REF_381(string) -> arr[i]
LIBRARY_CALL, dest:CBOR, function:CBOR.encodeString(Buffer.buffer,string), arguments:['buf', 'REF_381'] "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_557(uint256) := i(uint256)
i(uint256) = i + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buf.endSequence()

IRs:
LIBRARY_CALL, dest:CBOR, function:CBOR.endSequence(Buffer.buffer), arguments:['buf'] "];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
buf.buf

IRs:
REF_383(bytes) -> buf.buf
RETURN REF_383"];
}
// Function: 9558.sol-usingOraclize-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_541(bool) = i == 0
CONDITION TMP_541"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_542(bool) = j != 0
CONDITION TMP_542"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_543(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_545 = new bytes(len)
bstr(bytes) := TMP_545(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_546(uint256) = len - 1
k(uint256) := TMP_546(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_547(bool) = i != 0
CONDITION TMP_547"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_548(uint256) := k(uint256)
k(uint256) = k - 1
REF_376(bytes1) -> bstr[TMP_548]
TMP_549(uint256) = i % 10
TMP_550(uint256) = 48 + TMP_549
TMP_551 = CONVERT TMP_550 to bytes1
REF_376(bytes1) (->bstr) := TMP_551(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_552 = CONVERT bstr to string
RETURN TMP_552"];
}
// Function: 9558.sol-usingOraclize-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_589 = new bytes(32)
sigr_(bytes) := TMP_589(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_396(None) -> dersig[3]
TMP_590 = CONVERT REF_396 to uint256
TMP_591(uint256) = TMP_590 - 32
TMP_592(uint256) = 4 + TMP_591
offset(uint256) := TMP_592(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_593(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_593(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_595 = new bytes(32)
sigs_(bytes) := TMP_595(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_596(uint256) = 32 + 2
offset(uint256) = offset + TMP_596"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_597(uint256) = offset - 1
REF_397(None) -> dersig[TMP_597]
TMP_598 = CONVERT REF_397 to uint256
TMP_599(uint256) = TMP_598 - 32
TMP_600(uint256) = offset + TMP_599
TMP_601(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_600,32,sigs_,0)
sigs_(bytes) := TMP_601(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_0(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_0 index: 0 
signer(address)= UNPACK TUPLE_0 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(keccak256()(pubkey)) == signer

IRs:
TMP_602(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_603 = CONVERT TMP_602 to address
TMP_604(bool) = TMP_603 == signer
CONDITION TMP_604"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_1(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_1 index: 0 
signer(address)= UNPACK TUPLE_1 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(keccak256()(pubkey)) == signer)

IRs:
TMP_605(bytes32) = SOLIDITY_CALL keccak256()(pubkey)
TMP_606 = CONVERT TMP_605 to address
TMP_607(bool) = TMP_606 == signer
RETURN TMP_607"];
}
}
