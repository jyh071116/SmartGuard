digraph G {
// Function: 9560.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9560.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 9560.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9560.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 9560.sol-dappVolumeAd-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
investmentMin = 1000000000000000

IRs:
investmentMin(uint256) := 1000000000000000(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
adPriceHour = 5000000000000000

IRs:
adPriceHour(uint256) := 5000000000000000(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
adPriceHalfDay = 50000000000000000

IRs:
adPriceHalfDay(uint256) := 50000000000000000(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
adPriceDay = 100000000000000000

IRs:
adPriceDay(uint256) := 100000000000000000(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
adPriceWeek = 500000000000000000

IRs:
adPriceWeek(uint256) := 500000000000000000(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
adPriceMultiple = 1

IRs:
adPriceMultiple(uint256) := 1(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
contractOwner = msg.sender

IRs:
contractOwner(address) := msg.sender(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
theInvestor = contractOwner

IRs:
theInvestor(address) := contractOwner(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
lastOwner = contractOwner

IRs:
lastOwner(address) := contractOwner(address)"];
}
// Function: 9560.sol-dappVolumeAd-getBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
address(this).balance

IRs:
TMP_42 = CONVERT this to address
TMP_43(uint256) = SOLIDITY_CALL balance(address)(TMP_42)
RETURN TMP_43"];
}
// Function: 9560.sol-dappVolumeAd-getPurchaseTimestampEnds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
purchaseTimestamp.add(purchaseSeconds)

IRs:
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['purchaseTimestamp', 'purchaseSeconds'] 
RETURN TMP_41"];
2[label="Node Type: RETURN 2

EXPRESSION:
_getPurchaseTimestampAdEnds

IRs:
RETURN _getPurchaseTimestampAdEnds"];
}
// Function: 9560.sol-dappVolumeAd-onlyContractOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == contractOwner)

IRs:
TMP_44(bool) = msg.sender == contractOwner
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9560.sol-dappVolumeAd-setAdPriceMultiple(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
adPriceMultiple = amount

IRs:
adPriceMultiple(uint256) := amount(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, dappVolumeAd.onlyContractOwner()()"];
2->1;
}
// Function: 9560.sol-dappVolumeAd-updateAd(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= adPriceMultiple.mul(adPriceHour))

IRs:
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['adPriceMultiple', 'adPriceHour'] 
TMP_18(bool) = msg.value >= TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(block.timestamp > purchaseTimestamp + purchaseSeconds)

IRs:
TMP_20(uint256) = purchaseTimestamp + purchaseSeconds
TMP_21(bool) = block.timestamp > TMP_20
TMP_22(None) = SOLIDITY_CALL require(bool)(TMP_21)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(id > 0)

IRs:
TMP_23(bool) = id > 0
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.value >= adPriceMultiple.mul(adPriceWeek)

IRs:
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['adPriceMultiple', 'adPriceWeek'] 
TMP_26(bool) = msg.value >= TMP_25
CONDITION TMP_26"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
purchaseSeconds = 604800

IRs:
purchaseSeconds(uint256) := 604800(uint256)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
msg.value >= adPriceMultiple.mul(adPriceDay)

IRs:
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['adPriceMultiple', 'adPriceDay'] 
TMP_28(bool) = msg.value >= TMP_27
CONDITION TMP_28"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
purchaseSeconds = 86400

IRs:
purchaseSeconds(uint256) := 86400(uint256)"];
7->12;
8[label="Node Type: IF 8

EXPRESSION:
msg.value >= adPriceMultiple.mul(adPriceHalfDay)

IRs:
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['adPriceMultiple', 'adPriceHalfDay'] 
TMP_30(bool) = msg.value >= TMP_29
CONDITION TMP_30"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
purchaseSeconds = 43200

IRs:
purchaseSeconds(uint256) := 43200(uint256)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
purchaseSeconds = 3600

IRs:
purchaseSeconds(uint256) := 3600(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
purchaseTimestamp = block.timestamp

IRs:
purchaseTimestamp(uint256) := block.timestamp(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
lastOwner.transfer(msg.value.div(2))

IRs:
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['msg.value', '2'] 
Transfer dest:lastOwner value:TMP_31"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
theInvestor.transfer(msg.value.div(10))

IRs:
TMP_33(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['msg.value', '10'] 
Transfer dest:theInvestor value:TMP_33"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
lastOwner = msg.sender

IRs:
lastOwner(address) := msg.sender(address)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
dappId = id

IRs:
dappId(uint256) := id(uint256)"];
}
// Function: 9560.sol-dappVolumeAd-updateInvestor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= investmentMin)

IRs:
TMP_35(bool) = msg.value >= investmentMin
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
theInvestor.transfer(msg.value.div(100).mul(60))

IRs:
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['msg.value', '100'] 
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_37', '60'] 
Transfer dest:theInvestor value:TMP_38"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
theInvestor = msg.sender

IRs:
theInvestor(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
investmentMin = investmentMin.mul(2)

IRs:
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['investmentMin', '2'] 
investmentMin(uint256) := TMP_40(uint256)"];
}
// Function: 9560.sol-dappVolumeAd-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractOwner.transfer(address(this).balance)

IRs:
TMP_12 = CONVERT this to address
TMP_13(uint256) = SOLIDITY_CALL balance(address)(TMP_12)
Transfer dest:contractOwner value:TMP_13"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, dappVolumeAd.onlyContractOwner()()"];
2->1;
}
}
