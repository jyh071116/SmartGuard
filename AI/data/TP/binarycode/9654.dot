digraph G {
// Function: 9654.sol-SimpleBet-bet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(random() % 2 == 1) && (msg.value == 1000000000000000000) && (! locked)

IRs:
TMP_0(uint8) = INTERNAL_CALL, SimpleBet.random()()
TMP_1(uint8) = TMP_0 % 2
TMP_2(bool) = TMP_1 == 1
TMP_3(bool) = msg.value == 1000000000000000000
TMP_4(bool) = TMP_2 && TMP_3
TMP_5 = UnaryType.BANG locked 
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
! msg.sender.call.value(2000000000000000000)()

IRs:
TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:2000000000000000000 
TMP_9 = UnaryType.BANG TMP_8 
CONDITION TMP_9"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 9654.sol-SimpleBet-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bet()

IRs:
INTERNAL_CALL, SimpleBet.bet()()"];
}
// Function: 9654.sol-SimpleBet-lock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
gameOwner == msg.sender

IRs:
TMP_10(bool) = gameOwner == msg.sender
CONDITION TMP_10"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
locked = true

IRs:
locked(bool) := True(bool)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 9654.sol-SimpleBet-own(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(gameOwner == address(0)) || (gameOwner == msg.sender)

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = gameOwner == TMP_12
TMP_14(bool) = gameOwner == msg.sender
TMP_15(bool) = TMP_13 || TMP_14
CONDITION TMP_15"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameOwner = owner

IRs:
gameOwner(address) := owner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 9654.sol-SimpleBet-random()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint8(uint256(keccak256()(block.timestamp,block.difficulty)) % 256)

IRs:
TMP_19(bytes32) = SOLIDITY_CALL keccak256()(block.timestamp,block.difficulty)
TMP_20 = CONVERT TMP_19 to uint256
TMP_21(uint256) = TMP_20 % 256
TMP_22 = CONVERT TMP_21 to uint8
RETURN TMP_22"];
}
// Function: 9654.sol-SimpleBet-releaseFunds(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
gameOwner == msg.sender

IRs:
TMP_16(bool) = gameOwner == msg.sender
CONDITION TMP_16"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
msg.sender.transfer(amount * (1000000000000000000))

IRs:
TMP_17(uint256) = amount * 1000000000000000000
Transfer dest:msg.sender value:TMP_17"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 9654.sol-SimpleBet-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
gameOwner = address(0)

IRs:
TMP_24 = CONVERT 0 to address
gameOwner(address) := TMP_24(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
locked = false

IRs:
locked(bool) := False(bool)"];
}
// Function: 9654.sol-SimpleBet-unlock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
gameOwner == msg.sender

IRs:
TMP_11(bool) = gameOwner == msg.sender
CONDITION TMP_11"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
locked = false

IRs:
locked(bool) := False(bool)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
}
