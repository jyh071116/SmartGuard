digraph G {
// Function: 9803.sol-CrowdsaleExt-CrowdsaleExt(string,address,PricingStrategy,address,uint256,uint256,uint256,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token = FractionalERC20Ext(_token)

IRs:
TMP_48 = CONVERT _token to FractionalERC20Ext
token(FractionalERC20Ext) := TMP_48(FractionalERC20Ext)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
setPricingStrategy(_pricingStrategy)

IRs:
INTERNAL_CALL, CrowdsaleExt.setPricingStrategy(PricingStrategy)(_pricingStrategy)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
multisigWallet = _multisigWallet

IRs:
multisigWallet(address) := _multisigWallet(address)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
multisigWallet == 0

IRs:
TMP_50(bool) = multisigWallet == 0
CONDITION TMP_50"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: THROW 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_start == 0

IRs:
TMP_51(bool) = _start == 0
CONDITION TMP_51"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: THROW 10
"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
startsAt = _start

IRs:
startsAt(uint256) := _start(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_end == 0

IRs:
TMP_52(bool) = _end == 0
CONDITION TMP_52"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: THROW 14
"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
endsAt = _end

IRs:
endsAt(uint256) := _end(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
startsAt >= endsAt

IRs:
TMP_53(bool) = startsAt >= endsAt
CONDITION TMP_53"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: THROW 18
"];
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
minimumFundingGoal = _minimumFundingGoal

IRs:
minimumFundingGoal(uint256) := _minimumFundingGoal(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isUpdatable = _isUpdatable

IRs:
isUpdatable(bool) := _isUpdatable(bool)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isWhiteListed = _isWhiteListed

IRs:
isWhiteListed(bool) := _isWhiteListed(bool)"];
}
// Function: 9803.sol-CrowdsaleExt-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9803.sol-CrowdsaleExt-areReservedTokensDistributed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
finalizeAgent.reservedTokensAreDistributed()

IRs:
TMP_92(bool) = HIGH_LEVEL_CALL, dest:finalizeAgent(FinalizeAgent), function:reservedTokensAreDistributed, arguments:[]  
RETURN TMP_92"];
}
// Function: 9803.sol-CrowdsaleExt-assignTokens(address,uint256)
digraph{
}
// Function: 9803.sol-CrowdsaleExt-buy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
invest(msg.sender)

IRs:
INTERNAL_CALL, CrowdsaleExt.invest(address)(msg.sender)"];
}
// Function: 9803.sol-CrowdsaleExt-canDistributeReservedTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
lastTierCntrct = CrowdsaleExt(getLastTier())

IRs:
TMP_93(address) = INTERNAL_CALL, CrowdsaleExt.getLastTier()()
TMP_94 = CONVERT TMP_93 to CrowdsaleExt
lastTierCntrct(CrowdsaleExt) := TMP_94(CrowdsaleExt)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
(lastTierCntrct.getState() == State.Success) && ! lastTierCntrct.halted() && ! lastTierCntrct.finalized() && ! lastTierCntrct.areReservedTokensDistributed()

IRs:
TMP_95(CrowdsaleExt.State) = HIGH_LEVEL_CALL, dest:lastTierCntrct(CrowdsaleExt), function:getState, arguments:[]  
REF_25(CrowdsaleExt.State) -> State.Success
TMP_96(bool) = TMP_95 == REF_25
TMP_97(bool) = HIGH_LEVEL_CALL, dest:lastTierCntrct(CrowdsaleExt), function:halted, arguments:[]  
TMP_98 = UnaryType.BANG TMP_97 
TMP_99(bool) = TMP_96 && TMP_98
TMP_100(bool) = HIGH_LEVEL_CALL, dest:lastTierCntrct(CrowdsaleExt), function:finalized, arguments:[]  
TMP_101 = UnaryType.BANG TMP_100 
TMP_102(bool) = TMP_99 && TMP_101
TMP_103(bool) = HIGH_LEVEL_CALL, dest:lastTierCntrct(CrowdsaleExt), function:areReservedTokensDistributed, arguments:[]  
TMP_104 = UnaryType.BANG TMP_103 
TMP_105(bool) = TMP_102 && TMP_104
CONDITION TMP_105"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 9803.sol-CrowdsaleExt-distributeReservedTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
finalized

IRs:
CONDITION finalized"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(finalizeAgent) != address(0)

IRs:
TMP_85 = CONVERT finalizeAgent to address
TMP_86 = CONVERT 0 to address
TMP_87(bool) = TMP_85 != TMP_86
CONDITION TMP_87"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
finalizeAgent.distributeReservedTokens(reservedTokensDistributionBatch)

IRs:
HIGH_LEVEL_CALL, dest:finalizeAgent(FinalizeAgent), function:distributeReservedTokens, arguments:['reservedTokensDistributionBatch']  "];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
inState(State.Success)

IRs:
REF_22(CrowdsaleExt.State) -> State.Success
MODIFIER_CALL, CrowdsaleExt.inState(CrowdsaleExt.State)(REF_22)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
stopInEmergency()

IRs:
MODIFIER_CALL, Haltable.stopInEmergency()()"];
9->1;
}
// Function: 9803.sol-CrowdsaleExt-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: THROW 1
"];
}
// Function: 9803.sol-CrowdsaleExt-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
finalized

IRs:
CONDITION finalized"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
address(finalizeAgent) != address(0)

IRs:
TMP_106 = CONVERT finalizeAgent to address
TMP_107 = CONVERT 0 to address
TMP_108(bool) = TMP_106 != TMP_107
CONDITION TMP_108"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
finalizeAgent.finalizeCrowdsale()

IRs:
HIGH_LEVEL_CALL, dest:finalizeAgent(FinalizeAgent), function:finalizeCrowdsale, arguments:[]  "];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
finalized = true

IRs:
finalized(bool) := True(bool)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
inState(State.Success)

IRs:
REF_30(CrowdsaleExt.State) -> State.Success
MODIFIER_CALL, CrowdsaleExt.inState(CrowdsaleExt.State)(REF_30)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
stopInEmergency()

IRs:
MODIFIER_CALL, Haltable.stopInEmergency()()"];
10->1;
}
// Function: 9803.sol-CrowdsaleExt-getLastTier()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
joinedCrowdsalesLen > 0

IRs:
TMP_182(bool) = joinedCrowdsalesLen > 0
CONDITION TMP_182"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
joinedCrowdsales[joinedCrowdsalesLen - 1]

IRs:
TMP_183(uint8) = joinedCrowdsalesLen - 1
REF_68(address) -> joinedCrowdsales[TMP_183]
RETURN REF_68"];
3[label="Node Type: RETURN 3

EXPRESSION:
address(0)

IRs:
TMP_184 = CONVERT 0 to address
RETURN TMP_184"];
}
// Function: 9803.sol-CrowdsaleExt-getState()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
finalized

IRs:
CONDITION finalized"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
State.Finalized

IRs:
REF_86(CrowdsaleExt.State) -> State.Finalized
RETURN REF_86"];
3[label="Node Type: IF 3

EXPRESSION:
address(finalizeAgent) == 0

IRs:
TMP_269 = CONVERT finalizeAgent to address
TMP_270(bool) = TMP_269 == 0
CONDITION TMP_270"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
State.Preparing

IRs:
REF_87(CrowdsaleExt.State) -> State.Preparing
RETURN REF_87"];
5[label="Node Type: IF 5

EXPRESSION:
! finalizeAgent.isSane()

IRs:
TMP_271(bool) = HIGH_LEVEL_CALL, dest:finalizeAgent(FinalizeAgent), function:isSane, arguments:[]  
TMP_272 = UnaryType.BANG TMP_271 
CONDITION TMP_272"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
State.Preparing

IRs:
REF_89(CrowdsaleExt.State) -> State.Preparing
RETURN REF_89"];
7[label="Node Type: IF 7

EXPRESSION:
! pricingStrategy.isSane(address(this))

IRs:
TMP_273 = CONVERT this to address
TMP_274(bool) = HIGH_LEVEL_CALL, dest:pricingStrategy(PricingStrategy), function:isSane, arguments:['TMP_273']  
TMP_275 = UnaryType.BANG TMP_274 
CONDITION TMP_275"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
State.Preparing

IRs:
REF_91(CrowdsaleExt.State) -> State.Preparing
RETURN REF_91"];
9[label="Node Type: IF 9

EXPRESSION:
block.timestamp < startsAt

IRs:
TMP_276(bool) = block.timestamp < startsAt
CONDITION TMP_276"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
State.PreFunding

IRs:
REF_92(CrowdsaleExt.State) -> State.PreFunding
RETURN REF_92"];
11[label="Node Type: IF 11

EXPRESSION:
block.timestamp <= endsAt && ! isCrowdsaleFull()

IRs:
TMP_277(bool) = block.timestamp <= endsAt
TMP_278(bool) = INTERNAL_CALL, CrowdsaleExt.isCrowdsaleFull()()
TMP_279 = UnaryType.BANG TMP_278 
TMP_280(bool) = TMP_277 && TMP_279
CONDITION TMP_280"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
State.Funding

IRs:
REF_93(CrowdsaleExt.State) -> State.Funding
RETURN REF_93"];
13[label="Node Type: IF 13

EXPRESSION:
isMinimumGoalReached()

IRs:
TMP_281(bool) = INTERNAL_CALL, CrowdsaleExt.isMinimumGoalReached()()
CONDITION TMP_281"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
State.Success

IRs:
REF_94(CrowdsaleExt.State) -> State.Success
RETURN REF_94"];
15[label="Node Type: RETURN 15

EXPRESSION:
State.Failure

IRs:
REF_95(CrowdsaleExt.State) -> State.Failure
RETURN REF_95"];
}
// Function: 9803.sol-CrowdsaleExt-getTierPosition(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
joinedCrowdsaleState[addr].position

IRs:
REF_66(CrowdsaleExt.JoinedCrowdsaleStatus) -> joinedCrowdsaleState[addr]
REF_67(uint8) -> REF_66.position
RETURN REF_67"];
}
// Function: 9803.sol-CrowdsaleExt-halt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = true

IRs:
halted(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9803.sol-CrowdsaleExt-inState(CrowdsaleExt.State)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getState() != state

IRs:
TMP_287(CrowdsaleExt.State) = INTERNAL_CALL, CrowdsaleExt.getState()()
TMP_288(bool) = TMP_287 != state
CONDITION TMP_288"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9803.sol-CrowdsaleExt-invest(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
investInternal(addr,0)

IRs:
INTERNAL_CALL, CrowdsaleExt.investInternal(address,uint128)(addr,0)"];
}
// Function: 9803.sol-CrowdsaleExt-investInternal(address,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->44;
1[label="Node Type: IF 1

EXPRESSION:
getState() == State.PreFunding

IRs:
TMP_54(CrowdsaleExt.State) = INTERNAL_CALL, CrowdsaleExt.getState()()
REF_0(CrowdsaleExt.State) -> State.PreFunding
TMP_55(bool) = TMP_54 == REF_0
CONDITION TMP_55"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: IF 3

EXPRESSION:
getState() == State.Funding

IRs:
TMP_56(CrowdsaleExt.State) = INTERNAL_CALL, CrowdsaleExt.getState()()
REF_1(CrowdsaleExt.State) -> State.Funding
TMP_57(bool) = TMP_56 == REF_1
CONDITION TMP_57"];
3->4[label="True"];
3->9[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
isWhiteListed

IRs:
CONDITION isWhiteListed"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
! earlyParticipantWhitelist[receiver].status

IRs:
REF_2(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[receiver]
REF_3(bool) -> REF_2.status
TMP_58 = UnaryType.BANG REF_3 
CONDITION TMP_58"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->10;
9[label="Node Type: THROW 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised,tokensSold,msg.sender,token.decimals())

IRs:
TMP_59(uint256) = HIGH_LEVEL_CALL, dest:token(FractionalERC20Ext), function:decimals, arguments:[]  
TMP_60(uint256) = HIGH_LEVEL_CALL, dest:pricingStrategy(PricingStrategy), function:calculatePrice, arguments:['weiAmount', 'weiRaised', 'tokensSold', 'msg.sender', 'TMP_59']  
tokenAmount(uint256) := TMP_60(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
tokenAmount == 0

IRs:
TMP_61(bool) = tokenAmount == 0
CONDITION TMP_61"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
isWhiteListed

IRs:
CONDITION isWhiteListed"];
17->18[label="True"];
17->25[label="False"];
18[label="Node Type: IF 18

EXPRESSION:
tokenAmount < earlyParticipantWhitelist[receiver].minCap && tokenAmountOf[receiver] == 0

IRs:
REF_6(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[receiver]
REF_7(uint256) -> REF_6.minCap
TMP_62(bool) = tokenAmount < REF_7
REF_8(uint256) -> tokenAmountOf[receiver]
TMP_63(bool) = REF_8 == 0
TMP_64(bool) = TMP_62 && TMP_63
CONDITION TMP_64"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: THROW 19
"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
isBreakingInvestorCap(receiver,tokenAmount)

IRs:
TMP_65(bool) = INTERNAL_CALL, CrowdsaleExt.isBreakingInvestorCap(address,uint256)(receiver,tokenAmount)
CONDITION TMP_65"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: THROW 22
"];
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
updateInheritedEarlyParticipantWhitelist(receiver,tokenAmount)

IRs:
INTERNAL_CALL, CrowdsaleExt.updateInheritedEarlyParticipantWhitelist(address,uint256)(receiver,tokenAmount)"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
tokenAmount < token.minCap() && tokenAmountOf[receiver] == 0

IRs:
TMP_67(uint256) = HIGH_LEVEL_CALL, dest:token(FractionalERC20Ext), function:minCap, arguments:[]  
TMP_68(bool) = tokenAmount < TMP_67
REF_10(uint256) -> tokenAmountOf[receiver]
TMP_69(bool) = REF_10 == 0
TMP_70(bool) = TMP_68 && TMP_69
CONDITION TMP_70"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: THROW 26
"];
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
investedAmountOf[receiver] == 0

IRs:
REF_11(uint256) -> investedAmountOf[receiver]
TMP_71(bool) = REF_11 == 0
CONDITION TMP_71"];
29->30[label="True"];
29->31[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
investorCount ++

IRs:
TMP_72(uint256) := investorCount(uint256)
investorCount(uint256) = investorCount + 1"];
30->31;
31[label="Node Type: END_IF 31
"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
investedAmountOf[receiver] = investedAmountOf[receiver].plus(weiAmount)

IRs:
REF_12(uint256) -> investedAmountOf[receiver]
REF_13(uint256) -> investedAmountOf[receiver]
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['REF_13', 'weiAmount'] 
REF_12(uint256) (->investedAmountOf) := TMP_73(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
tokenAmountOf[receiver] = tokenAmountOf[receiver].plus(tokenAmount)

IRs:
REF_15(uint256) -> tokenAmountOf[receiver]
REF_16(uint256) -> tokenAmountOf[receiver]
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['REF_16', 'tokenAmount'] 
REF_15(uint256) (->tokenAmountOf) := TMP_74(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
weiRaised = weiRaised.plus(weiAmount)

IRs:
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_75(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
tokensSold = tokensSold.plus(tokenAmount)

IRs:
TMP_76(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.plus(uint256,uint256), arguments:['tokensSold', 'tokenAmount'] 
tokensSold(uint256) := TMP_76(uint256)"];
35->36;
36[label="Node Type: IF 36

EXPRESSION:
isBreakingCap(weiAmount,tokenAmount,weiRaised,tokensSold)

IRs:
TMP_77(bool) = INTERNAL_CALL, CrowdsaleExt.isBreakingCap(uint256,uint256,uint256,uint256)(weiAmount,tokenAmount,weiRaised,tokensSold)
CONDITION TMP_77"];
36->37[label="True"];
36->38[label="False"];
37[label="Node Type: THROW 37
"];
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
assignTokens(receiver,tokenAmount)

IRs:
INTERNAL_CALL, CrowdsaleExt.assignTokens(address,uint256)(receiver,tokenAmount)"];
39->40;
40[label="Node Type: IF 40

EXPRESSION:
! multisigWallet.send(weiAmount)

IRs:
TMP_79 = SEND dest:multisigWallet value:weiAmount
TMP_80 = UnaryType.BANG TMP_79 
CONDITION TMP_80"];
40->41[label="True"];
40->42[label="False"];
41[label="Node Type: THROW 41
"];
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
Invested(receiver,weiAmount,tokenAmount,customerId)

IRs:
Emit Invested(receiver,weiAmount,tokenAmount,customerId)"];
44[label="Node Type: EXPRESSION 44

EXPRESSION:
stopInEmergency()

IRs:
MODIFIER_CALL, Haltable.stopInEmergency()()"];
44->1;
}
// Function: 9803.sol-CrowdsaleExt-isAddressWhitelisted(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < whitelistedParticipants.length

IRs:
REF_61 -> LENGTH whitelistedParticipants
TMP_179(bool) = i < REF_61
CONDITION TMP_179"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
whitelistedParticipants[i] == addr

IRs:
REF_62(address) -> whitelistedParticipants[i]
TMP_180(bool) = REF_62 == addr
CONDITION TMP_180"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: BREAK 7
"];
7->2;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_181(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 9803.sol-CrowdsaleExt-isBreakingCap(uint256,uint256,uint256,uint256)
digraph{
}
// Function: 9803.sol-CrowdsaleExt-isBreakingInvestorCap(address,uint256)
digraph{
}
// Function: 9803.sol-CrowdsaleExt-isCrowdsale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9803.sol-CrowdsaleExt-isCrowdsaleFull()
digraph{
}
// Function: 9803.sol-CrowdsaleExt-isFinalizerSane()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
finalizeAgent.isSane()

IRs:
TMP_266(bool) = HIGH_LEVEL_CALL, dest:finalizeAgent(FinalizeAgent), function:isSane, arguments:[]  
RETURN TMP_266"];
2[label="Node Type: RETURN 2

EXPRESSION:
sane

IRs:
RETURN sane"];
}
// Function: 9803.sol-CrowdsaleExt-isMinimumGoalReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
weiRaised >= minimumFundingGoal

IRs:
TMP_265(bool) = weiRaised >= minimumFundingGoal
RETURN TMP_265"];
2[label="Node Type: RETURN 2

EXPRESSION:
reached

IRs:
RETURN reached"];
}
// Function: 9803.sol-CrowdsaleExt-isPricingSane()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
pricingStrategy.isSane(address(this))

IRs:
TMP_267 = CONVERT this to address
TMP_268(bool) = HIGH_LEVEL_CALL, dest:pricingStrategy(PricingStrategy), function:isSane, arguments:['TMP_267']  
RETURN TMP_268"];
2[label="Node Type: RETURN 2

EXPRESSION:
sane

IRs:
RETURN sane"];
}
// Function: 9803.sol-CrowdsaleExt-isTierJoined(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
joinedCrowdsaleState[addr].isJoined

IRs:
REF_64(CrowdsaleExt.JoinedCrowdsaleStatus) -> joinedCrowdsaleState[addr]
REF_65(bool) -> REF_64.isJoined
RETURN REF_65"];
}
// Function: 9803.sol-CrowdsaleExt-onlyInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! halted

IRs:
TMP_284 = UnaryType.BANG halted 
CONDITION TMP_284"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9803.sol-CrowdsaleExt-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_285(bool) = msg.sender == owner
TMP_286(None) = SOLIDITY_CALL require(bool)(TMP_285)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9803.sol-CrowdsaleExt-setEarlyParticipantWhitelist(address,bool,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: IF 1

EXPRESSION:
! isWhiteListed

IRs:
TMP_124 = UnaryType.BANG isWhiteListed 
CONDITION TMP_124"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(addr != address(0))

IRs:
TMP_125 = CONVERT 0 to address
TMP_126(bool) = addr != TMP_125
TMP_127(None) = SOLIDITY_CALL assert(bool)(TMP_126)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(maxCap > 0)

IRs:
TMP_128(bool) = maxCap > 0
TMP_129(None) = SOLIDITY_CALL assert(bool)(TMP_128)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(minCap <= maxCap)

IRs:
TMP_130(bool) = minCap <= maxCap
TMP_131(None) = SOLIDITY_CALL assert(bool)(TMP_130)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(now <= endsAt)

IRs:
TMP_132(bool) = now <= endsAt
TMP_133(None) = SOLIDITY_CALL assert(bool)(TMP_132)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! isAddressWhitelisted(addr)

IRs:
TMP_134(bool) = INTERNAL_CALL, CrowdsaleExt.isAddressWhitelisted(address)(addr)
TMP_135 = UnaryType.BANG TMP_134 
CONDITION TMP_135"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whitelistedParticipants.push(addr)

IRs:
REF_33 -> LENGTH whitelistedParticipants
TMP_137(uint256) := REF_33(uint256)
TMP_138(uint256) = TMP_137 + 1
REF_33(uint256) (->whitelistedParticipants) := TMP_138(uint256)
REF_34(address) -> whitelistedParticipants[TMP_137]
REF_34(address) (->whitelistedParticipants) := addr(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Whitelisted(addr,status,minCap,maxCap)

IRs:
Emit Whitelisted(addr,status,minCap,maxCap)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
WhitelistItemChanged(addr,status,minCap,maxCap)

IRs:
Emit WhitelistItemChanged(addr,status,minCap,maxCap)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
earlyParticipantWhitelist[addr] = WhiteListData(status,minCap,maxCap)

IRs:
REF_35(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[addr]
TMP_141(CrowdsaleExt.WhiteListData) = new WhiteListData(status,minCap,maxCap)
REF_35(CrowdsaleExt.WhiteListData) (->earlyParticipantWhitelist) := TMP_141(CrowdsaleExt.WhiteListData)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
14->1;
}
// Function: 9803.sol-CrowdsaleExt-setEarlyParticipantWhitelistMultiple(address[],bool[],uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: IF 1

EXPRESSION:
! isWhiteListed

IRs:
TMP_143 = UnaryType.BANG isWhiteListed 
CONDITION TMP_143"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(now <= endsAt)

IRs:
TMP_144(bool) = now <= endsAt
TMP_145(None) = SOLIDITY_CALL assert(bool)(TMP_144)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(addrs.length == statuses.length)

IRs:
REF_36 -> LENGTH addrs
REF_37 -> LENGTH statuses
TMP_146(bool) = REF_36 == REF_37
TMP_147(None) = SOLIDITY_CALL assert(bool)(TMP_146)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(statuses.length == minCaps.length)

IRs:
REF_38 -> LENGTH statuses
REF_39 -> LENGTH minCaps
TMP_148(bool) = REF_38 == REF_39
TMP_149(None) = SOLIDITY_CALL assert(bool)(TMP_148)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(minCaps.length == maxCaps.length)

IRs:
REF_40 -> LENGTH minCaps
REF_41 -> LENGTH maxCaps
TMP_150(bool) = REF_40 == REF_41
TMP_151(None) = SOLIDITY_CALL assert(bool)(TMP_150)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
iterator = 0

IRs:
iterator(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
iterator < addrs.length

IRs:
REF_42 -> LENGTH addrs
TMP_152(bool) = iterator < REF_42
CONDITION TMP_152"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
setEarlyParticipantWhitelist(addrs[iterator],statuses[iterator],minCaps[iterator],maxCaps[iterator])

IRs:
REF_43(address) -> addrs[iterator]
REF_44(bool) -> statuses[iterator]
REF_45(uint256) -> minCaps[iterator]
REF_46(uint256) -> maxCaps[iterator]
INTERNAL_CALL, CrowdsaleExt.setEarlyParticipantWhitelist(address,bool,uint256,uint256)(REF_43,REF_44,REF_45,REF_46)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
iterator ++

IRs:
TMP_154(uint256) := iterator(uint256)
iterator(uint256) = iterator + 1"];
13->11;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
14->1;
}
// Function: 9803.sol-CrowdsaleExt-setEndsAt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! finalized)

IRs:
TMP_230 = UnaryType.BANG finalized 
TMP_231(None) = SOLIDITY_CALL assert(bool)(TMP_230)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(isUpdatable)

IRs:
TMP_232(None) = SOLIDITY_CALL assert(bool)(isUpdatable)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(now <= time)

IRs:
TMP_233(bool) = now <= time
TMP_234(None) = SOLIDITY_CALL assert(bool)(TMP_233)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(startsAt <= time)

IRs:
TMP_235(bool) = startsAt <= time
TMP_236(None) = SOLIDITY_CALL assert(bool)(TMP_235)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(now <= endsAt)

IRs:
TMP_237(bool) = now <= endsAt
TMP_238(None) = SOLIDITY_CALL assert(bool)(TMP_237)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
lastTierCntrct = CrowdsaleExt(getLastTier())

IRs:
TMP_239(address) = INTERNAL_CALL, CrowdsaleExt.getLastTier()()
TMP_240 = CONVERT TMP_239 to CrowdsaleExt
lastTierCntrct(CrowdsaleExt) := TMP_240(CrowdsaleExt)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
lastTierCntrct.finalized()

IRs:
TMP_241(bool) = HIGH_LEVEL_CALL, dest:lastTierCntrct(CrowdsaleExt), function:finalized, arguments:[]  
CONDITION TMP_241"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
tierPosition = getTierPosition(this)

IRs:
TMP_242(uint8) = INTERNAL_CALL, CrowdsaleExt.getTierPosition(address)(this)
tierPosition(uint8) := TMP_242(uint8)"];
10->13;
11[label="Node Type: BEGIN_LOOP 11
"];
11->14;
12[label="Node Type: END_LOOP 12
"];
12->18;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
j = tierPosition + 1

IRs:
TMP_243(uint8) = tierPosition + 1
j(uint8) := TMP_243(uint8)"];
13->11;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
j < joinedCrowdsalesLen

IRs:
TMP_244(bool) = j < joinedCrowdsalesLen
CONDITION TMP_244"];
14->15[label="True"];
14->12[label="False"];
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
crowdsale = CrowdsaleExt(joinedCrowdsales[j])

IRs:
REF_81(address) -> joinedCrowdsales[j]
TMP_245 = CONVERT REF_81 to CrowdsaleExt
crowdsale(CrowdsaleExt) := TMP_245(CrowdsaleExt)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
assert(bool)(time <= crowdsale.startsAt())

IRs:
TMP_246(uint256) = HIGH_LEVEL_CALL, dest:crowdsale(CrowdsaleExt), function:startsAt, arguments:[]  
TMP_247(bool) = time <= TMP_246
TMP_248(None) = SOLIDITY_CALL assert(bool)(TMP_247)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
j ++

IRs:
TMP_249(uint8) := j(uint8)
j(uint8) = j + 1"];
17->14;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
endsAt = time

IRs:
endsAt(uint256) := time(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
EndsAtChanged(endsAt)

IRs:
Emit EndsAtChanged(endsAt)"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
20->1;
}
// Function: 9803.sol-CrowdsaleExt-setFinalizeAgent(FinalizeAgent)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(address(addr) != address(0))

IRs:
TMP_113 = CONVERT addr to address
TMP_114 = CONVERT 0 to address
TMP_115(bool) = TMP_113 != TMP_114
TMP_116(None) = SOLIDITY_CALL assert(bool)(TMP_115)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(address(finalizeAgent) == address(0))

IRs:
TMP_117 = CONVERT finalizeAgent to address
TMP_118 = CONVERT 0 to address
TMP_119(bool) = TMP_117 == TMP_118
TMP_120(None) = SOLIDITY_CALL assert(bool)(TMP_119)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
finalizeAgent = addr

IRs:
finalizeAgent(FinalizeAgent) := addr(FinalizeAgent)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! finalizeAgent.isFinalizeAgent()

IRs:
TMP_121(bool) = HIGH_LEVEL_CALL, dest:finalizeAgent(FinalizeAgent), function:isFinalizeAgent, arguments:[]  
TMP_122 = UnaryType.BANG TMP_121 
CONDITION TMP_122"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 9803.sol-CrowdsaleExt-setJoinedCrowdsales(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(addr != address(0))

IRs:
TMP_185 = CONVERT 0 to address
TMP_186(bool) = addr != TMP_185
TMP_187(None) = SOLIDITY_CALL assert(bool)(TMP_186)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(joinedCrowdsalesLen <= joinedCrowdsalesLenMax)

IRs:
TMP_188(bool) = joinedCrowdsalesLen <= joinedCrowdsalesLenMax
TMP_189(None) = SOLIDITY_CALL assert(bool)(TMP_188)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(! isTierJoined(addr))

IRs:
TMP_190(bool) = INTERNAL_CALL, CrowdsaleExt.isTierJoined(address)(addr)
TMP_191 = UnaryType.BANG TMP_190 
TMP_192(None) = SOLIDITY_CALL assert(bool)(TMP_191)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
joinedCrowdsales.push(addr)

IRs:
REF_70 -> LENGTH joinedCrowdsales
TMP_194(uint256) := REF_70(uint256)
TMP_195(uint256) = TMP_194 + 1
REF_70(uint256) (->joinedCrowdsales) := TMP_195(uint256)
REF_71(address) -> joinedCrowdsales[TMP_194]
REF_71(address) (->joinedCrowdsales) := addr(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
joinedCrowdsaleState[addr] = JoinedCrowdsaleStatus(true,joinedCrowdsalesLen)

IRs:
REF_72(CrowdsaleExt.JoinedCrowdsaleStatus) -> joinedCrowdsaleState[addr]
TMP_196(CrowdsaleExt.JoinedCrowdsaleStatus) = new JoinedCrowdsaleStatus(True,joinedCrowdsalesLen)
REF_72(CrowdsaleExt.JoinedCrowdsaleStatus) (->joinedCrowdsaleState) := TMP_196(CrowdsaleExt.JoinedCrowdsaleStatus)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
joinedCrowdsalesLen ++

IRs:
TMP_197(uint8) := joinedCrowdsalesLen(uint8)
joinedCrowdsalesLen(uint8) = joinedCrowdsalesLen + 1"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 9803.sol-CrowdsaleExt-setMultisig(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
investorCount > MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE

IRs:
TMP_263(bool) = investorCount > MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE
CONDITION TMP_263"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
multisigWallet = addr

IRs:
multisigWallet(address) := addr(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 9803.sol-CrowdsaleExt-setPricingStrategy(PricingStrategy)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(address(_pricingStrategy) != address(0))

IRs:
TMP_252 = CONVERT _pricingStrategy to address
TMP_253 = CONVERT 0 to address
TMP_254(bool) = TMP_252 != TMP_253
TMP_255(None) = SOLIDITY_CALL assert(bool)(TMP_254)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(address(pricingStrategy) == address(0))

IRs:
TMP_256 = CONVERT pricingStrategy to address
TMP_257 = CONVERT 0 to address
TMP_258(bool) = TMP_256 == TMP_257
TMP_259(None) = SOLIDITY_CALL assert(bool)(TMP_258)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pricingStrategy = _pricingStrategy

IRs:
pricingStrategy(PricingStrategy) := _pricingStrategy(PricingStrategy)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! pricingStrategy.isPricingStrategy()

IRs:
TMP_260(bool) = HIGH_LEVEL_CALL, dest:pricingStrategy(PricingStrategy), function:isPricingStrategy, arguments:[]  
TMP_261 = UnaryType.BANG TMP_260 
CONDITION TMP_261"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 9803.sol-CrowdsaleExt-setStartsAt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! finalized)

IRs:
TMP_209 = UnaryType.BANG finalized 
TMP_210(None) = SOLIDITY_CALL assert(bool)(TMP_209)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(isUpdatable)

IRs:
TMP_211(None) = SOLIDITY_CALL assert(bool)(isUpdatable)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(now <= time)

IRs:
TMP_212(bool) = now <= time
TMP_213(None) = SOLIDITY_CALL assert(bool)(TMP_212)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(time <= endsAt)

IRs:
TMP_214(bool) = time <= endsAt
TMP_215(None) = SOLIDITY_CALL assert(bool)(TMP_214)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(now <= startsAt)

IRs:
TMP_216(bool) = now <= startsAt
TMP_217(None) = SOLIDITY_CALL assert(bool)(TMP_216)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
lastTierCntrct = CrowdsaleExt(getLastTier())

IRs:
TMP_218(address) = INTERNAL_CALL, CrowdsaleExt.getLastTier()()
TMP_219 = CONVERT TMP_218 to CrowdsaleExt
lastTierCntrct(CrowdsaleExt) := TMP_219(CrowdsaleExt)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
lastTierCntrct.finalized()

IRs:
TMP_220(bool) = HIGH_LEVEL_CALL, dest:lastTierCntrct(CrowdsaleExt), function:finalized, arguments:[]  
CONDITION TMP_220"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
tierPosition = getTierPosition(this)

IRs:
TMP_221(uint8) = INTERNAL_CALL, CrowdsaleExt.getTierPosition(address)(this)
tierPosition(uint8) := TMP_221(uint8)"];
10->13;
11[label="Node Type: BEGIN_LOOP 11
"];
11->14;
12[label="Node Type: END_LOOP 12
"];
12->18;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
j = 0

IRs:
j(uint8) := 0(uint256)"];
13->11;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
j < tierPosition

IRs:
TMP_222(bool) = j < tierPosition
CONDITION TMP_222"];
14->15[label="True"];
14->12[label="False"];
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
crowdsale = CrowdsaleExt(joinedCrowdsales[j])

IRs:
REF_78(address) -> joinedCrowdsales[j]
TMP_223 = CONVERT REF_78 to CrowdsaleExt
crowdsale(CrowdsaleExt) := TMP_223(CrowdsaleExt)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
assert(bool)(time >= crowdsale.endsAt())

IRs:
TMP_224(uint256) = HIGH_LEVEL_CALL, dest:crowdsale(CrowdsaleExt), function:endsAt, arguments:[]  
TMP_225(bool) = time >= TMP_224
TMP_226(None) = SOLIDITY_CALL assert(bool)(TMP_225)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
j ++

IRs:
TMP_227(uint8) := j(uint8)
j(uint8) = j + 1"];
17->14;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
startsAt = time

IRs:
startsAt(uint256) := time(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
StartsAtChanged(startsAt)

IRs:
Emit StartsAtChanged(startsAt)"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
20->1;
}
// Function: 9803.sol-CrowdsaleExt-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5

IRs:
MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE(uint256) := 5(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
tokensSold = 0

IRs:
tokensSold(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
weiRaised = 0

IRs:
weiRaised(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
investorCount = 0

IRs:
investorCount(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
joinedCrowdsalesLen = 0

IRs:
joinedCrowdsalesLen(uint8) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
joinedCrowdsalesLenMax = 50

IRs:
joinedCrowdsalesLenMax(uint8) := 50(uint256)"];
}
// Function: 9803.sol-CrowdsaleExt-stopInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted

IRs:
CONDITION halted"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9803.sol-CrowdsaleExt-stopNonOwnersInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted && msg.sender != owner

IRs:
TMP_282(bool) = msg.sender != owner
TMP_283(bool) = halted && TMP_282
CONDITION TMP_283"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9803.sol-CrowdsaleExt-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_43 = CONVERT 0 to address
TMP_44(bool) = newOwner != TMP_43
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9803.sol-CrowdsaleExt-unhalt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = false

IRs:
halted(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyInEmergency()

IRs:
MODIFIER_CALL, Haltable.onlyInEmergency()()"];
3->1;
}
// Function: 9803.sol-CrowdsaleExt-updateEarlyParticipantWhitelist(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isWhiteListed

IRs:
TMP_166 = UnaryType.BANG isWhiteListed 
CONDITION TMP_166"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(bool)(addr != address(0))

IRs:
TMP_167 = CONVERT 0 to address
TMP_168(bool) = addr != TMP_167
TMP_169(None) = SOLIDITY_CALL assert(bool)(TMP_168)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(now <= endsAt)

IRs:
TMP_170(bool) = now <= endsAt
TMP_171(None) = SOLIDITY_CALL assert(bool)(TMP_170)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(isTierJoined(msg.sender))

IRs:
TMP_172(bool) = INTERNAL_CALL, CrowdsaleExt.isTierJoined(address)(msg.sender)
TMP_173(None) = SOLIDITY_CALL assert(bool)(TMP_172)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
tokensBought < earlyParticipantWhitelist[addr].minCap && tokenAmountOf[addr] == 0

IRs:
REF_52(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[addr]
REF_53(uint256) -> REF_52.minCap
TMP_174(bool) = tokensBought < REF_53
REF_54(uint256) -> tokenAmountOf[addr]
TMP_175(bool) = REF_54 == 0
TMP_176(bool) = TMP_174 && TMP_175
CONDITION TMP_176"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
newMaxCap = earlyParticipantWhitelist[addr].maxCap

IRs:
REF_55(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[addr]
REF_56(uint256) -> REF_55.maxCap
newMaxCap(uint256) := REF_56(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
newMaxCap = newMaxCap.minus(tokensBought)

IRs:
TMP_177(uint256) = LIBRARY_CALL, dest:SafeMathLibExt, function:SafeMathLibExt.minus(uint256,uint256), arguments:['newMaxCap', 'tokensBought'] 
newMaxCap(uint256) := TMP_177(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
earlyParticipantWhitelist[addr] = WhiteListData(earlyParticipantWhitelist[addr].status,0,newMaxCap)

IRs:
REF_58(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[addr]
REF_59(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[addr]
REF_60(bool) -> REF_59.status
TMP_178(CrowdsaleExt.WhiteListData) = new WhiteListData(REF_60,0,newMaxCap)
REF_58(CrowdsaleExt.WhiteListData) (->earlyParticipantWhitelist) := TMP_178(CrowdsaleExt.WhiteListData)"];
}
// Function: 9803.sol-CrowdsaleExt-updateInheritedEarlyParticipantWhitelist(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isWhiteListed

IRs:
TMP_156 = UnaryType.BANG isWhiteListed 
CONDITION TMP_156"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
tokensBought < earlyParticipantWhitelist[reciever].minCap && tokenAmountOf[reciever] == 0

IRs:
REF_47(CrowdsaleExt.WhiteListData) -> earlyParticipantWhitelist[reciever]
REF_48(uint256) -> REF_47.minCap
TMP_157(bool) = tokensBought < REF_48
REF_49(uint256) -> tokenAmountOf[reciever]
TMP_158(bool) = REF_49 == 0
TMP_159(bool) = TMP_157 && TMP_158
CONDITION TMP_159"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
tierPosition = getTierPosition(this)

IRs:
TMP_160(uint8) = INTERNAL_CALL, CrowdsaleExt.getTierPosition(address)(this)
tierPosition(uint8) := TMP_160(uint8)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
j = tierPosition + 1

IRs:
TMP_161(uint8) = tierPosition + 1
j(uint8) := TMP_161(uint8)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
j < joinedCrowdsalesLen

IRs:
TMP_162(bool) = j < joinedCrowdsalesLen
CONDITION TMP_162"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
crowdsale = CrowdsaleExt(joinedCrowdsales[j])

IRs:
REF_50(address) -> joinedCrowdsales[j]
TMP_163 = CONVERT REF_50 to CrowdsaleExt
crowdsale(CrowdsaleExt) := TMP_163(CrowdsaleExt)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
crowdsale.updateEarlyParticipantWhitelist(reciever,tokensBought)

IRs:
HIGH_LEVEL_CALL, dest:crowdsale(CrowdsaleExt), function:updateEarlyParticipantWhitelist, arguments:['reciever', 'tokensBought']  "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
j ++

IRs:
TMP_165(uint8) := j(uint8)
j(uint8) = j + 1"];
14->11;
}
// Function: 9803.sol-CrowdsaleExt-updateJoinedCrowdsalesMultiple(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(addrs.length > 0)

IRs:
REF_73 -> LENGTH addrs
TMP_199(bool) = REF_73 > 0
TMP_200(None) = SOLIDITY_CALL assert(bool)(TMP_199)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(joinedCrowdsalesLen == 0)

IRs:
TMP_201(bool) = joinedCrowdsalesLen == 0
TMP_202(None) = SOLIDITY_CALL assert(bool)(TMP_201)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(addrs.length <= joinedCrowdsalesLenMax)

IRs:
REF_74 -> LENGTH addrs
TMP_203(bool) = REF_74 <= joinedCrowdsalesLenMax
TMP_204(None) = SOLIDITY_CALL assert(bool)(TMP_203)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
iter = 0

IRs:
iter(uint8) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
iter < addrs.length

IRs:
REF_75 -> LENGTH addrs
TMP_205(bool) = iter < REF_75
CONDITION TMP_205"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
setJoinedCrowdsales(addrs[iter])

IRs:
REF_76(address) -> addrs[iter]
INTERNAL_CALL, CrowdsaleExt.setJoinedCrowdsales(address)(REF_76)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iter ++

IRs:
TMP_207(uint8) := iter(uint8)
iter(uint8) = iter + 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
// Function: 9803.sol-CrowdsaleExt-whitelistedParticipantsLength()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
whitelistedParticipants.length

IRs:
REF_63 -> LENGTH whitelistedParticipants
RETURN REF_63"];
}
// Function: 9803.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 9803.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 9803.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 9803.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 9803.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 9803.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 9803.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 9803.sol-FinalizeAgent-distributeReservedTokens(uint256)
digraph{
}
// Function: 9803.sol-FinalizeAgent-finalizeCrowdsale()
digraph{
}
// Function: 9803.sol-FinalizeAgent-isFinalizeAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9803.sol-FinalizeAgent-isSane()
digraph{
}
// Function: 9803.sol-FinalizeAgent-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
reservedTokensAreDistributed = false

IRs:
reservedTokensAreDistributed(bool) := False(bool)"];
}
// Function: 9803.sol-FractionalERC20Ext-allowance(address,address)
digraph{
}
// Function: 9803.sol-FractionalERC20Ext-approve(address,uint256)
digraph{
}
// Function: 9803.sol-FractionalERC20Ext-balanceOf(address)
digraph{
}
// Function: 9803.sol-FractionalERC20Ext-transfer(address,uint256)
digraph{
}
// Function: 9803.sol-FractionalERC20Ext-transferFrom(address,address,uint256)
digraph{
}
// Function: 9803.sol-Haltable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9803.sol-Haltable-halt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = true

IRs:
halted(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9803.sol-Haltable-onlyInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! halted

IRs:
TMP_39 = UnaryType.BANG halted 
CONDITION TMP_39"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9803.sol-Haltable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_35(bool) = msg.sender == owner
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9803.sol-Haltable-stopInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted

IRs:
CONDITION halted"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9803.sol-Haltable-stopNonOwnersInEmergency()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
halted && msg.sender != owner

IRs:
TMP_37(bool) = msg.sender != owner
TMP_38(bool) = halted && TMP_37
CONDITION TMP_38"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9803.sol-Haltable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_27 = CONVERT 0 to address
TMP_28(bool) = newOwner != TMP_27
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9803.sol-Haltable-unhalt()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
halted = false

IRs:
halted(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyInEmergency()

IRs:
MODIFIER_CALL, Haltable.onlyInEmergency()()"];
3->1;
}
// Function: 9803.sol-NullFinalizeAgentExt-NullFinalizeAgentExt(CrowdsaleExt)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
crowdsale = _crowdsale

IRs:
crowdsale(CrowdsaleExt) := _crowdsale(CrowdsaleExt)"];
}
// Function: 9803.sol-NullFinalizeAgentExt-distributeReservedTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 9803.sol-NullFinalizeAgentExt-finalizeCrowdsale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 9803.sol-NullFinalizeAgentExt-isFinalizeAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9803.sol-NullFinalizeAgentExt-isSane()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9803.sol-NullFinalizeAgentExt-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
reservedTokensAreDistributed = false

IRs:
reservedTokensAreDistributed(bool) := False(bool)"];
}
// Function: 9803.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9803.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9803.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9803.sol-PricingStrategy-calculatePrice(uint256,uint256,uint256,address,uint256)
digraph{
}
// Function: 9803.sol-PricingStrategy-isPresalePurchase(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 9803.sol-PricingStrategy-isPricingStrategy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9803.sol-PricingStrategy-isSane(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9803.sol-PricingStrategy-updateRate(uint256)
digraph{
}
// Function: 9803.sol-ReleasableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 9803.sol-ReleasableToken-allowance(address,address)
digraph{
}
// Function: 9803.sol-ReleasableToken-approve(address,uint256)
digraph{
}
// Function: 9803.sol-ReleasableToken-balanceOf(address)
digraph{
}
// Function: 9803.sol-ReleasableToken-canTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! released

IRs:
TMP_305 = UnaryType.BANG released 
CONDITION TMP_305"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
! transferAgents[_sender]

IRs:
REF_97(bool) -> transferAgents[_sender]
TMP_306 = UnaryType.BANG REF_97 
CONDITION TMP_306"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 9803.sol-ReleasableToken-inReleaseState(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
releaseState != released

IRs:
TMP_307(bool) = releaseState != released
CONDITION TMP_307"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9803.sol-ReleasableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_303(bool) = msg.sender == owner
TMP_304(None) = SOLIDITY_CALL require(bool)(TMP_303)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9803.sol-ReleasableToken-onlyReleaseAgent()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != releaseAgent

IRs:
TMP_308(bool) = msg.sender != releaseAgent
CONDITION TMP_308"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 9803.sol-ReleasableToken-releaseTokenTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
released = true

IRs:
released(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyReleaseAgent()

IRs:
MODIFIER_CALL, ReleasableToken.onlyReleaseAgent()()"];
2->1;
}
// Function: 9803.sol-ReleasableToken-setReleaseAgent(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
releaseAgent = addr

IRs:
releaseAgent(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 9803.sol-ReleasableToken-setTransferAgent(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferAgents[addr] = state

IRs:
REF_96(bool) -> transferAgents[addr]
REF_96(bool) (->transferAgents) := state(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
inReleaseState(false)

IRs:
MODIFIER_CALL, ReleasableToken.inReleaseState(bool)(False)"];
3->1;
}
// Function: 9803.sol-ReleasableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
released = false

IRs:
released(bool) := False(bool)"];
}
// Function: 9803.sol-ReleasableToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_299(bool) = INTERNAL_CALL, ERC20Basic.transfer(address,uint256)(_to,_value)
RETURN TMP_299"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(msg.sender)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(msg.sender)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9803.sol-ReleasableToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_301(bool) = INTERNAL_CALL, ERC20.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_301"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
canTransfer(_from)

IRs:
MODIFIER_CALL, ReleasableToken.canTransfer(address)(_from)"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 9803.sol-ReleasableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_289 = CONVERT 0 to address
TMP_290(bool) = newOwner != TMP_289
TMP_291(None) = SOLIDITY_CALL require(bool)(TMP_290)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9803.sol-SafeMathLibExt-divides(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b > 0)

IRs:
TMP_13(bool) = b > 0
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_15(uint256) = a / b
c(uint256) := TMP_15(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(a == b * c + a % b)

IRs:
TMP_16(uint256) = b * c
TMP_17(uint256) = a % b
TMP_18(uint256) = TMP_16 + TMP_17
TMP_19(bool) = a == TMP_18
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9803.sol-SafeMathLibExt-minus(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_21(bool) = b <= a
TMP_22(None) = SOLIDITY_CALL assert(bool)(TMP_21)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_23(uint256) = a - b
RETURN TMP_23"];
}
// Function: 9803.sol-SafeMathLibExt-plus(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_24(uint256) = a + b
c(uint256) := TMP_24(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_25(bool) = c >= a
TMP_26(None) = SOLIDITY_CALL assert(bool)(TMP_25)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9803.sol-SafeMathLibExt-times(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_7(uint256) = a * b
c(uint256) := TMP_7(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_8(bool) = a == 0
TMP_9(uint256) = c / a
TMP_10(bool) = TMP_9 == b
TMP_11(bool) = TMP_8 || TMP_10
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
}
