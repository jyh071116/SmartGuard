digraph G {
// Function: 9820.sol-CrowdsaleRC-CrowdsaleRC()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
createdTimestamp = block.timestamp

IRs:
createdTimestamp(uint256) := block.timestamp(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
start = 1529316000

IRs:
start(uint256) := 1529316000(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
deadline = 1532080800

IRs:
deadline(uint256) := 1532080800(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
amountRaised = 0

IRs:
amountRaised(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
beneficiary = 0xD27eAD21C9564f122c8f84cD98a505efDf547665

IRs:
beneficiary(address) := 1201713037690428429951291418403647554919689647717(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
maxAmount = 2000000000000000000000

IRs:
maxAmount(uint256) := 2000000000000000000000(uint256)"];
}
// Function: 9820.sol-CrowdsaleRC-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((msg.value >= 100000000000000000) && block.timestamp >= start && block.timestamp <= deadline && amountRaised < maxAmount && ((msg.value <= 100000000000000000000) || (msg.value > 100000000000000000000 && whitelist[msg.sender] == true)))

IRs:
TMP_0(bool) = msg.value >= 100000000000000000
TMP_1(bool) = block.timestamp >= start
TMP_2(bool) = TMP_0 && TMP_1
TMP_3(bool) = block.timestamp <= deadline
TMP_4(bool) = TMP_2 && TMP_3
TMP_5(bool) = amountRaised < maxAmount
TMP_6(bool) = TMP_4 && TMP_5
TMP_7(bool) = msg.value <= 100000000000000000000
TMP_8(bool) = msg.value > 100000000000000000000
REF_0(bool) -> whitelist[msg.sender]
TMP_9(bool) = REF_0 == True
TMP_10(bool) = TMP_8 && TMP_9
TMP_11(bool) = TMP_7 || TMP_10
TMP_12(bool) = TMP_6 && TMP_11
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = msg.value

IRs:
amount(uint256) := msg.value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] += amount

IRs:
REF_1(uint256) -> balanceOf[msg.sender]
REF_1(-> balanceOf) = REF_1 + amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
amountRaised += amount

IRs:
amountRaised(uint256) = amountRaised + amount"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
FundTransfer(msg.sender,amount,true)

IRs:
Emit FundTransfer(msg.sender,amount,True)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
beneficiary.send(amount)

IRs:
TMP_15 = SEND dest:beneficiary value:amount
CONDITION TMP_15"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
FundTransfer(beneficiary,amount,false)

IRs:
Emit FundTransfer(beneficiary,amount,False)"];
7->8;
8[label="Node Type: END_IF 8
"];
}
// Function: 9820.sol-CrowdsaleRC-removeAddressFromWhitelist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == msg.sender || beneficiary == msg.sender)

IRs:
TMP_21(bool) = owner == msg.sender
TMP_22(bool) = beneficiary == msg.sender
TMP_23(bool) = TMP_21 || TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whitelist[uaddress] = false

IRs:
REF_4(bool) -> whitelist[uaddress]
REF_4(bool) (->whitelist) := False(bool)"];
}
// Function: 9820.sol-CrowdsaleRC-whitelistAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == msg.sender || beneficiary == msg.sender)

IRs:
TMP_17(bool) = owner == msg.sender
TMP_18(bool) = beneficiary == msg.sender
TMP_19(bool) = TMP_17 || TMP_18
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whitelist[uaddress] = true

IRs:
REF_3(bool) -> whitelist[uaddress]
REF_3(bool) (->whitelist) := True(bool)"];
}
}
