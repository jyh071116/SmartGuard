digraph G {
// Function: 9918.sol-DSAuth-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 9918.sol-DSAuth-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_12 = UnaryType.BANG x 
CONDITION TMP_12"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 9918.sol-DSAuth-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_13(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_13)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9918.sol-DSAuth-authorized(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,sig))

IRs:
TMP_15(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_15)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9918.sol-DSAuth-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_6 = CONVERT this to address
TMP_7(bool) = src == TMP_6
CONDITION TMP_7"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_8(bool) = src == owner
CONDITION TMP_8"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_9 = CONVERT 0 to DSAuthority
TMP_10(bool) = authority == TMP_9
CONDITION TMP_10"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_11(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_11"];
}
// Function: 9918.sol-DSAuth-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 9918.sol-DSAuth-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 9918.sol-DSAuthority-canCall(address,address,bytes4)
digraph{
}
// Function: 9918.sol-DSExec-exec(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
exec(t,c,0)

IRs:
INTERNAL_CALL, DSExec.exec(address,bytes,uint256)(t,c,0)"];
}
// Function: 9918.sol-DSExec-exec(address,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! tryExec(target,calldata,value)

IRs:
TMP_19(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(target,calldata,value)
TMP_20 = UnaryType.BANG TMP_19 
CONDITION TMP_20"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 9918.sol-DSExec-exec(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
exec(t,c,v)

IRs:
INTERNAL_CALL, DSExec.exec(address,bytes,uint256)(t,c,v)"];
}
// Function: 9918.sol-DSExec-tryExec(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tryExec(t,c,0)

IRs:
TMP_23(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(t,c,0)
RETURN TMP_23"];
}
// Function: 9918.sol-DSExec-tryExec(address,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
target.call.value(value)(calldata)

IRs:
TMP_18(bool) = LOW_LEVEL_CALL, dest:target, function:call, arguments:['calldata'] value:value 
RETURN TMP_18"];
2[label="Node Type: RETURN 2

EXPRESSION:
call_ret

IRs:
RETURN call_ret"];
}
// Function: 9918.sol-DSExec-tryExec(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tryExec(t,c,v)

IRs:
TMP_24(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(t,c,v)
RETURN TMP_24"];
}
// Function: 9918.sol-DSMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_25(uint256) = x + y
z(uint256) := TMP_25(uint256)
TMP_26(bool) = z >= x
TMP_27(None) = SOLIDITY_CALL assert(bool)(TMP_26)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = uint128(x)) == x)

IRs:
TMP_90 = CONVERT x to uint128
z(uint128) := TMP_90(uint128)
TMP_91(bool) = z == x
TMP_92(None) = SOLIDITY_CALL assert(bool)(TMP_91)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_34(uint256) = x / y
z(uint256) := TMP_34(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_37(uint128) = x + y
z(uint128) := TMP_37(uint128)
TMP_38(bool) = z >= x
TMP_39(None) = SOLIDITY_CALL assert(bool)(TMP_38)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_46(uint128) = x / y
z(uint128) := TMP_46(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_48(bool) = x >= y
CONDITION TMP_48"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_47(bool) = x <= y
CONDITION TMP_47"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x * y) >= x)

IRs:
TMP_43(uint128) = x * y
z(uint128) := TMP_43(uint128)
TMP_44(bool) = z >= x
TMP_45(None) = SOLIDITY_CALL assert(bool)(TMP_44)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_40(uint128) = x - y
z(uint128) := TMP_40(uint128)
TMP_41(bool) = z <= x
TMP_42(None) = SOLIDITY_CALL assert(bool)(TMP_41)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_50(bool) = x >= y
CONDITION TMP_50"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_49(bool) = x <= y
CONDITION TMP_49"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_36(bool) = x >= y
CONDITION TMP_36"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_35(bool) = x <= y
CONDITION TMP_35"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x * y) >= x)

IRs:
TMP_31(uint256) = x * y
z(uint256) := TMP_31(uint256)
TMP_32(bool) = z >= x
TMP_33(None) = SOLIDITY_CALL assert(bool)(TMP_32)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_67(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_67"];
}
// Function: 9918.sol-DSMath-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_75 = CONVERT x to uint256
TMP_76(uint256) = TMP_75 * RAY
TMP_77(uint128) = y / 2
TMP_78(uint256) = TMP_76 + TMP_77
TMP_79(uint256) = TMP_78 / y
TMP_80(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_79)
z(uint128) := TMP_80(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_89(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_89"];
}
// Function: 9918.sol-DSMath-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_88(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_88"];
}
// Function: 9918.sol-DSMath-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_69 = CONVERT x to uint256
TMP_70(uint256) = TMP_69 * y
TMP_71(uint128) = RAY / 2
TMP_72(uint256) = TMP_70 + TMP_71
TMP_73(uint256) = TMP_72 / RAY
TMP_74(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_73)
z(uint128) := TMP_74(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_81(bool) = n != 0
CONDITION TMP_81"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_82(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_82(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_83(uint64) = n % 2
TMP_84(bool) = TMP_83 != 0
CONDITION TMP_84"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_85(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_85(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_86(uint64) = n % 2
TMP_87(bool) = TMP_86 != 0
CONDITION TMP_87"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_68(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_68"];
}
// Function: 9918.sol-DSMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_93(uint256) = 10 ** 18
WAD(uint128) := TMP_93(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_94(uint256) = 10 ** 27
RAY(uint128) := TMP_94(uint256)"];
}
// Function: 9918.sol-DSMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_28(uint256) = x - y
z(uint256) := TMP_28(uint256)
TMP_29(bool) = z <= x
TMP_30(None) = SOLIDITY_CALL assert(bool)(TMP_29)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_51(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_51"];
}
// Function: 9918.sol-DSMath-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_59 = CONVERT x to uint256
TMP_60(uint256) = TMP_59 * WAD
TMP_61(uint128) = y / 2
TMP_62(uint256) = TMP_60 + TMP_61
TMP_63(uint256) = TMP_62 / y
TMP_64(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_63)
z(uint128) := TMP_64(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_66(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_66"];
}
// Function: 9918.sol-DSMath-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_65(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_65"];
}
// Function: 9918.sol-DSMath-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_53 = CONVERT x to uint256
TMP_54(uint256) = TMP_53 * y
TMP_55(uint128) = WAD / 2
TMP_56(uint256) = TMP_54 + TMP_55
TMP_57(uint256) = TMP_56 / WAD
TMP_58(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_57)
z(uint128) := TMP_58(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSMath-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_52(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_52"];
}
// Function: 9918.sol-DSNote-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 9918.sol-DSStop-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 9918.sol-DSStop-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_106 = UnaryType.BANG x 
CONDITION TMP_106"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 9918.sol-DSStop-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_112(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_112)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9918.sol-DSStop-authorized(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,sig))

IRs:
TMP_114(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_114)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9918.sol-DSStop-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_100 = CONVERT this to address
TMP_101(bool) = src == TMP_100
CONDITION TMP_101"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_102(bool) = src == owner
CONDITION TMP_102"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_103 = CONVERT 0 to DSAuthority
TMP_104(bool) = authority == TMP_103
CONDITION TMP_104"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_105(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_105"];
}
// Function: 9918.sol-DSStop-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 9918.sol-DSStop-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 9918.sol-DSStop-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 9918.sol-DSStop-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 9918.sol-DSStop-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 9918.sol-DSStop-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(! stopped)

IRs:
TMP_116 = UnaryType.BANG stopped 
INTERNAL_CALL, DSAuth.assert(bool)(TMP_116)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9918.sol-DSToken-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 9918.sol-DSToken-DSToken(WhiteList)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == wlc_.owner())

IRs:
TMP_308(address) = HIGH_LEVEL_CALL, dest:wlc_(WhiteList), function:owner, arguments:[]  
TMP_309(bool) = msg.sender == TMP_308
TMP_310(None) = SOLIDITY_CALL require(bool)(TMP_309)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
wlcontract = wlc_

IRs:
wlcontract(WhiteList) := wlc_(WhiteList)"];
}
// Function: 9918.sol-DSToken-DSTokenBase(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = supply

IRs:
REF_34(uint256) -> _balances[msg.sender]
REF_34(uint256) (->_balances) := supply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = supply

IRs:
_supply(uint256) := supply(uint256)"];
}
// Function: 9918.sol-DSToken-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_240(uint256) = x + y
z(uint256) := TMP_240(uint256)
TMP_241(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_241)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-allowance(address,address)
digraph{
}
// Function: 9918.sol-DSToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(wlcontract.whiteList(msg.sender))

IRs:
TMP_325(bool) = HIGH_LEVEL_CALL, dest:wlcontract(WhiteList), function:whiteList, arguments:['msg.sender']  
TMP_326(None) = SOLIDITY_CALL require(bool)(TMP_325)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(wlcontract.whiteList(guy))

IRs:
TMP_327(bool) = HIGH_LEVEL_CALL, dest:wlcontract(WhiteList), function:whiteList, arguments:['guy']  
TMP_328(None) = SOLIDITY_CALL require(bool)(TMP_327)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
super.approve(guy,wad)

IRs:
TMP_329(bool) = INTERNAL_CALL, DSTokenBase.approve(address,uint256)(guy,wad)
RETURN TMP_329"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
5->1;
}
// Function: 9918.sol-DSToken-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_225 = UnaryType.BANG x 
CONDITION TMP_225"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 9918.sol-DSToken-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_354(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_354)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9918.sol-DSToken-authorized(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,sig))

IRs:
TMP_356(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_356)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9918.sol-DSToken-balanceOf(address)
digraph{
}
// Function: 9918.sol-DSToken-burn(uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(wlcontract.whiteList(msg.sender))

IRs:
TMP_341(bool) = HIGH_LEVEL_CALL, dest:wlcontract(WhiteList), function:whiteList, arguments:['msg.sender']  
TMP_342(None) = SOLIDITY_CALL require(bool)(TMP_341)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_balances[msg.sender] = sub(_balances[msg.sender],wad)

IRs:
REF_67(uint256) -> _balances[msg.sender]
REF_68(uint256) -> _balances[msg.sender]
TMP_343(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_68,wad)
REF_67(uint256) (->_balances) := TMP_343(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_supply = sub(_supply,wad)

IRs:
TMP_344(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(_supply,wad)
_supply(uint256) := TMP_344(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
6->1;
}
// Function: 9918.sol-DSToken-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = uint128(x)) == x)

IRs:
TMP_305 = CONVERT x to uint128
z(uint128) := TMP_305(uint128)
TMP_306(bool) = z == x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_306)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_249(uint256) = x / y
z(uint256) := TMP_249(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_252(uint128) = x + y
z(uint128) := TMP_252(uint128)
TMP_253(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_253)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_261(uint128) = x / y
z(uint128) := TMP_261(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_263(bool) = x >= y
CONDITION TMP_263"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_262(bool) = x <= y
CONDITION TMP_262"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x * y) >= x)

IRs:
TMP_258(uint128) = x * y
z(uint128) := TMP_258(uint128)
TMP_259(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_259)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_255(uint128) = x - y
z(uint128) := TMP_255(uint128)
TMP_256(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_265(bool) = x >= y
CONDITION TMP_265"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_264(bool) = x <= y
CONDITION TMP_264"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_219 = CONVERT this to address
TMP_220(bool) = src == TMP_219
CONDITION TMP_220"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_221(bool) = src == owner
CONDITION TMP_221"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_222 = CONVERT 0 to DSAuthority
TMP_223(bool) = authority == TMP_222
CONDITION TMP_223"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_224(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_224"];
}
// Function: 9918.sol-DSToken-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_251(bool) = x >= y
CONDITION TMP_251"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_250(bool) = x <= y
CONDITION TMP_250"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-mint(uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(wlcontract.whiteList(msg.sender))

IRs:
TMP_334(bool) = HIGH_LEVEL_CALL, dest:wlcontract(WhiteList), function:whiteList, arguments:['msg.sender']  
TMP_335(None) = SOLIDITY_CALL require(bool)(TMP_334)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_balances[msg.sender] = add(_balances[msg.sender],wad)

IRs:
REF_64(uint256) -> _balances[msg.sender]
REF_65(uint256) -> _balances[msg.sender]
TMP_336(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_65,wad)
REF_64(uint256) (->_balances) := TMP_336(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_supply = add(_supply,wad)

IRs:
TMP_337(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(_supply,wad)
_supply(uint256) := TMP_337(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
6->1;
}
// Function: 9918.sol-DSToken-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x * y) >= x)

IRs:
TMP_246(uint256) = x * y
z(uint256) := TMP_246(uint256)
TMP_247(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_247)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 9918.sol-DSToken-pull(address,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transferFrom(src,msg.sender,wad)

IRs:
TMP_333(bool) = INTERNAL_CALL, DSToken.transferFrom(address,address,uint256)(src,msg.sender,wad)
RETURN TMP_333"];
}
// Function: 9918.sol-DSToken-push(address,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transfer(dst,wad)

IRs:
TMP_332(bool) = INTERNAL_CALL, DSToken.transfer(address,uint256)(dst,wad)
RETURN TMP_332"];
}
// Function: 9918.sol-DSToken-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_282(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_282"];
}
// Function: 9918.sol-DSToken-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_290 = CONVERT x to uint256
TMP_291(uint256) = TMP_290 * RAY
TMP_292(uint128) = y / 2
TMP_293(uint256) = TMP_291 + TMP_292
TMP_294(uint256) = TMP_293 / y
TMP_295(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_294)
z(uint128) := TMP_295(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_304(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_304"];
}
// Function: 9918.sol-DSToken-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_303(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_303"];
}
// Function: 9918.sol-DSToken-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_284 = CONVERT x to uint256
TMP_285(uint256) = TMP_284 * y
TMP_286(uint128) = RAY / 2
TMP_287(uint256) = TMP_285 + TMP_286
TMP_288(uint256) = TMP_287 / RAY
TMP_289(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_288)
z(uint128) := TMP_289(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_296(bool) = n != 0
CONDITION TMP_296"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_297(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_297(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_298(uint64) = n % 2
TMP_299(bool) = TMP_298 != 0
CONDITION TMP_299"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_300(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_300(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_301(uint64) = n % 2
TMP_302(bool) = TMP_301 != 0
CONDITION TMP_302"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_283(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_283"];
}
// Function: 9918.sol-DSToken-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 9918.sol-DSToken-setName(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = name_

IRs:
name(bytes32) := name_(bytes32)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->1;
}
// Function: 9918.sol-DSToken-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 9918.sol-DSToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_349(uint256) = 10 ** 18
WAD(uint128) := TMP_349(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_350(uint256) = 10 ** 27
RAY(uint128) := TMP_350(uint256)"];
}
// Function: 9918.sol-DSToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
symbol = GENEOS

IRs:
symbol(bytes32) := GENEOS(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
name = 

IRs:
name(bytes32) := (string)"];
}
// Function: 9918.sol-DSToken-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 9918.sol-DSToken-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 9918.sol-DSToken-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(! stopped)

IRs:
TMP_351 = UnaryType.BANG stopped 
INTERNAL_CALL, DSAuth.assert(bool)(TMP_351)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9918.sol-DSToken-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_243(uint256) = x - y
z(uint256) := TMP_243(uint256)
TMP_244(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_244)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-totalSupply()
digraph{
}
// Function: 9918.sol-DSToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(wlcontract.whiteList(msg.sender))

IRs:
TMP_311(bool) = HIGH_LEVEL_CALL, dest:wlcontract(WhiteList), function:whiteList, arguments:['msg.sender']  
TMP_312(None) = SOLIDITY_CALL require(bool)(TMP_311)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(wlcontract.whiteList(dst))

IRs:
TMP_313(bool) = HIGH_LEVEL_CALL, dest:wlcontract(WhiteList), function:whiteList, arguments:['dst']  
TMP_314(None) = SOLIDITY_CALL require(bool)(TMP_313)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
super.transfer(dst,wad)

IRs:
TMP_315(bool) = INTERNAL_CALL, DSTokenBase.transfer(address,uint256)(dst,wad)
RETURN TMP_315"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
5->1;
}
// Function: 9918.sol-DSToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(wlcontract.whiteList(src))

IRs:
TMP_318(bool) = HIGH_LEVEL_CALL, dest:wlcontract(WhiteList), function:whiteList, arguments:['src']  
TMP_319(None) = SOLIDITY_CALL require(bool)(TMP_318)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(wlcontract.whiteList(dst))

IRs:
TMP_320(bool) = HIGH_LEVEL_CALL, dest:wlcontract(WhiteList), function:whiteList, arguments:['dst']  
TMP_321(None) = SOLIDITY_CALL require(bool)(TMP_320)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
super.transferFrom(src,dst,wad)

IRs:
TMP_322(bool) = INTERNAL_CALL, DSTokenBase.transferFrom(address,address,uint256)(src,dst,wad)
RETURN TMP_322"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
5->1;
}
// Function: 9918.sol-DSToken-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_266(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_266"];
}
// Function: 9918.sol-DSToken-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_274 = CONVERT x to uint256
TMP_275(uint256) = TMP_274 * WAD
TMP_276(uint128) = y / 2
TMP_277(uint256) = TMP_275 + TMP_276
TMP_278(uint256) = TMP_277 / y
TMP_279(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_278)
z(uint128) := TMP_279(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_281(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_281"];
}
// Function: 9918.sol-DSToken-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_280(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_280"];
}
// Function: 9918.sol-DSToken-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_268 = CONVERT x to uint256
TMP_269(uint256) = TMP_268 * y
TMP_270(uint128) = WAD / 2
TMP_271(uint256) = TMP_269 + TMP_270
TMP_272(uint256) = TMP_271 / WAD
TMP_273(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_272)
z(uint128) := TMP_273(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSToken-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_267(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_267"];
}
// Function: 9918.sol-DSTokenBase-DSTokenBase(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = supply

IRs:
REF_4(uint256) -> _balances[msg.sender]
REF_4(uint256) (->_balances) := supply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = supply

IRs:
_supply(uint256) := supply(uint256)"];
}
// Function: 9918.sol-DSTokenBase-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_118(uint256) = x + y
z(uint256) := TMP_118(uint256)
TMP_119(bool) = z >= x
TMP_120(None) = SOLIDITY_CALL assert(bool)(TMP_119)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_approvals[src][guy]

IRs:
REF_6(mapping(address => uint256)) -> _approvals[src]
REF_7(uint256) -> REF_6[guy]
RETURN REF_7"];
}
// Function: 9918.sol-DSTokenBase-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_approvals[msg.sender][guy] = wad

IRs:
REF_24(mapping(address => uint256)) -> _approvals[msg.sender]
REF_25(uint256) -> REF_24[guy]
REF_25(uint256) (->_approvals) := wad(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,guy,wad)

IRs:
Emit Approval(msg.sender,guy,wad)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9918.sol-DSTokenBase-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_balances[src]

IRs:
REF_5(uint256) -> _balances[src]
RETURN REF_5"];
}
// Function: 9918.sol-DSTokenBase-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = uint128(x)) == x)

IRs:
TMP_183 = CONVERT x to uint128
z(uint128) := TMP_183(uint128)
TMP_184(bool) = z == x
TMP_185(None) = SOLIDITY_CALL assert(bool)(TMP_184)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_127(uint256) = x / y
z(uint256) := TMP_127(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_130(uint128) = x + y
z(uint128) := TMP_130(uint128)
TMP_131(bool) = z >= x
TMP_132(None) = SOLIDITY_CALL assert(bool)(TMP_131)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_139(uint128) = x / y
z(uint128) := TMP_139(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_141(bool) = x >= y
CONDITION TMP_141"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_140(bool) = x <= y
CONDITION TMP_140"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x * y) >= x)

IRs:
TMP_136(uint128) = x * y
z(uint128) := TMP_136(uint128)
TMP_137(bool) = z >= x
TMP_138(None) = SOLIDITY_CALL assert(bool)(TMP_137)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_133(uint128) = x - y
z(uint128) := TMP_133(uint128)
TMP_134(bool) = z <= x
TMP_135(None) = SOLIDITY_CALL assert(bool)(TMP_134)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_143(bool) = x >= y
CONDITION TMP_143"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_142(bool) = x <= y
CONDITION TMP_142"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_129(bool) = x >= y
CONDITION TMP_129"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_128(bool) = x <= y
CONDITION TMP_128"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x * y) >= x)

IRs:
TMP_124(uint256) = x * y
z(uint256) := TMP_124(uint256)
TMP_125(bool) = z >= x
TMP_126(None) = SOLIDITY_CALL assert(bool)(TMP_125)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_160(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_160"];
}
// Function: 9918.sol-DSTokenBase-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_168 = CONVERT x to uint256
TMP_169(uint256) = TMP_168 * RAY
TMP_170(uint128) = y / 2
TMP_171(uint256) = TMP_169 + TMP_170
TMP_172(uint256) = TMP_171 / y
TMP_173(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_172)
z(uint128) := TMP_173(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_182(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_182"];
}
// Function: 9918.sol-DSTokenBase-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_181(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_181"];
}
// Function: 9918.sol-DSTokenBase-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_162 = CONVERT x to uint256
TMP_163(uint256) = TMP_162 * y
TMP_164(uint128) = RAY / 2
TMP_165(uint256) = TMP_163 + TMP_164
TMP_166(uint256) = TMP_165 / RAY
TMP_167(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_166)
z(uint128) := TMP_167(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_174(bool) = n != 0
CONDITION TMP_174"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_175(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_175(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_176(uint64) = n % 2
TMP_177(bool) = TMP_176 != 0
CONDITION TMP_177"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_178(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_178(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_179(uint64) = n % 2
TMP_180(bool) = TMP_179 != 0
CONDITION TMP_180"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_161(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_161"];
}
// Function: 9918.sol-DSTokenBase-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_200(uint256) = 10 ** 18
WAD(uint128) := TMP_200(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_201(uint256) = 10 ** 27
RAY(uint128) := TMP_201(uint256)"];
}
// Function: 9918.sol-DSTokenBase-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_121(uint256) = x - y
z(uint256) := TMP_121(uint256)
TMP_122(bool) = z <= x
TMP_123(None) = SOLIDITY_CALL assert(bool)(TMP_122)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_supply

IRs:
RETURN _supply"];
}
// Function: 9918.sol-DSTokenBase-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_balances[msg.sender] >= wad)

IRs:
REF_8(uint256) -> _balances[msg.sender]
TMP_186(bool) = REF_8 >= wad
TMP_187(None) = SOLIDITY_CALL assert(bool)(TMP_186)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_balances[msg.sender] = sub(_balances[msg.sender],wad)

IRs:
REF_9(uint256) -> _balances[msg.sender]
REF_10(uint256) -> _balances[msg.sender]
TMP_188(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_10,wad)
REF_9(uint256) (->_balances) := TMP_188(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[dst] = add(_balances[dst],wad)

IRs:
REF_11(uint256) -> _balances[dst]
REF_12(uint256) -> _balances[dst]
TMP_189(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_12,wad)
REF_11(uint256) (->_balances) := TMP_189(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,dst,wad)

IRs:
Emit Transfer(msg.sender,dst,wad)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9918.sol-DSTokenBase-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_balances[src] >= wad)

IRs:
REF_13(uint256) -> _balances[src]
TMP_191(bool) = REF_13 >= wad
TMP_192(None) = SOLIDITY_CALL assert(bool)(TMP_191)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_approvals[src][msg.sender] >= wad)

IRs:
REF_14(mapping(address => uint256)) -> _approvals[src]
REF_15(uint256) -> REF_14[msg.sender]
TMP_193(bool) = REF_15 >= wad
TMP_194(None) = SOLIDITY_CALL assert(bool)(TMP_193)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_approvals[src][msg.sender] = sub(_approvals[src][msg.sender],wad)

IRs:
REF_16(mapping(address => uint256)) -> _approvals[src]
REF_17(uint256) -> REF_16[msg.sender]
REF_18(mapping(address => uint256)) -> _approvals[src]
REF_19(uint256) -> REF_18[msg.sender]
TMP_195(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_19,wad)
REF_17(uint256) (->_approvals) := TMP_195(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[src] = sub(_balances[src],wad)

IRs:
REF_20(uint256) -> _balances[src]
REF_21(uint256) -> _balances[src]
TMP_196(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_21,wad)
REF_20(uint256) (->_balances) := TMP_196(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_balances[dst] = add(_balances[dst],wad)

IRs:
REF_22(uint256) -> _balances[dst]
REF_23(uint256) -> _balances[dst]
TMP_197(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_23,wad)
REF_22(uint256) (->_balances) := TMP_197(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(src,dst,wad)

IRs:
Emit Transfer(src,dst,wad)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 9918.sol-DSTokenBase-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_144(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_144"];
}
// Function: 9918.sol-DSTokenBase-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_152 = CONVERT x to uint256
TMP_153(uint256) = TMP_152 * WAD
TMP_154(uint128) = y / 2
TMP_155(uint256) = TMP_153 + TMP_154
TMP_156(uint256) = TMP_155 / y
TMP_157(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_156)
z(uint128) := TMP_157(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_159(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_159"];
}
// Function: 9918.sol-DSTokenBase-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_158(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_158"];
}
// Function: 9918.sol-DSTokenBase-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_146 = CONVERT x to uint256
TMP_147(uint256) = TMP_146 * y
TMP_148(uint128) = WAD / 2
TMP_149(uint256) = TMP_147 + TMP_148
TMP_150(uint256) = TMP_149 / WAD
TMP_151(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_150)
z(uint128) := TMP_151(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-DSTokenBase-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_145(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_145"];
}
// Function: 9918.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 9918.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 9918.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 9918.sol-ERC20-totalSupply()
digraph{
}
// Function: 9918.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 9918.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 9918.sol-GENEOSSale-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 9918.sol-GENEOSSale-GENEOSSale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
finalWindowTime = startTime + (numberOfDays * 1200)

IRs:
TMP_446(uint256) = numberOfDays * 1200
TMP_447(uint256) = startTime + TMP_446
finalWindowTime(uint256) := TMP_447(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
finishTime = finalWindowTime + 18000

IRs:
TMP_448(uint256) = finalWindowTime + 18000
finishTime(uint256) := TMP_448(uint256)"];
}
// Function: 9918.sol-GENEOSSale-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_358(uint256) = x + y
z(uint256) := TMP_358(uint256)
TMP_359(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_359)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_445 = UnaryType.BANG x 
CONDITION TMP_445"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 9918.sol-GENEOSSale-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_545(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_545)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9918.sol-GENEOSSale-authorized(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,sig))

IRs:
TMP_547(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_547)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9918.sol-GENEOSSale-buy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyWithLimit(today(),0)

IRs:
TMP_504(uint256) = INTERNAL_CALL, GENEOSSale.today()()
INTERNAL_CALL, GENEOSSale.buyWithLimit(uint256,uint256)(TMP_504,0)"];
}
// Function: 9918.sol-GENEOSSale-buyWithLimit(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(today() > 0 && today() <= numberOfDays + 1)

IRs:
TMP_485(uint256) = INTERNAL_CALL, GENEOSSale.today()()
TMP_486(bool) = TMP_485 > 0
TMP_487(uint256) = INTERNAL_CALL, GENEOSSale.today()()
TMP_488(uint256) = numberOfDays + 1
TMP_489(bool) = TMP_487 <= TMP_488
TMP_490(bool) = TMP_486 && TMP_489
INTERNAL_CALL, DSAuth.assert(bool)(TMP_490)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(msg.value >= 10000000000000000)

IRs:
TMP_492(bool) = msg.value >= 10000000000000000
INTERNAL_CALL, DSAuth.assert(bool)(TMP_492)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(day >= today())

IRs:
TMP_494(uint256) = INTERNAL_CALL, GENEOSSale.today()()
TMP_495(bool) = day >= TMP_494
INTERNAL_CALL, DSAuth.assert(bool)(TMP_495)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(day <= numberOfDays + 1)

IRs:
TMP_497(uint256) = numberOfDays + 1
TMP_498(bool) = day <= TMP_497
INTERNAL_CALL, DSAuth.assert(bool)(TMP_498)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
userBuys[day][msg.sender] += msg.value

IRs:
REF_78(mapping(address => uint256)) -> userBuys[day]
REF_79(uint256) -> REF_78[msg.sender]
REF_79(-> userBuys) = REF_79 + msg.value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dailyTotals[day] += msg.value

IRs:
REF_80(uint256) -> dailyTotals[day]
REF_80(-> dailyTotals) = REF_80 + msg.value"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
limit != 0

IRs:
TMP_500(bool) = limit != 0
CONDITION TMP_500"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(dailyTotals[day] <= limit)

IRs:
REF_81(uint256) -> dailyTotals[day]
TMP_501(bool) = REF_81 <= limit
INTERNAL_CALL, DSAuth.assert(bool)(TMP_501)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
LogBuy(day,msg.sender,msg.value)

IRs:
Emit LogBuy(day,msg.sender,msg.value)"];
}
// Function: 9918.sol-GENEOSSale-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = uint128(x)) == x)

IRs:
TMP_423 = CONVERT x to uint128
z(uint128) := TMP_423(uint128)
TMP_424(bool) = z == x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_424)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-claim(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(today() > day)

IRs:
TMP_507(uint256) = INTERNAL_CALL, GENEOSSale.today()()
TMP_508(bool) = TMP_507 > day
INTERNAL_CALL, DSAuth.assert(bool)(TMP_508)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
claimed[day][msg.sender] || dailyTotals[day] == 0

IRs:
REF_82(mapping(address => bool)) -> claimed[day]
REF_83(bool) -> REF_82[msg.sender]
REF_84(uint256) -> dailyTotals[day]
TMP_510(bool) = REF_84 == 0
TMP_511(bool) = REF_83 || TMP_510
CONDITION TMP_511"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
dailyTotal = cast(dailyTotals[day])

IRs:
REF_85(uint256) -> dailyTotals[day]
TMP_512(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(REF_85)
dailyTotal(uint128) := TMP_512(uint128)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
userTotal = cast(userBuys[day][msg.sender])

IRs:
REF_86(mapping(address => uint256)) -> userBuys[day]
REF_87(uint256) -> REF_86[msg.sender]
TMP_513(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(REF_87)
userTotal(uint128) := TMP_513(uint128)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
price = wdiv(cast(createOnDay(day)),dailyTotal)

IRs:
TMP_514(uint256) = INTERNAL_CALL, GENEOSSale.createOnDay(uint256)(day)
TMP_515(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_514)
TMP_516(uint128) = INTERNAL_CALL, DSMath.wdiv(uint128,uint128)(TMP_515,dailyTotal)
price(uint128) := TMP_516(uint128)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
reward = wmul(price,userTotal)

IRs:
TMP_517(uint128) = INTERNAL_CALL, DSMath.wmul(uint128,uint128)(price,userTotal)
reward(uint128) := TMP_517(uint128)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
claimed[day][msg.sender] = true

IRs:
REF_88(mapping(address => bool)) -> claimed[day]
REF_89(bool) -> REF_88[msg.sender]
REF_89(bool) (->claimed) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
GENEOS.push(msg.sender,reward)

IRs:
TMP_518(bool) = HIGH_LEVEL_CALL, dest:GENEOS(DSToken), function:push, arguments:['msg.sender', 'reward']  "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
LogClaim(day,msg.sender,reward)

IRs:
Emit LogClaim(day,msg.sender,reward)"];
}
// Function: 9918.sol-GENEOSSale-claimAll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < today()

IRs:
TMP_520(uint256) = INTERNAL_CALL, GENEOSSale.today()()
TMP_521(bool) = i < TMP_520
CONDITION TMP_521"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
claim(i)

IRs:
INTERNAL_CALL, GENEOSSale.claim(uint256)(i)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_523(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
}
// Function: 9918.sol-GENEOSSale-collect()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(today() > 0)

IRs:
TMP_532(uint256) = INTERNAL_CALL, GENEOSSale.today()()
TMP_533(bool) = TMP_532 > 0
INTERNAL_CALL, DSAuth.assert(bool)(TMP_533)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
exec(msg.sender,this.balance)

IRs:
REF_93(uint256) = SOLIDITY_CALL balance(address)(this)
INTERNAL_CALL, DSExec.exec(address,uint256)(msg.sender,REF_93)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LogCollect(this.balance)

IRs:
REF_94(uint256) = SOLIDITY_CALL balance(address)(this)
Emit LogCollect(REF_94)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
4->1;
}
// Function: 9918.sol-GENEOSSale-createOnDay(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(day >= 1 && day <= 176)

IRs:
TMP_480(bool) = day >= 1
TMP_481(bool) = day <= 176
TMP_482(bool) = TMP_480 && TMP_481
INTERNAL_CALL, DSAuth.assert(bool)(TMP_482)"];
1->3;
3[label="Node Type: IF 3

EXPRESSION:
day == 176

IRs:
TMP_484(bool) = day == 176
CONDITION TMP_484"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
createLastDay

IRs:
RETURN createLastDay"];
5[label="Node Type: RETURN 5

EXPRESSION:
createPerDay

IRs:
RETURN createPerDay"];
}
// Function: 9918.sol-GENEOSSale-dayFor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
timestamp < startTime

IRs:
TMP_470(bool) = timestamp < startTime
CONDITION TMP_470"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
timestamp >= startTime && timestamp < finalWindowTime

IRs:
TMP_471(bool) = timestamp >= startTime
TMP_472(bool) = timestamp < finalWindowTime
TMP_473(bool) = TMP_471 && TMP_472
CONDITION TMP_473"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
sub(timestamp,startTime) / 300 + 1

IRs:
TMP_474(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(timestamp,startTime)
TMP_475(uint256) = TMP_474 / 300
TMP_476(uint256) = TMP_475 + 1
RETURN TMP_476"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
timestamp >= finalWindowTime && timestamp < finishTime

IRs:
TMP_477(bool) = timestamp >= finalWindowTime
TMP_478(bool) = timestamp < finishTime
TMP_479(bool) = TMP_477 && TMP_478
CONDITION TMP_479"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
176

IRs:
RETURN 176"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
999

IRs:
RETURN 999"];
}
// Function: 9918.sol-GENEOSSale-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_367(uint256) = x / y
z(uint256) := TMP_367(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-exec(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
exec(t,c,0)

IRs:
INTERNAL_CALL, DSExec.exec(address,bytes,uint256)(t,c,0)"];
}
// Function: 9918.sol-GENEOSSale-exec(address,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! tryExec(target,calldata,value)

IRs:
TMP_428(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(target,calldata,value)
TMP_429 = UnaryType.BANG TMP_428 
CONDITION TMP_429"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 9918.sol-GENEOSSale-exec(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
exec(t,c,v)

IRs:
INTERNAL_CALL, DSExec.exec(address,bytes,uint256)(t,c,v)"];
}
// Function: 9918.sol-GENEOSSale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buy()

IRs:
INTERNAL_CALL, GENEOSSale.buy()()"];
}
// Function: 9918.sol-GENEOSSale-freeze()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(time() > finishTime)

IRs:
TMP_538(uint256) = INTERNAL_CALL, GENEOSSale.time()()
TMP_539(bool) = TMP_538 > finishTime
INTERNAL_CALL, DSAuth.assert(bool)(TMP_539)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
GENEOS.stop()

IRs:
HIGH_LEVEL_CALL, dest:GENEOS(DSToken), function:stop, arguments:[]  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LogFreeze()

IRs:
Emit LogFreeze()"];
}
// Function: 9918.sol-GENEOSSale-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_370(uint128) = x + y
z(uint128) := TMP_370(uint128)
TMP_371(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_371)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_379(uint128) = x / y
z(uint128) := TMP_379(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_381(bool) = x >= y
CONDITION TMP_381"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_380(bool) = x <= y
CONDITION TMP_380"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x * y) >= x)

IRs:
TMP_376(uint128) = x * y
z(uint128) := TMP_376(uint128)
TMP_377(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_377)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_373(uint128) = x - y
z(uint128) := TMP_373(uint128)
TMP_374(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_374)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_383(bool) = x >= y
CONDITION TMP_383"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_382(bool) = x <= y
CONDITION TMP_382"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-initialize(DSToken)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(address(GENEOS) == address(0))

IRs:
TMP_449 = CONVERT GENEOS to address
TMP_450 = CONVERT 0 to address
TMP_451(bool) = TMP_449 == TMP_450
INTERNAL_CALL, DSAuth.assert(bool)(TMP_451)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(geneos.owner() == address(this))

IRs:
TMP_453(address) = HIGH_LEVEL_CALL, dest:geneos(DSToken), function:owner, arguments:[]  
TMP_454 = CONVERT this to address
TMP_455(bool) = TMP_453 == TMP_454
INTERNAL_CALL, DSAuth.assert(bool)(TMP_455)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(geneos.authority() == DSAuthority(0))

IRs:
TMP_457(DSAuthority) = HIGH_LEVEL_CALL, dest:geneos(DSToken), function:authority, arguments:[]  
TMP_458 = CONVERT 0 to DSAuthority
TMP_459(bool) = TMP_457 == TMP_458
INTERNAL_CALL, DSAuth.assert(bool)(TMP_459)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(geneos.totalSupply() == 0)

IRs:
TMP_461(uint256) = HIGH_LEVEL_CALL, dest:geneos(DSToken), function:totalSupply, arguments:[]  
TMP_462(bool) = TMP_461 == 0
INTERNAL_CALL, DSAuth.assert(bool)(TMP_462)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
GENEOS = geneos

IRs:
GENEOS(DSToken) := geneos(DSToken)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
GENEOS.mint(totalSupply)

IRs:
HIGH_LEVEL_CALL, dest:GENEOS(DSToken), function:mint, arguments:['totalSupply']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
GENEOS.push(foundersAddress,foundersAllocation)

IRs:
TMP_465(bool) = HIGH_LEVEL_CALL, dest:GENEOS(DSToken), function:push, arguments:['foundersAddress', 'foundersAllocation']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
keys[foundersAddress] = foundersKey

IRs:
REF_77(string) -> keys[foundersAddress]
REF_77(string) (->keys) := foundersKey(string)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
LogRegister(foundersAddress,foundersKey)

IRs:
Emit LogRegister(foundersAddress,foundersKey)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
10->1;
}
// Function: 9918.sol-GENEOSSale-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_439 = CONVERT this to address
TMP_440(bool) = src == TMP_439
CONDITION TMP_440"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_441(bool) = src == owner
CONDITION TMP_441"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_442 = CONVERT 0 to DSAuthority
TMP_443(bool) = authority == TMP_442
CONDITION TMP_443"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_444(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_444"];
}
// Function: 9918.sol-GENEOSSale-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_369(bool) = x >= y
CONDITION TMP_369"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_368(bool) = x <= y
CONDITION TMP_368"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x * y) >= x)

IRs:
TMP_364(uint256) = x * y
z(uint256) := TMP_364(uint256)
TMP_365(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_365)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_400(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_400"];
}
// Function: 9918.sol-GENEOSSale-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_408 = CONVERT x to uint256
TMP_409(uint256) = TMP_408 * RAY
TMP_410(uint128) = y / 2
TMP_411(uint256) = TMP_409 + TMP_410
TMP_412(uint256) = TMP_411 / y
TMP_413(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_412)
z(uint128) := TMP_413(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-register(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(today() <= numberOfDays + 1)

IRs:
TMP_524(uint256) = INTERNAL_CALL, GENEOSSale.today()()
TMP_525(uint256) = numberOfDays + 1
TMP_526(bool) = TMP_524 <= TMP_525
INTERNAL_CALL, DSAuth.assert(bool)(TMP_526)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bytes(key).length <= 64)

IRs:
TMP_528 = CONVERT key to bytes
REF_91 -> LENGTH TMP_528
TMP_529(bool) = REF_91 <= 64
INTERNAL_CALL, DSAuth.assert(bool)(TMP_529)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
keys[msg.sender] = key

IRs:
REF_92(string) -> keys[msg.sender]
REF_92(string) (->keys) := key(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogRegister(msg.sender,key)

IRs:
Emit LogRegister(msg.sender,key)"];
}
// Function: 9918.sol-GENEOSSale-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_422(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_422"];
}
// Function: 9918.sol-GENEOSSale-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_421(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_421"];
}
// Function: 9918.sol-GENEOSSale-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_402 = CONVERT x to uint256
TMP_403(uint256) = TMP_402 * y
TMP_404(uint128) = RAY / 2
TMP_405(uint256) = TMP_403 + TMP_404
TMP_406(uint256) = TMP_405 / RAY
TMP_407(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_406)
z(uint128) := TMP_407(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_414(bool) = n != 0
CONDITION TMP_414"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_415(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_415(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_416(uint64) = n % 2
TMP_417(bool) = TMP_416 != 0
CONDITION TMP_417"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_418(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_418(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_419(uint64) = n % 2
TMP_420(bool) = TMP_419 != 0
CONDITION TMP_420"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_401(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_401"];
}
// Function: 9918.sol-GENEOSSale-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 9918.sol-GENEOSSale-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 9918.sol-GENEOSSale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_543(uint256) = 10 ** 18
WAD(uint128) := TMP_543(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_544(uint256) = 10 ** 27
RAY(uint128) := TMP_544(uint256)"];
}
// Function: 9918.sol-GENEOSSale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 1000000000000000000000000000

IRs:
totalSupply(uint128) := 1000000000000000000000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
foundersAllocation = 100000000000000000000000000

IRs:
foundersAllocation(uint128) := 100000000000000000000000000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
foundersKey = Dev key

IRs:
foundersKey(string) := Dev key(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
createLastDay = 200000000000000000000000000

IRs:
createLastDay(uint256) := 200000000000000000000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
createPerDay = 4000000000000000000000000

IRs:
createPerDay(uint256) := 4000000000000000000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
numberOfDays = 175

IRs:
numberOfDays(uint256) := 175(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
foundersAddress = 0x37048f9C92a41fcE4535FDE3022B887b34D7eC0E

IRs:
foundersAddress(address) := 314096205711962246873576181663718488325920123918(address)"];
}
// Function: 9918.sol-GENEOSSale-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_361(uint256) = x - y
z(uint256) := TMP_361(uint256)
TMP_362(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_362)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-time()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
block.timestamp

IRs:
RETURN block.timestamp"];
}
// Function: 9918.sol-GENEOSSale-today()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
dayFor(time())

IRs:
TMP_468(uint256) = INTERNAL_CALL, GENEOSSale.time()()
TMP_469(uint256) = INTERNAL_CALL, GENEOSSale.dayFor(uint256)(TMP_468)
RETURN TMP_469"];
}
// Function: 9918.sol-GENEOSSale-tryExec(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tryExec(t,c,0)

IRs:
TMP_432(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(t,c,0)
RETURN TMP_432"];
}
// Function: 9918.sol-GENEOSSale-tryExec(address,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
target.call.value(value)(calldata)

IRs:
TMP_427(bool) = LOW_LEVEL_CALL, dest:target, function:call, arguments:['calldata'] value:value 
RETURN TMP_427"];
2[label="Node Type: RETURN 2

EXPRESSION:
call_ret

IRs:
RETURN call_ret"];
}
// Function: 9918.sol-GENEOSSale-tryExec(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tryExec(t,c,v)

IRs:
TMP_433(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(t,c,v)
RETURN TMP_433"];
}
// Function: 9918.sol-GENEOSSale-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_384(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_384"];
}
// Function: 9918.sol-GENEOSSale-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_392 = CONVERT x to uint256
TMP_393(uint256) = TMP_392 * WAD
TMP_394(uint128) = y / 2
TMP_395(uint256) = TMP_393 + TMP_394
TMP_396(uint256) = TMP_395 / y
TMP_397(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_396)
z(uint128) := TMP_397(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_399(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_399"];
}
// Function: 9918.sol-GENEOSSale-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_398(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_398"];
}
// Function: 9918.sol-GENEOSSale-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_386 = CONVERT x to uint256
TMP_387(uint256) = TMP_386 * y
TMP_388(uint128) = WAD / 2
TMP_389(uint256) = TMP_387 + TMP_388
TMP_390(uint256) = TMP_389 / WAD
TMP_391(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_390)
z(uint128) := TMP_391(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 9918.sol-GENEOSSale-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_385(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_385"];
}
// Function: 9918.sol-WhiteList-WhiteList()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whiteList[owner] = true

IRs:
REF_26(bool) -> whiteList[owner]
REF_26(bool) (->whiteList) := True(bool)"];
}
// Function: 9918.sol-WhiteList-addToWhiteList(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_202(bool) = msg.sender == owner
TMP_203(None) = SOLIDITY_CALL require(bool)(TMP_202)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _addresses.length

IRs:
REF_27 -> LENGTH _addresses
TMP_204(bool) = i < REF_27
CONDITION TMP_204"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whiteList[_addresses[i]] = true

IRs:
REF_28(address) -> _addresses[i]
REF_29(bool) -> whiteList[REF_28]
REF_29(bool) (->whiteList) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_205(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
}
// Function: 9918.sol-WhiteList-removeFromWhiteList(address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_206(bool) = msg.sender == owner
TMP_207(None) = SOLIDITY_CALL require(bool)(TMP_206)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _addresses.length

IRs:
REF_30 -> LENGTH _addresses
TMP_208(bool) = i < REF_30
CONDITION TMP_208"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whiteList[_addresses[i]] = false

IRs:
REF_31(address) -> _addresses[i]
REF_32(bool) -> whiteList[REF_31]
REF_32(bool) (->whiteList) := False(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_209(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
}
}
