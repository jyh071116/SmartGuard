digraph G {
// Function: 9994.sol-AddressUtils-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
size > 0

IRs:
TMP_12(bool) = size > 0
RETURN TMP_12"];
}
// Function: 9994.sol-BaseGame-_createForecast(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tokenId < tokens.length)

IRs:
REF_105 -> LENGTH tokens
TMP_275(bool) = _tokenId < REF_105
TMP_276(None) = SOLIDITY_CALL require(bool)(TMP_275)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newForecast = Forecast({gameId:_gameId,forecastBlockNumber:block.number,forecastData:_forecastData})

IRs:
TMP_277(BaseGame.Forecast) = new Forecast(_gameId,block.number,_forecastData)
newForecast(BaseGame.Forecast) := TMP_277(BaseGame.Forecast)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
newForecastId = forecasts.push(newForecast) - 1

IRs:
REF_107 -> LENGTH forecasts
TMP_280(uint256) := REF_107(uint256)
TMP_281(uint256) = TMP_280 + 1
REF_107(uint256) (->forecasts) := TMP_281(uint256)
REF_108(BaseGame.Forecast) -> forecasts[TMP_280]
REF_108(BaseGame.Forecast) (->forecasts) := newForecast(BaseGame.Forecast)
TMP_279(None) = TMP_278 - 1
newForecastId(uint256) := TMP_279(None)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
forecastToToken[newForecastId] = _tokenId

IRs:
REF_109(uint256) -> forecastToToken[newForecastId]
REF_109(uint256) (->forecastToToken) := _tokenId(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenForecasts[_tokenId].push(newForecastId)

IRs:
REF_110(uint256[]) -> tokenForecasts[_tokenId]
REF_112 -> LENGTH REF_110
TMP_283(uint256) := REF_112(uint256)
TMP_284(uint256) = TMP_283 + 1
REF_112(uint256) (->tokenForecasts) := TMP_284(uint256)
REF_113(uint256) -> REF_110[TMP_283]
REF_113(uint256) (->tokenForecasts) := newForecastId(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games[_gameId].forecasts.push(newForecastId)

IRs:
REF_114(BaseGame.Game) -> games[_gameId]
REF_115(uint256[]) -> REF_114.forecasts
REF_117 -> LENGTH REF_115
TMP_286(uint256) := REF_117(uint256)
TMP_287(uint256) = TMP_286 + 1
REF_117(uint256) (->games) := TMP_287(uint256)
REF_118(uint256) -> REF_115[TMP_286]
REF_118(uint256) (->games) := newForecastId(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
NewForecast(tokenOwner[_tokenId],_tokenId,newForecastId,_gameId,_forecastData)

IRs:
REF_119(address) -> tokenOwner[_tokenId]
Emit NewForecast(REF_119,_tokenId,newForecastId,_gameId,_forecastData)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
newForecastId

IRs:
RETURN newForecastId"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
9->1;
}
// Function: 9994.sol-BaseGame-_createToken(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_token = Token({createBlockNumber:block.number,parentId:_parentId})

IRs:
TMP_265(BaseGame.Token) = new Token(block.number,_parentId)
_token(BaseGame.Token) := TMP_265(BaseGame.Token)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newTokenId = tokens.push(_token) - 1

IRs:
REF_101 -> LENGTH tokens
TMP_268(uint256) := REF_101(uint256)
TMP_269(uint256) = TMP_268 + 1
REF_101(uint256) (->tokens) := TMP_269(uint256)
REF_102(BaseGame.Token) -> tokens[TMP_268]
REF_102(BaseGame.Token) (->tokens) := _token(BaseGame.Token)
TMP_267(None) = TMP_266 - 1
newTokenId(uint256) := TMP_267(None)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
NewAccount(_owner,newTokenId,uint256(_token.parentId),uint256(_token.createBlockNumber))

IRs:
REF_103(uint256) -> _token.parentId
TMP_270 = CONVERT REF_103 to uint256
REF_104(uint256) -> _token.createBlockNumber
TMP_271 = CONVERT REF_104 to uint256
Emit NewAccount(_owner,newTokenId,TMP_270,TMP_271)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_mint(_owner,newTokenId)

IRs:
INTERNAL_CALL, ERC721Token._mint(address,uint256)(_owner,newTokenId)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
newTokenId

IRs:
RETURN newTokenId"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
6->1;
}
// Function: 9994.sol-BaseGame-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_231 = CONVERT 0 to address
TMP_232(bool) = _to != TMP_231
TMP_233(None) = SOLIDITY_CALL require(bool)(TMP_232)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_235 = CONVERT 0 to address
Emit Transfer(TMP_235,_to,_tokenId)"];
}
// Function: 9994.sol-BaseGame-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_90(address) -> tokenOwner[_tokenId]
TMP_237 = CONVERT 0 to address
TMP_238(bool) = REF_90 == TMP_237
TMP_239(None) = SOLIDITY_CALL require(bool)(TMP_238)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_91(address) -> tokenOwner[_tokenId]
REF_91(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_92(uint256) -> ownedTokensCount[_to]
REF_93(uint256) -> ownedTokensCount[_to]
TMP_240(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_93', '1'] 
REF_92(uint256) (->ownedTokensCount) := TMP_240(uint256)"];
}
// Function: 9994.sol-BaseGame-balanceOf(address)
digraph{
}
// Function: 9994.sol-BaseGame-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
}
// Function: 9994.sol-BaseGame-constructor(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ERC721Token(_name,_symbol)

IRs:
INTERNAL_CALL, ERC721Token.constructor(string,string)(_name,_symbol)"];
}
// Function: 9994.sol-BaseGame-exists(uint256)
digraph{
}
// Function: 9994.sol-BaseGame-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_229(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_229(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_spender == owner

IRs:
TMP_230(bool) = _spender == owner
RETURN TMP_230"];
}
// Function: 9994.sol-BaseGame-name()
digraph{
}
// Function: 9994.sol-BaseGame-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin || msg.sender == owner)

IRs:
TMP_298(bool) = msg.sender == admin
TMP_299(bool) = msg.sender == owner
TMP_300(bool) = TMP_298 || TMP_299
TMP_301(None) = SOLIDITY_CALL require(bool)(TMP_300)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-BaseGame-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_296(bool) = msg.sender == owner
TMP_297(None) = SOLIDITY_CALL require(bool)(TMP_296)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-BaseGame-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_290(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_291(bool) = TMP_290 == msg.sender
TMP_292(None) = SOLIDITY_CALL require(bool)(TMP_291)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-BaseGame-ownerOf(uint256)
digraph{
}
// Function: 9994.sol-BaseGame-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 9994.sol-BaseGame-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_241(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_242(bool) = TMP_241 == _from
TMP_243(None) = SOLIDITY_CALL require(bool)(TMP_242)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_95(uint256) -> ownedTokensCount[_from]
REF_96(uint256) -> ownedTokensCount[_from]
TMP_244(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_96', '1'] 
REF_95(uint256) (->ownedTokensCount) := TMP_244(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_98(address) -> tokenOwner[_tokenId]
TMP_245 = CONVERT 0 to address
REF_98(address) (->tokenOwner) := TMP_245(address)"];
}
// Function: 9994.sol-BaseGame-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newAdmin != address(0))

IRs:
TMP_260 = CONVERT 0 to address
TMP_261(bool) = newAdmin != TMP_260
TMP_262(None) = SOLIDITY_CALL require(bool)(TMP_261)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = newAdmin

IRs:
admin(address) := newAdmin(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9994.sol-BaseGame-setNewAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_246 = CONVERT this to address
TMP_247(uint256) = SOLIDITY_CALL balance(address)(TMP_246)
Transfer dest:owner value:TMP_247"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newContractAddress = _v2Address

IRs:
newContractAddress(address) := _v2Address(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 9994.sol-BaseGame-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
}
// Function: 9994.sol-BaseGame-symbol()
digraph{
}
// Function: 9994.sol-BaseGame-tokenByIndex(uint256)
digraph{
}
// Function: 9994.sol-BaseGame-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 9994.sol-BaseGame-totalSupply()
digraph{
}
// Function: 9994.sol-BaseGame-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_255 = CONVERT 0 to address
TMP_256(bool) = newOwner != TMP_255
TMP_257(None) = SOLIDITY_CALL require(bool)(TMP_256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9994.sol-BaseGame-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
3->1;
}
// Function: 9994.sol-BaseGame-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_293 = UnaryType.BANG paused 
TMP_294(None) = SOLIDITY_CALL require(bool)(TMP_293)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-BaseGame-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_295(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-BaseGameLogic-_addToFund(uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
isAll

IRs:
CONDITION isAll"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
prizeFund = prizeFund.add(_val)

IRs:
TMP_389(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['prizeFund', '_val'] 
prizeFund(uint256) := TMP_389(uint256)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
prizeFund = prizeFund.add(_val.mul(prizeFundFactor).div(10000))

IRs:
TMP_390(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_val', 'prizeFundFactor'] 
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_390', '10000'] 
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['prizeFund', 'TMP_391'] 
prizeFund(uint256) := TMP_392(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 9994.sol-BaseGameLogic-_createForecast(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tokenId < tokens.length)

IRs:
REF_125 -> LENGTH tokens
TMP_313(bool) = _tokenId < REF_125
TMP_314(None) = SOLIDITY_CALL require(bool)(TMP_313)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newForecast = Forecast({gameId:_gameId,forecastBlockNumber:block.number,forecastData:_forecastData})

IRs:
TMP_315(BaseGame.Forecast) = new Forecast(_gameId,block.number,_forecastData)
newForecast(BaseGame.Forecast) := TMP_315(BaseGame.Forecast)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
newForecastId = forecasts.push(newForecast) - 1

IRs:
REF_127 -> LENGTH forecasts
TMP_318(uint256) := REF_127(uint256)
TMP_319(uint256) = TMP_318 + 1
REF_127(uint256) (->forecasts) := TMP_319(uint256)
REF_128(BaseGame.Forecast) -> forecasts[TMP_318]
REF_128(BaseGame.Forecast) (->forecasts) := newForecast(BaseGame.Forecast)
TMP_317(None) = TMP_316 - 1
newForecastId(uint256) := TMP_317(None)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
forecastToToken[newForecastId] = _tokenId

IRs:
REF_129(uint256) -> forecastToToken[newForecastId]
REF_129(uint256) (->forecastToToken) := _tokenId(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenForecasts[_tokenId].push(newForecastId)

IRs:
REF_130(uint256[]) -> tokenForecasts[_tokenId]
REF_132 -> LENGTH REF_130
TMP_321(uint256) := REF_132(uint256)
TMP_322(uint256) = TMP_321 + 1
REF_132(uint256) (->tokenForecasts) := TMP_322(uint256)
REF_133(uint256) -> REF_130[TMP_321]
REF_133(uint256) (->tokenForecasts) := newForecastId(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games[_gameId].forecasts.push(newForecastId)

IRs:
REF_134(BaseGame.Game) -> games[_gameId]
REF_135(uint256[]) -> REF_134.forecasts
REF_137 -> LENGTH REF_135
TMP_324(uint256) := REF_137(uint256)
TMP_325(uint256) = TMP_324 + 1
REF_137(uint256) (->games) := TMP_325(uint256)
REF_138(uint256) -> REF_135[TMP_324]
REF_138(uint256) (->games) := newForecastId(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
NewForecast(tokenOwner[_tokenId],_tokenId,newForecastId,_gameId,_forecastData)

IRs:
REF_139(address) -> tokenOwner[_tokenId]
Emit NewForecast(REF_139,_tokenId,newForecastId,_gameId,_forecastData)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
newForecastId

IRs:
RETURN newForecastId"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
9->1;
}
// Function: 9994.sol-BaseGameLogic-_createToken(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_token = Token({createBlockNumber:block.number,parentId:_parentId})

IRs:
TMP_303(BaseGame.Token) = new Token(block.number,_parentId)
_token(BaseGame.Token) := TMP_303(BaseGame.Token)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newTokenId = tokens.push(_token) - 1

IRs:
REF_121 -> LENGTH tokens
TMP_306(uint256) := REF_121(uint256)
TMP_307(uint256) = TMP_306 + 1
REF_121(uint256) (->tokens) := TMP_307(uint256)
REF_122(BaseGame.Token) -> tokens[TMP_306]
REF_122(BaseGame.Token) (->tokens) := _token(BaseGame.Token)
TMP_305(None) = TMP_304 - 1
newTokenId(uint256) := TMP_305(None)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
NewAccount(_owner,newTokenId,uint256(_token.parentId),uint256(_token.createBlockNumber))

IRs:
REF_123(uint256) -> _token.parentId
TMP_308 = CONVERT REF_123 to uint256
REF_124(uint256) -> _token.createBlockNumber
TMP_309 = CONVERT REF_124 to uint256
Emit NewAccount(_owner,newTokenId,TMP_308,TMP_309)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_mint(_owner,newTokenId)

IRs:
INTERNAL_CALL, ERC721Token._mint(address,uint256)(_owner,newTokenId)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
newTokenId

IRs:
RETURN newTokenId"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
6->1;
}
// Function: 9994.sol-BaseGameLogic-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_355 = CONVERT 0 to address
TMP_356(bool) = _to != TMP_355
TMP_357(None) = SOLIDITY_CALL require(bool)(TMP_356)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_359 = CONVERT 0 to address
Emit Transfer(TMP_359,_to,_tokenId)"];
}
// Function: 9994.sol-BaseGameLogic-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_173(address) -> tokenOwner[_tokenId]
TMP_361 = CONVERT 0 to address
TMP_362(bool) = REF_173 == TMP_361
TMP_363(None) = SOLIDITY_CALL require(bool)(TMP_362)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_174(address) -> tokenOwner[_tokenId]
REF_174(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_175(uint256) -> ownedTokensCount[_to]
REF_176(uint256) -> ownedTokensCount[_to]
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_176', '1'] 
REF_175(uint256) (->ownedTokensCount) := TMP_364(uint256)"];
}
// Function: 9994.sol-BaseGameLogic-balanceOf(address)
digraph{
}
// Function: 9994.sol-BaseGameLogic-calculateScore(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp > games[_gameId].gameDate)

IRs:
REF_292(BaseGame.Game) -> games[_gameId]
REF_293(uint64) -> REF_292.gameDate
TMP_481(bool) = block.timestamp > REF_293
TMP_482(None) = SOLIDITY_CALL require(bool)(TMP_481)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_shotB = (d & 0xff)

IRs:
TMP_483(uint256) = d & 255
_shotB(uint256) := TMP_483(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
d = d >> 8

IRs:
TMP_484(uint256) = d >> 8
d(uint256) := TMP_484(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_shotA = (d & 0xff)

IRs:
TMP_485(uint256) = d & 255
_shotA(uint256) := TMP_485(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
d = d >> 8

IRs:
TMP_486(uint256) = d >> 8
d(uint256) := TMP_486(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
odds8 = (d & 0xff)

IRs:
TMP_487(uint256) = d & 255
odds8(uint256) := TMP_487(uint256)"];
6->44;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
d = d >> 8

IRs:
TMP_488(uint256) = d >> 8
d(uint256) := TMP_488(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_goalB = (d & 0xff)

IRs:
TMP_489(uint256) = d & 255
_goalB(uint256) := TMP_489(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
d = d >> 8

IRs:
TMP_490(uint256) = d >> 8
d(uint256) := TMP_490(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_goalA = (d & 0xff)

IRs:
TMP_491(uint256) = d & 255
_goalA(uint256) := TMP_491(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
d = d >> 8

IRs:
TMP_492(uint256) = d >> 8
d(uint256) := TMP_492(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
cGame = games[_gameId]

IRs:
REF_294(BaseGame.Game) -> games[_gameId]
cGame(BaseGame.Game) := REF_294(BaseGame.Game)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
_score = 0

IRs:
_score(uint256) := 0(uint256)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
isDoubleScore = true

IRs:
isDoubleScore(bool) := True(bool)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
cGame.shotA == _shotA

IRs:
REF_295(uint256) -> cGame.shotA
TMP_493(bool) = REF_295 == _shotA
CONDITION TMP_493"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_score = _score.add(1)

IRs:
TMP_494(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '1'] 
_score(uint256) := TMP_494(uint256)"];
17->19;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
cGame.shotB == _shotB

IRs:
REF_297(uint256) -> cGame.shotB
TMP_495(bool) = REF_297 == _shotB
CONDITION TMP_495"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_score = _score.add(1)

IRs:
TMP_496(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '1'] 
_score(uint256) := TMP_496(uint256)"];
21->23;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
cGame.odds == _odds

IRs:
REF_299(bool) -> cGame.odds
TMP_497(bool) = REF_299 == _odds
CONDITION TMP_497"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_score = _score.add(1)

IRs:
TMP_498(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '1'] 
_score(uint256) := TMP_498(uint256)"];
25->27;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
(cGame.goalA + cGame.goalB) == (_goalA + _goalB)

IRs:
REF_301(uint256) -> cGame.goalA
REF_302(uint256) -> cGame.goalB
TMP_499(uint256) = REF_301 + REF_302
TMP_500(uint256) = _goalA + _goalB
TMP_501(bool) = TMP_499 == TMP_500
CONDITION TMP_501"];
28->29[label="True"];
28->30[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_score = _score.add(2)

IRs:
TMP_502(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '2'] 
_score(uint256) := TMP_502(uint256)"];
29->31;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
30->31;
31[label="Node Type: END_IF 31
"];
31->32;
32[label="Node Type: IF 32

EXPRESSION:
cGame.goalA == _goalA && cGame.goalB == _goalB

IRs:
REF_304(uint256) -> cGame.goalA
TMP_503(bool) = REF_304 == _goalA
REF_305(uint256) -> cGame.goalB
TMP_504(bool) = REF_305 == _goalB
TMP_505(bool) = TMP_503 && TMP_504
CONDITION TMP_505"];
32->33[label="True"];
32->34[label="False"];
33[label="Node Type: EXPRESSION 33

EXPRESSION:
_score = _score.add(3)

IRs:
TMP_506(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '3'] 
_score(uint256) := TMP_506(uint256)"];
33->35;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: IF 36

EXPRESSION:
((cGame.goalA > cGame.goalB) && (_goalA > _goalB)) || ((cGame.goalA < cGame.goalB) && (_goalA < _goalB)) || ((cGame.goalA == cGame.goalB) && (_goalA == _goalB))

IRs:
REF_307(uint256) -> cGame.goalA
REF_308(uint256) -> cGame.goalB
TMP_507(bool) = REF_307 > REF_308
TMP_508(bool) = _goalA > _goalB
TMP_509(bool) = TMP_507 && TMP_508
REF_309(uint256) -> cGame.goalA
REF_310(uint256) -> cGame.goalB
TMP_510(bool) = REF_309 < REF_310
TMP_511(bool) = _goalA < _goalB
TMP_512(bool) = TMP_510 && TMP_511
TMP_513(bool) = TMP_509 || TMP_512
REF_311(uint256) -> cGame.goalA
REF_312(uint256) -> cGame.goalB
TMP_514(bool) = REF_311 == REF_312
TMP_515(bool) = _goalA == _goalB
TMP_516(bool) = TMP_514 && TMP_515
TMP_517(bool) = TMP_513 || TMP_516
CONDITION TMP_517"];
36->37[label="True"];
36->38[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_score = _score.add(1)

IRs:
TMP_518(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '1'] 
_score(uint256) := TMP_518(uint256)"];
37->39;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: IF 40

EXPRESSION:
isDoubleScore

IRs:
CONDITION isDoubleScore"];
40->41[label="True"];
40->42[label="False"];
41[label="Node Type: EXPRESSION 41

EXPRESSION:
_score = _score.mul(2)

IRs:
TMP_519(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_score', '2'] 
_score(uint256) := TMP_519(uint256)"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: RETURN 43

EXPRESSION:
_score

IRs:
RETURN _score"];
44[label="Node Type: IF 44

EXPRESSION:
odds8 == 1

IRs:
TMP_520(bool) = odds8 == 1
CONDITION TMP_520"];
44->45[label="True"];
44->46[label="False"];
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_odds = true

IRs:
_odds(bool) := True(bool)"];
45->47;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
_odds = false

IRs:
_odds(bool) := False(bool)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->8;
}
// Function: 9994.sol-BaseGameLogic-calculateTokenPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_440(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_441(None) = SOLIDITY_CALL require(bool)(TMP_440)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
forecastCount = getForecastCount(_tokenId,block.number,true)

IRs:
TMP_442(uint256) = INTERNAL_CALL, BaseGameLogic.getForecastCount(uint256,uint256,bool)(_tokenId,block.number,True)
forecastCount(uint256) := TMP_442(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(forecastCount.add(1)).mul(basePrice).mul(priceFactor).div(10000)

IRs:
TMP_443(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['forecastCount', '1'] 
TMP_444(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_443', 'basePrice'] 
TMP_445(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_444', 'priceFactor'] 
TMP_446(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_445', '10000'] 
RETURN TMP_446"];
}
// Function: 9994.sol-BaseGameLogic-cloneAccount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_399(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_400(None) = SOLIDITY_CALL require(bool)(TMP_399)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenPrice = calculateTokenPrice(_tokenId)

IRs:
TMP_401(uint256) = INTERNAL_CALL, BaseGameLogic.calculateTokenPrice(uint256)(_tokenId)
tokenPrice(uint256) := TMP_401(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value >= tokenPrice)

IRs:
TMP_402(bool) = msg.value >= tokenPrice
TMP_403(None) = SOLIDITY_CALL require(bool)(TMP_402)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
newToken = _createToken(_tokenId,msg.sender)

IRs:
TMP_404(uint256) = INTERNAL_CALL, BaseGame._createToken(uint256,address)(_tokenId,msg.sender)
newToken(uint256) := TMP_404(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
gameFee = tokenPrice.mul(gameCloneFee).div(10000)

IRs:
TMP_405(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokenPrice', 'gameCloneFee'] 
TMP_406(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_405', '10000'] 
gameFee(uint256) := TMP_406(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_addToFund(gameFee,false)

IRs:
INTERNAL_CALL, BaseGameLogic._addToFund(uint256,bool)(gameFee,False)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
ownerProceed = tokenPrice.sub(gameFee)

IRs:
TMP_408(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokenPrice', 'gameFee'] 
ownerProceed(uint256) := TMP_408(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
tokenOwnerAddress = tokenOwner[_tokenId]

IRs:
REF_190(address) -> tokenOwner[_tokenId]
tokenOwnerAddress(address) := REF_190(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
tokenOwnerAddress.transfer(ownerProceed)

IRs:
Transfer dest:tokenOwnerAddress value:ownerProceed"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
newToken

IRs:
RETURN newToken"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
11->1;
}
// Function: 9994.sol-BaseGameLogic-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
}
// Function: 9994.sol-BaseGameLogic-constructor(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
BaseGame(_name,_symbol)

IRs:
INTERNAL_CALL, BaseGame.constructor(string,string)(_name,_symbol)"];
}
// Function: 9994.sol-BaseGameLogic-createAccount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= basePrice)

IRs:
TMP_394(bool) = msg.value >= basePrice
TMP_395(None) = SOLIDITY_CALL require(bool)(TMP_394)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_addToFund(msg.value,false)

IRs:
INTERNAL_CALL, BaseGameLogic._addToFund(uint256,bool)(msg.value,False)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_createToken(0,msg.sender)

IRs:
TMP_397(uint256) = INTERNAL_CALL, BaseGame._createToken(uint256,address)(0,msg.sender)
RETURN TMP_397"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 9994.sol-BaseGameLogic-createForecast(uint256,uint256,uint8,uint8,bool,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_411(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_412(None) = SOLIDITY_CALL require(bool)(TMP_411)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(block.timestamp < games[_gameId].gameDate)

IRs:
REF_192(BaseGame.Game) -> games[_gameId]
REF_193(uint64) -> REF_192.gameDate
TMP_413(bool) = block.timestamp < REF_193
TMP_414(None) = SOLIDITY_CALL require(bool)(TMP_413)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_forecastData = toForecastData(_goalA,_goalB,_odds,_shotA,_shotB)

IRs:
TMP_415(uint256) = INTERNAL_CALL, BaseGameLogic.toForecastData(uint8,uint8,bool,uint8,uint8)(_goalA,_goalB,_odds,_shotA,_shotB)
_forecastData(uint256) := TMP_415(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_createForecast(_tokenId,_gameId,_forecastData)

IRs:
TMP_416(uint256) = INTERNAL_CALL, BaseGame._createForecast(uint256,uint256,uint256)(_tokenId,_gameId,_forecastData)
RETURN TMP_416"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.onlyOwnerOf(uint256)(_tokenId)"];
6->1;
}
// Function: 9994.sol-BaseGameLogic-exists(uint256)
digraph{
}
// Function: 9994.sol-BaseGameLogic-forecastInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameId = forecasts[_fId].gameId

IRs:
REF_220(BaseGame.Forecast) -> forecasts[_fId]
REF_221(uint256) -> REF_220.gameId
gameId(uint256) := REF_221(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
f = forecasts[_fId].forecastData

IRs:
REF_222(BaseGame.Forecast) -> forecasts[_fId]
REF_223(uint256) -> REF_222.forecastData
f(uint256) := REF_223(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(gameId,f)

IRs:
RETURN gameId,f"];
}
// Function: 9994.sol-BaseGameLogic-forecastOfToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
forecastCount = tokenForecasts[_tokenId].length

IRs:
REF_196(uint256[]) -> tokenForecasts[_tokenId]
REF_197 -> LENGTH REF_196
forecastCount(uint256) := REF_197(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
forecastCount == 0

IRs:
TMP_430(bool) = forecastCount == 0
CONDITION TMP_430"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
new uint256[](0)

IRs:
TMP_432(uint256[])  = new uint256[](0)
RETURN TMP_432"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
result = new uint256[](forecastCount)

IRs:
TMP_434(uint256[])  = new uint256[](forecastCount)
result(uint256[]) = ['TMP_434(uint256[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
resultIndex = 0

IRs:
resultIndex(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
resultIndex < forecastCount

IRs:
TMP_435(bool) = resultIndex < forecastCount
CONDITION TMP_435"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
result[resultIndex] = tokenForecasts[_tokenId][resultIndex]

IRs:
REF_198(uint256) -> result[resultIndex]
REF_199(uint256[]) -> tokenForecasts[_tokenId]
REF_200(uint256) -> REF_199[resultIndex]
REF_198(uint256) (->result) := REF_200(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
resultIndex ++

IRs:
TMP_436(uint256) := resultIndex(uint256)
resultIndex(uint256) = resultIndex + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 9994.sol-BaseGameLogic-gameEdit(uint256,uint64,BaseGame.Teams,BaseGame.Teams)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
games[_gameId].gameDate = gameDate

IRs:
REF_315(BaseGame.Game) -> games[_gameId]
REF_316(uint64) -> REF_315.gameDate
REF_316(uint64) (->games) := gameDate(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
games[_gameId].teamA = teamA

IRs:
REF_317(BaseGame.Game) -> games[_gameId]
REF_318(BaseGame.Teams) -> REF_317.teamA
REF_318(BaseGame.Teams) (->games) := teamA(BaseGame.Teams)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
games[_gameId].teamB = teamB

IRs:
REF_319(BaseGame.Game) -> games[_gameId]
REF_320(BaseGame.Teams) -> REF_319.teamB
REF_320(BaseGame.Teams) (->games) := teamB(BaseGame.Teams)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
GameChanged(_gameId,games[_gameId].gameDate,games[_gameId].teamA,games[_gameId].teamB,0,0,true,0,0)

IRs:
REF_321(BaseGame.Game) -> games[_gameId]
REF_322(uint64) -> REF_321.gameDate
REF_323(BaseGame.Game) -> games[_gameId]
REF_324(BaseGame.Teams) -> REF_323.teamA
REF_325(BaseGame.Game) -> games[_gameId]
REF_326(BaseGame.Teams) -> REF_325.teamB
Emit GameChanged(_gameId,REF_322,REF_324,REF_326,0,0,True,0,0)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
5->1;
}
// Function: 9994.sol-BaseGameLogic-gameInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameDate = games[_gameId].gameDate

IRs:
REF_201(BaseGame.Game) -> games[_gameId]
REF_202(uint64) -> REF_201.gameDate
gameDate(uint64) := REF_202(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
teamA = games[_gameId].teamA

IRs:
REF_203(BaseGame.Game) -> games[_gameId]
REF_204(BaseGame.Teams) -> REF_203.teamA
teamA(BaseGame.Teams) := REF_204(BaseGame.Teams)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
teamB = games[_gameId].teamB

IRs:
REF_205(BaseGame.Game) -> games[_gameId]
REF_206(BaseGame.Teams) -> REF_205.teamB
teamB(BaseGame.Teams) := REF_206(BaseGame.Teams)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
goalA = games[_gameId].goalA

IRs:
REF_207(BaseGame.Game) -> games[_gameId]
REF_208(uint256) -> REF_207.goalA
goalA(uint256) := REF_208(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gaolB = games[_gameId].goalB

IRs:
REF_209(BaseGame.Game) -> games[_gameId]
REF_210(uint256) -> REF_209.goalB
gaolB(uint256) := REF_210(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
odds = games[_gameId].odds

IRs:
REF_211(BaseGame.Game) -> games[_gameId]
REF_212(bool) -> REF_211.odds
odds(bool) := REF_212(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
shotA = games[_gameId].shotA

IRs:
REF_213(BaseGame.Game) -> games[_gameId]
REF_214(uint256) -> REF_213.shotA
shotA(uint256) := REF_214(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
shotB = games[_gameId].shotB

IRs:
REF_215(BaseGame.Game) -> games[_gameId]
REF_216(uint256) -> REF_215.shotB
shotB(uint256) := REF_216(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
forecastCount = games[_gameId].forecasts.length

IRs:
REF_217(BaseGame.Game) -> games[_gameId]
REF_218(uint256[]) -> REF_217.forecasts
REF_219 -> LENGTH REF_218
forecastCount(uint256) := REF_219(uint256)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
(gameDate,teamA,teamB,goalA,gaolB,odds,shotA,shotB,forecastCount)

IRs:
RETURN gameDate,teamA,teamB,goalA,gaolB,odds,shotA,shotB,forecastCount"];
}
// Function: 9994.sol-BaseGameLogic-gameResult(uint256,uint256,uint256,bool,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
games[_gameId].goalA = goalA

IRs:
REF_327(BaseGame.Game) -> games[_gameId]
REF_328(uint256) -> REF_327.goalA
REF_328(uint256) (->games) := goalA(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
games[_gameId].goalB = goalB

IRs:
REF_329(BaseGame.Game) -> games[_gameId]
REF_330(uint256) -> REF_329.goalB
REF_330(uint256) (->games) := goalB(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
games[_gameId].odds = odds

IRs:
REF_331(BaseGame.Game) -> games[_gameId]
REF_332(bool) -> REF_331.odds
REF_332(bool) (->games) := odds(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
games[_gameId].shotA = shotA

IRs:
REF_333(BaseGame.Game) -> games[_gameId]
REF_334(uint256) -> REF_333.shotA
REF_334(uint256) (->games) := shotA(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
games[_gameId].shotB = shotB

IRs:
REF_335(BaseGame.Game) -> games[_gameId]
REF_336(uint256) -> REF_335.shotB
REF_336(uint256) (->games) := shotB(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
GameChanged(_gameId,games[_gameId].gameDate,games[_gameId].teamA,games[_gameId].teamB,goalA,goalB,odds,shotA,shotB)

IRs:
REF_337(BaseGame.Game) -> games[_gameId]
REF_338(uint64) -> REF_337.gameDate
REF_339(BaseGame.Game) -> games[_gameId]
REF_340(BaseGame.Teams) -> REF_339.teamA
REF_341(BaseGame.Game) -> games[_gameId]
REF_342(BaseGame.Teams) -> REF_341.teamB
Emit GameChanged(_gameId,REF_338,REF_340,REF_342,goalA,goalB,odds,shotA,shotB)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
7->1;
}
// Function: 9994.sol-BaseGameLogic-getForecastCount(uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_447(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_448(None) = SOLIDITY_CALL require(bool)(TMP_447)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
forecastCount = 0

IRs:
forecastCount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
index = 0

IRs:
index(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
count = tokenForecasts[_tokenId].length

IRs:
REF_232(uint256[]) -> tokenForecasts[_tokenId]
REF_233 -> LENGTH REF_232
count(uint256) := REF_233(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->18;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
index = 0

IRs:
index(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
index < count

IRs:
TMP_449(bool) = index < count
CONDITION TMP_449"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
forecasts[tokenForecasts[_tokenId][index]].forecastBlockNumber < _blockNumber

IRs:
REF_234(uint256[]) -> tokenForecasts[_tokenId]
REF_235(uint256) -> REF_234[index]
REF_236(BaseGame.Forecast) -> forecasts[REF_235]
REF_237(uint256) -> REF_236.forecastBlockNumber
TMP_450(bool) = REF_237 < _blockNumber
CONDITION TMP_450"];
9->10[label="True"];
9->16[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
isReleased

IRs:
CONDITION isReleased"];
10->11[label="True"];
10->14[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
games[forecasts[tokenForecasts[_tokenId][index]].gameId].gameDate < block.timestamp

IRs:
REF_238(uint256[]) -> tokenForecasts[_tokenId]
REF_239(uint256) -> REF_238[index]
REF_240(BaseGame.Forecast) -> forecasts[REF_239]
REF_241(uint256) -> REF_240.gameId
REF_242(BaseGame.Game) -> games[REF_241]
REF_243(uint64) -> REF_242.gameDate
TMP_451(bool) = REF_243 < block.timestamp
CONDITION TMP_451"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
forecastCount = forecastCount + 1

IRs:
TMP_452(uint256) = forecastCount + 1
forecastCount(uint256) := TMP_452(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->15;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
forecastCount = forecastCount + 1

IRs:
TMP_453(uint256) = forecastCount + 1
forecastCount(uint256) := TMP_453(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
index ++

IRs:
TMP_454(uint256) := index(uint256)
index(uint256) = index + 1"];
17->8;
18[label="Node Type: IF 18

EXPRESSION:
tokens[_tokenId].parentId != 0

IRs:
REF_244(BaseGame.Token) -> tokens[_tokenId]
REF_245(uint256) -> REF_244.parentId
TMP_455(bool) = REF_245 != 0
CONDITION TMP_455"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
forecastCount = forecastCount.add(getForecastCount(tokens[_tokenId].parentId,tokens[_tokenId].createBlockNumber,isReleased))

IRs:
REF_247(BaseGame.Token) -> tokens[_tokenId]
REF_248(uint256) -> REF_247.parentId
REF_249(BaseGame.Token) -> tokens[_tokenId]
REF_250(uint256) -> REF_249.createBlockNumber
TMP_456(uint256) = INTERNAL_CALL, BaseGameLogic.getForecastCount(uint256,uint256,bool)(REF_248,REF_250,isReleased)
TMP_457(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['forecastCount', 'TMP_456'] 
forecastCount(uint256) := TMP_457(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
forecastCount

IRs:
RETURN forecastCount"];
}
// Function: 9994.sol-BaseGameLogic-getForecastScore(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_forecastId < forecasts.length)

IRs:
REF_287 -> LENGTH forecasts
TMP_478(bool) = _forecastId < REF_287
TMP_479(None) = SOLIDITY_CALL require(bool)(TMP_478)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
calculateScore(forecasts[_forecastId].gameId,forecasts[_forecastId].forecastData)

IRs:
REF_288(BaseGame.Forecast) -> forecasts[_forecastId]
REF_289(uint256) -> REF_288.gameId
REF_290(BaseGame.Forecast) -> forecasts[_forecastId]
REF_291(uint256) -> REF_290.forecastData
TMP_480(uint256) = INTERNAL_CALL, BaseGameLogic.calculateScore(uint256,uint256)(REF_289,REF_291)
RETURN TMP_480"];
}
// Function: 9994.sol-BaseGameLogic-getScore(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gameForecast = new uint256[](65)

IRs:
TMP_459(uint256[])  = new uint256[](65)
_gameForecast(uint256[]) = ['TMP_459(uint256[])']"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
getScore(_tokenId,block.number,_gameForecast)

IRs:
TMP_460(uint256) = INTERNAL_CALL, BaseGameLogic.getScore(uint256,uint256,uint256[])(_tokenId,block.number,_gameForecast)
RETURN TMP_460"];
}
// Function: 9994.sol-BaseGameLogic-getScore(uint256,uint256,uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
score = 0

IRs:
score(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_forecasts = forecastOfToken(_tokenId)

IRs:
TMP_461(uint256[]) = INTERNAL_CALL, BaseGameLogic.forecastOfToken(uint256)(_tokenId)
_forecasts(uint256[]) = ['TMP_461(uint256[])']"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_forecasts.length > 0

IRs:
REF_251 -> LENGTH _forecasts
TMP_462(bool) = REF_251 > 0
CONDITION TMP_462"];
3->4[label="True"];
3->14[label="False"];
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->14;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_index = _forecasts.length - 1

IRs:
REF_252 -> LENGTH _forecasts
TMP_463(uint256) = REF_252 - 1
_index(uint256) := TMP_463(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
_index >= 0 && _index < _forecasts.length

IRs:
TMP_464(bool) = _index >= 0
REF_253 -> LENGTH _forecasts
TMP_465(bool) = _index < REF_253
TMP_466(bool) = TMP_464 && TMP_465
CONDITION TMP_466"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
forecasts[_forecasts[_index]].forecastBlockNumber < _blockNumber && _gameForecast[forecasts[_forecasts[_index]].gameId] == 0 && block.timestamp > games[forecasts[_forecasts[_index]].gameId].gameDate

IRs:
REF_254(uint256) -> _forecasts[_index]
REF_255(BaseGame.Forecast) -> forecasts[REF_254]
REF_256(uint256) -> REF_255.forecastBlockNumber
TMP_467(bool) = REF_256 < _blockNumber
REF_257(uint256) -> _forecasts[_index]
REF_258(BaseGame.Forecast) -> forecasts[REF_257]
REF_259(uint256) -> REF_258.gameId
REF_260(uint256) -> _gameForecast[REF_259]
TMP_468(bool) = REF_260 == 0
TMP_469(bool) = TMP_467 && TMP_468
REF_261(uint256) -> _forecasts[_index]
REF_262(BaseGame.Forecast) -> forecasts[REF_261]
REF_263(uint256) -> REF_262.gameId
REF_264(BaseGame.Game) -> games[REF_263]
REF_265(uint64) -> REF_264.gameDate
TMP_470(bool) = block.timestamp > REF_265
TMP_471(bool) = TMP_469 && TMP_470
CONDITION TMP_471"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
score = score.add(calculateScore(forecasts[_forecasts[_index]].gameId,forecasts[_forecasts[_index]].forecastData))

IRs:
REF_267(uint256) -> _forecasts[_index]
REF_268(BaseGame.Forecast) -> forecasts[REF_267]
REF_269(uint256) -> REF_268.gameId
REF_270(uint256) -> _forecasts[_index]
REF_271(BaseGame.Forecast) -> forecasts[REF_270]
REF_272(uint256) -> REF_271.forecastData
TMP_472(uint256) = INTERNAL_CALL, BaseGameLogic.calculateScore(uint256,uint256)(REF_269,REF_272)
TMP_473(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['score', 'TMP_472'] 
score(uint256) := TMP_473(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_gameForecast[forecasts[_forecasts[_index]].gameId] = forecasts[_forecasts[_index]].forecastBlockNumber

IRs:
REF_273(uint256) -> _forecasts[_index]
REF_274(BaseGame.Forecast) -> forecasts[REF_273]
REF_275(uint256) -> REF_274.gameId
REF_276(uint256) -> _gameForecast[REF_275]
REF_277(uint256) -> _forecasts[_index]
REF_278(BaseGame.Forecast) -> forecasts[REF_277]
REF_279(uint256) -> REF_278.forecastBlockNumber
REF_276(uint256) (->_gameForecast) := REF_279(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_index --

IRs:
TMP_474(uint256) := _index(uint256)
_index(uint256) = _index - 1"];
13->8;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
tokens[_tokenId].parentId != 0

IRs:
REF_280(BaseGame.Token) -> tokens[_tokenId]
REF_281(uint256) -> REF_280.parentId
TMP_475(bool) = REF_281 != 0
CONDITION TMP_475"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
score = score.add(getScore(tokens[_tokenId].parentId,tokens[_tokenId].createBlockNumber,_gameForecast))

IRs:
REF_283(BaseGame.Token) -> tokens[_tokenId]
REF_284(uint256) -> REF_283.parentId
REF_285(BaseGame.Token) -> tokens[_tokenId]
REF_286(uint256) -> REF_285.createBlockNumber
TMP_476(uint256) = INTERNAL_CALL, BaseGameLogic.getScore(uint256,uint256,uint256[])(REF_284,REF_286,_gameForecast)
TMP_477(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['score', 'TMP_476'] 
score(uint256) := TMP_477(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
score

IRs:
RETURN score"];
}
// Function: 9994.sol-BaseGameLogic-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_353(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_353(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_spender == owner

IRs:
TMP_354(bool) = _spender == owner
RETURN TMP_354"];
}
// Function: 9994.sol-BaseGameLogic-name()
digraph{
}
// Function: 9994.sol-BaseGameLogic-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin || msg.sender == owner)

IRs:
TMP_553(bool) = msg.sender == admin
TMP_554(bool) = msg.sender == owner
TMP_555(bool) = TMP_553 || TMP_554
TMP_556(None) = SOLIDITY_CALL require(bool)(TMP_555)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-BaseGameLogic-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_551(bool) = msg.sender == owner
TMP_552(None) = SOLIDITY_CALL require(bool)(TMP_551)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-BaseGameLogic-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_545(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_546(bool) = TMP_545 == msg.sender
TMP_547(None) = SOLIDITY_CALL require(bool)(TMP_546)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-BaseGameLogic-ownerOf(uint256)
digraph{
}
// Function: 9994.sol-BaseGameLogic-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 9994.sol-BaseGameLogic-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_365(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_366(bool) = TMP_365 == _from
TMP_367(None) = SOLIDITY_CALL require(bool)(TMP_366)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_178(uint256) -> ownedTokensCount[_from]
REF_179(uint256) -> ownedTokensCount[_from]
TMP_368(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_179', '1'] 
REF_178(uint256) (->ownedTokensCount) := TMP_368(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_181(address) -> tokenOwner[_tokenId]
TMP_369 = CONVERT 0 to address
REF_181(address) (->tokenOwner) := TMP_369(address)"];
}
// Function: 9994.sol-BaseGameLogic-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newAdmin != address(0))

IRs:
TMP_384 = CONVERT 0 to address
TMP_385(bool) = newAdmin != TMP_384
TMP_386(None) = SOLIDITY_CALL require(bool)(TMP_385)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = newAdmin

IRs:
admin(address) := newAdmin(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9994.sol-BaseGameLogic-setBasePrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_val > 0)

IRs:
TMP_521(bool) = _val > 0
TMP_522(None) = SOLIDITY_CALL require(bool)(TMP_521)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
basePrice = _val

IRs:
basePrice(uint256) := _val(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
3->1;
}
// Function: 9994.sol-BaseGameLogic-setGameCloneFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_val <= 10000)

IRs:
TMP_524(bool) = _val <= 10000
TMP_525(None) = SOLIDITY_CALL require(bool)(TMP_524)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameCloneFee = _val

IRs:
gameCloneFee(uint256) := _val(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
3->1;
}
// Function: 9994.sol-BaseGameLogic-setNewAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_370 = CONVERT this to address
TMP_371(uint256) = SOLIDITY_CALL balance(address)(TMP_370)
Transfer dest:owner value:TMP_371"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newContractAddress = _v2Address

IRs:
newContractAddress(address) := _v2Address(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 9994.sol-BaseGameLogic-setPriceFactor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
priceFactor = _val

IRs:
priceFactor(uint256) := _val(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
2->1;
}
// Function: 9994.sol-BaseGameLogic-setPrizeFundFactor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_val <= 10000)

IRs:
TMP_527(bool) = _val <= 10000
TMP_528(None) = SOLIDITY_CALL require(bool)(TMP_527)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
prizeFundFactor = _val

IRs:
prizeFundFactor(uint256) := _val(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
3->1;
}
// Function: 9994.sol-BaseGameLogic-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
prizeFund = 0

IRs:
prizeFund(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
basePrice = 21000000000000000

IRs:
basePrice(uint256) := 21000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
gameCloneFee = 7000

IRs:
gameCloneFee(uint256) := 7000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
priceFactor = 10000

IRs:
priceFactor(uint256) := 10000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
prizeFundFactor = 5000

IRs:
prizeFundFactor(uint256) := 5000(uint256)"];
}
// Function: 9994.sol-BaseGameLogic-symbol()
digraph{
}
// Function: 9994.sol-BaseGameLogic-toForecastData(uint8,uint8,bool,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
forecastData = forecastData << 8 | _goalA

IRs:
TMP_535(uint256) = forecastData << 8
TMP_536(uint256) = TMP_535 | _goalA
forecastData(uint256) := TMP_536(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
forecastData = forecastData << 8 | _goalB

IRs:
TMP_537(uint256) = forecastData << 8
TMP_538(uint256) = TMP_537 | _goalB
forecastData(uint256) := TMP_538(uint256)"];
3->9;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
forecastData = forecastData << 8 | odds8

IRs:
TMP_539(uint256) = forecastData << 8
TMP_540(uint256) = TMP_539 | odds8
forecastData(uint256) := TMP_540(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
forecastData = forecastData << 8 | _shotA

IRs:
TMP_541(uint256) = forecastData << 8
TMP_542(uint256) = TMP_541 | _shotA
forecastData(uint256) := TMP_542(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
forecastData = forecastData << 8 | _shotB

IRs:
TMP_543(uint256) = forecastData << 8
TMP_544(uint256) = TMP_543 | _shotB
forecastData(uint256) := TMP_544(uint256)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
forecastData

IRs:
RETURN forecastData"];
9[label="Node Type: IF 9

EXPRESSION:
_odds

IRs:
CONDITION _odds"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
odds8 = 1

IRs:
odds8(uint8) := 1(uint256)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
odds8 = 0

IRs:
odds8(uint8) := 0(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->5;
}
// Function: 9994.sol-BaseGameLogic-tokenByIndex(uint256)
digraph{
}
// Function: 9994.sol-BaseGameLogic-tokenInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
createBlockNumber = tokens[_tokenId].createBlockNumber

IRs:
REF_224(BaseGame.Token) -> tokens[_tokenId]
REF_225(uint256) -> REF_224.createBlockNumber
createBlockNumber(uint256) := REF_225(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
parentId = tokens[_tokenId].parentId

IRs:
REF_226(BaseGame.Token) -> tokens[_tokenId]
REF_227(uint256) -> REF_226.parentId
parentId(uint256) := REF_227(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
price = calculateTokenPrice(_tokenId)

IRs:
TMP_437(uint256) = INTERNAL_CALL, BaseGameLogic.calculateTokenPrice(uint256)(_tokenId)
price(uint256) := TMP_437(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
forecast = getForecastCount(_tokenId,block.number,false)

IRs:
TMP_438(uint256) = INTERNAL_CALL, BaseGameLogic.getForecastCount(uint256,uint256,bool)(_tokenId,block.number,False)
forecast(uint256) := TMP_438(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
score = getScore(_tokenId)

IRs:
TMP_439(uint256) = INTERNAL_CALL, BaseGameLogic.getScore(uint256)(_tokenId)
score(uint256) := TMP_439(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(createBlockNumber,parentId,forecast,score,price)

IRs:
RETURN createBlockNumber,parentId,forecast,score,price"];
}
// Function: 9994.sol-BaseGameLogic-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 9994.sol-BaseGameLogic-tokensOfOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenCount = balanceOf(_owner)

IRs:
TMP_419(uint256) = INTERNAL_CALL, ERC721BasicToken.balanceOf(address)(_owner)
tokenCount(uint256) := TMP_419(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenCount == 0

IRs:
TMP_420(bool) = tokenCount == 0
CONDITION TMP_420"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
new uint256[](0)

IRs:
TMP_422(uint256[])  = new uint256[](0)
RETURN TMP_422"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
result = new uint256[](tokenCount)

IRs:
TMP_424(uint256[])  = new uint256[](tokenCount)
result(uint256[]) = ['TMP_424(uint256[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
totalToken = totalSupply()

IRs:
TMP_425(uint256) = INTERNAL_CALL, ERC721Token.totalSupply()()
totalToken(uint256) := TMP_425(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
resultIndex = 0

IRs:
resultIndex(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->17;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_tokenId = 1

IRs:
_tokenId(uint256) := 1(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
_tokenId <= totalToken

IRs:
TMP_426(bool) = _tokenId <= totalToken
CONDITION TMP_426"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
tokenOwner[_tokenId] == _owner

IRs:
REF_194(address) -> tokenOwner[_tokenId]
TMP_427(bool) = REF_194 == _owner
CONDITION TMP_427"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
result[resultIndex] = _tokenId

IRs:
REF_195(uint256) -> result[resultIndex]
REF_195(uint256) (->result) := _tokenId(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
resultIndex ++

IRs:
TMP_428(uint256) := resultIndex(uint256)
resultIndex(uint256) = resultIndex + 1"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_tokenId ++

IRs:
TMP_429(uint256) := _tokenId(uint256)
_tokenId(uint256) = _tokenId + 1"];
16->11;
17[label="Node Type: RETURN 17

EXPRESSION:
result

IRs:
RETURN result"];
19[label="Node Type: RETURN 19

EXPRESSION:
ownerTokens

IRs:
RETURN ownerTokens"];
}
// Function: 9994.sol-BaseGameLogic-totalSupply()
digraph{
}
// Function: 9994.sol-BaseGameLogic-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_379 = CONVERT 0 to address
TMP_380(bool) = newOwner != TMP_379
TMP_381(None) = SOLIDITY_CALL require(bool)(TMP_380)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9994.sol-BaseGameLogic-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
3->1;
}
// Function: 9994.sol-BaseGameLogic-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_548 = UnaryType.BANG paused 
TMP_549(None) = SOLIDITY_CALL require(bool)(TMP_548)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-BaseGameLogic-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_550(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-BrokenContract-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
}
// Function: 9994.sol-BrokenContract-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin || msg.sender == owner)

IRs:
TMP_73(bool) = msg.sender == admin
TMP_74(bool) = msg.sender == owner
TMP_75(bool) = TMP_73 || TMP_74
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-BrokenContract-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_71(bool) = msg.sender == owner
TMP_72(None) = SOLIDITY_CALL require(bool)(TMP_71)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-BrokenContract-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 9994.sol-BrokenContract-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newAdmin != address(0))

IRs:
TMP_59 = CONVERT 0 to address
TMP_60(bool) = newAdmin != TMP_59
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = newAdmin

IRs:
admin(address) := newAdmin(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9994.sol-BrokenContract-setNewAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_63 = CONVERT this to address
TMP_64(uint256) = SOLIDITY_CALL balance(address)(TMP_63)
Transfer dest:owner value:TMP_64"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newContractAddress = _v2Address

IRs:
newContractAddress(address) := _v2Address(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 9994.sol-BrokenContract-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
}
// Function: 9994.sol-BrokenContract-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_54 = CONVERT 0 to address
TMP_55(bool) = newOwner != TMP_54
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9994.sol-BrokenContract-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
3->1;
}
// Function: 9994.sol-BrokenContract-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_68 = UnaryType.BANG paused 
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-BrokenContract-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_70(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-ERC721-balanceOf(address)
digraph{
}
// Function: 9994.sol-ERC721-exists(uint256)
digraph{
}
// Function: 9994.sol-ERC721-name()
digraph{
}
// Function: 9994.sol-ERC721-ownerOf(uint256)
digraph{
}
// Function: 9994.sol-ERC721-symbol()
digraph{
}
// Function: 9994.sol-ERC721-tokenByIndex(uint256)
digraph{
}
// Function: 9994.sol-ERC721-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 9994.sol-ERC721-totalSupply()
digraph{
}
// Function: 9994.sol-ERC721Basic-balanceOf(address)
digraph{
}
// Function: 9994.sol-ERC721Basic-exists(uint256)
digraph{
}
// Function: 9994.sol-ERC721Basic-ownerOf(uint256)
digraph{
}
// Function: 9994.sol-ERC721BasicToken-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_105 = CONVERT 0 to address
TMP_106(bool) = _to != TMP_105
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_109 = CONVERT 0 to address
Emit Transfer(TMP_109,_to,_tokenId)"];
}
// Function: 9994.sol-ERC721BasicToken-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_5(address) -> tokenOwner[_tokenId]
TMP_111 = CONVERT 0 to address
TMP_112(bool) = REF_5 == TMP_111
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_6(address) -> tokenOwner[_tokenId]
REF_6(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_7(uint256) -> ownedTokensCount[_to]
REF_8(uint256) -> ownedTokensCount[_to]
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', '1'] 
REF_7(uint256) (->ownedTokensCount) := TMP_114(uint256)"];
}
// Function: 9994.sol-ERC721BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != address(0))

IRs:
TMP_95 = CONVERT 0 to address
TMP_96(bool) = _owner != TMP_95
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokensCount[_owner]

IRs:
REF_2(uint256) -> ownedTokensCount[_owner]
RETURN REF_2"];
}
// Function: 9994.sol-ERC721BasicToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
}
// Function: 9994.sol-ERC721BasicToken-exists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_4(address) -> tokenOwner[_tokenId]
owner(address) := REF_4(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
owner != address(0)

IRs:
TMP_101 = CONVERT 0 to address
TMP_102(bool) = owner != TMP_101
RETURN TMP_102"];
}
// Function: 9994.sol-ERC721BasicToken-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_103(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_103(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_spender == owner

IRs:
TMP_104(bool) = _spender == owner
RETURN TMP_104"];
}
// Function: 9994.sol-ERC721BasicToken-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin || msg.sender == owner)

IRs:
TMP_125(bool) = msg.sender == admin
TMP_126(bool) = msg.sender == owner
TMP_127(bool) = TMP_125 || TMP_126
TMP_128(None) = SOLIDITY_CALL require(bool)(TMP_127)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-ERC721BasicToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_123(bool) = msg.sender == owner
TMP_124(None) = SOLIDITY_CALL require(bool)(TMP_123)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-ERC721BasicToken-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_129(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_130(bool) = TMP_129 == msg.sender
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-ERC721BasicToken-ownerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = tokenOwner[_tokenId]

IRs:
REF_3(address) -> tokenOwner[_tokenId]
owner(address) := REF_3(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owner != address(0))

IRs:
TMP_98 = CONVERT 0 to address
TMP_99(bool) = owner != TMP_98
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 9994.sol-ERC721BasicToken-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 9994.sol-ERC721BasicToken-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_115(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_116(bool) = TMP_115 == _from
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_10(uint256) -> ownedTokensCount[_from]
REF_11(uint256) -> ownedTokensCount[_from]
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_11', '1'] 
REF_10(uint256) (->ownedTokensCount) := TMP_118(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_13(address) -> tokenOwner[_tokenId]
TMP_119 = CONVERT 0 to address
REF_13(address) (->tokenOwner) := TMP_119(address)"];
}
// Function: 9994.sol-ERC721BasicToken-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newAdmin != address(0))

IRs:
TMP_91 = CONVERT 0 to address
TMP_92(bool) = newAdmin != TMP_91
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = newAdmin

IRs:
admin(address) := newAdmin(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9994.sol-ERC721BasicToken-setNewAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_77 = CONVERT this to address
TMP_78(uint256) = SOLIDITY_CALL balance(address)(TMP_77)
Transfer dest:owner value:TMP_78"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newContractAddress = _v2Address

IRs:
newContractAddress(address) := _v2Address(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 9994.sol-ERC721BasicToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
}
// Function: 9994.sol-ERC721BasicToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_86 = CONVERT 0 to address
TMP_87(bool) = newOwner != TMP_86
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9994.sol-ERC721BasicToken-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
3->1;
}
// Function: 9994.sol-ERC721BasicToken-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_120 = UnaryType.BANG paused 
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-ERC721BasicToken-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_122(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-ERC721Enumerable-balanceOf(address)
digraph{
}
// Function: 9994.sol-ERC721Enumerable-exists(uint256)
digraph{
}
// Function: 9994.sol-ERC721Enumerable-ownerOf(uint256)
digraph{
}
// Function: 9994.sol-ERC721Enumerable-tokenByIndex(uint256)
digraph{
}
// Function: 9994.sol-ERC721Enumerable-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 9994.sol-ERC721Enumerable-totalSupply()
digraph{
}
// Function: 9994.sol-ERC721Metadata-balanceOf(address)
digraph{
}
// Function: 9994.sol-ERC721Metadata-exists(uint256)
digraph{
}
// Function: 9994.sol-ERC721Metadata-name()
digraph{
}
// Function: 9994.sol-ERC721Metadata-ownerOf(uint256)
digraph{
}
// Function: 9994.sol-ERC721Metadata-symbol()
digraph{
}
// Function: 9994.sol-ERC721Token-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super._mint(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken._mint(address,uint256)(_to,_tokenId)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allTokensIndex[_tokenId] = allTokens.length

IRs:
REF_52(uint256) -> allTokensIndex[_tokenId]
REF_53 -> LENGTH allTokens
REF_52(uint256) (->allTokensIndex) := REF_53(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allTokens.push(_tokenId)

IRs:
REF_55 -> LENGTH allTokens
TMP_190(uint256) := REF_55(uint256)
TMP_191(uint256) = TMP_190 + 1
REF_55(uint256) (->allTokens) := TMP_191(uint256)
REF_56(uint256) -> allTokens[TMP_190]
REF_56(uint256) (->allTokens) := _tokenId(uint256)"];
}
// Function: 9994.sol-ERC721Token-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.addTokenTo(address,uint256)(_to,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
length = ownedTokens[_to].length

IRs:
REF_31(uint256[]) -> ownedTokens[_to]
REF_32 -> LENGTH REF_31
length(uint256) := REF_32(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokens[_to].push(_tokenId)

IRs:
REF_33(uint256[]) -> ownedTokens[_to]
REF_35 -> LENGTH REF_33
TMP_183(uint256) := REF_35(uint256)
TMP_184(uint256) = TMP_183 + 1
REF_35(uint256) (->ownedTokens) := TMP_184(uint256)
REF_36(uint256) -> REF_33[TMP_183]
REF_36(uint256) (->ownedTokens) := _tokenId(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownedTokensIndex[_tokenId] = length

IRs:
REF_37(uint256) -> ownedTokensIndex[_tokenId]
REF_37(uint256) (->ownedTokensIndex) := length(uint256)"];
}
// Function: 9994.sol-ERC721Token-balanceOf(address)
digraph{
}
// Function: 9994.sol-ERC721Token-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
}
// Function: 9994.sol-ERC721Token-constructor(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name_ = _name

IRs:
name_(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol_ = _symbol

IRs:
symbol_(string) := _symbol(string)"];
}
// Function: 9994.sol-ERC721Token-exists(uint256)
digraph{
}
// Function: 9994.sol-ERC721Token-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_140(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_140(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_spender == owner

IRs:
TMP_141(bool) = _spender == owner
RETURN TMP_141"];
}
// Function: 9994.sol-ERC721Token-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name_

IRs:
RETURN name_"];
}
// Function: 9994.sol-ERC721Token-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin || msg.sender == owner)

IRs:
TMP_200(bool) = msg.sender == admin
TMP_201(bool) = msg.sender == owner
TMP_202(bool) = TMP_200 || TMP_201
TMP_203(None) = SOLIDITY_CALL require(bool)(TMP_202)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-ERC721Token-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_198(bool) = msg.sender == owner
TMP_199(None) = SOLIDITY_CALL require(bool)(TMP_198)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-ERC721Token-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_192(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_193(bool) = TMP_192 == msg.sender
TMP_194(None) = SOLIDITY_CALL require(bool)(TMP_193)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-ERC721Token-ownerOf(uint256)
digraph{
}
// Function: 9994.sol-ERC721Token-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 9994.sol-ERC721Token-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.removeTokenFrom(_from,_tokenId)

IRs:
INTERNAL_CALL, ERC721BasicToken.removeTokenFrom(address,uint256)(_from,_tokenId)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenIndex = ownedTokensIndex[_tokenId]

IRs:
REF_38(uint256) -> ownedTokensIndex[_tokenId]
tokenIndex(uint256) := REF_38(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
lastTokenIndex = ownedTokens[_from].length.sub(1)

IRs:
REF_39(uint256[]) -> ownedTokens[_from]
REF_40 -> LENGTH REF_39
TMP_186(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_40', '1'] 
lastTokenIndex(uint256) := TMP_186(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lastToken = ownedTokens[_from][lastTokenIndex]

IRs:
REF_42(uint256[]) -> ownedTokens[_from]
REF_43(uint256) -> REF_42[lastTokenIndex]
lastToken(uint256) := REF_43(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownedTokens[_from][tokenIndex] = lastToken

IRs:
REF_44(uint256[]) -> ownedTokens[_from]
REF_45(uint256) -> REF_44[tokenIndex]
REF_45(uint256) (->ownedTokens) := lastToken(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownedTokens[_from][lastTokenIndex] = 0

IRs:
REF_46(uint256[]) -> ownedTokens[_from]
REF_47(uint256) -> REF_46[lastTokenIndex]
REF_47(uint256) (->ownedTokens) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownedTokens[_from].length --

IRs:
REF_48(uint256[]) -> ownedTokens[_from]
REF_49 -> LENGTH REF_48
TMP_187(uint256) := REF_49(uint256)
REF_49(-> ownedTokens) = REF_49 - 1"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ownedTokensIndex[_tokenId] = 0

IRs:
REF_50(uint256) -> ownedTokensIndex[_tokenId]
REF_50(uint256) (->ownedTokensIndex) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ownedTokensIndex[lastToken] = tokenIndex

IRs:
REF_51(uint256) -> ownedTokensIndex[lastToken]
REF_51(uint256) (->ownedTokensIndex) := tokenIndex(uint256)"];
}
// Function: 9994.sol-ERC721Token-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newAdmin != address(0))

IRs:
TMP_171 = CONVERT 0 to address
TMP_172(bool) = newAdmin != TMP_171
TMP_173(None) = SOLIDITY_CALL require(bool)(TMP_172)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = newAdmin

IRs:
admin(address) := newAdmin(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9994.sol-ERC721Token-setNewAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_157 = CONVERT this to address
TMP_158(uint256) = SOLIDITY_CALL balance(address)(TMP_157)
Transfer dest:owner value:TMP_158"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newContractAddress = _v2Address

IRs:
newContractAddress(address) := _v2Address(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 9994.sol-ERC721Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
}
// Function: 9994.sol-ERC721Token-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol_

IRs:
RETURN symbol_"];
}
// Function: 9994.sol-ERC721Token-tokenByIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < totalSupply())

IRs:
TMP_178(uint256) = INTERNAL_CALL, ERC721Token.totalSupply()()
TMP_179(bool) = _index < TMP_178
TMP_180(None) = SOLIDITY_CALL require(bool)(TMP_179)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
allTokens[_index]

IRs:
REF_30(uint256) -> allTokens[_index]
RETURN REF_30"];
}
// Function: 9994.sol-ERC721Token-tokenOfOwnerByIndex(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < balanceOf(_owner))

IRs:
TMP_175(uint256) = INTERNAL_CALL, ERC721BasicToken.balanceOf(address)(_owner)
TMP_176(bool) = _index < TMP_175
TMP_177(None) = SOLIDITY_CALL require(bool)(TMP_176)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
ownedTokens[_owner][_index]

IRs:
REF_27(uint256[]) -> ownedTokens[_owner]
REF_28(uint256) -> REF_27[_index]
RETURN REF_28"];
}
// Function: 9994.sol-ERC721Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allTokens.length

IRs:
REF_29 -> LENGTH allTokens
RETURN REF_29"];
}
// Function: 9994.sol-ERC721Token-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_166 = CONVERT 0 to address
TMP_167(bool) = newOwner != TMP_166
TMP_168(None) = SOLIDITY_CALL require(bool)(TMP_167)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9994.sol-ERC721Token-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
3->1;
}
// Function: 9994.sol-ERC721Token-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_195 = UnaryType.BANG paused 
TMP_196(None) = SOLIDITY_CALL require(bool)(TMP_195)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-ERC721Token-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_197(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-HWCIntegration-_addToFund(uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
isAll

IRs:
CONDITION isAll"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
prizeFund = prizeFund.add(_val)

IRs:
TMP_558(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['prizeFund', '_val'] 
prizeFund(uint256) := TMP_558(uint256)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
prizeFund = prizeFund.add(_val.mul(prizeFundFactor).div(10000))

IRs:
TMP_559(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_val', 'prizeFundFactor'] 
TMP_560(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_559', '10000'] 
TMP_561(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['prizeFund', 'TMP_560'] 
prizeFund(uint256) := TMP_561(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 9994.sol-HWCIntegration-_addToFundHWC(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
prizeFundHWC = prizeFundHWC.add(_val.mul(prizeFundFactor).div(10000))

IRs:
TMP_801(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_val', 'prizeFundFactor'] 
TMP_802(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_801', '10000'] 
TMP_803(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['prizeFundHWC', 'TMP_802'] 
prizeFundHWC(uint256) := TMP_803(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 9994.sol-HWCIntegration-_createForecast(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tokenId < tokens.length)

IRs:
REF_508 -> LENGTH tokens
TMP_725(bool) = _tokenId < REF_508
TMP_726(None) = SOLIDITY_CALL require(bool)(TMP_725)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newForecast = Forecast({gameId:_gameId,forecastBlockNumber:block.number,forecastData:_forecastData})

IRs:
TMP_727(BaseGame.Forecast) = new Forecast(_gameId,block.number,_forecastData)
newForecast(BaseGame.Forecast) := TMP_727(BaseGame.Forecast)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
newForecastId = forecasts.push(newForecast) - 1

IRs:
REF_510 -> LENGTH forecasts
TMP_730(uint256) := REF_510(uint256)
TMP_731(uint256) = TMP_730 + 1
REF_510(uint256) (->forecasts) := TMP_731(uint256)
REF_511(BaseGame.Forecast) -> forecasts[TMP_730]
REF_511(BaseGame.Forecast) (->forecasts) := newForecast(BaseGame.Forecast)
TMP_729(None) = TMP_728 - 1
newForecastId(uint256) := TMP_729(None)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
forecastToToken[newForecastId] = _tokenId

IRs:
REF_512(uint256) -> forecastToToken[newForecastId]
REF_512(uint256) (->forecastToToken) := _tokenId(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenForecasts[_tokenId].push(newForecastId)

IRs:
REF_513(uint256[]) -> tokenForecasts[_tokenId]
REF_515 -> LENGTH REF_513
TMP_733(uint256) := REF_515(uint256)
TMP_734(uint256) = TMP_733 + 1
REF_515(uint256) (->tokenForecasts) := TMP_734(uint256)
REF_516(uint256) -> REF_513[TMP_733]
REF_516(uint256) (->tokenForecasts) := newForecastId(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games[_gameId].forecasts.push(newForecastId)

IRs:
REF_517(BaseGame.Game) -> games[_gameId]
REF_518(uint256[]) -> REF_517.forecasts
REF_520 -> LENGTH REF_518
TMP_736(uint256) := REF_520(uint256)
TMP_737(uint256) = TMP_736 + 1
REF_520(uint256) (->games) := TMP_737(uint256)
REF_521(uint256) -> REF_518[TMP_736]
REF_521(uint256) (->games) := newForecastId(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
NewForecast(tokenOwner[_tokenId],_tokenId,newForecastId,_gameId,_forecastData)

IRs:
REF_522(address) -> tokenOwner[_tokenId]
Emit NewForecast(REF_522,_tokenId,newForecastId,_gameId,_forecastData)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
newForecastId

IRs:
RETURN newForecastId"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
9->1;
}
// Function: 9994.sol-HWCIntegration-_createToken(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_token = Token({createBlockNumber:block.number,parentId:_parentId})

IRs:
TMP_715(BaseGame.Token) = new Token(block.number,_parentId)
_token(BaseGame.Token) := TMP_715(BaseGame.Token)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newTokenId = tokens.push(_token) - 1

IRs:
REF_504 -> LENGTH tokens
TMP_718(uint256) := REF_504(uint256)
TMP_719(uint256) = TMP_718 + 1
REF_504(uint256) (->tokens) := TMP_719(uint256)
REF_505(BaseGame.Token) -> tokens[TMP_718]
REF_505(BaseGame.Token) (->tokens) := _token(BaseGame.Token)
TMP_717(None) = TMP_716 - 1
newTokenId(uint256) := TMP_717(None)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
NewAccount(_owner,newTokenId,uint256(_token.parentId),uint256(_token.createBlockNumber))

IRs:
REF_506(uint256) -> _token.parentId
TMP_720 = CONVERT REF_506 to uint256
REF_507(uint256) -> _token.createBlockNumber
TMP_721 = CONVERT REF_507 to uint256
Emit NewAccount(_owner,newTokenId,TMP_720,TMP_721)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_mint(_owner,newTokenId)

IRs:
INTERNAL_CALL, ERC721Token._mint(address,uint256)(_owner,newTokenId)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
newTokenId

IRs:
RETURN newTokenId"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
6->1;
}
// Function: 9994.sol-HWCIntegration-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_767 = CONVERT 0 to address
TMP_768(bool) = _to != TMP_767
TMP_769(None) = SOLIDITY_CALL require(bool)(TMP_768)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_771 = CONVERT 0 to address
Emit Transfer(TMP_771,_to,_tokenId)"];
}
// Function: 9994.sol-HWCIntegration-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_556(address) -> tokenOwner[_tokenId]
TMP_773 = CONVERT 0 to address
TMP_774(bool) = REF_556 == TMP_773
TMP_775(None) = SOLIDITY_CALL require(bool)(TMP_774)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_557(address) -> tokenOwner[_tokenId]
REF_557(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_558(uint256) -> ownedTokensCount[_to]
REF_559(uint256) -> ownedTokensCount[_to]
TMP_776(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_559', '1'] 
REF_558(uint256) (->ownedTokensCount) := TMP_776(uint256)"];
}
// Function: 9994.sol-HWCIntegration-balanceOf(address)
digraph{
}
// Function: 9994.sol-HWCIntegration-calculateScore(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp > games[_gameId].gameDate)

IRs:
REF_452(BaseGame.Game) -> games[_gameId]
REF_453(uint64) -> REF_452.gameDate
TMP_650(bool) = block.timestamp > REF_453
TMP_651(None) = SOLIDITY_CALL require(bool)(TMP_650)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_shotB = (d & 0xff)

IRs:
TMP_652(uint256) = d & 255
_shotB(uint256) := TMP_652(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
d = d >> 8

IRs:
TMP_653(uint256) = d >> 8
d(uint256) := TMP_653(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_shotA = (d & 0xff)

IRs:
TMP_654(uint256) = d & 255
_shotA(uint256) := TMP_654(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
d = d >> 8

IRs:
TMP_655(uint256) = d >> 8
d(uint256) := TMP_655(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
odds8 = (d & 0xff)

IRs:
TMP_656(uint256) = d & 255
odds8(uint256) := TMP_656(uint256)"];
6->44;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
d = d >> 8

IRs:
TMP_657(uint256) = d >> 8
d(uint256) := TMP_657(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_goalB = (d & 0xff)

IRs:
TMP_658(uint256) = d & 255
_goalB(uint256) := TMP_658(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
d = d >> 8

IRs:
TMP_659(uint256) = d >> 8
d(uint256) := TMP_659(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_goalA = (d & 0xff)

IRs:
TMP_660(uint256) = d & 255
_goalA(uint256) := TMP_660(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
d = d >> 8

IRs:
TMP_661(uint256) = d >> 8
d(uint256) := TMP_661(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
cGame = games[_gameId]

IRs:
REF_454(BaseGame.Game) -> games[_gameId]
cGame(BaseGame.Game) := REF_454(BaseGame.Game)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
_score = 0

IRs:
_score(uint256) := 0(uint256)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
isDoubleScore = true

IRs:
isDoubleScore(bool) := True(bool)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
cGame.shotA == _shotA

IRs:
REF_455(uint256) -> cGame.shotA
TMP_662(bool) = REF_455 == _shotA
CONDITION TMP_662"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_score = _score.add(1)

IRs:
TMP_663(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '1'] 
_score(uint256) := TMP_663(uint256)"];
17->19;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
cGame.shotB == _shotB

IRs:
REF_457(uint256) -> cGame.shotB
TMP_664(bool) = REF_457 == _shotB
CONDITION TMP_664"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_score = _score.add(1)

IRs:
TMP_665(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '1'] 
_score(uint256) := TMP_665(uint256)"];
21->23;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
cGame.odds == _odds

IRs:
REF_459(bool) -> cGame.odds
TMP_666(bool) = REF_459 == _odds
CONDITION TMP_666"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_score = _score.add(1)

IRs:
TMP_667(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '1'] 
_score(uint256) := TMP_667(uint256)"];
25->27;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
(cGame.goalA + cGame.goalB) == (_goalA + _goalB)

IRs:
REF_461(uint256) -> cGame.goalA
REF_462(uint256) -> cGame.goalB
TMP_668(uint256) = REF_461 + REF_462
TMP_669(uint256) = _goalA + _goalB
TMP_670(bool) = TMP_668 == TMP_669
CONDITION TMP_670"];
28->29[label="True"];
28->30[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_score = _score.add(2)

IRs:
TMP_671(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '2'] 
_score(uint256) := TMP_671(uint256)"];
29->31;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
30->31;
31[label="Node Type: END_IF 31
"];
31->32;
32[label="Node Type: IF 32

EXPRESSION:
cGame.goalA == _goalA && cGame.goalB == _goalB

IRs:
REF_464(uint256) -> cGame.goalA
TMP_672(bool) = REF_464 == _goalA
REF_465(uint256) -> cGame.goalB
TMP_673(bool) = REF_465 == _goalB
TMP_674(bool) = TMP_672 && TMP_673
CONDITION TMP_674"];
32->33[label="True"];
32->34[label="False"];
33[label="Node Type: EXPRESSION 33

EXPRESSION:
_score = _score.add(3)

IRs:
TMP_675(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '3'] 
_score(uint256) := TMP_675(uint256)"];
33->35;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: IF 36

EXPRESSION:
((cGame.goalA > cGame.goalB) && (_goalA > _goalB)) || ((cGame.goalA < cGame.goalB) && (_goalA < _goalB)) || ((cGame.goalA == cGame.goalB) && (_goalA == _goalB))

IRs:
REF_467(uint256) -> cGame.goalA
REF_468(uint256) -> cGame.goalB
TMP_676(bool) = REF_467 > REF_468
TMP_677(bool) = _goalA > _goalB
TMP_678(bool) = TMP_676 && TMP_677
REF_469(uint256) -> cGame.goalA
REF_470(uint256) -> cGame.goalB
TMP_679(bool) = REF_469 < REF_470
TMP_680(bool) = _goalA < _goalB
TMP_681(bool) = TMP_679 && TMP_680
TMP_682(bool) = TMP_678 || TMP_681
REF_471(uint256) -> cGame.goalA
REF_472(uint256) -> cGame.goalB
TMP_683(bool) = REF_471 == REF_472
TMP_684(bool) = _goalA == _goalB
TMP_685(bool) = TMP_683 && TMP_684
TMP_686(bool) = TMP_682 || TMP_685
CONDITION TMP_686"];
36->37[label="True"];
36->38[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_score = _score.add(1)

IRs:
TMP_687(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '1'] 
_score(uint256) := TMP_687(uint256)"];
37->39;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: IF 40

EXPRESSION:
isDoubleScore

IRs:
CONDITION isDoubleScore"];
40->41[label="True"];
40->42[label="False"];
41[label="Node Type: EXPRESSION 41

EXPRESSION:
_score = _score.mul(2)

IRs:
TMP_688(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_score', '2'] 
_score(uint256) := TMP_688(uint256)"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: RETURN 43

EXPRESSION:
_score

IRs:
RETURN _score"];
44[label="Node Type: IF 44

EXPRESSION:
odds8 == 1

IRs:
TMP_689(bool) = odds8 == 1
CONDITION TMP_689"];
44->45[label="True"];
44->46[label="False"];
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_odds = true

IRs:
_odds(bool) := True(bool)"];
45->47;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
_odds = false

IRs:
_odds(bool) := False(bool)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->8;
}
// Function: 9994.sol-HWCIntegration-calculateTokenPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_609(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_610(None) = SOLIDITY_CALL require(bool)(TMP_609)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
forecastCount = getForecastCount(_tokenId,block.number,true)

IRs:
TMP_611(uint256) = INTERNAL_CALL, BaseGameLogic.getForecastCount(uint256,uint256,bool)(_tokenId,block.number,True)
forecastCount(uint256) := TMP_611(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(forecastCount.add(1)).mul(basePrice).mul(priceFactor).div(10000)

IRs:
TMP_612(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['forecastCount', '1'] 
TMP_613(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_612', 'basePrice'] 
TMP_614(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_613', 'priceFactor'] 
TMP_615(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_614', '10000'] 
RETURN TMP_615"];
}
// Function: 9994.sol-HWCIntegration-cloneAccount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_568(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_569(None) = SOLIDITY_CALL require(bool)(TMP_568)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenPrice = calculateTokenPrice(_tokenId)

IRs:
TMP_570(uint256) = INTERNAL_CALL, BaseGameLogic.calculateTokenPrice(uint256)(_tokenId)
tokenPrice(uint256) := TMP_570(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value >= tokenPrice)

IRs:
TMP_571(bool) = msg.value >= tokenPrice
TMP_572(None) = SOLIDITY_CALL require(bool)(TMP_571)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
newToken = _createToken(_tokenId,msg.sender)

IRs:
TMP_573(uint256) = INTERNAL_CALL, BaseGame._createToken(uint256,address)(_tokenId,msg.sender)
newToken(uint256) := TMP_573(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
gameFee = tokenPrice.mul(gameCloneFee).div(10000)

IRs:
TMP_574(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokenPrice', 'gameCloneFee'] 
TMP_575(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_574', '10000'] 
gameFee(uint256) := TMP_575(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_addToFund(gameFee,false)

IRs:
INTERNAL_CALL, BaseGameLogic._addToFund(uint256,bool)(gameFee,False)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
ownerProceed = tokenPrice.sub(gameFee)

IRs:
TMP_577(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokenPrice', 'gameFee'] 
ownerProceed(uint256) := TMP_577(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
tokenOwnerAddress = tokenOwner[_tokenId]

IRs:
REF_350(address) -> tokenOwner[_tokenId]
tokenOwnerAddress(address) := REF_350(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
tokenOwnerAddress.transfer(ownerProceed)

IRs:
Transfer dest:tokenOwnerAddress value:ownerProceed"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
newToken

IRs:
RETURN newToken"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
11->1;
}
// Function: 9994.sol-HWCIntegration-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
}
// Function: 9994.sol-HWCIntegration-constructor(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
BaseGameLogic(_name,_symbol)

IRs:
INTERNAL_CALL, BaseGameLogic.constructor(string,string)(_name,_symbol)"];
}
// Function: 9994.sol-HWCIntegration-createAccount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= basePrice)

IRs:
TMP_563(bool) = msg.value >= basePrice
TMP_564(None) = SOLIDITY_CALL require(bool)(TMP_563)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_addToFund(msg.value,false)

IRs:
INTERNAL_CALL, BaseGameLogic._addToFund(uint256,bool)(msg.value,False)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_createToken(0,msg.sender)

IRs:
TMP_566(uint256) = INTERNAL_CALL, BaseGame._createToken(uint256,address)(0,msg.sender)
RETURN TMP_566"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 9994.sol-HWCIntegration-createForecast(uint256,uint256,uint8,uint8,bool,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_580(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_581(None) = SOLIDITY_CALL require(bool)(TMP_580)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(block.timestamp < games[_gameId].gameDate)

IRs:
REF_352(BaseGame.Game) -> games[_gameId]
REF_353(uint64) -> REF_352.gameDate
TMP_582(bool) = block.timestamp < REF_353
TMP_583(None) = SOLIDITY_CALL require(bool)(TMP_582)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_forecastData = toForecastData(_goalA,_goalB,_odds,_shotA,_shotB)

IRs:
TMP_584(uint256) = INTERNAL_CALL, BaseGameLogic.toForecastData(uint8,uint8,bool,uint8,uint8)(_goalA,_goalB,_odds,_shotA,_shotB)
_forecastData(uint256) := TMP_584(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_createForecast(_tokenId,_gameId,_forecastData)

IRs:
TMP_585(uint256) = INTERNAL_CALL, BaseGame._createForecast(uint256,uint256,uint256)(_tokenId,_gameId,_forecastData)
RETURN TMP_585"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.onlyOwnerOf(uint256)(_tokenId)"];
6->1;
}
// Function: 9994.sol-HWCIntegration-createTokenByHWC(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenPrice = basePrice.div(1e10).mul(cHWCtoEth)

IRs:
TMP_824(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['basePrice', '10000000000'] 
TMP_825(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_824', 'cHWCtoEth'] 
tokenPrice(uint256) := TMP_825(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_parentId > 0

IRs:
TMP_826(bool) = _parentId > 0
CONDITION TMP_826"];
2->3[label="True"];
2->10[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenPrice = calculateTokenPrice(_parentId)

IRs:
TMP_827(uint256) = INTERNAL_CALL, BaseGameLogic.calculateTokenPrice(uint256)(_parentId)
tokenPrice(uint256) := TMP_827(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenPrice = tokenPrice.div(1e10).mul(cHWCtoEth)

IRs:
TMP_828(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['tokenPrice', '10000000000'] 
TMP_829(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_828', 'cHWCtoEth'] 
tokenPrice(uint256) := TMP_829(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
gameFee = tokenPrice.mul(gameCloneFee).div(10000)

IRs:
TMP_830(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokenPrice', 'gameCloneFee'] 
TMP_831(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_830', '10000'] 
gameFee(uint256) := TMP_831(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_addToFundHWC(gameFee)

IRs:
INTERNAL_CALL, HWCIntegration._addToFundHWC(uint256)(gameFee)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
ownerProceed = tokenPrice.sub(gameFee)

IRs:
TMP_833(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokenPrice', 'gameFee'] 
ownerProceed(uint256) := TMP_833(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
tokenOwnerAddress = tokenOwner[_parentId]

IRs:
REF_607(address) -> tokenOwner[_parentId]
tokenOwnerAddress(address) := REF_607(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
hwcAddress[tokenOwnerAddress].deposit = hwcAddress[tokenOwnerAddress].deposit + ownerProceed

IRs:
REF_608(HWCIntegration.HWCInfo) -> hwcAddress[tokenOwnerAddress]
REF_609(uint256) -> REF_608.deposit
REF_610(HWCIntegration.HWCInfo) -> hwcAddress[tokenOwnerAddress]
REF_611(uint256) -> REF_610.deposit
TMP_834(uint256) = REF_611 + ownerProceed
REF_609(uint256) (->hwcAddress) := TMP_834(uint256)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_addToFundHWC(tokenPrice)

IRs:
INTERNAL_CALL, HWCIntegration._addToFundHWC(uint256)(tokenPrice)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
_createToken(_parentId,_userTo)

IRs:
TMP_836(uint256) = INTERNAL_CALL, BaseGame._createToken(uint256,address)(_parentId,_userTo)
RETURN TMP_836"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
14->1;
}
// Function: 9994.sol-HWCIntegration-exists(uint256)
digraph{
}
// Function: 9994.sol-HWCIntegration-forecastInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameId = forecasts[_fId].gameId

IRs:
REF_380(BaseGame.Forecast) -> forecasts[_fId]
REF_381(uint256) -> REF_380.gameId
gameId(uint256) := REF_381(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
f = forecasts[_fId].forecastData

IRs:
REF_382(BaseGame.Forecast) -> forecasts[_fId]
REF_383(uint256) -> REF_382.forecastData
f(uint256) := REF_383(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(gameId,f)

IRs:
RETURN gameId,f"];
}
// Function: 9994.sol-HWCIntegration-forecastOfToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
forecastCount = tokenForecasts[_tokenId].length

IRs:
REF_356(uint256[]) -> tokenForecasts[_tokenId]
REF_357 -> LENGTH REF_356
forecastCount(uint256) := REF_357(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
forecastCount == 0

IRs:
TMP_599(bool) = forecastCount == 0
CONDITION TMP_599"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
new uint256[](0)

IRs:
TMP_601(uint256[])  = new uint256[](0)
RETURN TMP_601"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
result = new uint256[](forecastCount)

IRs:
TMP_603(uint256[])  = new uint256[](forecastCount)
result(uint256[]) = ['TMP_603(uint256[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
resultIndex = 0

IRs:
resultIndex(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
resultIndex < forecastCount

IRs:
TMP_604(bool) = resultIndex < forecastCount
CONDITION TMP_604"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
result[resultIndex] = tokenForecasts[_tokenId][resultIndex]

IRs:
REF_358(uint256) -> result[resultIndex]
REF_359(uint256[]) -> tokenForecasts[_tokenId]
REF_360(uint256) -> REF_359[resultIndex]
REF_358(uint256) (->result) := REF_360(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
resultIndex ++

IRs:
TMP_605(uint256) := resultIndex(uint256)
resultIndex(uint256) = resultIndex + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 9994.sol-HWCIntegration-gameEdit(uint256,uint64,BaseGame.Teams,BaseGame.Teams)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
games[_gameId].gameDate = gameDate

IRs:
REF_475(BaseGame.Game) -> games[_gameId]
REF_476(uint64) -> REF_475.gameDate
REF_476(uint64) (->games) := gameDate(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
games[_gameId].teamA = teamA

IRs:
REF_477(BaseGame.Game) -> games[_gameId]
REF_478(BaseGame.Teams) -> REF_477.teamA
REF_478(BaseGame.Teams) (->games) := teamA(BaseGame.Teams)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
games[_gameId].teamB = teamB

IRs:
REF_479(BaseGame.Game) -> games[_gameId]
REF_480(BaseGame.Teams) -> REF_479.teamB
REF_480(BaseGame.Teams) (->games) := teamB(BaseGame.Teams)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
GameChanged(_gameId,games[_gameId].gameDate,games[_gameId].teamA,games[_gameId].teamB,0,0,true,0,0)

IRs:
REF_481(BaseGame.Game) -> games[_gameId]
REF_482(uint64) -> REF_481.gameDate
REF_483(BaseGame.Game) -> games[_gameId]
REF_484(BaseGame.Teams) -> REF_483.teamA
REF_485(BaseGame.Game) -> games[_gameId]
REF_486(BaseGame.Teams) -> REF_485.teamB
Emit GameChanged(_gameId,REF_482,REF_484,REF_486,0,0,True,0,0)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
5->1;
}
// Function: 9994.sol-HWCIntegration-gameInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameDate = games[_gameId].gameDate

IRs:
REF_361(BaseGame.Game) -> games[_gameId]
REF_362(uint64) -> REF_361.gameDate
gameDate(uint64) := REF_362(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
teamA = games[_gameId].teamA

IRs:
REF_363(BaseGame.Game) -> games[_gameId]
REF_364(BaseGame.Teams) -> REF_363.teamA
teamA(BaseGame.Teams) := REF_364(BaseGame.Teams)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
teamB = games[_gameId].teamB

IRs:
REF_365(BaseGame.Game) -> games[_gameId]
REF_366(BaseGame.Teams) -> REF_365.teamB
teamB(BaseGame.Teams) := REF_366(BaseGame.Teams)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
goalA = games[_gameId].goalA

IRs:
REF_367(BaseGame.Game) -> games[_gameId]
REF_368(uint256) -> REF_367.goalA
goalA(uint256) := REF_368(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gaolB = games[_gameId].goalB

IRs:
REF_369(BaseGame.Game) -> games[_gameId]
REF_370(uint256) -> REF_369.goalB
gaolB(uint256) := REF_370(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
odds = games[_gameId].odds

IRs:
REF_371(BaseGame.Game) -> games[_gameId]
REF_372(bool) -> REF_371.odds
odds(bool) := REF_372(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
shotA = games[_gameId].shotA

IRs:
REF_373(BaseGame.Game) -> games[_gameId]
REF_374(uint256) -> REF_373.shotA
shotA(uint256) := REF_374(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
shotB = games[_gameId].shotB

IRs:
REF_375(BaseGame.Game) -> games[_gameId]
REF_376(uint256) -> REF_375.shotB
shotB(uint256) := REF_376(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
forecastCount = games[_gameId].forecasts.length

IRs:
REF_377(BaseGame.Game) -> games[_gameId]
REF_378(uint256[]) -> REF_377.forecasts
REF_379 -> LENGTH REF_378
forecastCount(uint256) := REF_379(uint256)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
(gameDate,teamA,teamB,goalA,gaolB,odds,shotA,shotB,forecastCount)

IRs:
RETURN gameDate,teamA,teamB,goalA,gaolB,odds,shotA,shotB,forecastCount"];
}
// Function: 9994.sol-HWCIntegration-gameResult(uint256,uint256,uint256,bool,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
games[_gameId].goalA = goalA

IRs:
REF_487(BaseGame.Game) -> games[_gameId]
REF_488(uint256) -> REF_487.goalA
REF_488(uint256) (->games) := goalA(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
games[_gameId].goalB = goalB

IRs:
REF_489(BaseGame.Game) -> games[_gameId]
REF_490(uint256) -> REF_489.goalB
REF_490(uint256) (->games) := goalB(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
games[_gameId].odds = odds

IRs:
REF_491(BaseGame.Game) -> games[_gameId]
REF_492(bool) -> REF_491.odds
REF_492(bool) (->games) := odds(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
games[_gameId].shotA = shotA

IRs:
REF_493(BaseGame.Game) -> games[_gameId]
REF_494(uint256) -> REF_493.shotA
REF_494(uint256) (->games) := shotA(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
games[_gameId].shotB = shotB

IRs:
REF_495(BaseGame.Game) -> games[_gameId]
REF_496(uint256) -> REF_495.shotB
REF_496(uint256) (->games) := shotB(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
GameChanged(_gameId,games[_gameId].gameDate,games[_gameId].teamA,games[_gameId].teamB,goalA,goalB,odds,shotA,shotB)

IRs:
REF_497(BaseGame.Game) -> games[_gameId]
REF_498(uint64) -> REF_497.gameDate
REF_499(BaseGame.Game) -> games[_gameId]
REF_500(BaseGame.Teams) -> REF_499.teamA
REF_501(BaseGame.Game) -> games[_gameId]
REF_502(BaseGame.Teams) -> REF_501.teamB
Emit GameChanged(_gameId,REF_498,REF_500,REF_502,goalA,goalB,odds,shotA,shotB)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
7->1;
}
// Function: 9994.sol-HWCIntegration-getForecastCount(uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_616(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_617(None) = SOLIDITY_CALL require(bool)(TMP_616)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
forecastCount = 0

IRs:
forecastCount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
index = 0

IRs:
index(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
count = tokenForecasts[_tokenId].length

IRs:
REF_392(uint256[]) -> tokenForecasts[_tokenId]
REF_393 -> LENGTH REF_392
count(uint256) := REF_393(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->18;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
index = 0

IRs:
index(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
index < count

IRs:
TMP_618(bool) = index < count
CONDITION TMP_618"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
forecasts[tokenForecasts[_tokenId][index]].forecastBlockNumber < _blockNumber

IRs:
REF_394(uint256[]) -> tokenForecasts[_tokenId]
REF_395(uint256) -> REF_394[index]
REF_396(BaseGame.Forecast) -> forecasts[REF_395]
REF_397(uint256) -> REF_396.forecastBlockNumber
TMP_619(bool) = REF_397 < _blockNumber
CONDITION TMP_619"];
9->10[label="True"];
9->16[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
isReleased

IRs:
CONDITION isReleased"];
10->11[label="True"];
10->14[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
games[forecasts[tokenForecasts[_tokenId][index]].gameId].gameDate < block.timestamp

IRs:
REF_398(uint256[]) -> tokenForecasts[_tokenId]
REF_399(uint256) -> REF_398[index]
REF_400(BaseGame.Forecast) -> forecasts[REF_399]
REF_401(uint256) -> REF_400.gameId
REF_402(BaseGame.Game) -> games[REF_401]
REF_403(uint64) -> REF_402.gameDate
TMP_620(bool) = REF_403 < block.timestamp
CONDITION TMP_620"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
forecastCount = forecastCount + 1

IRs:
TMP_621(uint256) = forecastCount + 1
forecastCount(uint256) := TMP_621(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->15;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
forecastCount = forecastCount + 1

IRs:
TMP_622(uint256) = forecastCount + 1
forecastCount(uint256) := TMP_622(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
index ++

IRs:
TMP_623(uint256) := index(uint256)
index(uint256) = index + 1"];
17->8;
18[label="Node Type: IF 18

EXPRESSION:
tokens[_tokenId].parentId != 0

IRs:
REF_404(BaseGame.Token) -> tokens[_tokenId]
REF_405(uint256) -> REF_404.parentId
TMP_624(bool) = REF_405 != 0
CONDITION TMP_624"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
forecastCount = forecastCount.add(getForecastCount(tokens[_tokenId].parentId,tokens[_tokenId].createBlockNumber,isReleased))

IRs:
REF_407(BaseGame.Token) -> tokens[_tokenId]
REF_408(uint256) -> REF_407.parentId
REF_409(BaseGame.Token) -> tokens[_tokenId]
REF_410(uint256) -> REF_409.createBlockNumber
TMP_625(uint256) = INTERNAL_CALL, BaseGameLogic.getForecastCount(uint256,uint256,bool)(REF_408,REF_410,isReleased)
TMP_626(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['forecastCount', 'TMP_625'] 
forecastCount(uint256) := TMP_626(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
forecastCount

IRs:
RETURN forecastCount"];
}
// Function: 9994.sol-HWCIntegration-getForecastScore(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_forecastId < forecasts.length)

IRs:
REF_447 -> LENGTH forecasts
TMP_647(bool) = _forecastId < REF_447
TMP_648(None) = SOLIDITY_CALL require(bool)(TMP_647)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
calculateScore(forecasts[_forecastId].gameId,forecasts[_forecastId].forecastData)

IRs:
REF_448(BaseGame.Forecast) -> forecasts[_forecastId]
REF_449(uint256) -> REF_448.gameId
REF_450(BaseGame.Forecast) -> forecasts[_forecastId]
REF_451(uint256) -> REF_450.forecastData
TMP_649(uint256) = INTERNAL_CALL, BaseGameLogic.calculateScore(uint256,uint256)(REF_449,REF_451)
RETURN TMP_649"];
}
// Function: 9994.sol-HWCIntegration-getHWCAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
aDeposit = hwcAddress[_val].aDeposit

IRs:
REF_592(HWCIntegration.HWCInfo) -> hwcAddress[_val]
REF_593(string) -> REF_592.aDeposit
aDeposit(string) := REF_593(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
aWithdraw = hwcAddress[_val].aWithdraw

IRs:
REF_594(HWCIntegration.HWCInfo) -> hwcAddress[_val]
REF_595(string) -> REF_594.aWithdraw
aWithdraw(string) := REF_595(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
d = hwcAddress[_val].deposit

IRs:
REF_596(HWCIntegration.HWCInfo) -> hwcAddress[_val]
REF_597(uint256) -> REF_596.deposit
d(uint256) := REF_597(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(aDeposit,aWithdraw,d)

IRs:
RETURN aDeposit,aWithdraw,d"];
}
// Function: 9994.sol-HWCIntegration-getHWCAddressByIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < hwcAddressList.length)

IRs:
REF_590 -> LENGTH hwcAddressList
TMP_821(bool) = _index < REF_590
TMP_822(None) = SOLIDITY_CALL require(bool)(TMP_821)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
getHWCAddress(hwcAddressList[_index])

IRs:
REF_591(address) -> hwcAddressList[_index]
TUPLE_0(string,string,uint256) = INTERNAL_CALL, HWCIntegration.getHWCAddress(address)(REF_591)
RETURN TUPLE_0"];
3[label="Node Type: RETURN 3

EXPRESSION:
(aDeposit,aWithdraw,d)

IRs:
RETURN aDeposit,aWithdraw,d"];
}
// Function: 9994.sol-HWCIntegration-getHWCAddressCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hwcAddressList.length

IRs:
REF_589 -> LENGTH hwcAddressList
RETURN REF_589"];
}
// Function: 9994.sol-HWCIntegration-getScore(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gameForecast = new uint256[](65)

IRs:
TMP_628(uint256[])  = new uint256[](65)
_gameForecast(uint256[]) = ['TMP_628(uint256[])']"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
getScore(_tokenId,block.number,_gameForecast)

IRs:
TMP_629(uint256) = INTERNAL_CALL, BaseGameLogic.getScore(uint256,uint256,uint256[])(_tokenId,block.number,_gameForecast)
RETURN TMP_629"];
}
// Function: 9994.sol-HWCIntegration-getScore(uint256,uint256,uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
score = 0

IRs:
score(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_forecasts = forecastOfToken(_tokenId)

IRs:
TMP_630(uint256[]) = INTERNAL_CALL, BaseGameLogic.forecastOfToken(uint256)(_tokenId)
_forecasts(uint256[]) = ['TMP_630(uint256[])']"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_forecasts.length > 0

IRs:
REF_411 -> LENGTH _forecasts
TMP_631(bool) = REF_411 > 0
CONDITION TMP_631"];
3->4[label="True"];
3->14[label="False"];
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->14;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_index = _forecasts.length - 1

IRs:
REF_412 -> LENGTH _forecasts
TMP_632(uint256) = REF_412 - 1
_index(uint256) := TMP_632(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
_index >= 0 && _index < _forecasts.length

IRs:
TMP_633(bool) = _index >= 0
REF_413 -> LENGTH _forecasts
TMP_634(bool) = _index < REF_413
TMP_635(bool) = TMP_633 && TMP_634
CONDITION TMP_635"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
forecasts[_forecasts[_index]].forecastBlockNumber < _blockNumber && _gameForecast[forecasts[_forecasts[_index]].gameId] == 0 && block.timestamp > games[forecasts[_forecasts[_index]].gameId].gameDate

IRs:
REF_414(uint256) -> _forecasts[_index]
REF_415(BaseGame.Forecast) -> forecasts[REF_414]
REF_416(uint256) -> REF_415.forecastBlockNumber
TMP_636(bool) = REF_416 < _blockNumber
REF_417(uint256) -> _forecasts[_index]
REF_418(BaseGame.Forecast) -> forecasts[REF_417]
REF_419(uint256) -> REF_418.gameId
REF_420(uint256) -> _gameForecast[REF_419]
TMP_637(bool) = REF_420 == 0
TMP_638(bool) = TMP_636 && TMP_637
REF_421(uint256) -> _forecasts[_index]
REF_422(BaseGame.Forecast) -> forecasts[REF_421]
REF_423(uint256) -> REF_422.gameId
REF_424(BaseGame.Game) -> games[REF_423]
REF_425(uint64) -> REF_424.gameDate
TMP_639(bool) = block.timestamp > REF_425
TMP_640(bool) = TMP_638 && TMP_639
CONDITION TMP_640"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
score = score.add(calculateScore(forecasts[_forecasts[_index]].gameId,forecasts[_forecasts[_index]].forecastData))

IRs:
REF_427(uint256) -> _forecasts[_index]
REF_428(BaseGame.Forecast) -> forecasts[REF_427]
REF_429(uint256) -> REF_428.gameId
REF_430(uint256) -> _forecasts[_index]
REF_431(BaseGame.Forecast) -> forecasts[REF_430]
REF_432(uint256) -> REF_431.forecastData
TMP_641(uint256) = INTERNAL_CALL, BaseGameLogic.calculateScore(uint256,uint256)(REF_429,REF_432)
TMP_642(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['score', 'TMP_641'] 
score(uint256) := TMP_642(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_gameForecast[forecasts[_forecasts[_index]].gameId] = forecasts[_forecasts[_index]].forecastBlockNumber

IRs:
REF_433(uint256) -> _forecasts[_index]
REF_434(BaseGame.Forecast) -> forecasts[REF_433]
REF_435(uint256) -> REF_434.gameId
REF_436(uint256) -> _gameForecast[REF_435]
REF_437(uint256) -> _forecasts[_index]
REF_438(BaseGame.Forecast) -> forecasts[REF_437]
REF_439(uint256) -> REF_438.forecastBlockNumber
REF_436(uint256) (->_gameForecast) := REF_439(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_index --

IRs:
TMP_643(uint256) := _index(uint256)
_index(uint256) = _index - 1"];
13->8;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
tokens[_tokenId].parentId != 0

IRs:
REF_440(BaseGame.Token) -> tokens[_tokenId]
REF_441(uint256) -> REF_440.parentId
TMP_644(bool) = REF_441 != 0
CONDITION TMP_644"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
score = score.add(getScore(tokens[_tokenId].parentId,tokens[_tokenId].createBlockNumber,_gameForecast))

IRs:
REF_443(BaseGame.Token) -> tokens[_tokenId]
REF_444(uint256) -> REF_443.parentId
REF_445(BaseGame.Token) -> tokens[_tokenId]
REF_446(uint256) -> REF_445.createBlockNumber
TMP_645(uint256) = INTERNAL_CALL, BaseGameLogic.getScore(uint256,uint256,uint256[])(REF_444,REF_446,_gameForecast)
TMP_646(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['score', 'TMP_645'] 
score(uint256) := TMP_646(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
score

IRs:
RETURN score"];
}
// Function: 9994.sol-HWCIntegration-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_765(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_765(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_spender == owner

IRs:
TMP_766(bool) = _spender == owner
RETURN TMP_766"];
}
// Function: 9994.sol-HWCIntegration-name()
digraph{
}
// Function: 9994.sol-HWCIntegration-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin || msg.sender == owner)

IRs:
TMP_848(bool) = msg.sender == admin
TMP_849(bool) = msg.sender == owner
TMP_850(bool) = TMP_848 || TMP_849
TMP_851(None) = SOLIDITY_CALL require(bool)(TMP_850)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-HWCIntegration-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_846(bool) = msg.sender == owner
TMP_847(None) = SOLIDITY_CALL require(bool)(TMP_846)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-HWCIntegration-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_840(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_841(bool) = TMP_840 == msg.sender
TMP_842(None) = SOLIDITY_CALL require(bool)(TMP_841)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-HWCIntegration-ownerOf(uint256)
digraph{
}
// Function: 9994.sol-HWCIntegration-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 9994.sol-HWCIntegration-registerHWCDep(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(_a).length == 34)

IRs:
TMP_805 = CONVERT _a to bytes
REF_569 -> LENGTH TMP_805
TMP_806(bool) = REF_569 == 34
TMP_807(None) = SOLIDITY_CALL require(bool)(TMP_806)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
hwcAddress[msg.sender].aDeposit = _a

IRs:
REF_570(HWCIntegration.HWCInfo) -> hwcAddress[msg.sender]
REF_571(string) -> REF_570.aDeposit
REF_571(string) (->hwcAddress) := _a(string)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
hwcAddress[msg.sender].index1 == 0

IRs:
REF_572(HWCIntegration.HWCInfo) -> hwcAddress[msg.sender]
REF_573(uint256) -> REF_572.index1
TMP_808(bool) = REF_573 == 0
CONDITION TMP_808"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
hwcAddress[msg.sender].index1 = hwcAddressList.push(msg.sender)

IRs:
REF_574(HWCIntegration.HWCInfo) -> hwcAddress[msg.sender]
REF_575(uint256) -> REF_574.index1
REF_577 -> LENGTH hwcAddressList
TMP_810(uint256) := REF_577(uint256)
TMP_811(uint256) = TMP_810 + 1
REF_577(uint256) (->hwcAddressList) := TMP_811(uint256)
REF_578(address) -> hwcAddressList[TMP_810]
REF_578(address) (->hwcAddressList) := msg.sender(address)
REF_575(uint256) (->hwcAddress) := TMP_809(None)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
NewHWCRegister(msg.sender,_a,)

IRs:
Emit NewHWCRegister(msg.sender,_a,)"];
}
// Function: 9994.sol-HWCIntegration-registerHWCWit(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(_a).length == 34)

IRs:
TMP_813 = CONVERT _a to bytes
REF_579 -> LENGTH TMP_813
TMP_814(bool) = REF_579 == 34
TMP_815(None) = SOLIDITY_CALL require(bool)(TMP_814)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
hwcAddress[msg.sender].aWithdraw = _a

IRs:
REF_580(HWCIntegration.HWCInfo) -> hwcAddress[msg.sender]
REF_581(string) -> REF_580.aWithdraw
REF_581(string) (->hwcAddress) := _a(string)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
hwcAddress[msg.sender].index1 == 0

IRs:
REF_582(HWCIntegration.HWCInfo) -> hwcAddress[msg.sender]
REF_583(uint256) -> REF_582.index1
TMP_816(bool) = REF_583 == 0
CONDITION TMP_816"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
hwcAddress[msg.sender].index1 = hwcAddressList.push(msg.sender)

IRs:
REF_584(HWCIntegration.HWCInfo) -> hwcAddress[msg.sender]
REF_585(uint256) -> REF_584.index1
REF_587 -> LENGTH hwcAddressList
TMP_818(uint256) := REF_587(uint256)
TMP_819(uint256) = TMP_818 + 1
REF_587(uint256) (->hwcAddressList) := TMP_819(uint256)
REF_588(address) -> hwcAddressList[TMP_818]
REF_588(address) (->hwcAddressList) := msg.sender(address)
REF_585(uint256) (->hwcAddress) := TMP_817(None)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
NewHWCRegister(msg.sender,,_a)

IRs:
Emit NewHWCRegister(msg.sender,,_a)"];
}
// Function: 9994.sol-HWCIntegration-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_777(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_778(bool) = TMP_777 == _from
TMP_779(None) = SOLIDITY_CALL require(bool)(TMP_778)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_561(uint256) -> ownedTokensCount[_from]
REF_562(uint256) -> ownedTokensCount[_from]
TMP_780(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_562', '1'] 
REF_561(uint256) (->ownedTokensCount) := TMP_780(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_564(address) -> tokenOwner[_tokenId]
TMP_781 = CONVERT 0 to address
REF_564(address) (->tokenOwner) := TMP_781(address)"];
}
// Function: 9994.sol-HWCIntegration-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newAdmin != address(0))

IRs:
TMP_796 = CONVERT 0 to address
TMP_797(bool) = newAdmin != TMP_796
TMP_798(None) = SOLIDITY_CALL require(bool)(TMP_797)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = newAdmin

IRs:
admin(address) := newAdmin(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9994.sol-HWCIntegration-setBasePrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_val > 0)

IRs:
TMP_690(bool) = _val > 0
TMP_691(None) = SOLIDITY_CALL require(bool)(TMP_690)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
basePrice = _val

IRs:
basePrice(uint256) := _val(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
3->1;
}
// Function: 9994.sol-HWCIntegration-setCourse(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
cHWCtoEth = _val

IRs:
cHWCtoEth(uint256) := _val(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
2->1;
}
// Function: 9994.sol-HWCIntegration-setGameCloneFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_val <= 10000)

IRs:
TMP_693(bool) = _val <= 10000
TMP_694(None) = SOLIDITY_CALL require(bool)(TMP_693)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameCloneFee = _val

IRs:
gameCloneFee(uint256) := _val(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
3->1;
}
// Function: 9994.sol-HWCIntegration-setHWCDeposit(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
hwcAddress[_user].deposit = _val

IRs:
REF_598(HWCIntegration.HWCInfo) -> hwcAddress[_user]
REF_599(uint256) -> REF_598.deposit
REF_599(uint256) (->hwcAddress) := _val(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
2->1;
}
// Function: 9994.sol-HWCIntegration-setNewAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_782 = CONVERT this to address
TMP_783(uint256) = SOLIDITY_CALL balance(address)(TMP_782)
Transfer dest:owner value:TMP_783"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newContractAddress = _v2Address

IRs:
newContractAddress(address) := _v2Address(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 9994.sol-HWCIntegration-setPriceFactor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
priceFactor = _val

IRs:
priceFactor(uint256) := _val(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
2->1;
}
// Function: 9994.sol-HWCIntegration-setPrizeFundFactor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_val <= 10000)

IRs:
TMP_696(bool) = _val <= 10000
TMP_697(None) = SOLIDITY_CALL require(bool)(TMP_696)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
prizeFundFactor = _val

IRs:
prizeFundFactor(uint256) := _val(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
3->1;
}
// Function: 9994.sol-HWCIntegration-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
prizeFund = 0

IRs:
prizeFund(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
basePrice = 21000000000000000

IRs:
basePrice(uint256) := 21000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
gameCloneFee = 7000

IRs:
gameCloneFee(uint256) := 7000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
priceFactor = 10000

IRs:
priceFactor(uint256) := 10000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
prizeFundFactor = 5000

IRs:
prizeFundFactor(uint256) := 5000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
cHWCtoEth = 0

IRs:
cHWCtoEth(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
prizeFundHWC = 0

IRs:
prizeFundHWC(uint256) := 0(uint256)"];
}
// Function: 9994.sol-HWCIntegration-symbol()
digraph{
}
// Function: 9994.sol-HWCIntegration-toForecastData(uint8,uint8,bool,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
forecastData = forecastData << 8 | _goalA

IRs:
TMP_704(uint256) = forecastData << 8
TMP_705(uint256) = TMP_704 | _goalA
forecastData(uint256) := TMP_705(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
forecastData = forecastData << 8 | _goalB

IRs:
TMP_706(uint256) = forecastData << 8
TMP_707(uint256) = TMP_706 | _goalB
forecastData(uint256) := TMP_707(uint256)"];
3->9;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
forecastData = forecastData << 8 | odds8

IRs:
TMP_708(uint256) = forecastData << 8
TMP_709(uint256) = TMP_708 | odds8
forecastData(uint256) := TMP_709(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
forecastData = forecastData << 8 | _shotA

IRs:
TMP_710(uint256) = forecastData << 8
TMP_711(uint256) = TMP_710 | _shotA
forecastData(uint256) := TMP_711(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
forecastData = forecastData << 8 | _shotB

IRs:
TMP_712(uint256) = forecastData << 8
TMP_713(uint256) = TMP_712 | _shotB
forecastData(uint256) := TMP_713(uint256)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
forecastData

IRs:
RETURN forecastData"];
9[label="Node Type: IF 9

EXPRESSION:
_odds

IRs:
CONDITION _odds"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
odds8 = 1

IRs:
odds8(uint8) := 1(uint256)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
odds8 = 0

IRs:
odds8(uint8) := 0(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->5;
}
// Function: 9994.sol-HWCIntegration-tokenByIndex(uint256)
digraph{
}
// Function: 9994.sol-HWCIntegration-tokenInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
createBlockNumber = tokens[_tokenId].createBlockNumber

IRs:
REF_384(BaseGame.Token) -> tokens[_tokenId]
REF_385(uint256) -> REF_384.createBlockNumber
createBlockNumber(uint256) := REF_385(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
parentId = tokens[_tokenId].parentId

IRs:
REF_386(BaseGame.Token) -> tokens[_tokenId]
REF_387(uint256) -> REF_386.parentId
parentId(uint256) := REF_387(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
price = calculateTokenPrice(_tokenId)

IRs:
TMP_606(uint256) = INTERNAL_CALL, BaseGameLogic.calculateTokenPrice(uint256)(_tokenId)
price(uint256) := TMP_606(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
forecast = getForecastCount(_tokenId,block.number,false)

IRs:
TMP_607(uint256) = INTERNAL_CALL, BaseGameLogic.getForecastCount(uint256,uint256,bool)(_tokenId,block.number,False)
forecast(uint256) := TMP_607(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
score = getScore(_tokenId)

IRs:
TMP_608(uint256) = INTERNAL_CALL, BaseGameLogic.getScore(uint256)(_tokenId)
score(uint256) := TMP_608(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(createBlockNumber,parentId,forecast,score,price)

IRs:
RETURN createBlockNumber,parentId,forecast,score,price"];
}
// Function: 9994.sol-HWCIntegration-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 9994.sol-HWCIntegration-tokensOfOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenCount = balanceOf(_owner)

IRs:
TMP_588(uint256) = INTERNAL_CALL, ERC721BasicToken.balanceOf(address)(_owner)
tokenCount(uint256) := TMP_588(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenCount == 0

IRs:
TMP_589(bool) = tokenCount == 0
CONDITION TMP_589"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
new uint256[](0)

IRs:
TMP_591(uint256[])  = new uint256[](0)
RETURN TMP_591"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
result = new uint256[](tokenCount)

IRs:
TMP_593(uint256[])  = new uint256[](tokenCount)
result(uint256[]) = ['TMP_593(uint256[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
totalToken = totalSupply()

IRs:
TMP_594(uint256) = INTERNAL_CALL, ERC721Token.totalSupply()()
totalToken(uint256) := TMP_594(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
resultIndex = 0

IRs:
resultIndex(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->17;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_tokenId = 1

IRs:
_tokenId(uint256) := 1(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
_tokenId <= totalToken

IRs:
TMP_595(bool) = _tokenId <= totalToken
CONDITION TMP_595"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
tokenOwner[_tokenId] == _owner

IRs:
REF_354(address) -> tokenOwner[_tokenId]
TMP_596(bool) = REF_354 == _owner
CONDITION TMP_596"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
result[resultIndex] = _tokenId

IRs:
REF_355(uint256) -> result[resultIndex]
REF_355(uint256) (->result) := _tokenId(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
resultIndex ++

IRs:
TMP_597(uint256) := resultIndex(uint256)
resultIndex(uint256) = resultIndex + 1"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_tokenId ++

IRs:
TMP_598(uint256) := _tokenId(uint256)
_tokenId(uint256) = _tokenId + 1"];
16->11;
17[label="Node Type: RETURN 17

EXPRESSION:
result

IRs:
RETURN result"];
19[label="Node Type: RETURN 19

EXPRESSION:
ownerTokens

IRs:
RETURN ownerTokens"];
}
// Function: 9994.sol-HWCIntegration-totalSupply()
digraph{
}
// Function: 9994.sol-HWCIntegration-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_791 = CONVERT 0 to address
TMP_792(bool) = newOwner != TMP_791
TMP_793(None) = SOLIDITY_CALL require(bool)(TMP_792)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9994.sol-HWCIntegration-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
3->1;
}
// Function: 9994.sol-HWCIntegration-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_843 = UnaryType.BANG paused 
TMP_844(None) = SOLIDITY_CALL require(bool)(TMP_843)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-HWCIntegration-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_845(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
}
// Function: 9994.sol-Ownable-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin || msg.sender == owner)

IRs:
TMP_24(bool) = msg.sender == admin
TMP_25(bool) = msg.sender == owner
TMP_26(bool) = TMP_24 || TMP_25
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_22(bool) = msg.sender == owner
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-Ownable-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newAdmin != address(0))

IRs:
TMP_18 = CONVERT 0 to address
TMP_19(bool) = newAdmin != TMP_18
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = newAdmin

IRs:
admin(address) := newAdmin(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9994.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = newOwner != TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9994.sol-Pausable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
}
// Function: 9994.sol-Pausable-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin || msg.sender == owner)

IRs:
TMP_43(bool) = msg.sender == admin
TMP_44(bool) = msg.sender == owner
TMP_45(bool) = TMP_43 || TMP_44
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_41(bool) = msg.sender == owner
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 9994.sol-Pausable-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newAdmin != address(0))

IRs:
TMP_33 = CONVERT 0 to address
TMP_34(bool) = newAdmin != TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = newAdmin

IRs:
admin(address) := newAdmin(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9994.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
}
// Function: 9994.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = newOwner != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9994.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
3->1;
}
// Function: 9994.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_47 = UnaryType.BANG paused 
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_49(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9994.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_5(uint256) = a / b
RETURN TMP_5"];
}
// Function: 9994.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 9994.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 9994.sol-SolutionGame-_addToFund(uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
isAll

IRs:
CONDITION isAll"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
prizeFund = prizeFund.add(_val)

IRs:
TMP_893(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['prizeFund', '_val'] 
prizeFund(uint256) := TMP_893(uint256)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
prizeFund = prizeFund.add(_val.mul(prizeFundFactor).div(10000))

IRs:
TMP_894(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_val', 'prizeFundFactor'] 
TMP_895(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_894', '10000'] 
TMP_896(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['prizeFund', 'TMP_895'] 
prizeFund(uint256) := TMP_896(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->1;
}
// Function: 9994.sol-SolutionGame-_addToFundHWC(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
prizeFundHWC = prizeFundHWC.add(_val.mul(prizeFundFactor).div(10000))

IRs:
TMP_853(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_val', 'prizeFundFactor'] 
TMP_854(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_853', '10000'] 
TMP_855(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['prizeFundHWC', 'TMP_854'] 
prizeFundHWC(uint256) := TMP_855(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
2->1;
}
// Function: 9994.sol-SolutionGame-_createForecast(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tokenId < tokens.length)

IRs:
REF_823 -> LENGTH tokens
TMP_1060(bool) = _tokenId < REF_823
TMP_1061(None) = SOLIDITY_CALL require(bool)(TMP_1060)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newForecast = Forecast({gameId:_gameId,forecastBlockNumber:block.number,forecastData:_forecastData})

IRs:
TMP_1062(BaseGame.Forecast) = new Forecast(_gameId,block.number,_forecastData)
newForecast(BaseGame.Forecast) := TMP_1062(BaseGame.Forecast)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
newForecastId = forecasts.push(newForecast) - 1

IRs:
REF_825 -> LENGTH forecasts
TMP_1065(uint256) := REF_825(uint256)
TMP_1066(uint256) = TMP_1065 + 1
REF_825(uint256) (->forecasts) := TMP_1066(uint256)
REF_826(BaseGame.Forecast) -> forecasts[TMP_1065]
REF_826(BaseGame.Forecast) (->forecasts) := newForecast(BaseGame.Forecast)
TMP_1064(None) = TMP_1063 - 1
newForecastId(uint256) := TMP_1064(None)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
forecastToToken[newForecastId] = _tokenId

IRs:
REF_827(uint256) -> forecastToToken[newForecastId]
REF_827(uint256) (->forecastToToken) := _tokenId(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenForecasts[_tokenId].push(newForecastId)

IRs:
REF_828(uint256[]) -> tokenForecasts[_tokenId]
REF_830 -> LENGTH REF_828
TMP_1068(uint256) := REF_830(uint256)
TMP_1069(uint256) = TMP_1068 + 1
REF_830(uint256) (->tokenForecasts) := TMP_1069(uint256)
REF_831(uint256) -> REF_828[TMP_1068]
REF_831(uint256) (->tokenForecasts) := newForecastId(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
games[_gameId].forecasts.push(newForecastId)

IRs:
REF_832(BaseGame.Game) -> games[_gameId]
REF_833(uint256[]) -> REF_832.forecasts
REF_835 -> LENGTH REF_833
TMP_1071(uint256) := REF_835(uint256)
TMP_1072(uint256) = TMP_1071 + 1
REF_835(uint256) (->games) := TMP_1072(uint256)
REF_836(uint256) -> REF_833[TMP_1071]
REF_836(uint256) (->games) := newForecastId(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
NewForecast(tokenOwner[_tokenId],_tokenId,newForecastId,_gameId,_forecastData)

IRs:
REF_837(address) -> tokenOwner[_tokenId]
Emit NewForecast(REF_837,_tokenId,newForecastId,_gameId,_forecastData)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
newForecastId

IRs:
RETURN newForecastId"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
9->1;
}
// Function: 9994.sol-SolutionGame-_createToken(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_token = Token({createBlockNumber:block.number,parentId:_parentId})

IRs:
TMP_1050(BaseGame.Token) = new Token(block.number,_parentId)
_token(BaseGame.Token) := TMP_1050(BaseGame.Token)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
newTokenId = tokens.push(_token) - 1

IRs:
REF_819 -> LENGTH tokens
TMP_1053(uint256) := REF_819(uint256)
TMP_1054(uint256) = TMP_1053 + 1
REF_819(uint256) (->tokens) := TMP_1054(uint256)
REF_820(BaseGame.Token) -> tokens[TMP_1053]
REF_820(BaseGame.Token) (->tokens) := _token(BaseGame.Token)
TMP_1052(None) = TMP_1051 - 1
newTokenId(uint256) := TMP_1052(None)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
NewAccount(_owner,newTokenId,uint256(_token.parentId),uint256(_token.createBlockNumber))

IRs:
REF_821(uint256) -> _token.parentId
TMP_1055 = CONVERT REF_821 to uint256
REF_822(uint256) -> _token.createBlockNumber
TMP_1056 = CONVERT REF_822 to uint256
Emit NewAccount(_owner,newTokenId,TMP_1055,TMP_1056)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_mint(_owner,newTokenId)

IRs:
INTERNAL_CALL, ERC721Token._mint(address,uint256)(_owner,newTokenId)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
newTokenId

IRs:
RETURN newTokenId"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
6->1;
}
// Function: 9994.sol-SolutionGame-_mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_1102 = CONVERT 0 to address
TMP_1103(bool) = _to != TMP_1102
TMP_1104(None) = SOLIDITY_CALL require(bool)(TMP_1103)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addTokenTo(_to,_tokenId)

IRs:
INTERNAL_CALL, ERC721Token.addTokenTo(address,uint256)(_to,_tokenId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0),_to,_tokenId)

IRs:
TMP_1106 = CONVERT 0 to address
Emit Transfer(TMP_1106,_to,_tokenId)"];
}
// Function: 9994.sol-SolutionGame-addTokenTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenOwner[_tokenId] == address(0))

IRs:
REF_871(address) -> tokenOwner[_tokenId]
TMP_1108 = CONVERT 0 to address
TMP_1109(bool) = REF_871 == TMP_1108
TMP_1110(None) = SOLIDITY_CALL require(bool)(TMP_1109)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenOwner[_tokenId] = _to

IRs:
REF_872(address) -> tokenOwner[_tokenId]
REF_872(address) (->tokenOwner) := _to(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownedTokensCount[_to] = ownedTokensCount[_to].add(1)

IRs:
REF_873(uint256) -> ownedTokensCount[_to]
REF_874(uint256) -> ownedTokensCount[_to]
TMP_1111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_874', '1'] 
REF_873(uint256) (->ownedTokensCount) := TMP_1111(uint256)"];
}
// Function: 9994.sol-SolutionGame-balanceOf(address)
digraph{
}
// Function: 9994.sol-SolutionGame-calculateScore(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.timestamp > games[_gameId].gameDate)

IRs:
REF_767(BaseGame.Game) -> games[_gameId]
REF_768(uint64) -> REF_767.gameDate
TMP_985(bool) = block.timestamp > REF_768
TMP_986(None) = SOLIDITY_CALL require(bool)(TMP_985)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_shotB = (d & 0xff)

IRs:
TMP_987(uint256) = d & 255
_shotB(uint256) := TMP_987(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
d = d >> 8

IRs:
TMP_988(uint256) = d >> 8
d(uint256) := TMP_988(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_shotA = (d & 0xff)

IRs:
TMP_989(uint256) = d & 255
_shotA(uint256) := TMP_989(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
d = d >> 8

IRs:
TMP_990(uint256) = d >> 8
d(uint256) := TMP_990(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
odds8 = (d & 0xff)

IRs:
TMP_991(uint256) = d & 255
odds8(uint256) := TMP_991(uint256)"];
6->44;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
d = d >> 8

IRs:
TMP_992(uint256) = d >> 8
d(uint256) := TMP_992(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_goalB = (d & 0xff)

IRs:
TMP_993(uint256) = d & 255
_goalB(uint256) := TMP_993(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
d = d >> 8

IRs:
TMP_994(uint256) = d >> 8
d(uint256) := TMP_994(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_goalA = (d & 0xff)

IRs:
TMP_995(uint256) = d & 255
_goalA(uint256) := TMP_995(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
d = d >> 8

IRs:
TMP_996(uint256) = d >> 8
d(uint256) := TMP_996(uint256)"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
cGame = games[_gameId]

IRs:
REF_769(BaseGame.Game) -> games[_gameId]
cGame(BaseGame.Game) := REF_769(BaseGame.Game)"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
_score = 0

IRs:
_score(uint256) := 0(uint256)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
isDoubleScore = true

IRs:
isDoubleScore(bool) := True(bool)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
cGame.shotA == _shotA

IRs:
REF_770(uint256) -> cGame.shotA
TMP_997(bool) = REF_770 == _shotA
CONDITION TMP_997"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_score = _score.add(1)

IRs:
TMP_998(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '1'] 
_score(uint256) := TMP_998(uint256)"];
17->19;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
cGame.shotB == _shotB

IRs:
REF_772(uint256) -> cGame.shotB
TMP_999(bool) = REF_772 == _shotB
CONDITION TMP_999"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_score = _score.add(1)

IRs:
TMP_1000(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '1'] 
_score(uint256) := TMP_1000(uint256)"];
21->23;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
cGame.odds == _odds

IRs:
REF_774(bool) -> cGame.odds
TMP_1001(bool) = REF_774 == _odds
CONDITION TMP_1001"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_score = _score.add(1)

IRs:
TMP_1002(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '1'] 
_score(uint256) := TMP_1002(uint256)"];
25->27;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
(cGame.goalA + cGame.goalB) == (_goalA + _goalB)

IRs:
REF_776(uint256) -> cGame.goalA
REF_777(uint256) -> cGame.goalB
TMP_1003(uint256) = REF_776 + REF_777
TMP_1004(uint256) = _goalA + _goalB
TMP_1005(bool) = TMP_1003 == TMP_1004
CONDITION TMP_1005"];
28->29[label="True"];
28->30[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_score = _score.add(2)

IRs:
TMP_1006(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '2'] 
_score(uint256) := TMP_1006(uint256)"];
29->31;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
30->31;
31[label="Node Type: END_IF 31
"];
31->32;
32[label="Node Type: IF 32

EXPRESSION:
cGame.goalA == _goalA && cGame.goalB == _goalB

IRs:
REF_779(uint256) -> cGame.goalA
TMP_1007(bool) = REF_779 == _goalA
REF_780(uint256) -> cGame.goalB
TMP_1008(bool) = REF_780 == _goalB
TMP_1009(bool) = TMP_1007 && TMP_1008
CONDITION TMP_1009"];
32->33[label="True"];
32->34[label="False"];
33[label="Node Type: EXPRESSION 33

EXPRESSION:
_score = _score.add(3)

IRs:
TMP_1010(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '3'] 
_score(uint256) := TMP_1010(uint256)"];
33->35;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: IF 36

EXPRESSION:
((cGame.goalA > cGame.goalB) && (_goalA > _goalB)) || ((cGame.goalA < cGame.goalB) && (_goalA < _goalB)) || ((cGame.goalA == cGame.goalB) && (_goalA == _goalB))

IRs:
REF_782(uint256) -> cGame.goalA
REF_783(uint256) -> cGame.goalB
TMP_1011(bool) = REF_782 > REF_783
TMP_1012(bool) = _goalA > _goalB
TMP_1013(bool) = TMP_1011 && TMP_1012
REF_784(uint256) -> cGame.goalA
REF_785(uint256) -> cGame.goalB
TMP_1014(bool) = REF_784 < REF_785
TMP_1015(bool) = _goalA < _goalB
TMP_1016(bool) = TMP_1014 && TMP_1015
TMP_1017(bool) = TMP_1013 || TMP_1016
REF_786(uint256) -> cGame.goalA
REF_787(uint256) -> cGame.goalB
TMP_1018(bool) = REF_786 == REF_787
TMP_1019(bool) = _goalA == _goalB
TMP_1020(bool) = TMP_1018 && TMP_1019
TMP_1021(bool) = TMP_1017 || TMP_1020
CONDITION TMP_1021"];
36->37[label="True"];
36->38[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_score = _score.add(1)

IRs:
TMP_1022(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_score', '1'] 
_score(uint256) := TMP_1022(uint256)"];
37->39;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
isDoubleScore = false

IRs:
isDoubleScore(bool) := False(bool)"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: IF 40

EXPRESSION:
isDoubleScore

IRs:
CONDITION isDoubleScore"];
40->41[label="True"];
40->42[label="False"];
41[label="Node Type: EXPRESSION 41

EXPRESSION:
_score = _score.mul(2)

IRs:
TMP_1023(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_score', '2'] 
_score(uint256) := TMP_1023(uint256)"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: RETURN 43

EXPRESSION:
_score

IRs:
RETURN _score"];
44[label="Node Type: IF 44

EXPRESSION:
odds8 == 1

IRs:
TMP_1024(bool) = odds8 == 1
CONDITION TMP_1024"];
44->45[label="True"];
44->46[label="False"];
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_odds = true

IRs:
_odds(bool) := True(bool)"];
45->47;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
_odds = false

IRs:
_odds(bool) := False(bool)"];
46->47;
47[label="Node Type: END_IF 47
"];
47->8;
}
// Function: 9994.sol-SolutionGame-calculateTokenPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_944(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_945(None) = SOLIDITY_CALL require(bool)(TMP_944)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
forecastCount = getForecastCount(_tokenId,block.number,true)

IRs:
TMP_946(uint256) = INTERNAL_CALL, BaseGameLogic.getForecastCount(uint256,uint256,bool)(_tokenId,block.number,True)
forecastCount(uint256) := TMP_946(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(forecastCount.add(1)).mul(basePrice).mul(priceFactor).div(10000)

IRs:
TMP_947(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['forecastCount', '1'] 
TMP_948(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_947', 'basePrice'] 
TMP_949(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_948', 'priceFactor'] 
TMP_950(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_949', '10000'] 
RETURN TMP_950"];
}
// Function: 9994.sol-SolutionGame-checkIsWinner(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
place = 0

IRs:
place(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
score = getScore(_tokenId)

IRs:
TMP_1168(uint256) = INTERNAL_CALL, BaseGameLogic.getScore(uint256)(_tokenId)
score(uint256) := TMP_1168(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->14;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
index = 1

IRs:
index(uint256) := 1(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
index <= countWinnerPlace

IRs:
TMP_1169(bool) = index <= countWinnerPlace
CONDITION TMP_1169"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
score == scoreByPlace[index]

IRs:
REF_896(uint256) -> scoreByPlace[index]
TMP_1170(bool) = score == REF_896
CONDITION TMP_1170"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
place = index

IRs:
place(uint256) := index(uint256)"];
8->9;
9[label="Node Type: BREAK 9
"];
9->4;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
index ++

IRs:
TMP_1171(uint256) := index(uint256)
index(uint256) = index + 1"];
11->6;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.onlyOwnerOf(uint256)(_tokenId)"];
13->1;
14[label="Node Type: RETURN 14

EXPRESSION:
place

IRs:
RETURN place"];
}
// Function: 9994.sol-SolutionGame-cloneAccount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_903(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_904(None) = SOLIDITY_CALL require(bool)(TMP_903)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokenPrice = calculateTokenPrice(_tokenId)

IRs:
TMP_905(uint256) = INTERNAL_CALL, BaseGameLogic.calculateTokenPrice(uint256)(_tokenId)
tokenPrice(uint256) := TMP_905(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value >= tokenPrice)

IRs:
TMP_906(bool) = msg.value >= tokenPrice
TMP_907(None) = SOLIDITY_CALL require(bool)(TMP_906)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
newToken = _createToken(_tokenId,msg.sender)

IRs:
TMP_908(uint256) = INTERNAL_CALL, BaseGame._createToken(uint256,address)(_tokenId,msg.sender)
newToken(uint256) := TMP_908(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
gameFee = tokenPrice.mul(gameCloneFee).div(10000)

IRs:
TMP_909(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokenPrice', 'gameCloneFee'] 
TMP_910(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_909', '10000'] 
gameFee(uint256) := TMP_910(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_addToFund(gameFee,false)

IRs:
INTERNAL_CALL, BaseGameLogic._addToFund(uint256,bool)(gameFee,False)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
ownerProceed = tokenPrice.sub(gameFee)

IRs:
TMP_912(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokenPrice', 'gameFee'] 
ownerProceed(uint256) := TMP_912(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
tokenOwnerAddress = tokenOwner[_tokenId]

IRs:
REF_665(address) -> tokenOwner[_tokenId]
tokenOwnerAddress(address) := REF_665(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
tokenOwnerAddress.transfer(ownerProceed)

IRs:
Transfer dest:tokenOwnerAddress value:ownerProceed"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
newToken

IRs:
RETURN newToken"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
11->1;
}
// Function: 9994.sol-SolutionGame-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
}
// Function: 9994.sol-SolutionGame-constructor(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
countWinnerPlace = 0

IRs:
countWinnerPlace(uint256) := 0(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
HWCIntegration(_name,_symbol)

IRs:
INTERNAL_CALL, HWCIntegration.constructor(string,string)(_name,_symbol)"];
2->1;
}
// Function: 9994.sol-SolutionGame-createAccount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= basePrice)

IRs:
TMP_898(bool) = msg.value >= basePrice
TMP_899(None) = SOLIDITY_CALL require(bool)(TMP_898)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_addToFund(msg.value,false)

IRs:
INTERNAL_CALL, BaseGameLogic._addToFund(uint256,bool)(msg.value,False)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_createToken(0,msg.sender)

IRs:
TMP_901(uint256) = INTERNAL_CALL, BaseGame._createToken(uint256,address)(0,msg.sender)
RETURN TMP_901"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 9994.sol-SolutionGame-createForecast(uint256,uint256,uint8,uint8,bool,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_915(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_916(None) = SOLIDITY_CALL require(bool)(TMP_915)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(block.timestamp < games[_gameId].gameDate)

IRs:
REF_667(BaseGame.Game) -> games[_gameId]
REF_668(uint64) -> REF_667.gameDate
TMP_917(bool) = block.timestamp < REF_668
TMP_918(None) = SOLIDITY_CALL require(bool)(TMP_917)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_forecastData = toForecastData(_goalA,_goalB,_odds,_shotA,_shotB)

IRs:
TMP_919(uint256) = INTERNAL_CALL, BaseGameLogic.toForecastData(uint8,uint8,bool,uint8,uint8)(_goalA,_goalB,_odds,_shotA,_shotB)
_forecastData(uint256) := TMP_919(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_createForecast(_tokenId,_gameId,_forecastData)

IRs:
TMP_920(uint256) = INTERNAL_CALL, BaseGame._createForecast(uint256,uint256,uint256)(_tokenId,_gameId,_forecastData)
RETURN TMP_920"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.onlyOwnerOf(uint256)(_tokenId)"];
6->1;
}
// Function: 9994.sol-SolutionGame-createTokenByHWC(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenPrice = basePrice.div(1e10).mul(cHWCtoEth)

IRs:
TMP_876(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['basePrice', '10000000000'] 
TMP_877(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_876', 'cHWCtoEth'] 
tokenPrice(uint256) := TMP_877(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_parentId > 0

IRs:
TMP_878(bool) = _parentId > 0
CONDITION TMP_878"];
2->3[label="True"];
2->10[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenPrice = calculateTokenPrice(_parentId)

IRs:
TMP_879(uint256) = INTERNAL_CALL, BaseGameLogic.calculateTokenPrice(uint256)(_parentId)
tokenPrice(uint256) := TMP_879(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenPrice = tokenPrice.div(1e10).mul(cHWCtoEth)

IRs:
TMP_880(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['tokenPrice', '10000000000'] 
TMP_881(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_880', 'cHWCtoEth'] 
tokenPrice(uint256) := TMP_881(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
gameFee = tokenPrice.mul(gameCloneFee).div(10000)

IRs:
TMP_882(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokenPrice', 'gameCloneFee'] 
TMP_883(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_882', '10000'] 
gameFee(uint256) := TMP_883(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_addToFundHWC(gameFee)

IRs:
INTERNAL_CALL, HWCIntegration._addToFundHWC(uint256)(gameFee)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
ownerProceed = tokenPrice.sub(gameFee)

IRs:
TMP_885(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokenPrice', 'gameFee'] 
ownerProceed(uint256) := TMP_885(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
tokenOwnerAddress = tokenOwner[_parentId]

IRs:
REF_653(address) -> tokenOwner[_parentId]
tokenOwnerAddress(address) := REF_653(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
hwcAddress[tokenOwnerAddress].deposit = hwcAddress[tokenOwnerAddress].deposit + ownerProceed

IRs:
REF_654(HWCIntegration.HWCInfo) -> hwcAddress[tokenOwnerAddress]
REF_655(uint256) -> REF_654.deposit
REF_656(HWCIntegration.HWCInfo) -> hwcAddress[tokenOwnerAddress]
REF_657(uint256) -> REF_656.deposit
TMP_886(uint256) = REF_657 + ownerProceed
REF_655(uint256) (->hwcAddress) := TMP_886(uint256)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_addToFundHWC(tokenPrice)

IRs:
INTERNAL_CALL, HWCIntegration._addToFundHWC(uint256)(tokenPrice)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
_createToken(_parentId,_userTo)

IRs:
TMP_888(uint256) = INTERNAL_CALL, BaseGame._createToken(uint256,address)(_parentId,_userTo)
RETURN TMP_888"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
14->1;
}
// Function: 9994.sol-SolutionGame-exists(uint256)
digraph{
}
// Function: 9994.sol-SolutionGame-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_addToFund(msg.value,true)

IRs:
INTERNAL_CALL, BaseGameLogic._addToFund(uint256,bool)(msg.value,True)"];
}
// Function: 9994.sol-SolutionGame-forecastInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameId = forecasts[_fId].gameId

IRs:
REF_695(BaseGame.Forecast) -> forecasts[_fId]
REF_696(uint256) -> REF_695.gameId
gameId(uint256) := REF_696(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
f = forecasts[_fId].forecastData

IRs:
REF_697(BaseGame.Forecast) -> forecasts[_fId]
REF_698(uint256) -> REF_697.forecastData
f(uint256) := REF_698(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(gameId,f)

IRs:
RETURN gameId,f"];
}
// Function: 9994.sol-SolutionGame-forecastOfToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
forecastCount = tokenForecasts[_tokenId].length

IRs:
REF_671(uint256[]) -> tokenForecasts[_tokenId]
REF_672 -> LENGTH REF_671
forecastCount(uint256) := REF_672(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
forecastCount == 0

IRs:
TMP_934(bool) = forecastCount == 0
CONDITION TMP_934"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
new uint256[](0)

IRs:
TMP_936(uint256[])  = new uint256[](0)
RETURN TMP_936"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
result = new uint256[](forecastCount)

IRs:
TMP_938(uint256[])  = new uint256[](forecastCount)
result(uint256[]) = ['TMP_938(uint256[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
resultIndex = 0

IRs:
resultIndex(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
resultIndex < forecastCount

IRs:
TMP_939(bool) = resultIndex < forecastCount
CONDITION TMP_939"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
result[resultIndex] = tokenForecasts[_tokenId][resultIndex]

IRs:
REF_673(uint256) -> result[resultIndex]
REF_674(uint256[]) -> tokenForecasts[_tokenId]
REF_675(uint256) -> REF_674[resultIndex]
REF_673(uint256) (->result) := REF_675(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
resultIndex ++

IRs:
TMP_940(uint256) := resultIndex(uint256)
resultIndex(uint256) = resultIndex + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
result

IRs:
RETURN result"];
}
// Function: 9994.sol-SolutionGame-gameEdit(uint256,uint64,BaseGame.Teams,BaseGame.Teams)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
games[_gameId].gameDate = gameDate

IRs:
REF_790(BaseGame.Game) -> games[_gameId]
REF_791(uint64) -> REF_790.gameDate
REF_791(uint64) (->games) := gameDate(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
games[_gameId].teamA = teamA

IRs:
REF_792(BaseGame.Game) -> games[_gameId]
REF_793(BaseGame.Teams) -> REF_792.teamA
REF_793(BaseGame.Teams) (->games) := teamA(BaseGame.Teams)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
games[_gameId].teamB = teamB

IRs:
REF_794(BaseGame.Game) -> games[_gameId]
REF_795(BaseGame.Teams) -> REF_794.teamB
REF_795(BaseGame.Teams) (->games) := teamB(BaseGame.Teams)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
GameChanged(_gameId,games[_gameId].gameDate,games[_gameId].teamA,games[_gameId].teamB,0,0,true,0,0)

IRs:
REF_796(BaseGame.Game) -> games[_gameId]
REF_797(uint64) -> REF_796.gameDate
REF_798(BaseGame.Game) -> games[_gameId]
REF_799(BaseGame.Teams) -> REF_798.teamA
REF_800(BaseGame.Game) -> games[_gameId]
REF_801(BaseGame.Teams) -> REF_800.teamB
Emit GameChanged(_gameId,REF_797,REF_799,REF_801,0,0,True,0,0)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
5->1;
}
// Function: 9994.sol-SolutionGame-gameInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameDate = games[_gameId].gameDate

IRs:
REF_676(BaseGame.Game) -> games[_gameId]
REF_677(uint64) -> REF_676.gameDate
gameDate(uint64) := REF_677(uint64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
teamA = games[_gameId].teamA

IRs:
REF_678(BaseGame.Game) -> games[_gameId]
REF_679(BaseGame.Teams) -> REF_678.teamA
teamA(BaseGame.Teams) := REF_679(BaseGame.Teams)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
teamB = games[_gameId].teamB

IRs:
REF_680(BaseGame.Game) -> games[_gameId]
REF_681(BaseGame.Teams) -> REF_680.teamB
teamB(BaseGame.Teams) := REF_681(BaseGame.Teams)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
goalA = games[_gameId].goalA

IRs:
REF_682(BaseGame.Game) -> games[_gameId]
REF_683(uint256) -> REF_682.goalA
goalA(uint256) := REF_683(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gaolB = games[_gameId].goalB

IRs:
REF_684(BaseGame.Game) -> games[_gameId]
REF_685(uint256) -> REF_684.goalB
gaolB(uint256) := REF_685(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
odds = games[_gameId].odds

IRs:
REF_686(BaseGame.Game) -> games[_gameId]
REF_687(bool) -> REF_686.odds
odds(bool) := REF_687(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
shotA = games[_gameId].shotA

IRs:
REF_688(BaseGame.Game) -> games[_gameId]
REF_689(uint256) -> REF_688.shotA
shotA(uint256) := REF_689(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
shotB = games[_gameId].shotB

IRs:
REF_690(BaseGame.Game) -> games[_gameId]
REF_691(uint256) -> REF_690.shotB
shotB(uint256) := REF_691(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
forecastCount = games[_gameId].forecasts.length

IRs:
REF_692(BaseGame.Game) -> games[_gameId]
REF_693(uint256[]) -> REF_692.forecasts
REF_694 -> LENGTH REF_693
forecastCount(uint256) := REF_694(uint256)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
(gameDate,teamA,teamB,goalA,gaolB,odds,shotA,shotB,forecastCount)

IRs:
RETURN gameDate,teamA,teamB,goalA,gaolB,odds,shotA,shotB,forecastCount"];
}
// Function: 9994.sol-SolutionGame-gameResult(uint256,uint256,uint256,bool,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
games[_gameId].goalA = goalA

IRs:
REF_802(BaseGame.Game) -> games[_gameId]
REF_803(uint256) -> REF_802.goalA
REF_803(uint256) (->games) := goalA(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
games[_gameId].goalB = goalB

IRs:
REF_804(BaseGame.Game) -> games[_gameId]
REF_805(uint256) -> REF_804.goalB
REF_805(uint256) (->games) := goalB(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
games[_gameId].odds = odds

IRs:
REF_806(BaseGame.Game) -> games[_gameId]
REF_807(bool) -> REF_806.odds
REF_807(bool) (->games) := odds(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
games[_gameId].shotA = shotA

IRs:
REF_808(BaseGame.Game) -> games[_gameId]
REF_809(uint256) -> REF_808.shotA
REF_809(uint256) (->games) := shotA(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
games[_gameId].shotB = shotB

IRs:
REF_810(BaseGame.Game) -> games[_gameId]
REF_811(uint256) -> REF_810.shotB
REF_811(uint256) (->games) := shotB(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
GameChanged(_gameId,games[_gameId].gameDate,games[_gameId].teamA,games[_gameId].teamB,goalA,goalB,odds,shotA,shotB)

IRs:
REF_812(BaseGame.Game) -> games[_gameId]
REF_813(uint64) -> REF_812.gameDate
REF_814(BaseGame.Game) -> games[_gameId]
REF_815(BaseGame.Teams) -> REF_814.teamA
REF_816(BaseGame.Game) -> games[_gameId]
REF_817(BaseGame.Teams) -> REF_816.teamB
Emit GameChanged(_gameId,REF_813,REF_815,REF_817,goalA,goalB,odds,shotA,shotB)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
7->1;
}
// Function: 9994.sol-SolutionGame-getForecastCount(uint256,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(exists(_tokenId))

IRs:
TMP_951(bool) = INTERNAL_CALL, ERC721BasicToken.exists(uint256)(_tokenId)
TMP_952(None) = SOLIDITY_CALL require(bool)(TMP_951)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
forecastCount = 0

IRs:
forecastCount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
index = 0

IRs:
index(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
count = tokenForecasts[_tokenId].length

IRs:
REF_707(uint256[]) -> tokenForecasts[_tokenId]
REF_708 -> LENGTH REF_707
count(uint256) := REF_708(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->18;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
index = 0

IRs:
index(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
index < count

IRs:
TMP_953(bool) = index < count
CONDITION TMP_953"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
forecasts[tokenForecasts[_tokenId][index]].forecastBlockNumber < _blockNumber

IRs:
REF_709(uint256[]) -> tokenForecasts[_tokenId]
REF_710(uint256) -> REF_709[index]
REF_711(BaseGame.Forecast) -> forecasts[REF_710]
REF_712(uint256) -> REF_711.forecastBlockNumber
TMP_954(bool) = REF_712 < _blockNumber
CONDITION TMP_954"];
9->10[label="True"];
9->16[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
isReleased

IRs:
CONDITION isReleased"];
10->11[label="True"];
10->14[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
games[forecasts[tokenForecasts[_tokenId][index]].gameId].gameDate < block.timestamp

IRs:
REF_713(uint256[]) -> tokenForecasts[_tokenId]
REF_714(uint256) -> REF_713[index]
REF_715(BaseGame.Forecast) -> forecasts[REF_714]
REF_716(uint256) -> REF_715.gameId
REF_717(BaseGame.Game) -> games[REF_716]
REF_718(uint64) -> REF_717.gameDate
TMP_955(bool) = REF_718 < block.timestamp
CONDITION TMP_955"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
forecastCount = forecastCount + 1

IRs:
TMP_956(uint256) = forecastCount + 1
forecastCount(uint256) := TMP_956(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->15;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
forecastCount = forecastCount + 1

IRs:
TMP_957(uint256) = forecastCount + 1
forecastCount(uint256) := TMP_957(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
index ++

IRs:
TMP_958(uint256) := index(uint256)
index(uint256) = index + 1"];
17->8;
18[label="Node Type: IF 18

EXPRESSION:
tokens[_tokenId].parentId != 0

IRs:
REF_719(BaseGame.Token) -> tokens[_tokenId]
REF_720(uint256) -> REF_719.parentId
TMP_959(bool) = REF_720 != 0
CONDITION TMP_959"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
forecastCount = forecastCount.add(getForecastCount(tokens[_tokenId].parentId,tokens[_tokenId].createBlockNumber,isReleased))

IRs:
REF_722(BaseGame.Token) -> tokens[_tokenId]
REF_723(uint256) -> REF_722.parentId
REF_724(BaseGame.Token) -> tokens[_tokenId]
REF_725(uint256) -> REF_724.createBlockNumber
TMP_960(uint256) = INTERNAL_CALL, BaseGameLogic.getForecastCount(uint256,uint256,bool)(REF_723,REF_725,isReleased)
TMP_961(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['forecastCount', 'TMP_960'] 
forecastCount(uint256) := TMP_961(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
forecastCount

IRs:
RETURN forecastCount"];
}
// Function: 9994.sol-SolutionGame-getForecastScore(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_forecastId < forecasts.length)

IRs:
REF_762 -> LENGTH forecasts
TMP_982(bool) = _forecastId < REF_762
TMP_983(None) = SOLIDITY_CALL require(bool)(TMP_982)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
calculateScore(forecasts[_forecastId].gameId,forecasts[_forecastId].forecastData)

IRs:
REF_763(BaseGame.Forecast) -> forecasts[_forecastId]
REF_764(uint256) -> REF_763.gameId
REF_765(BaseGame.Forecast) -> forecasts[_forecastId]
REF_766(uint256) -> REF_765.forecastData
TMP_984(uint256) = INTERNAL_CALL, BaseGameLogic.calculateScore(uint256,uint256)(REF_764,REF_766)
RETURN TMP_984"];
}
// Function: 9994.sol-SolutionGame-getHWCAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
aDeposit = hwcAddress[_val].aDeposit

IRs:
REF_638(HWCIntegration.HWCInfo) -> hwcAddress[_val]
REF_639(string) -> REF_638.aDeposit
aDeposit(string) := REF_639(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
aWithdraw = hwcAddress[_val].aWithdraw

IRs:
REF_640(HWCIntegration.HWCInfo) -> hwcAddress[_val]
REF_641(string) -> REF_640.aWithdraw
aWithdraw(string) := REF_641(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
d = hwcAddress[_val].deposit

IRs:
REF_642(HWCIntegration.HWCInfo) -> hwcAddress[_val]
REF_643(uint256) -> REF_642.deposit
d(uint256) := REF_643(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(aDeposit,aWithdraw,d)

IRs:
RETURN aDeposit,aWithdraw,d"];
}
// Function: 9994.sol-SolutionGame-getHWCAddressByIndex(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_index < hwcAddressList.length)

IRs:
REF_636 -> LENGTH hwcAddressList
TMP_873(bool) = _index < REF_636
TMP_874(None) = SOLIDITY_CALL require(bool)(TMP_873)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
getHWCAddress(hwcAddressList[_index])

IRs:
REF_637(address) -> hwcAddressList[_index]
TUPLE_1(string,string,uint256) = INTERNAL_CALL, HWCIntegration.getHWCAddress(address)(REF_637)
RETURN TUPLE_1"];
3[label="Node Type: RETURN 3

EXPRESSION:
(aDeposit,aWithdraw,d)

IRs:
RETURN aDeposit,aWithdraw,d"];
}
// Function: 9994.sol-SolutionGame-getHWCAddressCount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hwcAddressList.length

IRs:
REF_635 -> LENGTH hwcAddressList
RETURN REF_635"];
}
// Function: 9994.sol-SolutionGame-getMyPrize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenList = tokensOfOwner(msg.sender)

IRs:
TMP_1174(uint256[]) = INTERNAL_CALL, BaseGameLogic.tokensOfOwner(address)(msg.sender)
tokenList(uint256[]) = ['TMP_1174(uint256[])']"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
index = 0

IRs:
index(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
index < tokenList.length

IRs:
REF_897 -> LENGTH tokenList
TMP_1175(bool) = index < REF_897
CONDITION TMP_1175"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
getPrizeByToken(tokenList[index])

IRs:
REF_898(uint256) -> tokenList[index]
INTERNAL_CALL, SolutionGame.getPrizeByToken(uint256)(REF_898)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
index ++

IRs:
TMP_1177(uint256) := index(uint256)
index(uint256) = index + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
whenWinnerTime()

IRs:
MODIFIER_CALL, SolutionGame.whenWinnerTime()()"];
8->1;
}
// Function: 9994.sol-SolutionGame-getPrizeByToken(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
place = checkIsWinner(_tokenId)

IRs:
TMP_1179(uint256) = INTERNAL_CALL, SolutionGame.checkIsWinner(uint256)(_tokenId)
place(uint256) := TMP_1179(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(place > 0)

IRs:
TMP_1180(bool) = place > 0
TMP_1181(None) = SOLIDITY_CALL require(bool)(TMP_1180)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
prize = prizesByPlace[place]

IRs:
REF_899(uint256) -> prizesByPlace[place]
prize(uint256) := REF_899(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
prize > 0

IRs:
TMP_1182(bool) = prize > 0
CONDITION TMP_1182"];
4->5[label="True"];
4->15[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
winnerMap[_tokenId] == 0

IRs:
REF_900(uint256) -> winnerMap[_tokenId]
TMP_1183(bool) = REF_900 == 0
CONDITION TMP_1183"];
5->6[label="True"];
5->14[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
winnerMap[_tokenId] = prize

IRs:
REF_901(uint256) -> winnerMap[_tokenId]
REF_901(uint256) (->winnerMap) := prize(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
winnerList.push(_tokenId)

IRs:
REF_903 -> LENGTH winnerList
TMP_1185(uint256) := REF_903(uint256)
TMP_1186(uint256) = TMP_1185 + 1
REF_903(uint256) (->winnerList) := TMP_1186(uint256)
REF_904(uint256) -> winnerList[TMP_1185]
REF_904(uint256) (->winnerList) := _tokenId(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_owner = tokenOwner[_tokenId]

IRs:
REF_905(address) -> tokenOwner[_tokenId]
_owner(address) := REF_905(address)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_owner != address(0)

IRs:
TMP_1187 = CONVERT 0 to address
TMP_1188(bool) = _owner != TMP_1187
CONDITION TMP_1188"];
9->10[label="True"];
9->13[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
hwcPrize = prizesByPlaceHWC[place]

IRs:
REF_906(uint256) -> prizesByPlaceHWC[place]
hwcPrize(uint256) := REF_906(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
hwcAddress[_owner].deposit = hwcAddress[_owner].deposit + hwcPrize

IRs:
REF_907(HWCIntegration.HWCInfo) -> hwcAddress[_owner]
REF_908(uint256) -> REF_907.deposit
REF_909(HWCIntegration.HWCInfo) -> hwcAddress[_owner]
REF_910(uint256) -> REF_909.deposit
TMP_1189(uint256) = REF_910 + hwcPrize
REF_908(uint256) (->hwcAddress) := TMP_1189(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_owner.transfer(prize)

IRs:
Transfer dest:_owner value:prize"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
whenWinnerTime()

IRs:
MODIFIER_CALL, SolutionGame.whenWinnerTime()()"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
onlyOwnerOf(_tokenId)

IRs:
MODIFIER_CALL, ERC721BasicToken.onlyOwnerOf(uint256)(_tokenId)"];
17->1;
}
// Function: 9994.sol-SolutionGame-getResultTable(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
results = new uint256[](_count)

IRs:
TMP_1196(uint256[])  = new uint256[](_count)
results(uint256[]) = ['TMP_1196(uint256[])']"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
index = _start

IRs:
index(uint256) := _start(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
index < tokens.length && index < (_start + _count)

IRs:
REF_913 -> LENGTH tokens
TMP_1197(bool) = index < REF_913
TMP_1198(uint256) = _start + _count
TMP_1199(bool) = index < TMP_1198
TMP_1200(bool) = TMP_1197 && TMP_1199
CONDITION TMP_1200"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
results[(index - _start)] = getScore(index)

IRs:
TMP_1201(uint256) = index - _start
REF_914(uint256) -> results[TMP_1201]
TMP_1202(uint256) = INTERNAL_CALL, BaseGameLogic.getScore(uint256)(index)
REF_914(uint256) (->results) := TMP_1202(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
index ++

IRs:
TMP_1203(uint256) := index(uint256)
index(uint256) = index + 1"];
7->5;
8[label="Node Type: RETURN 8

EXPRESSION:
results

IRs:
RETURN results"];
}
// Function: 9994.sol-SolutionGame-getScore(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gameForecast = new uint256[](65)

IRs:
TMP_963(uint256[])  = new uint256[](65)
_gameForecast(uint256[]) = ['TMP_963(uint256[])']"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
getScore(_tokenId,block.number,_gameForecast)

IRs:
TMP_964(uint256) = INTERNAL_CALL, BaseGameLogic.getScore(uint256,uint256,uint256[])(_tokenId,block.number,_gameForecast)
RETURN TMP_964"];
}
// Function: 9994.sol-SolutionGame-getScore(uint256,uint256,uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
score = 0

IRs:
score(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_forecasts = forecastOfToken(_tokenId)

IRs:
TMP_965(uint256[]) = INTERNAL_CALL, BaseGameLogic.forecastOfToken(uint256)(_tokenId)
_forecasts(uint256[]) = ['TMP_965(uint256[])']"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_forecasts.length > 0

IRs:
REF_726 -> LENGTH _forecasts
TMP_966(bool) = REF_726 > 0
CONDITION TMP_966"];
3->4[label="True"];
3->14[label="False"];
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->14;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_index = _forecasts.length - 1

IRs:
REF_727 -> LENGTH _forecasts
TMP_967(uint256) = REF_727 - 1
_index(uint256) := TMP_967(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
_index >= 0 && _index < _forecasts.length

IRs:
TMP_968(bool) = _index >= 0
REF_728 -> LENGTH _forecasts
TMP_969(bool) = _index < REF_728
TMP_970(bool) = TMP_968 && TMP_969
CONDITION TMP_970"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
forecasts[_forecasts[_index]].forecastBlockNumber < _blockNumber && _gameForecast[forecasts[_forecasts[_index]].gameId] == 0 && block.timestamp > games[forecasts[_forecasts[_index]].gameId].gameDate

IRs:
REF_729(uint256) -> _forecasts[_index]
REF_730(BaseGame.Forecast) -> forecasts[REF_729]
REF_731(uint256) -> REF_730.forecastBlockNumber
TMP_971(bool) = REF_731 < _blockNumber
REF_732(uint256) -> _forecasts[_index]
REF_733(BaseGame.Forecast) -> forecasts[REF_732]
REF_734(uint256) -> REF_733.gameId
REF_735(uint256) -> _gameForecast[REF_734]
TMP_972(bool) = REF_735 == 0
TMP_973(bool) = TMP_971 && TMP_972
REF_736(uint256) -> _forecasts[_index]
REF_737(BaseGame.Forecast) -> forecasts[REF_736]
REF_738(uint256) -> REF_737.gameId
REF_739(BaseGame.Game) -> games[REF_738]
REF_740(uint64) -> REF_739.gameDate
TMP_974(bool) = block.timestamp > REF_740
TMP_975(bool) = TMP_973 && TMP_974
CONDITION TMP_975"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
score = score.add(calculateScore(forecasts[_forecasts[_index]].gameId,forecasts[_forecasts[_index]].forecastData))

IRs:
REF_742(uint256) -> _forecasts[_index]
REF_743(BaseGame.Forecast) -> forecasts[REF_742]
REF_744(uint256) -> REF_743.gameId
REF_745(uint256) -> _forecasts[_index]
REF_746(BaseGame.Forecast) -> forecasts[REF_745]
REF_747(uint256) -> REF_746.forecastData
TMP_976(uint256) = INTERNAL_CALL, BaseGameLogic.calculateScore(uint256,uint256)(REF_744,REF_747)
TMP_977(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['score', 'TMP_976'] 
score(uint256) := TMP_977(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_gameForecast[forecasts[_forecasts[_index]].gameId] = forecasts[_forecasts[_index]].forecastBlockNumber

IRs:
REF_748(uint256) -> _forecasts[_index]
REF_749(BaseGame.Forecast) -> forecasts[REF_748]
REF_750(uint256) -> REF_749.gameId
REF_751(uint256) -> _gameForecast[REF_750]
REF_752(uint256) -> _forecasts[_index]
REF_753(BaseGame.Forecast) -> forecasts[REF_752]
REF_754(uint256) -> REF_753.forecastBlockNumber
REF_751(uint256) (->_gameForecast) := REF_754(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_index --

IRs:
TMP_978(uint256) := _index(uint256)
_index(uint256) = _index - 1"];
13->8;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
tokens[_tokenId].parentId != 0

IRs:
REF_755(BaseGame.Token) -> tokens[_tokenId]
REF_756(uint256) -> REF_755.parentId
TMP_979(bool) = REF_756 != 0
CONDITION TMP_979"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
score = score.add(getScore(tokens[_tokenId].parentId,tokens[_tokenId].createBlockNumber,_gameForecast))

IRs:
REF_758(BaseGame.Token) -> tokens[_tokenId]
REF_759(uint256) -> REF_758.parentId
REF_760(BaseGame.Token) -> tokens[_tokenId]
REF_761(uint256) -> REF_760.createBlockNumber
TMP_980(uint256) = INTERNAL_CALL, BaseGameLogic.getScore(uint256,uint256,uint256[])(REF_759,REF_761,_gameForecast)
TMP_981(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['score', 'TMP_980'] 
score(uint256) := TMP_981(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
score

IRs:
RETURN score"];
}
// Function: 9994.sol-SolutionGame-getWinnerInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
winnerMap[_tokenId]

IRs:
REF_912(uint256) -> winnerMap[_tokenId]
RETURN REF_912"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
2->1;
}
// Function: 9994.sol-SolutionGame-getWinnerList()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
winnerList

IRs:
RETURN winnerList"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
2->1;
}
// Function: 9994.sol-SolutionGame-isApprovedOrOwner(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ownerOf(_tokenId)

IRs:
TMP_1100(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
owner(address) := TMP_1100(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_spender == owner

IRs:
TMP_1101(bool) = _spender == owner
RETURN TMP_1101"];
}
// Function: 9994.sol-SolutionGame-name()
digraph{
}
// Function: 9994.sol-SolutionGame-onlyAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin || msg.sender == owner)

IRs:
TMP_1212(bool) = msg.sender == admin
TMP_1213(bool) = msg.sender == owner
TMP_1214(bool) = TMP_1212 || TMP_1213
TMP_1215(None) = SOLIDITY_CALL require(bool)(TMP_1214)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-SolutionGame-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_1210(bool) = msg.sender == owner
TMP_1211(None) = SOLIDITY_CALL require(bool)(TMP_1210)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-SolutionGame-onlyOwnerOf(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == msg.sender)

IRs:
TMP_1204(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_1205(bool) = TMP_1204 == msg.sender
TMP_1206(None) = SOLIDITY_CALL require(bool)(TMP_1205)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-SolutionGame-ownerOf(uint256)
digraph{
}
// Function: 9994.sol-SolutionGame-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
3->1;
}
// Function: 9994.sol-SolutionGame-registerHWCDep(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(_a).length == 34)

IRs:
TMP_857 = CONVERT _a to bytes
REF_615 -> LENGTH TMP_857
TMP_858(bool) = REF_615 == 34
TMP_859(None) = SOLIDITY_CALL require(bool)(TMP_858)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
hwcAddress[msg.sender].aDeposit = _a

IRs:
REF_616(HWCIntegration.HWCInfo) -> hwcAddress[msg.sender]
REF_617(string) -> REF_616.aDeposit
REF_617(string) (->hwcAddress) := _a(string)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
hwcAddress[msg.sender].index1 == 0

IRs:
REF_618(HWCIntegration.HWCInfo) -> hwcAddress[msg.sender]
REF_619(uint256) -> REF_618.index1
TMP_860(bool) = REF_619 == 0
CONDITION TMP_860"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
hwcAddress[msg.sender].index1 = hwcAddressList.push(msg.sender)

IRs:
REF_620(HWCIntegration.HWCInfo) -> hwcAddress[msg.sender]
REF_621(uint256) -> REF_620.index1
REF_623 -> LENGTH hwcAddressList
TMP_862(uint256) := REF_623(uint256)
TMP_863(uint256) = TMP_862 + 1
REF_623(uint256) (->hwcAddressList) := TMP_863(uint256)
REF_624(address) -> hwcAddressList[TMP_862]
REF_624(address) (->hwcAddressList) := msg.sender(address)
REF_621(uint256) (->hwcAddress) := TMP_861(None)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
NewHWCRegister(msg.sender,_a,)

IRs:
Emit NewHWCRegister(msg.sender,_a,)"];
}
// Function: 9994.sol-SolutionGame-registerHWCWit(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(_a).length == 34)

IRs:
TMP_865 = CONVERT _a to bytes
REF_625 -> LENGTH TMP_865
TMP_866(bool) = REF_625 == 34
TMP_867(None) = SOLIDITY_CALL require(bool)(TMP_866)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
hwcAddress[msg.sender].aWithdraw = _a

IRs:
REF_626(HWCIntegration.HWCInfo) -> hwcAddress[msg.sender]
REF_627(string) -> REF_626.aWithdraw
REF_627(string) (->hwcAddress) := _a(string)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
hwcAddress[msg.sender].index1 == 0

IRs:
REF_628(HWCIntegration.HWCInfo) -> hwcAddress[msg.sender]
REF_629(uint256) -> REF_628.index1
TMP_868(bool) = REF_629 == 0
CONDITION TMP_868"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
hwcAddress[msg.sender].index1 = hwcAddressList.push(msg.sender)

IRs:
REF_630(HWCIntegration.HWCInfo) -> hwcAddress[msg.sender]
REF_631(uint256) -> REF_630.index1
REF_633 -> LENGTH hwcAddressList
TMP_870(uint256) := REF_633(uint256)
TMP_871(uint256) = TMP_870 + 1
REF_633(uint256) (->hwcAddressList) := TMP_871(uint256)
REF_634(address) -> hwcAddressList[TMP_870]
REF_634(address) (->hwcAddressList) := msg.sender(address)
REF_631(uint256) (->hwcAddress) := TMP_869(None)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
NewHWCRegister(msg.sender,,_a)

IRs:
Emit NewHWCRegister(msg.sender,,_a)"];
}
// Function: 9994.sol-SolutionGame-removeTokenFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(ownerOf(_tokenId) == _from)

IRs:
TMP_1112(address) = INTERNAL_CALL, ERC721BasicToken.ownerOf(uint256)(_tokenId)
TMP_1113(bool) = TMP_1112 == _from
TMP_1114(None) = SOLIDITY_CALL require(bool)(TMP_1113)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownedTokensCount[_from] = ownedTokensCount[_from].sub(1)

IRs:
REF_876(uint256) -> ownedTokensCount[_from]
REF_877(uint256) -> ownedTokensCount[_from]
TMP_1115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_877', '1'] 
REF_876(uint256) (->ownedTokensCount) := TMP_1115(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenOwner[_tokenId] = address(0)

IRs:
REF_879(address) -> tokenOwner[_tokenId]
TMP_1116 = CONVERT 0 to address
REF_879(address) (->tokenOwner) := TMP_1116(address)"];
}
// Function: 9994.sol-SolutionGame-setAdmin(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newAdmin != address(0))

IRs:
TMP_1131 = CONVERT 0 to address
TMP_1132(bool) = newAdmin != TMP_1131
TMP_1133(None) = SOLIDITY_CALL require(bool)(TMP_1132)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = newAdmin

IRs:
admin(address) := newAdmin(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 9994.sol-SolutionGame-setBasePrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_val > 0)

IRs:
TMP_1025(bool) = _val > 0
TMP_1026(None) = SOLIDITY_CALL require(bool)(TMP_1025)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
basePrice = _val

IRs:
basePrice(uint256) := _val(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
3->1;
}
// Function: 9994.sol-SolutionGame-setCountWinnerByPlace(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_winnerCount > 0)

IRs:
TMP_1156(bool) = _winnerCount > 0
TMP_1157(None) = SOLIDITY_CALL require(bool)(TMP_1156)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(place <= countWinnerPlace)

IRs:
TMP_1158(bool) = place <= countWinnerPlace
TMP_1159(None) = SOLIDITY_CALL require(bool)(TMP_1158)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
prizesByPlace[place] = prizeFund.mul(prizeDistribution[place]).div(10000).div(_winnerCount)

IRs:
REF_885(uint256) -> prizesByPlace[place]
REF_887(uint256) -> prizeDistribution[place]
TMP_1160(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['prizeFund', 'REF_887'] 
TMP_1161(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1160', '10000'] 
TMP_1162(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1161', '_winnerCount'] 
REF_885(uint256) (->prizesByPlace) := TMP_1162(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
prizesByPlaceHWC[place] = prizeFundHWC.mul(prizeDistribution[place]).div(10000).div(_winnerCount)

IRs:
REF_890(uint256) -> prizesByPlaceHWC[place]
REF_892(uint256) -> prizeDistribution[place]
TMP_1163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['prizeFundHWC', 'REF_892'] 
TMP_1164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1163', '10000'] 
TMP_1165(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_1164', '_winnerCount'] 
REF_890(uint256) (->prizesByPlaceHWC) := TMP_1165(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
scoreByPlace[place] = _winnerScore

IRs:
REF_895(uint256) -> scoreByPlace[place]
REF_895(uint256) (->scoreByPlace) := _winnerScore(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
7->1;
}
// Function: 9994.sol-SolutionGame-setCountWinnerPlace(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
countWinnerPlace = _val

IRs:
countWinnerPlace(uint256) := _val(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9994.sol-SolutionGame-setCourse(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
cHWCtoEth = _val

IRs:
cHWCtoEth(uint256) := _val(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
2->1;
}
// Function: 9994.sol-SolutionGame-setGameCloneFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_val <= 10000)

IRs:
TMP_1028(bool) = _val <= 10000
TMP_1029(None) = SOLIDITY_CALL require(bool)(TMP_1028)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameCloneFee = _val

IRs:
gameCloneFee(uint256) := _val(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
3->1;
}
// Function: 9994.sol-SolutionGame-setHWCDeposit(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
hwcAddress[_user].deposit = _val

IRs:
REF_644(HWCIntegration.HWCInfo) -> hwcAddress[_user]
REF_645(uint256) -> REF_644.deposit
REF_645(uint256) (->hwcAddress) := _val(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
2->1;
}
// Function: 9994.sol-SolutionGame-setNewAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(address(this).balance)

IRs:
TMP_1117 = CONVERT this to address
TMP_1118(uint256) = SOLIDITY_CALL balance(address)(TMP_1117)
Transfer dest:owner value:TMP_1118"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newContractAddress = _v2Address

IRs:
newContractAddress(address) := _v2Address(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 9994.sol-SolutionGame-setPriceFactor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
priceFactor = _val

IRs:
priceFactor(uint256) := _val(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
2->1;
}
// Function: 9994.sol-SolutionGame-setPrizeFundFactor(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_val <= 10000)

IRs:
TMP_1031(bool) = _val <= 10000
TMP_1032(None) = SOLIDITY_CALL require(bool)(TMP_1031)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
prizeFundFactor = _val

IRs:
prizeFundFactor(uint256) := _val(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyAdmin()

IRs:
MODIFIER_CALL, Ownable.onlyAdmin()()"];
3->1;
}
// Function: 9994.sol-SolutionGame-setWinnerPlaceDistribution(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(place <= countWinnerPlace)

IRs:
TMP_1144(bool) = place <= countWinnerPlace
TMP_1145(None) = SOLIDITY_CALL require(bool)(TMP_1144)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_val <= 10000)

IRs:
TMP_1146(bool) = _val <= 10000
TMP_1147(None) = SOLIDITY_CALL require(bool)(TMP_1146)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
testVal = 0

IRs:
testVal(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->13;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
index = 1

IRs:
index(uint256) := 1(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
index <= countWinnerPlace

IRs:
TMP_1148(bool) = index <= countWinnerPlace
CONDITION TMP_1148"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
index != place

IRs:
TMP_1149(bool) = index != place
CONDITION TMP_1149"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
testVal = testVal + prizeDistribution[index]

IRs:
REF_883(uint256) -> prizeDistribution[index]
TMP_1150(uint256) = testVal + REF_883
testVal(uint256) := TMP_1150(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
index ++

IRs:
TMP_1151(uint256) := index(uint256)
index(uint256) = index + 1"];
12->8;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
testVal = testVal + _val

IRs:
TMP_1152(uint256) = testVal + _val
testVal(uint256) := TMP_1152(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
require(bool)(testVal <= 10000)

IRs:
TMP_1153(bool) = testVal <= 10000
TMP_1154(None) = SOLIDITY_CALL require(bool)(TMP_1153)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
prizeDistribution[place] = _val

IRs:
REF_884(uint256) -> prizeDistribution[place]
REF_884(uint256) (->prizeDistribution) := _val(uint256)"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
16->1;
}
// Function: 9994.sol-SolutionGame-setWinnerTimeStatus(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isWinnerTime = _status

IRs:
isWinnerTime(bool) := _status(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 9994.sol-SolutionGame-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
prizeFund = 0

IRs:
prizeFund(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
basePrice = 21000000000000000

IRs:
basePrice(uint256) := 21000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
gameCloneFee = 7000

IRs:
gameCloneFee(uint256) := 7000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
priceFactor = 10000

IRs:
priceFactor(uint256) := 10000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
prizeFundFactor = 5000

IRs:
prizeFundFactor(uint256) := 5000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
cHWCtoEth = 0

IRs:
cHWCtoEth(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
prizeFundHWC = 0

IRs:
prizeFundHWC(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
isWinnerTime = false

IRs:
isWinnerTime(bool) := False(bool)"];
}
// Function: 9994.sol-SolutionGame-symbol()
digraph{
}
// Function: 9994.sol-SolutionGame-toForecastData(uint8,uint8,bool,uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
forecastData = forecastData << 8 | _goalA

IRs:
TMP_1039(uint256) = forecastData << 8
TMP_1040(uint256) = TMP_1039 | _goalA
forecastData(uint256) := TMP_1040(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
forecastData = forecastData << 8 | _goalB

IRs:
TMP_1041(uint256) = forecastData << 8
TMP_1042(uint256) = TMP_1041 | _goalB
forecastData(uint256) := TMP_1042(uint256)"];
3->9;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
forecastData = forecastData << 8 | odds8

IRs:
TMP_1043(uint256) = forecastData << 8
TMP_1044(uint256) = TMP_1043 | odds8
forecastData(uint256) := TMP_1044(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
forecastData = forecastData << 8 | _shotA

IRs:
TMP_1045(uint256) = forecastData << 8
TMP_1046(uint256) = TMP_1045 | _shotA
forecastData(uint256) := TMP_1046(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
forecastData = forecastData << 8 | _shotB

IRs:
TMP_1047(uint256) = forecastData << 8
TMP_1048(uint256) = TMP_1047 | _shotB
forecastData(uint256) := TMP_1048(uint256)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
forecastData

IRs:
RETURN forecastData"];
9[label="Node Type: IF 9

EXPRESSION:
_odds

IRs:
CONDITION _odds"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
odds8 = 1

IRs:
odds8(uint8) := 1(uint256)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
odds8 = 0

IRs:
odds8(uint8) := 0(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->5;
}
// Function: 9994.sol-SolutionGame-tokenByIndex(uint256)
digraph{
}
// Function: 9994.sol-SolutionGame-tokenInfo(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
createBlockNumber = tokens[_tokenId].createBlockNumber

IRs:
REF_699(BaseGame.Token) -> tokens[_tokenId]
REF_700(uint256) -> REF_699.createBlockNumber
createBlockNumber(uint256) := REF_700(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
parentId = tokens[_tokenId].parentId

IRs:
REF_701(BaseGame.Token) -> tokens[_tokenId]
REF_702(uint256) -> REF_701.parentId
parentId(uint256) := REF_702(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
price = calculateTokenPrice(_tokenId)

IRs:
TMP_941(uint256) = INTERNAL_CALL, BaseGameLogic.calculateTokenPrice(uint256)(_tokenId)
price(uint256) := TMP_941(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
forecast = getForecastCount(_tokenId,block.number,false)

IRs:
TMP_942(uint256) = INTERNAL_CALL, BaseGameLogic.getForecastCount(uint256,uint256,bool)(_tokenId,block.number,False)
forecast(uint256) := TMP_942(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
score = getScore(_tokenId)

IRs:
TMP_943(uint256) = INTERNAL_CALL, BaseGameLogic.getScore(uint256)(_tokenId)
score(uint256) := TMP_943(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(createBlockNumber,parentId,forecast,score,price)

IRs:
RETURN createBlockNumber,parentId,forecast,score,price"];
}
// Function: 9994.sol-SolutionGame-tokenOfOwnerByIndex(address,uint256)
digraph{
}
// Function: 9994.sol-SolutionGame-tokensOfOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenCount = balanceOf(_owner)

IRs:
TMP_923(uint256) = INTERNAL_CALL, ERC721BasicToken.balanceOf(address)(_owner)
tokenCount(uint256) := TMP_923(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
tokenCount == 0

IRs:
TMP_924(bool) = tokenCount == 0
CONDITION TMP_924"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
new uint256[](0)

IRs:
TMP_926(uint256[])  = new uint256[](0)
RETURN TMP_926"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
result = new uint256[](tokenCount)

IRs:
TMP_928(uint256[])  = new uint256[](tokenCount)
result(uint256[]) = ['TMP_928(uint256[])']"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
totalToken = totalSupply()

IRs:
TMP_929(uint256) = INTERNAL_CALL, ERC721Token.totalSupply()()
totalToken(uint256) := TMP_929(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
resultIndex = 0

IRs:
resultIndex(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->17;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_tokenId = 1

IRs:
_tokenId(uint256) := 1(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
_tokenId <= totalToken

IRs:
TMP_930(bool) = _tokenId <= totalToken
CONDITION TMP_930"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
tokenOwner[_tokenId] == _owner

IRs:
REF_669(address) -> tokenOwner[_tokenId]
TMP_931(bool) = REF_669 == _owner
CONDITION TMP_931"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
result[resultIndex] = _tokenId

IRs:
REF_670(uint256) -> result[resultIndex]
REF_670(uint256) (->result) := _tokenId(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
resultIndex ++

IRs:
TMP_932(uint256) := resultIndex(uint256)
resultIndex(uint256) = resultIndex + 1"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_tokenId ++

IRs:
TMP_933(uint256) := _tokenId(uint256)
_tokenId(uint256) = _tokenId + 1"];
16->11;
17[label="Node Type: RETURN 17

EXPRESSION:
result

IRs:
RETURN result"];
19[label="Node Type: RETURN 19

EXPRESSION:
ownerTokens

IRs:
RETURN ownerTokens"];
}
// Function: 9994.sol-SolutionGame-totalSupply()
digraph{
}
// Function: 9994.sol-SolutionGame-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_1126 = CONVERT 0 to address
TMP_1127(bool) = newOwner != TMP_1126
TMP_1128(None) = SOLIDITY_CALL require(bool)(TMP_1127)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 9994.sol-SolutionGame-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
3->1;
}
// Function: 9994.sol-SolutionGame-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_1207 = UnaryType.BANG paused 
TMP_1208(None) = SOLIDITY_CALL require(bool)(TMP_1207)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-SolutionGame-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_1209(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-SolutionGame-whenWinnerTime()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isWinnerTime)

IRs:
TMP_1216(None) = SOLIDITY_CALL require(bool)(isWinnerTime)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 9994.sol-SolutionGame-withdrawBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner.transfer(address(this).balance.sub(prizeFund))

IRs:
TMP_1138 = CONVERT this to address
TMP_1139(uint256) = SOLIDITY_CALL balance(address)(TMP_1138)
TMP_1140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_1139', 'prizeFund'] 
Transfer dest:owner value:TMP_1140"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
}
