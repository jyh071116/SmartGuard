digraph G {
// Function: 1064.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 1064.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 1064.sol-Owned-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_1(bool) = msg.sender == newOwner
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_4 = CONVERT 0 to address
newOwner(address) := TMP_4(address)"];
}
// Function: 1064.sol-Owned-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1064.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1064.sol-Owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 1064.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_101(uint256) = a + b
c(uint256) := TMP_101(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_102(bool) = c >= a
TMP_103(None) = SOLIDITY_CALL assert(bool)(TMP_102)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1064.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
a / b

IRs:
TMP_97(uint256) = a / b
RETURN TMP_97"];
}
// Function: 1064.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_92(bool) = a == 0
CONDITION TMP_92"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_93(uint256) = a * b
c(uint256) := TMP_93(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_94(uint256) = c / a
TMP_95(bool) = TMP_94 == b
TMP_96(None) = SOLIDITY_CALL assert(bool)(TMP_95)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1064.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_98(bool) = b <= a
TMP_99(None) = SOLIDITY_CALL assert(bool)(TMP_98)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_100(uint256) = a - b
RETURN TMP_100"];
}
// Function: 1064.sol-XToken-acceptOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == newOwner)

IRs:
TMP_8(bool) = msg.sender == newOwner
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newOwner = address(0)

IRs:
TMP_11 = CONVERT 0 to address
newOwner(address) := TMP_11(address)"];
}
// Function: 1064.sol-XToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_30(uint256) -> balances[_owner]
RETURN REF_30"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1064.sol-XToken-buy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ethAmount = msg.value

IRs:
ethAmount(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
taxed = ethAmount.sub(ethAmount.mul(fee_).div(100))

IRs:
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['ethAmount', 'fee_'] 
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_17', '100'] 
TMP_19(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['ethAmount', 'TMP_18'] 
taxed(uint256) := TMP_19(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
tokenAmount = taxed.mul(1000000000000000000).div(poolPrice)

IRs:
TMP_20(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['taxed', '1000000000000000000'] 
TMP_21(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_20', 'poolPrice'] 
tokenAmount(uint256) := TMP_21(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(tokenMarketPool >= tokenAmount,No enough token in market pool)

IRs:
TMP_22(bool) = tokenMarketPool >= tokenAmount
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,No enough token in market pool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenMarketPool = tokenMarketPool.sub(tokenAmount)

IRs:
TMP_24(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokenMarketPool', 'tokenAmount'] 
tokenMarketPool(uint256) := TMP_24(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[msg.sender] = balanceOf(msg.sender).add(tokenAmount)

IRs:
REF_9(uint256) -> balances[msg.sender]
TMP_25(uint256) = INTERNAL_CALL, XToken.balanceOf(address)(msg.sender)
TMP_26(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_25', 'tokenAmount'] 
REF_9(uint256) (->balances) := TMP_26(uint256)"];
}
// Function: 1064.sol-XToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = 30000000 * (1000000000000000000)

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_12(uint256) = 30000000 * 1000000000000000000
REF_0(uint256) (->balances) := TMP_12(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenMarketPool = totalSupply.sub(balances[msg.sender])

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_13(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', 'REF_2'] 
tokenMarketPool(uint256) := TMP_13(uint256)"];
}
// Function: 1064.sol-XToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! isContract(msg.sender)

IRs:
TMP_14(bool) = INTERNAL_CALL, XToken.isContract(address)(msg.sender)
TMP_15 = UnaryType.BANG TMP_14 
CONDITION TMP_15"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert(string)(Can not Send Eth directly to this token)

IRs:
TMP_16(None) = SOLIDITY_CALL revert(string)(Can not Send Eth directly to this token)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 1064.sol-XToken-getSellPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
address(this).balance.mul(1000000000000000000).div(getShareToken())

IRs:
TMP_65 = CONVERT this to address
TMP_66(uint256) = SOLIDITY_CALL balance(address)(TMP_65)
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_66', '1000000000000000000'] 
TMP_68(uint256) = INTERNAL_CALL, XToken.getShareToken()()
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_67', 'TMP_68'] 
RETURN TMP_69"];
}
// Function: 1064.sol-XToken-getShareToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply.sub(tokenMarketPool)

IRs:
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', 'tokenMarketPool'] 
RETURN TMP_64"];
}
// Function: 1064.sol-XToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
size > 0

IRs:
TMP_70(bool) = size > 0
RETURN TMP_70"];
}
// Function: 1064.sol-XToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_90(bool) = msg.sender == owner
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1064.sol-XToken-sell(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(balanceOf(msg.sender) >= tokenAmount,No enough token)

IRs:
TMP_27(uint256) = INTERNAL_CALL, XToken.balanceOf(address)(msg.sender)
TMP_28(bool) = TMP_27 >= tokenAmount
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,No enough token)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sellPrice = getSellPrice()

IRs:
TMP_30(uint256) = INTERNAL_CALL, XToken.getSellPrice()()
sellPrice(uint256) := TMP_30(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
soldEth = tokenAmount.mul(sellPrice).div(1000000000000000000)

IRs:
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokenAmount', 'sellPrice'] 
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_31', '1000000000000000000'] 
soldEth(uint256) := TMP_32(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balanceOf(msg.sender).sub(tokenAmount)

IRs:
REF_13(uint256) -> balances[msg.sender]
TMP_33(uint256) = INTERNAL_CALL, XToken.balanceOf(address)(msg.sender)
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_33', 'tokenAmount'] 
REF_13(uint256) (->balances) := TMP_34(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokenMarketPool = tokenMarketPool.add(tokenAmount)

IRs:
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokenMarketPool', 'tokenAmount'] 
tokenMarketPool(uint256) := TMP_35(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
gotEth = soldEth.sub(soldEth.mul(fee_).div(100))

IRs:
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['soldEth', 'fee_'] 
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_36', '100'] 
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['soldEth', 'TMP_37'] 
gotEth(uint256) := TMP_38(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
msg.sender.transfer(gotEth)

IRs:
Transfer dest:msg.sender value:gotEth"];
}
// Function: 1064.sol-XToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = XToken

IRs:
name(string) := XToken(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = XT

IRs:
symbol(string) := XT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
fee_ = 5

IRs:
fee_(uint256) := 5(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
totalSupply = 100000000 * (1000000000000000000)

IRs:
TMP_89(uint256) = 100000000 * 1000000000000000000
totalSupply(uint256) := TMP_89(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
tokenMarketPool = 0

IRs:
tokenMarketPool(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
poolPrice = 1000000000000000

IRs:
poolPrice(uint256) := 1000000000000000(uint256)"];
}
// Function: 1064.sol-XToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_58(bool) = INTERNAL_CALL, XToken.isContract(address)(_to)
CONDITION TMP_58"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(_to,_value,empty)

IRs:
TMP_59(bool) = INTERNAL_CALL, XToken.transferToContract(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_59"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(_to,_value,empty)

IRs:
TMP_60(bool) = INTERNAL_CALL, XToken.transferToAddress(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_60"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1064.sol-XToken-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_55(bool) = INTERNAL_CALL, XToken.isContract(address)(_to)
CONDITION TMP_55"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_56(bool) = INTERNAL_CALL, XToken.transferToContract(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_56"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_57(bool) = INTERNAL_CALL, XToken.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_57"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1064.sol-XToken-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_40(bool) = INTERNAL_CALL, XToken.isContract(address)(_to)
CONDITION TMP_40"];
1->2[label="True"];
1->8[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(balanceOf(msg.sender) >= _value,no enough token)

IRs:
TMP_41(uint256) = INTERNAL_CALL, XToken.balanceOf(address)(msg.sender)
TMP_42(bool) = TMP_41 >= _value
TMP_43(None) = SOLIDITY_CALL require(bool,string)(TMP_42,no enough token)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balanceOf(msg.sender).sub(_value)

IRs:
REF_20(uint256) -> balances[msg.sender]
TMP_44(uint256) = INTERNAL_CALL, XToken.balanceOf(address)(msg.sender)
TMP_45(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_44', '_value'] 
REF_20(uint256) (->balances) := TMP_45(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balanceOf(_to).add(_value)

IRs:
REF_22(uint256) -> balances[_to]
TMP_46(uint256) = INTERNAL_CALL, XToken.balanceOf(address)(_to)
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_46', '_value'] 
REF_22(uint256) (->balances) := TMP_47(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(_to.call.value(0)(bytes4(keccak256()(_custom_fallback)),msg.sender,_value,_data))

IRs:
TMP_49(bytes32) = SOLIDITY_CALL keccak256()(_custom_fallback)
TMP_50 = CONVERT TMP_49 to bytes4
TMP_51(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['TMP_50', 'msg.sender', '_value', '_data'] value:0 
TMP_52(None) = SOLIDITY_CALL assert(bool)(TMP_51)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_54(bool) = INTERNAL_CALL, XToken.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_54"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1064.sol-XToken-transferAnyERC20Token(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
ERC20Interface(tokenAddress).transfer(owner,tokens)

IRs:
TMP_61 = CONVERT tokenAddress to ERC20Interface
TMP_62(bool) = HIGH_LEVEL_CALL, dest:TMP_61(ERC20Interface), function:transfer, arguments:['owner', 'tokens']  
RETURN TMP_62"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1064.sol-XToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = _newOwner

IRs:
newOwner(address) := _newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 1064.sol-XToken-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(balanceOf(msg.sender) >= _value,No Enough Token)

IRs:
TMP_71(uint256) = INTERNAL_CALL, XToken.balanceOf(address)(msg.sender)
TMP_72(bool) = TMP_71 >= _value
TMP_73(None) = SOLIDITY_CALL require(bool,string)(TMP_72,No Enough Token)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = balanceOf(msg.sender).sub(_value)

IRs:
REF_31(uint256) -> balances[msg.sender]
TMP_74(uint256) = INTERNAL_CALL, XToken.balanceOf(address)(msg.sender)
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_74', '_value'] 
REF_31(uint256) (->balances) := TMP_75(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balanceOf(_to).add(_value)

IRs:
REF_33(uint256) -> balances[_to]
TMP_76(uint256) = INTERNAL_CALL, XToken.balanceOf(address)(_to)
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_76', '_value'] 
REF_33(uint256) (->balances) := TMP_77(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1064.sol-XToken-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(balanceOf(msg.sender) >= _value,No Enough Token)

IRs:
TMP_79(uint256) = INTERNAL_CALL, XToken.balanceOf(address)(msg.sender)
TMP_80(bool) = TMP_79 >= _value
TMP_81(None) = SOLIDITY_CALL require(bool,string)(TMP_80,No Enough Token)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = balanceOf(msg.sender).sub(_value)

IRs:
REF_35(uint256) -> balances[msg.sender]
TMP_82(uint256) = INTERNAL_CALL, XToken.balanceOf(address)(msg.sender)
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_82', '_value'] 
REF_35(uint256) (->balances) := TMP_83(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balanceOf(_to).add(_value)

IRs:
REF_37(uint256) -> balances[_to]
TMP_84(uint256) = INTERNAL_CALL, XToken.balanceOf(address)(_to)
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_84', '_value'] 
REF_37(uint256) (->balances) := TMP_85(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_86 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_86(ContractReceiver)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
}
