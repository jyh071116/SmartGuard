digraph G {
// Function: 1331.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tkn.sender = _from

IRs:
REF_0(address) -> tkn.sender
REF_0(address) (->tkn) := _from(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tkn.value = _value

IRs:
REF_1(uint256) -> tkn.value
REF_1(uint256) (->tkn) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tkn.data = _data

IRs:
REF_2(bytes) -> tkn.data
REF_2(bytes) (->tkn) := _data(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24)

IRs:
REF_3(None) -> _data[3]
TMP_19 = CONVERT REF_3 to uint32
REF_4(None) -> _data[2]
TMP_20 = CONVERT REF_4 to uint32
TMP_21(uint32) = TMP_20 << 8
TMP_22(uint32) = TMP_19 + TMP_21
REF_5(None) -> _data[1]
TMP_23 = CONVERT REF_5 to uint32
TMP_24(uint32) = TMP_23 << 16
TMP_25(uint32) = TMP_22 + TMP_24
REF_6(None) -> _data[0]
TMP_26 = CONVERT REF_6 to uint32
TMP_27(uint32) = TMP_26 << 24
TMP_28(uint32) = TMP_25 + TMP_27
u(uint32) := TMP_28(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tkn.sig = bytes4(u)

IRs:
REF_7(bytes4) -> tkn.sig
TMP_29 = CONVERT u to bytes4
REF_7(bytes4) (->tkn) := TMP_29(bytes4)"];
}
// Function: 1331.sol-ERC223-allowance(address,address)
digraph{
}
// Function: 1331.sol-ERC223-approve(address,uint256)
digraph{
}
// Function: 1331.sol-ERC223-balanceOf(address)
digraph{
}
// Function: 1331.sol-ERC223-decimals()
digraph{
}
// Function: 1331.sol-ERC223-name()
digraph{
}
// Function: 1331.sol-ERC223-symbol()
digraph{
}
// Function: 1331.sol-ERC223-totalSupply()
digraph{
}
// Function: 1331.sol-ERC223-transfer(address,uint256)
digraph{
}
// Function: 1331.sol-ERC223-transfer(address,uint256,bytes)
digraph{
}
// Function: 1331.sol-ERC223-transfer(address,uint256,bytes,string)
digraph{
}
// Function: 1331.sol-ERC223-transferFrom(address,address,uint256)
digraph{
}
// Function: 1331.sol-FIGHTMONEY-FIGHTMONEY()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[msg.sender] = totalSupply

IRs:
REF_8(uint256) -> balanceOf[msg.sender]
REF_8(uint256) (->balanceOf) := totalSupply(uint256)"];
}
// Function: 1331.sol-FIGHTMONEY-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1331.sol-FIGHTMONEY-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowance[_owner][_spender]

IRs:
REF_78(mapping(address => uint256)) -> allowance[_owner]
REF_79(uint256) -> REF_78[_spender]
RETURN REF_79"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1331.sol-FIGHTMONEY-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowance[msg.sender][_spender] = _value

IRs:
REF_76(mapping(address => uint256)) -> allowance[msg.sender]
REF_77(uint256) -> REF_76[_spender]
REF_77(uint256) (->allowance) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1331.sol-FIGHTMONEY-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balanceOf[_owner]

IRs:
REF_9(uint256) -> balanceOf[_owner]
RETURN REF_9"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1331.sol-FIGHTMONEY-burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_unitAmount > 0 && balanceOf[_from] >= _unitAmount)

IRs:
TMP_131(bool) = _unitAmount > 0
REF_80(uint256) -> balanceOf[_from]
TMP_132(bool) = REF_80 >= _unitAmount
TMP_133(bool) = TMP_131 && TMP_132
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_unitAmount)

IRs:
REF_81(uint256) -> balanceOf[_from]
REF_82(uint256) -> balanceOf[_from]
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_82', '_unitAmount'] 
REF_81(uint256) (->balanceOf) := TMP_135(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = totalSupply.sub(_unitAmount)

IRs:
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_unitAmount'] 
totalSupply(uint256) := TMP_136(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_from,_unitAmount)

IRs:
Emit Burn(_from,_unitAmount)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 1331.sol-FIGHTMONEY-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_176 = UnaryType.BANG mintingFinished 
TMP_177(None) = SOLIDITY_CALL require(bool)(TMP_176)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1331.sol-FIGHTMONEY-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
decimals

IRs:
RETURN decimals"];
2[label="Node Type: RETURN 2

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 1331.sol-FIGHTMONEY-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, FIGHTMONEY.canMint()()"];
5->1;
}
// Function: 1331.sol-FIGHTMONEY-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_94(bool) = length > 0
RETURN TMP_94"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 1331.sol-FIGHTMONEY-lockupAccounts(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(targets.length > 0 && targets.length == unixTimes.length)

IRs:
REF_10 -> LENGTH targets
TMP_35(bool) = REF_10 > 0
REF_11 -> LENGTH targets
REF_12 -> LENGTH unixTimes
TMP_36(bool) = REF_11 == REF_12
TMP_37(bool) = TMP_35 && TMP_36
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
j < targets.length

IRs:
REF_13 -> LENGTH targets
TMP_39(bool) = j < REF_13
CONDITION TMP_39"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(unlockUnixTime[targets[j]] < unixTimes[j])

IRs:
REF_14(address) -> targets[j]
REF_15(uint256) -> unlockUnixTime[REF_14]
REF_16(uint256) -> unixTimes[j]
TMP_40(bool) = REF_15 < REF_16
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
unlockUnixTime[targets[j]] = unixTimes[j]

IRs:
REF_17(address) -> targets[j]
REF_18(uint256) -> unlockUnixTime[REF_17]
REF_19(uint256) -> unixTimes[j]
REF_18(uint256) (->unlockUnixTime) := REF_19(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LockedFunds(targets[j],unixTimes[j])

IRs:
REF_20(address) -> targets[j]
REF_21(uint256) -> unixTimes[j]
Emit LockedFunds(REF_20,REF_21)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j ++

IRs:
TMP_43(uint256) := j(uint256)
j(uint256) = j + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
// Function: 1331.sol-FIGHTMONEY-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_unitAmount > 0)

IRs:
TMP_139(bool) = _unitAmount > 0
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = totalSupply.add(_unitAmount)

IRs:
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_unitAmount'] 
totalSupply(uint256) := TMP_141(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_unitAmount)

IRs:
REF_86(uint256) -> balanceOf[_to]
REF_87(uint256) -> balanceOf[_to]
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_87', '_unitAmount'] 
REF_86(uint256) (->balanceOf) := TMP_142(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Mint(_to,_unitAmount)

IRs:
Emit Mint(_to,_unitAmount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),_to,_unitAmount)

IRs:
TMP_144 = CONVERT 0 to address
Emit Transfer(TMP_144,_to,_unitAmount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, FIGHTMONEY.canMint()()"];
8->1;
}
// Function: 1331.sol-FIGHTMONEY-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name

IRs:
RETURN name"];
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 1331.sol-FIGHTMONEY-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_174(bool) = msg.sender == owner
TMP_175(None) = SOLIDITY_CALL require(bool)(TMP_174)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1331.sol-FIGHTMONEY-rescueToken(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addresses.length > 0 && addresses.length == amounts.length)

IRs:
REF_89 -> LENGTH addresses
TMP_151(bool) = REF_89 > 0
REF_90 -> LENGTH addresses
REF_91 -> LENGTH amounts
TMP_152(bool) = REF_90 == REF_91
TMP_153(bool) = TMP_151 && TMP_152
TMP_154(None) = SOLIDITY_CALL require(bool)(TMP_153)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalAmount = 0

IRs:
totalAmount(uint256) := 0(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->14;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
j < addresses.length

IRs:
REF_92 -> LENGTH addresses
TMP_155(bool) = j < REF_92
CONDITION TMP_155"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(amounts[j] > 0 && addresses[j] != 0x0 && frozenAccount[addresses[j]] == false && now > unlockUnixTime[addresses[j]])

IRs:
REF_93(uint256) -> amounts[j]
TMP_156(bool) = REF_93 > 0
REF_94(address) -> addresses[j]
TMP_157(bool) = REF_94 != 0
TMP_158(bool) = TMP_156 && TMP_157
REF_95(address) -> addresses[j]
REF_96(bool) -> frozenAccount[REF_95]
TMP_159(bool) = REF_96 == False
TMP_160(bool) = TMP_158 && TMP_159
REF_97(address) -> addresses[j]
REF_98(uint256) -> unlockUnixTime[REF_97]
TMP_161(bool) = now > REF_98
TMP_162(bool) = TMP_160 && TMP_161
TMP_163(None) = SOLIDITY_CALL require(bool)(TMP_162)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
amounts[j] = amounts[j].mul(1e18)

IRs:
REF_99(uint256) -> amounts[j]
REF_100(uint256) -> amounts[j]
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_100', '1000000000000000000'] 
REF_99(uint256) (->amounts) := TMP_164(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(balanceOf[addresses[j]] >= amounts[j])

IRs:
REF_102(address) -> addresses[j]
REF_103(uint256) -> balanceOf[REF_102]
REF_104(uint256) -> amounts[j]
TMP_165(bool) = REF_103 >= REF_104
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balanceOf[addresses[j]] = balanceOf[addresses[j]].sub(amounts[j])

IRs:
REF_105(address) -> addresses[j]
REF_106(uint256) -> balanceOf[REF_105]
REF_107(address) -> addresses[j]
REF_108(uint256) -> balanceOf[REF_107]
REF_110(uint256) -> amounts[j]
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_108', 'REF_110'] 
REF_106(uint256) (->balanceOf) := TMP_167(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalAmount = totalAmount.add(amounts[j])

IRs:
REF_112(uint256) -> amounts[j]
TMP_168(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalAmount', 'REF_112'] 
totalAmount(uint256) := TMP_168(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Transfer(addresses[j],msg.sender,amounts[j])

IRs:
REF_113(address) -> addresses[j]
REF_114(uint256) -> amounts[j]
Emit Transfer(REF_113,msg.sender,REF_114)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
j ++

IRs:
TMP_170(uint256) := j(uint256)
j(uint256) = j + 1"];
13->6;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender].add(totalAmount)

IRs:
REF_115(uint256) -> balanceOf[msg.sender]
REF_116(uint256) -> balanceOf[msg.sender]
TMP_171(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_116', 'totalAmount'] 
REF_115(uint256) (->balanceOf) := TMP_171(uint256)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
16->1;
}
// Function: 1331.sol-FIGHTMONEY-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 70e9 * 1e18

IRs:
TMP_173(uint256) = 70000000000 * 1000000000000000000
totalSupply(uint256) := TMP_173(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Fight Money

IRs:
name(string) := Fight Money(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = FM

IRs:
symbol(string) := FM(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 1331.sol-FIGHTMONEY-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol

IRs:
RETURN symbol"];
2[label="Node Type: RETURN 2

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 1331.sol-FIGHTMONEY-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 1331.sol-FIGHTMONEY-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false && now > unlockUnixTime[msg.sender] && now > unlockUnixTime[_to])

IRs:
TMP_81(bool) = _value > 0
REF_39(bool) -> frozenAccount[msg.sender]
TMP_82(bool) = REF_39 == False
TMP_83(bool) = TMP_81 && TMP_82
REF_40(bool) -> frozenAccount[_to]
TMP_84(bool) = REF_40 == False
TMP_85(bool) = TMP_83 && TMP_84
REF_41(uint256) -> unlockUnixTime[msg.sender]
TMP_86(bool) = now > REF_41
TMP_87(bool) = TMP_85 && TMP_86
REF_42(uint256) -> unlockUnixTime[_to]
TMP_88(bool) = now > REF_42
TMP_89(bool) = TMP_87 && TMP_88
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
isContract(_to)

IRs:
TMP_91(bool) = INTERNAL_CALL, FIGHTMONEY.isContract(address)(_to)
CONDITION TMP_91"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToContract(_to,_value,empty)

IRs:
TMP_92(bool) = INTERNAL_CALL, FIGHTMONEY.transferToContract(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_92"];
5[label="Node Type: RETURN 5

EXPRESSION:
transferToAddress(_to,_value,empty)

IRs:
TMP_93(bool) = INTERNAL_CALL, FIGHTMONEY.transferToAddress(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_93"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1331.sol-FIGHTMONEY-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false && now > unlockUnixTime[msg.sender] && now > unlockUnixTime[_to])

IRs:
TMP_68(bool) = _value > 0
REF_35(bool) -> frozenAccount[msg.sender]
TMP_69(bool) = REF_35 == False
TMP_70(bool) = TMP_68 && TMP_69
REF_36(bool) -> frozenAccount[_to]
TMP_71(bool) = REF_36 == False
TMP_72(bool) = TMP_70 && TMP_71
REF_37(uint256) -> unlockUnixTime[msg.sender]
TMP_73(bool) = now > REF_37
TMP_74(bool) = TMP_72 && TMP_73
REF_38(uint256) -> unlockUnixTime[_to]
TMP_75(bool) = now > REF_38
TMP_76(bool) = TMP_74 && TMP_75
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_78(bool) = INTERNAL_CALL, FIGHTMONEY.isContract(address)(_to)
CONDITION TMP_78"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_79(bool) = INTERNAL_CALL, FIGHTMONEY.transferToContract(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_79"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_80(bool) = INTERNAL_CALL, FIGHTMONEY.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_80"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1331.sol-FIGHTMONEY-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false && now > unlockUnixTime[msg.sender] && now > unlockUnixTime[_to])

IRs:
TMP_45(bool) = _value > 0
REF_22(bool) -> frozenAccount[msg.sender]
TMP_46(bool) = REF_22 == False
TMP_47(bool) = TMP_45 && TMP_46
REF_23(bool) -> frozenAccount[_to]
TMP_48(bool) = REF_23 == False
TMP_49(bool) = TMP_47 && TMP_48
REF_24(uint256) -> unlockUnixTime[msg.sender]
TMP_50(bool) = now > REF_24
TMP_51(bool) = TMP_49 && TMP_50
REF_25(uint256) -> unlockUnixTime[_to]
TMP_52(bool) = now > REF_25
TMP_53(bool) = TMP_51 && TMP_52
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_55(bool) = INTERNAL_CALL, FIGHTMONEY.isContract(address)(_to)
CONDITION TMP_55"];
2->3[label="True"];
2->10[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_26(uint256) -> balanceOf[msg.sender]
TMP_56(bool) = REF_26 >= _value
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value)

IRs:
REF_27(uint256) -> balanceOf[msg.sender]
REF_28(uint256) -> balanceOf[msg.sender]
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_28', '_value'] 
REF_27(uint256) (->balanceOf) := TMP_58(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_value)

IRs:
REF_30(uint256) -> balanceOf[_to]
REF_31(uint256) -> balanceOf[_to]
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_31', '_value'] 
REF_30(uint256) (->balanceOf) := TMP_59(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(_to.call.value(0)(bytes4(keccak256()(_custom_fallback)),msg.sender,_value,_data))

IRs:
TMP_61(bytes32) = SOLIDITY_CALL keccak256()(_custom_fallback)
TMP_62 = CONVERT TMP_61 to bytes4
TMP_63(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['TMP_62', 'msg.sender', '_value', '_data'] value:0 
TMP_64(None) = SOLIDITY_CALL assert(bool)(TMP_63)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_67(bool) = INTERNAL_CALL, FIGHTMONEY.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_67"];
12[label="Node Type: RETURN 12

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1331.sol-FIGHTMONEY-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0) && _value > 0 && balanceOf[_from] >= _value && allowance[_from][msg.sender] >= _value && frozenAccount[_from] == false && frozenAccount[_to] == false && now > unlockUnixTime[_from] && now > unlockUnixTime[_to])

IRs:
TMP_109 = CONVERT 0 to address
TMP_110(bool) = _to != TMP_109
TMP_111(bool) = _value > 0
TMP_112(bool) = TMP_110 && TMP_111
REF_58(uint256) -> balanceOf[_from]
TMP_113(bool) = REF_58 >= _value
TMP_114(bool) = TMP_112 && TMP_113
REF_59(mapping(address => uint256)) -> allowance[_from]
REF_60(uint256) -> REF_59[msg.sender]
TMP_115(bool) = REF_60 >= _value
TMP_116(bool) = TMP_114 && TMP_115
REF_61(bool) -> frozenAccount[_from]
TMP_117(bool) = REF_61 == False
TMP_118(bool) = TMP_116 && TMP_117
REF_62(bool) -> frozenAccount[_to]
TMP_119(bool) = REF_62 == False
TMP_120(bool) = TMP_118 && TMP_119
REF_63(uint256) -> unlockUnixTime[_from]
TMP_121(bool) = now > REF_63
TMP_122(bool) = TMP_120 && TMP_121
REF_64(uint256) -> unlockUnixTime[_to]
TMP_123(bool) = now > REF_64
TMP_124(bool) = TMP_122 && TMP_123
TMP_125(None) = SOLIDITY_CALL require(bool)(TMP_124)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_value)

IRs:
REF_65(uint256) -> balanceOf[_from]
REF_66(uint256) -> balanceOf[_from]
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_66', '_value'] 
REF_65(uint256) (->balanceOf) := TMP_126(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_value)

IRs:
REF_68(uint256) -> balanceOf[_to]
REF_69(uint256) -> balanceOf[_to]
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_69', '_value'] 
REF_68(uint256) (->balanceOf) := TMP_127(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_71(mapping(address => uint256)) -> allowance[_from]
REF_72(uint256) -> REF_71[msg.sender]
REF_73(mapping(address => uint256)) -> allowance[_from]
REF_74(uint256) -> REF_73[msg.sender]
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_74', '_value'] 
REF_72(uint256) (->allowance) := TMP_128(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1331.sol-FIGHTMONEY-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_30 = CONVERT 0 to address
TMP_31(bool) = newOwner != TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1331.sol-FIGHTMONEY-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_43(uint256) -> balanceOf[msg.sender]
TMP_95(bool) = REF_43 >= _value
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value)

IRs:
REF_44(uint256) -> balanceOf[msg.sender]
REF_45(uint256) -> balanceOf[msg.sender]
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_45', '_value'] 
REF_44(uint256) (->balanceOf) := TMP_97(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_value)

IRs:
REF_47(uint256) -> balanceOf[_to]
REF_48(uint256) -> balanceOf[_to]
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_48', '_value'] 
REF_47(uint256) (->balanceOf) := TMP_98(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1331.sol-FIGHTMONEY-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_50(uint256) -> balanceOf[msg.sender]
TMP_101(bool) = REF_50 >= _value
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value)

IRs:
REF_51(uint256) -> balanceOf[msg.sender]
REF_52(uint256) -> balanceOf[msg.sender]
TMP_103(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_52', '_value'] 
REF_51(uint256) (->balanceOf) := TMP_103(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_to] = balanceOf[_to].add(_value)

IRs:
REF_54(uint256) -> balanceOf[_to]
REF_55(uint256) -> balanceOf[_to]
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_55', '_value'] 
REF_54(uint256) (->balanceOf) := TMP_104(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_105 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_105(ContractReceiver)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1331.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1331.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1331.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1331.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1331.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1331.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1331.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
