digraph G {
// Function: 1347.sol-AcceptsElyxr-AcceptsElyxr(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenContract = Elyxr(_tokenContract)

IRs:
TMP_0 = CONVERT _tokenContract to Elyxr
tokenContract(Elyxr) := TMP_0(Elyxr)"];
}
// Function: 1347.sol-AcceptsElyxr-onlyTokenContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(tokenContract))

IRs:
TMP_1 = CONVERT tokenContract to address
TMP_2(bool) = msg.sender == TMP_1
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1347.sol-AcceptsElyxr-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 1347.sol-Elyxr-Elyxr()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
administrators[0xA1D81A181ad53ccfFD643f23102ee6CB5F6d5E4B] = true

IRs:
REF_0(bool) -> administrators[923966748187398930413546303570716207898533125707]
REF_0(bool) (->administrators) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ambassadors_[0xA1D81A181ad53ccfFD643f23102ee6CB5F6d5E4B] = true

IRs:
REF_1(bool) -> ambassadors_[923966748187398930413546303570716207898533125707]
REF_1(bool) (->ambassadors_) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ambassadors_[0xb03bEF1D9659363a9357aB29a05941491AcCb4eC] = true

IRs:
REF_2(bool) -> ambassadors_[1006118949536082808115647198315003910635704333548]
REF_2(bool) (->ambassadors_) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ambassadors_[0x87A7e71D145187eE9aAdc86954d39cf0e9446751] = true

IRs:
REF_3(bool) -> ambassadors_[774458111342619720151011290974912616912247875409]
REF_3(bool) (->ambassadors_) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ambassadors_[0xab73e01ba3a8009d682726b752c11b1e9722f059] = true

IRs:
REF_4(bool) -> ambassadors_[978821530065916683121961992993855328648821928025]
REF_4(bool) (->ambassadors_) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ambassadors_[0x008ca4f1ba79d1a265617c6206d7884ee8108a78] = true

IRs:
REF_5(bool) -> ambassadors_[3136472998606450892257137742247454008578968184]
REF_5(bool) (->ambassadors_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ambassadors_[0x05f2c11996d73288AbE8a31d8b593a693FF2E5D8] = true

IRs:
REF_6(bool) -> ambassadors_[33958555570909179313517579367450214325608965592]
REF_6(bool) (->ambassadors_) := True(bool)"];
}
// Function: 1347.sol-Elyxr-antiEarlyWhale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_)

IRs:
TMP_226(uint256) = INTERNAL_CALL, Elyxr.totalEthereumBalance()()
TMP_227(uint256) = TMP_226 - _amountOfEthereum
TMP_228(bool) = TMP_227 <= ambassadorQuota_
TMP_229(bool) = onlyAmbassadors && TMP_228
CONDITION TMP_229"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(ambassadors_[_customerAddress] == true && (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_)

IRs:
REF_104(bool) -> ambassadors_[_customerAddress]
TMP_230(bool) = REF_104 == True
REF_105(uint256) -> ambassadorAccumulatedQuota_[_customerAddress]
TMP_231(uint256) = REF_105 + _amountOfEthereum
TMP_232(bool) = TMP_231 <= ambassadorMaxPurchase_
TMP_233(bool) = TMP_230 && TMP_232
TMP_234(None) = SOLIDITY_CALL require(bool)(TMP_233)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress],_amountOfEthereum)

IRs:
REF_106(uint256) -> ambassadorAccumulatedQuota_[_customerAddress]
REF_108(uint256) -> ambassadorAccumulatedQuota_[_customerAddress]
TMP_235(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_108', '_amountOfEthereum'] 
REF_106(uint256) (->ambassadorAccumulatedQuota_) := TMP_235(uint256)"];
4->5;
5[label="Node Type: _ 5
"];
5->8;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyAmbassadors = false

IRs:
onlyAmbassadors(bool) := False(bool)"];
6->7;
7[label="Node Type: _ 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
}
// Function: 1347.sol-Elyxr-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenBalanceLedger_[_customerAddress]

IRs:
REF_50(uint256) -> tokenBalanceLedger_[_customerAddress]
RETURN REF_50"];
}
// Function: 1347.sol-Elyxr-buy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
purchaseInternal(msg.value,_referredBy)

IRs:
TMP_4(uint256) = INTERNAL_CALL, Elyxr.purchaseInternal(uint256,address)(msg.value,_referredBy)"];
}
// Function: 1347.sol-Elyxr-buyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
tokenSupply_ == 0

IRs:
TMP_101(bool) = tokenSupply_ == 0
CONDITION TMP_101"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
tokenPriceInitial_ + tokenPriceIncremental_

IRs:
TMP_102(uint256) = tokenPriceInitial_ + tokenPriceIncremental_
RETURN TMP_102"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_ethereum = tokensToEthereum_(1e18)

IRs:
TMP_103(uint256) = INTERNAL_CALL, Elyxr.tokensToEthereum_(uint256)(1000000000000000000)
_ethereum(uint256) := TMP_103(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_dividends = SafeMath.div(SafeMath.mul(_ethereum,dividendFee_),100)

IRs:
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ethereum', 'dividendFee_'] 
TMP_105(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_104', '100'] 
_dividends(uint256) := TMP_105(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_jackpotPayout = SafeMath.div(SafeMath.mul(_ethereum,jackpotFee_),100)

IRs:
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ethereum', 'jackpotFee_'] 
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_106', '100'] 
_jackpotPayout(uint256) := TMP_107(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_taxedEthereum = SafeMath.add(SafeMath.add(_ethereum,_dividends),_jackpotPayout)

IRs:
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ethereum', '_dividends'] 
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_108', '_jackpotPayout'] 
_taxedEthereum(uint256) := TMP_109(uint256)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
_taxedEthereum

IRs:
RETURN _taxedEthereum"];
}
// Function: 1347.sol-Elyxr-calculateEthereumReceived(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tokensToSell <= tokenSupply_)

IRs:
TMP_117(bool) = _tokensToSell <= tokenSupply_
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_ethereum = tokensToEthereum_(_tokensToSell)

IRs:
TMP_119(uint256) = INTERNAL_CALL, Elyxr.tokensToEthereum_(uint256)(_tokensToSell)
_ethereum(uint256) := TMP_119(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_dividends = SafeMath.div(SafeMath.mul(_ethereum,dividendFee_),100)

IRs:
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ethereum', 'dividendFee_'] 
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_120', '100'] 
_dividends(uint256) := TMP_121(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_jackpotPayout = SafeMath.div(SafeMath.mul(_ethereum,jackpotFee_),100)

IRs:
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ethereum', 'jackpotFee_'] 
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_122', '100'] 
_jackpotPayout(uint256) := TMP_123(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum,_dividends),_jackpotPayout)

IRs:
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_ethereum', '_dividends'] 
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_124', '_jackpotPayout'] 
_taxedEthereum(uint256) := TMP_125(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
_taxedEthereum

IRs:
RETURN _taxedEthereum"];
}
// Function: 1347.sol-Elyxr-calculateTokensReceived(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend,dividendFee_),100)

IRs:
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ethereumToSpend', 'dividendFee_'] 
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_110', '100'] 
_dividends(uint256) := TMP_111(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_jackpotPayout = SafeMath.div(SafeMath.mul(_ethereumToSpend,jackpotFee_),100)

IRs:
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ethereumToSpend', 'jackpotFee_'] 
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_112', '100'] 
_jackpotPayout(uint256) := TMP_113(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereumToSpend,_dividends),_jackpotPayout)

IRs:
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_ethereumToSpend', '_dividends'] 
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_114', '_jackpotPayout'] 
_taxedEthereum(uint256) := TMP_115(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_amountOfTokens = ethereumToTokens_(_taxedEthereum)

IRs:
TMP_116(uint256) = INTERNAL_CALL, Elyxr.ethereumToTokens_(uint256)(_taxedEthereum)
_amountOfTokens(uint256) := TMP_116(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
_amountOfTokens

IRs:
RETURN _amountOfTokens"];
}
// Function: 1347.sol-Elyxr-disableInitialStage()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
onlyAmbassadors = false

IRs:
onlyAmbassadors(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdministrator()

IRs:
MODIFIER_CALL, Elyxr.onlyAdministrator()()"];
2->1;
}
// Function: 1347.sol-Elyxr-dividendsOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
uint256(int256(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude

IRs:
REF_51(uint256) -> tokenBalanceLedger_[_customerAddress]
TMP_87(uint256) = profitPerShare_ * REF_51
TMP_88 = CONVERT TMP_87 to int256
REF_52(int256) -> payoutsTo_[_customerAddress]
TMP_89(int256) = TMP_88 - REF_52
TMP_90 = CONVERT TMP_89 to uint256
TMP_91(uint256) = TMP_90 / magnitude
RETURN TMP_91"];
}
// Function: 1347.sol-Elyxr-etherToSendJackpot()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
SafeMath.sub(totalEthJackpotCollected,totalEthJackpotRecieved)

IRs:
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalEthJackpotCollected', 'totalEthJackpotRecieved'] 
RETURN TMP_126"];
}
// Function: 1347.sol-Elyxr-ethereumToTokens_(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_tokenPriceInitial = tokenPriceInitial_ * 1e18

IRs:
TMP_176(uint256) = tokenPriceInitial_ * 1000000000000000000
_tokenPriceInitial(uint256) := TMP_176(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_tokensReceived = ((SafeMath.sub((sqrt((_tokenPriceInitial ** 2) + (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18)) + (((tokenPriceIncremental_) ** 2) * (tokenSupply_ ** 2)) + (2 * (tokenPriceIncremental_) * _tokenPriceInitial * tokenSupply_))),_tokenPriceInitial)) / (tokenPriceIncremental_)) - (tokenSupply_)

IRs:
TMP_177(uint256) = _tokenPriceInitial ** 2
TMP_178(uint256) = tokenPriceIncremental_ * 1000000000000000000
TMP_179(uint256) = 2 * TMP_178
TMP_180(uint256) = _ethereum * 1000000000000000000
TMP_181(uint256) = TMP_179 * TMP_180
TMP_182(uint256) = TMP_177 + TMP_181
TMP_183(uint256) = tokenPriceIncremental_ ** 2
TMP_184(uint256) = tokenSupply_ ** 2
TMP_185(uint256) = TMP_183 * TMP_184
TMP_186(uint256) = TMP_182 + TMP_185
TMP_187(uint256) = 2 * tokenPriceIncremental_
TMP_188(uint256) = TMP_187 * _tokenPriceInitial
TMP_189(uint256) = TMP_188 * tokenSupply_
TMP_190(uint256) = TMP_186 + TMP_189
TMP_191(uint256) = INTERNAL_CALL, Elyxr.sqrt(uint256)(TMP_190)
TMP_192(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_191', '_tokenPriceInitial'] 
TMP_193(uint256) = TMP_192 / tokenPriceIncremental_
TMP_194(uint256) = TMP_193 - tokenSupply_
_tokensReceived(uint256) := TMP_194(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_tokensReceived

IRs:
RETURN _tokensReceived"];
}
// Function: 1347.sol-Elyxr-exit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_tokens = tokenBalanceLedger_[_customerAddress]

IRs:
REF_16(uint256) -> tokenBalanceLedger_[_customerAddress]
_tokens(uint256) := REF_16(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_tokens > 0

IRs:
TMP_21(bool) = _tokens > 0
CONDITION TMP_21"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
sell(_tokens)

IRs:
INTERNAL_CALL, Elyxr.sell(uint256)(_tokens)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
withdraw()

IRs:
INTERNAL_CALL, Elyxr.withdraw()()"];
}
// Function: 1347.sol-Elyxr-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
purchaseInternal(msg.value,0x0)

IRs:
TMP_5(uint256) = INTERNAL_CALL, Elyxr.purchaseInternal(uint256,address)(msg.value,0)"];
}
// Function: 1347.sol-Elyxr-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
length > 0

IRs:
TMP_76(bool) = length > 0
RETURN TMP_76"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 1347.sol-Elyxr-myDividends(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->3;
3[label="Node Type: IF 3

EXPRESSION:
_includeReferralBonus

IRs:
CONDITION _includeReferralBonus"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
dividendsOf(_customerAddress) + referralBalance_[_customerAddress]

IRs:
TMP_84(uint256) = INTERNAL_CALL, Elyxr.dividendsOf(address)(_customerAddress)
REF_49(uint256) -> referralBalance_[_customerAddress]
TMP_85(uint256) = TMP_84 + REF_49
RETURN TMP_85"];
5[label="Node Type: RETURN 5

EXPRESSION:
dividendsOf(_customerAddress)

IRs:
TMP_86(uint256) = INTERNAL_CALL, Elyxr.dividendsOf(address)(_customerAddress)
RETURN TMP_86"];
}
// Function: 1347.sol-Elyxr-myTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
balanceOf(_customerAddress)

IRs:
TMP_83(uint256) = INTERNAL_CALL, Elyxr.balanceOf(address)(_customerAddress)
RETURN TMP_83"];
}
// Function: 1347.sol-Elyxr-notContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == tx.origin)

IRs:
TMP_223(bool) = msg.sender == tx.origin
TMP_224(None) = SOLIDITY_CALL require(bool)(TMP_223)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1347.sol-Elyxr-onlyAdministrator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(administrators[_customerAddress])

IRs:
REF_103(bool) -> administrators[_customerAddress]
TMP_225(None) = SOLIDITY_CALL require(bool)(REF_103)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 1347.sol-Elyxr-onlyBagholders()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(myTokens() > 0)

IRs:
TMP_217(uint256) = INTERNAL_CALL, Elyxr.myTokens()()
TMP_218(bool) = TMP_217 > 0
TMP_219(None) = SOLIDITY_CALL require(bool)(TMP_218)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1347.sol-Elyxr-onlyStronghands()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(myDividends(true) > 0)

IRs:
TMP_220(uint256) = INTERNAL_CALL, Elyxr.myDividends(bool)(True)
TMP_221(bool) = TMP_220 > 0
TMP_222(None) = SOLIDITY_CALL require(bool)(TMP_221)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1347.sol-Elyxr-payJackpot()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ethToPay = SafeMath.sub(totalEthJackpotCollected,totalEthJackpotRecieved)

IRs:
TMP_6(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalEthJackpotCollected', 'totalEthJackpotRecieved'] 
ethToPay(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(ethToPay > 1)

IRs:
TMP_7(bool) = ethToPay > 1
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalEthJackpotRecieved = SafeMath.add(totalEthJackpotRecieved,ethToPay)

IRs:
TMP_9(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalEthJackpotRecieved', 'ethToPay'] 
totalEthJackpotRecieved(uint256) := TMP_9(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! giveEthJackpotAddress.call.value(ethToPay).gas(400000)()

IRs:
TMP_12(bool) = LOW_LEVEL_CALL, dest:giveEthJackpotAddress, function:call, arguments:[] value:ethToPay gas:400000
TMP_13 = UnaryType.BANG TMP_12 
CONDITION TMP_13"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalEthJackpotRecieved = SafeMath.sub(totalEthJackpotRecieved,ethToPay)

IRs:
TMP_14(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalEthJackpotRecieved', 'ethToPay'] 
totalEthJackpotRecieved(uint256) := TMP_14(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 1347.sol-Elyxr-purchaseInternal(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
purchaseEthereum = _incomingEthereum

IRs:
purchaseEthereum(uint256) := _incomingEthereum(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
purchaseEthereum > 4000000000000000000

IRs:
TMP_127(bool) = purchaseEthereum > 4000000000000000000
CONDITION TMP_127"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
SafeMath.sub(address(this).balance,purchaseEthereum) <= 100000000000000000000

IRs:
TMP_128 = CONVERT this to address
TMP_129(uint256) = SOLIDITY_CALL balance(address)(TMP_128)
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_129', 'purchaseEthereum'] 
TMP_131(bool) = TMP_130 <= 100000000000000000000
CONDITION TMP_131"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
purchaseEthereum = 4000000000000000000

IRs:
purchaseEthereum(uint256) := 4000000000000000000(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
excess = SafeMath.sub(_incomingEthereum,purchaseEthereum)

IRs:
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_incomingEthereum', 'purchaseEthereum'] 
excess(uint256) := TMP_132(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
purchaseTokens(purchaseEthereum,_referredBy)

IRs:
TMP_133(uint256) = INTERNAL_CALL, Elyxr.purchaseTokens(uint256,address)(purchaseEthereum,_referredBy)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
excess > 0

IRs:
TMP_134(bool) = excess > 0
CONDITION TMP_134"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
msg.sender.transfer(excess)

IRs:
Transfer dest:msg.sender value:excess"];
11->12;
12[label="Node Type: END_IF 12
"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
notContract()

IRs:
MODIFIER_CALL, Elyxr.notContract()()"];
13->1;
}
// Function: 1347.sol-Elyxr-purchaseTokens(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->26;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum,dividendFee_),100)

IRs:
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_incomingEthereum', 'dividendFee_'] 
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_137', '100'] 
_undividedDividends(uint256) := TMP_138(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_referralBonus = SafeMath.div(_undividedDividends,3)

IRs:
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_undividedDividends', '3'] 
_referralBonus(uint256) := TMP_139(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_jackpotPayout = SafeMath.div(SafeMath.mul(_incomingEthereum,jackpotFee_),100)

IRs:
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_incomingEthereum', 'jackpotFee_'] 
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_140', '100'] 
_jackpotPayout(uint256) := TMP_141(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_dividends = SafeMath.sub(_undividedDividends,_referralBonus)

IRs:
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_undividedDividends', '_referralBonus'] 
_dividends(uint256) := TMP_142(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum,_undividedDividends),_jackpotPayout)

IRs:
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_incomingEthereum', '_undividedDividends'] 
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_143', '_jackpotPayout'] 
_taxedEthereum(uint256) := TMP_144(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalEthJackpotCollected = SafeMath.add(totalEthJackpotCollected,_jackpotPayout)

IRs:
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalEthJackpotCollected', '_jackpotPayout'] 
totalEthJackpotCollected(uint256) := TMP_145(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_amountOfTokens = ethereumToTokens_(_taxedEthereum)

IRs:
TMP_146(uint256) = INTERNAL_CALL, Elyxr.ethereumToTokens_(uint256)(_taxedEthereum)
_amountOfTokens(uint256) := TMP_146(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_fee = _dividends * magnitude

IRs:
TMP_147(uint256) = _dividends * magnitude
_fee(uint256) := TMP_147(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_))

IRs:
TMP_148(bool) = _amountOfTokens > 0
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_amountOfTokens', 'tokenSupply_'] 
TMP_150(bool) = TMP_149 > tokenSupply_
TMP_151(bool) = TMP_148 && TMP_150
TMP_152(None) = SOLIDITY_CALL require(bool)(TMP_151)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_referredBy != 0x0000000000000000000000000000000000000000 && _referredBy != msg.sender && tokenBalanceLedger_[_referredBy] >= stakingRequirement

IRs:
TMP_153(bool) = _referredBy != 0
TMP_154(bool) = _referredBy != msg.sender
TMP_155(bool) = TMP_153 && TMP_154
REF_91(uint256) -> tokenBalanceLedger_[_referredBy]
TMP_156(bool) = REF_91 >= stakingRequirement
TMP_157(bool) = TMP_155 && TMP_156
CONDITION TMP_157"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy],_referralBonus)

IRs:
REF_92(uint256) -> referralBalance_[_referredBy]
REF_94(uint256) -> referralBalance_[_referredBy]
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_94', '_referralBonus'] 
REF_92(uint256) (->referralBalance_) := TMP_158(uint256)"];
11->14;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_dividends = SafeMath.add(_dividends,_referralBonus)

IRs:
TMP_159(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_dividends', '_referralBonus'] 
_dividends(uint256) := TMP_159(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_fee = _dividends * magnitude

IRs:
TMP_160(uint256) = _dividends * magnitude
_fee(uint256) := TMP_160(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
tokenSupply_ > 0

IRs:
TMP_161(bool) = tokenSupply_ > 0
CONDITION TMP_161"];
15->16[label="True"];
15->19[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
tokenSupply_ = SafeMath.add(tokenSupply_,_amountOfTokens)

IRs:
TMP_162(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokenSupply_', '_amountOfTokens'] 
tokenSupply_(uint256) := TMP_162(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
profitPerShare_ += (_dividends * magnitude / (tokenSupply_))

IRs:
TMP_163(uint256) = _dividends * magnitude
TMP_164(uint256) = TMP_163 / tokenSupply_
profitPerShare_(uint256) = profitPerShare_ + TMP_164"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / (tokenSupply_))))

IRs:
TMP_165(uint256) = _dividends * magnitude
TMP_166(uint256) = TMP_165 / tokenSupply_
TMP_167(uint256) = _amountOfTokens * TMP_166
TMP_168(uint256) = _fee - TMP_167
TMP_169(uint256) = _fee - TMP_168
_fee(uint256) := TMP_169(uint256)"];
18->20;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
tokenSupply_ = _amountOfTokens

IRs:
tokenSupply_(uint256) := _amountOfTokens(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender],_amountOfTokens)

IRs:
REF_97(uint256) -> tokenBalanceLedger_[msg.sender]
REF_99(uint256) -> tokenBalanceLedger_[msg.sender]
TMP_170(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_99', '_amountOfTokens'] 
REF_97(uint256) (->tokenBalanceLedger_) := TMP_170(uint256)"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
_updatedPayouts = int256((profitPerShare_ * _amountOfTokens) - _fee)

IRs:
TMP_171(uint256) = profitPerShare_ * _amountOfTokens
TMP_172(uint256) = TMP_171 - _fee
TMP_173 = CONVERT TMP_172 to int256
_updatedPayouts(int256) := TMP_173(int256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
payoutsTo_[msg.sender] += _updatedPayouts

IRs:
REF_100(int256) -> payoutsTo_[msg.sender]
REF_100(-> payoutsTo_) = REF_100 + _updatedPayouts"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
onTokenPurchase(msg.sender,_incomingEthereum,_amountOfTokens,_referredBy)

IRs:
Emit onTokenPurchase(msg.sender,_incomingEthereum,_amountOfTokens,_referredBy)"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
_amountOfTokens

IRs:
RETURN _amountOfTokens"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
antiEarlyWhale(_incomingEthereum)

IRs:
MODIFIER_CALL, Elyxr.antiEarlyWhale(uint256)(_incomingEthereum)"];
26->1;
}
// Function: 1347.sol-Elyxr-reinvest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_dividends = myDividends(false)

IRs:
TMP_15(uint256) = INTERNAL_CALL, Elyxr.myDividends(bool)(False)
_dividends(uint256) := TMP_15(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
payoutsTo_[_customerAddress] += int256(_dividends * magnitude)

IRs:
REF_13(int256) -> payoutsTo_[_customerAddress]
TMP_16(uint256) = _dividends * magnitude
TMP_17 = CONVERT TMP_16 to int256
REF_13(-> payoutsTo_) = REF_13 + TMP_17"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_dividends += referralBalance_[_customerAddress]

IRs:
REF_14(uint256) -> referralBalance_[_customerAddress]
_dividends(uint256) = _dividends + REF_14"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
referralBalance_[_customerAddress] = 0

IRs:
REF_15(uint256) -> referralBalance_[_customerAddress]
REF_15(uint256) (->referralBalance_) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_tokens = purchaseTokens(_dividends,0x0)

IRs:
TMP_18(uint256) = INTERNAL_CALL, Elyxr.purchaseTokens(uint256,address)(_dividends,0)
_tokens(uint256) := TMP_18(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onReinvestment(_customerAddress,_dividends,_tokens)

IRs:
Emit onReinvestment(_customerAddress,_dividends,_tokens)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyStronghands()

IRs:
MODIFIER_CALL, Elyxr.onlyStronghands()()"];
8->1;
}
// Function: 1347.sol-Elyxr-sell(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amountOfTokens <= tokenBalanceLedger_[_customerAddress])

IRs:
REF_21(uint256) -> tokenBalanceLedger_[_customerAddress]
TMP_30(bool) = _amountOfTokens <= REF_21
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_tokens = _amountOfTokens

IRs:
_tokens(uint256) := _amountOfTokens(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_ethereum = tokensToEthereum_(_tokens)

IRs:
TMP_32(uint256) = INTERNAL_CALL, Elyxr.tokensToEthereum_(uint256)(_tokens)
_ethereum(uint256) := TMP_32(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_dividends = SafeMath.div(SafeMath.mul(_ethereum,dividendFee_),100)

IRs:
TMP_33(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ethereum', 'dividendFee_'] 
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_33', '100'] 
_dividends(uint256) := TMP_34(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_jackpotPayout = SafeMath.div(SafeMath.mul(_ethereum,jackpotFee_),100)

IRs:
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ethereum', 'jackpotFee_'] 
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_35', '100'] 
_jackpotPayout(uint256) := TMP_36(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum,_dividends),_jackpotPayout)

IRs:
TMP_37(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_ethereum', '_dividends'] 
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_37', '_jackpotPayout'] 
_taxedEthereum(uint256) := TMP_38(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalEthJackpotCollected = SafeMath.add(totalEthJackpotCollected,_jackpotPayout)

IRs:
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalEthJackpotCollected', '_jackpotPayout'] 
totalEthJackpotCollected(uint256) := TMP_39(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
tokenSupply_ = SafeMath.sub(tokenSupply_,_tokens)

IRs:
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokenSupply_', '_tokens'] 
tokenSupply_(uint256) := TMP_40(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress],_tokens)

IRs:
REF_30(uint256) -> tokenBalanceLedger_[_customerAddress]
REF_32(uint256) -> tokenBalanceLedger_[_customerAddress]
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_32', '_tokens'] 
REF_30(uint256) (->tokenBalanceLedger_) := TMP_41(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_updatedPayouts = int256(profitPerShare_ * _tokens + (_taxedEthereum * magnitude))

IRs:
TMP_42(uint256) = profitPerShare_ * _tokens
TMP_43(uint256) = _taxedEthereum * magnitude
TMP_44(uint256) = TMP_42 + TMP_43
TMP_45 = CONVERT TMP_44 to int256
_updatedPayouts(int256) := TMP_45(int256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
payoutsTo_[_customerAddress] -= _updatedPayouts

IRs:
REF_33(int256) -> payoutsTo_[_customerAddress]
REF_33(-> payoutsTo_) = REF_33 - _updatedPayouts"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
tokenSupply_ > 0

IRs:
TMP_46(bool) = tokenSupply_ > 0
CONDITION TMP_46"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
profitPerShare_ = SafeMath.add(profitPerShare_,(_dividends * magnitude) / tokenSupply_)

IRs:
TMP_47(uint256) = _dividends * magnitude
TMP_48(uint256) = TMP_47 / tokenSupply_
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['profitPerShare_', 'TMP_48'] 
profitPerShare_(uint256) := TMP_49(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onTokenSell(_customerAddress,_tokens,_taxedEthereum)

IRs:
Emit onTokenSell(_customerAddress,_tokens,_taxedEthereum)"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
onlyBagholders()

IRs:
MODIFIER_CALL, Elyxr.onlyBagholders()()"];
17->1;
}
// Function: 1347.sol-Elyxr-sellPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
tokenSupply_ == 0

IRs:
TMP_92(bool) = tokenSupply_ == 0
CONDITION TMP_92"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
tokenPriceInitial_ - tokenPriceIncremental_

IRs:
TMP_93(uint256) = tokenPriceInitial_ - tokenPriceIncremental_
RETURN TMP_93"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_ethereum = tokensToEthereum_(1e18)

IRs:
TMP_94(uint256) = INTERNAL_CALL, Elyxr.tokensToEthereum_(uint256)(1000000000000000000)
_ethereum(uint256) := TMP_94(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_dividends = SafeMath.div(SafeMath.mul(_ethereum,dividendFee_),100)

IRs:
TMP_95(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ethereum', 'dividendFee_'] 
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_95', '100'] 
_dividends(uint256) := TMP_96(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_jackpotPayout = SafeMath.div(SafeMath.mul(_ethereum,jackpotFee_),100)

IRs:
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ethereum', 'jackpotFee_'] 
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_97', '100'] 
_jackpotPayout(uint256) := TMP_98(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum,_dividends),_jackpotPayout)

IRs:
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_ethereum', '_dividends'] 
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_99', '_jackpotPayout'] 
_taxedEthereum(uint256) := TMP_100(uint256)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
_taxedEthereum

IRs:
RETURN _taxedEthereum"];
}
// Function: 1347.sol-Elyxr-setAdministrator(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
administrators[_identifier] = _status

IRs:
REF_46(bool) -> administrators[_identifier]
REF_46(bool) (->administrators) := _status(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdministrator()

IRs:
MODIFIER_CALL, Elyxr.onlyAdministrator()()"];
2->1;
}
// Function: 1347.sol-Elyxr-setCanAcceptTokens(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
canAcceptTokens_[_address] = _value

IRs:
REF_47(bool) -> canAcceptTokens_[_address]
REF_47(bool) (->canAcceptTokens_) := _value(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdministrator()

IRs:
MODIFIER_CALL, Elyxr.onlyAdministrator()()"];
2->1;
}
// Function: 1347.sol-Elyxr-setName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdministrator()

IRs:
MODIFIER_CALL, Elyxr.onlyAdministrator()()"];
2->1;
}
// Function: 1347.sol-Elyxr-setStakingRequirement(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stakingRequirement = _amountOfTokens

IRs:
stakingRequirement(uint256) := _amountOfTokens(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdministrator()

IRs:
MODIFIER_CALL, Elyxr.onlyAdministrator()()"];
2->1;
}
// Function: 1347.sol-Elyxr-setSymbol(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyAdministrator()

IRs:
MODIFIER_CALL, Elyxr.onlyAdministrator()()"];
2->1;
}
// Function: 1347.sol-Elyxr-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
dividendFee_ = 10

IRs:
dividendFee_(uint8) := 10(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
jackpotFee_ = 5

IRs:
jackpotFee_(uint8) := 5(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
tokenPriceInitial_ = 10000000000

IRs:
tokenPriceInitial_(uint256) := 10000000000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
tokenPriceIncremental_ = 1000000000

IRs:
tokenPriceIncremental_(uint256) := 1000000000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
magnitude = 2 ** 64

IRs:
TMP_216(uint256) = 2 ** 64
magnitude(uint256) := TMP_216(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
giveEthJackpotAddress = 0x083EA7627ED7F4b48E7aFA3AF552cd30B2Dff3af

IRs:
giveEthJackpotAddress(address) := 47069153636926211548392244682227725619926397871(address)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
ambassadorMaxPurchase_ = 500000000000000000

IRs:
ambassadorMaxPurchase_(uint256) := 500000000000000000(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
ambassadorQuota_ = 3000000000000000000

IRs:
ambassadorQuota_(uint256) := 3000000000000000000(uint256)"];
}
// Function: 1347.sol-Elyxr-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Elyxr

IRs:
name(string) := Elyxr(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = ELXR

IRs:
symbol(string) := ELXR(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
stakingRequirement = 30e18

IRs:
stakingRequirement(uint256) := 30000000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
tokenSupply_ = 0

IRs:
tokenSupply_(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
onlyAmbassadors = true

IRs:
onlyAmbassadors(bool) := True(bool)"];
}
// Function: 1347.sol-Elyxr-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = (x + 1) / 2

IRs:
TMP_210(uint256) = x + 1
TMP_211(uint256) = TMP_210 / 2
z(uint256) := TMP_211(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_212(bool) = z < y
CONDITION TMP_212"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = (x / z + z) / 2

IRs:
TMP_213(uint256) = x / z
TMP_214(uint256) = TMP_213 + z
TMP_215(uint256) = TMP_214 / 2
z(uint256) := TMP_215(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1347.sol-Elyxr-tokensToEthereum_(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokens_ = (_tokens + 1e18)

IRs:
TMP_195(uint256) = _tokens + 1000000000000000000
tokens_(uint256) := TMP_195(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_tokenSupply = (tokenSupply_ + 1e18)

IRs:
TMP_196(uint256) = tokenSupply_ + 1000000000000000000
_tokenSupply(uint256) := TMP_196(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_etherReceived = (SafeMath.sub((((tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))) - tokenPriceIncremental_) * (tokens_ - 1e18)),(tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2) / 1e18)

IRs:
TMP_197(uint256) = _tokenSupply / 1000000000000000000
TMP_198(uint256) = tokenPriceIncremental_ * TMP_197
TMP_199(uint256) = tokenPriceInitial_ + TMP_198
TMP_200(uint256) = TMP_199 - tokenPriceIncremental_
TMP_201(uint256) = tokens_ - 1000000000000000000
TMP_202(uint256) = TMP_200 * TMP_201
TMP_203(uint256) = tokens_ ** 2
TMP_204(uint256) = TMP_203 - tokens_
TMP_205(uint256) = TMP_204 / 1000000000000000000
TMP_206(uint256) = tokenPriceIncremental_ * TMP_205
TMP_207(uint256) = TMP_206 / 2
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_202', 'TMP_207'] 
TMP_209(uint256) = TMP_208 / 1000000000000000000
_etherReceived(uint256) := TMP_209(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
_etherReceived

IRs:
RETURN _etherReceived"];
}
// Function: 1347.sol-Elyxr-totalEthereumBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
this.balance

IRs:
REF_48(uint256) = SOLIDITY_CALL balance(address)(this)
RETURN REF_48"];
}
// Function: 1347.sol-Elyxr-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tokenSupply_

IRs:
RETURN tokenSupply_"];
}
// Function: 1347.sol-Elyxr-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amountOfTokens <= tokenBalanceLedger_[_customerAddress])

IRs:
REF_35(uint256) -> tokenBalanceLedger_[_customerAddress]
TMP_52(bool) = _amountOfTokens <= REF_35
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
myDividends(true) > 0

IRs:
TMP_54(uint256) = INTERNAL_CALL, Elyxr.myDividends(bool)(True)
TMP_55(bool) = TMP_54 > 0
CONDITION TMP_55"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
withdraw()

IRs:
INTERNAL_CALL, Elyxr.withdraw()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress],_amountOfTokens)

IRs:
REF_36(uint256) -> tokenBalanceLedger_[_customerAddress]
REF_38(uint256) -> tokenBalanceLedger_[_customerAddress]
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_38', '_amountOfTokens'] 
REF_36(uint256) (->tokenBalanceLedger_) := TMP_57(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress],_amountOfTokens)

IRs:
REF_39(uint256) -> tokenBalanceLedger_[_toAddress]
REF_41(uint256) -> tokenBalanceLedger_[_toAddress]
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_41', '_amountOfTokens'] 
REF_39(uint256) (->tokenBalanceLedger_) := TMP_58(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
payoutsTo_[_customerAddress] -= int256(profitPerShare_ * _amountOfTokens)

IRs:
REF_42(int256) -> payoutsTo_[_customerAddress]
TMP_59(uint256) = profitPerShare_ * _amountOfTokens
TMP_60 = CONVERT TMP_59 to int256
REF_42(-> payoutsTo_) = REF_42 - TMP_60"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
payoutsTo_[_toAddress] += int256(profitPerShare_ * _amountOfTokens)

IRs:
REF_43(int256) -> payoutsTo_[_toAddress]
TMP_61(uint256) = profitPerShare_ * _amountOfTokens
TMP_62 = CONVERT TMP_61 to int256
REF_43(-> payoutsTo_) = REF_43 + TMP_62"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(_customerAddress,_toAddress,_amountOfTokens)

IRs:
Emit Transfer(_customerAddress,_toAddress,_amountOfTokens)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyBagholders()

IRs:
MODIFIER_CALL, Elyxr.onlyBagholders()()"];
12->1;
}
// Function: 1347.sol-Elyxr-transferAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_65 = CONVERT 0 to address
TMP_66(bool) = _to != TMP_65
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(canAcceptTokens_[_to] == true)

IRs:
REF_44(bool) -> canAcceptTokens_[_to]
TMP_68(bool) = REF_44 == True
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(transfer(_to,_value))

IRs:
TMP_70(bool) = INTERNAL_CALL, Elyxr.transfer(address,uint256)(_to,_value)
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
isContract(_to)

IRs:
TMP_72(bool) = INTERNAL_CALL, Elyxr.isContract(address)(_to)
CONDITION TMP_72"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
receiver = AcceptsElyxr(_to)

IRs:
TMP_73 = CONVERT _to to AcceptsElyxr
receiver(AcceptsElyxr) := TMP_73(AcceptsElyxr)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(receiver.tokenFallback(msg.sender,_value,_data))

IRs:
TMP_74(bool) = HIGH_LEVEL_CALL, dest:receiver(AcceptsElyxr), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1347.sol-Elyxr-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_customerAddress = msg.sender

IRs:
_customerAddress(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_dividends = myDividends(false)

IRs:
TMP_24(uint256) = INTERNAL_CALL, Elyxr.myDividends(bool)(False)
_dividends(uint256) := TMP_24(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
payoutsTo_[_customerAddress] += int256(_dividends * magnitude)

IRs:
REF_17(int256) -> payoutsTo_[_customerAddress]
TMP_25(uint256) = _dividends * magnitude
TMP_26 = CONVERT TMP_25 to int256
REF_17(-> payoutsTo_) = REF_17 + TMP_26"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_dividends += referralBalance_[_customerAddress]

IRs:
REF_18(uint256) -> referralBalance_[_customerAddress]
_dividends(uint256) = _dividends + REF_18"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
referralBalance_[_customerAddress] = 0

IRs:
REF_19(uint256) -> referralBalance_[_customerAddress]
REF_19(uint256) (->referralBalance_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_customerAddress.transfer(_dividends)

IRs:
Transfer dest:_customerAddress value:_dividends"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onWithdraw(_customerAddress,_dividends)

IRs:
Emit onWithdraw(_customerAddress,_dividends)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyStronghands()

IRs:
MODIFIER_CALL, Elyxr.onlyStronghands()()"];
8->1;
}
// Function: 1347.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_245(uint256) = a + b
c(uint256) := TMP_245(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_246(bool) = c >= a
TMP_247(None) = SOLIDITY_CALL assert(bool)(TMP_246)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1347.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_241(uint256) = a / b
c(uint256) := TMP_241(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1347.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_236(bool) = a == 0
CONDITION TMP_236"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_237(uint256) = a * b
c(uint256) := TMP_237(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_238(uint256) = c / a
TMP_239(bool) = TMP_238 == b
TMP_240(None) = SOLIDITY_CALL assert(bool)(TMP_239)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1347.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_242(bool) = b <= a
TMP_243(None) = SOLIDITY_CALL assert(bool)(TMP_242)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_244(uint256) = a - b
RETURN TMP_244"];
}
}
