digraph G {
// Function: 1403.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 1403.sol-RUNEToken-RUNEToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances_[msg.sender] = totalSupply

IRs:
REF_0(uint256) -> balances_[msg.sender]
REF_0(uint256) (->balances_) := totalSupply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(address(0),msg.sender,totalSupply)

IRs:
TMP_20 = CONVERT 0 to address
Emit Transfer(TMP_20,msg.sender,totalSupply)"];
}
// Function: 1403.sol-RUNEToken-_transfer(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to != 0x0)

IRs:
TMP_46(bool) = to != 0
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances_[from] >= value)

IRs:
REF_15(uint256) -> balances_[from]
TMP_48(bool) = REF_15 >= value
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances_[to] + value > balances_[to])

IRs:
REF_16(uint256) -> balances_[to]
TMP_50(uint256) = REF_16 + value
REF_17(uint256) -> balances_[to]
TMP_51(bool) = TMP_50 > REF_17
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances_[from] -= value

IRs:
REF_18(uint256) -> balances_[from]
REF_18(-> balances_) = REF_18 - value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances_[to] += value

IRs:
REF_19(uint256) -> balances_[to]
REF_19(-> balances_) = REF_19 + value"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
empty = data

IRs:
empty(bytes) := data(bytes)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(from,to,value)

IRs:
Emit Transfer(from,to,value)"];
}
// Function: 1403.sol-RUNEToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowances_[owner][spender]

IRs:
REF_6(mapping(address => uint256)) -> allowances_[owner]
REF_7(uint256) -> REF_6[spender]
RETURN REF_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 1403.sol-RUNEToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowances_[msg.sender][spender] = value

IRs:
REF_2(mapping(address => uint256)) -> allowances_[msg.sender]
REF_3(uint256) -> REF_2[spender]
REF_3(uint256) (->allowances_) := value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,value)

IRs:
Emit Approval(msg.sender,spender,value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1403.sol-RUNEToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances_[owner]

IRs:
REF_1(uint256) -> balances_[owner]
RETURN REF_1"];
}
// Function: 1403.sol-RUNEToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances_[msg.sender] >= value)

IRs:
REF_20(uint256) -> balances_[msg.sender]
TMP_54(bool) = REF_20 >= value
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances_[msg.sender] -= value

IRs:
REF_21(uint256) -> balances_[msg.sender]
REF_21(-> balances_) = REF_21 - value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply -= value

IRs:
totalSupply(uint256) = totalSupply - value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(msg.sender,value)

IRs:
Emit Burn(msg.sender,value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1403.sol-RUNEToken-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances_[from] >= value)

IRs:
REF_22(uint256) -> balances_[from]
TMP_57(bool) = REF_22 >= value
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(value <= allowances_[from][msg.sender])

IRs:
REF_23(mapping(address => uint256)) -> allowances_[from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_59(bool) = value <= REF_24
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances_[from] -= value

IRs:
REF_25(uint256) -> balances_[from]
REF_25(-> balances_) = REF_25 - value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowances_[from][msg.sender] -= value

IRs:
REF_26(mapping(address => uint256)) -> allowances_[from]
REF_27(uint256) -> REF_26[msg.sender]
REF_27(-> allowances_) = REF_27 - value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply -= value

IRs:
totalSupply(uint256) = totalSupply - value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(from,value)

IRs:
Emit Burn(from,value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1403.sol-RUNEToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_22(None) = SOLIDITY_CALL revert()()"];
}
// Function: 1403.sol-RUNEToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_45(bool) = length > 0
RETURN TMP_45"];
}
// Function: 1403.sol-RUNEToken-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_18(bool) = a >= b
CONDITION TMP_18"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1403.sol-RUNEToken-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_16(bool) = a >= b
CONDITION TMP_16"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1403.sol-RUNEToken-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_19(bool) = a < b
CONDITION TMP_19"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1403.sol-RUNEToken-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_17(bool) = a < b
CONDITION TMP_17"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1403.sol-RUNEToken-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_13(uint256) = a + b
c(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_14(bool) = c >= a
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1403.sol-RUNEToken-safeApprove(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
allowances_[msg.sender][_spender] == _currentValue

IRs:
REF_4(mapping(address => uint256)) -> allowances_[msg.sender]
REF_5(uint256) -> REF_4[_spender]
TMP_24(bool) = REF_5 == _currentValue
CONDITION TMP_24"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_25(bool) = INTERNAL_CALL, RUNEToken.approve(address,uint256)(_spender,_value)
RETURN TMP_25"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1403.sol-RUNEToken-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_10(bool) = b <= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_12(uint256) = a - b
RETURN TMP_12"];
}
// Function: 1403.sol-RUNEToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Rune

IRs:
name(string) := Rune(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = RUNE

IRs:
symbol(string) := RUNE(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
totalSupply = 1000000000 * (10 ** decimals)

IRs:
TMP_62(uint256) = 10 ** decimals
TMP_63(uint256) = 1000000000 * TMP_62
totalSupply(uint256) := TMP_63(uint256)"];
}
// Function: 1403.sol-RUNEToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_transfer(msg.sender,to,value,empty)

IRs:
INTERNAL_CALL, RUNEToken._transfer(address,address,uint256,bytes)(msg.sender,to,value,empty)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1403.sol-RUNEToken-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(to)

IRs:
TMP_39(bool) = INTERNAL_CALL, RUNEToken.isContract(address)(to)
CONDITION TMP_39"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
transferToContract(to,value,data)

IRs:
TMP_40(bool) = INTERNAL_CALL, RUNEToken.transferToContract(address,uint256,bytes)(to,value,data)
RETURN TMP_40"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_transfer(msg.sender,to,value,data)

IRs:
INTERNAL_CALL, RUNEToken._transfer(address,address,uint256,bytes)(msg.sender,to,value,data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1403.sol-RUNEToken-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,to,value,data)

IRs:
INTERNAL_CALL, RUNEToken._transfer(address,address,uint256,bytes)(msg.sender,to,value,data)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(to)

IRs:
TMP_31(bool) = INTERNAL_CALL, RUNEToken.isContract(address)(to)
CONDITION TMP_31"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
rx = ContractReceiver(to)

IRs:
TMP_32 = CONVERT to to ContractReceiver
rx(ContractReceiver) := TMP_32(ContractReceiver)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(address(rx).call.value(0)(bytes4(keccak256()(custom_fallback)),msg.sender,value,data))

IRs:
TMP_33 = CONVERT rx to address
TMP_35(bytes32) = SOLIDITY_CALL keccak256()(custom_fallback)
TMP_36 = CONVERT TMP_35 to bytes4
TMP_37(bool) = LOW_LEVEL_CALL, dest:TMP_33, function:call, arguments:['TMP_36', 'msg.sender', 'value', 'data'] value:0 
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1403.sol-RUNEToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(value <= allowances_[from][msg.sender])

IRs:
REF_8(mapping(address => uint256)) -> allowances_[from]
REF_9(uint256) -> REF_8[msg.sender]
TMP_27(bool) = value <= REF_9
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowances_[from][msg.sender] -= value

IRs:
REF_10(mapping(address => uint256)) -> allowances_[from]
REF_11(uint256) -> REF_10[msg.sender]
REF_11(-> allowances_) = REF_11 - value"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_transfer(from,to,value,empty)

IRs:
INTERNAL_CALL, RUNEToken._transfer(address,address,uint256,bytes)(from,to,value,empty)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1403.sol-RUNEToken-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(msg.sender,to,value,data)

IRs:
INTERNAL_CALL, RUNEToken._transfer(address,address,uint256,bytes)(msg.sender,to,value,data)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
rx = ContractReceiver(to)

IRs:
TMP_43 = CONVERT to to ContractReceiver
rx(ContractReceiver) := TMP_43(ContractReceiver)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rx.tokenFallback(msg.sender,value,data)

IRs:
HIGH_LEVEL_CALL, dest:rx(ContractReceiver), function:tokenFallback, arguments:['msg.sender', 'value', 'data']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1403.sol-SafeMath-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_8(bool) = a >= b
CONDITION TMP_8"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1403.sol-SafeMath-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_6(bool) = a >= b
CONDITION TMP_6"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1403.sol-SafeMath-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_9(bool) = a < b
CONDITION TMP_9"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1403.sol-SafeMath-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_7(bool) = a < b
CONDITION TMP_7"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 1403.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_3(uint256) = a + b
c(uint256) := TMP_3(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_4(bool) = c >= a
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1403.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_0(bool) = b <= a
TMP_1(None) = SOLIDITY_CALL assert(bool)(TMP_0)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_2(uint256) = a - b
RETURN TMP_2"];
}
}
