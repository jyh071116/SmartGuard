digraph G {
// Function: 1430.sol-ERC-allowance(address,address)
digraph{
}
// Function: 1430.sol-ERC-approve(address,uint256)
digraph{
}
// Function: 1430.sol-ERC-balanceOf(address)
digraph{
}
// Function: 1430.sol-ERC-transfer(address,uint256)
digraph{
}
// Function: 1430.sol-ERC-transferAndCall(address,uint256,bytes)
digraph{
}
// Function: 1430.sol-ERC-transferFrom(address,address,uint256)
digraph{
}
// Function: 1430.sol-FsTKerWallet-approveERC(ERC,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
erc.approve(_spender,_value)

IRs:
TMP_28(bool) = HIGH_LEVEL_CALL, dest:erc(ERC), function:approve, arguments:['_spender', '_value']  
RETURN TMP_28"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, FsTKerWallet.onlyOwner()()"];
2->1;
}
// Function: 1430.sol-FsTKerWallet-approveFST(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
FST.approve(_spender,_value)

IRs:
TMP_26(bool) = HIGH_LEVEL_CALL, dest:FST(ERC), function:approve, arguments:['_spender', '_value']  
RETURN TMP_26"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, FsTKerWallet.onlyOwner()()"];
2->1;
}
// Function: 1430.sol-FsTKerWallet-callContract(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to.call.value(msg.value)(data))

IRs:
TMP_47(bool) = LOW_LEVEL_CALL, dest:to, function:call, arguments:['data'] value:msg.value 
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, FsTKerWallet.onlyOwner()()"];
3->1;
}
// Function: 1430.sol-FsTKerWallet-constructor(ERC,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
FST = _FST

IRs:
FST(ERC) := _FST(ERC)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
secretHash = _secretHash

IRs:
secretHash(bytes32) := _secretHash(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
sn = _sn

IRs:
sn(uint256) := _sn(uint256)"];
}
// Function: 1430.sol-FsTKerWallet-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 1430.sol-FsTKerWallet-getERCBalance(ERC)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
erc.balanceOf(address(this))

IRs:
TMP_4 = CONVERT this to address
TMP_5(uint256) = HIGH_LEVEL_CALL, dest:erc(ERC), function:balanceOf, arguments:['TMP_4']  
RETURN TMP_5"];
}
// Function: 1430.sol-FsTKerWallet-getETHBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
address(this).balance

IRs:
TMP_2 = CONVERT this to address
TMP_3(uint256) = SOLIDITY_CALL balance(address)(TMP_2)
RETURN TMP_3"];
}
// Function: 1430.sol-FsTKerWallet-getFSTBalance()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
FST.balanceOf(address(this))

IRs:
TMP_0 = CONVERT this to address
TMP_1(uint256) = HIGH_LEVEL_CALL, dest:FST(ERC), function:balanceOf, arguments:['TMP_0']  
RETURN TMP_1"];
}
// Function: 1430.sol-FsTKerWallet-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_50(bool) = msg.sender == owner
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1430.sol-FsTKerWallet-recoverAndSetSecretHash(string,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_newSecretHash != bytes32(0))

IRs:
TMP_30 = CONVERT 0 to bytes32
TMP_31(bool) = _newSecretHash != TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(keccak256()(abi.encodePacked(_secret)) == secretHash)

IRs:
TMP_33(bytes) = SOLIDITY_CALL abi.encodePacked()(_secret)
TMP_34(bytes32) = SOLIDITY_CALL keccak256()(TMP_33)
TMP_35(bool) = TMP_34 == secretHash
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
secretHash = _newSecretHash

IRs:
secretHash(bytes32) := _newSecretHash(bytes32)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 1430.sol-FsTKerWallet-setFST(ERC)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(address(_FST) != address(this) && address(_FST) != address(0x0))

IRs:
TMP_37 = CONVERT _FST to address
TMP_38 = CONVERT this to address
TMP_39(bool) = TMP_37 != TMP_38
TMP_40 = CONVERT _FST to address
TMP_41 = CONVERT 0 to address
TMP_42(bool) = TMP_40 != TMP_41
TMP_43(bool) = TMP_39 && TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FST = _FST

IRs:
FST(ERC) := _FST(ERC)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, FsTKerWallet.onlyOwner()()"];
4->1;
}
// Function: 1430.sol-FsTKerWallet-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
walletVersion = v1.0.0

IRs:
walletVersion(string) := v1.0.0(string)"];
}
// Function: 1430.sol-FsTKerWallet-transferAndCallERC(ERC,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(erc.transferAndCall.value(msg.value)(_to,_value,_data))

IRs:
TMP_23(bool) = HIGH_LEVEL_CALL, dest:erc(ERC), function:transferAndCall, arguments:['_to', '_value', '_data'] value:msg.value 
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, FsTKerWallet.onlyOwner()()"];
3->1;
}
// Function: 1430.sol-FsTKerWallet-transferAndCallFST(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(FST.transferAndCall.value(msg.value)(_to,_value,_data))

IRs:
TMP_19(bool) = HIGH_LEVEL_CALL, dest:FST(ERC), function:transferAndCall, arguments:['_to', '_value', '_data'] value:msg.value 
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, FsTKerWallet.onlyOwner()()"];
3->1;
}
// Function: 1430.sol-FsTKerWallet-transferERC(ERC,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
erc.transfer(_to,_value)

IRs:
TMP_12(bool) = HIGH_LEVEL_CALL, dest:erc(ERC), function:transfer, arguments:['_to', '_value']  
RETURN TMP_12"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, FsTKerWallet.onlyOwner()()"];
2->1;
}
// Function: 1430.sol-FsTKerWallet-transferETH(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_to.transfer(_value)

IRs:
Transfer dest:_to value:_value"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, FsTKerWallet.onlyOwner()()"];
3->1;
}
// Function: 1430.sol-FsTKerWallet-transferFST(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
FST.transfer(_to,_value)

IRs:
TMP_10(bool) = HIGH_LEVEL_CALL, dest:FST(ERC), function:transfer, arguments:['_to', '_value']  
RETURN TMP_10"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, FsTKerWallet.onlyOwner()()"];
2->1;
}
// Function: 1430.sol-FsTKerWallet-transferFromERC(ERC,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
erc.transferFrom(_from,_to,_value)

IRs:
TMP_16(bool) = HIGH_LEVEL_CALL, dest:erc(ERC), function:transferFrom, arguments:['_from', '_to', '_value']  
RETURN TMP_16"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, FsTKerWallet.onlyOwner()()"];
2->1;
}
// Function: 1430.sol-FsTKerWallet-transferFromFST(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
FST.transferFrom(_from,_to,_value)

IRs:
TMP_14(bool) = HIGH_LEVEL_CALL, dest:FST(ERC), function:transferFrom, arguments:['_from', '_to', '_value']  
RETURN TMP_14"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, FsTKerWallet.onlyOwner()()"];
2->1;
}
// Function: 1430.sol-FsTKerWallet-transferMoreETH(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_to.transfer(_value)

IRs:
Transfer dest:_to value:_value"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, FsTKerWallet.onlyOwner()()"];
3->1;
}
}
