digraph G {
// Function: 1556.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tkn.sender = _from

IRs:
REF_0(address) -> tkn.sender
REF_0(address) (->tkn) := _from(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tkn.value = _value

IRs:
REF_1(uint256) -> tkn.value
REF_1(uint256) (->tkn) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tkn.data = _data

IRs:
REF_2(bytes) -> tkn.data
REF_2(bytes) (->tkn) := _data(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24)

IRs:
REF_3(None) -> _data[3]
TMP_19 = CONVERT REF_3 to uint32
REF_4(None) -> _data[2]
TMP_20 = CONVERT REF_4 to uint32
TMP_21(uint32) = TMP_20 << 8
TMP_22(uint32) = TMP_19 + TMP_21
REF_5(None) -> _data[1]
TMP_23 = CONVERT REF_5 to uint32
TMP_24(uint32) = TMP_23 << 16
TMP_25(uint32) = TMP_22 + TMP_24
REF_6(None) -> _data[0]
TMP_26 = CONVERT REF_6 to uint32
TMP_27(uint32) = TMP_26 << 24
TMP_28(uint32) = TMP_25 + TMP_27
u(uint32) := TMP_28(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tkn.sig = bytes4(u)

IRs:
REF_7(bytes4) -> tkn.sig
TMP_29 = CONVERT u to bytes4
REF_7(bytes4) (->tkn) := TMP_29(bytes4)"];
}
// Function: 1556.sol-ERC223-balanceOf(address)
digraph{
}
// Function: 1556.sol-ERC223-decimals()
digraph{
}
// Function: 1556.sol-ERC223-name()
digraph{
}
// Function: 1556.sol-ERC223-symbol()
digraph{
}
// Function: 1556.sol-ERC223-totalSupply()
digraph{
}
// Function: 1556.sol-ERC223-transfer(address,uint256)
digraph{
}
// Function: 1556.sol-ERC223-transfer(address,uint256,bytes)
digraph{
}
// Function: 1556.sol-ERC223-transfer(address,uint256,bytes,string)
digraph{
}
// Function: 1556.sol-ERC223Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_17(uint256) -> balances[_owner]
RETURN REF_17"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 1556.sol-ERC223Token-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
decimals

IRs:
RETURN decimals"];
2[label="Node Type: RETURN 2

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 1556.sol-ERC223Token-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_63(bool) = length > 0
RETURN TMP_63"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 1556.sol-ERC223Token-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name

IRs:
RETURN name"];
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 1556.sol-ERC223Token-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x > MAX_UINT256 - y

IRs:
TMP_30(uint256) = MAX_UINT256 - y
TMP_31(bool) = x > TMP_30
CONDITION TMP_31"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_32(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x + y

IRs:
TMP_33(uint256) = x + y
RETURN TMP_33"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1556.sol-ERC223Token-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
y == 0

IRs:
TMP_37(bool) = y == 0
CONDITION TMP_37"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
x > MAX_UINT256 / y

IRs:
TMP_38(uint256) = MAX_UINT256 / y
TMP_39(bool) = x > TMP_38
CONDITION TMP_39"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_40(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
x * y

IRs:
TMP_41(uint256) = x * y
RETURN TMP_41"];
8[label="Node Type: RETURN 8

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1556.sol-ERC223Token-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x < y

IRs:
TMP_34(bool) = x < y
CONDITION TMP_34"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_35(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x - y

IRs:
TMP_36(uint256) = x - y
RETURN TMP_36"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1556.sol-ERC223Token-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

IRs:
MAX_UINT256(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)"];
}
// Function: 1556.sol-ERC223Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 24e9 * 1e8

IRs:
TMP_82(uint256) = 24000000000 * 100000000
totalSupply(uint256) := TMP_82(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = NIJIGEN

IRs:
name(string) := NIJIGEN(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = NIJ

IRs:
symbol(string) := NIJ(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
}
// Function: 1556.sol-ERC223Token-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol

IRs:
RETURN symbol"];
2[label="Node Type: RETURN 2

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 1556.sol-ERC223Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 1556.sol-ERC223Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_60(bool) = INTERNAL_CALL, ERC223Token.isContract(address)(_to)
CONDITION TMP_60"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(_to,_value,empty)

IRs:
TMP_61(bool) = INTERNAL_CALL, ERC223Token.transferToContract(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_61"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(_to,_value,empty)

IRs:
TMP_62(bool) = INTERNAL_CALL, ERC223Token.transferToAddress(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_62"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1556.sol-ERC223Token-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_57(bool) = INTERNAL_CALL, ERC223Token.isContract(address)(_to)
CONDITION TMP_57"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_58(bool) = INTERNAL_CALL, ERC223Token.transferToContract(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_58"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_59(bool) = INTERNAL_CALL, ERC223Token.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_59"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1556.sol-ERC223Token-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_42(bool) = INTERNAL_CALL, ERC223Token.isContract(address)(_to)
CONDITION TMP_42"];
1->2[label="True"];
1->10[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_43(uint256) = INTERNAL_CALL, ERC223Token.balanceOf(address)(msg.sender)
TMP_44(bool) = TMP_43 < _value
CONDITION TMP_44"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_45(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = safeSub(balanceOf(msg.sender),_value)

IRs:
REF_8(uint256) -> balances[msg.sender]
TMP_46(uint256) = INTERNAL_CALL, ERC223Token.balanceOf(address)(msg.sender)
TMP_47(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_46,_value)
REF_8(uint256) (->balances) := TMP_47(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = safeAdd(balanceOf(_to),_value)

IRs:
REF_9(uint256) -> balances[_to]
TMP_48(uint256) = INTERNAL_CALL, ERC223Token.balanceOf(address)(_to)
TMP_49(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_48,_value)
REF_9(uint256) (->balances) := TMP_49(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(_to.call.value(0)(bytes4(keccak256()(_custom_fallback)),msg.sender,_value,_data))

IRs:
TMP_51(bytes32) = SOLIDITY_CALL keccak256()(_custom_fallback)
TMP_52 = CONVERT TMP_51 to bytes4
TMP_53(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['TMP_52', 'msg.sender', '_value', '_data'] value:0 
TMP_54(None) = SOLIDITY_CALL assert(bool)(TMP_53)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_56(bool) = INTERNAL_CALL, ERC223Token.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_56"];
12[label="Node Type: RETURN 12

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1556.sol-ERC223Token-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_64(uint256) = INTERNAL_CALL, ERC223Token.balanceOf(address)(msg.sender)
TMP_65(bool) = TMP_64 < _value
CONDITION TMP_65"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_66(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = safeSub(balanceOf(msg.sender),_value)

IRs:
REF_12(uint256) -> balances[msg.sender]
TMP_67(uint256) = INTERNAL_CALL, ERC223Token.balanceOf(address)(msg.sender)
TMP_68(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_67,_value)
REF_12(uint256) (->balances) := TMP_68(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = safeAdd(balanceOf(_to),_value)

IRs:
REF_13(uint256) -> balances[_to]
TMP_69(uint256) = INTERNAL_CALL, ERC223Token.balanceOf(address)(_to)
TMP_70(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_69,_value)
REF_13(uint256) (->balances) := TMP_70(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1556.sol-ERC223Token-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_72(uint256) = INTERNAL_CALL, ERC223Token.balanceOf(address)(msg.sender)
TMP_73(bool) = TMP_72 < _value
CONDITION TMP_73"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_74(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = safeSub(balanceOf(msg.sender),_value)

IRs:
REF_14(uint256) -> balances[msg.sender]
TMP_75(uint256) = INTERNAL_CALL, ERC223Token.balanceOf(address)(msg.sender)
TMP_76(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_75,_value)
REF_14(uint256) (->balances) := TMP_76(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = safeAdd(balanceOf(_to),_value)

IRs:
REF_15(uint256) -> balances[_to]
TMP_77(uint256) = INTERNAL_CALL, ERC223Token.balanceOf(address)(_to)
TMP_78(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_77,_value)
REF_15(uint256) (->balances) := TMP_78(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_79 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_79(ContractReceiver)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 1556.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 1556.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1556.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 1556.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x > MAX_UINT256 - y

IRs:
TMP_0(uint256) = MAX_UINT256 - y
TMP_1(bool) = x > TMP_0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_2(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x + y

IRs:
TMP_3(uint256) = x + y
RETURN TMP_3"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1556.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
y == 0

IRs:
TMP_7(bool) = y == 0
CONDITION TMP_7"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
x > MAX_UINT256 / y

IRs:
TMP_8(uint256) = MAX_UINT256 / y
TMP_9(bool) = x > TMP_8
CONDITION TMP_9"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_10(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
x * y

IRs:
TMP_11(uint256) = x * y
RETURN TMP_11"];
8[label="Node Type: RETURN 8

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1556.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x < y

IRs:
TMP_4(bool) = x < y
CONDITION TMP_4"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_5(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x - y

IRs:
TMP_6(uint256) = x - y
RETURN TMP_6"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 1556.sol-SafeMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

IRs:
MAX_UINT256(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)"];
}
}
