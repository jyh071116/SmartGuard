digraph G {
// Function: 1753.sol-KeysCalc-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_keys.mul(10000000000000000) / 1e18

IRs:
TMP_381(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '10000000000000000'] 
TMP_382(uint256) = TMP_381 / 1000000000000000000
RETURN TMP_382"];
}
// Function: 1753.sol-KeysCalc-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_375(uint256) = INTERNAL_CALL, KeysCalc.eth(uint256)(_curKeys)
TMP_376(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_377(uint256) = INTERNAL_CALL, KeysCalc.eth(uint256)(TMP_376)
TMP_378(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_375', 'TMP_377'] 
RETURN TMP_378"];
}
// Function: 1753.sol-KeysCalc-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(_eth / 10000000000000000) * 1e18

IRs:
TMP_379(uint256) = _eth / 10000000000000000
TMP_380(uint256) = TMP_379 * 1000000000000000000
RETURN TMP_380"];
}
// Function: 1753.sol-KeysCalc-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_371(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_372(uint256) = INTERNAL_CALL, KeysCalc.keys(uint256)(TMP_371)
TMP_373(uint256) = INTERNAL_CALL, KeysCalc.keys(uint256)(_curEth)
TMP_374(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_372', 'TMP_373'] 
RETURN TMP_374"];
}
// Function: 1753.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_383 = CONVERT _input to bytes
_temp(bytes) := TMP_383(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_632 -> LENGTH _temp
_length(uint256) := REF_632(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_length <= 32 && _length > 0)

IRs:
TMP_384(bool) = _length <= 32
TMP_385(bool) = _length > 0
TMP_386(bool) = TMP_384 && TMP_385
TMP_387(None) = SOLIDITY_CALL require(bool)(TMP_386)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20)

IRs:
REF_633(None) -> _temp[0]
TMP_388(bool) = REF_633 != 32
TMP_389(uint256) = _length - 1
REF_634(None) -> _temp[TMP_389]
TMP_390(bool) = REF_634 != 32
TMP_391(bool) = TMP_388 && TMP_390
TMP_392(None) = SOLIDITY_CALL require(bool)(TMP_391)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_635(None) -> _temp[0]
TMP_393(bool) = REF_635 == 48
CONDITION TMP_393"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_temp[1] != 0x78)

IRs:
REF_636(None) -> _temp[1]
TMP_394(bool) = REF_636 != 120
TMP_395(None) = SOLIDITY_CALL require(bool)(TMP_394)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(_temp[1] != 0x58)

IRs:
REF_637(None) -> _temp[1]
TMP_396(bool) = REF_637 != 88
TMP_397(None) = SOLIDITY_CALL require(bool)(TMP_396)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_398(bool) = i < _length
CONDITION TMP_398"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_638(None) -> _temp[i]
TMP_399(bool) = REF_638 > 64
REF_639(None) -> _temp[i]
TMP_400(bool) = REF_639 < 91
TMP_401(bool) = TMP_399 && TMP_400
CONDITION TMP_401"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_640(bytes1) -> _temp[i]
REF_641(None) -> _temp[i]
TMP_402 = CONVERT REF_641 to uint256
TMP_403(uint256) = TMP_402 + 32
TMP_404 = CONVERT TMP_403 to bytes1
REF_640(bytes1) (->_temp) := TMP_404(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_405(bool) = _hasNonNumber == False
CONDITION TMP_405"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a))

IRs:
REF_642(None) -> _temp[i]
TMP_406(bool) = REF_642 == 32
REF_643(None) -> _temp[i]
TMP_407(bool) = REF_643 > 96
REF_644(None) -> _temp[i]
TMP_408(bool) = REF_644 < 123
TMP_409(bool) = TMP_407 && TMP_408
TMP_410(bool) = TMP_406 || TMP_409
REF_645(None) -> _temp[i]
TMP_411(bool) = REF_645 > 47
REF_646(None) -> _temp[i]
TMP_412(bool) = REF_646 < 58
TMP_413(bool) = TMP_411 && TMP_412
TMP_414(bool) = TMP_410 || TMP_413
TMP_415(None) = SOLIDITY_CALL require(bool)(TMP_414)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_647(None) -> _temp[i]
TMP_416(bool) = REF_647 == 32
CONDITION TMP_416"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool)(_temp[i + 1] != 0x20)

IRs:
TMP_417(uint256) = i + 1
REF_648(None) -> _temp[TMP_417]
TMP_418(bool) = REF_648 != 32
TMP_419(None) = SOLIDITY_CALL require(bool)(TMP_418)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_420(bool) = _hasNonNumber == False
REF_649(None) -> _temp[i]
TMP_421(bool) = REF_649 < 48
REF_650(None) -> _temp[i]
TMP_422(bool) = REF_650 > 57
TMP_423(bool) = TMP_421 || TMP_422
TMP_424(bool) = TMP_420 && TMP_423
CONDITION TMP_424"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_425(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool)(_hasNonNumber == true)

IRs:
TMP_426(bool) = _hasNonNumber == True
TMP_427(None) = SOLIDITY_CALL require(bool)(TMP_426)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 1753.sol-POOHMOX-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_345(bool) = msg.sender == admin
TMP_346(None) = SOLIDITY_CALL require(bool)(TMP_345)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(activated_ == false)

IRs:
TMP_347(bool) = activated_ == False
TMP_348(None) = SOLIDITY_CALL require(bool)(TMP_347)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_621(POOHMOXDatasets.Round) -> round_[1]
REF_622(uint256) -> REF_621.strt
TMP_349(uint256) = now + rndExtra_
TMP_350(uint256) = TMP_349 - rndGap_
REF_622(uint256) (->round_) := TMP_350(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_623(POOHMOXDatasets.Round) -> round_[1]
REF_624(uint256) -> REF_623.end
TMP_351(uint256) = now + rndInit_
TMP_352(uint256) = TMP_351 + rndExtra_
REF_624(uint256) (->round_) := TMP_352(uint256)"];
}
// Function: 1753.sol-POOHMOX-buyCore(uint256,uint256,POOHMOXDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_235(POOHMOXDatasets.Round) -> round_[_rID]
REF_236(uint256) -> REF_235.strt
TMP_129(uint256) = REF_236 + rndGap_
TMP_130(bool) = _now > TMP_129
REF_237(POOHMOXDatasets.Round) -> round_[_rID]
REF_238(uint256) -> REF_237.end
TMP_131(bool) = _now <= REF_238
REF_239(POOHMOXDatasets.Round) -> round_[_rID]
REF_240(uint256) -> REF_239.end
TMP_132(bool) = _now > REF_240
REF_241(POOHMOXDatasets.Round) -> round_[_rID]
REF_242(uint256) -> REF_241.plyr
TMP_133(bool) = REF_242 == 0
TMP_134(bool) = TMP_132 && TMP_133
TMP_135(bool) = TMP_131 || TMP_134
TMP_136(bool) = TMP_130 && TMP_135
CONDITION TMP_136"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,0,_eventData_)

IRs:
INTERNAL_CALL, POOHMOX.core(uint256,uint256,uint256,uint256,uint256,POOHMOXDatasets.EventReturns)(_rID,_pID,msg.value,_affID,0,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_243(POOHMOXDatasets.Round) -> round_[_rID]
REF_244(uint256) -> REF_243.end
TMP_138(bool) = _now > REF_244
REF_245(POOHMOXDatasets.Round) -> round_[_rID]
REF_246(bool) -> REF_245.ended
TMP_139(bool) = REF_246 == False
TMP_140(bool) = TMP_138 && TMP_139
CONDITION TMP_140"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_247(POOHMOXDatasets.Round) -> round_[_rID]
REF_248(bool) -> REF_247.ended
REF_248(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_141(POOHMOXDatasets.EventReturns) = INTERNAL_CALL, POOHMOX.endRound(POOHMOXDatasets.EventReturns)(_eventData_)
_eventData_(POOHMOXDatasets.EventReturns) := TMP_141(POOHMOXDatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_249(uint256) -> _eventData_.compressedData
REF_250(uint256) -> _eventData_.compressedData
TMP_142(uint256) = _now * 1000000000000000000
TMP_143(uint256) = REF_250 + TMP_142
REF_249(uint256) (->_eventData_) := TMP_143(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_251(uint256) -> _eventData_.compressedIDs
REF_252(uint256) -> _eventData_.compressedIDs
TMP_144(uint256) = REF_252 + _pID
REF_251(uint256) (->_eventData_) := TMP_144(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
POOHMOXevents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.POOHAmount,_eventData_.genAmount)

IRs:
REF_254(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_255(bytes32) -> REF_254.name
REF_256(uint256) -> _eventData_.compressedData
REF_257(uint256) -> _eventData_.compressedIDs
REF_258(address) -> _eventData_.winnerAddr
REF_259(bytes32) -> _eventData_.winnerName
REF_260(uint256) -> _eventData_.amountWon
REF_261(uint256) -> _eventData_.newPot
REF_262(uint256) -> _eventData_.POOHAmount
REF_263(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_255,msg.value,REF_256,REF_257,REF_258,REF_259,REF_260,REF_261,REF_262,REF_263)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_264(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_265(uint256) -> REF_264.gen
REF_266(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_267(uint256) -> REF_266.gen
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_267', 'msg.value'] 
REF_265(uint256) (->plyr_) := TMP_146(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1753.sol-POOHMOX-buyXaddr(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_17(POOHMOXDatasets.EventReturns) = INTERNAL_CALL, POOHMOX.determinePID(POOHMOXDatasets.EventReturns)(_eventData_)
_eventData_(POOHMOXDatasets.EventReturns) := TMP_17(POOHMOXDatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_14(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_14(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_18 = CONVERT 0 to address
TMP_19(bool) = _affCode == TMP_18
TMP_20(bool) = _affCode == msg.sender
TMP_21(bool) = TMP_19 || TMP_20
CONDITION TMP_21"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_15(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_16(uint256) -> REF_15.laff
_affID(uint256) := REF_16(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_17(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_17(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_18(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_19(uint256) -> REF_18.laff
TMP_22(bool) = _affID != REF_19
CONDITION TMP_22"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_20(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_21(uint256) -> REF_20.laff
REF_21(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, POOHMOX.buyCore(uint256,uint256,POOHMOXDatasets.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMOX.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMOX.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, POOHMOX.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 1753.sol-POOHMOX-buyXid(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_8(POOHMOXDatasets.EventReturns) = INTERNAL_CALL, POOHMOX.determinePID(POOHMOXDatasets.EventReturns)(_eventData_)
_eventData_(POOHMOXDatasets.EventReturns) := TMP_8(POOHMOXDatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_7(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_7(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_9(bool) = _affCode == 0
TMP_10(bool) = _affCode == _pID
TMP_11(bool) = TMP_9 || TMP_10
CONDITION TMP_11"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_8(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_9(uint256) -> REF_8.laff
_affCode(uint256) := REF_9(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_10(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_11(uint256) -> REF_10.laff
TMP_12(bool) = _affCode != REF_11
CONDITION TMP_12"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_12(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_13(uint256) -> REF_12.laff
REF_13(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buyCore(_pID,_affCode,_eventData_)

IRs:
INTERNAL_CALL, POOHMOX.buyCore(uint256,uint256,POOHMOXDatasets.EventReturns)(_pID,_affCode,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMOX.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMOX.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, POOHMOX.isWithinLimits(uint256)(msg.value)"];
12->1;
}
// Function: 1753.sol-POOHMOX-buyXname(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_27(POOHMOXDatasets.EventReturns) = INTERNAL_CALL, POOHMOX.determinePID(POOHMOXDatasets.EventReturns)(_eventData_)
_eventData_(POOHMOXDatasets.EventReturns) := TMP_27(POOHMOXDatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_22(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_22(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_28(bool) = _affCode == 
REF_23(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_24(bytes32) -> REF_23.name
TMP_29(bool) = _affCode == REF_24
TMP_30(bool) = TMP_28 || TMP_29
CONDITION TMP_30"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_25(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_26(uint256) -> REF_25.laff
_affID(uint256) := REF_26(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_27(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_27(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_28(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_29(uint256) -> REF_28.laff
TMP_31(bool) = _affID != REF_29
CONDITION TMP_31"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_30(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_31(uint256) -> REF_30.laff
REF_31(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buyCore(_pID,_affID,_eventData_)

IRs:
INTERNAL_CALL, POOHMOX.buyCore(uint256,uint256,POOHMOXDatasets.EventReturns)(_pID,_affID,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMOX.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMOX.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, POOHMOX.isWithinLimits(uint256)(msg.value)"];
14->1;
}
// Function: 1753.sol-POOHMOX-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_356(POOHMOXDatasets.Round) -> round_[_rID]
REF_357(uint256) -> REF_356.strt
TMP_187(uint256) = REF_357 + rndGap_
TMP_188(bool) = _now > TMP_187
REF_358(POOHMOXDatasets.Round) -> round_[_rID]
REF_359(uint256) -> REF_358.end
TMP_189(bool) = _now <= REF_359
REF_360(POOHMOXDatasets.Round) -> round_[_rID]
REF_361(uint256) -> REF_360.end
TMP_190(bool) = _now > REF_361
REF_362(POOHMOXDatasets.Round) -> round_[_rID]
REF_363(uint256) -> REF_362.plyr
TMP_191(bool) = REF_363 == 0
TMP_192(bool) = TMP_190 && TMP_191
TMP_193(bool) = TMP_189 || TMP_192
TMP_194(bool) = TMP_188 && TMP_193
CONDITION TMP_194"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_364(POOHMOXDatasets.Round) -> round_[_rID]
REF_365(uint256) -> REF_364.eth
TMP_195(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.keysRec(uint256,uint256), arguments:['REF_365', '_eth'] 
RETURN TMP_195"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_196(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.keys(uint256), arguments:['_eth'] 
RETURN TMP_196"];
}
// Function: 1753.sol-POOHMOX-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_346(POOHMOXDatasets.Round) -> round_[_rIDlast]
REF_347(uint256) -> REF_346.mask
REF_349(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_350(POOHMOXDatasets.PlayerRounds) -> REF_349[_rIDlast]
REF_351(uint256) -> REF_350.keys
TMP_184(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_347', 'REF_351'] 
TMP_185(uint256) = TMP_184 / 1000000000000000000
REF_353(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_354(POOHMOXDatasets.PlayerRounds) -> REF_353[_rIDlast]
REF_355(uint256) -> REF_354.mask
TMP_186(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_185', 'REF_355'] 
RETURN TMP_186"];
}
// Function: 1753.sol-POOHMOX-constructor(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
flushDivs = whaleContract

IRs:
flushDivs(address) := whaleContract(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PlayerBook = PlayerBookInterface(playerbook)

IRs:
TMP_0 = CONVERT playerbook to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_0(PlayerBookInterface)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[0] = POOHMOXDatasets.TeamFee(39,20)

IRs:
REF_0(POOHMOXDatasets.TeamFee) -> fees_[0]
TMP_1(POOHMOXDatasets.TeamFee) = new TeamFee(39,20)
REF_0(POOHMOXDatasets.TeamFee) (->fees_) := TMP_1(POOHMOXDatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
potSplit_[0] = POOHMOXDatasets.PotSplit(15,10)

IRs:
REF_2(POOHMOXDatasets.PotSplit) -> potSplit_[0]
TMP_2(POOHMOXDatasets.PotSplit) = new PotSplit(15,10)
REF_2(POOHMOXDatasets.PotSplit) (->potSplit_) := TMP_2(POOHMOXDatasets.PotSplit)"];
}
// Function: 1753.sol-POOHMOX-core(uint256,uint256,uint256,uint256,uint256,POOHMOXDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_eth >= 10000000000000000)

IRs:
TMP_166(bool) = _eth >= 10000000000000000
TMP_167(None) = SOLIDITY_CALL require(bool)(TMP_166)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_301(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_302(POOHMOXDatasets.PlayerRounds) -> REF_301[_rID]
REF_303(uint256) -> REF_302.keys
TMP_168(bool) = REF_303 == 0
CONDITION TMP_168"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_169(POOHMOXDatasets.EventReturns) = INTERNAL_CALL, POOHMOX.managePlayer(uint256,POOHMOXDatasets.EventReturns)(_pID,_eventData_)
_eventData_(POOHMOXDatasets.EventReturns) := TMP_169(POOHMOXDatasets.EventReturns)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_304(POOHMOXDatasets.Round) -> round_[_rID]
REF_305(uint256) -> REF_304.eth
TMP_170(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.keysRec(uint256,uint256), arguments:['REF_305', '_eth'] 
_keys(uint256) := TMP_170(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_171(bool) = _keys >= 1000000000000000000
CONDITION TMP_171"];
6->7[label="True"];
6->15[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, POOHMOX.updateTimer(uint256,uint256)(_keys,_rID)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_307(POOHMOXDatasets.Round) -> round_[_rID]
REF_308(uint256) -> REF_307.plyr
TMP_173(bool) = REF_308 != _pID
CONDITION TMP_173"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_309(POOHMOXDatasets.Round) -> round_[_rID]
REF_310(uint256) -> REF_309.plyr
REF_310(uint256) (->round_) := _pID(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_311(POOHMOXDatasets.Round) -> round_[_rID]
REF_312(uint256) -> REF_311.team
TMP_174(bool) = REF_312 != _team
CONDITION TMP_174"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_313(POOHMOXDatasets.Round) -> round_[_rID]
REF_314(uint256) -> REF_313.team
REF_314(uint256) (->round_) := _team(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_315(uint256) -> _eventData_.compressedData
REF_316(uint256) -> _eventData_.compressedData
TMP_175(uint256) = REF_316 + 100
REF_315(uint256) (->_eventData_) := TMP_175(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_317(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_318(POOHMOXDatasets.PlayerRounds) -> REF_317[_rID]
REF_319(uint256) -> REF_318.keys
REF_321(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_322(POOHMOXDatasets.PlayerRounds) -> REF_321[_rID]
REF_323(uint256) -> REF_322.keys
TMP_176(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_323'] 
REF_319(uint256) (->plyrRnds_) := TMP_176(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_324(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_325(POOHMOXDatasets.PlayerRounds) -> REF_324[_rID]
REF_326(uint256) -> REF_325.eth
REF_328(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_329(POOHMOXDatasets.PlayerRounds) -> REF_328[_rID]
REF_330(uint256) -> REF_329.eth
TMP_177(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_330'] 
REF_326(uint256) (->plyrRnds_) := TMP_177(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_331(POOHMOXDatasets.Round) -> round_[_rID]
REF_332(uint256) -> REF_331.keys
REF_334(POOHMOXDatasets.Round) -> round_[_rID]
REF_335(uint256) -> REF_334.keys
TMP_178(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_335'] 
REF_332(uint256) (->round_) := TMP_178(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_336(POOHMOXDatasets.Round) -> round_[_rID]
REF_337(uint256) -> REF_336.eth
REF_339(POOHMOXDatasets.Round) -> round_[_rID]
REF_340(uint256) -> REF_339.eth
TMP_179(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_340'] 
REF_337(uint256) (->round_) := TMP_179(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
rndTmEth_[_rID][0] = _eth.add(rndTmEth_[_rID][0])

IRs:
REF_341(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_342(uint256) -> REF_341[0]
REF_344(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_345(uint256) -> REF_344[0]
TMP_180(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_345'] 
REF_342(uint256) (->rndTmEth_) := TMP_180(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_ = distributeExternal(_rID,_pID,_eth,_affID,0,_eventData_)

IRs:
TMP_181(POOHMOXDatasets.EventReturns) = INTERNAL_CALL, POOHMOX.distributeExternal(uint256,uint256,uint256,uint256,uint256,POOHMOXDatasets.EventReturns)(_rID,_pID,_eth,_affID,0,_eventData_)
_eventData_(POOHMOXDatasets.EventReturns) := TMP_181(POOHMOXDatasets.EventReturns)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,0,_keys,_eventData_)

IRs:
TMP_182(POOHMOXDatasets.EventReturns) = INTERNAL_CALL, POOHMOX.distributeInternal(uint256,uint256,uint256,uint256,uint256,POOHMOXDatasets.EventReturns)(_rID,_pID,_eth,0,_keys,_eventData_)
_eventData_(POOHMOXDatasets.EventReturns) := TMP_182(POOHMOXDatasets.EventReturns)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
endTx(_pID,0,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, POOHMOX.endTx(uint256,uint256,uint256,uint256,POOHMOXDatasets.EventReturns)(_pID,0,_eth,_keys,_eventData_)"];
}
// Function: 1753.sol-POOHMOX-determinePID(POOHMOXDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_405(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_405(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_221(bool) = _pID == 0
CONDITION TMP_221"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_222(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_222(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_223(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_223(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_224(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_224(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_409(uint256) -> pIDxAddr_[msg.sender]
REF_409(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_410(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_411(address) -> REF_410.addr
REF_411(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_225(bool) = _name != 
CONDITION TMP_225"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_412(uint256) -> pIDxName_[_name]
REF_412(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_413(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_414(bytes32) -> REF_413.name
REF_414(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_415(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_416(bool) -> REF_415[_name]
REF_416(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_226(bool) = _laff != 0
TMP_227(bool) = _laff != _pID
TMP_228(bool) = TMP_226 && TMP_227
CONDITION TMP_228"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_417(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_418(uint256) -> REF_417.laff
REF_418(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_419(uint256) -> _eventData_.compressedData
REF_420(uint256) -> _eventData_.compressedData
TMP_229(uint256) = REF_420 + 1
REF_419(uint256) (->_eventData_) := TMP_229(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1753.sol-POOHMOX-distributeExternal(uint256,uint256,uint256,uint256,uint256,POOHMOXDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_dev = _eth / 100

IRs:
TMP_284(uint256) = _eth / 100
_dev(uint256) := TMP_284(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_POOH = 0

IRs:
_POOH(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! address(admin).call.value(_dev)()

IRs:
TMP_285 = CONVERT admin to address
TMP_287(bool) = LOW_LEVEL_CALL, dest:TMP_285, function:call, arguments:[] value:_dev 
TMP_288 = UnaryType.BANG TMP_287 
CONDITION TMP_288"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_POOH = _dev

IRs:
_POOH(uint256) := _dev(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_dev = 0

IRs:
_dev(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_289(uint256) = _eth / 10
_aff(uint256) := TMP_289(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_290(bool) = _affID != _pID
REF_521(POOHMOXDatasets.Player) -> plyr_[_affID]
REF_522(bytes32) -> REF_521.name
TMP_291(bool) = REF_522 != 
TMP_292(bool) = TMP_290 && TMP_291
CONDITION TMP_292"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_523(POOHMOXDatasets.Player) -> plyr_[_affID]
REF_524(uint256) -> REF_523.aff
REF_526(POOHMOXDatasets.Player) -> plyr_[_affID]
REF_527(uint256) -> REF_526.aff
TMP_293(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_527'] 
REF_524(uint256) (->plyr_) := TMP_293(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
POOHMOXevents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_529(POOHMOXDatasets.Player) -> plyr_[_affID]
REF_530(address) -> REF_529.addr
REF_531(POOHMOXDatasets.Player) -> plyr_[_affID]
REF_532(bytes32) -> REF_531.name
Emit onAffiliatePayout(_affID,REF_530,REF_532,_rID,_pID,_aff,now)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_POOH = _POOH.add(_aff)

IRs:
TMP_295(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_POOH', '_aff'] 
_POOH(uint256) := TMP_295(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_POOH = _POOH.add((_eth.mul(fees_[_team].pooh)) / (100))

IRs:
REF_536(POOHMOXDatasets.TeamFee) -> fees_[_team]
REF_537(uint256) -> REF_536.pooh
TMP_296(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_537'] 
TMP_297(uint256) = TMP_296 / 100
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_POOH', 'TMP_297'] 
_POOH(uint256) := TMP_298(uint256)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
_POOH > 0

IRs:
TMP_299(bool) = _POOH > 0
CONDITION TMP_299"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
flushDivs.call.value(_POOH)(bytes4(keccak256()(donate())))

IRs:
TMP_301(bytes32) = SOLIDITY_CALL keccak256()(donate())
TMP_302 = CONVERT TMP_301 to bytes4
TMP_303(bool) = LOW_LEVEL_CALL, dest:flushDivs, function:call, arguments:['TMP_302'] value:_POOH "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.POOHAmount = _POOH.add(_eventData_.POOHAmount)

IRs:
REF_540(uint256) -> _eventData_.POOHAmount
REF_542(uint256) -> _eventData_.POOHAmount
TMP_304(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_POOH', 'REF_542'] 
REF_540(uint256) (->_eventData_) := TMP_304(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1753.sol-POOHMOX-distributeInternal(uint256,uint256,uint256,uint256,uint256,POOHMOXDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_545(POOHMOXDatasets.TeamFee) -> fees_[_team]
REF_546(uint256) -> REF_545.gen
TMP_306(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_546'] 
TMP_307(uint256) = TMP_306 / 100
_gen(uint256) := TMP_307(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eth = _eth.sub(((_eth.mul(14)) / 100).add((_eth.mul(fees_[_team].pooh)) / 100))

IRs:
TMP_308(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '14'] 
TMP_309(uint256) = TMP_308 / 100
REF_551(POOHMOXDatasets.TeamFee) -> fees_[_team]
REF_552(uint256) -> REF_551.pooh
TMP_310(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_552'] 
TMP_311(uint256) = TMP_310 / 100
TMP_312(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_309', 'TMP_311'] 
TMP_313(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', 'TMP_312'] 
_eth(uint256) := TMP_313(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pot = _eth.sub(_gen)

IRs:
TMP_314(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
_pot(uint256) := TMP_314(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_315(uint256) = INTERNAL_CALL, POOHMOX.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_315(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_dust > 0

IRs:
TMP_316(bool) = _dust > 0
CONDITION TMP_316"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_317(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_317(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_555(POOHMOXDatasets.Round) -> round_[_rID]
REF_556(uint256) -> REF_555.pot
TMP_318(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_559(POOHMOXDatasets.Round) -> round_[_rID]
REF_560(uint256) -> REF_559.pot
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_318', 'REF_560'] 
REF_556(uint256) (->round_) := TMP_319(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_561(uint256) -> _eventData_.genAmount
REF_563(uint256) -> _eventData_.genAmount
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_563'] 
REF_561(uint256) (->_eventData_) := TMP_320(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_564(uint256) -> _eventData_.potAmount
REF_564(uint256) (->_eventData_) := _pot(uint256)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1753.sol-POOHMOX-endRound(POOHMOXDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_429(POOHMOXDatasets.Round) -> round_[_rID]
REF_430(uint256) -> REF_429.plyr
_winPID(uint256) := REF_430(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_431(POOHMOXDatasets.Round) -> round_[_rID]
REF_432(uint256) -> REF_431.team
_winTID(uint256) := REF_432(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_433(POOHMOXDatasets.Round) -> round_[_rID]
REF_434(uint256) -> REF_433.pot
_pot(uint256) := REF_434(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(48)) / 100

IRs:
TMP_233(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '48'] 
TMP_234(uint256) = TMP_233 / 100
_win(uint256) := TMP_234(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_dev = (_pot / 50)

IRs:
TMP_235(uint256) = _pot / 50
_dev(uint256) := TMP_235(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_437(POOHMOXDatasets.PotSplit) -> potSplit_[_winTID]
REF_438(uint256) -> REF_437.gen
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_438'] 
TMP_237(uint256) = TMP_236 / 100
_gen(uint256) := TMP_237(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_POOH = (_pot.mul(potSplit_[_winTID].pooh)) / 100

IRs:
REF_440(POOHMOXDatasets.PotSplit) -> potSplit_[_winTID]
REF_441(uint256) -> REF_440.pooh
TMP_238(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_441'] 
TMP_239(uint256) = TMP_238 / 100
_POOH(uint256) := TMP_239(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_dev)).sub(_gen)).sub(_POOH)

IRs:
TMP_240(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_240', '_dev'] 
TMP_242(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_241', '_gen'] 
TMP_243(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_242', '_POOH'] 
_res(uint256) := TMP_243(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_244(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_447(POOHMOXDatasets.Round) -> round_[_rID]
REF_448(uint256) -> REF_447.keys
TMP_245(uint256) = TMP_244 / REF_448
_ppt(uint256) := TMP_245(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_451(POOHMOXDatasets.Round) -> round_[_rID]
REF_452(uint256) -> REF_451.keys
TMP_246(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_452'] 
TMP_247(uint256) = TMP_246 / 1000000000000000000
TMP_248(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_247'] 
_dust(uint256) := TMP_248(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_dust > 0

IRs:
TMP_249(bool) = _dust > 0
CONDITION TMP_249"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_250(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_250(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_251(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_251(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_455(POOHMOXDatasets.Player) -> plyr_[_winPID]
REF_456(uint256) -> REF_455.win
REF_458(POOHMOXDatasets.Player) -> plyr_[_winPID]
REF_459(uint256) -> REF_458.win
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_459'] 
REF_456(uint256) (->plyr_) := TMP_252(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
admin.transfer(_dev)

IRs:
Transfer dest:admin value:_dev"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
flushDivs.call.value(_POOH)(bytes4(keccak256()(donate())))

IRs:
TMP_255(bytes32) = SOLIDITY_CALL keccak256()(donate())
TMP_256 = CONVERT TMP_255 to bytes4
TMP_257(bool) = LOW_LEVEL_CALL, dest:flushDivs, function:call, arguments:['TMP_256'] value:_POOH "];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_463(POOHMOXDatasets.Round) -> round_[_rID]
REF_464(uint256) -> REF_463.mask
REF_466(POOHMOXDatasets.Round) -> round_[_rID]
REF_467(uint256) -> REF_466.mask
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_467'] 
REF_464(uint256) (->round_) := TMP_258(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_468(uint256) -> _eventData_.compressedData
REF_469(uint256) -> _eventData_.compressedData
REF_470(POOHMOXDatasets.Round) -> round_[_rID]
REF_471(uint256) -> REF_470.end
TMP_259(uint256) = REF_471 * 1000000
TMP_260(uint256) = REF_469 + TMP_259
REF_468(uint256) (->_eventData_) := TMP_260(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_472(uint256) -> _eventData_.compressedIDs
REF_473(uint256) -> _eventData_.compressedIDs
TMP_261(uint256) = _winPID * 100000000000000000000000000
TMP_262(uint256) = REF_473 + TMP_261
TMP_263(uint256) = _winTID * 100000000000000000
TMP_264(uint256) = TMP_262 + TMP_263
REF_472(uint256) (->_eventData_) := TMP_264(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_474(address) -> _eventData_.winnerAddr
REF_475(POOHMOXDatasets.Player) -> plyr_[_winPID]
REF_476(address) -> REF_475.addr
REF_474(address) (->_eventData_) := REF_476(address)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_477(bytes32) -> _eventData_.winnerName
REF_478(POOHMOXDatasets.Player) -> plyr_[_winPID]
REF_479(bytes32) -> REF_478.name
REF_477(bytes32) (->_eventData_) := REF_479(bytes32)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_480(uint256) -> _eventData_.amountWon
REF_480(uint256) (->_eventData_) := _win(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_481(uint256) -> _eventData_.genAmount
REF_481(uint256) (->_eventData_) := _gen(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.POOHAmount = _POOH

IRs:
REF_482(uint256) -> _eventData_.POOHAmount
REF_482(uint256) (->_eventData_) := _POOH(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_483(uint256) -> _eventData_.newPot
REF_483(uint256) (->_eventData_) := _res(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
rID_ ++

IRs:
TMP_265(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
_rID ++

IRs:
TMP_266(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_484(POOHMOXDatasets.Round) -> round_[_rID]
REF_485(uint256) -> REF_484.strt
REF_485(uint256) (->round_) := now(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].end = now.add(rndMax_)

IRs:
REF_486(POOHMOXDatasets.Round) -> round_[_rID]
REF_487(uint256) -> REF_486.end
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndMax_'] 
REF_487(uint256) (->round_) := TMP_267(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_489(POOHMOXDatasets.Round) -> round_[_rID]
REF_490(uint256) -> REF_489.pot
REF_490(uint256) (->round_) := _res(uint256)"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1753.sol-POOHMOX-endTx(uint256,uint256,uint256,uint256,POOHMOXDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_605(uint256) -> _eventData_.compressedData
REF_606(uint256) -> _eventData_.compressedData
TMP_337(uint256) = now * 1000000000000000000
TMP_338(uint256) = REF_606 + TMP_337
TMP_339(uint256) = _team * 100000000000000000000000000000
TMP_340(uint256) = TMP_338 + TMP_339
REF_605(uint256) (->_eventData_) := TMP_340(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_607(uint256) -> _eventData_.compressedIDs
REF_608(uint256) -> _eventData_.compressedIDs
TMP_341(uint256) = REF_608 + _pID
TMP_342(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_343(uint256) = TMP_341 + TMP_342
REF_607(uint256) (->_eventData_) := TMP_343(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
POOHMOXevents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.POOHAmount,_eventData_.genAmount,_eventData_.potAmount)

IRs:
REF_610(uint256) -> _eventData_.compressedData
REF_611(uint256) -> _eventData_.compressedIDs
REF_612(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_613(bytes32) -> REF_612.name
REF_614(address) -> _eventData_.winnerAddr
REF_615(bytes32) -> _eventData_.winnerName
REF_616(uint256) -> _eventData_.amountWon
REF_617(uint256) -> _eventData_.newPot
REF_618(uint256) -> _eventData_.POOHAmount
REF_619(uint256) -> _eventData_.genAmount
REF_620(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_610,REF_611,REF_613,msg.sender,_eth,_keys,REF_614,REF_615,REF_616,REF_617,REF_618,REF_619,REF_620)"];
}
// Function: 1753.sol-POOHMOX-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_3(POOHMOXDatasets.EventReturns) = INTERNAL_CALL, POOHMOX.determinePID(POOHMOXDatasets.EventReturns)(_eventData_)
_eventData_(POOHMOXDatasets.EventReturns) := TMP_3(POOHMOXDatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_4(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_4(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,_eventData_)

IRs:
REF_5(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_6(uint256) -> REF_5.laff
INTERNAL_CALL, POOHMOX.buyCore(uint256,uint256,POOHMOXDatasets.EventReturns)(_pID,REF_6,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMOX.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMOX.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, POOHMOX.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 1753.sol-POOHMOX-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
10000000000000000

IRs:
RETURN 10000000000000000"];
}
// Function: 1753.sol-POOHMOX-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3])

IRs:
REF_187(POOHMOXDatasets.Round) -> round_[_rID]
REF_188(uint256) -> REF_187.ico
REF_189(POOHMOXDatasets.Round) -> round_[_rID]
REF_190(uint256) -> REF_189.keys
REF_191(POOHMOXDatasets.Round) -> round_[_rID]
REF_192(uint256) -> REF_191.end
REF_193(POOHMOXDatasets.Round) -> round_[_rID]
REF_194(uint256) -> REF_193.strt
REF_195(POOHMOXDatasets.Round) -> round_[_rID]
REF_196(uint256) -> REF_195.pot
REF_197(POOHMOXDatasets.Round) -> round_[_rID]
REF_198(uint256) -> REF_197.team
REF_199(POOHMOXDatasets.Round) -> round_[_rID]
REF_200(uint256) -> REF_199.plyr
TMP_122(uint256) = REF_200 * 10
TMP_123(uint256) = REF_198 + TMP_122
REF_201(POOHMOXDatasets.Round) -> round_[_rID]
REF_202(uint256) -> REF_201.plyr
REF_203(POOHMOXDatasets.Player) -> plyr_[REF_202]
REF_204(address) -> REF_203.addr
REF_205(POOHMOXDatasets.Round) -> round_[_rID]
REF_206(uint256) -> REF_205.plyr
REF_207(POOHMOXDatasets.Player) -> plyr_[REF_206]
REF_208(bytes32) -> REF_207.name
REF_209(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_210(uint256) -> REF_209[0]
REF_211(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_212(uint256) -> REF_211[1]
REF_213(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_214(uint256) -> REF_213[2]
REF_215(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_216(uint256) -> REF_215[3]
RETURN REF_188,_rID,REF_190,REF_192,REF_194,REF_196,TMP_123,REF_204,REF_208,REF_210,REF_212,REF_214,REF_216"];
}
// Function: 1753.sol-POOHMOX-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_124 = CONVERT 0 to address
TMP_125(bool) = _addr == TMP_124
CONDITION TMP_125"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_126(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_217(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_217(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_218(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_219(bytes32) -> REF_218.name
REF_220(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_221(POOHMOXDatasets.PlayerRounds) -> REF_220[_rID]
REF_222(uint256) -> REF_221.keys
REF_223(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_224(uint256) -> REF_223.win
REF_225(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_226(uint256) -> REF_225.gen
REF_228(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_229(uint256) -> REF_228.lrnd
TMP_127(uint256) = INTERNAL_CALL, POOHMOX.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_229)
TMP_128(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_226', 'TMP_127'] 
REF_230(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_231(uint256) -> REF_230.aff
REF_232(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_233(POOHMOXDatasets.PlayerRounds) -> REF_232[_rID]
REF_234(uint256) -> REF_233.eth
RETURN _pID,REF_219,REF_222,REF_224,TMP_128,REF_231,REF_234"];
}
// Function: 1753.sol-POOHMOX-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_127(POOHMOXDatasets.Round) -> round_[_rID]
REF_128(uint256) -> REF_127.end
TMP_98(bool) = now > REF_128
REF_129(POOHMOXDatasets.Round) -> round_[_rID]
REF_130(bool) -> REF_129.ended
TMP_99(bool) = REF_130 == False
TMP_100(bool) = TMP_98 && TMP_99
REF_131(POOHMOXDatasets.Round) -> round_[_rID]
REF_132(uint256) -> REF_131.plyr
TMP_101(bool) = REF_132 != 0
TMP_102(bool) = TMP_100 && TMP_101
CONDITION TMP_102"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_133(POOHMOXDatasets.Round) -> round_[_rID]
REF_134(uint256) -> REF_133.plyr
TMP_103(bool) = REF_134 == _pID
CONDITION TMP_103"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(48)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_135(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_136(uint256) -> REF_135.win
REF_138(POOHMOXDatasets.Round) -> round_[_rID]
REF_139(uint256) -> REF_138.pot
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_139', '48'] 
TMP_105(uint256) = TMP_104 / 100
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_136', 'TMP_105'] 
REF_141(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_142(uint256) -> REF_141.gen
TMP_107(uint256) = INTERNAL_CALL, POOHMOX.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_145(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_146(POOHMOXDatasets.PlayerRounds) -> REF_145[_rID]
REF_147(uint256) -> REF_146.mask
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_107', 'REF_147'] 
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_142', 'TMP_108'] 
REF_148(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_149(uint256) -> REF_148.aff
RETURN TMP_106,TMP_109,REF_149"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_150(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_151(uint256) -> REF_150.win
REF_152(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_153(uint256) -> REF_152.gen
TMP_110(uint256) = INTERNAL_CALL, POOHMOX.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_156(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_157(POOHMOXDatasets.PlayerRounds) -> REF_156[_rID]
REF_158(uint256) -> REF_157.mask
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_110', 'REF_158'] 
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_153', 'TMP_111'] 
REF_159(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_160(uint256) -> REF_159.aff
RETURN REF_151,TMP_112,REF_160"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_161(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_162(uint256) -> REF_161.win
REF_163(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_164(uint256) -> REF_163.gen
REF_166(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_167(uint256) -> REF_166.lrnd
TMP_113(uint256) = INTERNAL_CALL, POOHMOX.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_167)
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_164', 'TMP_113'] 
REF_168(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_169(uint256) -> REF_168.aff
RETURN REF_162,TMP_114,REF_169"];
}
// Function: 1753.sol-POOHMOX-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_170(POOHMOXDatasets.Round) -> round_[_rID]
REF_171(uint256) -> REF_170.mask
REF_173(POOHMOXDatasets.Round) -> round_[_rID]
REF_174(uint256) -> REF_173.pot
REF_176(POOHMOXDatasets.Round) -> round_[_rID]
REF_177(uint256) -> REF_176.team
REF_178(POOHMOXDatasets.PotSplit) -> potSplit_[REF_177]
REF_179(uint256) -> REF_178.gen
TMP_115(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_174', 'REF_179'] 
TMP_116(uint256) = TMP_115 / 100
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_116', '1000000000000000000'] 
REF_181(POOHMOXDatasets.Round) -> round_[_rID]
REF_182(uint256) -> REF_181.keys
TMP_118(uint256) = TMP_117 / REF_182
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_171', 'TMP_118'] 
REF_184(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_185(POOHMOXDatasets.PlayerRounds) -> REF_184[_rID]
REF_186(uint256) -> REF_185.keys
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_119', 'REF_186'] 
TMP_121(uint256) = TMP_120 / 1000000000000000000
RETURN TMP_121"];
}
// Function: 1753.sol-POOHMOX-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_117(POOHMOXDatasets.Round) -> round_[_rID]
REF_118(uint256) -> REF_117.end
TMP_92(bool) = _now < REF_118
CONDITION TMP_92"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_119(POOHMOXDatasets.Round) -> round_[_rID]
REF_120(uint256) -> REF_119.strt
TMP_93(uint256) = REF_120 + rndGap_
TMP_94(bool) = _now > TMP_93
CONDITION TMP_94"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_121(POOHMOXDatasets.Round) -> round_[_rID]
REF_122(uint256) -> REF_121.end
TMP_95(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_122', '_now'] 
RETURN TMP_95"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_124(POOHMOXDatasets.Round) -> round_[_rID]
REF_125(uint256) -> REF_124.strt
TMP_96(uint256) = REF_125 + rndGap_
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_96', '_now'] 
RETURN TMP_97"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 1753.sol-POOHMOX-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_368(POOHMOXDatasets.Round) -> round_[_rID]
REF_369(uint256) -> REF_368.strt
TMP_197(uint256) = REF_369 + rndGap_
TMP_198(bool) = _now > TMP_197
REF_370(POOHMOXDatasets.Round) -> round_[_rID]
REF_371(uint256) -> REF_370.end
TMP_199(bool) = _now <= REF_371
REF_372(POOHMOXDatasets.Round) -> round_[_rID]
REF_373(uint256) -> REF_372.end
TMP_200(bool) = _now > REF_373
REF_374(POOHMOXDatasets.Round) -> round_[_rID]
REF_375(uint256) -> REF_374.plyr
TMP_201(bool) = REF_375 == 0
TMP_202(bool) = TMP_200 && TMP_201
TMP_203(bool) = TMP_199 || TMP_202
TMP_204(bool) = TMP_198 && TMP_203
CONDITION TMP_204"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_376(POOHMOXDatasets.Round) -> round_[_rID]
REF_377(uint256) -> REF_376.keys
TMP_205(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_377', '_keys'] 
TMP_206(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.ethRec(uint256,uint256), arguments:['TMP_205', '_keys'] 
RETURN TMP_206"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_207(uint256) = LIBRARY_CALL, dest:KeysCalc, function:KeysCalc.eth(uint256), arguments:['_keys'] 
RETURN TMP_207"];
}
// Function: 1753.sol-POOHMOX-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(activated_ == true)

IRs:
TMP_361(bool) = activated_ == True
TMP_362(None) = SOLIDITY_CALL require(bool)(TMP_361)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 1753.sol-POOHMOX-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_codeLength == 0)

IRs:
TMP_363(bool) = _codeLength == 0
TMP_364(None) = SOLIDITY_CALL require(bool)(TMP_363)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_addr == tx.origin)

IRs:
TMP_365(bool) = _addr == tx.origin
TMP_366(None) = SOLIDITY_CALL require(bool)(TMP_365)"];
6->7;
7[label="Node Type: _ 7
"];
}
// Function: 1753.sol-POOHMOX-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_eth >= 1000000000)

IRs:
TMP_367(bool) = _eth >= 1000000000
TMP_368(None) = SOLIDITY_CALL require(bool)(TMP_367)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_eth <= 100000000000000000000000)

IRs:
TMP_369(bool) = _eth <= 100000000000000000000000
TMP_370(None) = SOLIDITY_CALL require(bool)(TMP_369)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 1753.sol-POOHMOX-managePlayer(uint256,POOHMOXDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_421(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_422(uint256) -> REF_421.lrnd
TMP_230(bool) = REF_422 != 0
CONDITION TMP_230"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_423(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_424(uint256) -> REF_423.lrnd
INTERNAL_CALL, POOHMOX.updateGenVault(uint256,uint256)(_pID,REF_424)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_425(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_426(uint256) -> REF_425.lrnd
REF_426(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_427(uint256) -> _eventData_.compressedData
REF_428(uint256) -> _eventData_.compressedData
TMP_232(uint256) = REF_428 + 10
REF_427(uint256) (->_eventData_) := TMP_232(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 1753.sol-POOHMOX-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admin.transfer(msg.value)

IRs:
Transfer dest:admin value:msg.value"];
}
// Function: 1753.sol-POOHMOX-reLoadCore(uint256,uint256,uint256,POOHMOXDatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_269(POOHMOXDatasets.Round) -> round_[_rID]
REF_270(uint256) -> REF_269.strt
TMP_147(uint256) = REF_270 + rndGap_
TMP_148(bool) = _now > TMP_147
REF_271(POOHMOXDatasets.Round) -> round_[_rID]
REF_272(uint256) -> REF_271.end
TMP_149(bool) = _now <= REF_272
REF_273(POOHMOXDatasets.Round) -> round_[_rID]
REF_274(uint256) -> REF_273.end
TMP_150(bool) = _now > REF_274
REF_275(POOHMOXDatasets.Round) -> round_[_rID]
REF_276(uint256) -> REF_275.plyr
TMP_151(bool) = REF_276 == 0
TMP_152(bool) = TMP_150 && TMP_151
TMP_153(bool) = TMP_149 || TMP_152
TMP_154(bool) = TMP_148 && TMP_153
CONDITION TMP_154"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_277(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_278(uint256) -> REF_277.gen
TMP_155(uint256) = INTERNAL_CALL, POOHMOX.withdrawEarnings(uint256)(_pID)
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_155', '_eth'] 
REF_278(uint256) (->plyr_) := TMP_156(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,0,_eventData_)

IRs:
INTERNAL_CALL, POOHMOX.core(uint256,uint256,uint256,uint256,uint256,POOHMOXDatasets.EventReturns)(_rID,_pID,_eth,_affID,0,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_280(POOHMOXDatasets.Round) -> round_[_rID]
REF_281(uint256) -> REF_280.end
TMP_158(bool) = _now > REF_281
REF_282(POOHMOXDatasets.Round) -> round_[_rID]
REF_283(bool) -> REF_282.ended
TMP_159(bool) = REF_283 == False
TMP_160(bool) = TMP_158 && TMP_159
CONDITION TMP_160"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_284(POOHMOXDatasets.Round) -> round_[_rID]
REF_285(bool) -> REF_284.ended
REF_285(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_161(POOHMOXDatasets.EventReturns) = INTERNAL_CALL, POOHMOX.endRound(POOHMOXDatasets.EventReturns)(_eventData_)
_eventData_(POOHMOXDatasets.EventReturns) := TMP_161(POOHMOXDatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_286(uint256) -> _eventData_.compressedData
REF_287(uint256) -> _eventData_.compressedData
TMP_162(uint256) = _now * 1000000000000000000
TMP_163(uint256) = REF_287 + TMP_162
REF_286(uint256) (->_eventData_) := TMP_163(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_288(uint256) -> _eventData_.compressedIDs
REF_289(uint256) -> _eventData_.compressedIDs
TMP_164(uint256) = REF_289 + _pID
REF_288(uint256) (->_eventData_) := TMP_164(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
POOHMOXevents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.POOHAmount,_eventData_.genAmount)

IRs:
REF_291(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_292(bytes32) -> REF_291.name
REF_293(uint256) -> _eventData_.compressedData
REF_294(uint256) -> _eventData_.compressedIDs
REF_295(address) -> _eventData_.winnerAddr
REF_296(bytes32) -> _eventData_.winnerName
REF_297(uint256) -> _eventData_.amountWon
REF_298(uint256) -> _eventData_.newPot
REF_299(uint256) -> _eventData_.POOHAmount
REF_300(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_292,REF_293,REF_294,REF_295,REF_296,REF_297,REF_298,REF_299,REF_300)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 1753.sol-POOHMOX-reLoadXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_39(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_39(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_44 = CONVERT 0 to address
TMP_45(bool) = _affCode == TMP_44
TMP_46(bool) = _affCode == msg.sender
TMP_47(bool) = TMP_45 || TMP_46
CONDITION TMP_47"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_40(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_41(uint256) -> REF_40.laff
_affID(uint256) := REF_41(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_42(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_42(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_43(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_44(uint256) -> REF_43.laff
TMP_48(bool) = _affID != REF_44
CONDITION TMP_48"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_45(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_46(uint256) -> REF_45.laff
REF_46(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, POOHMOX.reLoadCore(uint256,uint256,uint256,POOHMOXDatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMOX.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMOX.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, POOHMOX.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 1753.sol-POOHMOX-reLoadXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_32(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_32(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_36(bool) = _affCode == 0
TMP_37(bool) = _affCode == _pID
TMP_38(bool) = TMP_36 || TMP_37
CONDITION TMP_38"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_33(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_34(uint256) -> REF_33.laff
_affCode(uint256) := REF_34(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_35(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_36(uint256) -> REF_35.laff
TMP_39(bool) = _affCode != REF_36
CONDITION TMP_39"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_37(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_38(uint256) -> REF_37.laff
REF_38(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
reLoadCore(_pID,_affCode,_eth,_eventData_)

IRs:
INTERNAL_CALL, POOHMOX.reLoadCore(uint256,uint256,uint256,POOHMOXDatasets.EventReturns)(_pID,_affCode,_eth,_eventData_)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMOX.isActivated()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMOX.isHuman()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, POOHMOX.isWithinLimits(uint256)(_eth)"];
12->1;
}
// Function: 1753.sol-POOHMOX-reLoadXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_47(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_47(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_53(bool) = _affCode == 
REF_48(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_49(bytes32) -> REF_48.name
TMP_54(bool) = _affCode == REF_49
TMP_55(bool) = TMP_53 || TMP_54
CONDITION TMP_55"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_50(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_51(uint256) -> REF_50.laff
_affID(uint256) := REF_51(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_52(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_52(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_53(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_54(uint256) -> REF_53.laff
TMP_56(bool) = _affID != REF_54
CONDITION TMP_56"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_55(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_56(uint256) -> REF_55.laff
REF_56(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
reLoadCore(_pID,_affID,_eth,_eventData_)

IRs:
INTERNAL_CALL, POOHMOX.reLoadCore(uint256,uint256,uint256,POOHMOXDatasets.EventReturns)(_pID,_affID,_eth,_eventData_)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMOX.isActivated()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMOX.isHuman()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, POOHMOX.isWithinLimits(uint256)(_eth)"];
14->1;
}
// Function: 1753.sol-POOHMOX-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(PlayerBook))

IRs:
TMP_208 = CONVERT PlayerBook to address
TMP_209(bool) = msg.sender == TMP_208
TMP_210(None) = SOLIDITY_CALL require(bool)(TMP_209)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_381(uint256) -> pIDxAddr_[_addr]
TMP_211(bool) = REF_381 != _pID
CONDITION TMP_211"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_382(uint256) -> pIDxAddr_[_addr]
REF_382(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_383(uint256) -> pIDxName_[_name]
TMP_212(bool) = REF_383 != _pID
CONDITION TMP_212"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_384(uint256) -> pIDxName_[_name]
REF_384(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_385(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_386(address) -> REF_385.addr
TMP_213(bool) = REF_386 != _addr
CONDITION TMP_213"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_387(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_388(address) -> REF_387.addr
REF_388(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_389(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_390(bytes32) -> REF_389.name
TMP_214(bool) = REF_390 != _name
CONDITION TMP_214"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_391(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_392(bytes32) -> REF_391.name
REF_392(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_393(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_394(uint256) -> REF_393.laff
TMP_215(bool) = REF_394 != _laff
CONDITION TMP_215"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_395(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_396(uint256) -> REF_395.laff
REF_396(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_397(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_398(bool) -> REF_397[_name]
TMP_216(bool) = REF_398 == False
CONDITION TMP_216"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_399(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_400(bool) -> REF_399[_name]
REF_400(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 1753.sol-POOHMOX-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(PlayerBook))

IRs:
TMP_217 = CONVERT PlayerBook to address
TMP_218(bool) = msg.sender == TMP_217
TMP_219(None) = SOLIDITY_CALL require(bool)(TMP_218)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_401(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_402(bool) -> REF_401[_name]
TMP_220(bool) = REF_402 == False
CONDITION TMP_220"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_403(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_404(bool) -> REF_403[_name]
REF_404(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 1753.sol-POOHMOX-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_80(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_80(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_93(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_93(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
POOHMOXevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_95(POOHMOXDatasets.Player) -> plyr_[_affID]
REF_96(address) -> REF_95.addr
REF_97(POOHMOXDatasets.Player) -> plyr_[_affID]
REF_98(bytes32) -> REF_97.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_96,REF_98,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMOX.isHuman()()"];
9->1;
}
// Function: 1753.sol-POOHMOX-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_84(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_84(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_102(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_102(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
POOHMOXevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_104(POOHMOXDatasets.Player) -> plyr_[_affID]
REF_105(address) -> REF_104.addr
REF_106(POOHMOXDatasets.Player) -> plyr_[_affID]
REF_107(bytes32) -> REF_106.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_105,REF_107,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMOX.isHuman()()"];
9->1;
}
// Function: 1753.sol-POOHMOX-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_88(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_88(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_111(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_111(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
POOHMOXevents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_113(POOHMOXDatasets.Player) -> plyr_[_affID]
REF_114(address) -> REF_113.addr
REF_115(POOHMOXDatasets.Player) -> plyr_[_affID]
REF_116(bytes32) -> REF_115.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_114,REF_116,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMOX.isHuman()()"];
9->1;
}
// Function: 1753.sol-POOHMOX-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = POOHMOX

IRs:
name(string) := POOHMOX(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = POOHMOX

IRs:
symbol(string) := POOHMOX(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndInc_ = 300

IRs:
rndInc_(uint256) := 300(uint256)"];
}
// Function: 1753.sol-POOHMOX-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndExtra_ = 1

IRs:
rndExtra_(uint256) := 1(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
rndGap_ = 1

IRs:
rndGap_(uint256) := 1(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rndInit_ = 300

IRs:
rndInit_(uint256) := 300(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
rndMax_ = 300

IRs:
rndMax_(uint256) := 300(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 1753.sol-POOHMOX-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_268(uint256) = INTERNAL_CALL, POOHMOX.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_268(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_269(bool) = _earnings > 0
CONDITION TMP_269"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_491(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_492(uint256) -> REF_491.gen
REF_494(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_495(uint256) -> REF_494.gen
TMP_270(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_495'] 
REF_492(uint256) (->plyr_) := TMP_270(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_496(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_497(POOHMOXDatasets.PlayerRounds) -> REF_496[_rIDlast]
REF_498(uint256) -> REF_497.mask
REF_500(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_501(POOHMOXDatasets.PlayerRounds) -> REF_500[_rIDlast]
REF_502(uint256) -> REF_501.mask
TMP_271(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_502'] 
REF_498(uint256) (->plyrRnds_) := TMP_271(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 1753.sol-POOHMOX-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_321(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_566(POOHMOXDatasets.Round) -> round_[_rID]
REF_567(uint256) -> REF_566.keys
TMP_322(uint256) = TMP_321 / REF_567
_ppt(uint256) := TMP_322(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_568(POOHMOXDatasets.Round) -> round_[_rID]
REF_569(uint256) -> REF_568.mask
REF_571(POOHMOXDatasets.Round) -> round_[_rID]
REF_572(uint256) -> REF_571.mask
TMP_323(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_572'] 
REF_569(uint256) (->round_) := TMP_323(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_324(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_325(uint256) = TMP_324 / 1000000000000000000
_pearn(uint256) := TMP_325(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_574(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_575(POOHMOXDatasets.PlayerRounds) -> REF_574[_rID]
REF_576(uint256) -> REF_575.mask
REF_577(POOHMOXDatasets.Round) -> round_[_rID]
REF_578(uint256) -> REF_577.mask
TMP_326(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_578', '_keys'] 
TMP_327(uint256) = TMP_326 / 1000000000000000000
TMP_328(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_327', '_pearn'] 
REF_582(mapping(uint256 => POOHMOXDatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_583(POOHMOXDatasets.PlayerRounds) -> REF_582[_rID]
REF_584(uint256) -> REF_583.mask
TMP_329(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_328', 'REF_584'] 
REF_576(uint256) (->plyrRnds_) := TMP_329(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_587(POOHMOXDatasets.Round) -> round_[_rID]
REF_588(uint256) -> REF_587.keys
TMP_330(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_588'] 
TMP_331(uint256) = TMP_330 / 1000000000000000000
TMP_332(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_331'] 
RETURN TMP_332"];
}
// Function: 1753.sol-POOHMOX-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_503(POOHMOXDatasets.Round) -> round_[_rID]
REF_504(uint256) -> REF_503.end
TMP_272(bool) = _now > REF_504
REF_505(POOHMOXDatasets.Round) -> round_[_rID]
REF_506(uint256) -> REF_505.plyr
TMP_273(bool) = REF_506 == 0
TMP_274(bool) = TMP_272 && TMP_273
CONDITION TMP_274"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_275(uint256) = _keys / 1000000000000000000
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_275', 'rndInc_'] 
TMP_277(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_276', '_now'] 
_newTime(uint256) := TMP_277(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_278(uint256) = _keys / 1000000000000000000
TMP_279(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_278', 'rndInc_'] 
REF_511(POOHMOXDatasets.Round) -> round_[_rID]
REF_512(uint256) -> REF_511.end
TMP_280(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_279', 'REF_512'] 
_newTime(uint256) := TMP_280(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_281(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_282(bool) = _newTime < TMP_281
CONDITION TMP_282"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_514(POOHMOXDatasets.Round) -> round_[_rID]
REF_515(uint256) -> REF_514.end
REF_515(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_516(POOHMOXDatasets.Round) -> round_[_rID]
REF_517(uint256) -> REF_516.end
TMP_283(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_517(uint256) (->round_) := TMP_283(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 1753.sol-POOHMOX-whenGameDies()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_353(bool) = msg.sender == admin
TMP_354(None) = SOLIDITY_CALL require(bool)(TMP_353)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
flushDivs.call.value(address(this).balance)(bytes4(keccak256()(donate())))

IRs:
TMP_355 = CONVERT this to address
TMP_356(uint256) = SOLIDITY_CALL balance(address)(TMP_355)
TMP_358(bytes32) = SOLIDITY_CALL keccak256()(donate())
TMP_359 = CONVERT TMP_358 to bytes4
TMP_360(bool) = LOW_LEVEL_CALL, dest:flushDivs, function:call, arguments:['TMP_359'] value:TMP_356 "];
}
// Function: 1753.sol-POOHMOX-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_57(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_57(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_58(POOHMOXDatasets.Round) -> round_[_rID]
REF_59(uint256) -> REF_58.end
TMP_61(bool) = _now > REF_59
REF_60(POOHMOXDatasets.Round) -> round_[_rID]
REF_61(bool) -> REF_60.ended
TMP_62(bool) = REF_61 == False
TMP_63(bool) = TMP_61 && TMP_62
REF_62(POOHMOXDatasets.Round) -> round_[_rID]
REF_63(uint256) -> REF_62.plyr
TMP_64(bool) = REF_63 != 0
TMP_65(bool) = TMP_63 && TMP_64
CONDITION TMP_65"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_64(POOHMOXDatasets.Round) -> round_[_rID]
REF_65(bool) -> REF_64.ended
REF_65(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_66(POOHMOXDatasets.EventReturns) = INTERNAL_CALL, POOHMOX.endRound(POOHMOXDatasets.EventReturns)(_eventData_)
_eventData_(POOHMOXDatasets.EventReturns) := TMP_66(POOHMOXDatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_67(uint256) = INTERNAL_CALL, POOHMOX.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_67(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_68(bool) = _eth > 0
CONDITION TMP_68"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_66(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_67(address) -> REF_66.addr
Transfer dest:REF_67 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_69(uint256) -> _eventData_.compressedData
REF_70(uint256) -> _eventData_.compressedData
TMP_70(uint256) = _now * 1000000000000000000
TMP_71(uint256) = REF_70 + TMP_70
REF_69(uint256) (->_eventData_) := TMP_71(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_71(uint256) -> _eventData_.compressedIDs
REF_72(uint256) -> _eventData_.compressedIDs
TMP_72(uint256) = REF_72 + _pID
REF_71(uint256) (->_eventData_) := TMP_72(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
POOHMOXevents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.POOHAmount,_eventData_.genAmount)

IRs:
REF_74(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_75(bytes32) -> REF_74.name
REF_76(uint256) -> _eventData_.compressedData
REF_77(uint256) -> _eventData_.compressedIDs
REF_78(address) -> _eventData_.winnerAddr
REF_79(bytes32) -> _eventData_.winnerName
REF_80(uint256) -> _eventData_.amountWon
REF_81(uint256) -> _eventData_.newPot
REF_82(uint256) -> _eventData_.POOHAmount
REF_83(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_75,_eth,REF_76,REF_77,REF_78,REF_79,REF_80,REF_81,REF_82,REF_83)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_74(uint256) = INTERNAL_CALL, POOHMOX.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_74(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_75(bool) = _eth > 0
CONDITION TMP_75"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_84(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_85(address) -> REF_84.addr
Transfer dest:REF_85 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
POOHMOXevents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_88(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_89(bytes32) -> REF_88.name
Emit onWithdraw(_pID,msg.sender,REF_89,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, POOHMOX.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, POOHMOX.isHuman()()"];
23->1;
}
// Function: 1753.sol-POOHMOX-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_589(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_590(uint256) -> REF_589.lrnd
INTERNAL_CALL, POOHMOX.updateGenVault(uint256,uint256)(_pID,REF_590)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_591(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_592(uint256) -> REF_591.win
REF_594(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_595(uint256) -> REF_594.gen
TMP_334(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_592', 'REF_595'] 
REF_597(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_598(uint256) -> REF_597.aff
TMP_335(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_334', 'REF_598'] 
_earnings(uint256) := TMP_335(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_336(bool) = _earnings > 0
CONDITION TMP_336"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_599(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_600(uint256) -> REF_599.win
REF_600(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_601(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_602(uint256) -> REF_601.gen
REF_602(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_603(POOHMOXDatasets.Player) -> plyr_[_pID]
REF_604(uint256) -> REF_603.aff
REF_604(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 1753.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 1753.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 1753.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 1753.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 1753.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 1753.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 1753.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 1753.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 1753.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_436(uint256) = a + b
c(uint256) := TMP_436(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_437(bool) = c >= a
TMP_438(None) = SOLIDITY_CALL require(bool,string)(TMP_437,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1753.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_428(bool) = a == 0
CONDITION TMP_428"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_429(uint256) = a * b
c(uint256) := TMP_429(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_430(uint256) = c / a
TMP_431(bool) = TMP_430 == b
TMP_432(None) = SOLIDITY_CALL require(bool,string)(TMP_431,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 1753.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_446(bool) = x == 0
CONDITION TMP_446"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_447(bool) = y == 0
CONDITION TMP_447"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_448(bool) = i < y
CONDITION TMP_448"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_449(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_449(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_450(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 1753.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_445(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_445"];
}
// Function: 1753.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_439(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_440(uint256) = TMP_439 / 2
z(uint256) := TMP_440(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_441(bool) = z < y
CONDITION TMP_441"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_442(uint256) = x / z
TMP_443(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_442,z)
TMP_444(uint256) = TMP_443 / 2
z(uint256) := TMP_444(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 1753.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_433(bool) = b <= a
TMP_434(None) = SOLIDITY_CALL require(bool,string)(TMP_433,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_435(uint256) = a - b
RETURN TMP_435"];
}
}
