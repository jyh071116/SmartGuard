digraph G {
// Function: 20215.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_6(uint256) -> balances[_owner]
RETURN REF_6"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 20215.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = _to != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_1(uint256) -> balances[msg.sender]
TMP_3(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1', '_value'] 
REF_0(uint256) (->balances) := TMP_3(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_3(uint256) -> balances[_to]
REF_4(uint256) -> balances[_to]
TMP_4(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_4', '_value'] 
REF_3(uint256) (->balances) := TMP_4(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 20215.sol-BurnableToken-allowance(address,address)
digraph{
}
// Function: 20215.sol-BurnableToken-approve(address,uint256)
digraph{
}
// Function: 20215.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 20215.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_95(bool) = _value > 0
TMP_96(None) = SOLIDITY_CALL require(bool)(TMP_95)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_96(uint256) -> balances[msg.sender]
TMP_97(bool) = _value <= REF_96
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_97(uint256) -> balances[burner]
REF_98(uint256) -> balances[burner]
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_98', '_value'] 
REF_97(uint256) (->balances) := TMP_99(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_100(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
}
// Function: 20215.sol-BurnableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_80(mapping(address => uint256)) -> allowed[msg.sender]
REF_81(uint256) -> REF_80[_spender]
oldValue(uint256) := REF_81(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_86(bool) = _subtractedValue > oldValue
CONDITION TMP_86"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_82(mapping(address => uint256)) -> allowed[msg.sender]
REF_83(uint256) -> REF_82[_spender]
REF_83(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_84(mapping(address => uint256)) -> allowed[msg.sender]
REF_85(uint256) -> REF_84[_spender]
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_85(uint256) (->allowed) := TMP_87(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_87(mapping(address => uint256)) -> allowed[msg.sender]
REF_88(uint256) -> REF_87[_spender]
Emit Approval(msg.sender,_spender,REF_88)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20215.sol-BurnableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_76', '_addedValue'] 
REF_74(uint256) (->allowed) := TMP_84(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_78(mapping(address => uint256)) -> allowed[msg.sender]
REF_79(uint256) -> REF_78[_spender]
Emit Approval(msg.sender,_spender,REF_79)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20215.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 20215.sol-BurnableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 20215.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 20215.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 20215.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 20215.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 20215.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 20215.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 20215.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 20215.sol-MultiSend-MultiSend()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pecul = Peculium(peculAdress)

IRs:
TMP_18 = CONVERT peculAdress to Peculium
pecul(Peculium) := TMP_18(Peculium)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
decimals = pecul.decimals()

IRs:
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:pecul(Peculium), function:decimals, arguments:[]  
decimals(uint256) := TMP_19(uint256)"];
}
// Function: 20215.sol-MultiSend-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20215.sol-MultiSend-Send(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->18;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_vaddr.length == _vamounts.length)

IRs:
REF_8 -> LENGTH _vaddr
REF_9 -> LENGTH _vamounts
TMP_20(bool) = REF_8 == REF_9
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amountToSendTotal = 0

IRs:
amountToSendTotal(uint256) := 0(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->9;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
indexTest = 0

IRs:
indexTest(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
indexTest < _vaddr.length

IRs:
REF_10 -> LENGTH _vaddr
TMP_22(bool) = indexTest < REF_10
CONDITION TMP_22"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
amountToSendTotal = amountToSendTotal + _vamounts[indexTest]

IRs:
REF_11(uint256) -> _vamounts[indexTest]
TMP_23(uint256) = amountToSendTotal + REF_11
amountToSendTotal(uint256) := TMP_23(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
indexTest ++

IRs:
TMP_24(uint256) := indexTest(uint256)
indexTest(uint256) = indexTest + 1"];
8->6;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(amountToSendTotal * 10 ** decimals <= pecul.balanceOf(this))

IRs:
TMP_25(uint256) = 10 ** decimals
TMP_26(uint256) = amountToSendTotal * TMP_25
TMP_27(uint256) = HIGH_LEVEL_CALL, dest:pecul(Peculium), function:balanceOf, arguments:['this']  
TMP_28(bool) = TMP_26 <= TMP_27
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
index = 0

IRs:
index(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
index < _vaddr.length

IRs:
REF_13 -> LENGTH _vaddr
TMP_30(bool) = index < REF_13
CONDITION TMP_30"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
toAddress = _vaddr[index]

IRs:
REF_14(address) -> _vaddr[index]
toAddress(address) := REF_14(address)"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
amountTo_Send = _vamounts[index] * 10 ** decimals

IRs:
REF_15(uint256) -> _vamounts[index]
TMP_31(uint256) = 10 ** decimals
TMP_32(uint256) = REF_15 * TMP_31
amountTo_Send(uint256) := TMP_32(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
pecul.transfer(toAddress,amountTo_Send)

IRs:
TMP_33(bool) = HIGH_LEVEL_CALL, dest:pecul(Peculium), function:transfer, arguments:['toAddress', 'amountTo_Send']  "];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
index ++

IRs:
TMP_34(uint256) := index(uint256)
index(uint256) = index + 1"];
17->13;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
18->1;
}
// Function: 20215.sol-MultiSend-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_36(bool) = msg.sender == owner
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20215.sol-MultiSend-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
peculAdress = 0x3618516f45cd3c913f81f9987af41077932bc40d

IRs:
peculAdress(address) := 308827813468537651085607751904335551723914118157(uint256)"];
}
// Function: 20215.sol-MultiSend-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = newOwner != TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 20215.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20215.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_11(bool) = msg.sender == owner
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20215.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_6 = CONVERT 0 to address
TMP_7(bool) = newOwner != TMP_6
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 20215.sol-Peculium-ChangeLicense(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balancesCannotSell[target] = canSell

IRs:
REF_149(bool) -> balancesCannotSell[target]
REF_149(bool) (->balancesCannotSell) := canSell(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FrozenFunds(target,canSell)

IRs:
Emit FrozenFunds(target,canSell)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 20215.sol-Peculium-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20215.sol-Peculium-Peculium()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = MAX_SUPPLY_NBTOKEN

IRs:
totalSupply(uint256) := MAX_SUPPLY_NBTOKEN(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[address(this)] = totalSupply

IRs:
TMP_133 = CONVERT this to address
REF_144(uint256) -> balances[TMP_133]
REF_144(uint256) (->balances) := totalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
peculOld = PeculiumOld(peculOldAdress)

IRs:
TMP_134 = CONVERT peculOldAdress to PeculiumOld
peculOld(PeculiumOld) := TMP_134(PeculiumOld)"];
}
// Function: 20215.sol-Peculium-UpgradeTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(peculOld.totalSupply() > 0)

IRs:
TMP_143(uint256) = HIGH_LEVEL_CALL, dest:peculOld(PeculiumOld), function:totalSupply, arguments:[]  
TMP_144(bool) = TMP_143 > 0
TMP_145(None) = SOLIDITY_CALL require(bool)(TMP_144)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amountChanged = peculOld.allowance(msg.sender,address(this))

IRs:
TMP_146 = CONVERT this to address
TMP_147(uint256) = HIGH_LEVEL_CALL, dest:peculOld(PeculiumOld), function:allowance, arguments:['msg.sender', 'TMP_146']  
amountChanged(uint256) := TMP_147(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(amountChanged > 0)

IRs:
TMP_148(bool) = amountChanged > 0
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
peculOld.transferFrom(msg.sender,address(this),amountChanged)

IRs:
TMP_150 = CONVERT this to address
TMP_151(bool) = HIGH_LEVEL_CALL, dest:peculOld(PeculiumOld), function:transferFrom, arguments:['msg.sender', 'TMP_150', 'amountChanged']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
peculOld.burn(amountChanged)

IRs:
HIGH_LEVEL_CALL, dest:peculOld(PeculiumOld), function:burn, arguments:['amountChanged']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[address(this)] = balances[address(this)].sub(amountChanged)

IRs:
TMP_153 = CONVERT this to address
REF_154(uint256) -> balances[TMP_153]
TMP_154 = CONVERT this to address
REF_155(uint256) -> balances[TMP_154]
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_155', 'amountChanged'] 
REF_154(uint256) (->balances) := TMP_155(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(amountChanged)

IRs:
REF_157(uint256) -> balances[msg.sender]
REF_158(uint256) -> balances[msg.sender]
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_158', 'amountChanged'] 
REF_157(uint256) (->balances) := TMP_156(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(address(this),msg.sender,amountChanged)

IRs:
TMP_157 = CONVERT this to address
Emit Transfer(TMP_157,msg.sender,amountChanged)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ChangedTokens(msg.sender,amountChanged)

IRs:
Emit ChangedTokens(msg.sender,amountChanged)"];
}
// Function: 20215.sol-Peculium-allowance(address,address)
digraph{
}
// Function: 20215.sol-Peculium-approve(address,uint256)
digraph{
}
// Function: 20215.sol-Peculium-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_160(mapping(address => uint256)) -> allowed[msg.sender]
REF_161(uint256) -> REF_160[_spender]
REF_161(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData))

IRs:
TMP_161(bytes32) = SOLIDITY_CALL keccak256()(receiveApproval(address,uint256,address,bytes))
TMP_162 = CONVERT TMP_161 to bytes32
TMP_163 = CONVERT TMP_162 to bytes4
TMP_164(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_163', 'msg.sender', '_value', 'this', '_extraData']  
TMP_165(None) = SOLIDITY_CALL require(bool)(TMP_164)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20215.sol-Peculium-balanceOf(address)
digraph{
}
// Function: 20215.sol-Peculium-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_107(bool) = _value > 0
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_101(uint256) -> balances[msg.sender]
TMP_109(bool) = _value <= REF_101
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_102(uint256) -> balances[burner]
REF_103(uint256) -> balances[burner]
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_103', '_value'] 
REF_102(uint256) (->balances) := TMP_111(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_112(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
}
// Function: 20215.sol-Peculium-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_128(mapping(address => uint256)) -> allowed[msg.sender]
REF_129(uint256) -> REF_128[_spender]
oldValue(uint256) := REF_129(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_124(bool) = _subtractedValue > oldValue
CONDITION TMP_124"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_130(mapping(address => uint256)) -> allowed[msg.sender]
REF_131(uint256) -> REF_130[_spender]
REF_131(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_132(mapping(address => uint256)) -> allowed[msg.sender]
REF_133(uint256) -> REF_132[_spender]
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_133(uint256) (->allowed) := TMP_125(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_135(mapping(address => uint256)) -> allowed[msg.sender]
REF_136(uint256) -> REF_135[_spender]
Emit Approval(msg.sender,_spender,REF_136)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20215.sol-Peculium-getBlockTimestamp()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now

IRs:
RETURN now"];
}
// Function: 20215.sol-Peculium-getOwnerInfos()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerAddr = owner

IRs:
ownerAddr(address) := owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerBalance = balanceOf(ownerAddr)

IRs:
TMP_166(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(ownerAddr)
ownerBalance(uint256) := TMP_166(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(ownerAddr,ownerBalance)

IRs:
RETURN ownerAddr,ownerBalance"];
}
// Function: 20215.sol-Peculium-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_121(mapping(address => uint256)) -> allowed[msg.sender]
REF_122(uint256) -> REF_121[_spender]
REF_123(mapping(address => uint256)) -> allowed[msg.sender]
REF_124(uint256) -> REF_123[_spender]
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_124', '_addedValue'] 
REF_122(uint256) (->allowed) := TMP_122(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_126(mapping(address => uint256)) -> allowed[msg.sender]
REF_127(uint256) -> REF_126[_spender]
Emit Approval(msg.sender,_spender,REF_127)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20215.sol-Peculium-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_169(bool) = msg.sender == owner
TMP_170(None) = SOLIDITY_CALL require(bool)(TMP_169)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20215.sol-Peculium-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_SUPPLY_NBTOKEN = 20000000000 * 10 ** 8

IRs:
TMP_167(uint256) = 10 ** 8
TMP_168(uint256) = 20000000000 * TMP_167
MAX_SUPPLY_NBTOKEN(uint256) := TMP_168(uint256)"];
}
// Function: 20215.sol-Peculium-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
peculOldAdress = 0x53148Bb4551707edF51a1e8d7A93698d18931225

IRs:
peculOldAdress(address) := 474304418854023816716650255785123763135026762277(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Peculium

IRs:
name(string) := Peculium(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = PCL

IRs:
symbol(string) := PCL(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 8

IRs:
decimals(uint256) := 8(uint256)"];
}
// Function: 20215.sol-Peculium-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balancesCannotSell[msg.sender] == false)

IRs:
REF_145(bool) -> balancesCannotSell[msg.sender]
TMP_135(bool) = REF_145 == False
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
BasicToken.transfer(_to,_value)

IRs:
TMP_137(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(_to,_value)
RETURN TMP_137"];
}
// Function: 20215.sol-Peculium-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balancesCannotSell[msg.sender] == false)

IRs:
REF_147(bool) -> balancesCannotSell[msg.sender]
TMP_138(bool) = REF_147 == False
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
StandardToken.transferFrom(_from,_to,_value)

IRs:
TMP_140(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_140"];
}
// Function: 20215.sol-Peculium-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_102 = CONVERT 0 to address
TMP_103(bool) = newOwner != TMP_102
TMP_104(None) = SOLIDITY_CALL require(bool)(TMP_103)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 20215.sol-PeculiumOld-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 20215.sol-PeculiumOld-PeculiumOld()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = MAX_SUPPLY_NBTOKEN

IRs:
totalSupply(uint256) := MAX_SUPPLY_NBTOKEN(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[owner] = totalSupply

IRs:
REF_206(uint256) -> balances[owner]
REF_206(uint256) (->balances) := totalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balancesCanSell[owner] = true

IRs:
REF_207(bool) -> balancesCanSell[owner]
REF_207(bool) (->balancesCanSell) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dateStartContract = now

IRs:
dateStartContract(uint256) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dateDefrost = dateStartContract + 7344000

IRs:
TMP_202(uint256) = dateStartContract + 7344000
dateDefrost(uint256) := TMP_202(uint256)"];
}
// Function: 20215.sol-PeculiumOld-allowance(address,address)
digraph{
}
// Function: 20215.sol-PeculiumOld-approve(address,uint256)
digraph{
}
// Function: 20215.sol-PeculiumOld-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_214(mapping(address => uint256)) -> allowed[msg.sender]
REF_215(uint256) -> REF_214[_spender]
REF_215(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData))

IRs:
TMP_213(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_214 = CONVERT TMP_213 to bytes32
TMP_215 = CONVERT TMP_214 to bytes4
TMP_216(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_215', 'msg.sender', '_value', 'this', '_extraData']  
TMP_217(None) = SOLIDITY_CALL require(bool)(TMP_216)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20215.sol-PeculiumOld-balanceOf(address)
digraph{
}
// Function: 20215.sol-PeculiumOld-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_176(bool) = _value > 0
TMP_177(None) = SOLIDITY_CALL require(bool)(TMP_176)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_163(uint256) -> balances[msg.sender]
TMP_178(bool) = _value <= REF_163
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_164(uint256) -> balances[burner]
REF_165(uint256) -> balances[burner]
TMP_180(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_165', '_value'] 
REF_164(uint256) (->balances) := TMP_180(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_181(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
}
// Function: 20215.sol-PeculiumOld-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_190(mapping(address => uint256)) -> allowed[msg.sender]
REF_191(uint256) -> REF_190[_spender]
oldValue(uint256) := REF_191(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_193(bool) = _subtractedValue > oldValue
CONDITION TMP_193"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_192(mapping(address => uint256)) -> allowed[msg.sender]
REF_193(uint256) -> REF_192[_spender]
REF_193(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_194(mapping(address => uint256)) -> allowed[msg.sender]
REF_195(uint256) -> REF_194[_spender]
TMP_194(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_195(uint256) (->allowed) := TMP_194(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_197(mapping(address => uint256)) -> allowed[msg.sender]
REF_198(uint256) -> REF_197[_spender]
Emit Approval(msg.sender,_spender,REF_198)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20215.sol-PeculiumOld-defrostToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > dateDefrost)

IRs:
TMP_203(bool) = now > dateDefrost
TMP_204(None) = SOLIDITY_CALL require(bool)(TMP_203)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balancesCanSell[msg.sender] = true

IRs:
REF_208(bool) -> balancesCanSell[msg.sender]
REF_208(bool) (->balancesCanSell) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Defroze(msg.sender,true)

IRs:
Emit Defroze(msg.sender,True)"];
}
// Function: 20215.sol-PeculiumOld-freezeAccount(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balancesCanSell[target] = canSell

IRs:
REF_213(bool) -> balancesCanSell[target]
REF_213(bool) (->balancesCanSell) := canSell(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FrozenFunds(target,canSell)

IRs:
Emit FrozenFunds(target,canSell)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 20215.sol-PeculiumOld-getBlockTimestamp()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now

IRs:
RETURN now"];
}
// Function: 20215.sol-PeculiumOld-getOwnerInfos()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerAddr = owner

IRs:
ownerAddr(address) := owner(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerBalance = balanceOf(ownerAddr)

IRs:
TMP_218(uint256) = INTERNAL_CALL, BasicToken.balanceOf(address)(ownerAddr)
ownerBalance(uint256) := TMP_218(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
(ownerAddr,ownerBalance)

IRs:
RETURN ownerAddr,ownerBalance"];
}
// Function: 20215.sol-PeculiumOld-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_183(mapping(address => uint256)) -> allowed[msg.sender]
REF_184(uint256) -> REF_183[_spender]
REF_185(mapping(address => uint256)) -> allowed[msg.sender]
REF_186(uint256) -> REF_185[_spender]
TMP_191(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_186', '_addedValue'] 
REF_184(uint256) (->allowed) := TMP_191(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_188(mapping(address => uint256)) -> allowed[msg.sender]
REF_189(uint256) -> REF_188[_spender]
Emit Approval(msg.sender,_spender,REF_189)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20215.sol-PeculiumOld-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_221(bool) = msg.sender == owner
TMP_222(None) = SOLIDITY_CALL require(bool)(TMP_221)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 20215.sol-PeculiumOld-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_SUPPLY_NBTOKEN = 20000000000 * 10 ** 8

IRs:
TMP_219(uint256) = 10 ** 8
TMP_220(uint256) = 20000000000 * TMP_219
MAX_SUPPLY_NBTOKEN(uint256) := TMP_220(uint256)"];
}
// Function: 20215.sol-PeculiumOld-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Peculium

IRs:
name(string) := Peculium(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = PCL

IRs:
symbol(string) := PCL(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 8

IRs:
decimals(uint256) := 8(uint256)"];
}
// Function: 20215.sol-PeculiumOld-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balancesCanSell[msg.sender])

IRs:
REF_209(bool) -> balancesCanSell[msg.sender]
TMP_206(None) = SOLIDITY_CALL require(bool)(REF_209)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
BasicToken.transfer(_to,_value)

IRs:
TMP_207(bool) = INTERNAL_CALL, BasicToken.transfer(address,uint256)(_to,_value)
RETURN TMP_207"];
}
// Function: 20215.sol-PeculiumOld-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balancesCanSell[msg.sender])

IRs:
REF_211(bool) -> balancesCanSell[msg.sender]
TMP_208(None) = SOLIDITY_CALL require(bool)(REF_211)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
StandardToken.transferFrom(_from,_to,_value)

IRs:
TMP_209(bool) = INTERNAL_CALL, StandardToken.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_209"];
}
// Function: 20215.sol-PeculiumOld-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_171 = CONVERT 0 to address
TMP_172(bool) = newOwner != TMP_171
TMP_173(None) = SOLIDITY_CALL require(bool)(TMP_172)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 20215.sol-SafeERC20-safeApprove(ERC20,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.approve(spender,value))

IRs:
TMP_42(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:approve, arguments:['spender', 'value']  
TMP_43(None) = SOLIDITY_CALL assert(bool)(TMP_42)"];
}
// Function: 20215.sol-SafeERC20-safeTransfer(ERC20Basic,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.transfer(to,value))

IRs:
TMP_38(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Basic), function:transfer, arguments:['to', 'value']  
TMP_39(None) = SOLIDITY_CALL assert(bool)(TMP_38)"];
}
// Function: 20215.sol-SafeERC20-safeTransferFrom(ERC20,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(token.transferFrom(from,to,value))

IRs:
TMP_40(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transferFrom, arguments:['from', 'to', 'value']  
TMP_41(None) = SOLIDITY_CALL assert(bool)(TMP_40)"];
}
// Function: 20215.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_54(uint256) = a + b
c(uint256) := TMP_54(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_55(bool) = c >= a
TMP_56(None) = SOLIDITY_CALL assert(bool)(TMP_55)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 20215.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_50(uint256) = a / b
c(uint256) := TMP_50(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 20215.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_44(uint256) = a * b
c(uint256) := TMP_44(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_45(bool) = a == 0
TMP_46(uint256) = c / a
TMP_47(bool) = TMP_46 == b
TMP_48(bool) = TMP_45 || TMP_47
TMP_49(None) = SOLIDITY_CALL assert(bool)(TMP_48)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 20215.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_51(bool) = b <= a
TMP_52(None) = SOLIDITY_CALL assert(bool)(TMP_51)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_53(uint256) = a - b
RETURN TMP_53"];
}
// Function: 20215.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_40(mapping(address => uint256)) -> allowed[_owner]
REF_41(uint256) -> REF_40[_spender]
RETURN REF_41"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 20215.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_38(mapping(address => uint256)) -> allowed[msg.sender]
REF_39(uint256) -> REF_38[_spender]
REF_39(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 20215.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 20215.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_49(mapping(address => uint256)) -> allowed[msg.sender]
REF_50(uint256) -> REF_49[_spender]
oldValue(uint256) := REF_50(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_73(bool) = _subtractedValue > oldValue
CONDITION TMP_73"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_51(mapping(address => uint256)) -> allowed[msg.sender]
REF_52(uint256) -> REF_51[_spender]
REF_52(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_53(mapping(address => uint256)) -> allowed[msg.sender]
REF_54(uint256) -> REF_53[_spender]
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_54(uint256) (->allowed) := TMP_74(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_56(mapping(address => uint256)) -> allowed[msg.sender]
REF_57(uint256) -> REF_56[_spender]
Emit Approval(msg.sender,_spender,REF_57)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20215.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_42(mapping(address => uint256)) -> allowed[msg.sender]
REF_43(uint256) -> REF_42[_spender]
REF_44(mapping(address => uint256)) -> allowed[msg.sender]
REF_45(uint256) -> REF_44[_spender]
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_45', '_addedValue'] 
REF_43(uint256) (->allowed) := TMP_71(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_47(mapping(address => uint256)) -> allowed[msg.sender]
REF_48(uint256) -> REF_47[_spender]
Emit Approval(msg.sender,_spender,REF_48)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 20215.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 20215.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_63 = CONVERT 0 to address
TMP_64(bool) = _to != TMP_63
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_27(mapping(address => uint256)) -> allowed[_from]
REF_28(uint256) -> REF_27[msg.sender]
_allowance(uint256) := REF_28(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_29(uint256) -> balances[_from]
REF_30(uint256) -> balances[_from]
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_30', '_value'] 
REF_29(uint256) (->balances) := TMP_66(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_32(uint256) -> balances[_to]
REF_33(uint256) -> balances[_to]
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_33', '_value'] 
REF_32(uint256) (->balances) := TMP_67(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] = _allowance.sub(_value)

IRs:
REF_35(mapping(address => uint256)) -> allowed[_from]
REF_36(uint256) -> REF_35[msg.sender]
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_allowance', '_value'] 
REF_36(uint256) (->allowed) := TMP_68(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
}
