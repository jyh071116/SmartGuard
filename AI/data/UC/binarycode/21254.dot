digraph G {
// Function: 21254.sol-AuctusToken-AuctusToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractOwner = msg.sender

IRs:
contractOwner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenSaleContract = address(0)

IRs:
TMP_6 = CONVERT 0 to address
tokenSaleContract(address) := TMP_6(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenSaleIsFinished = false

IRs:
tokenSaleIsFinished(bool) := False(bool)"];
}
// Function: 21254.sol-AuctusToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[owner][spender]

IRs:
REF_1(mapping(address => uint256)) -> allowed[owner]
REF_2(uint256) -> REF_1[spender]
RETURN REF_2"];
}
// Function: 21254.sol-AuctusToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = value

IRs:
REF_3(mapping(address => uint256)) -> allowed[msg.sender]
REF_4(uint256) -> REF_3[spender]
REF_4(uint256) (->allowed) := value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,value)

IRs:
Emit Approval(msg.sender,spender,value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 21254.sol-AuctusToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[who]

IRs:
REF_0(uint256) -> balances[who]
RETURN REF_0"];
}
// Function: 21254.sol-AuctusToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
internalBurn(msg.sender,value)

IRs:
INTERNAL_CALL, AuctusToken.internalBurn(address,uint256)(msg.sender,value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 21254.sol-AuctusToken-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[from][msg.sender] = allowed[from][msg.sender].sub(value)

IRs:
REF_28(mapping(address => uint256)) -> allowed[from]
REF_29(uint256) -> REF_28[msg.sender]
REF_30(mapping(address => uint256)) -> allowed[from]
REF_31(uint256) -> REF_30[msg.sender]
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_31', 'value'] 
REF_29(uint256) (->allowed) := TMP_31(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
internalBurn(from,value)

IRs:
INTERNAL_CALL, AuctusToken.internalBurn(address,uint256)(from,value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 21254.sol-AuctusToken-callTokenFallback(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ContractReceiver(to).tokenFallback(from,value,data)

IRs:
TMP_53 = CONVERT to to ContractReceiver
HIGH_LEVEL_CALL, dest:TMP_53(ContractReceiver), function:tokenFallback, arguments:['from', 'value', 'data']  "];
}
// Function: 21254.sol-AuctusToken-canTransfer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(tokenSaleIsFinished || from == tokenSaleContract || from == preSaleDistributionContract)

IRs:
TMP_55(bool) = from == tokenSaleContract
TMP_56(bool) = tokenSaleIsFinished || TMP_55
TMP_57(bool) = from == preSaleDistributionContract
TMP_58(bool) = TMP_56 || TMP_57
RETURN TMP_58"];
}
// Function: 21254.sol-AuctusToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
currentValue = allowed[msg.sender][spender]

IRs:
REF_12(mapping(address => uint256)) -> allowed[msg.sender]
REF_13(uint256) -> REF_12[spender]
currentValue(uint256) := REF_13(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
value > currentValue

IRs:
TMP_10(bool) = value > currentValue
CONDITION TMP_10"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][spender] = 0

IRs:
REF_14(mapping(address => uint256)) -> allowed[msg.sender]
REF_15(uint256) -> REF_14[spender]
REF_15(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][spender] = currentValue.sub(value)

IRs:
REF_16(mapping(address => uint256)) -> allowed[msg.sender]
REF_17(uint256) -> REF_16[spender]
TMP_11(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['currentValue', 'value'] 
REF_17(uint256) (->allowed) := TMP_11(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,spender,allowed[msg.sender][spender])

IRs:
REF_19(mapping(address => uint256)) -> allowed[msg.sender]
REF_20(uint256) -> REF_19[spender]
Emit Approval(msg.sender,spender,REF_20)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 21254.sol-AuctusToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = allowed[msg.sender][spender].add(value)

IRs:
REF_5(mapping(address => uint256)) -> allowed[msg.sender]
REF_6(uint256) -> REF_5[spender]
REF_7(mapping(address => uint256)) -> allowed[msg.sender]
REF_8(uint256) -> REF_7[spender]
TMP_8(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', 'value'] 
REF_6(uint256) (->allowed) := TMP_8(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,allowed[msg.sender][spender])

IRs:
REF_10(mapping(address => uint256)) -> allowed[msg.sender]
REF_11(uint256) -> REF_10[spender]
Emit Approval(msg.sender,spender,REF_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 21254.sol-AuctusToken-internalBurn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = balances[from].sub(value)

IRs:
REF_40(uint256) -> balances[from]
REF_41(uint256) -> balances[from]
TMP_50(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_41', 'value'] 
REF_40(uint256) (->balances) := TMP_50(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = totalSupply.sub(value)

IRs:
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', 'value'] 
totalSupply(uint256) := TMP_51(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Burn(from,value)

IRs:
Emit Burn(from,value)"];
}
// Function: 21254.sol-AuctusToken-internalTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(canTransfer(from))

IRs:
TMP_46(bool) = INTERNAL_CALL, AuctusToken.canTransfer(address)(from)
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[from] = balances[from].sub(value)

IRs:
REF_34(uint256) -> balances[from]
REF_35(uint256) -> balances[from]
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_35', 'value'] 
REF_34(uint256) (->balances) := TMP_48(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = balances[to].add(value)

IRs:
REF_37(uint256) -> balances[to]
REF_38(uint256) -> balances[to]
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_38', 'value'] 
REF_37(uint256) (->balances) := TMP_49(uint256)"];
}
// Function: 21254.sol-AuctusToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_45(bool) = length > 0
RETURN TMP_45"];
}
// Function: 21254.sol-AuctusToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(contractOwner == msg.sender)

IRs:
TMP_59(bool) = contractOwner == msg.sender
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 21254.sol-AuctusToken-setTokenSale(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenSaleContract == address(0))

IRs:
TMP_37 = CONVERT 0 to address
TMP_38(bool) = tokenSaleContract == TMP_37
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
preSaleDistributionContract = preSaleDistribution

IRs:
preSaleDistributionContract(address) := preSaleDistribution(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokenSaleContract = tokenSale

IRs:
tokenSaleContract(address) := tokenSale(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = maximumSupply

IRs:
totalSupply(uint256) := maximumSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[tokenSale] = maximumSupply

IRs:
REF_33(uint256) -> balances[tokenSale]
REF_33(uint256) (->balances) := maximumSupply(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
callTokenFallback(tokenSale,0x0,maximumSupply,empty)

IRs:
INTERNAL_CALL, AuctusToken.callTokenFallback(address,address,uint256,bytes)(tokenSale,0,maximumSupply,empty)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(0x0,tokenSale,maximumSupply)

IRs:
Emit Transfer(0,tokenSale,maximumSupply)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, AuctusToken.onlyOwner()()"];
9->1;
}
// Function: 21254.sol-AuctusToken-setTokenSaleFinished()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == tokenSaleContract)

IRs:
TMP_43(bool) = msg.sender == tokenSaleContract
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenSaleIsFinished = true

IRs:
tokenSaleIsFinished(bool) := True(bool)"];
}
// Function: 21254.sol-AuctusToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Auctus Token

IRs:
name(string) := Auctus Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = AUC

IRs:
symbol(string) := AUC(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 21254.sol-AuctusToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
internalTransfer(msg.sender,to,value)

IRs:
INTERNAL_CALL, AuctusToken.internalTransfer(address,address,uint256)(msg.sender,to,value)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Transfer(msg.sender,to,value)

IRs:
Emit Transfer(msg.sender,to,value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 21254.sol-AuctusToken-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
internalTransfer(msg.sender,to,value)

IRs:
INTERNAL_CALL, AuctusToken.internalTransfer(address,address,uint256)(msg.sender,to,value)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(to)

IRs:
TMP_19(bool) = INTERNAL_CALL, AuctusToken.isContract(address)(to)
CONDITION TMP_19"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
callTokenFallback(to,msg.sender,value,data)

IRs:
INTERNAL_CALL, AuctusToken.callTokenFallback(address,address,uint256,bytes)(to,msg.sender,value,data)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,to,value,data)

IRs:
Emit Transfer(msg.sender,to,value,data)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 21254.sol-AuctusToken-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
internalTransfer(msg.sender,to,value)

IRs:
INTERNAL_CALL, AuctusToken.internalTransfer(address,address,uint256)(msg.sender,to,value)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(to)

IRs:
TMP_23(bool) = INTERNAL_CALL, AuctusToken.isContract(address)(to)
CONDITION TMP_23"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
assert(bool)(to.call.value(0)(bytes4(keccak256()(custom_fallback)),msg.sender,value,data))

IRs:
TMP_25(bytes32) = SOLIDITY_CALL keccak256()(custom_fallback)
TMP_26 = CONVERT TMP_25 to bytes4
TMP_27(bool) = LOW_LEVEL_CALL, dest:to, function:call, arguments:['TMP_26', 'msg.sender', 'value', 'data'] value:0 
TMP_28(None) = SOLIDITY_CALL assert(bool)(TMP_27)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,to,value,data)

IRs:
Emit Transfer(msg.sender,to,value,data)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 21254.sol-AuctusToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[from][msg.sender] = allowed[from][msg.sender].sub(value)

IRs:
REF_21(mapping(address => uint256)) -> allowed[from]
REF_22(uint256) -> REF_21[msg.sender]
REF_23(mapping(address => uint256)) -> allowed[from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_13(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_24', 'value'] 
REF_22(uint256) (->allowed) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
internalTransfer(from,to,value)

IRs:
INTERNAL_CALL, AuctusToken.internalTransfer(address,address,uint256)(from,to,value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(from,to,value)

IRs:
Emit Transfer(from,to,value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 21254.sol-AuctusToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_33 = CONVERT 0 to address
TMP_34(bool) = newOwner != TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
contractOwner = newOwner

IRs:
contractOwner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, AuctusToken.onlyOwner()()"];
3->1;
}
// Function: 21254.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 21254.sol-EthereumStandards-allowance(address,address)
digraph{
}
// Function: 21254.sol-EthereumStandards-approve(address,uint256)
digraph{
}
// Function: 21254.sol-EthereumStandards-balanceOf(address)
digraph{
}
// Function: 21254.sol-EthereumStandards-transfer(address,uint256)
digraph{
}
// Function: 21254.sol-EthereumStandards-transfer(address,uint256,bytes)
digraph{
}
// Function: 21254.sol-EthereumStandards-transfer(address,uint256,bytes,string)
digraph{
}
// Function: 21254.sol-EthereumStandards-transferFrom(address,address,uint256)
digraph{
}
// Function: 21254.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_0(uint256) = a + b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a <= c)

IRs:
TMP_1(bool) = a <= c
TMP_2(None) = SOLIDITY_CALL assert(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 21254.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(a >= b)

IRs:
TMP_3(bool) = a >= b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_5(uint256) = a - b
RETURN TMP_5"];
}
}
