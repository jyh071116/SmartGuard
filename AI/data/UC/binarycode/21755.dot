digraph G {
// Function: 21755.sol-COIN_BOX-Collect(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_5(COIN_BOX.Holder) -> Acc[msg.sender]
acc(COIN_BOX.Holder) := REF_5(COIN_BOX.Holder)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime

IRs:
REF_6(uint256) -> acc.balance
TMP_5(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_6(bool) = REF_7 >= _am
TMP_7(bool) = TMP_5 && TMP_6
REF_8(uint256) -> acc.unlockTime
TMP_8(bool) = now > REF_8
TMP_9(bool) = TMP_7 && TMP_8
CONDITION TMP_9"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_11(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_11"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
acc.balance -= _am

IRs:
REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogFile.AddMessage(msg.sender,_am,Collect)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', '_am', 'Collect']  "];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 21755.sol-COIN_BOX-Initialized()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
intitalized = true

IRs:
intitalized(bool) := True(bool)"];
}
// Function: 21755.sol-COIN_BOX-Put(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_0(COIN_BOX.Holder) -> Acc[msg.sender]
acc(COIN_BOX.Holder) := REF_0(COIN_BOX.Holder)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
acc.balance += msg.value

IRs:
REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
now + _lockTime > acc.unlockTime

IRs:
TMP_1(uint256) = now + _lockTime
REF_2(uint256) -> acc.unlockTime
TMP_2(bool) = TMP_1 > REF_2
CONDITION TMP_2"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
acc.unlockTime = now + _lockTime

IRs:
REF_3(uint256) -> acc.unlockTime
TMP_3(uint256) = now + _lockTime
REF_3(uint256) (->acc) := TMP_3(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LogFile.AddMessage(msg.sender,msg.value,Put)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  "];
}
// Function: 21755.sol-COIN_BOX-SetLogFile(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
intitalized

IRs:
CONDITION intitalized"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LogFile = Log(_log)

IRs:
TMP_0 = CONVERT _log to Log
LogFile(Log) := TMP_0(Log)"];
}
// Function: 21755.sol-COIN_BOX-SetMinSum(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
intitalized

IRs:
CONDITION intitalized"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
MinSum = _val

IRs:
MinSum(uint256) := _val(uint256)"];
}
// Function: 21755.sol-COIN_BOX-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Put(0)

IRs:
INTERNAL_CALL, COIN_BOX.Put(uint256)(0)"];
}
// Function: 21755.sol-Log-AddMessage(address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_13(address) -> LastMsg.Sender
REF_13(address) (->LastMsg) := _adr(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LastMsg.Time = now

IRs:
REF_14(uint256) -> LastMsg.Time
REF_14(uint256) (->LastMsg) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_15(uint256) -> LastMsg.Val
REF_15(uint256) (->LastMsg) := _val(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_16(string) -> LastMsg.Data
REF_16(string) (->LastMsg) := _data(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
History.push(LastMsg)

IRs:
REF_18 -> LENGTH History
TMP_15(uint256) := REF_18(uint256)
TMP_16(uint256) = TMP_15 + 1
REF_18(uint256) (->History) := TMP_16(uint256)
REF_19(Log.Message) -> History[TMP_15]
REF_19(Log.Message) (->History) := LastMsg(Log.Message)"];
}
}
