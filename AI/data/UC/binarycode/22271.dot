digraph G {
// Function: 22271.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tkn.sender = _from

IRs:
REF_0(address) -> tkn.sender
REF_0(address) (->tkn) := _from(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tkn.value = _value

IRs:
REF_1(uint256) -> tkn.value
REF_1(uint256) (->tkn) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tkn.data = _data

IRs:
REF_2(bytes) -> tkn.data
REF_2(bytes) (->tkn) := _data(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24)

IRs:
REF_3(None) -> _data[3]
TMP_17 = CONVERT REF_3 to uint32
REF_4(None) -> _data[2]
TMP_18 = CONVERT REF_4 to uint32
TMP_19(uint32) = TMP_18 << 8
TMP_20(uint32) = TMP_17 + TMP_19
REF_5(None) -> _data[1]
TMP_21 = CONVERT REF_5 to uint32
TMP_22(uint32) = TMP_21 << 16
TMP_23(uint32) = TMP_20 + TMP_22
REF_6(None) -> _data[0]
TMP_24 = CONVERT REF_6 to uint32
TMP_25(uint32) = TMP_24 << 24
TMP_26(uint32) = TMP_23 + TMP_25
u(uint32) := TMP_26(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tkn.sig = bytes4(u)

IRs:
REF_7(bytes4) -> tkn.sig
TMP_27 = CONVERT u to bytes4
REF_7(bytes4) (->tkn) := TMP_27(bytes4)"];
}
// Function: 22271.sol-ERC223-balanceOf(address)
digraph{
}
// Function: 22271.sol-ERC223-decimals()
digraph{
}
// Function: 22271.sol-ERC223-name()
digraph{
}
// Function: 22271.sol-ERC223-symbol()
digraph{
}
// Function: 22271.sol-ERC223-totalSupply()
digraph{
}
// Function: 22271.sol-ERC223-transfer(address,uint256)
digraph{
}
// Function: 22271.sol-ERC223-transfer(address,uint256,bytes)
digraph{
}
// Function: 22271.sol-ERC223-transfer(address,uint256,bytes,string)
digraph{
}
// Function: 22271.sol-MyDFSToken-MyDFSToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = 125 * 1e12

IRs:
TMP_145(uint256) = 125 * 1000000000000
totalSupply(uint256) := TMP_145(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_80(uint256) -> balances[msg.sender]
REF_80(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 22271.sol-MyDFSToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[owner][spender]

IRs:
REF_78(mapping(address => uint256)) -> allowed[owner]
REF_79(uint256) -> REF_78[spender]
RETURN REF_79"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 22271.sol-MyDFSToken-balanceOf(address)
digraph{
}
// Function: 22271.sol-MyDFSToken-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
decimals

IRs:
RETURN decimals"];
2[label="Node Type: RETURN 2

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 22271.sol-MyDFSToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = allowed[msg.sender][spender].add(value)

IRs:
REF_72(mapping(address => uint256)) -> allowed[msg.sender]
REF_73(uint256) -> REF_72[spender]
REF_74(mapping(address => uint256)) -> allowed[msg.sender]
REF_75(uint256) -> REF_74[spender]
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_75', 'value'] 
REF_73(uint256) (->allowed) := TMP_143(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 22271.sol-MyDFSToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_144(None) = SOLIDITY_CALL revert()()"];
}
// Function: 22271.sol-MyDFSToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = allowed[msg.sender][spender].add(value)

IRs:
REF_67(mapping(address => uint256)) -> allowed[msg.sender]
REF_68(uint256) -> REF_67[spender]
REF_69(mapping(address => uint256)) -> allowed[msg.sender]
REF_70(uint256) -> REF_69[spender]
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_70', 'value'] 
REF_68(uint256) (->allowed) := TMP_142(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 22271.sol-MyDFSToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_107(bool) = length > 0
RETURN TMP_107"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 22271.sol-MyDFSToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name

IRs:
RETURN name"];
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 22271.sol-MyDFSToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = MyDFS Token

IRs:
name(string) := MyDFS Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
decimals = 6

IRs:
decimals(uint8) := 6(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = MyDFS

IRs:
symbol(string) := MyDFS(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
version = H1.0

IRs:
version(string) := H1.0(string)"];
}
// Function: 22271.sol-MyDFSToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol

IRs:
RETURN symbol"];
2[label="Node Type: RETURN 2

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 22271.sol-MyDFSToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 22271.sol-MyDFSToken-transfer(address,uint256)
digraph{
}
// Function: 22271.sol-MyDFSToken-transfer(address,uint256,bytes)
digraph{
}
// Function: 22271.sol-MyDFSToken-transfer(address,uint256,bytes,string)
digraph{
}
// Function: 22271.sol-MyDFSToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(_from) < _value && allowance(_from,msg.sender) < _value

IRs:
TMP_126(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_from)
TMP_127(bool) = TMP_126 < _value
TMP_128(uint256) = INTERNAL_CALL, StandardToken.allowance(address,address)(_from,msg.sender)
TMP_129(bool) = TMP_128 < _value
TMP_130(bool) = TMP_127 && TMP_129
CONDITION TMP_130"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_131(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balanceOf(_to).add(_value)

IRs:
REF_59(uint256) -> balances[_to]
TMP_132(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_to)
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_132', '_value'] 
REF_59(uint256) (->balances) := TMP_133(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_from] = balanceOf(_from).sub(_value)

IRs:
REF_61(uint256) -> balances[_from]
TMP_134(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_from)
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_134', '_value'] 
REF_61(uint256) (->balances) := TMP_135(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allowed[_from][msg.sender] = allowance(_from,msg.sender).sub(_value)

IRs:
REF_63(mapping(address => uint256)) -> allowed[_from]
REF_64(uint256) -> REF_63[msg.sender]
TMP_136(uint256) = INTERNAL_CALL, StandardToken.allowance(address,address)(_from,msg.sender)
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_136', '_value'] 
REF_64(uint256) (->allowed) := TMP_137(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
isContract(_to)

IRs:
TMP_138(bool) = INTERNAL_CALL, StandardToken.isContract(address)(_to)
CONDITION TMP_138"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_139 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_139(ContractReceiver)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,empty)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', 'empty']  "];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 22271.sol-MyDFSToken-transferToAddress(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_108(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(msg.sender)
TMP_109(bool) = TMP_108 < _value
CONDITION TMP_109"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_110(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balanceOf(msg.sender).sub(_value)

IRs:
REF_50(uint256) -> balances[msg.sender]
TMP_111(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(msg.sender)
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_111', '_value'] 
REF_50(uint256) (->balances) := TMP_112(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balanceOf(_to).add(_value)

IRs:
REF_52(uint256) -> balances[_to]
TMP_113(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_to)
TMP_114(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_113', '_value'] 
REF_52(uint256) (->balances) := TMP_114(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 22271.sol-MyDFSToken-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_116(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(msg.sender)
TMP_117(bool) = TMP_116 < _value
CONDITION TMP_117"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_118(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balanceOf(msg.sender).sub(_value)

IRs:
REF_54(uint256) -> balances[msg.sender]
TMP_119(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(msg.sender)
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_119', '_value'] 
REF_54(uint256) (->balances) := TMP_120(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balanceOf(_to).add(_value)

IRs:
REF_56(uint256) -> balances[_to]
TMP_121(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_to)
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_121', '_value'] 
REF_56(uint256) (->balances) := TMP_122(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_123 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_123(ContractReceiver)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 22271.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 22271.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 22271.sol-SafeMath-max256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_15(bool) = a >= b
CONDITION TMP_15"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 22271.sol-SafeMath-max64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a >= b

IRs:
TMP_13(bool) = a >= b
CONDITION TMP_13"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 22271.sol-SafeMath-min256(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_16(bool) = a < b
CONDITION TMP_16"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 22271.sol-SafeMath-min64(uint64,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
a < b

IRs:
TMP_14(bool) = a < b
CONDITION TMP_14"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
a

IRs:
RETURN a"];
4[label="Node Type: RETURN 4

EXPRESSION:
b

IRs:
RETURN b"];
}
// Function: 22271.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 22271.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 22271.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[owner][spender]

IRs:
REF_42(mapping(address => uint256)) -> allowed[owner]
REF_43(uint256) -> REF_42[spender]
RETURN REF_43"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 22271.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[owner]

IRs:
REF_41(uint256) -> balances[owner]
RETURN REF_41"];
}
// Function: 22271.sol-StandardToken-decimals()
digraph{
}
// Function: 22271.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = allowed[msg.sender][spender].add(value)

IRs:
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[spender]
REF_38(mapping(address => uint256)) -> allowed[msg.sender]
REF_39(uint256) -> REF_38[spender]
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_39', 'value'] 
REF_37(uint256) (->allowed) := TMP_85(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 22271.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = allowed[msg.sender][spender].add(value)

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[spender]
REF_33(mapping(address => uint256)) -> allowed[msg.sender]
REF_34(uint256) -> REF_33[spender]
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_34', 'value'] 
REF_32(uint256) (->allowed) := TMP_84(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 22271.sol-StandardToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_49(bool) = length > 0
RETURN TMP_49"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 22271.sol-StandardToken-name()
digraph{
}
// Function: 22271.sol-StandardToken-symbol()
digraph{
}
// Function: 22271.sol-StandardToken-totalSupply()
digraph{
}
// Function: 22271.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_46(bool) = INTERNAL_CALL, StandardToken.isContract(address)(_to)
CONDITION TMP_46"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(_to,_value,empty)

IRs:
TMP_47(bool) = INTERNAL_CALL, StandardToken.transferToContract(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_47"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(_to,_value)

IRs:
TMP_48(bool) = INTERNAL_CALL, StandardToken.transferToAddress(address,uint256)(_to,_value)
RETURN TMP_48"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 22271.sol-StandardToken-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_43(bool) = INTERNAL_CALL, StandardToken.isContract(address)(_to)
CONDITION TMP_43"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_44(bool) = INTERNAL_CALL, StandardToken.transferToContract(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_44"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToAddress(_to,_value)

IRs:
TMP_45(bool) = INTERNAL_CALL, StandardToken.transferToAddress(address,uint256)(_to,_value)
RETURN TMP_45"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 22271.sol-StandardToken-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_28(bool) = INTERNAL_CALL, StandardToken.isContract(address)(_to)
CONDITION TMP_28"];
1->2[label="True"];
1->10[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_29(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(msg.sender)
TMP_30(bool) = TMP_29 < _value
CONDITION TMP_30"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_31(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = balanceOf(msg.sender).sub(_value)

IRs:
REF_8(uint256) -> balances[msg.sender]
TMP_32(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(msg.sender)
TMP_33(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_32', '_value'] 
REF_8(uint256) (->balances) := TMP_33(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = balanceOf(_to).add(_value)

IRs:
REF_10(uint256) -> balances[_to]
TMP_34(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_to)
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_34', '_value'] 
REF_10(uint256) (->balances) := TMP_35(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(_to.call.value(0)(bytes4(keccak256()(_custom_fallback)),msg.sender,_value,_data))

IRs:
TMP_37(bytes32) = SOLIDITY_CALL keccak256()(_custom_fallback)
TMP_38 = CONVERT TMP_37 to bytes4
TMP_39(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['TMP_38', 'msg.sender', '_value', '_data'] value:0 
TMP_40(None) = SOLIDITY_CALL assert(bool)(TMP_39)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
transferToAddress(_to,_value)

IRs:
TMP_42(bool) = INTERNAL_CALL, StandardToken.transferToAddress(address,uint256)(_to,_value)
RETURN TMP_42"];
12[label="Node Type: RETURN 12

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 22271.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(_from) < _value && allowance(_from,msg.sender) < _value

IRs:
TMP_68(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_from)
TMP_69(bool) = TMP_68 < _value
TMP_70(uint256) = INTERNAL_CALL, StandardToken.allowance(address,address)(_from,msg.sender)
TMP_71(bool) = TMP_70 < _value
TMP_72(bool) = TMP_69 && TMP_71
CONDITION TMP_72"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_73(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balanceOf(_to).add(_value)

IRs:
REF_23(uint256) -> balances[_to]
TMP_74(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_to)
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_74', '_value'] 
REF_23(uint256) (->balances) := TMP_75(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_from] = balanceOf(_from).sub(_value)

IRs:
REF_25(uint256) -> balances[_from]
TMP_76(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_from)
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_76', '_value'] 
REF_25(uint256) (->balances) := TMP_77(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allowed[_from][msg.sender] = allowance(_from,msg.sender).sub(_value)

IRs:
REF_27(mapping(address => uint256)) -> allowed[_from]
REF_28(uint256) -> REF_27[msg.sender]
TMP_78(uint256) = INTERNAL_CALL, StandardToken.allowance(address,address)(_from,msg.sender)
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_78', '_value'] 
REF_28(uint256) (->allowed) := TMP_79(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
isContract(_to)

IRs:
TMP_80(bool) = INTERNAL_CALL, StandardToken.isContract(address)(_to)
CONDITION TMP_80"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_81 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_81(ContractReceiver)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,empty)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', 'empty']  "];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 22271.sol-StandardToken-transferToAddress(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_50(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(msg.sender)
TMP_51(bool) = TMP_50 < _value
CONDITION TMP_51"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_52(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balanceOf(msg.sender).sub(_value)

IRs:
REF_14(uint256) -> balances[msg.sender]
TMP_53(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(msg.sender)
TMP_54(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_53', '_value'] 
REF_14(uint256) (->balances) := TMP_54(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balanceOf(_to).add(_value)

IRs:
REF_16(uint256) -> balances[_to]
TMP_55(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_to)
TMP_56(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_55', '_value'] 
REF_16(uint256) (->balances) := TMP_56(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 22271.sol-StandardToken-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_58(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(msg.sender)
TMP_59(bool) = TMP_58 < _value
CONDITION TMP_59"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_60(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balanceOf(msg.sender).sub(_value)

IRs:
REF_18(uint256) -> balances[msg.sender]
TMP_61(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(msg.sender)
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_61', '_value'] 
REF_18(uint256) (->balances) := TMP_62(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balanceOf(_to).add(_value)

IRs:
REF_20(uint256) -> balances[_to]
TMP_63(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_to)
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_63', '_value'] 
REF_20(uint256) (->balances) := TMP_64(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_65 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_65(ContractReceiver)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
}
