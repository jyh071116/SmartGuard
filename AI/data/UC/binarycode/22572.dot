digraph G {
// Function: 22572.sol-DeltaBalances-DeltaBalances()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
}
// Function: 22572.sol-DeltaBalances-allBalances(address,address,address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ex = Exchange(exchange)

IRs:
TMP_46 = CONVERT exchange to Exchange
ex(Exchange) := TMP_46(Exchange)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
balances = new uint256[](tokens.length * 2)

IRs:
REF_25 -> LENGTH tokens
TMP_48(uint256) = REF_25 * 2
TMP_49(uint256[])  = new uint256[](TMP_48)
balances(uint256[]) = ['TMP_49(uint256[])']"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->14;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < tokens.length

IRs:
REF_26 -> LENGTH tokens
TMP_50(bool) = i < REF_26
CONDITION TMP_50"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
j = i * 2

IRs:
TMP_51(uint256) = i * 2
j(uint256) := TMP_51(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[j] = ex.balanceOf(tokens[i],user)

IRs:
REF_27(uint256) -> balances[j]
REF_29(address) -> tokens[i]
TMP_52(uint256) = HIGH_LEVEL_CALL, dest:ex(Exchange), function:balanceOf, arguments:['REF_29', 'user']  
REF_27(uint256) (->balances) := TMP_52(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
tokens[i] != address(0x0)

IRs:
REF_30(address) -> tokens[i]
TMP_53 = CONVERT 0 to address
TMP_54(bool) = REF_30 != TMP_53
CONDITION TMP_54"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[j + 1] = tokenBalance(user,tokens[i])

IRs:
TMP_55(uint256) = j + 1
REF_31(uint256) -> balances[TMP_55]
REF_32(address) -> tokens[i]
TMP_56(uint256) = INTERNAL_CALL, DeltaBalances.tokenBalance(address,address)(user,REF_32)
REF_31(uint256) (->balances) := TMP_56(uint256)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[j + 1] = user.balance

IRs:
TMP_57(uint256) = j + 1
REF_33(uint256) -> balances[TMP_57]
TMP_58(uint256) = SOLIDITY_CALL balance(address)(user)
REF_33(uint256) (->balances) := TMP_58(uint256)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_59(uint256) := i(uint256)
i(uint256) = i + 1"];
13->6;
14[label="Node Type: RETURN 14

EXPRESSION:
balances

IRs:
RETURN balances"];
}
// Function: 22572.sol-DeltaBalances-deltaBalances(address,address,address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ex = Exchange(exchange)

IRs:
TMP_12 = CONVERT exchange to Exchange
ex(Exchange) := TMP_12(Exchange)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
balances = new uint256[](tokens.length)

IRs:
REF_2 -> LENGTH tokens
TMP_14(uint256[])  = new uint256[](REF_2)
balances(uint256[]) = ['TMP_14(uint256[])']"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->9;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < tokens.length

IRs:
REF_3 -> LENGTH tokens
TMP_15(bool) = i < REF_3
CONDITION TMP_15"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[i] = ex.balanceOf(tokens[i],user)

IRs:
REF_4(uint256) -> balances[i]
REF_6(address) -> tokens[i]
TMP_16(uint256) = HIGH_LEVEL_CALL, dest:ex(Exchange), function:balanceOf, arguments:['REF_6', 'user']  
REF_4(uint256) (->balances) := TMP_16(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_17(uint256) := i(uint256)
i(uint256) = i + 1"];
8->6;
9[label="Node Type: RETURN 9

EXPRESSION:
balances

IRs:
RETURN balances"];
}
// Function: 22572.sol-DeltaBalances-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_0(None) = SOLIDITY_CALL revert()()"];
}
// Function: 22572.sol-DeltaBalances-isAdmin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_60(bool) = msg.sender == admin
TMP_61(None) = SOLIDITY_CALL require(bool)(TMP_60)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22572.sol-DeltaBalances-multiDeltaBalances(address[],address,address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balances = new uint256[](tokens.length * exchanges.length)

IRs:
REF_7 -> LENGTH tokens
REF_8 -> LENGTH exchanges
TMP_19(uint256) = REF_7 * REF_8
TMP_20(uint256[])  = new uint256[](TMP_19)
balances(uint256[]) = ['TMP_20(uint256[])']"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->14;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < exchanges.length

IRs:
REF_9 -> LENGTH exchanges
TMP_21(bool) = i < REF_9
CONDITION TMP_21"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
ex = Exchange(exchanges[i])

IRs:
REF_10(address) -> exchanges[i]
TMP_22 = CONVERT REF_10 to Exchange
ex(Exchange) := TMP_22(Exchange)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->13;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
j < tokens.length

IRs:
REF_11 -> LENGTH tokens
TMP_23(bool) = j < REF_11
CONDITION TMP_23"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[(j * exchanges.length) + i] = ex.balanceOf(tokens[j],user)

IRs:
REF_12 -> LENGTH exchanges
TMP_24(uint256) = j * REF_12
TMP_25(uint256) = TMP_24 + i
REF_13(uint256) -> balances[TMP_25]
REF_15(address) -> tokens[j]
TMP_26(uint256) = HIGH_LEVEL_CALL, dest:ex(Exchange), function:balanceOf, arguments:['REF_15', 'user']  
REF_13(uint256) (->balances) := TMP_26(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
j ++

IRs:
TMP_27(uint256) := j(uint256)
j(uint256) = j + 1"];
12->10;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_28(uint256) := i(uint256)
i(uint256) = i + 1"];
13->5;
14[label="Node Type: RETURN 14

EXPRESSION:
balances

IRs:
RETURN balances"];
}
// Function: 22572.sol-DeltaBalances-tokenBalance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
tokenCode > 0 && token.call(bytes4(keccak256()(balanceOf(address))),user)

IRs:
TMP_29(bool) = tokenCode > 0
TMP_30(bytes32) = SOLIDITY_CALL keccak256()(balanceOf(address))
TMP_31 = CONVERT TMP_30 to bytes4
TMP_32(bool) = LOW_LEVEL_CALL, dest:token, function:call, arguments:['TMP_31', 'user']  
TMP_33(bool) = TMP_29 && TMP_32
CONDITION TMP_33"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
Token(token).balanceOf(user)

IRs:
TMP_34 = CONVERT token to Token
TMP_35(uint256) = HIGH_LEVEL_CALL, dest:TMP_34(Token), function:balanceOf, arguments:['user']  
RETURN TMP_35"];
6[label="Node Type: RETURN 6

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 22572.sol-DeltaBalances-walletBalances(address,address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokens.length > 0)

IRs:
REF_18 -> LENGTH tokens
TMP_36(bool) = REF_18 > 0
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
balances = new uint256[](tokens.length)

IRs:
REF_19 -> LENGTH tokens
TMP_39(uint256[])  = new uint256[](REF_19)
balances(uint256[]) = ['TMP_39(uint256[])']"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->12;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < tokens.length

IRs:
REF_20 -> LENGTH tokens
TMP_40(bool) = i < REF_20
CONDITION TMP_40"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
tokens[i] != address(0x0)

IRs:
REF_21(address) -> tokens[i]
TMP_41 = CONVERT 0 to address
TMP_42(bool) = REF_21 != TMP_41
CONDITION TMP_42"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[i] = tokenBalance(user,tokens[i])

IRs:
REF_22(uint256) -> balances[i]
REF_23(address) -> tokens[i]
TMP_43(uint256) = INTERNAL_CALL, DeltaBalances.tokenBalance(address,address)(user,REF_23)
REF_22(uint256) (->balances) := TMP_43(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[i] = user.balance

IRs:
REF_24(uint256) -> balances[i]
TMP_44(uint256) = SOLIDITY_CALL balance(address)(user)
REF_24(uint256) (->balances) := TMP_44(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_45(uint256) := i(uint256)
i(uint256) = i + 1"];
11->6;
12[label="Node Type: RETURN 12

EXPRESSION:
balances

IRs:
RETURN balances"];
}
// Function: 22572.sol-DeltaBalances-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
admin.transfer(address(this).balance)

IRs:
TMP_1 = CONVERT this to address
TMP_2(uint256) = SOLIDITY_CALL balance(address)(TMP_1)
Transfer dest:admin value:TMP_2"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isAdmin()

IRs:
MODIFIER_CALL, DeltaBalances.isAdmin()()"];
2->1;
}
// Function: 22572.sol-DeltaBalances-withdrawToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token != address(0x0) && Token(token).transfer(msg.sender,amount))

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = token != TMP_5
TMP_7 = CONVERT token to Token
TMP_8(bool) = HIGH_LEVEL_CALL, dest:TMP_7(Token), function:transfer, arguments:['msg.sender', 'amount']  
TMP_9(bool) = TMP_6 && TMP_8
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
isAdmin()

IRs:
MODIFIER_CALL, DeltaBalances.isAdmin()()"];
2->1;
}
// Function: 22572.sol-Exchange-balanceOf(address,address)
digraph{
}
// Function: 22572.sol-Token-balanceOf(address)
digraph{
}
// Function: 22572.sol-Token-transfer(address,uint256)
digraph{
}
}
