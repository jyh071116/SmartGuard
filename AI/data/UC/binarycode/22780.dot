digraph G {
// Function: 22780.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tkn.sender = _from

IRs:
REF_0(address) -> tkn.sender
REF_0(address) (->tkn) := _from(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tkn.value = _value

IRs:
REF_1(uint256) -> tkn.value
REF_1(uint256) (->tkn) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tkn.data = _data

IRs:
REF_2(bytes) -> tkn.data
REF_2(bytes) (->tkn) := _data(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24)

IRs:
REF_3(None) -> _data[3]
TMP_12 = CONVERT REF_3 to uint32
REF_4(None) -> _data[2]
TMP_13 = CONVERT REF_4 to uint32
TMP_14(uint32) = TMP_13 << 8
TMP_15(uint32) = TMP_12 + TMP_14
REF_5(None) -> _data[1]
TMP_16 = CONVERT REF_5 to uint32
TMP_17(uint32) = TMP_16 << 16
TMP_18(uint32) = TMP_15 + TMP_17
REF_6(None) -> _data[0]
TMP_19 = CONVERT REF_6 to uint32
TMP_20(uint32) = TMP_19 << 24
TMP_21(uint32) = TMP_18 + TMP_20
u(uint32) := TMP_21(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tkn.sig = bytes4(u)

IRs:
REF_7(bytes4) -> tkn.sig
TMP_22 = CONVERT u to bytes4
REF_7(bytes4) (->tkn) := TMP_22(bytes4)"];
}
// Function: 22780.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 22780.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 22780.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 22780.sol-ERC20-decimals()
digraph{
}
// Function: 22780.sol-ERC20-name()
digraph{
}
// Function: 22780.sol-ERC20-symbol()
digraph{
}
// Function: 22780.sol-ERC20-totalSupply()
digraph{
}
// Function: 22780.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 22780.sol-ERC20-transfer(address,uint256,bytes)
digraph{
}
// Function: 22780.sol-ERC20-transfer(address,uint256,bytes,string)
digraph{
}
// Function: 22780.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 22780.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x > MAX_UINT256 - y

IRs:
TMP_0(uint256) = MAX_UINT256 - y
TMP_1(bool) = x > TMP_0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_2(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x + y

IRs:
TMP_3(uint256) = x + y
RETURN TMP_3"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22780.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
y == 0

IRs:
TMP_7(bool) = y == 0
CONDITION TMP_7"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
x > MAX_UINT256 / y

IRs:
TMP_8(uint256) = MAX_UINT256 / y
TMP_9(bool) = x > TMP_8
CONDITION TMP_9"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_10(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
x * y

IRs:
TMP_11(uint256) = x * y
RETURN TMP_11"];
8[label="Node Type: RETURN 8

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22780.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x < y

IRs:
TMP_4(bool) = x < y
CONDITION TMP_4"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_5(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x - y

IRs:
TMP_6(uint256) = x - y
RETURN TMP_6"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22780.sol-SafeMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

IRs:
MAX_UINT256(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)"];
}
// Function: 22780.sol-TERATO-TERATO()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenCreated == false)

IRs:
TMP_35(bool) = tokenCreated == False
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenCreated = true

IRs:
tokenCreated(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[owner] = totalSupply

IRs:
REF_8(uint256) -> balances[owner]
REF_8(uint256) (->balances) := totalSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(balances[owner] > 0)

IRs:
REF_9(uint256) -> balances[owner]
TMP_37(bool) = REF_9 > 0
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
}
// Function: 22780.sol-TERATO-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_36(mapping(address => uint256)) -> allowed[_owner]
REF_37(uint256) -> REF_36[_spender]
RETURN REF_37"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 22780.sol-TERATO-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_34(mapping(address => uint256)) -> allowed[msg.sender]
REF_35(uint256) -> REF_34[_spender]
REF_35(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 22780.sol-TERATO-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_19(uint256) -> balances[_owner]
RETURN REF_19"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 22780.sol-TERATO-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
decimals

IRs:
RETURN decimals"];
2[label="Node Type: RETURN 2

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 22780.sol-TERATO-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_60(bool) = length > 0
RETURN TMP_60"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 22780.sol-TERATO-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name

IRs:
RETURN name"];
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 22780.sol-TERATO-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_100(bool) = msg.sender == owner
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22780.sol-TERATO-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x > MAX_UINT256 - y

IRs:
TMP_23(uint256) = MAX_UINT256 - y
TMP_24(bool) = x > TMP_23
CONDITION TMP_24"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_25(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x + y

IRs:
TMP_26(uint256) = x + y
RETURN TMP_26"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22780.sol-TERATO-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
y == 0

IRs:
TMP_30(bool) = y == 0
CONDITION TMP_30"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
x > MAX_UINT256 / y

IRs:
TMP_31(uint256) = MAX_UINT256 / y
TMP_32(bool) = x > TMP_31
CONDITION TMP_32"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_33(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
x * y

IRs:
TMP_34(uint256) = x * y
RETURN TMP_34"];
8[label="Node Type: RETURN 8

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22780.sol-TERATO-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x < y

IRs:
TMP_27(bool) = x < y
CONDITION TMP_27"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_28(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x - y

IRs:
TMP_29(uint256) = x - y
RETURN TMP_29"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 22780.sol-TERATO-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

IRs:
MAX_UINT256(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)"];
}
// Function: 22780.sol-TERATO-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 68000000 * 10 ** 8

IRs:
TMP_98(uint256) = 10 ** 8
TMP_99(uint256) = 68000000 * TMP_98
totalSupply(uint256) := TMP_99(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = TERATO

IRs:
name(string) := TERATO(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = TERA

IRs:
symbol(string) := TERA(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
tokenCreated = false

IRs:
tokenCreated(bool) := False(bool)"];
}
// Function: 22780.sol-TERATO-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol

IRs:
RETURN symbol"];
2[label="Node Type: RETURN 2

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 22780.sol-TERATO-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 22780.sol-TERATO-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_57(bool) = INTERNAL_CALL, TERATO.isContract(address)(_to)
CONDITION TMP_57"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(_to,_value,empty)

IRs:
TMP_58(bool) = INTERNAL_CALL, TERATO.transferToContract(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_58"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(_to,_value,empty)

IRs:
TMP_59(bool) = INTERNAL_CALL, TERATO.transferToAddress(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_59"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 22780.sol-TERATO-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_54(bool) = INTERNAL_CALL, TERATO.isContract(address)(_to)
CONDITION TMP_54"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_55(bool) = INTERNAL_CALL, TERATO.transferToContract(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_55"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_56(bool) = INTERNAL_CALL, TERATO.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_56"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 22780.sol-TERATO-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_39(bool) = INTERNAL_CALL, TERATO.isContract(address)(_to)
CONDITION TMP_39"];
1->2[label="True"];
1->11[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_40(uint256) = INTERNAL_CALL, TERATO.balanceOf(address)(msg.sender)
TMP_41(bool) = TMP_40 < _value
CONDITION TMP_41"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_42(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = safeSub(balanceOf(msg.sender),_value)

IRs:
REF_10(uint256) -> balances[msg.sender]
TMP_43(uint256) = INTERNAL_CALL, TERATO.balanceOf(address)(msg.sender)
TMP_44(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_43,_value)
REF_10(uint256) (->balances) := TMP_44(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = safeAdd(balanceOf(_to),_value)

IRs:
REF_11(uint256) -> balances[_to]
TMP_45(uint256) = INTERNAL_CALL, TERATO.balanceOf(address)(_to)
TMP_46(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_45,_value)
REF_11(uint256) (->balances) := TMP_46(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_47 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_47(ContractReceiver)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
receiver.call.value(0)(bytes4(sha3()(_custom_fallback)),msg.sender,_value,_data)

IRs:
TMP_49(bytes32) = SOLIDITY_CALL sha3()(_custom_fallback)
TMP_50 = CONVERT TMP_49 to bytes4
TMP_51(bool) = LOW_LEVEL_CALL, dest:receiver, function:call, arguments:['TMP_50', 'msg.sender', '_value', '_data'] value:0 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_53(bool) = INTERNAL_CALL, TERATO.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_53"];
13[label="Node Type: RETURN 13

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 22780.sol-TERATO-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to])

IRs:
REF_20(uint256) -> balances[_from]
TMP_79(bool) = REF_20 >= _value
REF_21(mapping(address => uint256)) -> allowed[_from]
REF_22(uint256) -> REF_21[msg.sender]
TMP_80(bool) = REF_22 >= _value
TMP_81(bool) = TMP_79 && TMP_80
REF_23(uint256) -> balances[_to]
TMP_82(uint256) = REF_23 + _value
REF_24(uint256) -> balances[_to]
TMP_83(bool) = TMP_82 > REF_24
TMP_84(bool) = TMP_81 && TMP_83
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
allowance = allowed[_from][msg.sender]

IRs:
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
allowance(uint256) := REF_26(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances[_from] >= _value && allowance >= _value)

IRs:
REF_27(uint256) -> balances[_from]
TMP_86(bool) = REF_27 >= _value
TMP_87(bool) = allowance >= _value
TMP_88(bool) = TMP_86 && TMP_87
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = safeAdd(balanceOf(_to),_value)

IRs:
REF_28(uint256) -> balances[_to]
TMP_90(uint256) = INTERNAL_CALL, TERATO.balanceOf(address)(_to)
TMP_91(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_90,_value)
REF_28(uint256) (->balances) := TMP_91(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] = safeSub(balanceOf(_from),_value)

IRs:
REF_29(uint256) -> balances[_from]
TMP_92(uint256) = INTERNAL_CALL, TERATO.balanceOf(address)(_from)
TMP_93(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_92,_value)
REF_29(uint256) (->balances) := TMP_93(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
allowance < MAX_UINT256

IRs:
TMP_94(bool) = allowance < MAX_UINT256
CONDITION TMP_94"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value)

IRs:
REF_30(mapping(address => uint256)) -> allowed[_from]
REF_31(uint256) -> REF_30[msg.sender]
REF_32(mapping(address => uint256)) -> allowed[_from]
REF_33(uint256) -> REF_32[msg.sender]
TMP_95(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_33,_value)
REF_31(uint256) (->allowed) := TMP_95(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 22780.sol-TERATO-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_61(uint256) = INTERNAL_CALL, TERATO.balanceOf(address)(msg.sender)
TMP_62(bool) = TMP_61 < _value
CONDITION TMP_62"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_63(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = safeSub(balanceOf(msg.sender),_value)

IRs:
REF_14(uint256) -> balances[msg.sender]
TMP_64(uint256) = INTERNAL_CALL, TERATO.balanceOf(address)(msg.sender)
TMP_65(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_64,_value)
REF_14(uint256) (->balances) := TMP_65(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = safeAdd(balanceOf(_to),_value)

IRs:
REF_15(uint256) -> balances[_to]
TMP_66(uint256) = INTERNAL_CALL, TERATO.balanceOf(address)(_to)
TMP_67(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_66,_value)
REF_15(uint256) (->balances) := TMP_67(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 22780.sol-TERATO-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_69(uint256) = INTERNAL_CALL, TERATO.balanceOf(address)(msg.sender)
TMP_70(bool) = TMP_69 < _value
CONDITION TMP_70"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_71(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = safeSub(balanceOf(msg.sender),_value)

IRs:
REF_16(uint256) -> balances[msg.sender]
TMP_72(uint256) = INTERNAL_CALL, TERATO.balanceOf(address)(msg.sender)
TMP_73(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_72,_value)
REF_16(uint256) (->balances) := TMP_73(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = safeAdd(balanceOf(_to),_value)

IRs:
REF_17(uint256) -> balances[_to]
TMP_74(uint256) = INTERNAL_CALL, TERATO.balanceOf(address)(_to)
TMP_75(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_74,_value)
REF_17(uint256) (->balances) := TMP_75(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_76 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_76(ContractReceiver)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
}
