digraph G {
// Function: 22901.sol-BuildingStatus-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 22901.sol-BuildingStatus-changeStage(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: IF 1

EXPRESSION:
stage == 1

IRs:
TMP_14(bool) = stage == 1
CONDITION TMP_14"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
status = statusEnum.stage1

IRs:
REF_0(BuildingStatus.statusEnum) -> statusEnum.stage1
status(BuildingStatus.statusEnum) := REF_0(BuildingStatus.statusEnum)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
stage == 2

IRs:
TMP_15(bool) = stage == 2
CONDITION TMP_15"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
status = statusEnum.stage2

IRs:
REF_1(BuildingStatus.statusEnum) -> statusEnum.stage2
status(BuildingStatus.statusEnum) := REF_1(BuildingStatus.statusEnum)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
stage == 3

IRs:
TMP_16(bool) = stage == 3
CONDITION TMP_16"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
status = statusEnum.stage3

IRs:
REF_2(BuildingStatus.statusEnum) -> statusEnum.stage3
status(BuildingStatus.statusEnum) := REF_2(BuildingStatus.statusEnum)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
stage == 4

IRs:
TMP_17(bool) = stage == 4
CONDITION TMP_17"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
status = statusEnum.stage4

IRs:
REF_3(BuildingStatus.statusEnum) -> statusEnum.stage4
status(BuildingStatus.statusEnum) := REF_3(BuildingStatus.statusEnum)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
stage == 5

IRs:
TMP_18(bool) = stage == 5
CONDITION TMP_18"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
status = statusEnum.stage5

IRs:
REF_4(BuildingStatus.statusEnum) -> statusEnum.stage5
status(BuildingStatus.statusEnum) := REF_4(BuildingStatus.statusEnum)"];
14->15;
15[label="Node Type: END_IF 15
"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyObserver()

IRs:
MODIFIER_CALL, BuildingStatus.onlyObserver()()"];
16->1;
}
// Function: 22901.sol-BuildingStatus-notCompleted()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(status != statusEnum.completed)

IRs:
REF_5(BuildingStatus.statusEnum) -> statusEnum.completed
TMP_22(bool) = status != REF_5
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22901.sol-BuildingStatus-onlyCrowdsale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == crowdsale || msg.sender == owner || msg.sender == address(this))

IRs:
TMP_31(bool) = msg.sender == crowdsale
TMP_32(bool) = msg.sender == owner
TMP_33(bool) = TMP_31 || TMP_32
TMP_34 = CONVERT this to address
TMP_35(bool) = msg.sender == TMP_34
TMP_36(bool) = TMP_33 || TMP_35
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22901.sol-BuildingStatus-onlyObserver()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == observer || msg.sender == owner || msg.sender == address(this))

IRs:
TMP_24(bool) = msg.sender == observer
TMP_25(bool) = msg.sender == owner
TMP_26(bool) = TMP_24 || TMP_25
TMP_27 = CONVERT this to address
TMP_28(bool) = msg.sender == TMP_27
TMP_29(bool) = TMP_26 || TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22901.sol-BuildingStatus-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_20(bool) = msg.sender == owner
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22901.sol-BuildingStatus-setStatus(BuildingStatus.statusEnum)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
status = newStatus

IRs:
status(BuildingStatus.statusEnum) := newStatus(BuildingStatus.statusEnum)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
StatusChanged(newStatus)

IRs:
Emit StatusChanged(newStatus)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCrowdsale()

IRs:
MODIFIER_CALL, BuildingStatus.onlyCrowdsale()()"];
3->1;
}
// Function: 22901.sol-BuildingStatus-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_7 = CONVERT 0 to address
TMP_8(bool) = newOwner != TMP_7
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 22901.sol-ERC223Interface-allowedAddressesOf(address)
digraph{
}
// Function: 22901.sol-ERC223Interface-balanceOf(address)
digraph{
}
// Function: 22901.sol-ERC223Interface-getTotalSupply()
digraph{
}
// Function: 22901.sol-ERC223Interface-transfer(address,uint256)
digraph{
}
// Function: 22901.sol-ERC223Interface-transfer(address,uint256,bytes)
digraph{
}
// Function: 22901.sol-ERC223Interface-transfer(address,uint256,bytes,string)
digraph{
}
// Function: 22901.sol-Object-Object(string,uint32,uint32,uint32,Object.unitEnum,string,string,string,uint256,uint256,uint256,address,address,address,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = iName

IRs:
name(string) := iName(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gba = iGBA

IRs:
gba(uint32) := iGBA(uint32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
gla = iGSA

IRs:
gla(uint32) := iGSA(uint32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
parking = iParking

IRs:
parking(uint32) := iParking(uint32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
unit = iUnit

IRs:
unit(Object.unitEnum) := iUnit(Object.unitEnum)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
developer = iDeveloper

IRs:
developer(string) := iDeveloper(string)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
leed = iLeed

IRs:
leed(string) := iLeed(string)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
location = iLocation

IRs:
location(string) := iLocation(string)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
untsqm = UNTSQM

IRs:
untsqm(uint256) := UNTSQM(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
constructionStart = iStartDate

IRs:
constructionStart(uint256) := iStartDate(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
constructionEnd = iEndDate

IRs:
constructionEnd(uint256) := iEndDate(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
token = ERC223Interface(iToken)

IRs:
TMP_60 = CONVERT iToken to ERC223Interface
token(ERC223Interface) := TMP_60(ERC223Interface)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
crowdsale = iCrowdsale

IRs:
crowdsale(address) := iCrowdsale(address)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
observer = iObserver

IRs:
observer(address) := iObserver(address)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
hold = iHold

IRs:
hold(address) := iHold(address)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
permissionManager = PermissionManager(pManager)

IRs:
TMP_61 = CONVERT pManager to PermissionManager
permissionManager(PermissionManager) := TMP_61(PermissionManager)"];
}
// Function: 22901.sol-Object-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 22901.sol-Object-changeStage(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: IF 1

EXPRESSION:
stage == 1

IRs:
TMP_49(bool) = stage == 1
CONDITION TMP_49"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
status = statusEnum.stage1

IRs:
REF_9(BuildingStatus.statusEnum) -> statusEnum.stage1
status(BuildingStatus.statusEnum) := REF_9(BuildingStatus.statusEnum)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
stage == 2

IRs:
TMP_50(bool) = stage == 2
CONDITION TMP_50"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
status = statusEnum.stage2

IRs:
REF_10(BuildingStatus.statusEnum) -> statusEnum.stage2
status(BuildingStatus.statusEnum) := REF_10(BuildingStatus.statusEnum)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
stage == 3

IRs:
TMP_51(bool) = stage == 3
CONDITION TMP_51"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
status = statusEnum.stage3

IRs:
REF_11(BuildingStatus.statusEnum) -> statusEnum.stage3
status(BuildingStatus.statusEnum) := REF_11(BuildingStatus.statusEnum)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
stage == 4

IRs:
TMP_52(bool) = stage == 4
CONDITION TMP_52"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
status = statusEnum.stage4

IRs:
REF_12(BuildingStatus.statusEnum) -> statusEnum.stage4
status(BuildingStatus.statusEnum) := REF_12(BuildingStatus.statusEnum)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
stage == 5

IRs:
TMP_53(bool) = stage == 5
CONDITION TMP_53"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
status = statusEnum.stage5

IRs:
REF_13(BuildingStatus.statusEnum) -> statusEnum.stage5
status(BuildingStatus.statusEnum) := REF_13(BuildingStatus.statusEnum)"];
14->15;
15[label="Node Type: END_IF 15
"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyObserver()

IRs:
MODIFIER_CALL, BuildingStatus.onlyObserver()()"];
16->1;
}
// Function: 22901.sol-Object-completeStatus(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
status = statusEnum.completed

IRs:
REF_33(BuildingStatus.statusEnum) -> statusEnum.completed
status(BuildingStatus.statusEnum) := REF_33(BuildingStatus.statusEnum)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
report = newReport

IRs:
report(string) := newReport(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Completed(report)

IRs:
Emit Completed(report)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
notCompleted()

IRs:
MODIFIER_CALL, BuildingStatus.notCompleted()()"];
5->1;
}
// Function: 22901.sol-Object-getTotalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
token.getTotalSupply()

IRs:
TMP_116(uint256) = HIGH_LEVEL_CALL, dest:token(ERC223Interface), function:getTotalSupply, arguments:[]  
RETURN TMP_116"];
}
// Function: 22901.sol-Object-getUNTSQM()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
untsqm

IRs:
RETURN untsqm"];
}
// Function: 22901.sol-Object-notCompleted()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(status != statusEnum.completed)

IRs:
REF_34(BuildingStatus.statusEnum) -> statusEnum.completed
TMP_155(bool) = status != REF_34
TMP_156(None) = SOLIDITY_CALL require(bool)(TMP_155)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22901.sol-Object-onlyCrowdsale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == crowdsale || msg.sender == owner || msg.sender == address(this))

IRs:
TMP_164(bool) = msg.sender == crowdsale
TMP_165(bool) = msg.sender == owner
TMP_166(bool) = TMP_164 || TMP_165
TMP_167 = CONVERT this to address
TMP_168(bool) = msg.sender == TMP_167
TMP_169(bool) = TMP_166 || TMP_168
TMP_170(None) = SOLIDITY_CALL require(bool)(TMP_169)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22901.sol-Object-onlyObserver()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == observer || msg.sender == owner || msg.sender == address(this))

IRs:
TMP_157(bool) = msg.sender == observer
TMP_158(bool) = msg.sender == owner
TMP_159(bool) = TMP_157 || TMP_158
TMP_160 = CONVERT this to address
TMP_161(bool) = msg.sender == TMP_160
TMP_162(bool) = TMP_159 || TMP_161
TMP_163(None) = SOLIDITY_CALL require(bool)(TMP_162)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22901.sol-Object-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_171(bool) = msg.sender == owner
TMP_172(None) = SOLIDITY_CALL require(bool)(TMP_171)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22901.sol-Object-onlyPermitted()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(permissionManager.isPermitted(msg.sender) || msg.sender == owner || msg.sender == address(this))

IRs:
TMP_173(bool) = HIGH_LEVEL_CALL, dest:permissionManager(PermissionManager), function:isPermitted, arguments:['msg.sender']  
TMP_174(bool) = msg.sender == owner
TMP_175(bool) = TMP_173 || TMP_174
TMP_176 = CONVERT this to address
TMP_177(bool) = msg.sender == TMP_176
TMP_178(bool) = TMP_175 || TMP_177
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22901.sol-Object-setCrowdsale(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_crowdsale != 0x0)

IRs:
TMP_112(bool) = _crowdsale != 0
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
crowdsale = _crowdsale

IRs:
crowdsale(address) := _crowdsale(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
CrowdsaleChanged(_crowdsale)

IRs:
Emit CrowdsaleChanged(_crowdsale)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 22901.sol-Object-setDeveloper(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
developer = newDeveloper

IRs:
developer(string) := newDeveloper(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)

IRs:
Emit PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPermitted()

IRs:
MODIFIER_CALL, Object.onlyPermitted()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notCompleted()

IRs:
MODIFIER_CALL, BuildingStatus.notCompleted()()"];
4->1;
}
// Function: 22901.sol-Object-setEndDate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
constructionEnd = newEndDate

IRs:
constructionEnd(uint256) := newEndDate(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)

IRs:
Emit PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPermitted()

IRs:
MODIFIER_CALL, Object.onlyPermitted()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notCompleted()

IRs:
MODIFIER_CALL, BuildingStatus.notCompleted()()"];
4->1;
}
// Function: 22901.sol-Object-setGBA(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gba = newGBA

IRs:
gba(uint32) := newGBA(uint32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)

IRs:
Emit PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPermitted()

IRs:
MODIFIER_CALL, Object.onlyPermitted()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notCompleted()

IRs:
MODIFIER_CALL, BuildingStatus.notCompleted()()"];
4->1;
}
// Function: 22901.sol-Object-setGLA(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gla = newGLA

IRs:
gla(uint32) := newGLA(uint32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)

IRs:
Emit PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPermitted()

IRs:
MODIFIER_CALL, Object.onlyPermitted()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notCompleted()

IRs:
MODIFIER_CALL, BuildingStatus.notCompleted()()"];
4->1;
}
// Function: 22901.sol-Object-setHold(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_hold != 0x0)

IRs:
TMP_108(bool) = _hold != 0
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
hold = _hold

IRs:
hold(address) := _hold(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
HoldChanged(_hold)

IRs:
Emit HoldChanged(_hold)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 22901.sol-Object-setLeed(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
leed = newLeed

IRs:
leed(string) := newLeed(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)

IRs:
Emit PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPermitted()

IRs:
MODIFIER_CALL, Object.onlyPermitted()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notCompleted()

IRs:
MODIFIER_CALL, BuildingStatus.notCompleted()()"];
4->1;
}
// Function: 22901.sol-Object-setLocation(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
location = newLocation

IRs:
location(string) := newLocation(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)

IRs:
Emit PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPermitted()

IRs:
MODIFIER_CALL, Object.onlyPermitted()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notCompleted()

IRs:
MODIFIER_CALL, BuildingStatus.notCompleted()()"];
4->1;
}
// Function: 22901.sol-Object-setName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)

IRs:
Emit PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPermitted()

IRs:
MODIFIER_CALL, Object.onlyPermitted()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notCompleted()

IRs:
MODIFIER_CALL, BuildingStatus.notCompleted()()"];
4->1;
}
// Function: 22901.sol-Object-setObserver(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_observer != 0x0)

IRs:
TMP_99(bool) = _observer != 0
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
observer = _observer

IRs:
observer(address) := _observer(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ObserverChanged(_observer)

IRs:
Emit ObserverChanged(_observer)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 22901.sol-Object-setParking(uint32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
parking = newParking

IRs:
parking(uint32) := newParking(uint32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)

IRs:
Emit PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPermitted()

IRs:
MODIFIER_CALL, Object.onlyPermitted()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notCompleted()

IRs:
MODIFIER_CALL, BuildingStatus.notCompleted()()"];
4->1;
}
// Function: 22901.sol-Object-setPermissionManager(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_permadr != 0x0)

IRs:
TMP_62(bool) = _permadr != 0
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
permissionManager = PermissionManager(_permadr)

IRs:
TMP_64 = CONVERT _permadr to PermissionManager
permissionManager(PermissionManager) := TMP_64(PermissionManager)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 22901.sol-Object-setProperty(string,string,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->36;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
set = set

IRs:
set(string) := set(string)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
s = (

IRs:
s(string) := ((string)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
s2 = )

IRs:
s2(string) := )(string)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_ba = bytes(set)

IRs:
TMP_117 = CONVERT set to bytes
_ba(bytes) := TMP_117(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_bb = bytes(property)

IRs:
TMP_118 = CONVERT property to bytes
_bb(bytes) := TMP_118(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_t = bytes(typeArg)

IRs:
TMP_119 = CONVERT typeArg to bytes
_t(bytes) := TMP_119(bytes)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_s = bytes(s)

IRs:
TMP_120 = CONVERT s to bytes
_s(bytes) := TMP_120(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_s2 = bytes(s2)

IRs:
TMP_121 = CONVERT s2 to bytes
_s2(bytes) := TMP_121(bytes)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
ab = new string(_ba.length + _bb.length + 1 + _t.length + 1)

IRs:
REF_15 -> LENGTH _ba
REF_16 -> LENGTH _bb
TMP_123(uint256) = REF_15 + REF_16
TMP_124(uint256) = TMP_123 + 1
REF_17 -> LENGTH _t
TMP_125(uint256) = TMP_124 + REF_17
TMP_126(uint256) = TMP_125 + 1
TMP_127 = new string(TMP_126)
ab(string) := TMP_127(string)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
babcde = bytes(ab)

IRs:
TMP_128 = CONVERT ab to bytes
babcde(bytes) := TMP_128(bytes)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
11->14;
12[label="Node Type: BEGIN_LOOP 12
"];
12->15;
13[label="Node Type: END_LOOP 13
"];
13->20;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
14->12;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
i < _ba.length

IRs:
REF_18 -> LENGTH _ba
TMP_129(bool) = i < REF_18
CONDITION TMP_129"];
15->16[label="True"];
15->13[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_130(uint256) := k(uint256)
k(uint256) = k + 1
REF_19(None) -> babcde[TMP_130]
REF_20(None) -> _ba[i]
REF_19(None) (->babcde) := REF_20(None)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_131(uint256) := i(uint256)
i(uint256) = i + 1"];
17->15;
18[label="Node Type: BEGIN_LOOP 18
"];
18->21;
19[label="Node Type: END_LOOP 19
"];
19->24;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
20->18;
21[label="Node Type: IF_LOOP 21

EXPRESSION:
i < _bb.length

IRs:
REF_21 -> LENGTH _bb
TMP_132(bool) = i < REF_21
CONDITION TMP_132"];
21->22[label="True"];
21->19[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_133(uint256) := k(uint256)
k(uint256) = k + 1
REF_22(None) -> babcde[TMP_133]
REF_23(None) -> _bb[i]
REF_22(None) (->babcde) := REF_23(None)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i ++

IRs:
TMP_134(uint256) := i(uint256)
i(uint256) = i + 1"];
23->21;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
babcde[k ++] = _s[0]

IRs:
TMP_135(uint256) := k(uint256)
k(uint256) = k + 1
REF_24(None) -> babcde[TMP_135]
REF_25(None) -> _s[0]
REF_24(None) (->babcde) := REF_25(None)"];
24->27;
25[label="Node Type: BEGIN_LOOP 25
"];
25->28;
26[label="Node Type: END_LOOP 26
"];
26->31;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
27->25;
28[label="Node Type: IF_LOOP 28

EXPRESSION:
i < _t.length

IRs:
REF_26 -> LENGTH _t
TMP_136(bool) = i < REF_26
CONDITION TMP_136"];
28->29[label="True"];
28->26[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
babcde[k ++] = _t[i]

IRs:
TMP_137(uint256) := k(uint256)
k(uint256) = k + 1
REF_27(None) -> babcde[TMP_137]
REF_28(None) -> _t[i]
REF_27(None) (->babcde) := REF_28(None)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
i ++

IRs:
TMP_138(uint256) := i(uint256)
i(uint256) = i + 1"];
30->28;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _s2[0]

IRs:
TMP_139(uint256) := k(uint256)
k(uint256) = k + 1
REF_29(None) -> babcde[TMP_139]
REF_30(None) -> _s2[0]
REF_29(None) (->babcde) := REF_30(None)"];
31->32;
32[label="Node Type: IF 32

EXPRESSION:
intVal == 0

IRs:
TMP_140(bool) = intVal == 0
CONDITION TMP_140"];
32->33[label="True"];
32->34[label="False"];
33[label="Node Type: EXPRESSION 33

EXPRESSION:
assert(bool)(this.call(bytes4(keccak256()(string(babcde))),strVal))

IRs:
TMP_141 = CONVERT babcde to string
TMP_142(bytes32) = SOLIDITY_CALL keccak256()(TMP_141)
TMP_143 = CONVERT TMP_142 to bytes4
TMP_144(bool) = LOW_LEVEL_CALL, dest:this, function:call, arguments:['TMP_143', 'strVal']  
TMP_145(None) = SOLIDITY_CALL assert(bool)(TMP_144)"];
33->35;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
assert(bool)(this.call(bytes4(keccak256()(string(babcde))),intVal))

IRs:
TMP_146 = CONVERT babcde to string
TMP_147(bytes32) = SOLIDITY_CALL keccak256()(TMP_146)
TMP_148 = CONVERT TMP_147 to bytes4
TMP_149(bool) = LOW_LEVEL_CALL, dest:this, function:call, arguments:['TMP_148', 'intVal']  
TMP_150(None) = SOLIDITY_CALL assert(bool)(TMP_149)"];
34->35;
35[label="Node Type: END_IF 35
"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
onlyObserver()

IRs:
MODIFIER_CALL, BuildingStatus.onlyObserver()()"];
36->1;
}
// Function: 22901.sol-Object-setStartDate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
constructionStart = newStartDate

IRs:
constructionStart(uint256) := newStartDate(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)

IRs:
Emit PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPermitted()

IRs:
MODIFIER_CALL, Object.onlyPermitted()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notCompleted()

IRs:
MODIFIER_CALL, BuildingStatus.notCompleted()()"];
4->1;
}
// Function: 22901.sol-Object-setStatus(BuildingStatus.statusEnum)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
status = newStatus

IRs:
status(BuildingStatus.statusEnum) := newStatus(BuildingStatus.statusEnum)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
StatusChanged(newStatus)

IRs:
Emit StatusChanged(newStatus)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyCrowdsale()

IRs:
MODIFIER_CALL, BuildingStatus.onlyCrowdsale()()"];
3->1;
}
// Function: 22901.sol-Object-setToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token != 0x0)

IRs:
TMP_103(bool) = _token != 0
TMP_104(None) = SOLIDITY_CALL require(bool)(TMP_103)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token = ERC223Interface(_token)

IRs:
TMP_105 = CONVERT _token to ERC223Interface
token(ERC223Interface) := TMP_105(ERC223Interface)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
TokenChanged(_token)

IRs:
Emit TokenChanged(_token)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 22901.sol-Object-setUnit(Object.unitEnum)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
unit = newUnit

IRs:
unit(Object.unitEnum) := newUnit(Object.unitEnum)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)

IRs:
Emit PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPermitted()

IRs:
MODIFIER_CALL, Object.onlyPermitted()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notCompleted()

IRs:
MODIFIER_CALL, BuildingStatus.notCompleted()()"];
4->1;
}
// Function: 22901.sol-Object-setUntsqm(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
untsqm = _untsqm

IRs:
untsqm(uint256) := _untsqm(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)

IRs:
Emit PropertyChanged(gba,gla,parking,unit,developer,leed,location,constructionStart,constructionEnd)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyPermitted()

IRs:
MODIFIER_CALL, Object.onlyPermitted()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notCompleted()

IRs:
MODIFIER_CALL, BuildingStatus.notCompleted()()"];
4->1;
}
// Function: 22901.sol-Object-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_55 = CONVERT 0 to address
TMP_56(bool) = newOwner != TMP_55
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 22901.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 22901.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22901.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 22901.sol-PermissionManager-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 22901.sol-PermissionManager-addAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
permittedAddresses[newAddress] = true

IRs:
REF_6(bool) -> permittedAddresses[newAddress]
REF_6(bool) (->permittedAddresses) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 22901.sol-PermissionManager-isPermitted(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
permittedAddresses[pAddress]

IRs:
REF_8(bool) -> permittedAddresses[pAddress]
CONDITION REF_8"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 22901.sol-PermissionManager-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_45(bool) = msg.sender == owner
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 22901.sol-PermissionManager-removeAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
permittedAddresses[remAddress] = false

IRs:
REF_7(bool) -> permittedAddresses[remAddress]
REF_7(bool) (->permittedAddresses) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 22901.sol-PermissionManager-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_38 = CONVERT 0 to address
TMP_39(bool) = newOwner != TMP_38
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
}
