digraph G {
// Function: 23081.sol-EIP20Token-allowance(address,address)
digraph{
}
// Function: 23081.sol-EIP20Token-approve(address,uint256)
digraph{
}
// Function: 23081.sol-EIP20Token-balanceOf(address)
digraph{
}
// Function: 23081.sol-EIP20Token-totalSupply()
digraph{
}
// Function: 23081.sol-EIP20Token-transfer(address,uint256)
digraph{
}
// Function: 23081.sol-EIP20Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 23081.sol-HumanProtocolInvestment-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 23081.sol-HumanProtocolInvestment-approve_unwanted_tokens(EIP20Token,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token.approve(dest,value)

IRs:
TMP_40(bool) = HIGH_LEVEL_CALL, dest:token(EIP20Token), function:approve, arguments:['dest', 'value']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 23081.sol-HumanProtocolInvestment-emergency_withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender.call.gas(gas).value(this.balance)())

IRs:
REF_16(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_44(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:REF_16 gas:gas
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 23081.sol-HumanProtocolInvestment-execute_transfer(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
major_fee = transfer_amount * 3 / (10 * 11)

IRs:
TMP_11(uint256) = transfer_amount * 3
TMP_12(uint256) = 10 * 11
TMP_13(uint256) = TMP_11 / TMP_12
major_fee(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
minor_fee = transfer_amount * 2 / (10 * 11)

IRs:
TMP_14(uint256) = transfer_amount * 2
TMP_15(uint256) = 10 * 11
TMP_16(uint256) = TMP_14 / TMP_15
minor_fee(uint256) := TMP_16(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
third_fee = transfer_amount * 5 / (10 * 11)

IRs:
TMP_17(uint256) = transfer_amount * 5
TMP_18(uint256) = 10 * 11
TMP_19(uint256) = TMP_17 / TMP_18
third_fee(uint256) := TMP_19(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(major_partner_address.call.gas(gas).value(major_fee)())

IRs:
TMP_22(bool) = LOW_LEVEL_CALL, dest:major_partner_address, function:call, arguments:[] value:major_fee gas:gas
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(minor_partner_address.call.gas(gas).value(minor_fee)())

IRs:
TMP_26(bool) = LOW_LEVEL_CALL, dest:minor_partner_address, function:call, arguments:[] value:minor_fee gas:gas
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(third_partner_address.call.gas(gas).value(third_fee)())

IRs:
TMP_30(bool) = LOW_LEVEL_CALL, dest:third_partner_address, function:call, arguments:[] value:third_fee gas:gas
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
investment_amount = transfer_amount - major_fee - minor_fee - third_fee

IRs:
TMP_32(uint256) = transfer_amount - major_fee
TMP_33(uint256) = TMP_32 - minor_fee
TMP_34(uint256) = TMP_33 - third_fee
investment_amount(uint256) := TMP_34(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(investment_address.call.gas(gas).value(investment_amount)())

IRs:
TMP_37(bool) = LOW_LEVEL_CALL, dest:investment_address, function:call, arguments:[] value:investment_amount gas:gas
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
}
// Function: 23081.sol-HumanProtocolInvestment-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
execute_transfer(msg.value)

IRs:
INTERNAL_CALL, HumanProtocolInvestment.execute_transfer(uint256)(msg.value)"];
}
// Function: 23081.sol-HumanProtocolInvestment-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_47(bool) = msg.sender == owner
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 23081.sol-HumanProtocolInvestment-set_transfer_gas(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gas = transfer_gas

IRs:
gas(uint256) := transfer_gas(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 23081.sol-HumanProtocolInvestment-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
investment_address = 0x55704E8Cb15AF1054e21a7a59Fb0CBDa6Bd044B7

IRs:
investment_address(address) := 487768741615841386034526605218941185151558763703(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
major_partner_address = 0x5a89D9f1C382CaAa66Ee045aeb8510F1205bC8bf

IRs:
major_partner_address(address) := 516883357100320440788116258248447251057206872255(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
minor_partner_address = 0xC787C3f6F75D7195361b64318CE019f90507f806

IRs:
minor_partner_address(address) := 1139116834929769157546205748818172084365935769606(address)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
third_partner_address = 0xDa2cEa3DbaC30835D162Df11D21Ac6Cbf355aC9F

IRs:
third_partner_address(address) := 1245561626108713849402594499638779090728167779487(address)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
gas = 1000

IRs:
gas(uint256) := 1000(uint256)"];
}
// Function: 23081.sol-HumanProtocolInvestment-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_6 = CONVERT 0 to address
TMP_7(bool) = newOwner != TMP_6
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 23081.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 23081.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_4(bool) = msg.sender == owner
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 23081.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
}
