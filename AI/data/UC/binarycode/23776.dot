digraph G {
// Function: 23776.sol-IToken-executeSettingsChange(uint256,uint256,uint256,uint256,uint256,uint256,uint256)
digraph{
}
// Function: 23776.sol-MultiSigWallet-MultiSigWallet(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->8;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _owners.length

IRs:
REF_0 -> LENGTH _owners
TMP_2(bool) = i < REF_0
CONDITION TMP_2"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(! isOwner[_owners[i]] && _owners[i] != 0)

IRs:
REF_1(address) -> _owners[i]
REF_2(bool) -> isOwner[REF_1]
TMP_3 = UnaryType.BANG REF_2 
REF_3(address) -> _owners[i]
TMP_4(bool) = REF_3 != 0
TMP_5(bool) = TMP_3 && TMP_4
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isOwner[_owners[i]] = true

IRs:
REF_4(address) -> _owners[i]
REF_5(bool) -> isOwner[REF_4]
REF_5(bool) (->isOwner) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_7(uint256) := i(uint256)
i(uint256) = i + 1"];
7->4;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
owners = _owners

IRs:
owners(address[]) := _owners(address[])"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
required = _required

IRs:
required(uint256) := _required(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
validRequirement(_owners.length,_required)

IRs:
REF_6 -> LENGTH _owners
MODIFIER_CALL, MultiSigWallet.validRequirement(uint256,uint256)(REF_6,_required)"];
11->3;
}
// Function: 23776.sol-MultiSigWallet-addOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isOwner[_owner] = true

IRs:
REF_41(bool) -> isOwner[_owner]
REF_41(bool) (->isOwner) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owners.push(_owner)

IRs:
REF_43 -> LENGTH owners
TMP_37(uint256) := REF_43(uint256)
TMP_38(uint256) = TMP_37 + 1
REF_43(uint256) (->owners) := TMP_38(uint256)
REF_44(address) -> owners[TMP_37]
REF_44(address) (->owners) := _owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
OwnerAddition(_owner)

IRs:
Emit OwnerAddition(_owner)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownerDoesNotExist(_owner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerDoesNotExist(address)(_owner)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notNull(_owner)

IRs:
MODIFIER_CALL, MultiSigWallet.notNull(address)(_owner)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
validRequirement(owners.length + 1,required)

IRs:
REF_45 -> LENGTH owners
TMP_43(uint256) = REF_45 + 1
MODIFIER_CALL, MultiSigWallet.validRequirement(uint256,uint256)(TMP_43,required)"];
7->1;
}
// Function: 23776.sol-MultiSigWallet-addTransaction(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transactionId = transactionCount

IRs:
transactionId(uint256) := transactionCount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transactions[transactionId] = Transaction({destination:destination,value:value,data:data,executed:false})

IRs:
REF_77(MultiSigWallet.Transaction) -> transactions[transactionId]
TMP_97(MultiSigWallet.Transaction) = new Transaction(destination,value,data,False)
REF_77(MultiSigWallet.Transaction) (->transactions) := TMP_97(MultiSigWallet.Transaction)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transactionCount += 1

IRs:
transactionCount(uint256) = transactionCount + 1"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Submission(transactionId)

IRs:
Emit Submission(transactionId)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
transactionId

IRs:
RETURN transactionId"];
}
// Function: 23776.sol-MultiSigWallet-changeRequirement(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
required = _required

IRs:
required(uint256) := _required(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
RequirementChange(_required)

IRs:
Emit RequirementChange(_required)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
validRequirement(owners.length,_required)

IRs:
REF_60 -> LENGTH owners
MODIFIER_CALL, MultiSigWallet.validRequirement(uint256,uint256)(REF_60,_required)"];
4->1;
}
// Function: 23776.sol-MultiSigWallet-confirmSettingsChange(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(settingsRequests[_txIndex].executed == false)

IRs:
REF_8(MultiSigWallet.SettingsRequest) -> settingsRequests[_txIndex]
REF_9(bool) -> REF_8.executed
TMP_25(bool) = REF_9 == False
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
settingsRequests[_txIndex].confirmations[msg.sender] = true

IRs:
REF_10(MultiSigWallet.SettingsRequest) -> settingsRequests[_txIndex]
REF_11(mapping(address => bool)) -> REF_10.confirmations
REF_12(bool) -> REF_11[msg.sender]
REF_12(bool) (->settingsRequests) := True(bool)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
isConfirmedSettingsRequest(_txIndex)

IRs:
TMP_27(bool) = INTERNAL_CALL, MultiSigWallet.isConfirmedSettingsRequest(uint256)(_txIndex)
CONDITION TMP_27"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
request = settingsRequests[_txIndex]

IRs:
REF_13(MultiSigWallet.SettingsRequest) -> settingsRequests[_txIndex]
request(MultiSigWallet.SettingsRequest) := REF_13(MultiSigWallet.SettingsRequest)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
request.executed = true

IRs:
REF_14(bool) -> request.executed
REF_14(bool) (->request) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
IToken(token).executeSettingsChange(request.amount,request.partInvestor,request.partProject,request.partFounders,request.blocksPerStage,request.partInvestorIncreasePerStage,request.maxStages)

IRs:
TMP_28 = CONVERT token to IToken
REF_16(uint256) -> request.amount
REF_17(uint256) -> request.partInvestor
REF_18(uint256) -> request.partProject
REF_19(uint256) -> request.partFounders
REF_20(uint256) -> request.blocksPerStage
REF_21(uint256) -> request.partInvestorIncreasePerStage
REF_22(uint256) -> request.maxStages
HIGH_LEVEL_CALL, dest:TMP_28(IToken), function:executeSettingsChange, arguments:['REF_16', 'REF_17', 'REF_18', 'REF_19', 'REF_20', 'REF_21', 'REF_22']  "];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
10->1;
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 23776.sol-MultiSigWallet-confirmTransaction(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
confirmations[_transactionId][msg.sender] = true

IRs:
REF_61(mapping(address => bool)) -> confirmations[_transactionId]
REF_62(bool) -> REF_61[msg.sender]
REF_62(bool) (->confirmations) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Confirmation(msg.sender,_transactionId)

IRs:
Emit Confirmation(msg.sender,_transactionId)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
executeTransaction(_transactionId)

IRs:
INTERNAL_CALL, MultiSigWallet.executeTransaction(uint256)(_transactionId)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
transactionExists(_transactionId)

IRs:
MODIFIER_CALL, MultiSigWallet.transactionExists(uint256)(_transactionId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
notConfirmed(_transactionId,msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.notConfirmed(uint256,address)(_transactionId,msg.sender)"];
6->1;
}
// Function: 23776.sol-MultiSigWallet-confirmed(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(confirmations[_transactionId][_owner])

IRs:
REF_106(mapping(address => bool)) -> confirmations[_transactionId]
REF_107(bool) -> REF_106[_owner]
TMP_139(None) = SOLIDITY_CALL require(bool)(REF_107)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 23776.sol-MultiSigWallet-executeTransaction(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
isConfirmed(_transactionId)

IRs:
TMP_88(bool) = INTERNAL_CALL, MultiSigWallet.isConfirmed(uint256)(_transactionId)
CONDITION TMP_88"];
1->2[label="True"];
1->9[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
trx = transactions[_transactionId]

IRs:
REF_65(MultiSigWallet.Transaction) -> transactions[_transactionId]
trx(MultiSigWallet.Transaction) := REF_65(MultiSigWallet.Transaction)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
trx.executed = true

IRs:
REF_66(bool) -> trx.executed
REF_66(bool) (->trx) := True(bool)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
trx.destination.call.value(trx.value)(trx.data)

IRs:
REF_67(address) -> trx.destination
REF_70(uint256) -> trx.value
REF_71(bytes) -> trx.data
TMP_90(bool) = LOW_LEVEL_CALL, dest:REF_67, function:call, arguments:['REF_71'] value:REF_70 
CONDITION TMP_90"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Execution(_transactionId)

IRs:
Emit Execution(_transactionId)"];
5->8;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ExecutionFailure(_transactionId)

IRs:
Emit ExecutionFailure(_transactionId)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
trx.executed = false

IRs:
REF_72(bool) -> trx.executed
REF_72(bool) (->trx) := False(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
notExecuted(_transactionId)

IRs:
MODIFIER_CALL, MultiSigWallet.notExecuted(uint256)(_transactionId)"];
10->1;
}
// Function: 23776.sol-MultiSigWallet-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value > 0

IRs:
TMP_0(bool) = msg.value > 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Deposit(msg.sender,msg.value)

IRs:
Emit Deposit(msg.sender,msg.value)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 23776.sol-MultiSigWallet-getConfirmationCount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < owners.length

IRs:
REF_78 -> LENGTH owners
TMP_99(bool) = i < REF_78
CONDITION TMP_99"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
confirmations[_transactionId][owners[i]]

IRs:
REF_79(mapping(address => bool)) -> confirmations[_transactionId]
REF_80(address) -> owners[i]
REF_81(bool) -> REF_79[REF_80]
CONDITION REF_81"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_100(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 23776.sol-MultiSigWallet-getConfirmations(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
confirmationsTemp = new address[](owners.length)

IRs:
REF_86 -> LENGTH owners
TMP_108(address[])  = new address[](REF_86)
confirmationsTemp(address[]) = ['TMP_108(address[])']"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->13;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < owners.length

IRs:
REF_87 -> LENGTH owners
TMP_109(bool) = i < REF_87
CONDITION TMP_109"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
confirmations[_transactionId][owners[i]]

IRs:
REF_88(mapping(address => bool)) -> confirmations[_transactionId]
REF_89(address) -> owners[i]
REF_90(bool) -> REF_88[REF_89]
CONDITION REF_90"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
confirmationsTemp[count] = owners[i]

IRs:
REF_91(address) -> confirmationsTemp[count]
REF_92(address) -> owners[i]
REF_91(address) (->confirmationsTemp) := REF_92(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_110(uint256) := i(uint256)
i(uint256) = i + 1"];
12->7;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_confirmations = new address[](count)

IRs:
TMP_112(address[])  = new address[](count)
_confirmations(address[]) = ['TMP_112(address[])']"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
i < count

IRs:
TMP_113(bool) = i < count
CONDITION TMP_113"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_confirmations[i] = confirmationsTemp[i]

IRs:
REF_93(address) -> _confirmations[i]
REF_94(address) -> confirmationsTemp[i]
REF_93(address) (->_confirmations) := REF_94(address)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i ++

IRs:
TMP_114(uint256) := i(uint256)
i(uint256) = i + 1"];
19->17;
20[label="Node Type: RETURN 20

EXPRESSION:
_confirmations

IRs:
RETURN _confirmations"];
}
// Function: 23776.sol-MultiSigWallet-getOwners()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owners

IRs:
RETURN owners"];
}
// Function: 23776.sol-MultiSigWallet-getSettingsChangeConfirmationCount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < owners.length

IRs:
REF_28 -> LENGTH owners
TMP_34(bool) = i < REF_28
CONDITION TMP_34"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
settingsRequests[_txIndex].confirmations[owners[i]]

IRs:
REF_29(MultiSigWallet.SettingsRequest) -> settingsRequests[_txIndex]
REF_30(mapping(address => bool)) -> REF_29.confirmations
REF_31(address) -> owners[i]
REF_32(bool) -> REF_30[REF_31]
CONDITION REF_32"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_35(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 23776.sol-MultiSigWallet-getTransactionCount(bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < transactionCount

IRs:
TMP_101(bool) = i < transactionCount
CONDITION TMP_101"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
pending && ! transactions[i].executed || executed && transactions[i].executed

IRs:
REF_82(MultiSigWallet.Transaction) -> transactions[i]
REF_83(bool) -> REF_82.executed
TMP_102 = UnaryType.BANG REF_83 
TMP_103(bool) = pending && TMP_102
REF_84(MultiSigWallet.Transaction) -> transactions[i]
REF_85(bool) -> REF_84.executed
TMP_104(bool) = executed && REF_85
TMP_105(bool) = TMP_103 || TMP_104
CONDITION TMP_105"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_106(uint256) := i(uint256)
i(uint256) = i + 1"];
8->4;
9[label="Node Type: RETURN 9

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 23776.sol-MultiSigWallet-getTransactionIds(uint256,uint256,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
transactionIdsTemp = new uint256[](transactionCount)

IRs:
TMP_116(uint256[])  = new uint256[](transactionCount)
transactionIdsTemp(uint256[]) = ['TMP_116(uint256[])']"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->13;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i = from

IRs:
i(uint256) := from(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < transactionCount

IRs:
TMP_117(bool) = i < transactionCount
CONDITION TMP_117"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
pending && ! transactions[i].executed || executed && transactions[i].executed

IRs:
REF_95(MultiSigWallet.Transaction) -> transactions[i]
REF_96(bool) -> REF_95.executed
TMP_118 = UnaryType.BANG REF_96 
TMP_119(bool) = pending && TMP_118
REF_97(MultiSigWallet.Transaction) -> transactions[i]
REF_98(bool) -> REF_97.executed
TMP_120(bool) = executed && REF_98
TMP_121(bool) = TMP_119 || TMP_120
CONDITION TMP_121"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
transactionIdsTemp[count] = i

IRs:
REF_99(uint256) -> transactionIdsTemp[count]
REF_99(uint256) (->transactionIdsTemp) := i(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_122(uint256) := i(uint256)
i(uint256) = i + 1"];
12->7;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_transactionIds = new uint256[](to - from)

IRs:
TMP_124(uint256) = to - from
TMP_125(uint256[])  = new uint256[](TMP_124)
_transactionIds(uint256[]) = ['TMP_125(uint256[])']"];
13->16;
14[label="Node Type: BEGIN_LOOP 14
"];
14->17;
15[label="Node Type: END_LOOP 15
"];
15->20;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i = from

IRs:
i(uint256) := from(uint256)"];
16->14;
17[label="Node Type: IF_LOOP 17

EXPRESSION:
i < to

IRs:
TMP_126(bool) = i < to
CONDITION TMP_126"];
17->18[label="True"];
17->15[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_transactionIds[i - from] = transactionIdsTemp[i]

IRs:
TMP_127(uint256) = i - from
REF_100(uint256) -> _transactionIds[TMP_127]
REF_101(uint256) -> transactionIdsTemp[i]
REF_100(uint256) (->_transactionIds) := REF_101(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i ++

IRs:
TMP_128(uint256) := i(uint256)
i(uint256) = i + 1"];
19->17;
20[label="Node Type: RETURN 20

EXPRESSION:
_transactionIds

IRs:
RETURN _transactionIds"];
}
// Function: 23776.sol-MultiSigWallet-isConfirmed(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->13;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < owners.length

IRs:
REF_73 -> LENGTH owners
TMP_94(bool) = i < REF_73
CONDITION TMP_94"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
confirmations[_transactionId][owners[i]]

IRs:
REF_74(mapping(address => bool)) -> confirmations[_transactionId]
REF_75(address) -> owners[i]
REF_76(bool) -> REF_74[REF_75]
CONDITION REF_76"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
count == required

IRs:
TMP_95(bool) = count == required
CONDITION TMP_95"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_96(uint256) := i(uint256)
i(uint256) = i + 1"];
12->5;
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 23776.sol-MultiSigWallet-isConfirmedSettingsRequest(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->13;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < owners.length

IRs:
REF_23 -> LENGTH owners
TMP_31(bool) = i < REF_23
CONDITION TMP_31"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
settingsRequests[_transactionId].confirmations[owners[i]]

IRs:
REF_24(MultiSigWallet.SettingsRequest) -> settingsRequests[_transactionId]
REF_25(mapping(address => bool)) -> REF_24.confirmations
REF_26(address) -> owners[i]
REF_27(bool) -> REF_25[REF_26]
CONDITION REF_27"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
count += 1

IRs:
count(uint256) = count + 1"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
count == required

IRs:
TMP_32(bool) = count == required
CONDITION TMP_32"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_33(uint256) := i(uint256)
i(uint256) = i + 1"];
12->5;
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 23776.sol-MultiSigWallet-notConfirmed(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! confirmations[_transactionId][_owner])

IRs:
REF_108(mapping(address => bool)) -> confirmations[_transactionId]
REF_109(bool) -> REF_108[_owner]
TMP_140 = UnaryType.BANG REF_109 
TMP_141(None) = SOLIDITY_CALL require(bool)(TMP_140)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 23776.sol-MultiSigWallet-notExecuted(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! transactions[_transactionId].executed)

IRs:
REF_110(MultiSigWallet.Transaction) -> transactions[_transactionId]
REF_111(bool) -> REF_110.executed
TMP_142 = UnaryType.BANG REF_111 
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 23776.sol-MultiSigWallet-notNull(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_address != 0)

IRs:
TMP_144(bool) = _address != 0
TMP_145(None) = SOLIDITY_CALL require(bool)(TMP_144)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 23776.sol-MultiSigWallet-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_132(bool) = msg.sender == owner
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 23776.sol-MultiSigWallet-onlyWallet()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == address(this))

IRs:
TMP_129 = CONVERT this to address
TMP_130(bool) = msg.sender == TMP_129
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 23776.sol-MultiSigWallet-ownerDoesNotExist(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isOwner[_owner])

IRs:
REF_102(bool) -> isOwner[_owner]
TMP_134 = UnaryType.BANG REF_102 
TMP_135(None) = SOLIDITY_CALL require(bool)(TMP_134)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 23776.sol-MultiSigWallet-ownerExists(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isOwner[_owner])

IRs:
REF_103(bool) -> isOwner[_owner]
TMP_136(None) = SOLIDITY_CALL require(bool)(REF_103)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 23776.sol-MultiSigWallet-removeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isOwner[_owner] = false

IRs:
REF_46(bool) -> isOwner[_owner]
REF_46(bool) (->isOwner) := False(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->11;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < owners.length - 1

IRs:
REF_47 -> LENGTH owners
TMP_45(uint256) = REF_47 - 1
TMP_46(bool) = i < TMP_45
CONDITION TMP_46"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
owners[i] == _owner

IRs:
REF_48(address) -> owners[i]
TMP_47(bool) = REF_48 == _owner
CONDITION TMP_47"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
owners[i] = owners[owners.length - 1]

IRs:
REF_49(address) -> owners[i]
REF_50 -> LENGTH owners
TMP_48(uint256) = REF_50 - 1
REF_51(address) -> owners[TMP_48]
REF_49(address) (->owners) := REF_51(address)"];
7->8;
8[label="Node Type: BREAK 8
"];
8->3;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_49(uint256) := i(uint256)
i(uint256) = i + 1"];
10->5;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
owners.length -= 1

IRs:
REF_52 -> LENGTH owners
REF_52(-> owners) = REF_52 - 1"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
required > owners.length

IRs:
REF_53 -> LENGTH owners
TMP_50(bool) = required > REF_53
CONDITION TMP_50"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
changeRequirement(owners.length)

IRs:
REF_54 -> LENGTH owners
INTERNAL_CALL, MultiSigWallet.changeRequirement(uint256)(REF_54)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
OwnerRemoval(_owner)

IRs:
Emit OwnerRemoval(_owner)"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
ownerExists(_owner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(_owner)"];
17->1;
}
// Function: 23776.sol-MultiSigWallet-replaceOwner(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->10;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < owners.length

IRs:
REF_55 -> LENGTH owners
TMP_55(bool) = i < REF_55
CONDITION TMP_55"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
owners[i] == _owner

IRs:
REF_56(address) -> owners[i]
TMP_56(bool) = REF_56 == _owner
CONDITION TMP_56"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
owners[i] = _newOwner

IRs:
REF_57(address) -> owners[i]
REF_57(address) (->owners) := _newOwner(address)"];
6->7;
7[label="Node Type: BREAK 7
"];
7->2;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_57(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
isOwner[_owner] = false

IRs:
REF_58(bool) -> isOwner[_owner]
REF_58(bool) (->isOwner) := False(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isOwner[_newOwner] = true

IRs:
REF_59(bool) -> isOwner[_newOwner]
REF_59(bool) (->isOwner) := True(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OwnerRemoval(_owner)

IRs:
Emit OwnerRemoval(_owner)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
OwnerAddition(_newOwner)

IRs:
Emit OwnerAddition(_newOwner)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyWallet()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyWallet()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
ownerExists(_owner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(_owner)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
ownerDoesNotExist(_newOwner)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerDoesNotExist(address)(_newOwner)"];
16->3;
}
// Function: 23776.sol-MultiSigWallet-revokeConfirmation(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
confirmations[_transactionId][msg.sender] = false

IRs:
REF_63(mapping(address => bool)) -> confirmations[_transactionId]
REF_64(bool) -> REF_63[msg.sender]
REF_64(bool) (->confirmations) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Revocation(msg.sender,_transactionId)

IRs:
Emit Revocation(msg.sender,_transactionId)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
confirmed(_transactionId,msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.confirmed(uint256,address)(_transactionId,msg.sender)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
notExecuted(_transactionId)

IRs:
MODIFIER_CALL, MultiSigWallet.notExecuted(uint256)(_transactionId)"];
5->1;
}
// Function: 23776.sol-MultiSigWallet-setFinishedTx()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transactionId = addTransaction(token,0,0x64f65cc0)

IRs:
TMP_66(uint256) = INTERNAL_CALL, MultiSigWallet.addTransaction(address,uint256,bytes)(token,0,0x64f65cc0)
transactionId(uint256) := TMP_66(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
confirmTransaction(transactionId)

IRs:
INTERNAL_CALL, MultiSigWallet.confirmTransaction(uint256)(transactionId)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
transactionId

IRs:
RETURN transactionId"];
}
// Function: 23776.sol-MultiSigWallet-setFreezeTx()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transactionId = addTransaction(token,0,0x2c8cbe40)

IRs:
TMP_72(uint256) = INTERNAL_CALL, MultiSigWallet.addTransaction(address,uint256,bytes)(token,0,0x2c8cbe40)
transactionId(uint256) := TMP_72(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
confirmTransaction(transactionId)

IRs:
INTERNAL_CALL, MultiSigWallet.confirmTransaction(uint256)(transactionId)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
transactionId

IRs:
RETURN transactionId"];
}
// Function: 23776.sol-MultiSigWallet-setLiveTx()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transactionId = addTransaction(token,0,0x9d0714b2)

IRs:
TMP_69(uint256) = INTERNAL_CALL, MultiSigWallet.addTransaction(address,uint256,bytes)(token,0,0x9d0714b2)
transactionId(uint256) := TMP_69(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
confirmTransaction(transactionId)

IRs:
INTERNAL_CALL, MultiSigWallet.confirmTransaction(uint256)(transactionId)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
transactionId

IRs:
RETURN transactionId"];
}
// Function: 23776.sol-MultiSigWallet-setToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token == address(0))

IRs:
TMP_9 = CONVERT 0 to address
TMP_10(bool) = token == TMP_9
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token = IToken(_token)

IRs:
TMP_12 = CONVERT _token to IToken
token(IToken) := TMP_12(IToken)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, MultiSigWallet.onlyOwner()()"];
3->1;
}
// Function: 23776.sol-MultiSigWallet-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_OWNER_COUNT = 50

IRs:
MAX_OWNER_COUNT(uint256) := 50(uint256)"];
}
// Function: 23776.sol-MultiSigWallet-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
settingsRequestsCount = 0

IRs:
settingsRequestsCount(uint256) := 0(uint256)"];
}
// Function: 23776.sol-MultiSigWallet-submitTransaction(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transactionId = addTransaction(destination,value,data)

IRs:
TMP_75(uint256) = INTERNAL_CALL, MultiSigWallet.addTransaction(address,uint256,bytes)(destination,value,data)
transactionId(uint256) := TMP_75(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
confirmTransaction(transactionId)

IRs:
INTERNAL_CALL, MultiSigWallet.confirmTransaction(uint256)(transactionId)"];
2->5;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
notNull(destination)

IRs:
MODIFIER_CALL, MultiSigWallet.notNull(address)(destination)"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
transactionId

IRs:
RETURN transactionId"];
}
// Function: 23776.sol-MultiSigWallet-tgeSettingsChangeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(amount * partInvestor * partProject * blocksPerStage * partInvestorIncreasePerStage * maxStages != 0)

IRs:
TMP_14(uint256) = amount * partInvestor
TMP_15(uint256) = TMP_14 * partProject
TMP_16(uint256) = TMP_15 * blocksPerStage
TMP_17(uint256) = TMP_16 * partInvestorIncreasePerStage
TMP_18(uint256) = TMP_17 * maxStages
TMP_19(bool) = TMP_18 != 0
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_txIndex = settingsRequestsCount

IRs:
_txIndex(uint256) := settingsRequestsCount(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
settingsRequests[_txIndex] = SettingsRequest({amount:amount,partInvestor:partInvestor,partProject:partProject,partFounders:partFounders,blocksPerStage:blocksPerStage,partInvestorIncreasePerStage:partInvestorIncreasePerStage,maxStages:maxStages,executed:false})

IRs:
REF_7(MultiSigWallet.SettingsRequest) -> settingsRequests[_txIndex]
TMP_21(MultiSigWallet.SettingsRequest) = new SettingsRequest(amount,partInvestor,partProject,partFounders,blocksPerStage,partInvestorIncreasePerStage,maxStages,False)
REF_7(MultiSigWallet.SettingsRequest) (->settingsRequests) := TMP_21(MultiSigWallet.SettingsRequest)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
settingsRequestsCount ++

IRs:
TMP_22(uint256) := settingsRequestsCount(uint256)
settingsRequestsCount(uint256) = settingsRequestsCount + 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
confirmSettingsChange(_txIndex)

IRs:
TMP_23(bool) = INTERNAL_CALL, MultiSigWallet.confirmSettingsChange(uint256)(_txIndex)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
_txIndex

IRs:
RETURN _txIndex"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ownerExists(msg.sender)

IRs:
MODIFIER_CALL, MultiSigWallet.ownerExists(address)(msg.sender)"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
_txIndex

IRs:
RETURN _txIndex"];
}
// Function: 23776.sol-MultiSigWallet-transactionExists(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(transactions[_transactionId].destination != 0)

IRs:
REF_104(MultiSigWallet.Transaction) -> transactions[_transactionId]
REF_105(address) -> REF_104.destination
TMP_137(bool) = REF_105 != 0
TMP_138(None) = SOLIDITY_CALL require(bool)(TMP_137)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 23776.sol-MultiSigWallet-validRequirement(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_ownerCount < MAX_OWNER_COUNT && _required <= _ownerCount && _required != 0 && _ownerCount != 0)

IRs:
TMP_146(bool) = _ownerCount < MAX_OWNER_COUNT
TMP_147(bool) = _required <= _ownerCount
TMP_148(bool) = TMP_146 && TMP_147
TMP_149(bool) = _required != 0
TMP_150(bool) = TMP_148 && TMP_149
TMP_151(bool) = _ownerCount != 0
TMP_152(bool) = TMP_150 && TMP_151
TMP_153(None) = SOLIDITY_CALL require(bool)(TMP_152)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 23776.sol-MultiSigWallet-viewSettingsChange(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
request = settingsRequests[_txIndex]

IRs:
REF_33(MultiSigWallet.SettingsRequest) -> settingsRequests[_txIndex]
request(MultiSigWallet.SettingsRequest) := REF_33(MultiSigWallet.SettingsRequest)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(request.amount,request.partInvestor,request.partProject,request.partFounders,request.blocksPerStage,request.partInvestorIncreasePerStage,request.maxStages)

IRs:
REF_34(uint256) -> request.amount
REF_35(uint256) -> request.partInvestor
REF_36(uint256) -> request.partProject
REF_37(uint256) -> request.partFounders
REF_38(uint256) -> request.blocksPerStage
REF_39(uint256) -> request.partInvestorIncreasePerStage
REF_40(uint256) -> request.maxStages
RETURN REF_34,REF_35,REF_36,REF_37,REF_38,REF_39,REF_40"];
3[label="Node Type: RETURN 3

EXPRESSION:
(amount,partInvestor,partProject,partFounders,blocksPerStage,partInvestorIncreasePerStage,maxStages)

IRs:
RETURN amount,partInvestor,partProject,partFounders,blocksPerStage,partInvestorIncreasePerStage,maxStages"];
}
}
