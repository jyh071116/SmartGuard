digraph G {
// Function: 24601.sol-BalancingToken-allowance(address,address)
digraph{
}
// Function: 24601.sol-BalancingToken-approve(address,uint256)
digraph{
}
// Function: 24601.sol-BalancingToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 24601.sol-BalancingToken-transfer(address,uint256)
digraph{
}
// Function: 24601.sol-BalancingToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 24601.sol-Blocked-unblocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > blockedUntil)

IRs:
TMP_20(bool) = now > blockedUntil
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24601.sol-DividendToken-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 24601.sol-DividendToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_23(mapping(address => uint256)) -> allowed[_owner]
REF_24(uint256) -> REF_23[_spender]
RETURN REF_24"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_53(uint256) = 2 * 32
MODIFIER_CALL, DividendToken.onlyPayloadSize(uint256)(TMP_53)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
unblocked()

IRs:
MODIFIER_CALL, Blocked.unblocked()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 24601.sol-DividendToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

IRs:
TMP_45(bool) = _value == 0
REF_19(mapping(address => uint256)) -> allowed[msg.sender]
REF_20(uint256) -> REF_19[_spender]
TMP_46(bool) = REF_20 == 0
TMP_47(bool) = TMP_45 || TMP_46
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_21(mapping(address => uint256)) -> allowed[msg.sender]
REF_22(uint256) -> REF_21[_spender]
REF_22(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_50(uint256) = 2 * 32
MODIFIER_CALL, DividendToken.onlyPayloadSize(uint256)(TMP_50)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
unblocked()

IRs:
MODIFIER_CALL, Blocked.unblocked()()"];
6->1;
}
// Function: 24601.sol-DividendToken-balanceOf(address)
digraph{
}
// Function: 24601.sol-DividendToken-beforeBalanceChanges(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
holders[_who].balanceUpdateTime <= lastDivideRewardTime

IRs:
REF_46(DividendToken.TokenHolder) -> holders[_who]
REF_47(uint256) -> REF_46.balanceUpdateTime
TMP_80(bool) = REF_47 <= lastDivideRewardTime
CONDITION TMP_80"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
holders[_who].balanceUpdateTime = now

IRs:
REF_48(DividendToken.TokenHolder) -> holders[_who]
REF_49(uint256) -> REF_48.balanceUpdateTime
REF_49(uint256) (->holders) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
holders[_who].balance = balances[_who]

IRs:
REF_50(DividendToken.TokenHolder) -> holders[_who]
REF_51(uint256) -> REF_50.balance
REF_52(uint256) -> balances[_who]
REF_51(uint256) (->holders) := REF_52(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 24601.sol-DividendToken-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != 0)

IRs:
TMP_22(bool) = _owner != 0
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _owner

IRs:
newOwner(address) := _owner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 24601.sol-DividendToken-confirmOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner == msg.sender)

IRs:
TMP_25(bool) = newOwner == msg.sender
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete newOwner

IRs:
newOwner = delete newOwner "];
}
// Function: 24601.sol-DividendToken-divideUpReward(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(inDays >= 15 && inDays <= 45)

IRs:
TMP_68(bool) = inDays >= 15
TMP_69(bool) = inDays <= 45
TMP_70(bool) = TMP_68 && TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lastDivideRewardTime = now

IRs:
lastDivideRewardTime(uint256) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rewardDays = inDays

IRs:
rewardDays(uint256) := inDays(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalReward = this.balance

IRs:
REF_41(uint256) = SOLIDITY_CALL balance(address)(this)
totalReward(uint256) := REF_41([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f016eddee30>])"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
rewardTimePast()

IRs:
MODIFIER_CALL, DividendToken.rewardTimePast()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
6->1;
}
// Function: 24601.sol-DividendToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == msg.sender)

IRs:
TMP_81(bool) = owner == msg.sender
TMP_82(None) = SOLIDITY_CALL require(bool)(TMP_81)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24601.sol-DividendToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= size + 4)

IRs:
REF_53 -> LENGTH msg.data
TMP_85(uint256) = size + 4
TMP_86(bool) = REF_53 >= TMP_85
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24601.sol-DividendToken-reward()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
holders[msg.sender].rewardWithdrawTime >= lastDivideRewardTime

IRs:
REF_25(DividendToken.TokenHolder) -> holders[msg.sender]
REF_26(uint256) -> REF_25.rewardWithdrawTime
TMP_56(bool) = REF_26 >= lastDivideRewardTime
CONDITION TMP_56"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
holders[msg.sender].balanceUpdateTime <= lastDivideRewardTime

IRs:
REF_27(DividendToken.TokenHolder) -> holders[msg.sender]
REF_28(uint256) -> REF_27.balanceUpdateTime
TMP_57(bool) = REF_28 <= lastDivideRewardTime
CONDITION TMP_57"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balance = balances[msg.sender]

IRs:
REF_29(uint256) -> balances[msg.sender]
balance(uint256) := REF_29(uint256)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balance = holders[msg.sender].balance

IRs:
REF_30(DividendToken.TokenHolder) -> holders[msg.sender]
REF_31(uint256) -> REF_30.balance
balance(uint256) := REF_31(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
totalReward.mul(balance).div(totalSupply)

IRs:
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['totalReward', 'balance'] 
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_58', 'totalSupply'] 
RETURN TMP_59"];
}
// Function: 24601.sol-DividendToken-rewardTimePast()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > lastDivideRewardTime + rewardDays * 86400)

IRs:
TMP_88(uint256) = rewardDays * 86400
TMP_89(uint256) = lastDivideRewardTime + TMP_88
TMP_90(bool) = now > TMP_89
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24601.sol-DividendToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rewardDays = 0

IRs:
rewardDays(uint256) := 0(uint256)"];
}
// Function: 24601.sol-DividendToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
transferSimple(_to,_value)

IRs:
TMP_27(bool) = INTERNAL_CALL, DividendToken.transferSimple(address,uint256)(_to,_value)
RETURN TMP_27"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_28(uint256) = 2 * 32
MODIFIER_CALL, DividendToken.onlyPayloadSize(uint256)(TMP_28)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
unblocked()

IRs:
MODIFIER_CALL, Blocked.unblocked()()"];
3->1;
}
// Function: 24601.sol-DividendToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
beforeBalanceChanges(_from)

IRs:
INTERNAL_CALL, DividendToken.beforeBalanceChanges(address)(_from)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
beforeBalanceChanges(_to)

IRs:
INTERNAL_CALL, DividendToken.beforeBalanceChanges(address)(_to)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
_allowance(uint256) := REF_9(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_10(uint256) -> balances[_to]
REF_11(uint256) -> balances[_to]
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_11', '_value'] 
REF_10(uint256) (->balances) := TMP_38(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_13(uint256) -> balances[_from]
REF_14(uint256) -> balances[_from]
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_14', '_value'] 
REF_13(uint256) (->balances) := TMP_39(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = _allowance.sub(_value)

IRs:
REF_16(mapping(address => uint256)) -> allowed[_from]
REF_17(uint256) -> REF_16[msg.sender]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_allowance', '_value'] 
REF_17(uint256) (->allowed) := TMP_40(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_42(uint256) = 3 * 32
MODIFIER_CALL, DividendToken.onlyPayloadSize(uint256)(TMP_42)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
unblocked()

IRs:
MODIFIER_CALL, Blocked.unblocked()()"];
10->1;
}
// Function: 24601.sol-DividendToken-transferSimple(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
beforeBalanceChanges(msg.sender)

IRs:
INTERNAL_CALL, DividendToken.beforeBalanceChanges(address)(msg.sender)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
beforeBalanceChanges(_to)

IRs:
INTERNAL_CALL, DividendToken.beforeBalanceChanges(address)(_to)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_2(uint256) -> balances[msg.sender]
REF_3(uint256) -> balances[msg.sender]
TMP_33(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_3', '_value'] 
REF_2(uint256) (->balances) := TMP_33(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_5(uint256) -> balances[_to]
REF_6(uint256) -> balances[_to]
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_6', '_value'] 
REF_5(uint256) (->balances) := TMP_34(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 24601.sol-DividendToken-unblocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > blockedUntil)

IRs:
TMP_83(bool) = now > blockedUntil
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24601.sol-DividendToken-withdrawLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender.call.gas(3000000).value(this.balance)())

IRs:
REF_45(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_76(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:REF_45 gas:3000000
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rewardTimePast()

IRs:
MODIFIER_CALL, DividendToken.rewardTimePast()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 24601.sol-DividendToken-withdrawReward()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
rewardValue = reward()

IRs:
TMP_60(uint256) = INTERNAL_CALL, DividendToken.reward()()
rewardValue(uint256) := TMP_60(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
rewardValue == 0

IRs:
TMP_61(bool) = rewardValue == 0
CONDITION TMP_61"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
balances[msg.sender] == 0

IRs:
REF_34(uint256) -> balances[msg.sender]
TMP_62(bool) = REF_34 == 0
CONDITION TMP_62"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
delete holders[msg.sender]

IRs:
REF_35(DividendToken.TokenHolder) -> holders[msg.sender]
holders = delete REF_35 "];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
holders[msg.sender].rewardWithdrawTime = now

IRs:
REF_36(DividendToken.TokenHolder) -> holders[msg.sender]
REF_37(uint256) -> REF_36.rewardWithdrawTime
REF_37(uint256) (->holders) := now(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(msg.sender.call.gas(3000000).value(rewardValue)())

IRs:
TMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:rewardValue gas:3000000
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
DividendReceived(msg.sender,rewardValue)

IRs:
Emit DividendReceived(msg.sender,rewardValue)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
rewardValue

IRs:
RETURN rewardValue"];
}
// Function: 24601.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 24601.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 24601.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 24601.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 24601.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 24601.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 24601.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 24601.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 24601.sol-Owned-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != 0)

IRs:
TMP_13(bool) = _owner != 0
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _owner

IRs:
newOwner(address) := _owner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 24601.sol-Owned-confirmOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner == msg.sender)

IRs:
TMP_16(bool) = newOwner == msg.sender
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete newOwner

IRs:
newOwner = delete newOwner "];
}
// Function: 24601.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == msg.sender)

IRs:
TMP_18(bool) = owner == msg.sender
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24601.sol-RENTCoin-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 24601.sol-RENTCoin-RENTCoin(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = initialSupply

IRs:
totalSupply(uint256) := initialSupply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[owner] = totalSupply

IRs:
REF_106(uint256) -> balances[owner]
REF_106(uint256) (->balances) := totalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
blockedUntil = unblockTime

IRs:
blockedUntil(uint256) := unblockTime(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(this,owner,totalSupply)

IRs:
Emit Transfer(this,owner,totalSupply)"];
}
// Function: 24601.sol-RENTCoin-allowance(address,address)
digraph{
}
// Function: 24601.sol-RENTCoin-approve(address,uint256)
digraph{
}
// Function: 24601.sol-RENTCoin-balanceOf(address)
digraph{
}
// Function: 24601.sol-RENTCoin-beforeBalanceChanges(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
holders[_who].balanceUpdateTime <= lastDivideRewardTime

IRs:
REF_98(DividendToken.TokenHolder) -> holders[_who]
REF_99(uint256) -> REF_98.balanceUpdateTime
TMP_145(bool) = REF_99 <= lastDivideRewardTime
CONDITION TMP_145"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
holders[_who].balanceUpdateTime = now

IRs:
REF_100(DividendToken.TokenHolder) -> holders[_who]
REF_101(uint256) -> REF_100.balanceUpdateTime
REF_101(uint256) (->holders) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
holders[_who].balance = balances[_who]

IRs:
REF_102(DividendToken.TokenHolder) -> holders[_who]
REF_103(uint256) -> REF_102.balance
REF_104(uint256) -> balances[_who]
REF_103(uint256) (->holders) := REF_104(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 24601.sol-RENTCoin-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != 0)

IRs:
TMP_146(bool) = _owner != 0
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _owner

IRs:
newOwner(address) := _owner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 24601.sol-RENTCoin-confirmOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner == msg.sender)

IRs:
TMP_149(bool) = newOwner == msg.sender
TMP_150(None) = SOLIDITY_CALL require(bool)(TMP_149)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete newOwner

IRs:
newOwner = delete newOwner "];
}
// Function: 24601.sol-RENTCoin-divideUpReward(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(inDays >= 15 && inDays <= 45)

IRs:
TMP_133(bool) = inDays >= 15
TMP_134(bool) = inDays <= 45
TMP_135(bool) = TMP_133 && TMP_134
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lastDivideRewardTime = now

IRs:
lastDivideRewardTime(uint256) := now(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rewardDays = inDays

IRs:
rewardDays(uint256) := inDays(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalReward = this.balance

IRs:
REF_93(uint256) = SOLIDITY_CALL balance(address)(this)
totalReward(uint256) := REF_93([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f016ec7d870>])"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
rewardTimePast()

IRs:
MODIFIER_CALL, DividendToken.rewardTimePast()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
6->1;
}
// Function: 24601.sol-RENTCoin-manualTransfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
transferSimple(_to,_value)

IRs:
TMP_152(bool) = INTERNAL_CALL, DividendToken.transferSimple(address,uint256)(_to,_value)
RETURN TMP_152"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_153(uint256) = 2 * 32
MODIFIER_CALL, DividendToken.onlyPayloadSize(uint256)(TMP_153)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 24601.sol-RENTCoin-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == msg.sender)

IRs:
TMP_163(bool) = owner == msg.sender
TMP_164(None) = SOLIDITY_CALL require(bool)(TMP_163)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24601.sol-RENTCoin-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= size + 4)

IRs:
REF_107 -> LENGTH msg.data
TMP_156(uint256) = size + 4
TMP_157(bool) = REF_107 >= TMP_156
TMP_158(None) = SOLIDITY_CALL require(bool)(TMP_157)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24601.sol-RENTCoin-reward()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
holders[msg.sender].rewardWithdrawTime >= lastDivideRewardTime

IRs:
REF_77(DividendToken.TokenHolder) -> holders[msg.sender]
REF_78(uint256) -> REF_77.rewardWithdrawTime
TMP_121(bool) = REF_78 >= lastDivideRewardTime
CONDITION TMP_121"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
holders[msg.sender].balanceUpdateTime <= lastDivideRewardTime

IRs:
REF_79(DividendToken.TokenHolder) -> holders[msg.sender]
REF_80(uint256) -> REF_79.balanceUpdateTime
TMP_122(bool) = REF_80 <= lastDivideRewardTime
CONDITION TMP_122"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balance = balances[msg.sender]

IRs:
REF_81(uint256) -> balances[msg.sender]
balance(uint256) := REF_81(uint256)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balance = holders[msg.sender].balance

IRs:
REF_82(DividendToken.TokenHolder) -> holders[msg.sender]
REF_83(uint256) -> REF_82.balance
balance(uint256) := REF_83(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
totalReward.mul(balance).div(totalSupply)

IRs:
TMP_123(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['totalReward', 'balance'] 
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_123', 'totalSupply'] 
RETURN TMP_124"];
}
// Function: 24601.sol-RENTCoin-rewardTimePast()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > lastDivideRewardTime + rewardDays * 86400)

IRs:
TMP_159(uint256) = rewardDays * 86400
TMP_160(uint256) = lastDivideRewardTime + TMP_159
TMP_161(bool) = now > TMP_160
TMP_162(None) = SOLIDITY_CALL require(bool)(TMP_161)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24601.sol-RENTCoin-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = RentAway Coin

IRs:
name(string) := RentAway Coin(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = RTW

IRs:
symbol(string) := RTW(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint32) := 18(uint256)"];
}
// Function: 24601.sol-RENTCoin-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rewardDays = 0

IRs:
rewardDays(uint256) := 0(uint256)"];
}
// Function: 24601.sol-RENTCoin-transfer(address,uint256)
digraph{
}
// Function: 24601.sol-RENTCoin-transferFrom(address,address,uint256)
digraph{
}
// Function: 24601.sol-RENTCoin-transferSimple(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
beforeBalanceChanges(msg.sender)

IRs:
INTERNAL_CALL, DividendToken.beforeBalanceChanges(address)(msg.sender)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
beforeBalanceChanges(_to)

IRs:
INTERNAL_CALL, DividendToken.beforeBalanceChanges(address)(_to)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_54(uint256) -> balances[msg.sender]
REF_55(uint256) -> balances[msg.sender]
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_55', '_value'] 
REF_54(uint256) (->balances) := TMP_98(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_57(uint256) -> balances[_to]
REF_58(uint256) -> balances[_to]
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_58', '_value'] 
REF_57(uint256) (->balances) := TMP_99(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 24601.sol-RENTCoin-unblocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > blockedUntil)

IRs:
TMP_165(bool) = now > blockedUntil
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24601.sol-RENTCoin-withdrawLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender.call.gas(3000000).value(this.balance)())

IRs:
REF_97(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_141(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:REF_97 gas:3000000
TMP_142(None) = SOLIDITY_CALL require(bool)(TMP_141)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rewardTimePast()

IRs:
MODIFIER_CALL, DividendToken.rewardTimePast()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 24601.sol-RENTCoin-withdrawReward()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
rewardValue = reward()

IRs:
TMP_125(uint256) = INTERNAL_CALL, DividendToken.reward()()
rewardValue(uint256) := TMP_125(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
rewardValue == 0

IRs:
TMP_126(bool) = rewardValue == 0
CONDITION TMP_126"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
balances[msg.sender] == 0

IRs:
REF_86(uint256) -> balances[msg.sender]
TMP_127(bool) = REF_86 == 0
CONDITION TMP_127"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
delete holders[msg.sender]

IRs:
REF_87(DividendToken.TokenHolder) -> holders[msg.sender]
holders = delete REF_87 "];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
holders[msg.sender].rewardWithdrawTime = now

IRs:
REF_88(DividendToken.TokenHolder) -> holders[msg.sender]
REF_89(uint256) -> REF_88.rewardWithdrawTime
REF_89(uint256) (->holders) := now(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(msg.sender.call.gas(3000000).value(rewardValue)())

IRs:
TMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:rewardValue gas:3000000
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
DividendReceived(msg.sender,rewardValue)

IRs:
Emit DividendReceived(msg.sender,rewardValue)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
rewardValue

IRs:
RETURN rewardValue"];
}
// Function: 24601.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24601.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24601.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24601.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
}
