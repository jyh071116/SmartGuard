digraph G {
// Function: 24999.sol-ERC20Interface-allowance(address,address)
digraph{
}
// Function: 24999.sol-ERC20Interface-approve(address,uint256)
digraph{
}
// Function: 24999.sol-ERC20Interface-balanceOf(address)
digraph{
}
// Function: 24999.sol-ERC20Interface-totalSupply()
digraph{
}
// Function: 24999.sol-ERC20Interface-transfer(address,uint256)
digraph{
}
// Function: 24999.sol-ERC20Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 24999.sol-ERC827-approve(address,uint256,bytes)
digraph{
}
// Function: 24999.sol-ERC827-transfer(address,uint256,bytes)
digraph{
}
// Function: 24999.sol-ERC827-transferFrom(address,address,uint256,bytes)
digraph{
}
// Function: 24999.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 24999.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24999.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 24999.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24999.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24999.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 24999.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 24999.sol-TEFoods827Token-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 24999.sol-TEFoods827Token-TEFoodsToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[0x00] = _totalSupply

IRs:
REF_84(uint256) -> balances[0]
REF_84(uint256) (->balances) := _totalSupply(uint256)"];
}
// Function: 24999.sol-TEFoods827Token-allocateTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addr != 0x00)

IRs:
TMP_102(bool) = addr != 0
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(amount > 0)

IRs:
TMP_104(bool) = amount > 0
TMP_105(None) = SOLIDITY_CALL require(bool)(TMP_104)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[0x00] = balances[0x00].sub(amount)

IRs:
REF_85(uint256) -> balances[0]
REF_86(uint256) -> balances[0]
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_86', 'amount'] 
REF_85(uint256) (->balances) := TMP_106(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[addr] = balances[addr].add(amount)

IRs:
REF_88(uint256) -> balances[addr]
REF_89(uint256) -> balances[addr]
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_89', 'amount'] 
REF_88(uint256) (->balances) := TMP_107(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_circulatingSupply = _circulatingSupply.add(amount)

IRs:
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_circulatingSupply', 'amount'] 
_circulatingSupply(uint256) := TMP_108(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(_vestedSupply.add(_circulatingSupply).add(balances[0x00]) == _totalSupply)

IRs:
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_vestedSupply', '_circulatingSupply'] 
REF_94(uint256) -> balances[0]
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_109', 'REF_94'] 
TMP_111(bool) = TMP_110 == _totalSupply
TMP_112(None) = SOLIDITY_CALL assert(bool)(TMP_111)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 24999.sol-TEFoods827Token-allocateVestedTokens(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addr != 0x00)

IRs:
TMP_114(bool) = addr != 0
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(amount > 0)

IRs:
TMP_116(bool) = amount > 0
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(vestingPeriod > 0)

IRs:
TMP_118(bool) = vestingPeriod > 0
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[0x00] = balances[0x00].sub(amount)

IRs:
REF_95(uint256) -> balances[0]
REF_96(uint256) -> balances[0]
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_96', 'amount'] 
REF_95(uint256) (->balances) := TMP_120(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
vestingMap[vestingPeriod].push(vestedBalance(addr,amount))

IRs:
REF_98(TEFoodsToken.vestedBalance[]) -> vestingMap[vestingPeriod]
TMP_121(TEFoodsToken.vestedBalance) = new vestedBalance(addr,amount)
REF_100 -> LENGTH REF_98
TMP_123(uint256) := REF_100(uint256)
TMP_124(uint256) = TMP_123 + 1
REF_100(uint256) (->vestingMap) := TMP_124(uint256)
REF_101(TEFoodsToken.vestedBalance) -> REF_98[TMP_123]
REF_101(TEFoodsToken.vestedBalance) (->vestingMap) := TMP_121(TEFoodsToken.vestedBalance)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_vestedSupply = _vestedSupply.add(amount)

IRs:
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_vestedSupply', 'amount'] 
_vestedSupply(uint256) := TMP_125(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(_vestedSupply.add(_circulatingSupply).add(balances[0x00]) == _totalSupply)

IRs:
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_vestedSupply', '_circulatingSupply'] 
REF_105(uint256) -> balances[0]
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_126', 'REF_105'] 
TMP_128(bool) = TMP_127 == _totalSupply
TMP_129(None) = SOLIDITY_CALL assert(bool)(TMP_128)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->1;
}
// Function: 24999.sol-TEFoods827Token-allowance(address,address)
digraph{
}
// Function: 24999.sol-TEFoods827Token-approve(address,uint256)
digraph{
}
// Function: 24999.sol-TEFoods827Token-approve(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.approve(_spender,_value)

IRs:
TMP_182(bool) = INTERNAL_CALL, TEFoodsToken.approve(address,uint256)(_spender,_value)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_spender.call(_data))

IRs:
TMP_183(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['_data']  
TMP_184(None) = SOLIDITY_CALL require(bool)(TMP_183)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 24999.sol-TEFoods827Token-balanceOf(address)
digraph{
}
// Function: 24999.sol-TEFoods827Token-enableTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
now.add(86400) < transferrableTime

IRs:
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', '86400'] 
TMP_145(bool) = TMP_144 < transferrableTime
CONDITION TMP_145"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transferrableTime = now.add(86400)

IRs:
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', '86400'] 
transferrableTime(uint256) := TMP_146(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = 0x00

IRs:
owner(address) := 0(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 24999.sol-TEFoods827Token-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_148(None) = SOLIDITY_CALL revert()()"];
}
// Function: 24999.sol-TEFoods827Token-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_192(bool) = msg.sender == owner
TMP_193(None) = SOLIDITY_CALL require(bool)(TMP_192)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24999.sol-TEFoods827Token-releaseVestedTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= transferrableTime.add(vestingPeriod))

IRs:
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['transferrableTime', 'vestingPeriod'] 
TMP_132(bool) = now >= TMP_131
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(vestingMap[vestingPeriod].length > 0)

IRs:
REF_107(TEFoodsToken.vestedBalance[]) -> vestingMap[vestingPeriod]
REF_108 -> LENGTH REF_107
TMP_134(bool) = REF_108 > 0
TMP_135(None) = SOLIDITY_CALL require(bool)(TMP_134)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(vestingMap[vestingPeriod][0].balance > 0)

IRs:
REF_109(TEFoodsToken.vestedBalance[]) -> vestingMap[vestingPeriod]
REF_110(TEFoodsToken.vestedBalance) -> REF_109[0]
REF_111(uint256) -> REF_110.balance
TMP_136(bool) = REF_111 > 0
TMP_137(None) = SOLIDITY_CALL require(bool)(TMP_136)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
v = vestingMap[vestingPeriod]

IRs:
REF_112(TEFoodsToken.vestedBalance[]) -> vestingMap[vestingPeriod]
v(TEFoodsToken.vestedBalance) := REF_112(TEFoodsToken.vestedBalance[])"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < v.length

IRs:
REF_113(None) -> v.length
TMP_138(bool) = i < REF_113
CONDITION TMP_138"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[v[i].addr] = balances[v[i].addr].add(v[i].balance)

IRs:
REF_114(None) -> v._i
REF_115(None) -> REF_114.addr
REF_116(uint256) -> balances[REF_115]
REF_117(None) -> v._i
REF_118(None) -> REF_117.addr
REF_119(uint256) -> balances[REF_118]
REF_121(None) -> v._i
REF_122(None) -> REF_121.balance
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_119', 'REF_122'] 
REF_116(uint256) (->balances) := TMP_139(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_circulatingSupply = _circulatingSupply.add(v[i].balance)

IRs:
REF_124(None) -> v._i
REF_125(None) -> REF_124.balance
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_circulatingSupply', 'REF_125'] 
_circulatingSupply(uint256) := TMP_140(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_vestedSupply = _vestedSupply.sub(v[i].balance)

IRs:
REF_127(None) -> v._i
REF_128(None) -> REF_127.balance
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_vestedSupply', 'REF_128'] 
_vestedSupply(uint256) := TMP_141(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
v[i].balance = 0

IRs:
REF_129(None) -> v._i
REF_130(uint256) -> REF_129.balance
REF_130(uint256) (->v) := 0(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
VestedTokensReleased(v[i].addr,v[i].balance)

IRs:
REF_131(None) -> v._i
REF_132(None) -> REF_131.addr
REF_133(None) -> v._i
REF_134(None) -> REF_133.balance
Emit VestedTokensReleased(REF_132,REF_134)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_143(uint8) := i(uint8)
i(uint8) = i + 1"];
14->8;
}
// Function: 24999.sol-TEFoods827Token-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = TEFOOD FARM TO FORK FOOD TRACEABILITY SYSTEM LICENSE TOKEN

IRs:
name(string) := TEFOOD FARM TO FORK FOOD TRACEABILITY SYSTEM LICENSE TOKEN(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = TFOOD

IRs:
symbol(string) := TFOOD(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
_totalSupply = 1000000000 * 1000000000000000000

IRs:
TMP_191(uint256) = 1000000000 * 1000000000000000000
_totalSupply(uint256) := TMP_191(uint256)"];
}
// Function: 24999.sol-TEFoods827Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
transferrableTime = 1521712800

IRs:
transferrableTime(uint256) := 1521712800(uint256)"];
}
// Function: 24999.sol-TEFoods827Token-totalSupply()
digraph{
}
// Function: 24999.sol-TEFoods827Token-transfer(address,uint256)
digraph{
}
// Function: 24999.sol-TEFoods827Token-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.transfer(_to,_value)

IRs:
TMP_185(bool) = INTERNAL_CALL, TEFoodsToken.transfer(address,uint256)(_to,_value)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to.call(_data))

IRs:
TMP_186(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['_data']  
TMP_187(None) = SOLIDITY_CALL require(bool)(TMP_186)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 24999.sol-TEFoods827Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 24999.sol-TEFoods827Token-transferFrom(address,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.transferFrom(_from,_to,_value)

IRs:
TMP_188(bool) = INTERNAL_CALL, TEFoodsToken.transferFrom(address,address,uint256)(_from,_to,_value)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to.call(_data))

IRs:
TMP_189(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['_data']  
TMP_190(None) = SOLIDITY_CALL require(bool)(TMP_189)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 24999.sol-TEFoods827Token-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_177 = CONVERT 0 to address
TMP_178(bool) = newOwner != TMP_177
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 24999.sol-TEFoods827Token-vestedBalanceOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
v = vestingMap[vestingPeriod]

IRs:
REF_138(TEFoodsToken.vestedBalance[]) -> vestingMap[vestingPeriod]
v(TEFoodsToken.vestedBalance) := REF_138(TEFoodsToken.vestedBalance[])"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < v.length

IRs:
REF_139(None) -> v.length
TMP_149(bool) = i < REF_139
CONDITION TMP_149"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
v[i].addr == tokenOwner

IRs:
REF_140(None) -> v._i
REF_141(None) -> REF_140.addr
TMP_150(bool) = REF_141 == tokenOwner
CONDITION TMP_150"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
v[i].balance

IRs:
REF_142(None) -> v._i
REF_143(None) -> REF_142.balance
RETURN REF_143"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_151(uint8) := i(uint8)
i(uint8) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
0

IRs:
RETURN 0"];
11[label="Node Type: RETURN 11

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 24999.sol-TEFoodsToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 24999.sol-TEFoodsToken-TEFoodsToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[0x00] = _totalSupply

IRs:
REF_0(uint256) -> balances[0]
REF_0(uint256) (->balances) := _totalSupply(uint256)"];
}
// Function: 24999.sol-TEFoodsToken-allocateTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addr != 0x00)

IRs:
TMP_24(bool) = addr != 0
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(amount > 0)

IRs:
TMP_26(bool) = amount > 0
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[0x00] = balances[0x00].sub(amount)

IRs:
REF_1(uint256) -> balances[0]
REF_2(uint256) -> balances[0]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', 'amount'] 
REF_1(uint256) (->balances) := TMP_28(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[addr] = balances[addr].add(amount)

IRs:
REF_4(uint256) -> balances[addr]
REF_5(uint256) -> balances[addr]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', 'amount'] 
REF_4(uint256) (->balances) := TMP_29(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_circulatingSupply = _circulatingSupply.add(amount)

IRs:
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_circulatingSupply', 'amount'] 
_circulatingSupply(uint256) := TMP_30(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(_vestedSupply.add(_circulatingSupply).add(balances[0x00]) == _totalSupply)

IRs:
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_vestedSupply', '_circulatingSupply'] 
REF_10(uint256) -> balances[0]
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_31', 'REF_10'] 
TMP_33(bool) = TMP_32 == _totalSupply
TMP_34(None) = SOLIDITY_CALL assert(bool)(TMP_33)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 24999.sol-TEFoodsToken-allocateVestedTokens(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addr != 0x00)

IRs:
TMP_36(bool) = addr != 0
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(amount > 0)

IRs:
TMP_38(bool) = amount > 0
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(vestingPeriod > 0)

IRs:
TMP_40(bool) = vestingPeriod > 0
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[0x00] = balances[0x00].sub(amount)

IRs:
REF_11(uint256) -> balances[0]
REF_12(uint256) -> balances[0]
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_12', 'amount'] 
REF_11(uint256) (->balances) := TMP_42(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
vestingMap[vestingPeriod].push(vestedBalance(addr,amount))

IRs:
REF_14(TEFoodsToken.vestedBalance[]) -> vestingMap[vestingPeriod]
TMP_43(TEFoodsToken.vestedBalance) = new vestedBalance(addr,amount)
REF_16 -> LENGTH REF_14
TMP_45(uint256) := REF_16(uint256)
TMP_46(uint256) = TMP_45 + 1
REF_16(uint256) (->vestingMap) := TMP_46(uint256)
REF_17(TEFoodsToken.vestedBalance) -> REF_14[TMP_45]
REF_17(TEFoodsToken.vestedBalance) (->vestingMap) := TMP_43(TEFoodsToken.vestedBalance)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_vestedSupply = _vestedSupply.add(amount)

IRs:
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_vestedSupply', 'amount'] 
_vestedSupply(uint256) := TMP_47(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assert(bool)(_vestedSupply.add(_circulatingSupply).add(balances[0x00]) == _totalSupply)

IRs:
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_vestedSupply', '_circulatingSupply'] 
REF_21(uint256) -> balances[0]
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_48', 'REF_21'] 
TMP_50(bool) = TMP_49 == _totalSupply
TMP_51(None) = SOLIDITY_CALL assert(bool)(TMP_50)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
9->1;
}
// Function: 24999.sol-TEFoodsToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[tokenOwner][spender]

IRs:
REF_60(mapping(address => uint256)) -> allowed[tokenOwner]
REF_61(uint256) -> REF_60[spender]
RETURN REF_61"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 24999.sol-TEFoodsToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(spender != address(this))

IRs:
TMP_84 = CONVERT this to address
TMP_85(bool) = spender != TMP_84
TMP_86(None) = SOLIDITY_CALL require(bool)(TMP_85)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_69(mapping(address => uint256)) -> allowed[msg.sender]
REF_70(uint256) -> REF_69[spender]
REF_70(uint256) (->allowed) := tokens(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender,spender,tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 24999.sol-TEFoodsToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[tokenOwner]

IRs:
REF_53(uint256) -> balances[tokenOwner]
RETURN REF_53"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 24999.sol-TEFoodsToken-enableTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
now.add(86400) < transferrableTime

IRs:
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', '86400'] 
TMP_67(bool) = TMP_66 < transferrableTime
CONDITION TMP_67"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transferrableTime = now.add(86400)

IRs:
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', '86400'] 
transferrableTime(uint256) := TMP_68(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = 0x00

IRs:
owner(address) := 0(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 24999.sol-TEFoodsToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_70(None) = SOLIDITY_CALL revert()()"];
}
// Function: 24999.sol-TEFoodsToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_100(bool) = msg.sender == owner
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 24999.sol-TEFoodsToken-releaseVestedTokens(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= transferrableTime.add(vestingPeriod))

IRs:
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['transferrableTime', 'vestingPeriod'] 
TMP_54(bool) = now >= TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(vestingMap[vestingPeriod].length > 0)

IRs:
REF_23(TEFoodsToken.vestedBalance[]) -> vestingMap[vestingPeriod]
REF_24 -> LENGTH REF_23
TMP_56(bool) = REF_24 > 0
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(vestingMap[vestingPeriod][0].balance > 0)

IRs:
REF_25(TEFoodsToken.vestedBalance[]) -> vestingMap[vestingPeriod]
REF_26(TEFoodsToken.vestedBalance) -> REF_25[0]
REF_27(uint256) -> REF_26.balance
TMP_58(bool) = REF_27 > 0
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
v = vestingMap[vestingPeriod]

IRs:
REF_28(TEFoodsToken.vestedBalance[]) -> vestingMap[vestingPeriod]
v(TEFoodsToken.vestedBalance) := REF_28(TEFoodsToken.vestedBalance[])"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < v.length

IRs:
REF_29(None) -> v.length
TMP_60(bool) = i < REF_29
CONDITION TMP_60"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[v[i].addr] = balances[v[i].addr].add(v[i].balance)

IRs:
REF_30(None) -> v._i
REF_31(None) -> REF_30.addr
REF_32(uint256) -> balances[REF_31]
REF_33(None) -> v._i
REF_34(None) -> REF_33.addr
REF_35(uint256) -> balances[REF_34]
REF_37(None) -> v._i
REF_38(None) -> REF_37.balance
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_35', 'REF_38'] 
REF_32(uint256) (->balances) := TMP_61(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_circulatingSupply = _circulatingSupply.add(v[i].balance)

IRs:
REF_40(None) -> v._i
REF_41(None) -> REF_40.balance
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_circulatingSupply', 'REF_41'] 
_circulatingSupply(uint256) := TMP_62(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_vestedSupply = _vestedSupply.sub(v[i].balance)

IRs:
REF_43(None) -> v._i
REF_44(None) -> REF_43.balance
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_vestedSupply', 'REF_44'] 
_vestedSupply(uint256) := TMP_63(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
v[i].balance = 0

IRs:
REF_45(None) -> v._i
REF_46(uint256) -> REF_45.balance
REF_46(uint256) (->v) := 0(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
VestedTokensReleased(v[i].addr,v[i].balance)

IRs:
REF_47(None) -> v._i
REF_48(None) -> REF_47.addr
REF_49(None) -> v._i
REF_50(None) -> REF_49.balance
Emit VestedTokensReleased(REF_48,REF_50)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_65(uint8) := i(uint8)
i(uint8) = i + 1"];
14->8;
}
// Function: 24999.sol-TEFoodsToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = TEFOOD FARM TO FORK FOOD TRACEABILITY SYSTEM LICENSE TOKEN

IRs:
name(string) := TEFOOD FARM TO FORK FOOD TRACEABILITY SYSTEM LICENSE TOKEN(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = TFOOD

IRs:
symbol(string) := TFOOD(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
_totalSupply = 1000000000 * 1000000000000000000

IRs:
TMP_99(uint256) = 1000000000 * 1000000000000000000
_totalSupply(uint256) := TMP_99(uint256)"];
}
// Function: 24999.sol-TEFoodsToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
transferrableTime = 1521712800

IRs:
transferrableTime(uint256) := 1521712800(uint256)"];
}
// Function: 24999.sol-TEFoodsToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_circulatingSupply

IRs:
RETURN _circulatingSupply"];
}
// Function: 24999.sol-TEFoodsToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= transferrableTime)

IRs:
TMP_74(bool) = now >= transferrableTime
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(this))

IRs:
TMP_76 = CONVERT this to address
TMP_77(bool) = to != TMP_76
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances[msg.sender] >= tokens)

IRs:
REF_62(uint256) -> balances[msg.sender]
TMP_79(bool) = REF_62 >= tokens
TMP_80(None) = SOLIDITY_CALL require(bool)(TMP_79)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(tokens)

IRs:
REF_63(uint256) -> balances[msg.sender]
REF_64(uint256) -> balances[msg.sender]
TMP_81(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_64', 'tokens'] 
REF_63(uint256) (->balances) := TMP_81(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_66(uint256) -> balances[to]
REF_67(uint256) -> balances[to]
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_67', 'tokens'] 
REF_66(uint256) (->balances) := TMP_82(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender,to,tokens)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 24999.sol-TEFoodsToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now >= transferrableTime)

IRs:
TMP_88(bool) = now >= transferrableTime
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(this))

IRs:
TMP_90 = CONVERT this to address
TMP_91(bool) = to != TMP_90
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(allowed[from][msg.sender] >= tokens)

IRs:
REF_71(mapping(address => uint256)) -> allowed[from]
REF_72(uint256) -> REF_71[msg.sender]
TMP_93(bool) = REF_72 >= tokens
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[from] = balances[from].sub(tokens)

IRs:
REF_73(uint256) -> balances[from]
REF_74(uint256) -> balances[from]
TMP_95(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_74', 'tokens'] 
REF_73(uint256) (->balances) := TMP_95(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens)

IRs:
REF_76(mapping(address => uint256)) -> allowed[from]
REF_77(uint256) -> REF_76[msg.sender]
REF_78(mapping(address => uint256)) -> allowed[from]
REF_79(uint256) -> REF_78[msg.sender]
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_79', 'tokens'] 
REF_77(uint256) (->allowed) := TMP_96(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[to] = balances[to].add(tokens)

IRs:
REF_81(uint256) -> balances[to]
REF_82(uint256) -> balances[to]
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_82', 'tokens'] 
REF_81(uint256) (->balances) := TMP_97(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from,to,tokens)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 24999.sol-TEFoodsToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = newOwner != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 24999.sol-TEFoodsToken-vestedBalanceOf(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
v = vestingMap[vestingPeriod]

IRs:
REF_54(TEFoodsToken.vestedBalance[]) -> vestingMap[vestingPeriod]
v(TEFoodsToken.vestedBalance) := REF_54(TEFoodsToken.vestedBalance[])"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < v.length

IRs:
REF_55(None) -> v.length
TMP_71(bool) = i < REF_55
CONDITION TMP_71"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
v[i].addr == tokenOwner

IRs:
REF_56(None) -> v._i
REF_57(None) -> REF_56.addr
TMP_72(bool) = REF_57 == tokenOwner
CONDITION TMP_72"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
v[i].balance

IRs:
REF_58(None) -> v._i
REF_59(None) -> REF_58.balance
RETURN REF_59"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_73(uint8) := i(uint8)
i(uint8) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
0

IRs:
RETURN 0"];
11[label="Node Type: RETURN 11

EXPRESSION:
balance

IRs:
RETURN balance"];
}
}
