digraph G {
// Function: 3.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tkn.sender = _from

IRs:
REF_0(address) -> tkn.sender
REF_0(address) (->tkn) := _from(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tkn.value = _value

IRs:
REF_1(uint256) -> tkn.value
REF_1(uint256) (->tkn) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tkn.data = _data

IRs:
REF_2(bytes) -> tkn.data
REF_2(bytes) (->tkn) := _data(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24)

IRs:
REF_3(None) -> _data[3]
TMP_19 = CONVERT REF_3 to uint32
REF_4(None) -> _data[2]
TMP_20 = CONVERT REF_4 to uint32
TMP_21(uint32) = TMP_20 << 8
TMP_22(uint32) = TMP_19 + TMP_21
REF_5(None) -> _data[1]
TMP_23 = CONVERT REF_5 to uint32
TMP_24(uint32) = TMP_23 << 16
TMP_25(uint32) = TMP_22 + TMP_24
REF_6(None) -> _data[0]
TMP_26 = CONVERT REF_6 to uint32
TMP_27(uint32) = TMP_26 << 24
TMP_28(uint32) = TMP_25 + TMP_27
u(uint32) := TMP_28(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tkn.sig = bytes4(u)

IRs:
REF_7(bytes4) -> tkn.sig
TMP_29 = CONVERT u to bytes4
REF_7(bytes4) (->tkn) := TMP_29(bytes4)"];
}
// Function: 3.sol-ERC223-balanceOf(address)
digraph{
}
// Function: 3.sol-ERC223-decimals()
digraph{
}
// Function: 3.sol-ERC223-name()
digraph{
}
// Function: 3.sol-ERC223-symbol()
digraph{
}
// Function: 3.sol-ERC223-totalSupply()
digraph{
}
// Function: 3.sol-ERC223-transfer(address,uint256)
digraph{
}
// Function: 3.sol-ERC223-transfer(address,uint256,bytes)
digraph{
}
// Function: 3.sol-ERC223-transfer(address,uint256,bytes,string)
digraph{
}
// Function: 3.sol-NIZIGEN-NIZIGEN()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = initialSupply

IRs:
totalSupply(uint256) := initialSupply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_8(uint256) -> balances[msg.sender]
REF_8(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 3.sol-NIZIGEN-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3.sol-NIZIGEN-autoDistribute()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(distributeAmount > 0 && balanceOf(owner) >= distributeAmount && frozenAccount[msg.sender] == false && now > unlockUnixTime[msg.sender])

IRs:
TMP_193(bool) = distributeAmount > 0
TMP_194(uint256) = INTERNAL_CALL, NIZIGEN.balanceOf(address)(owner)
TMP_195(bool) = TMP_194 >= distributeAmount
TMP_196(bool) = TMP_193 && TMP_195
REF_114(bool) -> frozenAccount[msg.sender]
TMP_197(bool) = REF_114 == False
TMP_198(bool) = TMP_196 && TMP_197
REF_115(uint256) -> unlockUnixTime[msg.sender]
TMP_199(bool) = now > REF_115
TMP_200(bool) = TMP_198 && TMP_199
TMP_201(None) = SOLIDITY_CALL require(bool)(TMP_200)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
msg.value > 0

IRs:
TMP_202(bool) = msg.value > 0
CONDITION TMP_202"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner.transfer(msg.value)

IRs:
Transfer dest:owner value:msg.value"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[owner] = SafeMath.sub(balances[owner],distributeAmount)

IRs:
REF_117(uint256) -> balances[owner]
REF_119(uint256) -> balances[owner]
TMP_204(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_119', 'distributeAmount'] 
REF_117(uint256) (->balances) := TMP_204(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[msg.sender] = SafeMath.add(balances[msg.sender],distributeAmount)

IRs:
REF_120(uint256) -> balances[msg.sender]
REF_122(uint256) -> balances[msg.sender]
TMP_205(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_122', 'distributeAmount'] 
REF_120(uint256) (->balances) := TMP_205(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(owner,msg.sender,distributeAmount)

IRs:
Emit Transfer(owner,msg.sender,distributeAmount)"];
}
// Function: 3.sol-NIZIGEN-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_9(uint256) -> balances[_owner]
RETURN REF_9"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 3.sol-NIZIGEN-burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_unitAmount > 0 && balanceOf(_from) >= _unitAmount)

IRs:
TMP_126(bool) = _unitAmount > 0
TMP_127(uint256) = INTERNAL_CALL, NIZIGEN.balanceOf(address)(_from)
TMP_128(bool) = TMP_127 >= _unitAmount
TMP_129(bool) = TMP_126 && TMP_128
TMP_130(None) = SOLIDITY_CALL require(bool)(TMP_129)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_from] = SafeMath.sub(balances[_from],_unitAmount)

IRs:
REF_55(uint256) -> balances[_from]
REF_57(uint256) -> balances[_from]
TMP_131(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_57', '_unitAmount'] 
REF_55(uint256) (->balances) := TMP_131(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = SafeMath.sub(totalSupply,_unitAmount)

IRs:
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_unitAmount'] 
totalSupply(uint256) := TMP_132(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_from,_unitAmount)

IRs:
Emit Burn(_from,_unitAmount)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 3.sol-NIZIGEN-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_214 = UnaryType.BANG mintingFinished 
TMP_215(None) = SOLIDITY_CALL require(bool)(TMP_214)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3.sol-NIZIGEN-collectTokens(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addresses.length > 0 && addresses.length == amounts.length)

IRs:
REF_85 -> LENGTH addresses
TMP_170(bool) = REF_85 > 0
REF_86 -> LENGTH addresses
REF_87 -> LENGTH amounts
TMP_171(bool) = REF_86 == REF_87
TMP_172(bool) = TMP_170 && TMP_171
TMP_173(None) = SOLIDITY_CALL require(bool)(TMP_172)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalAmount = 0

IRs:
totalAmount(uint256) := 0(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->14;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < addresses.length

IRs:
REF_88 -> LENGTH addresses
TMP_174(bool) = i < REF_88
CONDITION TMP_174"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(amounts[i] > 0 && addresses[i] != 0x0 && frozenAccount[addresses[i]] == false && now > unlockUnixTime[addresses[i]])

IRs:
REF_89(uint256) -> amounts[i]
TMP_175(bool) = REF_89 > 0
REF_90(address) -> addresses[i]
TMP_176(bool) = REF_90 != 0
TMP_177(bool) = TMP_175 && TMP_176
REF_91(address) -> addresses[i]
REF_92(bool) -> frozenAccount[REF_91]
TMP_178(bool) = REF_92 == False
TMP_179(bool) = TMP_177 && TMP_178
REF_93(address) -> addresses[i]
REF_94(uint256) -> unlockUnixTime[REF_93]
TMP_180(bool) = now > REF_94
TMP_181(bool) = TMP_179 && TMP_180
TMP_182(None) = SOLIDITY_CALL require(bool)(TMP_181)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
amounts[i] = SafeMath.mul(amounts[i],1e8)

IRs:
REF_95(uint256) -> amounts[i]
REF_97(uint256) -> amounts[i]
TMP_183(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_97', '100000000'] 
REF_95(uint256) (->amounts) := TMP_183(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(balances[addresses[i]] >= amounts[i])

IRs:
REF_98(address) -> addresses[i]
REF_99(uint256) -> balances[REF_98]
REF_100(uint256) -> amounts[i]
TMP_184(bool) = REF_99 >= REF_100
TMP_185(None) = SOLIDITY_CALL require(bool)(TMP_184)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[addresses[i]] = SafeMath.sub(balances[addresses[i]],amounts[i])

IRs:
REF_101(address) -> addresses[i]
REF_102(uint256) -> balances[REF_101]
REF_104(address) -> addresses[i]
REF_105(uint256) -> balances[REF_104]
REF_106(uint256) -> amounts[i]
TMP_186(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_105', 'REF_106'] 
REF_102(uint256) (->balances) := TMP_186(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalAmount = SafeMath.add(totalAmount,amounts[i])

IRs:
REF_108(uint256) -> amounts[i]
TMP_187(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalAmount', 'REF_108'] 
totalAmount(uint256) := TMP_187(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Transfer(addresses[i],msg.sender,amounts[i])

IRs:
REF_109(address) -> addresses[i]
REF_110(uint256) -> amounts[i]
Emit Transfer(REF_109,msg.sender,REF_110)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_189(uint256) := i(uint256)
i(uint256) = i + 1"];
13->6;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balances[msg.sender] = SafeMath.add(balances[msg.sender],totalAmount)

IRs:
REF_111(uint256) -> balances[msg.sender]
REF_113(uint256) -> balances[msg.sender]
TMP_190(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_113', 'totalAmount'] 
REF_111(uint256) (->balances) := TMP_190(uint256)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
16->1;
}
// Function: 3.sol-NIZIGEN-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
decimals

IRs:
RETURN decimals"];
2[label="Node Type: RETURN 2

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 3.sol-NIZIGEN-distributeAirdrop(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(amount > 0 && addresses.length > 0 && frozenAccount[msg.sender] == false && now > unlockUnixTime[msg.sender])

IRs:
TMP_147(bool) = amount > 0
REF_63 -> LENGTH addresses
TMP_148(bool) = REF_63 > 0
TMP_149(bool) = TMP_147 && TMP_148
REF_64(bool) -> frozenAccount[msg.sender]
TMP_150(bool) = REF_64 == False
TMP_151(bool) = TMP_149 && TMP_150
REF_65(uint256) -> unlockUnixTime[msg.sender]
TMP_152(bool) = now > REF_65
TMP_153(bool) = TMP_151 && TMP_152
TMP_154(None) = SOLIDITY_CALL require(bool)(TMP_153)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
amount = SafeMath.mul(amount,1e8)

IRs:
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amount', '100000000'] 
amount(uint256) := TMP_155(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
totalAmount = SafeMath.mul(amount,addresses.length)

IRs:
REF_68 -> LENGTH addresses
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amount', 'REF_68'] 
totalAmount(uint256) := TMP_156(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(balances[msg.sender] >= totalAmount)

IRs:
REF_69(uint256) -> balances[msg.sender]
TMP_157(bool) = REF_69 >= totalAmount
TMP_158(None) = SOLIDITY_CALL require(bool)(TMP_157)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->13;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < addresses.length

IRs:
REF_70 -> LENGTH addresses
TMP_159(bool) = i < REF_70
CONDITION TMP_159"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(addresses[i] != 0x0 && frozenAccount[addresses[i]] == false && now > unlockUnixTime[addresses[i]])

IRs:
REF_71(address) -> addresses[i]
TMP_160(bool) = REF_71 != 0
REF_72(address) -> addresses[i]
REF_73(bool) -> frozenAccount[REF_72]
TMP_161(bool) = REF_73 == False
TMP_162(bool) = TMP_160 && TMP_161
REF_74(address) -> addresses[i]
REF_75(uint256) -> unlockUnixTime[REF_74]
TMP_163(bool) = now > REF_75
TMP_164(bool) = TMP_162 && TMP_163
TMP_165(None) = SOLIDITY_CALL require(bool)(TMP_164)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[addresses[i]] = SafeMath.add(balances[addresses[i]],amount)

IRs:
REF_76(address) -> addresses[i]
REF_77(uint256) -> balances[REF_76]
REF_79(address) -> addresses[i]
REF_80(uint256) -> balances[REF_79]
TMP_166(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_80', 'amount'] 
REF_77(uint256) (->balances) := TMP_166(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Transfer(msg.sender,addresses[i],amount)

IRs:
REF_81(address) -> addresses[i]
Emit Transfer(msg.sender,REF_81,amount)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_168(uint256) := i(uint256)
i(uint256) = i + 1"];
12->8;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
balances[msg.sender] = SafeMath.sub(balances[msg.sender],totalAmount)

IRs:
REF_82(uint256) -> balances[msg.sender]
REF_84(uint256) -> balances[msg.sender]
TMP_169(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_84', 'totalAmount'] 
REF_82(uint256) (->balances) := TMP_169(uint256)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 3.sol-NIZIGEN-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
autoDistribute()

IRs:
INTERNAL_CALL, NIZIGEN.autoDistribute()()"];
}
// Function: 3.sol-NIZIGEN-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, NIZIGEN.canMint()()"];
5->1;
}
// Function: 3.sol-NIZIGEN-freezeAccounts(address[],bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(targets.length > 0)

IRs:
REF_10 -> LENGTH targets
TMP_35(bool) = REF_10 > 0
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < targets.length

IRs:
REF_11 -> LENGTH targets
TMP_37(bool) = i < REF_11
CONDITION TMP_37"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(targets[i] != 0x0)

IRs:
REF_12(address) -> targets[i]
TMP_38(bool) = REF_12 != 0
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
frozenAccount[targets[i]] = isFrozen

IRs:
REF_13(address) -> targets[i]
REF_14(bool) -> frozenAccount[REF_13]
REF_14(bool) (->frozenAccount) := isFrozen(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
FrozenFunds(targets[i],isFrozen)

IRs:
REF_15(address) -> targets[i]
Emit FrozenFunds(REF_15,isFrozen)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_41(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
// Function: 3.sol-NIZIGEN-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_105(bool) = length > 0
RETURN TMP_105"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 3.sol-NIZIGEN-lockupAccounts(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(targets.length > 0 && targets.length == unixTimes.length)

IRs:
REF_16 -> LENGTH targets
TMP_43(bool) = REF_16 > 0
REF_17 -> LENGTH targets
REF_18 -> LENGTH unixTimes
TMP_44(bool) = REF_17 == REF_18
TMP_45(bool) = TMP_43 && TMP_44
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < targets.length

IRs:
REF_19 -> LENGTH targets
TMP_47(bool) = i < REF_19
CONDITION TMP_47"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(unlockUnixTime[targets[i]] < unixTimes[i])

IRs:
REF_20(address) -> targets[i]
REF_21(uint256) -> unlockUnixTime[REF_20]
REF_22(uint256) -> unixTimes[i]
TMP_48(bool) = REF_21 < REF_22
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
unlockUnixTime[targets[i]] = unixTimes[i]

IRs:
REF_23(address) -> targets[i]
REF_24(uint256) -> unlockUnixTime[REF_23]
REF_25(uint256) -> unixTimes[i]
REF_24(uint256) (->unlockUnixTime) := REF_25(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LockedFunds(targets[i],unixTimes[i])

IRs:
REF_26(address) -> targets[i]
REF_27(uint256) -> unixTimes[i]
Emit LockedFunds(REF_26,REF_27)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_51(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
// Function: 3.sol-NIZIGEN-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_unitAmount > 0)

IRs:
TMP_135(bool) = _unitAmount > 0
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = SafeMath.add(totalSupply,_unitAmount)

IRs:
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_unitAmount'] 
totalSupply(uint256) := TMP_137(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = SafeMath.add(balances[_to],_unitAmount)

IRs:
REF_60(uint256) -> balances[_to]
REF_62(uint256) -> balances[_to]
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_62', '_unitAmount'] 
REF_60(uint256) (->balances) := TMP_138(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Mint(_to,_unitAmount)

IRs:
Emit Mint(_to,_unitAmount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),_to,_unitAmount)

IRs:
TMP_140 = CONVERT 0 to address
Emit Transfer(TMP_140,_to,_unitAmount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, NIZIGEN.canMint()()"];
8->1;
}
// Function: 3.sol-NIZIGEN-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name

IRs:
RETURN name"];
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 3.sol-NIZIGEN-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_209(bool) = msg.sender == owner
TMP_210(None) = SOLIDITY_CALL require(bool)(TMP_209)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3.sol-NIZIGEN-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length >= size + 4)

IRs:
REF_123 -> LENGTH msg.data
TMP_211(uint256) = size + 4
TMP_212(bool) = REF_123 >= TMP_211
TMP_213(None) = SOLIDITY_CALL assert(bool)(TMP_212)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3.sol-NIZIGEN-setDistributeAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
distributeAmount = _unitAmount

IRs:
distributeAmount(uint256) := _unitAmount(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 3.sol-NIZIGEN-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = NIZIGEN

IRs:
name(string) := NIZIGEN(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = 2D

IRs:
symbol(string) := 2D(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
initialSupply = 50e9 * 1e8

IRs:
TMP_208(uint256) = 50000000000 * 100000000
initialSupply(uint256) := TMP_208(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
distributeAmount = 0

IRs:
distributeAmount(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 3.sol-NIZIGEN-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol

IRs:
RETURN symbol"];
2[label="Node Type: RETURN 2

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 3.sol-NIZIGEN-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 3.sol-NIZIGEN-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false && now > unlockUnixTime[msg.sender] && now > unlockUnixTime[_to])

IRs:
TMP_92(bool) = _value > 0
REF_42(bool) -> frozenAccount[msg.sender]
TMP_93(bool) = REF_42 == False
TMP_94(bool) = TMP_92 && TMP_93
REF_43(bool) -> frozenAccount[_to]
TMP_95(bool) = REF_43 == False
TMP_96(bool) = TMP_94 && TMP_95
REF_44(uint256) -> unlockUnixTime[msg.sender]
TMP_97(bool) = now > REF_44
TMP_98(bool) = TMP_96 && TMP_97
REF_45(uint256) -> unlockUnixTime[_to]
TMP_99(bool) = now > REF_45
TMP_100(bool) = TMP_98 && TMP_99
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
isContract(_to)

IRs:
TMP_102(bool) = INTERNAL_CALL, NIZIGEN.isContract(address)(_to)
CONDITION TMP_102"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToContract(_to,_value,empty)

IRs:
TMP_103(bool) = INTERNAL_CALL, NIZIGEN.transferToContract(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_103"];
5[label="Node Type: RETURN 5

EXPRESSION:
transferToAddress(_to,_value,empty)

IRs:
TMP_104(bool) = INTERNAL_CALL, NIZIGEN.transferToAddress(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_104"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3.sol-NIZIGEN-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false && now > unlockUnixTime[msg.sender] && now > unlockUnixTime[_to])

IRs:
TMP_79(bool) = _value > 0
REF_38(bool) -> frozenAccount[msg.sender]
TMP_80(bool) = REF_38 == False
TMP_81(bool) = TMP_79 && TMP_80
REF_39(bool) -> frozenAccount[_to]
TMP_82(bool) = REF_39 == False
TMP_83(bool) = TMP_81 && TMP_82
REF_40(uint256) -> unlockUnixTime[msg.sender]
TMP_84(bool) = now > REF_40
TMP_85(bool) = TMP_83 && TMP_84
REF_41(uint256) -> unlockUnixTime[_to]
TMP_86(bool) = now > REF_41
TMP_87(bool) = TMP_85 && TMP_86
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_89(bool) = INTERNAL_CALL, NIZIGEN.isContract(address)(_to)
CONDITION TMP_89"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_90(bool) = INTERNAL_CALL, NIZIGEN.transferToContract(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_90"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_91(bool) = INTERNAL_CALL, NIZIGEN.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_91"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3.sol-NIZIGEN-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false && now > unlockUnixTime[msg.sender] && now > unlockUnixTime[_to])

IRs:
TMP_53(bool) = _value > 0
REF_28(bool) -> frozenAccount[msg.sender]
TMP_54(bool) = REF_28 == False
TMP_55(bool) = TMP_53 && TMP_54
REF_29(bool) -> frozenAccount[_to]
TMP_56(bool) = REF_29 == False
TMP_57(bool) = TMP_55 && TMP_56
REF_30(uint256) -> unlockUnixTime[msg.sender]
TMP_58(bool) = now > REF_30
TMP_59(bool) = TMP_57 && TMP_58
REF_31(uint256) -> unlockUnixTime[_to]
TMP_60(bool) = now > REF_31
TMP_61(bool) = TMP_59 && TMP_60
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_63(bool) = INTERNAL_CALL, NIZIGEN.isContract(address)(_to)
CONDITION TMP_63"];
2->3[label="True"];
2->12[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_64(uint256) = INTERNAL_CALL, NIZIGEN.balanceOf(address)(msg.sender)
TMP_65(bool) = TMP_64 < _value
CONDITION TMP_65"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_66(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender),_value)

IRs:
REF_32(uint256) -> balances[msg.sender]
TMP_67(uint256) = INTERNAL_CALL, NIZIGEN.balanceOf(address)(msg.sender)
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_67', '_value'] 
REF_32(uint256) (->balances) := TMP_68(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] = SafeMath.add(balanceOf(_to),_value)

IRs:
REF_34(uint256) -> balances[_to]
TMP_69(uint256) = INTERNAL_CALL, NIZIGEN.balanceOf(address)(_to)
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_69', '_value'] 
REF_34(uint256) (->balances) := TMP_70(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(_to.call.value(0)(bytes4(keccak256()(_custom_fallback)),msg.sender,_value,_data))

IRs:
TMP_72(bytes32) = SOLIDITY_CALL keccak256()(_custom_fallback)
TMP_73 = CONVERT TMP_72 to bytes4
TMP_74(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['TMP_73', 'msg.sender', '_value', '_data'] value:0 
TMP_75(None) = SOLIDITY_CALL assert(bool)(TMP_74)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: RETURN 12

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_78(bool) = INTERNAL_CALL, NIZIGEN.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_78"];
14[label="Node Type: RETURN 14

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3.sol-NIZIGEN-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_30 = CONVERT 0 to address
TMP_31(bool) = newOwner != TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 3.sol-NIZIGEN-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_106(uint256) = INTERNAL_CALL, NIZIGEN.balanceOf(address)(msg.sender)
TMP_107(bool) = TMP_106 < _value
CONDITION TMP_107"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_108(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender),_value)

IRs:
REF_46(uint256) -> balances[msg.sender]
TMP_109(uint256) = INTERNAL_CALL, NIZIGEN.balanceOf(address)(msg.sender)
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_109', '_value'] 
REF_46(uint256) (->balances) := TMP_110(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = SafeMath.add(balanceOf(_to),_value)

IRs:
REF_48(uint256) -> balances[_to]
TMP_111(uint256) = INTERNAL_CALL, NIZIGEN.balanceOf(address)(_to)
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_111', '_value'] 
REF_48(uint256) (->balances) := TMP_112(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3.sol-NIZIGEN-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_115(uint256) = INTERNAL_CALL, NIZIGEN.balanceOf(address)(msg.sender)
TMP_116(bool) = TMP_115 < _value
CONDITION TMP_116"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_117(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender),_value)

IRs:
REF_50(uint256) -> balances[msg.sender]
TMP_118(uint256) = INTERNAL_CALL, NIZIGEN.balanceOf(address)(msg.sender)
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_118', '_value'] 
REF_50(uint256) (->balances) := TMP_119(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = SafeMath.add(balanceOf(_to),_value)

IRs:
REF_52(uint256) -> balances[_to]
TMP_120(uint256) = INTERNAL_CALL, NIZIGEN.balanceOf(address)(_to)
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_120', '_value'] 
REF_52(uint256) (->balances) := TMP_121(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_122 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_122(ContractReceiver)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 3.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 3.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_17(bool) = msg.sender == owner
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 3.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 3.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 3.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
