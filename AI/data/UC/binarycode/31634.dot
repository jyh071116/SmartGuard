digraph G {
// Function: 31634.sol-CappedCrowdsale-CappedCrowdsale(uint256,uint256,uint256,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_cap > 0)

IRs:
TMP_54(bool) = _cap > 0
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cap = _cap

IRs:
cap(uint256) := _cap(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Crowdsale(_startTime,_endTime,_rate,_wallet)

IRs:
INTERNAL_CALL, Crowdsale.Crowdsale(uint256,uint256,uint256,address)(_startTime,_endTime,_rate,_wallet)"];
3->1;
}
// Function: 31634.sol-CappedCrowdsale-Crowdsale(uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_40(bool) = _startTime >= now
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_42(bool) = _endTime >= _startTime
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_44(bool) = _rate > 0
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != 0x0)

IRs:
TMP_46(bool) = _wallet != 0
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
wallet = 0x00B95A5D838F02b12B75BE562aBF7Ee0100410922b

IRs:
wallet(address) := 1058178505879953369832457404668328731493585162795(uint256)"];
}
// Function: 31634.sol-CappedCrowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
capReached = weiRaised >= cap

IRs:
TMP_61(bool) = weiRaised >= cap
capReached(bool) := TMP_61(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.hasEnded() || capReached

IRs:
TMP_62(bool) = INTERNAL_CALL, Crowdsale.hasEnded()()
TMP_63(bool) = TMP_62 || capReached
RETURN TMP_63"];
}
// Function: 31634.sol-CappedCrowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinCap = weiRaised.add(msg.value) <= cap

IRs:
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'msg.value'] 
TMP_58(bool) = TMP_57 <= cap
withinCap(bool) := TMP_58(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.validPurchase() && withinCap

IRs:
TMP_59(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_60(bool) = TMP_59 && withinCap
RETURN TMP_60"];
}
// Function: 31634.sol-Crowdsale-Crowdsale(uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_26(bool) = _startTime >= now
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_28(bool) = _endTime >= _startTime
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_30(bool) = _rate > 0
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != 0x0)

IRs:
TMP_32(bool) = _wallet != 0
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
wallet = 0x00B95A5D838F02b12B75BE562aBF7Ee0100410922b

IRs:
wallet(address) := 1058178505879953369832457404668328731493585162795(uint256)"];
}
// Function: 31634.sol-Crowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endTime

IRs:
TMP_39(bool) = now > endTime
RETURN TMP_39"];
}
// Function: 31634.sol-Crowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinPeriod = now >= startTime && now <= endTime

IRs:
TMP_34(bool) = now >= startTime
TMP_35(bool) = now <= endTime
TMP_36(bool) = TMP_34 && TMP_35
withinPeriod(bool) := TMP_36(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_37(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_37(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
withinPeriod && nonZeroPurchase

IRs:
TMP_38(bool) = withinPeriod && nonZeroPurchase
RETURN TMP_38"];
}
// Function: 31634.sol-HeartBoutPreICO-CappedCrowdsale(uint256,uint256,uint256,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_cap > 0)

IRs:
TMP_72(bool) = _cap > 0
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cap = _cap

IRs:
cap(uint256) := _cap(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Crowdsale(_startTime,_endTime,_rate,_wallet)

IRs:
INTERNAL_CALL, Crowdsale.Crowdsale(uint256,uint256,uint256,address)(_startTime,_endTime,_rate,_wallet)"];
3->1;
}
// Function: 31634.sol-HeartBoutPreICO-Crowdsale(uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_82(bool) = _startTime >= now
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_84(bool) = _endTime >= _startTime
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_86(bool) = _rate > 0
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != 0x0)

IRs:
TMP_88(bool) = _wallet != 0
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
wallet = 0x00B95A5D838F02b12B75BE562aBF7Ee0100410922b

IRs:
wallet(address) := 1058178505879953369832457404668328731493585162795(uint256)"];
}
// Function: 31634.sol-HeartBoutPreICO-HeartBoutPreICO(uint256,uint256,uint256,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = 0x00305cB299cc82a8A74f8da00AFA6453741d9a15Ed

IRs:
token(address) := 276098783879748037151969650290273570187030173165(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
minCount = _minCount

IRs:
minCount(uint256) := _minCount(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
CappedCrowdsale(_startTime,_endTime,_rate,_wallet,_cap)

IRs:
INTERNAL_CALL, CappedCrowdsale.CappedCrowdsale(uint256,uint256,uint256,address,uint256)(_startTime,_endTime,_rate,_wallet,_cap)"];
3->1;
}
// Function: 31634.sol-HeartBoutPreICO-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 31634.sol-HeartBoutPreICO-backToOldOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(oldOwner != address(0))

IRs:
TMP_68 = CONVERT 0 to address
TMP_69(bool) = oldOwner != TMP_68
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = oldOwner

IRs:
owner(address) := oldOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOldOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOldOwner()()"];
3->1;
}
// Function: 31634.sol-HeartBoutPreICO-buyTokens(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! stringEqual(_account,))

IRs:
TMP_97(bool) = INTERNAL_CALL, HeartBoutPreICO.stringEqual(string,string)(_account,)
TMP_98 = UnaryType.BANG TMP_97 
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_100(bool) = INTERNAL_CALL, CappedCrowdsale.validPurchase()()
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value >= minCount)

IRs:
TMP_102(bool) = msg.value >= minCount
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! stringEqual(bindAddressAccounts[msg.sender],)

IRs:
REF_2(string) -> bindAddressAccounts[msg.sender]
TMP_104(bool) = INTERNAL_CALL, HeartBoutPreICO.stringEqual(string,string)(REF_2,)
TMP_105 = UnaryType.BANG TMP_104 
CONDITION TMP_105"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(stringEqual(bindAddressAccounts[msg.sender],_account))

IRs:
REF_3(string) -> bindAddressAccounts[msg.sender]
TMP_106(bool) = INTERNAL_CALL, HeartBoutPreICO.stringEqual(string,string)(REF_3,_account)
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
tokens = weiAmount.mul(rate)

IRs:
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'rate'] 
tokens(uint256) := TMP_108(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(token.call(bytes4(keccak256()(mint(address,uint256))),msg.sender,tokens))

IRs:
TMP_109(bytes32) = SOLIDITY_CALL keccak256()(mint(address,uint256))
TMP_110 = CONVERT TMP_109 to bytes4
TMP_111(bool) = LOW_LEVEL_CALL, dest:token, function:call, arguments:['TMP_110', 'msg.sender', 'tokens']  
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
bindAccountsAddress[_account] = msg.sender

IRs:
REF_6(address) -> bindAccountsAddress[_account]
REF_6(address) (->bindAccountsAddress) := msg.sender(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
bindAddressAccounts[msg.sender] = _account

IRs:
REF_7(string) -> bindAddressAccounts[msg.sender]
REF_7(string) (->bindAddressAccounts) := _account(string)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
accounts.push(_account)

IRs:
REF_9 -> LENGTH accounts
TMP_114(uint256) := REF_9(uint256)
TMP_115(uint256) = TMP_114 + 1
REF_9(uint256) (->accounts) := TMP_115(uint256)
REF_10(string) -> accounts[TMP_114]
REF_10(string) (->accounts) := _account(string)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_116(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, HeartBoutPreICO.forwardFunds()()"];
}
// Function: 31634.sol-HeartBoutPreICO-changeWallet(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 31634.sol-HeartBoutPreICO-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 31634.sol-HeartBoutPreICO-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(msg.value)

IRs:
Transfer dest:wallet value:msg.value"];
}
// Function: 31634.sol-HeartBoutPreICO-getBindAccountAddress(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
bindAccountsAddress[_account]

IRs:
REF_16(address) -> bindAccountsAddress[_account]
RETURN REF_16"];
}
// Function: 31634.sol-HeartBoutPreICO-getBindAddressAccount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
bindAddressAccounts[_accountAddress]

IRs:
REF_17(string) -> bindAddressAccounts[_accountAddress]
RETURN REF_17"];
}
// Function: 31634.sol-HeartBoutPreICO-getEachBindAddressAccount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < accounts.length

IRs:
REF_12 -> LENGTH accounts
TMP_118(bool) = i < REF_12
CONDITION TMP_118"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
GetBindTokensAccountEvent(bindAccountsAddress[accounts[i]],accounts[i])

IRs:
REF_13(string) -> accounts[i]
REF_14(address) -> bindAccountsAddress[REF_13]
REF_15(string) -> accounts[i]
Emit GetBindTokensAccountEvent(REF_14,REF_15)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_120(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->3;
}
// Function: 31634.sol-HeartBoutPreICO-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endTime

IRs:
TMP_95(bool) = now > endTime
RETURN TMP_95"];
}
// Function: 31634.sol-HeartBoutPreICO-onlyOldOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == oldOwner || msg.sender == owner)

IRs:
TMP_131(bool) = msg.sender == oldOwner
TMP_132(bool) = msg.sender == owner
TMP_133(bool) = TMP_131 || TMP_132
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31634.sol-HeartBoutPreICO-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_129(bool) = msg.sender == owner
TMP_130(None) = SOLIDITY_CALL require(bool)(TMP_129)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31634.sol-HeartBoutPreICO-removeContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(wallet)

IRs:
TMP_127(None) = SOLIDITY_CALL selfdestruct(address)(wallet)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 31634.sol-HeartBoutPreICO-stringEqual(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256()(_a) == keccak256()(_b)

IRs:
TMP_123(bytes32) = SOLIDITY_CALL keccak256()(_a)
TMP_124(bytes32) = SOLIDITY_CALL keccak256()(_b)
TMP_125(bool) = TMP_123 == TMP_124
RETURN TMP_125"];
}
// Function: 31634.sol-HeartBoutPreICO-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_64 = CONVERT 0 to address
TMP_65(bool) = newOwner != TMP_64
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oldOwner = owner

IRs:
oldOwner(address) := owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 31634.sol-HeartBoutPreICO-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinPeriod = now >= startTime && now <= endTime

IRs:
TMP_90(bool) = now >= startTime
TMP_91(bool) = now <= endTime
TMP_92(bool) = TMP_90 && TMP_91
withinPeriod(bool) := TMP_92(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_93(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_93(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
withinPeriod && nonZeroPurchase

IRs:
TMP_94(bool) = withinPeriod && nonZeroPurchase
RETURN TMP_94"];
}
// Function: 31634.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 31634.sol-Ownable-backToOldOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(oldOwner != address(0))

IRs:
TMP_16 = CONVERT 0 to address
TMP_17(bool) = oldOwner != TMP_16
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = oldOwner

IRs:
owner(address) := oldOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOldOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOldOwner()()"];
3->1;
}
// Function: 31634.sol-Ownable-onlyOldOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == oldOwner || msg.sender == owner)

IRs:
TMP_22(bool) = msg.sender == oldOwner
TMP_23(bool) = msg.sender == owner
TMP_24(bool) = TMP_22 || TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31634.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_20(bool) = msg.sender == owner
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31634.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = newOwner != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oldOwner = owner

IRs:
oldOwner(address) := owner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 31634.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 31634.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 31634.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
