digraph G {
// Function: 31857.sol-DSAuth-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 31857.sol-DSAuth-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_19 = UnaryType.BANG x 
CONDITION TMP_19"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 31857.sol-DSAuth-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_20(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31857.sol-DSAuth-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_13 = CONVERT this to address
TMP_14(bool) = src == TMP_13
CONDITION TMP_14"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_15(bool) = src == owner
CONDITION TMP_15"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_16 = CONVERT 0 to DSAuthority
TMP_17(bool) = authority == TMP_16
CONDITION TMP_17"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_18(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_18"];
}
// Function: 31857.sol-DSAuth-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 31857.sol-DSAuth-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 31857.sol-DSAuthority-canCall(address,address,bytes4)
digraph{
}
// Function: 31857.sol-DSExec-exec(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
exec(t,c,0)

IRs:
INTERNAL_CALL, DSExec.exec(address,bytes,uint256)(t,c,0)"];
}
// Function: 31857.sol-DSExec-exec(address,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! tryExec(target,calldata,value)

IRs:
TMP_2(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(target,calldata,value)
TMP_3 = UnaryType.BANG TMP_2 
CONDITION TMP_3"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 31857.sol-DSExec-exec(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
exec(t,c,v)

IRs:
INTERNAL_CALL, DSExec.exec(address,bytes,uint256)(t,c,v)"];
}
// Function: 31857.sol-DSExec-tryExec(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tryExec(t,c,0)

IRs:
TMP_6(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(t,c,0)
RETURN TMP_6"];
}
// Function: 31857.sol-DSExec-tryExec(address,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
target.call.value(value)(calldata)

IRs:
TMP_1(bool) = LOW_LEVEL_CALL, dest:target, function:call, arguments:['calldata'] value:value 
RETURN TMP_1"];
2[label="Node Type: RETURN 2

EXPRESSION:
call_ret

IRs:
RETURN call_ret"];
}
// Function: 31857.sol-DSExec-tryExec(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tryExec(t,c,v)

IRs:
TMP_7(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(t,c,v)
RETURN TMP_7"];
}
// Function: 31857.sol-DSMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_23(uint256) = x + y
z(uint256) := TMP_23(uint256)
TMP_24(bool) = z >= x
TMP_25(None) = SOLIDITY_CALL assert(bool)(TMP_24)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = uint128(x)) == x)

IRs:
TMP_94 = CONVERT x to uint128
z(uint128) := TMP_94(uint128)
TMP_95(bool) = z == x
TMP_96(None) = SOLIDITY_CALL assert(bool)(TMP_95)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_35(uint256) = x / y
z(uint256) := TMP_35(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_38(uint128) = x + y
z(uint128) := TMP_38(uint128)
TMP_39(bool) = z >= x
TMP_40(None) = SOLIDITY_CALL assert(bool)(TMP_39)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_50(uint128) = x / y
z(uint128) := TMP_50(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_52(bool) = x >= y
CONDITION TMP_52"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_51(bool) = x <= y
CONDITION TMP_51"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_44(uint128) = x * y
z(uint128) := TMP_44(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_45(bool) = x == 0
TMP_46(uint128) = z / x
TMP_47(bool) = TMP_46 == y
TMP_48(bool) = TMP_45 || TMP_47
TMP_49(None) = SOLIDITY_CALL assert(bool)(TMP_48)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_41(uint128) = x - y
z(uint128) := TMP_41(uint128)
TMP_42(bool) = z <= x
TMP_43(None) = SOLIDITY_CALL assert(bool)(TMP_42)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_54(bool) = x >= y
CONDITION TMP_54"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_53(bool) = x <= y
CONDITION TMP_53"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_37(bool) = x >= y
CONDITION TMP_37"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_36(bool) = x <= y
CONDITION TMP_36"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_29(uint256) = x * y
z(uint256) := TMP_29(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_30(bool) = x == 0
TMP_31(uint256) = z / x
TMP_32(bool) = TMP_31 == y
TMP_33(bool) = TMP_30 || TMP_32
TMP_34(None) = SOLIDITY_CALL assert(bool)(TMP_33)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_71(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_71"];
}
// Function: 31857.sol-DSMath-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_79 = CONVERT x to uint256
TMP_80(uint256) = TMP_79 * RAY
TMP_81(uint128) = y / 2
TMP_82(uint256) = TMP_80 + TMP_81
TMP_83(uint256) = TMP_82 / y
TMP_84(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_83)
z(uint128) := TMP_84(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_93(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_93"];
}
// Function: 31857.sol-DSMath-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_92(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_92"];
}
// Function: 31857.sol-DSMath-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_73 = CONVERT x to uint256
TMP_74(uint256) = TMP_73 * y
TMP_75(uint128) = RAY / 2
TMP_76(uint256) = TMP_74 + TMP_75
TMP_77(uint256) = TMP_76 / RAY
TMP_78(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_77)
z(uint128) := TMP_78(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_85(bool) = n != 0
CONDITION TMP_85"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_86(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_86(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_87(uint64) = n % 2
TMP_88(bool) = TMP_87 != 0
CONDITION TMP_88"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_89(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_89(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_90(uint64) = n % 2
TMP_91(bool) = TMP_90 != 0
CONDITION TMP_91"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_72(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_72"];
}
// Function: 31857.sol-DSMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_97(uint256) = 10 ** 18
WAD(uint128) := TMP_97(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_98(uint256) = 10 ** 27
RAY(uint128) := TMP_98(uint256)"];
}
// Function: 31857.sol-DSMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_26(uint256) = x - y
z(uint256) := TMP_26(uint256)
TMP_27(bool) = z <= x
TMP_28(None) = SOLIDITY_CALL assert(bool)(TMP_27)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_55(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_55"];
}
// Function: 31857.sol-DSMath-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_63 = CONVERT x to uint256
TMP_64(uint256) = TMP_63 * WAD
TMP_65(uint128) = y / 2
TMP_66(uint256) = TMP_64 + TMP_65
TMP_67(uint256) = TMP_66 / y
TMP_68(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_67)
z(uint128) := TMP_68(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_70(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_70"];
}
// Function: 31857.sol-DSMath-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_69(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_69"];
}
// Function: 31857.sol-DSMath-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_57 = CONVERT x to uint256
TMP_58(uint256) = TMP_57 * y
TMP_59(uint128) = WAD / 2
TMP_60(uint256) = TMP_58 + TMP_59
TMP_61(uint256) = TMP_60 / WAD
TMP_62(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_61)
z(uint128) := TMP_62(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSMath-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_56(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_56"];
}
// Function: 31857.sol-DSNote-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 31857.sol-DSStop-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 31857.sol-DSStop-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_200 = UnaryType.BANG x 
CONDITION TMP_200"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 31857.sol-DSStop-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_206(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_206)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31857.sol-DSStop-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_194 = CONVERT this to address
TMP_195(bool) = src == TMP_194
CONDITION TMP_195"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_196(bool) = src == owner
CONDITION TMP_196"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_197 = CONVERT 0 to DSAuthority
TMP_198(bool) = authority == TMP_197
CONDITION TMP_198"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_199(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_199"];
}
// Function: 31857.sol-DSStop-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 31857.sol-DSStop-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 31857.sol-DSStop-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 31857.sol-DSStop-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 31857.sol-DSStop-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 31857.sol-DSStop-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(! stopped)

IRs:
TMP_208 = UnaryType.BANG stopped 
INTERNAL_CALL, DSAuth.assert(bool)(TMP_208)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31857.sol-DSToken-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 31857.sol-DSToken-DSToken(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = symbol_

IRs:
symbol(bytes32) := symbol_(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
generator = msg.sender

IRs:
generator(address) := msg.sender(address)"];
}
// Function: 31857.sol-DSToken-DSTokenBase(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = supply

IRs:
REF_27(uint256) -> _balances[msg.sender]
REF_27(uint256) (->_balances) := supply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = supply

IRs:
_supply(uint256) := supply(uint256)"];
}
// Function: 31857.sol-DSToken-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_240(uint256) = x + y
z(uint256) := TMP_240(uint256)
TMP_241(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_241)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-allowance(address,address)
digraph{
}
// Function: 31857.sol-DSToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.approve(guy,wad)

IRs:
TMP_320(bool) = INTERNAL_CALL, DSTokenBase.approve(address,uint256)(guy,wad)
RETURN TMP_320"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 31857.sol-DSToken-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_225 = UnaryType.BANG x 
CONDITION TMP_225"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 31857.sol-DSToken-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_344(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_344)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31857.sol-DSToken-balanceOf(address)
digraph{
}
// Function: 31857.sol-DSToken-burn(uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = sub(_balances[msg.sender],wad)

IRs:
REF_51(uint256) -> _balances[msg.sender]
REF_52(uint256) -> _balances[msg.sender]
TMP_330(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_52,wad)
REF_51(uint256) (->_balances) := TMP_330(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = sub(_supply,wad)

IRs:
TMP_331(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(_supply,wad)
_supply(uint256) := TMP_331(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
5->1;
}
// Function: 31857.sol-DSToken-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = uint128(x)) == x)

IRs:
TMP_311 = CONVERT x to uint128
z(uint128) := TMP_311(uint128)
TMP_312(bool) = z == x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_312)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_252(uint256) = x / y
z(uint256) := TMP_252(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-generatorTransfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(dst,wad)

IRs:
TMP_335(bool) = INTERNAL_CALL, DSTokenBase.transfer(address,uint256)(dst,wad)
RETURN TMP_335"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyGenerator()

IRs:
MODIFIER_CALL, DSToken.onlyGenerator()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 31857.sol-DSToken-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_255(uint128) = x + y
z(uint128) := TMP_255(uint128)
TMP_256(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_267(uint128) = x / y
z(uint128) := TMP_267(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_269(bool) = x >= y
CONDITION TMP_269"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_268(bool) = x <= y
CONDITION TMP_268"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_261(uint128) = x * y
z(uint128) := TMP_261(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_262(bool) = x == 0
TMP_263(uint128) = z / x
TMP_264(bool) = TMP_263 == y
TMP_265(bool) = TMP_262 || TMP_264
INTERNAL_CALL, DSAuth.assert(bool)(TMP_265)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_258(uint128) = x - y
z(uint128) := TMP_258(uint128)
TMP_259(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_259)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_271(bool) = x >= y
CONDITION TMP_271"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_270(bool) = x <= y
CONDITION TMP_270"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_219 = CONVERT this to address
TMP_220(bool) = src == TMP_219
CONDITION TMP_220"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_221(bool) = src == owner
CONDITION TMP_221"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_222 = CONVERT 0 to DSAuthority
TMP_223(bool) = authority == TMP_222
CONDITION TMP_223"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_224(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_224"];
}
// Function: 31857.sol-DSToken-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_254(bool) = x >= y
CONDITION TMP_254"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_253(bool) = x <= y
CONDITION TMP_253"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-mint(uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = add(_balances[msg.sender],wad)

IRs:
REF_49(uint256) -> _balances[msg.sender]
REF_50(uint256) -> _balances[msg.sender]
TMP_325(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_50,wad)
REF_49(uint256) (->_balances) := TMP_325(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = add(_supply,wad)

IRs:
TMP_326(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(_supply,wad)
_supply(uint256) := TMP_326(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
5->1;
}
// Function: 31857.sol-DSToken-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_246(uint256) = x * y
z(uint256) := TMP_246(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_247(bool) = x == 0
TMP_248(uint256) = z / x
TMP_249(bool) = TMP_248 == y
TMP_250(bool) = TMP_247 || TMP_249
INTERNAL_CALL, DSAuth.assert(bool)(TMP_250)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 31857.sol-DSToken-onlyGenerator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != generator

IRs:
TMP_346(bool) = msg.sender != generator
CONDITION TMP_346"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 31857.sol-DSToken-pull(address,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transferFrom(src,msg.sender,wad)

IRs:
TMP_324(bool) = INTERNAL_CALL, DSToken.transferFrom(address,address,uint256)(src,msg.sender,wad)
RETURN TMP_324"];
}
// Function: 31857.sol-DSToken-push(address,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transfer(dst,wad)

IRs:
TMP_323(bool) = INTERNAL_CALL, DSToken.transfer(address,uint256)(dst,wad)
RETURN TMP_323"];
}
// Function: 31857.sol-DSToken-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_288(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_288"];
}
// Function: 31857.sol-DSToken-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_296 = CONVERT x to uint256
TMP_297(uint256) = TMP_296 * RAY
TMP_298(uint128) = y / 2
TMP_299(uint256) = TMP_297 + TMP_298
TMP_300(uint256) = TMP_299 / y
TMP_301(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_300)
z(uint128) := TMP_301(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_310(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_310"];
}
// Function: 31857.sol-DSToken-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_309(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_309"];
}
// Function: 31857.sol-DSToken-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_290 = CONVERT x to uint256
TMP_291(uint256) = TMP_290 * y
TMP_292(uint128) = RAY / 2
TMP_293(uint256) = TMP_291 + TMP_292
TMP_294(uint256) = TMP_293 / RAY
TMP_295(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_294)
z(uint128) := TMP_295(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_302(bool) = n != 0
CONDITION TMP_302"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_303(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_303(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_304(uint64) = n % 2
TMP_305(bool) = TMP_304 != 0
CONDITION TMP_305"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_306(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_306(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_307(uint64) = n % 2
TMP_308(bool) = TMP_307 != 0
CONDITION TMP_308"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_289(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_289"];
}
// Function: 31857.sol-DSToken-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 31857.sol-DSToken-setName(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = name_

IRs:
name(bytes32) := name_(bytes32)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->1;
}
// Function: 31857.sol-DSToken-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 31857.sol-DSToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_339(uint256) = 10 ** 18
WAD(uint128) := TMP_339(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_340(uint256) = 10 ** 27
RAY(uint128) := TMP_340(uint256)"];
}
// Function: 31857.sol-DSToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = 

IRs:
name(bytes32) := (string)"];
}
// Function: 31857.sol-DSToken-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 31857.sol-DSToken-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 31857.sol-DSToken-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(! stopped)

IRs:
TMP_341 = UnaryType.BANG stopped 
INTERNAL_CALL, DSAuth.assert(bool)(TMP_341)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31857.sol-DSToken-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_243(uint256) = x - y
z(uint256) := TMP_243(uint256)
TMP_244(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_244)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-totalSupply()
digraph{
}
// Function: 31857.sol-DSToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(dst,wad)

IRs:
TMP_314(bool) = INTERNAL_CALL, DSTokenBase.transfer(address,uint256)(dst,wad)
RETURN TMP_314"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 31857.sol-DSToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(src,dst,wad)

IRs:
TMP_317(bool) = INTERNAL_CALL, DSTokenBase.transferFrom(address,address,uint256)(src,dst,wad)
RETURN TMP_317"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 31857.sol-DSToken-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_272(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_272"];
}
// Function: 31857.sol-DSToken-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_280 = CONVERT x to uint256
TMP_281(uint256) = TMP_280 * WAD
TMP_282(uint128) = y / 2
TMP_283(uint256) = TMP_281 + TMP_282
TMP_284(uint256) = TMP_283 / y
TMP_285(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_284)
z(uint128) := TMP_285(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_287(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_287"];
}
// Function: 31857.sol-DSToken-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_286(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_286"];
}
// Function: 31857.sol-DSToken-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_274 = CONVERT x to uint256
TMP_275(uint256) = TMP_274 * y
TMP_276(uint128) = WAD / 2
TMP_277(uint256) = TMP_275 + TMP_276
TMP_278(uint256) = TMP_277 / WAD
TMP_279(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_278)
z(uint128) := TMP_279(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSToken-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_273(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_273"];
}
// Function: 31857.sol-DSTokenBase-DSTokenBase(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = supply

IRs:
REF_3(uint256) -> _balances[msg.sender]
REF_3(uint256) (->_balances) := supply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = supply

IRs:
_supply(uint256) := supply(uint256)"];
}
// Function: 31857.sol-DSTokenBase-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_99(uint256) = x + y
z(uint256) := TMP_99(uint256)
TMP_100(bool) = z >= x
TMP_101(None) = SOLIDITY_CALL assert(bool)(TMP_100)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_approvals[src][guy]

IRs:
REF_5(mapping(address => uint256)) -> _approvals[src]
REF_6(uint256) -> REF_5[guy]
RETURN REF_6"];
}
// Function: 31857.sol-DSTokenBase-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_approvals[msg.sender][guy] = wad

IRs:
REF_23(mapping(address => uint256)) -> _approvals[msg.sender]
REF_24(uint256) -> REF_23[guy]
REF_24(uint256) (->_approvals) := wad(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,guy,wad)

IRs:
Emit Approval(msg.sender,guy,wad)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 31857.sol-DSTokenBase-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_balances[src]

IRs:
REF_4(uint256) -> _balances[src]
RETURN REF_4"];
}
// Function: 31857.sol-DSTokenBase-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = uint128(x)) == x)

IRs:
TMP_170 = CONVERT x to uint128
z(uint128) := TMP_170(uint128)
TMP_171(bool) = z == x
TMP_172(None) = SOLIDITY_CALL assert(bool)(TMP_171)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_111(uint256) = x / y
z(uint256) := TMP_111(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_114(uint128) = x + y
z(uint128) := TMP_114(uint128)
TMP_115(bool) = z >= x
TMP_116(None) = SOLIDITY_CALL assert(bool)(TMP_115)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_126(uint128) = x / y
z(uint128) := TMP_126(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_128(bool) = x >= y
CONDITION TMP_128"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_127(bool) = x <= y
CONDITION TMP_127"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_120(uint128) = x * y
z(uint128) := TMP_120(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_121(bool) = x == 0
TMP_122(uint128) = z / x
TMP_123(bool) = TMP_122 == y
TMP_124(bool) = TMP_121 || TMP_123
TMP_125(None) = SOLIDITY_CALL assert(bool)(TMP_124)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_117(uint128) = x - y
z(uint128) := TMP_117(uint128)
TMP_118(bool) = z <= x
TMP_119(None) = SOLIDITY_CALL assert(bool)(TMP_118)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_130(bool) = x >= y
CONDITION TMP_130"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_129(bool) = x <= y
CONDITION TMP_129"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_113(bool) = x >= y
CONDITION TMP_113"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_112(bool) = x <= y
CONDITION TMP_112"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_105(uint256) = x * y
z(uint256) := TMP_105(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_106(bool) = x == 0
TMP_107(uint256) = z / x
TMP_108(bool) = TMP_107 == y
TMP_109(bool) = TMP_106 || TMP_108
TMP_110(None) = SOLIDITY_CALL assert(bool)(TMP_109)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_147(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_147"];
}
// Function: 31857.sol-DSTokenBase-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_155 = CONVERT x to uint256
TMP_156(uint256) = TMP_155 * RAY
TMP_157(uint128) = y / 2
TMP_158(uint256) = TMP_156 + TMP_157
TMP_159(uint256) = TMP_158 / y
TMP_160(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_159)
z(uint128) := TMP_160(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_169(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_169"];
}
// Function: 31857.sol-DSTokenBase-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_168(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_168"];
}
// Function: 31857.sol-DSTokenBase-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_149 = CONVERT x to uint256
TMP_150(uint256) = TMP_149 * y
TMP_151(uint128) = RAY / 2
TMP_152(uint256) = TMP_150 + TMP_151
TMP_153(uint256) = TMP_152 / RAY
TMP_154(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_153)
z(uint128) := TMP_154(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_161(bool) = n != 0
CONDITION TMP_161"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_162(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_162(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_163(uint64) = n % 2
TMP_164(bool) = TMP_163 != 0
CONDITION TMP_164"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_165(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_165(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_166(uint64) = n % 2
TMP_167(bool) = TMP_166 != 0
CONDITION TMP_167"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_148(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_148"];
}
// Function: 31857.sol-DSTokenBase-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_187(uint256) = 10 ** 18
WAD(uint128) := TMP_187(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_188(uint256) = 10 ** 27
RAY(uint128) := TMP_188(uint256)"];
}
// Function: 31857.sol-DSTokenBase-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_102(uint256) = x - y
z(uint256) := TMP_102(uint256)
TMP_103(bool) = z <= x
TMP_104(None) = SOLIDITY_CALL assert(bool)(TMP_103)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_supply

IRs:
RETURN _supply"];
}
// Function: 31857.sol-DSTokenBase-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_balances[msg.sender] >= wad)

IRs:
REF_7(uint256) -> _balances[msg.sender]
TMP_173(bool) = REF_7 >= wad
TMP_174(None) = SOLIDITY_CALL assert(bool)(TMP_173)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_balances[msg.sender] = sub(_balances[msg.sender],wad)

IRs:
REF_8(uint256) -> _balances[msg.sender]
REF_9(uint256) -> _balances[msg.sender]
TMP_175(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_9,wad)
REF_8(uint256) (->_balances) := TMP_175(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[dst] = add(_balances[dst],wad)

IRs:
REF_10(uint256) -> _balances[dst]
REF_11(uint256) -> _balances[dst]
TMP_176(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_11,wad)
REF_10(uint256) (->_balances) := TMP_176(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,dst,wad)

IRs:
Emit Transfer(msg.sender,dst,wad)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 31857.sol-DSTokenBase-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_balances[src] >= wad)

IRs:
REF_12(uint256) -> _balances[src]
TMP_178(bool) = REF_12 >= wad
TMP_179(None) = SOLIDITY_CALL assert(bool)(TMP_178)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_approvals[src][msg.sender] >= wad)

IRs:
REF_13(mapping(address => uint256)) -> _approvals[src]
REF_14(uint256) -> REF_13[msg.sender]
TMP_180(bool) = REF_14 >= wad
TMP_181(None) = SOLIDITY_CALL assert(bool)(TMP_180)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_approvals[src][msg.sender] = sub(_approvals[src][msg.sender],wad)

IRs:
REF_15(mapping(address => uint256)) -> _approvals[src]
REF_16(uint256) -> REF_15[msg.sender]
REF_17(mapping(address => uint256)) -> _approvals[src]
REF_18(uint256) -> REF_17[msg.sender]
TMP_182(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_18,wad)
REF_16(uint256) (->_approvals) := TMP_182(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[src] = sub(_balances[src],wad)

IRs:
REF_19(uint256) -> _balances[src]
REF_20(uint256) -> _balances[src]
TMP_183(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_20,wad)
REF_19(uint256) (->_balances) := TMP_183(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_balances[dst] = add(_balances[dst],wad)

IRs:
REF_21(uint256) -> _balances[dst]
REF_22(uint256) -> _balances[dst]
TMP_184(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_22,wad)
REF_21(uint256) (->_balances) := TMP_184(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(src,dst,wad)

IRs:
Emit Transfer(src,dst,wad)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 31857.sol-DSTokenBase-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_131(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_131"];
}
// Function: 31857.sol-DSTokenBase-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_139 = CONVERT x to uint256
TMP_140(uint256) = TMP_139 * WAD
TMP_141(uint128) = y / 2
TMP_142(uint256) = TMP_140 + TMP_141
TMP_143(uint256) = TMP_142 / y
TMP_144(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_143)
z(uint128) := TMP_144(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_146(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_146"];
}
// Function: 31857.sol-DSTokenBase-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_145(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_145"];
}
// Function: 31857.sol-DSTokenBase-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_133 = CONVERT x to uint256
TMP_134(uint256) = TMP_133 * y
TMP_135(uint128) = WAD / 2
TMP_136(uint256) = TMP_134 + TMP_135
TMP_137(uint256) = TMP_136 / WAD
TMP_138(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_137)
z(uint128) := TMP_138(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 31857.sol-DSTokenBase-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_132(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_132"];
}
// Function: 31857.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 31857.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 31857.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 31857.sol-ERC20-totalSupply()
digraph{
}
// Function: 31857.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 31857.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 31857.sol-WarmWallet-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 31857.sol-WarmWallet-WarmWallet(DSToken,address,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_key != address(0))

IRs:
TMP_363 = CONVERT 0 to address
TMP_364(bool) = _key != TMP_363
TMP_365(None) = SOLIDITY_CALL require(bool)(TMP_364)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_hot != address(0))

IRs:
TMP_366 = CONVERT 0 to address
TMP_367(bool) = _hot != TMP_366
TMP_368(None) = SOLIDITY_CALL require(bool)(TMP_367)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_cold != address(0))

IRs:
TMP_369 = CONVERT 0 to address
TMP_370(bool) = _cold != TMP_369
TMP_371(None) = SOLIDITY_CALL require(bool)(TMP_370)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_withdrawer != address(0))

IRs:
TMP_372 = CONVERT 0 to address
TMP_373(bool) = _withdrawer != TMP_372
TMP_374(None) = SOLIDITY_CALL require(bool)(TMP_373)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_limit > 0)

IRs:
TMP_375(bool) = _limit > 0
TMP_376(None) = SOLIDITY_CALL require(bool)(TMP_375)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_key != _hot)

IRs:
TMP_377(bool) = _key != _hot
TMP_378(None) = SOLIDITY_CALL require(bool)(TMP_377)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(_key != _cold)

IRs:
TMP_379(bool) = _key != _cold
TMP_380(None) = SOLIDITY_CALL require(bool)(TMP_379)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(_key != _withdrawer)

IRs:
TMP_381(bool) = _key != _withdrawer
TMP_382(None) = SOLIDITY_CALL require(bool)(TMP_381)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
key = _key

IRs:
key(DSToken) := _key(DSToken)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
hotWallet = _hot

IRs:
hotWallet(address) := _hot(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
coldWallet = _cold

IRs:
coldWallet(address) := _cold(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
withdrawer = _withdrawer

IRs:
withdrawer(address) := _withdrawer(address)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
withdrawLimit = _limit

IRs:
withdrawLimit(uint256) := _limit(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
lastWithdrawTime = 0

IRs:
lastWithdrawTime(uint256) := 0(uint256)"];
}
// Function: 31857.sol-WarmWallet-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_362 = UnaryType.BANG x 
CONDITION TMP_362"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 31857.sol-WarmWallet-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_411(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_411)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31857.sol-WarmWallet-forwardToHotWallet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_383(bool) = _amount > 0
TMP_384(None) = SOLIDITY_CALL require(bool)(TMP_383)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_time = time()

IRs:
TMP_385(uint256) = INTERNAL_CALL, WarmWallet.time()()
_time(uint256) := TMP_385(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_time > (lastWithdrawTime + 86400))

IRs:
TMP_386(uint256) = lastWithdrawTime + 86400
TMP_387(bool) = _time > TMP_386
TMP_388(None) = SOLIDITY_CALL require(bool)(TMP_387)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
amount = _amount

IRs:
amount(uint256) := _amount(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
amount > withdrawLimit

IRs:
TMP_389(bool) = amount > withdrawLimit
CONDITION TMP_389"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
amount = withdrawLimit

IRs:
amount(uint256) := withdrawLimit(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
key.transfer(hotWallet,amount)

IRs:
TMP_390(bool) = HIGH_LEVEL_CALL, dest:key(DSToken), function:transfer, arguments:['hotWallet', 'amount']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
lastWithdrawTime = _time

IRs:
lastWithdrawTime(uint256) := _time(uint256)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyWithdrawer()

IRs:
MODIFIER_CALL, WarmWallet.onlyWithdrawer()()"];
11->1;
}
// Function: 31857.sol-WarmWallet-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_356 = CONVERT this to address
TMP_357(bool) = src == TMP_356
CONDITION TMP_357"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_358(bool) = src == owner
CONDITION TMP_358"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_359 = CONVERT 0 to DSAuthority
TMP_360(bool) = authority == TMP_359
CONDITION TMP_360"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_361(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_361"];
}
// Function: 31857.sol-WarmWallet-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 31857.sol-WarmWallet-onlyWithdrawer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == withdrawer)

IRs:
TMP_413(bool) = msg.sender == withdrawer
TMP_414(None) = SOLIDITY_CALL require(bool)(TMP_413)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31857.sol-WarmWallet-restoreToColdWallet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount > 0)

IRs:
TMP_393(bool) = _amount > 0
TMP_394(None) = SOLIDITY_CALL require(bool)(TMP_393)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
key.transfer(coldWallet,_amount)

IRs:
TMP_395(bool) = HIGH_LEVEL_CALL, dest:key(DSToken), function:transfer, arguments:['coldWallet', '_amount']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyWithdrawer()

IRs:
MODIFIER_CALL, WarmWallet.onlyWithdrawer()()"];
3->1;
}
// Function: 31857.sol-WarmWallet-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 31857.sol-WarmWallet-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 31857.sol-WarmWallet-setWithdrawLimit(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
withdrawLimit = _limit

IRs:
withdrawLimit(uint256) := _limit(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetWithdrawLimit(msg.sender,_limit)

IRs:
Emit LogSetWithdrawLimit(msg.sender,_limit)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 31857.sol-WarmWallet-setWithdrawer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
withdrawer = _withdrawer

IRs:
withdrawer(address) := _withdrawer(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetWithdrawer(_withdrawer)

IRs:
Emit LogSetWithdrawer(_withdrawer)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 31857.sol-WarmWallet-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 31857.sol-WarmWallet-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 31857.sol-WarmWallet-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(! stopped)

IRs:
TMP_408 = UnaryType.BANG stopped 
INTERNAL_CALL, DSAuth.assert(bool)(TMP_408)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 31857.sol-WarmWallet-time()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now

IRs:
RETURN now"];
}
// Function: 31857.sol-WarmWallet-transferTokens(address,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token != address(key))

IRs:
TMP_401 = CONVERT key to address
TMP_402(bool) = _token != TMP_401
TMP_403(None) = SOLIDITY_CALL require(bool)(TMP_402)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
wad > 0

IRs:
TMP_404(bool) = wad > 0
CONDITION TMP_404"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_405 = CONVERT _token to ERC20
token(ERC20) := TMP_405(ERC20)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.transfer(dst,wad)

IRs:
TMP_406(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['dst', 'wad']  "];
4->5;
5[label="Node Type: END_IF 5
"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyWithdrawer()

IRs:
MODIFIER_CALL, WarmWallet.onlyWithdrawer()()"];
6->1;
}
}
