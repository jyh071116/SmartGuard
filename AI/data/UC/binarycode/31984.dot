digraph G {
// Function: 31984.sol-Base-WithdrawToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == creator

IRs:
TMP_12(bool) = msg.sender == creator
CONDITION TMP_12"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.call(bytes4(sha3()(transfer(address,uint256))),creator,amount)

IRs:
TMP_13(bytes32) = SOLIDITY_CALL sha3()(transfer(address,uint256))
TMP_14 = CONVERT TMP_13 to bytes4
TMP_15(bool) = LOW_LEVEL_CALL, dest:token, function:call, arguments:['TMP_14', 'creator', 'amount']  "];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-Base-WthdrawAllToCreator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == creator

IRs:
TMP_6(bool) = msg.sender == creator
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
creator.transfer(this.balance)

IRs:
REF_1(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:creator value:REF_1"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-Base-WthdrawTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == creator

IRs:
TMP_10(bool) = msg.sender == creator
CONDITION TMP_10"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addr.transfer(val)

IRs:
Transfer dest:addr value:val"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-Base-WthdrawToCreator(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == creator

IRs:
TMP_8(bool) = msg.sender == creator
CONDITION TMP_8"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
creator.transfer(val)

IRs:
Transfer dest:creator value:val"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-Base-canDrive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(owner == msg.sender) || (creator == msg.sender)

IRs:
TMP_3(bool) = owner == msg.sender
TMP_4(bool) = creator == msg.sender
TMP_5(bool) = TMP_3 || TMP_4
RETURN TMP_5"];
}
// Function: 31984.sol-Base-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isOwner()

IRs:
TMP_1(bool) = INTERNAL_CALL, Base.isOwner()()
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = addr

IRs:
newOwner(address) := addr(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-Base-confirmOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newOwner

IRs:
TMP_2(bool) = msg.sender == newOwner
CONDITION TMP_2"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-Base-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owner == msg.sender

IRs:
TMP_0(bool) = owner == msg.sender
RETURN TMP_0"];
}
// Function: 31984.sol-Base-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
creator = msg.sender

IRs:
creator(address) := msg.sender(address)"];
}
// Function: 31984.sol-DepositBank-AuthorizePayments(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isOwner()

IRs:
TMP_47(bool) = INTERNAL_CALL, Base.isOwner()()
CONDITION TMP_47"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
paymentsAllowed = val

IRs:
paymentsAllowed(bool) := val(bool)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-DepositBank-CheckProfit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((Lenders[addr].Amount / 100) * PrcntRate) * ((now - Lenders[addr].LastLendTime) / 86400)

IRs:
REF_12(DepositBank.Lender) -> Lenders[addr]
REF_13(uint256) -> REF_12.Amount
TMP_35(uint256) = REF_13 / 100
TMP_36(uint256) = TMP_35 * PrcntRate
REF_14(DepositBank.Lender) -> Lenders[addr]
REF_15(uint256) -> REF_14.LastLendTime
TMP_37(uint256) = now - REF_15
TMP_38(uint256) = TMP_37 / 86400
TMP_39(uint256) = TMP_36 * TMP_38
RETURN TMP_39"];
}
// Function: 31984.sol-DepositBank-Deposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
FixProfit()

IRs:
INTERNAL_CALL, DepositBank.FixProfit()()"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Lenders[msg.sender].Amount += msg.value

IRs:
REF_10(DepositBank.Lender) -> Lenders[msg.sender]
REF_11(uint256) -> REF_10.Amount
REF_11(-> Lenders) = REF_11 + msg.value"];
}
// Function: 31984.sol-DepositBank-Fin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isOwner()

IRs:
TMP_58(bool) = INTERNAL_CALL, Base.isOwner()()
CONDITION TMP_58"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
finalized = true

IRs:
finalized(bool) := True(bool)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-DepositBank-FixProfit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Lenders[msg.sender].Amount > 0

IRs:
REF_16(DepositBank.Lender) -> Lenders[msg.sender]
REF_17(uint256) -> REF_16.Amount
TMP_40(bool) = REF_17 > 0
CONDITION TMP_40"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Lenders[msg.sender].Reserved += CheckProfit(msg.sender)

IRs:
REF_18(DepositBank.Lender) -> Lenders[msg.sender]
REF_19(uint256) -> REF_18.Reserved
TMP_41(uint256) = INTERNAL_CALL, DepositBank.CheckProfit(address)(msg.sender)
REF_19(-> Lenders) = REF_19 + TMP_41"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Lenders[msg.sender].LastLendTime = now

IRs:
REF_20(DepositBank.Lender) -> Lenders[msg.sender]
REF_21(uint256) -> REF_20.LastLendTime
REF_21(uint256) (->Lenders) := now(uint256)"];
}
// Function: 31984.sol-DepositBank-Public()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! finalized

IRs:
TMP_59 = UnaryType.BANG finalized 
CONDITION TMP_59"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-DepositBank-StartPaymens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isOwner()

IRs:
TMP_48(bool) = INTERNAL_CALL, Base.isOwner()()
CONDITION TMP_48"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AuthorizePayments(true)

IRs:
INTERNAL_CALL, DepositBank.AuthorizePayments(bool)(True)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
StartOfPayments(msg.sender,now)

IRs:
Emit StartOfPayments(msg.sender,now)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 31984.sol-DepositBank-StopPaymens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isOwner()

IRs:
TMP_51(bool) = INTERNAL_CALL, Base.isOwner()()
CONDITION TMP_51"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
AuthorizePayments(false)

IRs:
INTERNAL_CALL, DepositBank.AuthorizePayments(bool)(False)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
EndOfPayments(msg.sender,now)

IRs:
Emit EndOfPayments(msg.sender,now)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 31984.sol-DepositBank-ToSponsor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value >= MinPayment

IRs:
TMP_44(bool) = msg.value >= MinPayment
CONDITION TMP_44"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
Sponsors[msg.sender] == 0

IRs:
REF_27(uint256) -> Sponsors[msg.sender]
TMP_45(bool) = REF_27 == 0
CONDITION TMP_45"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
SponsorsQty ++

IRs:
TMP_46(uint256) := SponsorsQty(uint256)
SponsorsQty(uint256) = SponsorsQty + 1"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Sponsors[msg.sender] += msg.value

IRs:
REF_28(uint256) -> Sponsors[msg.sender]
REF_28(-> Sponsors) = REF_28 + msg.value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
CharterCapital += msg.value

IRs:
CharterCapital(uint256) = CharterCapital + msg.value"];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 31984.sol-DepositBank-WitdrawLenderProfit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
paymentsAllowed

IRs:
CONDITION paymentsAllowed"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FixProfit()

IRs:
INTERNAL_CALL, DepositBank.FixProfit()()"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
profit = Lenders[msg.sender].Reserved

IRs:
REF_22(DepositBank.Lender) -> Lenders[msg.sender]
REF_23(uint256) -> REF_22.Reserved
profit(uint256) := REF_23(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Lenders[msg.sender].Reserved = 0

IRs:
REF_24(DepositBank.Lender) -> Lenders[msg.sender]
REF_25(uint256) -> REF_24.Reserved
REF_25(uint256) (->Lenders) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
msg.sender.transfer(profit)

IRs:
Transfer dest:msg.sender value:profit"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 31984.sol-DepositBank-WithdrawToSponsor(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
Sponsors[_addr] > 0

IRs:
REF_29(uint256) -> Sponsors[_addr]
TMP_54(bool) = REF_29 > 0
CONDITION TMP_54"];
1->2[label="True"];
1->10[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
isOwner()

IRs:
TMP_55(bool) = INTERNAL_CALL, Base.isOwner()()
CONDITION TMP_55"];
2->3[label="True"];
2->9[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
_addr.send(_wei)

IRs:
TMP_56 = SEND dest:_addr value:_wei
CONDITION TMP_56"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
CharterCapital >= _wei

IRs:
TMP_57(bool) = CharterCapital >= _wei
CONDITION TMP_57"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
CharterCapital -= _wei

IRs:
CharterCapital(uint256) = CharterCapital - _wei"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
CharterCapital = 0

IRs:
CharterCapital(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 31984.sol-DepositBank-WithdrawToken(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == creator

IRs:
TMP_28(bool) = msg.sender == creator
CONDITION TMP_28"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.call(bytes4(sha3()(transfer(address,uint256))),creator,amount)

IRs:
TMP_29(bytes32) = SOLIDITY_CALL sha3()(transfer(address,uint256))
TMP_30 = CONVERT TMP_29 to bytes4
TMP_31(bool) = LOW_LEVEL_CALL, dest:token, function:call, arguments:['TMP_30', 'creator', 'amount']  "];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-DepositBank-WthdrawAllToCreator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == creator

IRs:
TMP_22(bool) = msg.sender == creator
CONDITION TMP_22"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
creator.transfer(this.balance)

IRs:
REF_6(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:creator value:REF_6"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-DepositBank-WthdrawTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == creator

IRs:
TMP_26(bool) = msg.sender == creator
CONDITION TMP_26"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
addr.transfer(val)

IRs:
Transfer dest:addr value:val"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-DepositBank-WthdrawToCreator(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == creator

IRs:
TMP_24(bool) = msg.sender == creator
CONDITION TMP_24"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
creator.transfer(val)

IRs:
Transfer dest:creator value:val"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-DepositBank-canDrive()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(owner == msg.sender) || (creator == msg.sender)

IRs:
TMP_19(bool) = owner == msg.sender
TMP_20(bool) = creator == msg.sender
TMP_21(bool) = TMP_19 || TMP_20
RETURN TMP_21"];
}
// Function: 31984.sol-DepositBank-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isOwner()

IRs:
TMP_17(bool) = INTERNAL_CALL, Base.isOwner()()
CONDITION TMP_17"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = addr

IRs:
newOwner(address) := addr(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-DepositBank-confirmOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newOwner

IRs:
TMP_18(bool) = msg.sender == newOwner
CONDITION TMP_18"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 31984.sol-DepositBank-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ToSponsor()

IRs:
INTERNAL_CALL, DepositBank.ToSponsor()()"];
}
// Function: 31984.sol-DepositBank-init()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
PrcntRate = 5

IRs:
PrcntRate(uint256) := 5(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
MinPayment = 1000000000000000000

IRs:
MinPayment(uint256) := 1000000000000000000(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Public()

IRs:
MODIFIER_CALL, DepositBank.Public()()"];
4->1;
}
// Function: 31984.sol-DepositBank-isOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owner == msg.sender

IRs:
TMP_16(bool) = owner == msg.sender
RETURN TMP_16"];
}
// Function: 31984.sol-DepositBank-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
creator = msg.sender

IRs:
creator(address) := msg.sender(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
PrcntRate = 3

IRs:
PrcntRate(uint256) := 3(uint256)"];
}
}
