digraph G {
// Function: 32088.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_7(uint256) -> balances[_owner]
RETURN REF_7"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 32088.sol-BasicToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= size + 4)

IRs:
REF_8 -> LENGTH msg.data
TMP_31(uint256) = size + 4
TMP_32(bool) = REF_8 >= TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_2(uint256) -> balances[msg.sender]
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_25(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_26(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_26(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_28(uint256) = 2 * 32
MODIFIER_CALL, PayloadSize.onlyPayloadSize(uint256)(TMP_28)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
unblocked()

IRs:
MODIFIER_CALL, Blocked.unblocked()()"];
6->1;
}
// Function: 32088.sol-BasicToken-unblocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > blockedUntil)

IRs:
TMP_34(bool) = now > blockedUntil
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-Blocked-unblocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > blockedUntil)

IRs:
TMP_20(bool) = now > blockedUntil
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-BurnableToken-allowance(address,address)
digraph{
}
// Function: 32088.sol-BurnableToken-approve(address,uint256)
digraph{
}
// Function: 32088.sol-BurnableToken-balanceOf(address)
digraph{
}
// Function: 32088.sol-BurnableToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_89(bool) = _value > 0
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_58(uint256) -> balances[msg.sender]
TMP_91(bool) = _value <= REF_58
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_59(uint256) -> balances[burner]
REF_60(uint256) -> balances[burner]
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_60', '_value'] 
REF_59(uint256) (->balances) := TMP_93(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_94(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
unblocked()

IRs:
MODIFIER_CALL, Blocked.unblocked()()"];
7->1;
}
// Function: 32088.sol-BurnableToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= size + 4)

IRs:
REF_63 -> LENGTH msg.data
TMP_97(uint256) = size + 4
TMP_98(bool) = REF_63 >= TMP_97
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-BurnableToken-transfer(address,uint256)
digraph{
}
// Function: 32088.sol-BurnableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 32088.sol-BurnableToken-unblocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > blockedUntil)

IRs:
TMP_100(bool) = now > blockedUntil
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-Crowdsale-Crowdsale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = new PreNTFToken(maxTokenAmount,blockUntil)

IRs:
TMP_158(PreNTFToken) = new PreNTFToken(maxTokenAmount,blockUntil) 
token(PreNTFToken) := TMP_158(PreNTFToken)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
leftTokens = maxTokenAmount - bountyTokenAmount

IRs:
TMP_159(uint256) = maxTokenAmount - bountyTokenAmount
leftTokens(uint256) := TMP_159(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
btcAmountData = amountsByCurrency[0]

IRs:
REF_101(Crowdsale.AmountData) -> amountsByCurrency[0]
btcAmountData(Crowdsale.AmountData) := REF_101(Crowdsale.AmountData)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
btcAmountData.exists = true

IRs:
REF_102(bool) -> btcAmountData.exists
REF_102(bool) (->btcAmountData) := True(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
bccAmountData = amountsByCurrency[1]

IRs:
REF_103(Crowdsale.AmountData) -> amountsByCurrency[1]
bccAmountData(Crowdsale.AmountData) := REF_103(Crowdsale.AmountData)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
bccAmountData.exists = true

IRs:
REF_104(bool) -> bccAmountData.exists
REF_104(bool) (->bccAmountData) := True(bool)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
ltcAmountData = amountsByCurrency[2]

IRs:
REF_105(Crowdsale.AmountData) -> amountsByCurrency[2]
ltcAmountData(Crowdsale.AmountData) := REF_105(Crowdsale.AmountData)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ltcAmountData.exists = true

IRs:
REF_106(bool) -> ltcAmountData.exists
REF_106(bool) (->ltcAmountData) := True(bool)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
dashAmountData = amountsByCurrency[3]

IRs:
REF_107(Crowdsale.AmountData) -> amountsByCurrency[3]
dashAmountData(Crowdsale.AmountData) := REF_107(Crowdsale.AmountData)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
dashAmountData.exists = true

IRs:
REF_108(bool) -> dashAmountData.exists
REF_108(bool) (->dashAmountData) := True(bool)"];
}
// Function: 32088.sol-Crowdsale-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 32088.sol-Crowdsale-addCurrency(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
amountData = amountsByCurrency[currency]

IRs:
REF_123(Crowdsale.AmountData) -> amountsByCurrency[currency]
amountData(Crowdsale.AmountData) := REF_123(Crowdsale.AmountData)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
amountData.exists = true

IRs:
REF_124(bool) -> amountData.exists
REF_124(bool) (->amountData) := True(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32088.sol-Crowdsale-canBuy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isFinished())

IRs:
TMP_232(bool) = INTERNAL_CALL, Crowdsale.isFinished()()
TMP_233 = UnaryType.BANG TMP_232 
TMP_234(None) = SOLIDITY_CALL require(bool)(TMP_233)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now >= preICOstartTime)

IRs:
TMP_235(bool) = now >= preICOstartTime
TMP_236(None) = SOLIDITY_CALL require(bool)(TMP_235)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 32088.sol-Crowdsale-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != 0)

IRs:
TMP_152(bool) = _owner != 0
TMP_153(None) = SOLIDITY_CALL require(bool)(TMP_152)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _owner

IRs:
newOwner(address) := _owner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32088.sol-Crowdsale-confirmOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner == msg.sender)

IRs:
TMP_155(bool) = newOwner == msg.sender
TMP_156(None) = SOLIDITY_CALL require(bool)(TMP_155)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete newOwner

IRs:
newOwner = delete newOwner "];
}
// Function: 32088.sol-Crowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
amount = msg.value

IRs:
amount(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
givenTokens = amount.mul(1000000000000000000).div(tokenPrice)

IRs:
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amount', '1000000000000000000'] 
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_163', 'tokenPrice'] 
givenTokens(uint256) := TMP_164(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
providedTokens = transferTokensTo(msg.sender,givenTokens)

IRs:
TMP_165(uint256) = INTERNAL_CALL, Crowdsale.transferTokensTo(address,uint256)(msg.sender,givenTokens)
providedTokens(uint256) := TMP_165(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
transactionCounter = transactionCounter + 1

IRs:
TMP_166(uint256) = transactionCounter + 1
transactionCounter(uint256) := TMP_166(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
givenTokens > providedTokens

IRs:
TMP_167(bool) = givenTokens > providedTokens
CONDITION TMP_167"];
5->6[label="True"];
5->10[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
needAmount = providedTokens.mul(tokenPrice).div(1000000000000000000)

IRs:
TMP_168(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['providedTokens', 'tokenPrice'] 
TMP_169(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_168', '1000000000000000000'] 
needAmount(uint256) := TMP_169(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(amount > needAmount)

IRs:
TMP_170(bool) = amount > needAmount
TMP_171(None) = SOLIDITY_CALL require(bool)(TMP_170)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(msg.sender.call.gas(3000000).value(amount - needAmount)())

IRs:
TMP_173(uint256) = amount - needAmount
TMP_175(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_173 gas:3000000
TMP_176(None) = SOLIDITY_CALL require(bool)(TMP_175)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
amount = needAmount

IRs:
amount(uint256) := needAmount(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalAmount = totalAmount.add(amount)

IRs:
TMP_177(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalAmount', 'amount'] 
totalAmount(uint256) := TMP_177(uint256)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
canBuy()

IRs:
MODIFIER_CALL, Crowdsale.canBuy()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
minPayment()

IRs:
MODIFIER_CALL, Crowdsale.minPayment()()"];
13->1;
}
// Function: 32088.sol-Crowdsale-finishCrowdsale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isFinished())

IRs:
TMP_191(bool) = INTERNAL_CALL, Crowdsale.isFinished()()
TMP_192(None) = SOLIDITY_CALL require(bool)(TMP_191)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
leftTokens > 0

IRs:
TMP_193(bool) = leftTokens > 0
CONDITION TMP_193"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
token.burn(leftTokens)

IRs:
HIGH_LEVEL_CALL, dest:token(PreNTFToken), function:burn, arguments:['leftTokens']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
leftTokens = 0

IRs:
leftTokens(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 32088.sol-Crowdsale-getAmountByCurrency(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tempAmountData = amountsByCurrency[index]

IRs:
REF_136(Crowdsale.AmountData) -> amountsByCurrency[index]
tempAmountData(Crowdsale.AmountData) := REF_136(Crowdsale.AmountData)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tempAmountData.value

IRs:
REF_137(uint256) -> tempAmountData.value
RETURN REF_137"];
}
// Function: 32088.sol-Crowdsale-giveTokensTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bountyTokenAmount >= givenBountyTokens.add(amount))

IRs:
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['givenBountyTokens', 'amount'] 
TMP_202(bool) = bountyTokenAmount >= TMP_201
TMP_203(None) = SOLIDITY_CALL require(bool)(TMP_202)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bountyTokensToAddress[holder] = bountyTokensToAddress[holder].add(amount)

IRs:
REF_132(uint256) -> bountyTokensToAddress[holder]
REF_133(uint256) -> bountyTokensToAddress[holder]
TMP_204(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_133', 'amount'] 
REF_132(uint256) (->bountyTokensToAddress) := TMP_204(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
givenBountyTokens = givenBountyTokens.add(amount)

IRs:
TMP_205(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['givenBountyTokens', 'amount'] 
givenBountyTokens(uint256) := TMP_205(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_206(uint256) = 2 * 32
MODIFIER_CALL, Crowdsale.onlyPayloadSize(uint256)(TMP_206)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
6->1;
}
// Function: 32088.sol-Crowdsale-isFinished()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > preICOendTime || leftTokens == 0

IRs:
TMP_160(bool) = now > preICOendTime
TMP_161(bool) = leftTokens == 0
TMP_162(bool) = TMP_160 || TMP_161
RETURN TMP_162"];
}
// Function: 32088.sol-Crowdsale-manualTransferTokensTo(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tempAmountData = amountsByCurrency[currency]

IRs:
REF_117(Crowdsale.AmountData) -> amountsByCurrency[currency]
tempAmountData(Crowdsale.AmountData) := REF_117(Crowdsale.AmountData)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(tempAmountData.exists)

IRs:
REF_118(bool) -> tempAmountData.exists
TMP_180(None) = SOLIDITY_CALL require(bool)(REF_118)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountData = amountsByCurrency[currency]

IRs:
REF_119(Crowdsale.AmountData) -> amountsByCurrency[currency]
amountData(Crowdsale.AmountData) := REF_119(Crowdsale.AmountData)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
amountData.value = amountData.value.add(amount)

IRs:
REF_120(uint256) -> amountData.value
REF_121(uint256) -> amountData.value
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_121', 'amount'] 
REF_120(uint256) (->amountData) := TMP_181(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
value = transferTokensTo(to,givenTokens)

IRs:
TMP_182(uint256) = INTERNAL_CALL, Crowdsale.transferTokensTo(address,uint256)(to,givenTokens)
value(uint256) := TMP_182(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
transactionCounter = transactionCounter + 1

IRs:
TMP_183(uint256) = transactionCounter + 1
transactionCounter(uint256) := TMP_183(uint256)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
value

IRs:
RETURN value"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
canBuy()

IRs:
MODIFIER_CALL, Crowdsale.canBuy()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
9->1;
}
// Function: 32088.sol-Crowdsale-minPayment()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= minAmountForDeal)

IRs:
TMP_237(bool) = msg.value >= minAmountForDeal
TMP_238(None) = SOLIDITY_CALL require(bool)(TMP_237)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-Crowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == msg.sender)

IRs:
TMP_230(bool) = owner == msg.sender
TMP_231(None) = SOLIDITY_CALL require(bool)(TMP_230)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-Crowdsale-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= size + 4)

IRs:
REF_148 -> LENGTH msg.data
TMP_239(uint256) = size + 4
TMP_240(bool) = REF_148 >= TMP_239
TMP_241(None) = SOLIDITY_CALL require(bool)(TMP_240)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-Crowdsale-setAmountForDeal(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minAmountForDeal = value

IRs:
minAmountForDeal(uint256) := value(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 32088.sol-Crowdsale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
preICOstartTime = 1512597600

IRs:
preICOstartTime(uint256) := 1512597600(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
preICOendTime = 1517436000

IRs:
preICOendTime(uint256) := 1517436000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
blockUntil = 1525122000

IRs:
blockUntil(uint256) := 1525122000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
maxTokenAmount = 3375000 * 10 ** 18

IRs:
TMP_221(uint256) = 10 ** 18
TMP_222(uint256) = 3375000 * TMP_221
maxTokenAmount(uint256) := TMP_222(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
bountyTokenAmount = 375000 * 10 ** 18

IRs:
TMP_223(uint256) = 10 ** 18
TMP_224(uint256) = 375000 * TMP_223
bountyTokenAmount(uint256) := TMP_224(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
tokenPrice = 3 * 10 ** 15

IRs:
TMP_225(uint256) = 10 ** 15
TMP_226(uint256) = 3 * TMP_225
tokenPrice(uint256) := TMP_226(uint256)"];
}
// Function: 32088.sol-Crowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
givenBountyTokens = 0

IRs:
givenBountyTokens(uint256) := 0(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
leftTokens = 0

IRs:
leftTokens(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
totalAmount = 0

IRs:
totalAmount(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
transactionCounter = 0

IRs:
transactionCounter(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
minAmountForDeal = 9000000000000000000

IRs:
minAmountForDeal(uint256) := 9000000000000000000(uint256)"];
}
// Function: 32088.sol-Crowdsale-takeBountyTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isFinished())

IRs:
TMP_195(bool) = INTERNAL_CALL, Crowdsale.isFinished()()
TMP_196(None) = SOLIDITY_CALL require(bool)(TMP_195)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
allowance = bountyTokensToAddress[msg.sender]

IRs:
REF_128(uint256) -> bountyTokensToAddress[msg.sender]
allowance(uint256) := REF_128(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(allowance > 0)

IRs:
TMP_197(bool) = allowance > 0
TMP_198(None) = SOLIDITY_CALL require(bool)(TMP_197)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
bountyTokensToAddress[msg.sender] = 0

IRs:
REF_129(uint256) -> bountyTokensToAddress[msg.sender]
REF_129(uint256) (->bountyTokensToAddress) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(token.manualTransfer(msg.sender,allowance))

IRs:
TMP_199(bool) = HIGH_LEVEL_CALL, dest:token(PreNTFToken), function:manualTransfer, arguments:['msg.sender', 'allowance']  
TMP_200(None) = SOLIDITY_CALL require(bool)(TMP_199)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 32088.sol-Crowdsale-transferTokensTo(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
providedTokens = givenTokens

IRs:
providedTokens(uint256) := givenTokens(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
givenTokens > leftTokens

IRs:
TMP_187(bool) = givenTokens > leftTokens
CONDITION TMP_187"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
providedTokens = leftTokens

IRs:
providedTokens(uint256) := leftTokens(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
leftTokens = leftTokens.sub(providedTokens)

IRs:
TMP_188(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['leftTokens', 'providedTokens'] 
leftTokens(uint256) := TMP_188(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(token.manualTransfer(to,providedTokens))

IRs:
TMP_189(bool) = HIGH_LEVEL_CALL, dest:token(PreNTFToken), function:manualTransfer, arguments:['to', 'providedTokens']  
TMP_190(None) = SOLIDITY_CALL require(bool)(TMP_189)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
providedTokens

IRs:
RETURN providedTokens"];
}
// Function: 32088.sol-Crowdsale-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender.call.gas(3000000).value(this.balance)())

IRs:
REF_141(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_211(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:REF_141 gas:3000000
TMP_212(None) = SOLIDITY_CALL require(bool)(TMP_211)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 32088.sol-Crowdsale-withdrawAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
givenAmount = amount

IRs:
givenAmount(uint256) := amount(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
this.balance < amount

IRs:
REF_142(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_215(bool) = REF_142 < amount
CONDITION TMP_215"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
givenAmount = this.balance

IRs:
REF_143(uint256) = SOLIDITY_CALL balance(address)(this)
givenAmount(uint256) := REF_143([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fb6e2247eb0>])"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(msg.sender.call.gas(3000000).value(givenAmount)())

IRs:
TMP_218(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:givenAmount gas:3000000
TMP_219(None) = SOLIDITY_CALL require(bool)(TMP_218)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
6->1;
}
// Function: 32088.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 32088.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 32088.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 32088.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 32088.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 32088.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 32088.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 32088.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 32088.sol-Owned-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != 0)

IRs:
TMP_13(bool) = _owner != 0
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _owner

IRs:
newOwner(address) := _owner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32088.sol-Owned-confirmOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner == msg.sender)

IRs:
TMP_16(bool) = newOwner == msg.sender
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete newOwner

IRs:
newOwner = delete newOwner "];
}
// Function: 32088.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == msg.sender)

IRs:
TMP_18(bool) = owner == msg.sender
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-PayloadSize-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= size + 4)

IRs:
REF_0 -> LENGTH msg.data
TMP_22(uint256) = size + 4
TMP_23(bool) = REF_0 >= TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-PreNTFToken-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 32088.sol-PreNTFToken-PreNTFToken(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = initialSupply

IRs:
totalSupply(uint256) := initialSupply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[owner] = initialSupply

IRs:
REF_93(uint256) -> balances[owner]
REF_93(uint256) (->balances) := initialSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
blockedUntil = unblockTime

IRs:
blockedUntil(uint256) := unblockTime(uint256)"];
}
// Function: 32088.sol-PreNTFToken-allowance(address,address)
digraph{
}
// Function: 32088.sol-PreNTFToken-approve(address,uint256)
digraph{
}
// Function: 32088.sol-PreNTFToken-balanceOf(address)
digraph{
}
// Function: 32088.sol-PreNTFToken-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_107(bool) = _value > 0
TMP_108(None) = SOLIDITY_CALL require(bool)(TMP_107)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value <= balances[msg.sender])

IRs:
REF_64(uint256) -> balances[msg.sender]
TMP_109(bool) = _value <= REF_64
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
burner = msg.sender

IRs:
burner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[burner] = balances[burner].sub(_value)

IRs:
REF_65(uint256) -> balances[burner]
REF_66(uint256) -> balances[burner]
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_66', '_value'] 
REF_65(uint256) (->balances) := TMP_111(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_112(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Burn(burner,_value)

IRs:
Emit Burn(burner,_value)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
unblocked()

IRs:
MODIFIER_CALL, Blocked.unblocked()()"];
7->1;
}
// Function: 32088.sol-PreNTFToken-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_owner != 0)

IRs:
TMP_102(bool) = _owner != 0
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newOwner = _owner

IRs:
newOwner(address) := _owner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 32088.sol-PreNTFToken-confirmOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner == msg.sender)

IRs:
TMP_105(bool) = newOwner == msg.sender
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete newOwner

IRs:
newOwner = delete newOwner "];
}
// Function: 32088.sol-PreNTFToken-manualTransfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_94(uint256) -> balances[msg.sender]
REF_95(uint256) -> balances[msg.sender]
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_95', '_value'] 
REF_94(uint256) (->balances) := TMP_139(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_97(uint256) -> balances[_to]
REF_98(uint256) -> balances[_to]
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_98', '_value'] 
REF_97(uint256) (->balances) := TMP_140(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_142(uint256) = 2 * 32
MODIFIER_CALL, PayloadSize.onlyPayloadSize(uint256)(TMP_142)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
6->1;
}
// Function: 32088.sol-PreNTFToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(owner == msg.sender)

IRs:
TMP_145(bool) = owner == msg.sender
TMP_146(None) = SOLIDITY_CALL require(bool)(TMP_145)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-PreNTFToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= size + 4)

IRs:
REF_100 -> LENGTH msg.data
TMP_147(uint256) = size + 4
TMP_148(bool) = REF_100 >= TMP_147
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-PreNTFToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = PreNTF Token

IRs:
name(string) := PreNTF Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = PreNTF

IRs:
symbol(string) := PreNTF(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint32) := 18(uint256)"];
}
// Function: 32088.sol-PreNTFToken-transfer(address,uint256)
digraph{
}
// Function: 32088.sol-PreNTFToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 32088.sol-PreNTFToken-unblocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > blockedUntil)

IRs:
TMP_150(bool) = now > blockedUntil
TMP_151(None) = SOLIDITY_CALL require(bool)(TMP_150)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 32088.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 32088.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 32088.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 32088.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_31(mapping(address => uint256)) -> allowed[_owner]
REF_32(uint256) -> REF_31[_spender]
RETURN REF_32"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_57(uint256) = 2 * 32
MODIFIER_CALL, PayloadSize.onlyPayloadSize(uint256)(TMP_57)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
unblocked()

IRs:
MODIFIER_CALL, Blocked.unblocked()()"];
3->1;
4[label="Node Type: RETURN 4

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 32088.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

IRs:
TMP_49(bool) = _value == 0
REF_27(mapping(address => uint256)) -> allowed[msg.sender]
REF_28(uint256) -> REF_27[_spender]
TMP_50(bool) = REF_28 == 0
TMP_51(bool) = TMP_49 || TMP_50
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_29(mapping(address => uint256)) -> allowed[msg.sender]
REF_30(uint256) -> REF_29[_spender]
REF_30(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_54(uint256) = 2 * 32
MODIFIER_CALL, PayloadSize.onlyPayloadSize(uint256)(TMP_54)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
unblocked()

IRs:
MODIFIER_CALL, Blocked.unblocked()()"];
6->1;
}
// Function: 32088.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 32088.sol-StandardToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.data.length >= size + 4)

IRs:
REF_33 -> LENGTH msg.data
TMP_60(uint256) = size + 4
TMP_61(bool) = REF_33 >= TMP_60
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32088.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 32088.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_16(mapping(address => uint256)) -> allowed[_from]
REF_17(uint256) -> REF_16[msg.sender]
_allowance(uint256) := REF_17(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_18(uint256) -> balances[_to]
REF_19(uint256) -> balances[_to]
TMP_42(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_19', '_value'] 
REF_18(uint256) (->balances) := TMP_42(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_21(uint256) -> balances[_from]
REF_22(uint256) -> balances[_from]
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_22', '_value'] 
REF_21(uint256) (->balances) := TMP_43(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] = _allowance.sub(_value)

IRs:
REF_24(mapping(address => uint256)) -> allowed[_from]
REF_25(uint256) -> REF_24[msg.sender]
TMP_44(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_allowance', '_value'] 
REF_25(uint256) (->allowed) := TMP_44(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_46(uint256) = 3 * 32
MODIFIER_CALL, PayloadSize.onlyPayloadSize(uint256)(TMP_46)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
unblocked()

IRs:
MODIFIER_CALL, Blocked.unblocked()()"];
8->1;
}
// Function: 32088.sol-StandardToken-unblocked()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(now > blockedUntil)

IRs:
TMP_63(bool) = now > blockedUntil
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
