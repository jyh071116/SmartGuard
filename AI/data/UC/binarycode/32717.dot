digraph G {
// Function: 32717.sol-GMCToken-GMCToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
initialSupply = 2000000

IRs:
initialSupply(uint256) := 2000000(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
endMintDate = now + 2419200

IRs:
TMP_82(uint256) = now + 2419200
endMintDate(uint256) := TMP_82(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
minter[_wallet] = true

IRs:
REF_51(bool) -> minter[_wallet]
REF_51(bool) (->minter) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minter[msg.sender] = true

IRs:
REF_52(bool) -> minter[msg.sender]
REF_52(bool) (->minter) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
mint(_wallet,initialSupply.div(2))

IRs:
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['initialSupply', '2'] 
TMP_84(bool) = INTERNAL_CALL, StandardToken.mint(address,uint256)(_wallet,TMP_83)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
mint(msg.sender,initialSupply.div(2))

IRs:
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['initialSupply', '2'] 
TMP_86(bool) = INTERNAL_CALL, StandardToken.mint(address,uint256)(msg.sender,TMP_85)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
name = Good Mood Coin

IRs:
name(string) := Good Mood Coin(string)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
decimals = 4

IRs:
decimals(uint8) := 4(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
symbol = GMC

IRs:
symbol(string) := GMC(string)"];
}
// Function: 32717.sol-GMCToken-allowance(address,address)
digraph{
}
// Function: 32717.sol-GMCToken-approve(address,uint256)
digraph{
}
// Function: 32717.sol-GMCToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_67(mapping(address => uint256)) -> allowed[msg.sender]
REF_68(uint256) -> REF_67[_spender]
REF_68(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

IRs:
TMP_91(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_92 = CONVERT TMP_91 to bytes32
TMP_93 = CONVERT TMP_92 to bytes4
TMP_94(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_93', 'msg.sender', '_value', 'this', '_extraData']  
TMP_95 = UnaryType.BANG TMP_94 
CONDITION TMP_95"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_96(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32717.sol-GMCToken-balanceOf(address)
digraph{
}
// Function: 32717.sol-GMCToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(endMintDate > now && minter[msg.sender])

IRs:
TMP_99(bool) = endMintDate > now
REF_70(bool) -> minter[msg.sender]
TMP_100(bool) = TMP_99 && REF_70
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32717.sol-GMCToken-canTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(endMintDate < now)

IRs:
TMP_102(bool) = endMintDate < now
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32717.sol-GMCToken-doTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_27(uint256) -> balances[_from]
REF_28(uint256) -> balances[_from]
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_28', '_value'] 
REF_27(uint256) (->balances) := TMP_60(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_30(uint256) -> balances[_to]
REF_31(uint256) -> balances[_to]
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_31', '_value'] 
REF_30(uint256) (->balances) := TMP_61(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32717.sol-GMCToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_81(None) = SOLIDITY_CALL revert()()"];
}
// Function: 32717.sol-GMCToken-getGift(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
data = gifts[msg.sender][index]

IRs:
REF_62(mapping(uint256 => GMCToken.GiftData)) -> gifts[msg.sender]
REF_63(GMCToken.GiftData) -> REF_62[index]
data(GMCToken.GiftData) := REF_63(GMCToken.GiftData)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(data.from,data.value,data.message)

IRs:
REF_64(address) -> data.from
REF_65(uint256) -> data.value
REF_66(string) -> data.message
RETURN REF_64,REF_65,REF_66"];
3[label="Node Type: RETURN 3

EXPRESSION:
(from,value,message)

IRs:
RETURN from,value,message"];
}
// Function: 32717.sol-GMCToken-getGiftsCounter()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
giftsCounter[msg.sender]

IRs:
REF_61(uint256) -> giftsCounter[msg.sender]
RETURN REF_61"];
2[label="Node Type: RETURN 2

EXPRESSION:
count

IRs:
RETURN count"];
}
// Function: 32717.sol-GMCToken-mint(address,uint256)
digraph{
}
// Function: 32717.sol-GMCToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_97(bool) = msg.sender == owner
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32717.sol-GMCToken-sendGift(address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
counter = giftsCounter[_to]

IRs:
REF_55(uint256) -> giftsCounter[_to]
counter(uint256) := REF_55(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gifts[_to][counter] = (GiftData({from:msg.sender,value:_value,message:_msg}))

IRs:
REF_56(mapping(uint256 => GMCToken.GiftData)) -> gifts[_to]
REF_57(GMCToken.GiftData) -> REF_56[counter]
TMP_87(GMCToken.GiftData) = new GiftData(msg.sender,_value,_msg)
REF_57(GMCToken.GiftData) (->gifts) := TMP_87(GMCToken.GiftData)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
giftsCounter[_to] = giftsCounter[_to].inc()

IRs:
REF_58(uint256) -> giftsCounter[_to]
REF_59(uint256) -> giftsCounter[_to]
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.inc(uint256), arguments:['REF_59'] 
REF_58(uint256) (->giftsCounter) := TMP_88(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
doTransfer(msg.sender,_to,_value)

IRs:
TMP_89(bool) = INTERNAL_CALL, StandardToken.doTransfer(address,address,uint256)(msg.sender,_to,_value)
RETURN TMP_89"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32717.sol-GMCToken-setEndMintDate(uint256)
digraph{
}
// Function: 32717.sol-GMCToken-setMinter(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minter[_address] = _canMint

IRs:
REF_50(bool) -> minter[_address]
REF_50(bool) (->minter) := _canMint(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, StandardToken.onlyOwner()()"];
2->1;
}
// Function: 32717.sol-GMCToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = H1.0

IRs:
version(string) := H1.0(string)"];
}
// Function: 32717.sol-GMCToken-totalSupply()
digraph{
}
// Function: 32717.sol-GMCToken-transfer(address,uint256)
digraph{
}
// Function: 32717.sol-GMCToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 32717.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 32717.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 32717.sol-SafeMath-inc(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
add(a,1)

IRs:
TMP_13(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(a,1)
RETURN TMP_13"];
}
// Function: 32717.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 32717.sol-SafeMath-onePercent(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
div(a,uint256(100))

IRs:
TMP_14 = CONVERT 100 to uint256
TMP_15(uint256) = INTERNAL_CALL, SafeMath.div(uint256,uint256)(a,TMP_14)
RETURN TMP_15"];
}
// Function: 32717.sol-SafeMath-power(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
mul(a,10 ** b)

IRs:
TMP_16(uint256) = 10 ** b
TMP_17(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(a,TMP_16)
RETURN TMP_17"];
}
// Function: 32717.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 32717.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_18(mapping(address => uint256)) -> allowed[_owner]
REF_19(uint256) -> REF_18[_spender]
RETURN REF_19"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 32717.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_16(mapping(address => uint256)) -> allowed[msg.sender]
REF_17(uint256) -> REF_16[_spender]
REF_17(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32717.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_15(uint256) -> balances[_owner]
RETURN REF_15"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 32717.sol-StandardToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(endMintDate > now && minter[msg.sender])

IRs:
TMP_48(bool) = endMintDate > now
REF_25(bool) -> minter[msg.sender]
TMP_49(bool) = TMP_48 && REF_25
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32717.sol-StandardToken-canTransfer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(endMintDate < now)

IRs:
TMP_51(bool) = endMintDate < now
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32717.sol-StandardToken-doTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_1(uint256) -> balances[_from]
REF_2(uint256) -> balances[_from]
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_2', '_value'] 
REF_1(uint256) (->balances) := TMP_25(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_4(uint256) -> balances[_to]
REF_5(uint256) -> balances[_to]
TMP_26(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_5', '_value'] 
REF_4(uint256) (->balances) := TMP_26(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32717.sol-StandardToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_totalSupply = _totalSupply.add(_amount)

IRs:
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_totalSupply', '_amount'] 
_totalSupply(uint256) := TMP_40(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_21(uint256) -> balances[_to]
REF_22(uint256) -> balances[_to]
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_22', '_amount'] 
REF_21(uint256) (->balances) := TMP_41(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(0x0,_to,_amount)

IRs:
Emit Transfer(0,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, StandardToken.canMint()()"];
6->1;
}
// Function: 32717.sol-StandardToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_46(bool) = msg.sender == owner
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 32717.sol-StandardToken-setEndMintDate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
endMintDate = endDate

IRs:
endMintDate(uint256) := endDate(uint256)"];
}
// Function: 32717.sol-StandardToken-setMinter(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minter[_address] = _canMint

IRs:
REF_24(bool) -> minter[_address]
REF_24(bool) (->minter) := _canMint(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, StandardToken.onlyOwner()()"];
2->1;
}
// Function: 32717.sol-StandardToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
}
// Function: 32717.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && _value > 0 && _to != 0x0

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_18(bool) = REF_0 >= _value
TMP_19(bool) = _value > 0
TMP_20(bool) = TMP_18 && TMP_19
TMP_21(bool) = _to != 0
TMP_22(bool) = TMP_20 && TMP_21
CONDITION TMP_22"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
doTransfer(msg.sender,_to,_value)

IRs:
TMP_23(bool) = INTERNAL_CALL, StandardToken.doTransfer(address,address,uint256)(msg.sender,_to,_value)
RETURN TMP_23"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canTransfer()

IRs:
MODIFIER_CALL, StandardToken.canTransfer()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32717.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && _to != 0x0

IRs:
REF_7(uint256) -> balances[_from]
TMP_28(bool) = REF_7 >= _value
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
TMP_29(bool) = REF_9 >= _value
TMP_30(bool) = TMP_28 && TMP_29
TMP_31(bool) = _value > 0
TMP_32(bool) = TMP_30 && TMP_31
TMP_33(bool) = _to != 0
TMP_34(bool) = TMP_32 && TMP_33
CONDITION TMP_34"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
doTransfer(_from,_to,_value)

IRs:
TMP_35(bool) = INTERNAL_CALL, StandardToken.doTransfer(address,address,uint256)(_from,_to,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_10(mapping(address => uint256)) -> allowed[_from]
REF_11(uint256) -> REF_10[msg.sender]
REF_12(mapping(address => uint256)) -> allowed[_from]
REF_13(uint256) -> REF_12[msg.sender]
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_13', '_value'] 
REF_11(uint256) (->allowed) := TMP_36(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
canTransfer()

IRs:
MODIFIER_CALL, StandardToken.canTransfer()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 32717.sol-Token-allowance(address,address)
digraph{
}
// Function: 32717.sol-Token-approve(address,uint256)
digraph{
}
// Function: 32717.sol-Token-balanceOf(address)
digraph{
}
// Function: 32717.sol-Token-mint(address,uint256)
digraph{
}
// Function: 32717.sol-Token-setEndMintDate(uint256)
digraph{
}
// Function: 32717.sol-Token-totalSupply()
digraph{
}
// Function: 32717.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 32717.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
