digraph G {
// Function: 33041.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 33041.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 33041.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 33041.sol-SafeMath-onePercent(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
div(a,uint256(100))

IRs:
TMP_13 = CONVERT 100 to uint256
TMP_14(uint256) = INTERNAL_CALL, SafeMath.div(uint256,uint256)(a,TMP_13)
RETURN TMP_14"];
}
// Function: 33041.sol-SafeMath-power(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
mul(a,10 ** b)

IRs:
TMP_15(uint256) = 10 ** b
TMP_16(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(a,TMP_15)
RETURN TMP_16"];
}
// Function: 33041.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 33041.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_30(mapping(address => uint256)) -> allowed[_owner]
REF_31(uint256) -> REF_30[_spender]
RETURN REF_31"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 33041.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_28(mapping(address => uint256)) -> allowed[msg.sender]
REF_29(uint256) -> REF_28[_spender]
REF_29(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33041.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_27(uint256) -> balances[_owner]
RETURN REF_27"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 33041.sol-StandardToken-burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
doBurn(_from,_value)

IRs:
TMP_41(bool) = INTERNAL_CALL, StandardToken.doBurn(address,uint256)(_from,_value)
RETURN TMP_41"];
2[label="Node Type: RETURN 2

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33041.sol-StandardToken-doBurn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf(_from) >= _value)

IRs:
TMP_35(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_from)
TMP_36(bool) = TMP_35 >= _value
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_13(uint256) -> balances[_from]
REF_14(uint256) -> balances[_from]
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_14', '_value'] 
REF_13(uint256) (->balances) := TMP_38(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalSupply = _totalSupply.sub(_value)

IRs:
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', '_value'] 
_totalSupply(uint256) := TMP_39(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33041.sol-StandardToken-doTransfer(address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_6(uint256) -> balances[_from]
REF_7(uint256) -> balances[_from]
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_7', '_value'] 
REF_6(uint256) (->balances) := TMP_30(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_9(uint256) -> balances[_to]
REF_10(uint256) -> balances[_to]
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_10', '_value'] 
REF_9(uint256) (->balances) := TMP_31(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! withoutFee[_from]

IRs:
REF_12(bool) -> withoutFee[_from]
TMP_33 = UnaryType.BANG REF_12 
CONDITION TMP_33"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
doBurn(msg.sender,fee)

IRs:
TMP_34(bool) = INTERNAL_CALL, StandardToken.doBurn(address,uint256)(msg.sender,fee)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 33041.sol-StandardToken-getFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
onePercentOfValue = _value.onePercent()

IRs:
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.onePercent(uint256), arguments:['_value'] 
onePercentOfValue(uint256) := TMP_23(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
fee = uint256(maxFee).power(decimals)

IRs:
TMP_24 = CONVERT maxFee to uint256
TMP_25(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.power(uint256,uint256), arguments:['TMP_24', 'decimals'] 
fee(uint256) := TMP_25(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_value.add(onePercentOfValue) >= fee

IRs:
TMP_26(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_value', 'onePercentOfValue'] 
TMP_27(bool) = TMP_26 >= fee
CONDITION TMP_27"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
fee

IRs:
RETURN fee"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_value.add(onePercentOfValue) < fee

IRs:
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_value', 'onePercentOfValue'] 
TMP_29(bool) = TMP_28 < fee
CONDITION TMP_29"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
onePercentOfValue

IRs:
RETURN onePercentOfValue"];
8[label="Node Type: END_IF 8
"];
}
// Function: 33041.sol-StandardToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
}
// Function: 33041.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
fee = getFee(_value)

IRs:
TMP_17(uint256) = INTERNAL_CALL, StandardToken.getFee(uint256)(_value)
fee(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
balances[msg.sender].add(fee) >= _value && _value > 0

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_0', 'fee'] 
TMP_19(bool) = TMP_18 >= _value
TMP_20(bool) = _value > 0
TMP_21(bool) = TMP_19 && TMP_20
CONDITION TMP_21"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
doTransfer(msg.sender,_to,_value,fee)

IRs:
INTERNAL_CALL, StandardToken.doTransfer(address,address,uint256,uint256)(msg.sender,_to,_value,fee)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33041.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
fee = getFee(_value)

IRs:
TMP_42(uint256) = INTERNAL_CALL, StandardToken.getFee(uint256)(_value)
fee(uint256) := TMP_42(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[msg.sender] > fee

IRs:
REF_17(uint256) -> balances[_from]
TMP_43(bool) = REF_17 >= _value
REF_18(mapping(address => uint256)) -> allowed[_from]
REF_19(uint256) -> REF_18[msg.sender]
TMP_44(bool) = REF_19 >= _value
TMP_45(bool) = TMP_43 && TMP_44
TMP_46(bool) = _value > 0
TMP_47(bool) = TMP_45 && TMP_46
REF_20(uint256) -> balances[msg.sender]
TMP_48(bool) = REF_20 > fee
TMP_49(bool) = TMP_47 && TMP_48
CONDITION TMP_49"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
doTransfer(_from,_to,_value,getFee(_value))

IRs:
TMP_50(uint256) = INTERNAL_CALL, StandardToken.getFee(uint256)(_value)
INTERNAL_CALL, StandardToken.doTransfer(address,address,uint256,uint256)(_from,_to,_value,TMP_50)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value.add(fee))

IRs:
REF_21(mapping(address => uint256)) -> allowed[_from]
REF_22(uint256) -> REF_21[msg.sender]
REF_23(mapping(address => uint256)) -> allowed[_from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_value', 'fee'] 
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_24', 'TMP_52'] 
REF_22(uint256) (->allowed) := TMP_53(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33041.sol-TestTokenTen-TestTokenTen()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_totalSupply = 800000000000000000000000000

IRs:
_totalSupply(uint256) := 800000000000000000000000000(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_owner = msg.sender

IRs:
_owner(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = _totalSupply

IRs:
REF_64(uint256) -> balances[msg.sender]
REF_64(uint256) (->balances) := _totalSupply(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allocate(0x5feD3A18Df4ac9a1e6F767fB47889B04Ee4805f8,55)

IRs:
INTERNAL_CALL, TestTokenTen.allocate(address,uint256)(547644460816483523302634224588350553394577409528,55)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allocate(0x077C3f919130282001e88A5fDbA45aA0230a0190,20)

IRs:
INTERNAL_CALL, TestTokenTen.allocate(address,uint256)(42733765408329681841096804780692382942493278608,20)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allocate(0x7489D3112D515008ae61d8c5c08D788F90b66dd2,20)

IRs:
INTERNAL_CALL, TestTokenTen.allocate(address,uint256)(665316518045133378385856208506873255920628297170,20)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allocate(0x15D4EEB0a8b695d7a9A8B7eDBA94A1F65Be1aBE6,5)

IRs:
INTERNAL_CALL, TestTokenTen.allocate(address,uint256)(124637357007395799624485084467421275868778048486,5)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
maxFee = 250

IRs:
maxFee(uint256) := 250(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
name = TestToken10

IRs:
name(string) := TestToken10(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
symbol = TT10

IRs:
symbol(string) := TT10(string)"];
}
// Function: 33041.sol-TestTokenTen-addToWithoutFee(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _owner)

IRs:
TMP_103(bool) = msg.sender == _owner
TMP_104(None) = SOLIDITY_CALL require(bool)(TMP_103)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
withoutFee[_address] = true

IRs:
REF_68(bool) -> withoutFee[_address]
REF_68(bool) (->withoutFee) := True(bool)"];
}
// Function: 33041.sol-TestTokenTen-allocate(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bal = _totalSupply.onePercent().mul(percent)

IRs:
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.onePercent(uint256), arguments:['_totalSupply'] 
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_100', 'percent'] 
bal(uint256) := TMP_101(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
withoutFee[_address] = true

IRs:
REF_67(bool) -> withoutFee[_address]
REF_67(bool) (->withoutFee) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
doTransfer(msg.sender,_address,bal,0)

IRs:
INTERNAL_CALL, StandardToken.doTransfer(address,address,uint256,uint256)(msg.sender,_address,bal,0)"];
}
// Function: 33041.sol-TestTokenTen-allowance(address,address)
digraph{
}
// Function: 33041.sol-TestTokenTen-approve(address,uint256)
digraph{
}
// Function: 33041.sol-TestTokenTen-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_69(mapping(address => uint256)) -> allowed[msg.sender]
REF_70(uint256) -> REF_69[_spender]
REF_70(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

IRs:
TMP_106(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_107 = CONVERT TMP_106 to bytes32
TMP_108 = CONVERT TMP_107 to bytes4
TMP_109(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_108', 'msg.sender', '_value', 'this', '_extraData']  
TMP_110 = UnaryType.BANG TMP_109 
CONDITION TMP_110"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_111(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33041.sol-TestTokenTen-balanceOf(address)
digraph{
}
// Function: 33041.sol-TestTokenTen-burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
doBurn(_from,_value)

IRs:
TMP_80(bool) = INTERNAL_CALL, StandardToken.doBurn(address,uint256)(_from,_value)
RETURN TMP_80"];
2[label="Node Type: RETURN 2

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33041.sol-TestTokenTen-doBurn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf(_from) >= _value)

IRs:
TMP_74(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(_from)
TMP_75(bool) = TMP_74 >= _value
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_45(uint256) -> balances[_from]
REF_46(uint256) -> balances[_from]
TMP_77(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_46', '_value'] 
REF_45(uint256) (->balances) := TMP_77(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalSupply = _totalSupply.sub(_value)

IRs:
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', '_value'] 
_totalSupply(uint256) := TMP_78(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33041.sol-TestTokenTen-doTransfer(address,address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_38(uint256) -> balances[_from]
REF_39(uint256) -> balances[_from]
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_39', '_value'] 
REF_38(uint256) (->balances) := TMP_69(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_41(uint256) -> balances[_to]
REF_42(uint256) -> balances[_to]
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_42', '_value'] 
REF_41(uint256) (->balances) := TMP_70(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! withoutFee[_from]

IRs:
REF_44(bool) -> withoutFee[_from]
TMP_72 = UnaryType.BANG REF_44 
CONDITION TMP_72"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
doBurn(msg.sender,fee)

IRs:
TMP_73(bool) = INTERNAL_CALL, StandardToken.doBurn(address,uint256)(msg.sender,fee)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 33041.sol-TestTokenTen-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
revert()()

IRs:
TMP_95(None) = SOLIDITY_CALL revert()()"];
}
// Function: 33041.sol-TestTokenTen-getFee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
onePercentOfValue = _value.onePercent()

IRs:
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.onePercent(uint256), arguments:['_value'] 
onePercentOfValue(uint256) := TMP_62(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
fee = uint256(maxFee).power(decimals)

IRs:
TMP_63 = CONVERT maxFee to uint256
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.power(uint256,uint256), arguments:['TMP_63', 'decimals'] 
fee(uint256) := TMP_64(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_value.add(onePercentOfValue) >= fee

IRs:
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_value', 'onePercentOfValue'] 
TMP_66(bool) = TMP_65 >= fee
CONDITION TMP_66"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
fee

IRs:
RETURN fee"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_value.add(onePercentOfValue) < fee

IRs:
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_value', 'onePercentOfValue'] 
TMP_68(bool) = TMP_67 < fee
CONDITION TMP_68"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
onePercentOfValue

IRs:
RETURN onePercentOfValue"];
8[label="Node Type: END_IF 8
"];
}
// Function: 33041.sol-TestTokenTen-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = H1.0

IRs:
version(string) := H1.0(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
feeInfo = Each operation costs 1% of the transaction amount, but not more than 250 tokens.

IRs:
feeInfo(string) := Each operation costs 1% of the transaction amount, but not more than 250 tokens.(string)"];
}
// Function: 33041.sol-TestTokenTen-totalSupply()
digraph{
}
// Function: 33041.sol-TestTokenTen-transfer(address,uint256)
digraph{
}
// Function: 33041.sol-TestTokenTen-transferFrom(address,address,uint256)
digraph{
}
// Function: 33041.sol-Token-allowance(address,address)
digraph{
}
// Function: 33041.sol-Token-approve(address,uint256)
digraph{
}
// Function: 33041.sol-Token-balanceOf(address)
digraph{
}
// Function: 33041.sol-Token-totalSupply()
digraph{
}
// Function: 33041.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 33041.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
