digraph G {
// Function: 33103.sol-Ownable-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = addr

IRs:
newOwner(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33103.sol-Ownable-confirmOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newOwner

IRs:
TMP_1(bool) = msg.sender == newOwner
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 33103.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
owner == msg.sender

IRs:
TMP_2(bool) = owner == msg.sender
CONDITION TMP_2"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 33103.sol-Ownable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33103.sol-Token-WithdrawToken(address,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token.call(bytes4(sha3()(transfer(address,uint256))),to,amount)

IRs:
TMP_5(bytes32) = SOLIDITY_CALL sha3()(transfer(address,uint256))
TMP_6 = CONVERT TMP_5 to bytes4
TMP_7(bool) = LOW_LEVEL_CALL, dest:token, function:call, arguments:['TMP_6', 'to', 'amount']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33103.sol-Token-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = addr

IRs:
newOwner(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33103.sol-Token-confirmOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newOwner

IRs:
TMP_4(bool) = msg.sender == newOwner
CONDITION TMP_4"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 33103.sol-Token-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
owner == msg.sender

IRs:
TMP_9(bool) = owner == msg.sender
CONDITION TMP_9"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 33103.sol-Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33103.sol-TokenBank-Bal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
this.balance

IRs:
REF_10(uint256) = SOLIDITY_CALL balance(address)(this)
RETURN REF_10"];
}
// Function: 33103.sol-TokenBank-Deposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value >= MinDeposit

IRs:
TMP_17(bool) = msg.value >= MinDeposit
CONDITION TMP_17"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Holders[msg.sender] += msg.value

IRs:
REF_2(uint256) -> Holders[msg.sender]
REF_2(-> Holders) = REF_2 + msg.value"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 33103.sol-TokenBank-WitdrawTokenToHolder(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
Holders[_to] > 0

IRs:
REF_3(uint256) -> Holders[_to]
TMP_18(bool) = REF_3 > 0
CONDITION TMP_18"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Holders[_to] = 0

IRs:
REF_4(uint256) -> Holders[_to]
REF_4(uint256) (->Holders) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
WithdrawToken(_token,_amount,_to)

IRs:
INTERNAL_CALL, Token.WithdrawToken(address,uint256,address)(_token,_amount,_to)"];
3->4;
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 33103.sol-TokenBank-WithdrawToHolder(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
Holders[msg.sender] > 0

IRs:
REF_5(uint256) -> Holders[msg.sender]
TMP_21(bool) = REF_5 > 0
CONDITION TMP_21"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
Holders[_addr] >= _wei

IRs:
REF_6(uint256) -> Holders[_addr]
TMP_22(bool) = REF_6 >= _wei
CONDITION TMP_22"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr.call.value(_wei)

IRs:
REF_7(None) -> _addr.call
REF_8(None) -> REF_7.value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Holders[_addr] -= _wei

IRs:
REF_9(uint256) -> Holders[_addr]
REF_9(-> Holders) = REF_9 - _wei"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
// Function: 33103.sol-TokenBank-WithdrawToken(address,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token.call(bytes4(sha3()(transfer(address,uint256))),to,amount)

IRs:
TMP_10(bytes32) = SOLIDITY_CALL sha3()(transfer(address,uint256))
TMP_11 = CONVERT TMP_10 to bytes4
TMP_12(bool) = LOW_LEVEL_CALL, dest:token, function:call, arguments:['TMP_11', 'to', 'amount']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33103.sol-TokenBank-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
newOwner = addr

IRs:
newOwner(address) := addr(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33103.sol-TokenBank-confirmOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == newOwner

IRs:
TMP_15(bool) = msg.sender == newOwner
CONDITION TMP_15"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 33103.sol-TokenBank-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Deposit()

IRs:
INTERNAL_CALL, TokenBank.Deposit()()"];
}
// Function: 33103.sol-TokenBank-initTokenBank()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MinDeposit = 1000000000000000000

IRs:
MinDeposit(uint256) := 1000000000000000000(uint256)"];
}
// Function: 33103.sol-TokenBank-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
owner == msg.sender

IRs:
TMP_25(bool) = owner == msg.sender
CONDITION TMP_25"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 33103.sol-TokenBank-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
}
