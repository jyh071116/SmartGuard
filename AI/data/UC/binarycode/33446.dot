digraph G {
// Function: 33446.sol-SafeMath-SafeMath()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 33446.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_0(uint256) = _x + _y
z(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_1(bool) = z >= _x
TMP_2(None) = SOLIDITY_CALL assert(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 33446.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x * _y

IRs:
TMP_6(uint256) = _x * _y
z(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_x == 0 || z / _x == _y)

IRs:
TMP_7(bool) = _x == 0
TMP_8(uint256) = z / _x
TMP_9(bool) = TMP_8 == _y
TMP_10(bool) = TMP_7 || TMP_9
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 33446.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_x >= _y)

IRs:
TMP_3(bool) = _x >= _y
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_5(uint256) = _x - _y
RETURN TMP_5"];
}
// Function: 33446.sol-TokenAuction-SafeMath()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 33446.sol-TokenAuction-TokenAuction()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33446.sol-TokenAuction-afterAuction()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((stateMask & AUCTION_END_EVENT) != 0)

IRs:
TMP_141(uint256) = stateMask & AUCTION_END_EVENT
TMP_142(bool) = TMP_141 != 0
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33446.sol-TokenAuction-afterSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((stateMask & SALE_END_EVENT) != 0)

IRs:
TMP_148(uint256) = stateMask & SALE_END_EVENT
TMP_149(bool) = TMP_148 != 0
TMP_150(None) = SOLIDITY_CALL require(bool)(TMP_149)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33446.sol-TokenAuction-depositSecretBid(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
! (msg.sender == owner && ! isLocked) && (_hash == 0 || secretBids[msg.sender].hash != 0)

IRs:
TMP_54(bool) = msg.sender == owner
TMP_55 = UnaryType.BANG isLocked 
TMP_56(bool) = TMP_54 && TMP_55
TMP_57 = UnaryType.BANG TMP_56 
TMP_58(bool) = _hash == 0
REF_1(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_2(bytes32) -> REF_1.hash
TMP_59(bool) = REF_2 != 0
TMP_60(bool) = TMP_58 || TMP_59
TMP_61(bool) = TMP_57 && TMP_60
CONDITION TMP_61"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_62(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
secretBids[msg.sender].hash = _hash

IRs:
REF_3(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_4(bytes32) -> REF_3.hash
REF_4(bytes32) (->secretBids) := _hash(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
secretBids[msg.sender].deposit = msg.value

IRs:
REF_5(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_6(uint256) -> REF_5.deposit
REF_6(uint256) (->secretBids) := msg.value(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
secretBids[msg.sender].disqualified = false

IRs:
REF_7(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_8(bool) -> REF_7.disqualified
REF_8(bool) (->secretBids) := False(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
secretBidCount += 1

IRs:
secretBidCount(uint256) = secretBidCount + 1"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_batch = secretBidCount / batchSize

IRs:
TMP_63(uint256) = secretBidCount / batchSize
_batch(uint256) := TMP_63(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
SecretBidEvent(_batch,msg.sender,msg.value,_hash,_message)

IRs:
Emit SecretBidEvent(_batch,msg.sender,msg.value,_hash,_message)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
duringAuction()

IRs:
MODIFIER_CALL, TokenAuction.duringAuction()()"];
10->1;
}
// Function: 33446.sol-TokenAuction-disqualifyBid(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
secretBids[_from].disqualified = true

IRs:
REF_9(TokenAuction.SecretBid) -> secretBids[_from]
REF_10(bool) -> REF_9.disqualified
REF_10(bool) (->secretBids) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
BidDisqualifiedEvent(_from,secretBids[_from].hash)

IRs:
REF_11(TokenAuction.SecretBid) -> secretBids[_from]
REF_12(bytes32) -> REF_11.hash
Emit BidDisqualifiedEvent(_from,REF_12)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_doRefund == true

IRs:
TMP_67(bool) = _doRefund == True
CONDITION TMP_67"];
3->4[label="True"];
3->11[label="False"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_amount = secretBids[_from].deposit

IRs:
REF_13(TokenAuction.SecretBid) -> secretBids[_from]
REF_14(uint256) -> REF_13.deposit
_amount(uint256) := REF_14(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
secretBids[_from].hash = bytes32(0)

IRs:
REF_15(TokenAuction.SecretBid) -> secretBids[_from]
REF_16(bytes32) -> REF_15.hash
TMP_68 = CONVERT 0 to bytes32
REF_16(bytes32) (->secretBids) := TMP_68(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
secretBids[_from].deposit = 0

IRs:
REF_17(TokenAuction.SecretBid) -> secretBids[_from]
REF_18(uint256) -> REF_17.deposit
REF_18(uint256) (->secretBids) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
secretBidCount = safeSub(secretBidCount,1)

IRs:
TMP_69(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(secretBidCount,1)
secretBidCount(uint256) := TMP_69(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_amount > 0

IRs:
TMP_70(bool) = _amount > 0
CONDITION TMP_70"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_from.transfer(_amount)

IRs:
Transfer dest:_from value:_amount"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
duringAuction()

IRs:
MODIFIER_CALL, TokenAuction.duringAuction()()"];
13->1;
}
// Function: 33446.sol-TokenAuction-doDeveloperGrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_quantity = safeMul(purchasedCount,developerPctX10K) / 1000000

IRs:
TMP_111(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(purchasedCount,developerPctX10K)
TMP_112(uint256) = TMP_111 / 1000000
_quantity(uint256) := TMP_112(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_tokensLeft = token.balanceOf(this)

IRs:
TMP_113(uint256) = HIGH_LEVEL_CALL, dest:token(iBurnableToken), function:balanceOf, arguments:['this']  
_tokensLeft(uint256) := TMP_113(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_quantity > _tokensLeft

IRs:
TMP_114(bool) = _quantity > _tokensLeft
CONDITION TMP_114"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_quantity = _tokensLeft

IRs:
_quantity(uint256) := _tokensLeft(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_quantity > 0

IRs:
TMP_115(bool) = _quantity > 0
CONDITION TMP_115"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_tokensLeft -= _quantity

IRs:
_tokensLeft(uint256) = _tokensLeft - _quantity"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! token.transfer(developers,_quantity)

IRs:
TMP_116(bool) = HIGH_LEVEL_CALL, dest:token(iBurnableToken), function:transfer, arguments:['developers', '_quantity']  
TMP_117 = UnaryType.BANG TMP_116 
CONDITION TMP_117"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
revert()()

IRs:
TMP_118(None) = SOLIDITY_CALL revert()()"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
token.unPaidBurnTokens(_tokensLeft)

IRs:
HIGH_LEVEL_CALL, dest:token(iBurnableToken), function:unPaidBurnTokens, arguments:['_tokensLeft']  "];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
afterSale()

IRs:
MODIFIER_CALL, TokenAuction.afterSale()()"];
13->1;
}
// Function: 33446.sol-TokenAuction-duringAuction()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((stateMask & (AUCTION_START_EVENT | AUCTION_END_EVENT)) == AUCTION_START_EVENT)

IRs:
TMP_137(uint256) = AUCTION_START_EVENT | AUCTION_END_EVENT
TMP_138(uint256) = stateMask & TMP_137
TMP_139(bool) = TMP_138 == AUCTION_START_EVENT
TMP_140(None) = SOLIDITY_CALL require(bool)(TMP_139)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33446.sol-TokenAuction-duringSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((stateMask & (SALE_START_EVENT | SALE_END_EVENT)) == SALE_START_EVENT)

IRs:
TMP_144(uint256) = SALE_START_EVENT | SALE_END_EVENT
TMP_145(uint256) = stateMask & TMP_144
TMP_146(bool) = TMP_145 == SALE_START_EVENT
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33446.sol-TokenAuction-executeBid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
executeBidFor(msg.sender,_secret,_price,_quantity)

IRs:
INTERNAL_CALL, TokenAuction.executeBidFor(address,uint256,uint256,uint256)(msg.sender,_secret,_price,_quantity)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
duringSale()

IRs:
MODIFIER_CALL, TokenAuction.duringSale()()"];
2->1;
}
// Function: 33446.sol-TokenAuction-executeBidFor(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->35;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
computedHash = keccak256()(_secret,_price,_quantity)

IRs:
TMP_76(bytes32) = SOLIDITY_CALL keccak256()(_secret,_price,_quantity)
computedHash(bytes32) := TMP_76(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(secretBids[_addr].hash == computedHash)

IRs:
REF_20(TokenAuction.SecretBid) -> secretBids[_addr]
REF_21(bytes32) -> REF_20.hash
TMP_77(bool) = REF_21 == computedHash
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
secretBids[_addr].deposit > 0

IRs:
REF_22(TokenAuction.SecretBid) -> secretBids[_addr]
REF_23(uint256) -> REF_22.deposit
TMP_79(bool) = REF_23 > 0
CONDITION TMP_79"];
3->4[label="True"];
3->34[label="False"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_cost = 0

IRs:
_cost(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_refund = 0

IRs:
_refund(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_priceWei = safeMul(_price,1000000000000)

IRs:
TMP_80(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(_price,1000000000000)
_priceWei(uint256) := TMP_80(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_priceWei >= strikePrice && ! secretBids[_addr].disqualified

IRs:
TMP_81(bool) = _priceWei >= strikePrice
REF_24(TokenAuction.SecretBid) -> secretBids[_addr]
REF_25(bool) -> REF_24.disqualified
TMP_82 = UnaryType.BANG REF_25 
TMP_83(bool) = TMP_81 && TMP_82
CONDITION TMP_83"];
7->8[label="True"];
7->25[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_lowLevelQuantity = safeMul(_quantity,decimalMultiplier)

IRs:
TMP_84(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(_quantity,decimalMultiplier)
_lowLevelQuantity(uint256) := TMP_84(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_lowLevelPrice = strikePrice / decimalMultiplier

IRs:
TMP_85(uint256) = strikePrice / decimalMultiplier
_lowLevelPrice(uint256) := TMP_85(uint256)"];
9->36;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_maxPurchase = safeSub(token.balanceOf(this),developerReserve)

IRs:
TMP_86(uint256) = HIGH_LEVEL_CALL, dest:token(iBurnableToken), function:balanceOf, arguments:['this']  
TMP_87(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_86,developerReserve)
_maxPurchase(uint256) := TMP_87(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_purchaseCount > _maxPurchase

IRs:
TMP_88(bool) = _purchaseCount > _maxPurchase
CONDITION TMP_88"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_purchaseCount = _maxPurchase

IRs:
_purchaseCount(uint256) := _maxPurchase(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_cost = safeMul(_purchaseCount,_lowLevelPrice)

IRs:
TMP_89(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(_purchaseCount,_lowLevelPrice)
_cost(uint256) := TMP_89(uint256)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
secretBids[_addr].deposit >= _cost

IRs:
REF_27(TokenAuction.SecretBid) -> secretBids[_addr]
REF_28(uint256) -> REF_27.deposit
TMP_90(bool) = REF_28 >= _cost
CONDITION TMP_90"];
16->17[label="True"];
16->24[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
secretBids[_addr].deposit -= _cost

IRs:
REF_29(TokenAuction.SecretBid) -> secretBids[_addr]
REF_30(uint256) -> REF_29.deposit
REF_30(-> secretBids) = REF_30 - _cost"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
proceeds = safeAdd(proceeds,_cost)

IRs:
TMP_91(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(proceeds,_cost)
proceeds(uint256) := TMP_91(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
secretBids[_addr].tokens += _purchaseCount

IRs:
REF_31(TokenAuction.SecretBid) -> secretBids[_addr]
REF_32(uint256) -> REF_31.tokens
REF_32(-> secretBids) = REF_32 + _purchaseCount"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
purchasedCount += _purchaseCount

IRs:
purchasedCount(uint256) = purchasedCount + _purchaseCount"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
! token.transfer(_addr,_purchaseCount)

IRs:
TMP_92(bool) = HIGH_LEVEL_CALL, dest:token(iBurnableToken), function:transfer, arguments:['_addr', '_purchaseCount']  
TMP_93 = UnaryType.BANG TMP_92 
CONDITION TMP_93"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
revert()()

IRs:
TMP_94(None) = SOLIDITY_CALL revert()()"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
secretBids[_addr].deposit > 0

IRs:
REF_34(TokenAuction.SecretBid) -> secretBids[_addr]
REF_35(uint256) -> REF_34.deposit
TMP_95(bool) = REF_35 > 0
CONDITION TMP_95"];
26->27[label="True"];
26->30[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_refund = secretBids[_addr].deposit

IRs:
REF_36(TokenAuction.SecretBid) -> secretBids[_addr]
REF_37(uint256) -> REF_36.deposit
_refund(uint256) := REF_37(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
secretBids[_addr].refund += _refund

IRs:
REF_38(TokenAuction.SecretBid) -> secretBids[_addr]
REF_39(uint256) -> REF_38.refund
REF_39(-> secretBids) = REF_39 + _refund"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
secretBids[_addr].deposit = 0

IRs:
REF_40(TokenAuction.SecretBid) -> secretBids[_addr]
REF_41(uint256) -> REF_40.deposit
REF_41(uint256) (->secretBids) := 0(uint256)"];
29->30;
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
executedCount += 1

IRs:
executedCount(uint256) = executedCount + 1"];
31->32;
32[label="Node Type: NEW VARIABLE 32

EXPRESSION:
_batch = executedCount / batchSize

IRs:
TMP_96(uint256) = executedCount / batchSize
_batch(uint256) := TMP_96(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
ExecuteEvent(_batch,_addr,_cost,_refund)

IRs:
Emit ExecuteEvent(_batch,_addr,_cost,_refund)"];
33->34;
34[label="Node Type: END_IF 34
"];
35[label="Node Type: EXPRESSION 35

EXPRESSION:
duringSale()

IRs:
MODIFIER_CALL, TokenAuction.duringSale()()"];
35->1;
36[label="Node Type: IF 36

EXPRESSION:
(_priceWei > strikePrice)

IRs:
TMP_99(bool) = _priceWei > strikePrice
CONDITION TMP_99"];
36->37[label="True"];
36->38[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_purchaseCount = _lowLevelQuantity

IRs:
_purchaseCount(uint256) := _lowLevelQuantity(uint256)"];
37->39;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
_purchaseCount = (safeMul(strikePricePctX10,_lowLevelQuantity) / 1000)

IRs:
TMP_100(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(strikePricePctX10,_lowLevelQuantity)
TMP_101(uint256) = TMP_100 / 1000
_purchaseCount(uint256) := TMP_101(uint256)"];
38->39;
39[label="Node Type: END_IF 39
"];
39->11;
}
// Function: 33446.sol-TokenAuction-expireBid(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: IF 1

EXPRESSION:
secretBids[_addr].deposit > 0

IRs:
REF_42(TokenAuction.SecretBid) -> secretBids[_addr]
REF_43(uint256) -> REF_42.deposit
TMP_102(bool) = REF_43 > 0
CONDITION TMP_102"];
1->2[label="True"];
1->10[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_forfeit = secretBids[_addr].deposit / 2

IRs:
REF_44(TokenAuction.SecretBid) -> secretBids[_addr]
REF_45(uint256) -> REF_44.deposit
TMP_103(uint256) = REF_45 / 2
_forfeit(uint256) := TMP_103(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
proceeds = safeAdd(proceeds,_forfeit)

IRs:
TMP_104(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(proceeds,_forfeit)
proceeds(uint256) := TMP_104(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_refund = safeSub(secretBids[_addr].deposit,_forfeit)

IRs:
REF_46(TokenAuction.SecretBid) -> secretBids[_addr]
REF_47(uint256) -> REF_46.deposit
TMP_105(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_47,_forfeit)
_refund(uint256) := TMP_105(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
secretBids[msg.sender].refund += _refund

IRs:
REF_48(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_49(uint256) -> REF_48.refund
REF_49(-> secretBids) = REF_49 + _refund"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
secretBids[_addr].deposit = 0

IRs:
REF_50(TokenAuction.SecretBid) -> secretBids[_addr]
REF_51(uint256) -> REF_50.deposit
REF_51(uint256) (->secretBids) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
expiredCount += 1

IRs:
expiredCount(uint256) = expiredCount + 1"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_batch = expiredCount / batchSize

IRs:
TMP_106(uint256) = expiredCount / batchSize
_batch(uint256) := TMP_106(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ExpireEvent(_batch,_addr,_forfeit,_refund)

IRs:
Emit ExpireEvent(_batch,_addr,_forfeit,_refund)"];
9->10;
10[label="Node Type: END_IF 10
"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
afterSale()

IRs:
MODIFIER_CALL, TokenAuction.afterSale()()"];
12->1;
}
// Function: 33446.sol-TokenAuction-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proceeds = safeAdd(proceeds,msg.value)

IRs:
TMP_52(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(proceeds,msg.value)
proceeds(uint256) := TMP_52(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
BizarreEvent(msg.sender,bizarre payment,msg.value)

IRs:
Emit BizarreEvent(msg.sender,bizarre payment,msg.value)"];
}
// Function: 33446.sol-TokenAuction-haraKiri()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_130(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
unlockedOnly()

IRs:
MODIFIER_CALL, TokenAuction.unlockedOnly()()"];
3->1;
}
// Function: 33446.sol-TokenAuction-houseKeep()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_oldMask = stateMask

IRs:
_oldMask(uint256) := stateMask(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now >= auctionStart

IRs:
TMP_40(bool) = now >= auctionStart
CONDITION TMP_40"];
2->3[label="True"];
2->13[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
stateMask |= AUCTION_START_EVENT

IRs:
stateMask(uint256) = stateMask | AUCTION_START_EVENT"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
now >= auctionEnd

IRs:
TMP_41(bool) = now >= auctionEnd
CONDITION TMP_41"];
4->5[label="True"];
4->12[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
stateMask |= AUCTION_END_EVENT

IRs:
stateMask(uint256) = stateMask | AUCTION_END_EVENT"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
strikePrice > 0

IRs:
TMP_42(bool) = strikePrice > 0
CONDITION TMP_42"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
stateMask |= SALE_START_EVENT

IRs:
stateMask(uint256) = stateMask | SALE_START_EVENT"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
now >= saleEnd

IRs:
TMP_43(bool) = now >= saleEnd
CONDITION TMP_43"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
stateMask |= SALE_END_EVENT

IRs:
stateMask(uint256) = stateMask | SALE_END_EVENT"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
stateMask != _oldMask

IRs:
TMP_44(bool) = stateMask != _oldMask
CONDITION TMP_44"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
StateChangeEvent(stateMask)

IRs:
Emit StateChangeEvent(stateMask)"];
15->16;
16[label="Node Type: END_IF 16
"];
}
// Function: 33446.sol-TokenAuction-lock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isLocked = true

IRs:
isLocked(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
2->1;
}
// Function: 33446.sol-TokenAuction-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_133(bool) = msg.sender == owner
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33446.sol-TokenAuction-payUnderwriter()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == underwriter)

IRs:
TMP_121(bool) = msg.sender == owner
TMP_122(bool) = msg.sender == underwriter
TMP_123(bool) = TMP_121 || TMP_122
TMP_124(None) = SOLIDITY_CALL require(bool)(TMP_123)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_amount = proceeds

IRs:
_amount(uint256) := proceeds(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
proceeds = 0

IRs:
proceeds(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! underwriter.call.gas(contractSendGas).value(_amount)()

IRs:
TMP_127(bool) = LOW_LEVEL_CALL, dest:underwriter, function:call, arguments:[] value:_amount gas:contractSendGas
TMP_128 = UnaryType.BANG TMP_127 
CONDITION TMP_128"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_129(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 33446.sol-TokenAuction-reserveDeveloperTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(developerPctX10K < 1000000)

IRs:
TMP_32(bool) = developerPctX10K < 1000000
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
developers = _developers

IRs:
developers(address) := _developers(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
developerPctX10K = _developerPctX10K

IRs:
developerPctX10K(uint256) := _developerPctX10K(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_tokenCount = token.balanceOf(this)

IRs:
TMP_34(uint256) = HIGH_LEVEL_CALL, dest:token(iBurnableToken), function:balanceOf, arguments:['this']  
_tokenCount(uint256) := TMP_34(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
developerReserve = safeMul(_tokenCount,developerPctX10K) / 1000000

IRs:
TMP_35(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(_tokenCount,developerPctX10K)
TMP_36(uint256) = TMP_35 / 1000000
developerReserve(uint256) := TMP_36(uint256)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
unlockedOnly()

IRs:
MODIFIER_CALL, TokenAuction.unlockedOnly()()"];
7->1;
}
// Function: 33446.sol-TokenAuction-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_12(uint256) = _x + _y
z(uint256) := TMP_12(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_13(bool) = z >= _x
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 33446.sol-TokenAuction-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x * _y

IRs:
TMP_18(uint256) = _x * _y
z(uint256) := TMP_18(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_x == 0 || z / _x == _y)

IRs:
TMP_19(bool) = _x == 0
TMP_20(uint256) = z / _x
TMP_21(bool) = TMP_20 == _y
TMP_22(bool) = TMP_19 || TMP_21
TMP_23(None) = SOLIDITY_CALL assert(bool)(TMP_22)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 33446.sol-TokenAuction-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_x >= _y)

IRs:
TMP_15(bool) = _x >= _y
TMP_16(None) = SOLIDITY_CALL assert(bool)(TMP_15)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_17(uint256) = _x - _y
RETURN TMP_17"];
}
// Function: 33446.sol-TokenAuction-setAuctionParms(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
auctionStart = _auctionStart

IRs:
auctionStart(uint256) := _auctionStart(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auctionEnd = safeAdd(_auctionStart,_auctionDuration)

IRs:
TMP_27(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(_auctionStart,_auctionDuration)
auctionEnd(uint256) := TMP_27(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
saleDuration = _saleDuration

IRs:
saleDuration(uint256) := _saleDuration(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
stateMask != 0

IRs:
TMP_28(bool) = stateMask != 0
CONDITION TMP_28"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
stateMask = 0

IRs:
stateMask(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
strikePrice = 0

IRs:
strikePrice(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
executedCount = 0

IRs:
executedCount(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
houseKeep()

IRs:
INTERNAL_CALL, TokenAuction.houseKeep()()"];
8->9;
9[label="Node Type: END_IF 9
"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
unlockedOnly()

IRs:
MODIFIER_CALL, TokenAuction.unlockedOnly()()"];
11->1;
}
// Function: 33446.sol-TokenAuction-setStrikePrice(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(executedCount == 0)

IRs:
TMP_46(bool) = executedCount == 0
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
strikePrice = _strikePrice

IRs:
strikePrice(uint256) := _strikePrice(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
strikePricePctX10 = _strikePricePctX10

IRs:
strikePricePctX10(uint256) := _strikePricePctX10(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
saleEnd = safeAdd(now,saleDuration)

IRs:
TMP_48(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(now,saleDuration)
saleEnd(uint256) := TMP_48(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
houseKeep()

IRs:
INTERNAL_CALL, TokenAuction.houseKeep()()"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
afterAuction()

IRs:
MODIFIER_CALL, TokenAuction.afterAuction()()"];
7->1;
}
// Function: 33446.sol-TokenAuction-setToken(iBurnableToken,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = _token

IRs:
token(iBurnableToken) := _token(iBurnableToken)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
decimalMultiplier = _decimalMultiplier

IRs:
decimalMultiplier(uint256) := _decimalMultiplier(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
underwriter = _underwriter

IRs:
underwriter(address) := _underwriter(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
unlockedOnly()

IRs:
MODIFIER_CALL, TokenAuction.unlockedOnly()()"];
5->1;
}
// Function: 33446.sol-TokenAuction-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
AUCTION_START_EVENT = 0x01

IRs:
AUCTION_START_EVENT(uint256) := 1(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
AUCTION_END_EVENT = 0x02

IRs:
AUCTION_END_EVENT(uint256) := 2(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
SALE_START_EVENT = 0x04

IRs:
SALE_START_EVENT(uint256) := 4(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
SALE_END_EVENT = 0x08

IRs:
SALE_END_EVENT(uint256) := 8(uint256)"];
}
// Function: 33446.sol-TokenAuction-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
batchSize = 4

IRs:
batchSize(uint256) := 4(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
contractSendGas = 100000

IRs:
contractSendGas(uint256) := 100000(uint256)"];
}
// Function: 33446.sol-TokenAuction-tune(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
batchSize = _batchSize

IRs:
batchSize(uint256) := _batchSize(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
contractSendGas = _contractSendGas

IRs:
contractSendGas(uint256) := _contractSendGas(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
3->1;
}
// Function: 33446.sol-TokenAuction-unlockedOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isLocked)

IRs:
TMP_135 = UnaryType.BANG isLocked 
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33446.sol-TokenAuction-withdrawRefund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_amount = secretBids[msg.sender].refund

IRs:
REF_52(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_53(uint256) -> REF_52.refund
_amount(uint256) := REF_53(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
secretBids[msg.sender].refund = 0

IRs:
REF_54(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_55(uint256) -> REF_54.refund
REF_55(uint256) (->secretBids) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.transfer(_amount)

IRs:
Transfer dest:msg.sender value:_amount"];
}
// Function: 33446.sol-iBurnableToken-allowance(address,address)
digraph{
}
// Function: 33446.sol-iBurnableToken-approve(address,uint256)
digraph{
}
// Function: 33446.sol-iBurnableToken-balanceOf(address)
digraph{
}
// Function: 33446.sol-iBurnableToken-burnTokens(uint256)
digraph{
}
// Function: 33446.sol-iBurnableToken-totalSupply()
digraph{
}
// Function: 33446.sol-iBurnableToken-transfer(address,uint256)
digraph{
}
// Function: 33446.sol-iBurnableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 33446.sol-iBurnableToken-unPaidBurnTokens(uint256)
digraph{
}
// Function: 33446.sol-iERC20Token-allowance(address,address)
digraph{
}
// Function: 33446.sol-iERC20Token-approve(address,uint256)
digraph{
}
// Function: 33446.sol-iERC20Token-balanceOf(address)
digraph{
}
// Function: 33446.sol-iERC20Token-totalSupply()
digraph{
}
// Function: 33446.sol-iERC20Token-transfer(address,uint256)
digraph{
}
// Function: 33446.sol-iERC20Token-transferFrom(address,address,uint256)
digraph{
}
}
