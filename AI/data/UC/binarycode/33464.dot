digraph G {
// Function: 33464.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == Owner

IRs:
TMP_1(bool) = msg.sender == Owner
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 33464.sol-Ownable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
Owner = msg.sender

IRs:
Owner(address) := msg.sender(address)"];
}
// Function: 33464.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Owner = to

IRs:
Owner(address) := to(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33464.sol-TokenVault-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == Owner

IRs:
TMP_6(bool) = msg.sender == Owner
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 33464.sol-TokenVault-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
Owner = msg.sender

IRs:
Owner(address) := msg.sender(address)"];
}
// Function: 33464.sol-TokenVault-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Owner = to

IRs:
Owner(address) := to(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33464.sol-TokenVault-withdrawTokenTo(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
token.call(bytes4(0xa9059cbb),to,amount)

IRs:
TMP_3 = CONVERT 2835717307 to bytes4
TMP_4(bool) = LOW_LEVEL_CALL, dest:token, function:call, arguments:['TMP_3', 'to', 'amount']  
RETURN TMP_4"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33464.sol-Vault-MinimumDeposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
minDeposit

IRs:
RETURN minDeposit"];
}
// Function: 33464.sol-Vault-ReleaseDate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Date

IRs:
RETURN Date"];
}
// Function: 33464.sol-Vault-WithdrawEnabled()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
Date > 0 && Date <= now

IRs:
TMP_13(bool) = Date > 0
TMP_14(bool) = Date <= now
TMP_15(bool) = TMP_13 && TMP_14
RETURN TMP_15"];
}
// Function: 33464.sol-Vault-deposit()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value > 0

IRs:
TMP_17(bool) = msg.value > 0
CONDITION TMP_17"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
msg.value >= MinimumDeposit()

IRs:
TMP_18(uint256) = INTERNAL_CALL, Vault.MinimumDeposit()()
TMP_19(bool) = msg.value >= TMP_18
CONDITION TMP_19"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Deposits[msg.sender] += msg.value

IRs:
REF_2(uint256) -> Deposits[msg.sender]
REF_2(-> Deposits) = REF_2 + msg.value"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Deposit(msg.sender,msg.value)

IRs:
Emit Deposit(msg.sender,msg.value)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 33464.sol-Vault-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
deposit()

IRs:
INTERNAL_CALL, Vault.deposit()()"];
}
// Function: 33464.sol-Vault-getOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
owner

IRs:
RETURN owner"];
}
// Function: 33464.sol-Vault-init()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Owner = msg.sender

IRs:
Owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
minDeposit = 500000000000000000

IRs:
minDeposit(uint256) := 500000000000000000(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Locked = false

IRs:
Locked(bool) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
deposit()

IRs:
INTERNAL_CALL, Vault.deposit()()"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
open()

IRs:
MODIFIER_CALL, Vault.open()()"];
5->1;
}
// Function: 33464.sol-Vault-kill()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(this.balance == 0)

IRs:
REF_5(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_29(bool) = REF_5 == 0
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
selfdestruct(address)(Owner)

IRs:
TMP_31(None) = SOLIDITY_CALL selfdestruct(address)(Owner)"];
}
// Function: 33464.sol-Vault-lock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Locked = true

IRs:
Locked(bool) := True(bool)"];
}
// Function: 33464.sol-Vault-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == Owner

IRs:
TMP_32(bool) = msg.sender == Owner
CONDITION TMP_32"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 33464.sol-Vault-open()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! Locked

IRs:
TMP_33 = UnaryType.BANG Locked 
CONDITION TMP_33"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33464.sol-Vault-setRelease(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Date = newDate

IRs:
Date(uint256) := newDate(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OpenDate(Date)

IRs:
Emit OpenDate(Date)"];
}
// Function: 33464.sol-Vault-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
Owner = msg.sender

IRs:
Owner(address) := msg.sender(address)"];
}
// Function: 33464.sol-Vault-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Owner = to

IRs:
Owner(address) := to(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33464.sol-Vault-withdraw(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
WithdrawEnabled()

IRs:
TMP_22(bool) = INTERNAL_CALL, Vault.WithdrawEnabled()()
CONDITION TMP_22"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
max = Deposits[msg.sender]

IRs:
REF_3(uint256) -> Deposits[msg.sender]
max(uint256) := REF_3(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
max > 0 && amount <= max

IRs:
TMP_23(bool) = max > 0
TMP_24(bool) = amount <= max
TMP_25(bool) = TMP_23 && TMP_24
CONDITION TMP_25"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
to.transfer(amount)

IRs:
Transfer dest:to value:amount"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Withdrawal(to,amount)

IRs:
Emit Withdrawal(to,amount)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: END_IF 7
"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
8->1;
}
// Function: 33464.sol-Vault-withdrawTokenTo(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
token.call(bytes4(0xa9059cbb),to,amount)

IRs:
TMP_7 = CONVERT 2835717307 to bytes4
TMP_8(bool) = LOW_LEVEL_CALL, dest:token, function:call, arguments:['TMP_7', 'to', 'amount']  
RETURN TMP_8"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
}
