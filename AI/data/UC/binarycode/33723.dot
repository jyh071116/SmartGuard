digraph G {
// Function: 33723.sol-HumanStandardToken-HumanStandardToken(uint256,string,uint8,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = _initialAmount

IRs:
REF_30(uint256) -> balances[msg.sender]
REF_30(uint256) (->balances) := _initialAmount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = _initialAmount

IRs:
totalSupply(uint256) := _initialAmount(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = _decimalUnits

IRs:
decimals(uint8) := _decimalUnits(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)"];
}
// Function: 33723.sol-HumanStandardToken-allowance(address,address)
digraph{
}
// Function: 33723.sol-HumanStandardToken-approve(address,uint256)
digraph{
}
// Function: 33723.sol-HumanStandardToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
REF_32(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData))

IRs:
TMP_19(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_20 = CONVERT TMP_19 to bytes32
TMP_21 = CONVERT TMP_20 to bytes4
TMP_22(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_21', 'msg.sender', '_value', 'this', '_extraData']  
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33723.sol-HumanStandardToken-balanceOf(address)
digraph{
}
// Function: 33723.sol-HumanStandardToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = H0.1

IRs:
version(string) := H0.1(string)"];
}
// Function: 33723.sol-HumanStandardToken-transfer(address,uint256)
digraph{
}
// Function: 33723.sol-HumanStandardToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 33723.sol-NashvilleBeerToken-HumanStandardToken(uint256,string,uint8,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = _initialAmount

IRs:
REF_34(uint256) -> balances[msg.sender]
REF_34(uint256) (->balances) := _initialAmount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = _initialAmount

IRs:
totalSupply(uint256) := _initialAmount(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = _decimalUnits

IRs:
decimals(uint8) := _decimalUnits(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)"];
}
// Function: 33723.sol-NashvilleBeerToken-NashvilleBeerToken(uint256,string,uint8,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
maxSupply = _maxSupply

IRs:
maxSupply(uint256) := _maxSupply(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
HumanStandardToken(_initialAmount,_tokenName,_decimalUnits,_tokenSymbol)

IRs:
INTERNAL_CALL, HumanStandardToken.HumanStandardToken(uint256,string,uint8,string)(_initialAmount,_tokenName,_decimalUnits,_tokenSymbol)"];
2->1;
}
// Function: 33723.sol-NashvilleBeerToken-allowance(address,address)
digraph{
}
// Function: 33723.sol-NashvilleBeerToken-approve(address,uint256)
digraph{
}
// Function: 33723.sol-NashvilleBeerToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_35(mapping(address => uint256)) -> allowed[msg.sender]
REF_36(uint256) -> REF_35[_spender]
REF_36(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_spender.call(bytes4(bytes32(sha3()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData))

IRs:
TMP_25(bytes32) = SOLIDITY_CALL sha3()(receiveApproval(address,uint256,address,bytes))
TMP_26 = CONVERT TMP_25 to bytes32
TMP_27 = CONVERT TMP_26 to bytes4
TMP_28(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_27', 'msg.sender', '_value', 'this', '_extraData']  
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33723.sol-NashvilleBeerToken-balanceOf(address)
digraph{
}
// Function: 33723.sol-NashvilleBeerToken-claimBeer()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == 15000000000000000)

IRs:
TMP_40(bool) = msg.value == 15000000000000000
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] += 1

IRs:
REF_55(uint256) -> balances[msg.sender]
REF_55(-> balances) = REF_55 + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply += 1

IRs:
totalSupply(uint256) = totalSupply + 1"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(totalSupply <= maxSupply)

IRs:
TMP_42(bool) = totalSupply <= maxSupply
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
RECIPIENT.transfer(msg.value)

IRs:
Transfer dest:RECIPIENT value:msg.value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(address(0),msg.sender,1)

IRs:
TMP_45 = CONVERT 0 to address
Emit Transfer(TMP_45,msg.sender,1)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
LogBeerBought(now,msg.sender)

IRs:
Emit LogBeerBought(now,msg.sender)"];
}
// Function: 33723.sol-NashvilleBeerToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
claimBeer()

IRs:
INTERNAL_CALL, NashvilleBeerToken.claimBeer()()"];
}
// Function: 33723.sol-NashvilleBeerToken-nameOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
names[_owner]

IRs:
REF_54(bytes32) -> names[_owner]
RETURN REF_54"];
}
// Function: 33723.sol-NashvilleBeerToken-registerName(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
names[msg.sender] = _name

IRs:
REF_53(bytes32) -> names[msg.sender]
REF_53(bytes32) (->names) := _name(bytes32)"];
}
// Function: 33723.sol-NashvilleBeerToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
RECIPIENT = 0xB1384DfE8ac77a700F460C94352bdD47Dc0327eF

IRs:
RECIPIENT(address) := 1011747002429144467967973603948163839243780827119(address)"];
}
// Function: 33723.sol-NashvilleBeerToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
version = H0.1

IRs:
version(string) := H0.1(string)"];
}
// Function: 33723.sol-NashvilleBeerToken-transfer(address,uint256)
digraph{
}
// Function: 33723.sol-NashvilleBeerToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 33723.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_13(mapping(address => uint256)) -> allowed[_owner]
REF_14(uint256) -> REF_13[_spender]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 33723.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_11(mapping(address => uint256)) -> allowed[msg.sender]
REF_12(uint256) -> REF_11[_spender]
REF_12(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33723.sol-StandardToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_10(uint256) -> balances[_owner]
RETURN REF_10"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 33723.sol-StandardToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_0 >= _value
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_1(-> balances) = REF_1 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_2(uint256) -> balances[_to]
REF_2(-> balances) = REF_2 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33723.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[_from] >= _value && allowed[_from][msg.sender] >= _value)

IRs:
REF_3(uint256) -> balances[_from]
TMP_3(bool) = REF_3 >= _value
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
TMP_4(bool) = REF_5 >= _value
TMP_5(bool) = TMP_3 && TMP_4
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_6(uint256) -> balances[_to]
REF_6(-> balances) = REF_6 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_7(uint256) -> balances[_from]
REF_7(-> balances) = REF_7 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
REF_9(-> allowed) = REF_9 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33723.sol-Token-allowance(address,address)
digraph{
}
// Function: 33723.sol-Token-approve(address,uint256)
digraph{
}
// Function: 33723.sol-Token-balanceOf(address)
digraph{
}
// Function: 33723.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 33723.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
