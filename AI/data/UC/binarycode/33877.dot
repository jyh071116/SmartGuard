digraph G {
// Function: 33877.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_43(uint256) -> balances[_owner]
RETURN REF_43"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 33877.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_238 = CONVERT 0 to address
TMP_239(bool) = _to != TMP_238
TMP_240(None) = SOLIDITY_CALL require(bool)(TMP_239)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_37(uint256) -> balances[msg.sender]
REF_38(uint256) -> balances[msg.sender]
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_38', '_value'] 
REF_37(uint256) (->balances) := TMP_241(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_40(uint256) -> balances[_to]
REF_41(uint256) -> balances[_to]
TMP_242(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_41', '_value'] 
REF_40(uint256) (->balances) := TMP_242(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33877.sol-CappedCrowdsale-CappedCrowdsale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_cap > 0)

IRs:
TMP_76(bool) = _cap > 0
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cap = _cap

IRs:
cap(uint256) := _cap(uint256)"];
}
// Function: 33877.sol-CappedCrowdsale-Crowdsale(address,uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_48(bool) = _startTime >= now
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_50(bool) = _endTime >= _startTime
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_52(bool) = _rate > 0
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != 0x0)

IRs:
TMP_54(bool) = _wallet != 0
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_tokenAddress != 0x0)

IRs:
TMP_56(bool) = _tokenAddress != 0
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenAddr = _tokenAddress

IRs:
tokenAddr(address) := _tokenAddress(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
}
// Function: 33877.sol-CappedCrowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(beneficiary != 0x0)

IRs:
TMP_59(bool) = beneficiary != 0
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_61(bool) = INTERNAL_CALL, CappedCrowdsale.validPurchase()()
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokens = weiAmount.mul(rate)

IRs:
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'rate'] 
tokens(uint256) := TMP_63(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_64(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
testTokenA = TestTokenA(tokenAddr)

IRs:
TMP_65 = CONVERT tokenAddr to TestTokenA
testTokenA(TestTokenA) := TMP_65(TestTokenA)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
testTokenA.mint(beneficiary,tokens)

IRs:
TMP_66(bool) = HIGH_LEVEL_CALL, dest:testTokenA(TestTokenA), function:mint, arguments:['beneficiary', 'tokens']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale.forwardFunds()()"];
}
// Function: 33877.sol-CappedCrowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 33877.sol-CappedCrowdsale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(msg.value)

IRs:
Transfer dest:wallet value:msg.value"];
}
// Function: 33877.sol-CappedCrowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
capReached = weiRaised >= cap

IRs:
TMP_82(bool) = weiRaised >= cap
capReached(bool) := TMP_82(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.hasEnded() || capReached

IRs:
TMP_83(bool) = INTERNAL_CALL, Crowdsale.hasEnded()()
TMP_84(bool) = TMP_83 || capReached
RETURN TMP_84"];
}
// Function: 33877.sol-CappedCrowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinCap = weiRaised.add(msg.value) <= cap

IRs:
TMP_78(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'msg.value'] 
TMP_79(bool) = TMP_78 <= cap
withinCap(bool) := TMP_79(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.validPurchase() && withinCap

IRs:
TMP_80(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_81(bool) = TMP_80 && withinCap
RETURN TMP_81"];
}
// Function: 33877.sol-Crowdsale-Crowdsale(address,uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_20(bool) = _startTime >= now
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_22(bool) = _endTime >= _startTime
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_24(bool) = _rate > 0
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != 0x0)

IRs:
TMP_26(bool) = _wallet != 0
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_tokenAddress != 0x0)

IRs:
TMP_28(bool) = _tokenAddress != 0
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenAddr = _tokenAddress

IRs:
tokenAddr(address) := _tokenAddress(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
}
// Function: 33877.sol-Crowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(beneficiary != 0x0)

IRs:
TMP_31(bool) = beneficiary != 0
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_33(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokens = weiAmount.mul(rate)

IRs:
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'rate'] 
tokens(uint256) := TMP_35(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_36(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
testTokenA = TestTokenA(tokenAddr)

IRs:
TMP_37 = CONVERT tokenAddr to TestTokenA
testTokenA(TestTokenA) := TMP_37(TestTokenA)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
testTokenA.mint(beneficiary,tokens)

IRs:
TMP_38(bool) = HIGH_LEVEL_CALL, dest:testTokenA(TestTokenA), function:mint, arguments:['beneficiary', 'tokens']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale.forwardFunds()()"];
}
// Function: 33877.sol-Crowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 33877.sol-Crowdsale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(msg.value)

IRs:
Transfer dest:wallet value:msg.value"];
}
// Function: 33877.sol-Crowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endTime

IRs:
TMP_47(bool) = now > endTime
RETURN TMP_47"];
}
// Function: 33877.sol-Crowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinPeriod = now >= startTime && now <= endTime

IRs:
TMP_42(bool) = now >= startTime
TMP_43(bool) = now <= endTime
TMP_44(bool) = TMP_42 && TMP_43
withinPeriod(bool) := TMP_44(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_45(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_45(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
withinPeriod && nonZeroPurchase

IRs:
TMP_46(bool) = withinPeriod && nonZeroPurchase
RETURN TMP_46"];
}
// Function: 33877.sol-Destructible-Destructible()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 33877.sol-Destructible-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33877.sol-Destructible-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_216(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33877.sol-Destructible-destroyAndSend(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(_recipient)

IRs:
TMP_218(None) = SOLIDITY_CALL selfdestruct(address)(_recipient)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33877.sol-Destructible-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_220(bool) = msg.sender == owner
TMP_221(None) = SOLIDITY_CALL require(bool)(TMP_220)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-Destructible-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_211 = CONVERT 0 to address
TMP_212(bool) = newOwner != TMP_211
TMP_213(None) = SOLIDITY_CALL require(bool)(TMP_212)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 33877.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 33877.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 33877.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 33877.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 33877.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 33877.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 33877.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 33877.sol-FinalizableCrowdsale-Crowdsale(address,uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_90(bool) = _startTime >= now
TMP_91(None) = SOLIDITY_CALL require(bool)(TMP_90)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_92(bool) = _endTime >= _startTime
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_94(bool) = _rate > 0
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != 0x0)

IRs:
TMP_96(bool) = _wallet != 0
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_tokenAddress != 0x0)

IRs:
TMP_98(bool) = _tokenAddress != 0
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenAddr = _tokenAddress

IRs:
tokenAddr(address) := _tokenAddress(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
}
// Function: 33877.sol-FinalizableCrowdsale-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33877.sol-FinalizableCrowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(beneficiary != 0x0)

IRs:
TMP_101(bool) = beneficiary != 0
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_103(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_104(None) = SOLIDITY_CALL require(bool)(TMP_103)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokens = weiAmount.mul(rate)

IRs:
TMP_105(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'rate'] 
tokens(uint256) := TMP_105(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_106(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
testTokenA = TestTokenA(tokenAddr)

IRs:
TMP_107 = CONVERT tokenAddr to TestTokenA
testTokenA(TestTokenA) := TMP_107(TestTokenA)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
testTokenA.mint(beneficiary,tokens)

IRs:
TMP_108(bool) = HIGH_LEVEL_CALL, dest:testTokenA(TestTokenA), function:mint, arguments:['beneficiary', 'tokens']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, Crowdsale.forwardFunds()()"];
}
// Function: 33877.sol-FinalizableCrowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 33877.sol-FinalizableCrowdsale-finalization()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 33877.sol-FinalizableCrowdsale-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isFinalized)

IRs:
TMP_118 = UnaryType.BANG isFinalized 
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(hasEnded())

IRs:
TMP_120(bool) = INTERNAL_CALL, Crowdsale.hasEnded()()
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
finalization()

IRs:
INTERNAL_CALL, FinalizableCrowdsale.finalization()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Finalized()

IRs:
Emit Finalized()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isFinalized = true

IRs:
isFinalized(bool) := True(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 33877.sol-FinalizableCrowdsale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(msg.value)

IRs:
Transfer dest:wallet value:msg.value"];
}
// Function: 33877.sol-FinalizableCrowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endTime

IRs:
TMP_117(bool) = now > endTime
RETURN TMP_117"];
}
// Function: 33877.sol-FinalizableCrowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_125(bool) = msg.sender == owner
TMP_126(None) = SOLIDITY_CALL require(bool)(TMP_125)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-FinalizableCrowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isFinalized = false

IRs:
isFinalized(bool) := False(bool)"];
}
// Function: 33877.sol-FinalizableCrowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_85 = CONVERT 0 to address
TMP_86(bool) = newOwner != TMP_85
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 33877.sol-FinalizableCrowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinPeriod = now >= startTime && now <= endTime

IRs:
TMP_112(bool) = now >= startTime
TMP_113(bool) = now <= endTime
TMP_114(bool) = TMP_112 && TMP_113
withinPeriod(bool) := TMP_114(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_115(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_115(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
withinPeriod && nonZeroPurchase

IRs:
TMP_116(bool) = withinPeriod && nonZeroPurchase
RETURN TMP_116"];
}
// Function: 33877.sol-MintableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33877.sol-MintableToken-allowance(address,address)
digraph{
}
// Function: 33877.sol-MintableToken-approve(address,uint256)
digraph{
}
// Function: 33877.sol-MintableToken-balanceOf(address)
digraph{
}
// Function: 33877.sol-MintableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_295 = UnaryType.BANG mintingFinished 
TMP_296(None) = SOLIDITY_CALL require(bool)(TMP_295)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-MintableToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_104(mapping(address => uint256)) -> allowed[msg.sender]
REF_105(uint256) -> REF_104[_spender]
oldValue(uint256) := REF_105(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_278(bool) = _subtractedValue > oldValue
CONDITION TMP_278"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_106(mapping(address => uint256)) -> allowed[msg.sender]
REF_107(uint256) -> REF_106[_spender]
REF_107(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_108(mapping(address => uint256)) -> allowed[msg.sender]
REF_109(uint256) -> REF_108[_spender]
TMP_279(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_109(uint256) (->allowed) := TMP_279(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_111(mapping(address => uint256)) -> allowed[msg.sender]
REF_112(uint256) -> REF_111[_spender]
Emit Approval(msg.sender,_spender,REF_112)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33877.sol-MintableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 33877.sol-MintableToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_97(mapping(address => uint256)) -> allowed[msg.sender]
REF_98(uint256) -> REF_97[_spender]
REF_99(mapping(address => uint256)) -> allowed[msg.sender]
REF_100(uint256) -> REF_99[_spender]
TMP_276(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_100', '_addedValue'] 
REF_98(uint256) (->allowed) := TMP_276(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_102(mapping(address => uint256)) -> allowed[msg.sender]
REF_103(uint256) -> REF_102[_spender]
Emit Approval(msg.sender,_spender,REF_103)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33877.sol-MintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_287(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_287(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_121(uint256) -> balances[_to]
REF_122(uint256) -> balances[_to]
TMP_288(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_122', '_amount'] 
REF_121(uint256) (->balances) := TMP_288(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(0x0,_to,_amount)

IRs:
Emit Transfer(0,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33877.sol-MintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_293(bool) = msg.sender == owner
TMP_294(None) = SOLIDITY_CALL require(bool)(TMP_293)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-MintableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 33877.sol-MintableToken-transfer(address,uint256)
digraph{
}
// Function: 33877.sol-MintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 33877.sol-MintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_263 = CONVERT 0 to address
TMP_264(bool) = newOwner != TMP_263
TMP_265(None) = SOLIDITY_CALL require(bool)(TMP_264)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 33877.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33877.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 33877.sol-Pausable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33877.sol-Pausable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_233(bool) = msg.sender == owner
TMP_234(None) = SOLIDITY_CALL require(bool)(TMP_233)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-Pausable-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 33877.sol-Pausable-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 33877.sol-Pausable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_222 = CONVERT 0 to address
TMP_223(bool) = newOwner != TMP_222
TMP_224(None) = SOLIDITY_CALL require(bool)(TMP_223)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 33877.sol-Pausable-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 33877.sol-Pausable-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_235 = UnaryType.BANG paused 
TMP_236(None) = SOLIDITY_CALL require(bool)(TMP_235)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-Pausable-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_237(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-RefundVault-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33877.sol-RefundVault-RefundVault(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_wallet != 0x0)

IRs:
TMP_132(bool) = _wallet != 0
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
state = State.Active

IRs:
REF_13(RefundVault.State) -> State.Active
state(RefundVault.State) := REF_13(RefundVault.State)"];
}
// Function: 33877.sol-RefundVault-close()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.Active)

IRs:
REF_18(RefundVault.State) -> State.Active
TMP_138(bool) = state == REF_18
TMP_139(None) = SOLIDITY_CALL require(bool)(TMP_138)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
state = State.Closed

IRs:
REF_19(RefundVault.State) -> State.Closed
state(RefundVault.State) := REF_19(RefundVault.State)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Closed()

IRs:
Emit Closed()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
wallet.transfer(this.balance)

IRs:
REF_21(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:wallet value:REF_21"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 33877.sol-RefundVault-deposit(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.Active)

IRs:
REF_14(RefundVault.State) -> State.Active
TMP_134(bool) = state == REF_14
TMP_135(None) = SOLIDITY_CALL require(bool)(TMP_134)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
deposited[investor] = deposited[investor].add(msg.value)

IRs:
REF_15(uint256) -> deposited[investor]
REF_16(uint256) -> deposited[investor]
TMP_136(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_16', 'msg.value'] 
REF_15(uint256) (->deposited) := TMP_136(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 33877.sol-RefundVault-enableRefunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.Active)

IRs:
REF_22(RefundVault.State) -> State.Active
TMP_143(bool) = state == REF_22
TMP_144(None) = SOLIDITY_CALL require(bool)(TMP_143)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
state = State.Refunding

IRs:
REF_23(RefundVault.State) -> State.Refunding
state(RefundVault.State) := REF_23(RefundVault.State)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
RefundsEnabled()

IRs:
Emit RefundsEnabled()"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 33877.sol-RefundVault-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_151(bool) = msg.sender == owner
TMP_152(None) = SOLIDITY_CALL require(bool)(TMP_151)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-RefundVault-refund(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.Refunding)

IRs:
REF_24(RefundVault.State) -> State.Refunding
TMP_147(bool) = state == REF_24
TMP_148(None) = SOLIDITY_CALL require(bool)(TMP_147)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
depositedValue = deposited[investor]

IRs:
REF_25(uint256) -> deposited[investor]
depositedValue(uint256) := REF_25(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
deposited[investor] = 0

IRs:
REF_26(uint256) -> deposited[investor]
REF_26(uint256) (->deposited) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
investor.transfer(depositedValue)

IRs:
Transfer dest:investor value:depositedValue"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Refunded(investor,depositedValue)

IRs:
Emit Refunded(investor,depositedValue)"];
}
// Function: 33877.sol-RefundVault-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_127 = CONVERT 0 to address
TMP_128(bool) = newOwner != TMP_127
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 33877.sol-RefundableCrowdsale-Crowdsale(address,uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_165(bool) = _startTime >= now
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_167(bool) = _endTime >= _startTime
TMP_168(None) = SOLIDITY_CALL require(bool)(TMP_167)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_169(bool) = _rate > 0
TMP_170(None) = SOLIDITY_CALL require(bool)(TMP_169)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != 0x0)

IRs:
TMP_171(bool) = _wallet != 0
TMP_172(None) = SOLIDITY_CALL require(bool)(TMP_171)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_tokenAddress != 0x0)

IRs:
TMP_173(bool) = _tokenAddress != 0
TMP_174(None) = SOLIDITY_CALL require(bool)(TMP_173)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenAddr = _tokenAddress

IRs:
tokenAddr(address) := _tokenAddress(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
}
// Function: 33877.sol-RefundableCrowdsale-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33877.sol-RefundableCrowdsale-RefundableCrowdsale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_goal > 0)

IRs:
TMP_193(bool) = _goal > 0
TMP_194(None) = SOLIDITY_CALL require(bool)(TMP_193)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vault = new RefundVault(wallet)

IRs:
TMP_196(RefundVault) = new RefundVault(wallet) 
vault(RefundVault) := TMP_196(RefundVault)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
goal = _goal

IRs:
goal(uint256) := _goal(uint256)"];
}
// Function: 33877.sol-RefundableCrowdsale-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(beneficiary != 0x0)

IRs:
TMP_176(bool) = beneficiary != 0
TMP_177(None) = SOLIDITY_CALL require(bool)(TMP_176)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_178(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokens = weiAmount.mul(rate)

IRs:
TMP_180(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'rate'] 
tokens(uint256) := TMP_180(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_181(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
testTokenA = TestTokenA(tokenAddr)

IRs:
TMP_182 = CONVERT tokenAddr to TestTokenA
testTokenA(TestTokenA) := TMP_182(TestTokenA)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
testTokenA.mint(beneficiary,tokens)

IRs:
TMP_183(bool) = HIGH_LEVEL_CALL, dest:testTokenA(TestTokenA), function:mint, arguments:['beneficiary', 'tokens']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, RefundableCrowdsale.forwardFunds()()"];
}
// Function: 33877.sol-RefundableCrowdsale-claimRefund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isFinalized)

IRs:
TMP_199(None) = SOLIDITY_CALL require(bool)(isFinalized)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! goalReached())

IRs:
TMP_200(bool) = INTERNAL_CALL, RefundableCrowdsale.goalReached()()
TMP_201 = UnaryType.BANG TMP_200 
TMP_202(None) = SOLIDITY_CALL require(bool)(TMP_201)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
vault.refund(msg.sender)

IRs:
HIGH_LEVEL_CALL, dest:vault(RefundVault), function:refund, arguments:['msg.sender']  "];
}
// Function: 33877.sol-RefundableCrowdsale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 33877.sol-RefundableCrowdsale-finalization()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
goalReached()

IRs:
TMP_204(bool) = INTERNAL_CALL, RefundableCrowdsale.goalReached()()
CONDITION TMP_204"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vault.close()

IRs:
HIGH_LEVEL_CALL, dest:vault(RefundVault), function:close, arguments:[]  "];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
vault.enableRefunds()

IRs:
HIGH_LEVEL_CALL, dest:vault(RefundVault), function:enableRefunds, arguments:[]  "];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
super.finalization()

IRs:
INTERNAL_CALL, FinalizableCrowdsale.finalization()()"];
}
// Function: 33877.sol-RefundableCrowdsale-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isFinalized)

IRs:
TMP_153 = UnaryType.BANG isFinalized 
TMP_154(None) = SOLIDITY_CALL require(bool)(TMP_153)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(hasEnded())

IRs:
TMP_155(bool) = INTERNAL_CALL, Crowdsale.hasEnded()()
TMP_156(None) = SOLIDITY_CALL require(bool)(TMP_155)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
finalization()

IRs:
INTERNAL_CALL, RefundableCrowdsale.finalization()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Finalized()

IRs:
Emit Finalized()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isFinalized = true

IRs:
isFinalized(bool) := True(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 33877.sol-RefundableCrowdsale-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
vault.deposit.value(msg.value)(msg.sender)

IRs:
HIGH_LEVEL_CALL, dest:vault(RefundVault), function:deposit, arguments:['msg.sender'] value:msg.value "];
}
// Function: 33877.sol-RefundableCrowdsale-goalReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
weiRaised >= goal

IRs:
TMP_208(bool) = weiRaised >= goal
RETURN TMP_208"];
}
// Function: 33877.sol-RefundableCrowdsale-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now > endTime

IRs:
TMP_192(bool) = now > endTime
RETURN TMP_192"];
}
// Function: 33877.sol-RefundableCrowdsale-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_209(bool) = msg.sender == owner
TMP_210(None) = SOLIDITY_CALL require(bool)(TMP_209)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-RefundableCrowdsale-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isFinalized = false

IRs:
isFinalized(bool) := False(bool)"];
}
// Function: 33877.sol-RefundableCrowdsale-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_160 = CONVERT 0 to address
TMP_161(bool) = newOwner != TMP_160
TMP_162(None) = SOLIDITY_CALL require(bool)(TMP_161)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 33877.sol-RefundableCrowdsale-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinPeriod = now >= startTime && now <= endTime

IRs:
TMP_187(bool) = now >= startTime
TMP_188(bool) = now <= endTime
TMP_189(bool) = TMP_187 && TMP_188
withinPeriod(bool) := TMP_189(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
nonZeroPurchase = msg.value != 0

IRs:
TMP_190(bool) = msg.value != 0
nonZeroPurchase(bool) := TMP_190(bool)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
withinPeriod && nonZeroPurchase

IRs:
TMP_191(bool) = withinPeriod && nonZeroPurchase
RETURN TMP_191"];
}
// Function: 33877.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_17(uint256) = a + b
c(uint256) := TMP_17(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_18(bool) = c >= a
TMP_19(None) = SOLIDITY_CALL assert(bool)(TMP_18)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 33877.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_13(uint256) = a / b
c(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 33877.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_7(uint256) = a * b
c(uint256) := TMP_7(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_8(bool) = a == 0
TMP_9(uint256) = c / a
TMP_10(bool) = TMP_9 == b
TMP_11(bool) = TMP_8 || TMP_10
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 33877.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_14(bool) = b <= a
TMP_15(None) = SOLIDITY_CALL assert(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_16(uint256) = a - b
RETURN TMP_16"];
}
// Function: 33877.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_64(mapping(address => uint256)) -> allowed[_owner]
REF_65(uint256) -> REF_64[_spender]
RETURN REF_65"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 33877.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_62(mapping(address => uint256)) -> allowed[msg.sender]
REF_63(uint256) -> REF_62[_spender]
REF_63(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33877.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 33877.sol-StandardToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_73(mapping(address => uint256)) -> allowed[msg.sender]
REF_74(uint256) -> REF_73[_spender]
oldValue(uint256) := REF_74(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_260(bool) = _subtractedValue > oldValue
CONDITION TMP_260"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_75(mapping(address => uint256)) -> allowed[msg.sender]
REF_76(uint256) -> REF_75[_spender]
REF_76(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_77(mapping(address => uint256)) -> allowed[msg.sender]
REF_78(uint256) -> REF_77[_spender]
TMP_261(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_78(uint256) (->allowed) := TMP_261(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_80(mapping(address => uint256)) -> allowed[msg.sender]
REF_81(uint256) -> REF_80[_spender]
Emit Approval(msg.sender,_spender,REF_81)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33877.sol-StandardToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_66(mapping(address => uint256)) -> allowed[msg.sender]
REF_67(uint256) -> REF_66[_spender]
REF_68(mapping(address => uint256)) -> allowed[msg.sender]
REF_69(uint256) -> REF_68[_spender]
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_69', '_addedValue'] 
REF_67(uint256) (->allowed) := TMP_258(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_71(mapping(address => uint256)) -> allowed[msg.sender]
REF_72(uint256) -> REF_71[_spender]
Emit Approval(msg.sender,_spender,REF_72)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33877.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 33877.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_250 = CONVERT 0 to address
TMP_251(bool) = _to != TMP_250
TMP_252(None) = SOLIDITY_CALL require(bool)(TMP_251)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_51(mapping(address => uint256)) -> allowed[_from]
REF_52(uint256) -> REF_51[msg.sender]
_allowance(uint256) := REF_52(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_53(uint256) -> balances[_from]
REF_54(uint256) -> balances[_from]
TMP_253(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_54', '_value'] 
REF_53(uint256) (->balances) := TMP_253(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_56(uint256) -> balances[_to]
REF_57(uint256) -> balances[_to]
TMP_254(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_57', '_value'] 
REF_56(uint256) (->balances) := TMP_254(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] = _allowance.sub(_value)

IRs:
REF_59(mapping(address => uint256)) -> allowed[_from]
REF_60(uint256) -> REF_59[msg.sender]
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_allowance', '_value'] 
REF_60(uint256) (->allowed) := TMP_255(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33877.sol-TestTokenA-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33877.sol-TestTokenA-TestTokenA()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = initialSupply

IRs:
totalSupply(uint256) := initialSupply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = initialSupply

IRs:
REF_166(uint256) -> balances[msg.sender]
REF_166(uint256) (->balances) := initialSupply(uint256)"];
}
// Function: 33877.sol-TestTokenA-allowance(address,address)
digraph{
}
// Function: 33877.sol-TestTokenA-approve(address,uint256)
digraph{
}
// Function: 33877.sol-TestTokenA-balanceOf(address)
digraph{
}
// Function: 33877.sol-TestTokenA-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_330 = UnaryType.BANG mintingFinished 
TMP_331(None) = SOLIDITY_CALL require(bool)(TMP_330)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-TestTokenA-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = allowed[msg.sender][_spender]

IRs:
REF_150(mapping(address => uint256)) -> allowed[msg.sender]
REF_151(uint256) -> REF_150[_spender]
oldValue(uint256) := REF_151(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_subtractedValue > oldValue

IRs:
TMP_318(bool) = _subtractedValue > oldValue
CONDITION TMP_318"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_152(mapping(address => uint256)) -> allowed[msg.sender]
REF_153(uint256) -> REF_152[_spender]
REF_153(uint256) (->allowed) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)

IRs:
REF_154(mapping(address => uint256)) -> allowed[msg.sender]
REF_155(uint256) -> REF_154[_spender]
TMP_319(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', '_subtractedValue'] 
REF_155(uint256) (->allowed) := TMP_319(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_157(mapping(address => uint256)) -> allowed[msg.sender]
REF_158(uint256) -> REF_157[_spender]
Emit Approval(msg.sender,_spender,REF_158)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33877.sol-TestTokenA-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 33877.sol-TestTokenA-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_143(mapping(address => uint256)) -> allowed[msg.sender]
REF_144(uint256) -> REF_143[_spender]
REF_145(mapping(address => uint256)) -> allowed[msg.sender]
REF_146(uint256) -> REF_145[_spender]
TMP_316(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_146', '_addedValue'] 
REF_144(uint256) (->allowed) := TMP_316(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_148(mapping(address => uint256)) -> allowed[msg.sender]
REF_149(uint256) -> REF_148[_spender]
Emit Approval(msg.sender,_spender,REF_149)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 33877.sol-TestTokenA-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_297(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_125(uint256) -> balances[_to]
REF_126(uint256) -> balances[_to]
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_126', '_amount'] 
REF_125(uint256) (->balances) := TMP_298(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(0x0,_to,_amount)

IRs:
Emit Transfer(0,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 33877.sol-TestTokenA-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_332(bool) = msg.sender == owner
TMP_333(None) = SOLIDITY_CALL require(bool)(TMP_332)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-TestTokenA-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = TestTokenA

IRs:
name(string) := TestTokenA(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = ZNX

IRs:
symbol(string) := ZNX(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
initialSupply = 65000000 * (10 ** uint256(decimals))

IRs:
TMP_327 = CONVERT decimals to uint256
TMP_328(uint256) = 10 ** TMP_327
TMP_329(uint256) = 65000000 * TMP_328
initialSupply(uint256) := TMP_329(uint256)"];
}
// Function: 33877.sol-TestTokenA-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 33877.sol-TestTokenA-transfer(address,uint256)
digraph{
}
// Function: 33877.sol-TestTokenA-transferFrom(address,address,uint256)
digraph{
}
// Function: 33877.sol-TestTokenA-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_303 = CONVERT 0 to address
TMP_304(bool) = newOwner != TMP_303
TMP_305(None) = SOLIDITY_CALL require(bool)(TMP_304)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 33877.sol-TestTokenAPreICO-CappedCrowdsale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_cap > 0)

IRs:
TMP_400(bool) = _cap > 0
TMP_401(None) = SOLIDITY_CALL require(bool)(TMP_400)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cap = _cap

IRs:
cap(uint256) := _cap(uint256)"];
}
// Function: 33877.sol-TestTokenAPreICO-Crowdsale(address,uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_startTime >= now)

IRs:
TMP_372(bool) = _startTime >= now
TMP_373(None) = SOLIDITY_CALL require(bool)(TMP_372)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_endTime >= _startTime)

IRs:
TMP_374(bool) = _endTime >= _startTime
TMP_375(None) = SOLIDITY_CALL require(bool)(TMP_374)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_rate > 0)

IRs:
TMP_376(bool) = _rate > 0
TMP_377(None) = SOLIDITY_CALL require(bool)(TMP_376)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_wallet != 0x0)

IRs:
TMP_378(bool) = _wallet != 0
TMP_379(None) = SOLIDITY_CALL require(bool)(TMP_378)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_tokenAddress != 0x0)

IRs:
TMP_380(bool) = _tokenAddress != 0
TMP_381(None) = SOLIDITY_CALL require(bool)(TMP_380)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokenAddr = _tokenAddress

IRs:
tokenAddr(address) := _tokenAddress(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
startTime = _startTime

IRs:
startTime(uint256) := _startTime(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
endTime = _endTime

IRs:
endTime(uint256) := _endTime(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
wallet = _wallet

IRs:
wallet(address) := _wallet(address)"];
}
// Function: 33877.sol-TestTokenAPreICO-Destructible()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 33877.sol-TestTokenAPreICO-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 33877.sol-TestTokenAPreICO-RefundableCrowdsale(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_goal > 0)

IRs:
TMP_349(bool) = _goal > 0
TMP_350(None) = SOLIDITY_CALL require(bool)(TMP_349)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
vault = new RefundVault(wallet)

IRs:
TMP_352(RefundVault) = new RefundVault(wallet) 
vault(RefundVault) := TMP_352(RefundVault)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
goal = _goal

IRs:
goal(uint256) := _goal(uint256)"];
}
// Function: 33877.sol-TestTokenAPreICO-TestTokenAPreICO(address,uint256,uint256,uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_goal <= _cap)

IRs:
TMP_409(bool) = _goal <= _cap
TMP_410(None) = SOLIDITY_CALL require(bool)(TMP_409)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
CappedCrowdsale(_cap)

IRs:
INTERNAL_CALL, CappedCrowdsale.CappedCrowdsale(uint256)(_cap)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
FinalizableCrowdsale()

IRs:
INTERNAL_CALL, Ownable.Ownable()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
RefundableCrowdsale(_goal)

IRs:
INTERNAL_CALL, RefundableCrowdsale.RefundableCrowdsale(uint256)(_goal)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Crowdsale(_tokenAddress,_startTime,_endTime,_rate,_wallet)

IRs:
INTERNAL_CALL, Crowdsale.Crowdsale(address,uint256,uint256,uint256,address)(_tokenAddress,_startTime,_endTime,_rate,_wallet)"];
5->1;
}
// Function: 33877.sol-TestTokenAPreICO-buyTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(beneficiary != 0x0)

IRs:
TMP_383(bool) = beneficiary != 0
TMP_384(None) = SOLIDITY_CALL require(bool)(TMP_383)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(validPurchase())

IRs:
TMP_385(bool) = INTERNAL_CALL, CappedCrowdsale.validPurchase()()
TMP_386(None) = SOLIDITY_CALL require(bool)(TMP_385)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
weiAmount = msg.value

IRs:
weiAmount(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokens = weiAmount.mul(rate)

IRs:
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['weiAmount', 'rate'] 
tokens(uint256) := TMP_387(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
weiRaised = weiRaised.add(weiAmount)

IRs:
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'weiAmount'] 
weiRaised(uint256) := TMP_388(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
testTokenA = TestTokenA(tokenAddr)

IRs:
TMP_389 = CONVERT tokenAddr to TestTokenA
testTokenA(TestTokenA) := TMP_389(TestTokenA)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
testTokenA.mint(beneficiary,tokens)

IRs:
TMP_390(bool) = HIGH_LEVEL_CALL, dest:testTokenA(TestTokenA), function:mint, arguments:['beneficiary', 'tokens']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)

IRs:
Emit TokenPurchase(msg.sender,beneficiary,weiAmount,tokens)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
forwardFunds()

IRs:
INTERNAL_CALL, RefundableCrowdsale.forwardFunds()()"];
}
// Function: 33877.sol-TestTokenAPreICO-claimRefund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isFinalized)

IRs:
TMP_355(None) = SOLIDITY_CALL require(bool)(isFinalized)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! goalReached())

IRs:
TMP_356(bool) = INTERNAL_CALL, RefundableCrowdsale.goalReached()()
TMP_357 = UnaryType.BANG TMP_356 
TMP_358(None) = SOLIDITY_CALL require(bool)(TMP_357)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
vault.refund(msg.sender)

IRs:
HIGH_LEVEL_CALL, dest:vault(RefundVault), function:refund, arguments:['msg.sender']  "];
}
// Function: 33877.sol-TestTokenAPreICO-destroy()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_345(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33877.sol-TestTokenAPreICO-destroyAndSend(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(_recipient)

IRs:
TMP_347(None) = SOLIDITY_CALL selfdestruct(address)(_recipient)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 33877.sol-TestTokenAPreICO-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buyTokens(msg.sender)

IRs:
INTERNAL_CALL, Crowdsale.buyTokens(address)(msg.sender)"];
}
// Function: 33877.sol-TestTokenAPreICO-finalization()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 33877.sol-TestTokenAPreICO-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isFinalized)

IRs:
TMP_365 = UnaryType.BANG isFinalized 
TMP_366(None) = SOLIDITY_CALL require(bool)(TMP_365)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(hasEnded())

IRs:
TMP_367(bool) = INTERNAL_CALL, CappedCrowdsale.hasEnded()()
TMP_368(None) = SOLIDITY_CALL require(bool)(TMP_367)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
finalization()

IRs:
INTERNAL_CALL, RefundableCrowdsale.finalization()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Finalized()

IRs:
Emit Finalized()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isFinalized = true

IRs:
isFinalized(bool) := True(bool)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 33877.sol-TestTokenAPreICO-forwardFunds()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
wallet.transfer(msg.value)

IRs:
Transfer dest:wallet value:msg.value"];
}
// Function: 33877.sol-TestTokenAPreICO-goalReached()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
weiRaised >= goal

IRs:
TMP_364(bool) = weiRaised >= goal
RETURN TMP_364"];
}
// Function: 33877.sol-TestTokenAPreICO-hasEnded()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
capReached = weiRaised >= cap

IRs:
TMP_406(bool) = weiRaised >= cap
capReached(bool) := TMP_406(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.hasEnded() || capReached

IRs:
TMP_407(bool) = INTERNAL_CALL, Crowdsale.hasEnded()()
TMP_408(bool) = TMP_407 || capReached
RETURN TMP_408"];
}
// Function: 33877.sol-TestTokenAPreICO-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_418(bool) = msg.sender == owner
TMP_419(None) = SOLIDITY_CALL require(bool)(TMP_418)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-TestTokenAPreICO-pause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Pause()

IRs:
Emit Pause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
4->1;
}
// Function: 33877.sol-TestTokenAPreICO-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
isFinalized = false

IRs:
isFinalized(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
}
// Function: 33877.sol-TestTokenAPreICO-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_340 = CONVERT 0 to address
TMP_341(bool) = newOwner != TMP_340
TMP_342(None) = SOLIDITY_CALL require(bool)(TMP_341)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 33877.sol-TestTokenAPreICO-unpause()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
paused = false

IRs:
paused(bool) := False(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Unpause()

IRs:
Emit Unpause()"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
whenPaused()

IRs:
MODIFIER_CALL, Pausable.whenPaused()()"];
4->1;
}
// Function: 33877.sol-TestTokenAPreICO-validPurchase()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
withinCap = weiRaised.add(msg.value) <= cap

IRs:
TMP_402(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRaised', 'msg.value'] 
TMP_403(bool) = TMP_402 <= cap
withinCap(bool) := TMP_403(bool)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
super.validPurchase() && withinCap

IRs:
TMP_404(bool) = INTERNAL_CALL, Crowdsale.validPurchase()()
TMP_405(bool) = TMP_404 && withinCap
RETURN TMP_405"];
}
// Function: 33877.sol-TestTokenAPreICO-whenNotPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! paused)

IRs:
TMP_415 = UnaryType.BANG paused 
TMP_416(None) = SOLIDITY_CALL require(bool)(TMP_415)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 33877.sol-TestTokenAPreICO-whenPaused()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(paused)

IRs:
TMP_417(None) = SOLIDITY_CALL require(bool)(paused)"];
1->2;
2[label="Node Type: _ 2
"];
}
}
