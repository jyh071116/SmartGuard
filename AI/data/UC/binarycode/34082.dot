digraph G {
// Function: 34082.sol-ERC20-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 34082.sol-ERC20-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34082.sol-ERC20-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 34082.sol-ERC20-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 34082.sol-ERC20-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34082.sol-ERC20-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34082.sol-FBT-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_13(mapping(address => uint256)) -> allowed[_owner]
REF_14(uint256) -> REF_13[_spender]
RETURN REF_14"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 34082.sol-FBT-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_11(mapping(address => uint256)) -> allowed[msg.sender]
REF_12(uint256) -> REF_11[_spender]
REF_12(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34082.sol-FBT-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_10(uint256) -> balances[_owner]
RETURN REF_10"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 34082.sol-FBT-refundFees()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
refund = 200000 * tx.gasprice

IRs:
TMP_15(uint256) = 200000 * tx.gasprice
refund(uint256) := TMP_15(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
feebank[msg.sender] >= refund

IRs:
REF_15(uint256) -> feebank[msg.sender]
TMP_16(bool) = REF_15 >= refund
CONDITION TMP_16"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.transfer(refund)

IRs:
Transfer dest:msg.sender value:refund"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
feebank[msg.sender] -= refund

IRs:
REF_17(uint256) -> feebank[msg.sender]
REF_17(-> feebank) = REF_17 - refund"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 34082.sol-FBT-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
dev1 = 0xFAB873F0f71dCa84CA33d959C8f017f886E10C63

IRs:
dev1(address) := 1431361129731613728305131908309275092157372370019(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
dev2 = 0xD7E9aB6a7a5f303D3Cd17DcaEFF254D87757a1F8

IRs:
dev2(address) := 1232644021791868419618479249782818805976533541368(address)"];
}
// Function: 34082.sol-FBT-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 34082.sol-FBT-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && _value > 0

IRs:
REF_0(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_0 >= _value
TMP_1(bool) = _value > 0
TMP_2(bool) = TMP_0 && TMP_1
CONDITION TMP_2"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_1(-> balances) = REF_1 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_2(uint256) -> balances[_to]
REF_2(-> balances) = REF_2 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
refundFees()

IRs:
INTERNAL_CALL, FBT.refundFees()()"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
revert()()

IRs:
TMP_5(None) = SOLIDITY_CALL revert()()"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34082.sol-FBT-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0

IRs:
REF_3(uint256) -> balances[_from]
TMP_6(bool) = REF_3 >= _value
REF_4(mapping(address => uint256)) -> allowed[_from]
REF_5(uint256) -> REF_4[msg.sender]
TMP_7(bool) = REF_5 >= _value
TMP_8(bool) = TMP_6 && TMP_7
TMP_9(bool) = _value > 0
TMP_10(bool) = TMP_8 && TMP_9
CONDITION TMP_10"];
1->2[label="True"];
1->8[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_6(uint256) -> balances[_to]
REF_6(-> balances) = REF_6 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_7(uint256) -> balances[_from]
REF_7(-> balances) = REF_7 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_8(mapping(address => uint256)) -> allowed[_from]
REF_9(uint256) -> REF_8[msg.sender]
REF_9(-> allowed) = REF_9 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
refundFees()

IRs:
INTERNAL_CALL, FBT.refundFees()()"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert()()

IRs:
TMP_13(None) = SOLIDITY_CALL revert()()"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34082.sol-FrostByte-FrostByte()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = FrostByte

IRs:
name(string) := FrostByte(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
decimals = 4

IRs:
decimals(uint8) := 4(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = FBT

IRs:
symbol(string) := FBT(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
pieceprice = 1000000000000000000 / 256

IRs:
TMP_36(uint256) = 1000000000000000000 / 256
pieceprice(uint256) := TMP_36(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
datestart = now

IRs:
datestart(uint256) := now(uint256)"];
}
// Function: 34082.sol-FrostByte-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 34082.sol-FrostByte-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34082.sol-FrostByte-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_45(mapping(address => uint256)) -> allowed[msg.sender]
REF_46(uint256) -> REF_45[_spender]
REF_46(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! _spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)

IRs:
TMP_69(bytes32) = SOLIDITY_CALL keccak256()(receiveApproval(address,uint256,address,bytes))
TMP_70 = CONVERT TMP_69 to bytes32
TMP_71 = CONVERT TMP_70 to bytes4
TMP_72(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_71', 'msg.sender', '_value', 'this', '_extraData']  
TMP_73 = UnaryType.BANG TMP_72 
CONDITION TMP_73"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_74(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34082.sol-FrostByte-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 34082.sol-FrostByte-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
addrLevel = getAddressLevel()

IRs:
TMP_37(bytes1) = INTERNAL_CALL, FrostByte.getAddressLevel()()
addrLevel(bytes1) := TMP_37(bytes1)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
generateprice = getPrice(addrLevel)

IRs:
TMP_38(uint256) = INTERNAL_CALL, FrostByte.getPrice(bytes1)(addrLevel)
generateprice(uint256) := TMP_38(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
msg.value < generateprice

IRs:
TMP_39(bool) = msg.value < generateprice
CONDITION TMP_39"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_40(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
seventy = msg.value / 100 * 30

IRs:
TMP_41(uint256) = msg.value / 100
TMP_42(uint256) = TMP_41 * 30
seventy(uint256) := TMP_42(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
dev = seventy / 2

IRs:
TMP_43(uint256) = seventy / 2
dev(uint256) := TMP_43(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
dev1.transfer(dev)

IRs:
Transfer dest:dev1 value:dev"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
dev2.transfer(dev)

IRs:
Transfer dest:dev2 value:dev"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalaccumulated += seventy

IRs:
totalaccumulated(uint256) = totalaccumulated + seventy"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
generateamount = msg.value * 10000 / generateprice

IRs:
TMP_46(uint256) = msg.value * 10000
TMP_47(uint256) = TMP_46 / generateprice
generateamount(uint256) := TMP_47(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
totalSupply += generateamount

IRs:
totalSupply(uint256) = totalSupply + generateamount"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
balances[msg.sender] = generateamount

IRs:
REF_38(uint256) -> balances[msg.sender]
REF_38(uint256) (->balances) := generateamount(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
feebank[msg.sender] += msg.value - seventy

IRs:
REF_39(uint256) -> feebank[msg.sender]
TMP_48(uint256) = msg.value - seventy
REF_39(-> feebank) = REF_39 + TMP_48"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
refundFees()

IRs:
INTERNAL_CALL, FBT.refundFees()()"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
tokenBought(generateamount,msg.value)

IRs:
Emit tokenBought(generateamount,msg.value)"];
}
// Function: 34082.sol-FrostByte-feeBank(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
feebank[x]

IRs:
REF_41(uint256) -> feebank[x]
RETURN REF_41"];
}
// Function: 34082.sol-FrostByte-getAddressLevel()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
addresslevels[msg.sender] > 0

IRs:
REF_42(bytes1) -> addresslevels[msg.sender]
TMP_56(bool) = REF_42 > 0
CONDITION TMP_56"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
addresslevels[msg.sender]

IRs:
REF_43(bytes1) -> addresslevels[msg.sender]
RETURN REF_43"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
highest = 0

IRs:
highest(bytes1) := 0(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->14;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 20

IRs:
TMP_57(bool) = i < 20
CONDITION TMP_57"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
c = bytes1(uint8(uint256(msg.sender) / (2 ** (8 * (19 - i)))))

IRs:
TMP_58 = CONVERT msg.sender to uint256
TMP_59(uint256) = 19 - i
TMP_60(uint256) = 8 * TMP_59
TMP_61(uint256) = 2 ** TMP_60
TMP_62(uint256) = TMP_58 / TMP_61
TMP_63 = CONVERT TMP_62 to uint8
TMP_64 = CONVERT TMP_63 to bytes1
c(bytes1) := TMP_64(bytes1)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
bytes1(c) > highest

IRs:
TMP_65 = CONVERT c to bytes1
TMP_66(bool) = TMP_65 > highest
CONDITION TMP_66"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
highest = c

IRs:
highest(bytes1) := c(bytes1)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_67(uint256) := i(uint256)
i(uint256) = i + 1"];
13->8;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
addresslevels[msg.sender] = highest

IRs:
REF_44(bytes1) -> addresslevels[msg.sender]
REF_44(bytes1) (->addresslevels) := highest(bytes1)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
highest

IRs:
RETURN highest"];
16[label="Node Type: RETURN 16

EXPRESSION:
res

IRs:
RETURN res"];
}
// Function: 34082.sol-FrostByte-getPrice(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
pieceprice * uint256(addrLevel)

IRs:
TMP_54 = CONVERT addrLevel to uint256
TMP_55(uint256) = pieceprice * TMP_54
RETURN TMP_55"];
}
// Function: 34082.sol-FrostByte-refundFees()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
refund = 200000 * tx.gasprice

IRs:
TMP_33(uint256) = 200000 * tx.gasprice
refund(uint256) := TMP_33(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
feebank[msg.sender] >= refund

IRs:
REF_33(uint256) -> feebank[msg.sender]
TMP_34(bool) = REF_33 >= refund
CONDITION TMP_34"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.transfer(refund)

IRs:
Transfer dest:msg.sender value:refund"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
feebank[msg.sender] -= refund

IRs:
REF_35(uint256) -> feebank[msg.sender]
REF_35(-> feebank) = REF_35 - refund"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 34082.sol-FrostByte-sendEther(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
x.transfer(msg.value)

IRs:
Transfer dest:x value:msg.value"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
refundFees()

IRs:
INTERNAL_CALL, FBT.refundFees()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
etherSent(msg.value)

IRs:
Emit etherSent(msg.value)"];
}
// Function: 34082.sol-FrostByte-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
dev1 = 0xFAB873F0f71dCa84CA33d959C8f017f886E10C63

IRs:
dev1(address) := 1431361129731613728305131908309275092157372370019(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
dev2 = 0xD7E9aB6a7a5f303D3Cd17DcaEFF254D87757a1F8

IRs:
dev2(address) := 1232644021791868419618479249782818805976533541368(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
version = 0.4

IRs:
version(string) := 0.4(string)"];
}
// Function: 34082.sol-FrostByte-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 34082.sol-FrostByte-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34082.sol-FrostByte-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
}
