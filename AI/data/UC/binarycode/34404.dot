digraph G {
// Function: 34404.sol-ABHCoin-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 34404.sol-ABHCoin-addCrowdsaleContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
crowdsaleContracts[_crowdsaleContract] = true

IRs:
REF_66(bool) -> crowdsaleContracts[_crowdsaleContract]
REF_66(bool) (->crowdsaleContracts) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 34404.sol-ABHCoin-allowance(address,address)
digraph{
}
// Function: 34404.sol-ABHCoin-approve(address,uint256)
digraph{
}
// Function: 34404.sol-ABHCoin-balanceOf(address)
digraph{
}
// Function: 34404.sol-ABHCoin-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_110 = UnaryType.BANG mintingFinished 
TMP_111(None) = SOLIDITY_CALL require(bool)(TMP_110)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34404.sol-ABHCoin-deleteCrowdsaleContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(crowdsaleContracts[_crowdsaleContract])

IRs:
REF_67(bool) -> crowdsaleContracts[_crowdsaleContract]
TMP_82(None) = SOLIDITY_CALL require(bool)(REF_67)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete crowdsaleContracts[_crowdsaleContract]

IRs:
REF_68(bool) -> crowdsaleContracts[_crowdsaleContract]
crowdsaleContracts = delete REF_68 "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 34404.sol-ABHCoin-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyCrowdsaleContract()

IRs:
MODIFIER_CALL, MintableToken.onlyCrowdsaleContract()()"];
4->1;
}
// Function: 34404.sol-ABHCoin-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_84(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_70(uint256) -> balances[_to]
REF_71(uint256) -> balances[_to]
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', '_amount'] 
REF_70(uint256) (->balances) := TMP_85(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(this,_to,_amount)

IRs:
Emit Transfer(this,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyCrowdsaleContract()

IRs:
MODIFIER_CALL, MintableToken.onlyCrowdsaleContract()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 34404.sol-ABHCoin-onlyCrowdsaleContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(crowdsaleContracts[msg.sender])

IRs:
REF_97(bool) -> crowdsaleContracts[msg.sender]
TMP_112(None) = SOLIDITY_CALL require(bool)(REF_97)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34404.sol-ABHCoin-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_113(bool) = msg.sender == owner
TMP_114(None) = SOLIDITY_CALL require(bool)(TMP_113)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34404.sol-ABHCoin-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length == size + 4)

IRs:
REF_98 -> LENGTH msg.data
TMP_115(uint256) = size + 4
TMP_116(bool) = REF_98 == TMP_115
TMP_117(None) = SOLIDITY_CALL assert(bool)(TMP_116)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34404.sol-ABHCoin-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = ABH Coin

IRs:
name(string) := ABH Coin(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = ABH

IRs:
symbol(string) := ABH(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint32) := 18(uint256)"];
}
// Function: 34404.sol-ABHCoin-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 34404.sol-ABHCoin-transfer(address,uint256)
digraph{
}
// Function: 34404.sol-ABHCoin-transferFrom(address,address,uint256)
digraph{
}
// Function: 34404.sol-ABHCoin-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_92 = CONVERT 0 to address
TMP_93(bool) = newOwner != TMP_92
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 34404.sol-BasicToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_6(uint256) -> balances[_owner]
RETURN REF_6"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 34404.sol-BasicToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length == size + 4)

IRs:
REF_7 -> LENGTH msg.data
TMP_18(uint256) = size + 4
TMP_19(bool) = REF_7 == TMP_18
TMP_20(None) = SOLIDITY_CALL assert(bool)(TMP_19)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34404.sol-BasicToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_1(uint256) -> balances[msg.sender]
TMP_13(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_1', '_value'] 
REF_0(uint256) (->balances) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_3(uint256) -> balances[_to]
REF_4(uint256) -> balances[_to]
TMP_14(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_4', '_value'] 
REF_3(uint256) (->balances) := TMP_14(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(2 * 32)

IRs:
TMP_16(uint256) = 2 * 32
MODIFIER_CALL, BasicToken.onlyPayloadSize(uint256)(TMP_16)"];
5->1;
}
// Function: 34404.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 34404.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 34404.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 34404.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 34404.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 34404.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 34404.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 34404.sol-MintableToken-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 34404.sol-MintableToken-addCrowdsaleContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
crowdsaleContracts[_crowdsaleContract] = true

IRs:
REF_57(bool) -> crowdsaleContracts[_crowdsaleContract]
REF_57(bool) (->crowdsaleContracts) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 34404.sol-MintableToken-allowance(address,address)
digraph{
}
// Function: 34404.sol-MintableToken-approve(address,uint256)
digraph{
}
// Function: 34404.sol-MintableToken-balanceOf(address)
digraph{
}
// Function: 34404.sol-MintableToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_78 = UnaryType.BANG mintingFinished 
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34404.sol-MintableToken-deleteCrowdsaleContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(crowdsaleContracts[_crowdsaleContract])

IRs:
REF_58(bool) -> crowdsaleContracts[_crowdsaleContract]
TMP_63(None) = SOLIDITY_CALL require(bool)(REF_58)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete crowdsaleContracts[_crowdsaleContract]

IRs:
REF_59(bool) -> crowdsaleContracts[_crowdsaleContract]
crowdsaleContracts = delete REF_59 "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 34404.sol-MintableToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyCrowdsaleContract()

IRs:
MODIFIER_CALL, MintableToken.onlyCrowdsaleContract()()"];
4->1;
}
// Function: 34404.sol-MintableToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.add(_amount)

IRs:
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_amount'] 
totalSupply(uint256) := TMP_65(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_61(uint256) -> balances[_to]
REF_62(uint256) -> balances[_to]
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_62', '_amount'] 
REF_61(uint256) (->balances) := TMP_66(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Mint(_to,_amount)

IRs:
Emit Mint(_to,_amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(this,_to,_amount)

IRs:
Emit Transfer(this,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyCrowdsaleContract()

IRs:
MODIFIER_CALL, MintableToken.onlyCrowdsaleContract()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
7->1;
}
// Function: 34404.sol-MintableToken-onlyCrowdsaleContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(crowdsaleContracts[msg.sender])

IRs:
REF_65(bool) -> crowdsaleContracts[msg.sender]
TMP_80(None) = SOLIDITY_CALL require(bool)(REF_65)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34404.sol-MintableToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_73(bool) = msg.sender == owner
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34404.sol-MintableToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length == size + 4)

IRs:
REF_64 -> LENGTH msg.data
TMP_75(uint256) = size + 4
TMP_76(bool) = REF_64 == TMP_75
TMP_77(None) = SOLIDITY_CALL assert(bool)(TMP_76)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34404.sol-MintableToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 34404.sol-MintableToken-transfer(address,uint256)
digraph{
}
// Function: 34404.sol-MintableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 34404.sol-MintableToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_44 = CONVERT 0 to address
TMP_45(bool) = newOwner != TMP_44
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 34404.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 34404.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_42(bool) = msg.sender == owner
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34404.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_38 = CONVERT 0 to address
TMP_39(bool) = newOwner != TMP_38
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 34404.sol-PrivatePlacement-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 34404.sol-PrivatePlacement-PrivatePlacement(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
multisig = _multisig

IRs:
multisig(address) := _multisig(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rate = _rate * 1000000000000000000

IRs:
TMP_122(uint256) = _rate * 1000000000000000000
rate(uint256) := TMP_122(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
hardcap = 120600000 * 1000000000000000000

IRs:
TMP_123(uint256) = 120600000 * 1000000000000000000
hardcap(uint256) := TMP_123(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token = ABHCoin(_ABHCoinAddress)

IRs:
TMP_124 = CONVERT _ABHCoinAddress to ABHCoin
token(ABHCoin) := TMP_124(ABHCoin)"];
}
// Function: 34404.sol-PrivatePlacement-alloweRefund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
refundAllowed = true

IRs:
refundAllowed(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 34404.sol-PrivatePlacement-changeRate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rate = _rate

IRs:
rate(uint256) := _rate(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 34404.sol-PrivatePlacement-createTokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(privatePlacementIsOn)

IRs:
TMP_136(None) = SOLIDITY_CALL require(bool)(privatePlacementIsOn)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
valueWEI = msg.value

IRs:
valueWEI(uint256) := msg.value(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
tokens = rate.mul(msg.value).div(1000000000000000000)

IRs:
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['rate', 'msg.value'] 
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_137', '1000000000000000000'] 
tokens(uint256) := TMP_138(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
token.totalSupply() + tokens > hardcap

IRs:
TMP_139(uint256) = HIGH_LEVEL_CALL, dest:token(ABHCoin), function:totalSupply, arguments:[]  
TMP_140(uint256) = TMP_139 + tokens
TMP_141(bool) = TMP_140 > hardcap
CONDITION TMP_141"];
4->5[label="True"];
4->11[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokens = hardcap - token.totalSupply()

IRs:
TMP_142(uint256) = HIGH_LEVEL_CALL, dest:token(ABHCoin), function:totalSupply, arguments:[]  
TMP_143(uint256) = hardcap - TMP_142
tokens(uint256) := TMP_143(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
valueWEI = tokens.mul(1000000000000000000).div(rate)

IRs:
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokens', '1000000000000000000'] 
TMP_145(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_144', 'rate'] 
valueWEI(uint256) := TMP_145(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
token.mint(msg.sender,tokens)

IRs:
TMP_146(bool) = HIGH_LEVEL_CALL, dest:token(ABHCoin), function:mint, arguments:['msg.sender', 'tokens']  "];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
change = msg.value - valueWEI

IRs:
TMP_147(uint256) = msg.value - valueWEI
change(uint256) := TMP_147(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
isSent = msg.sender.call.gas(3000000).value(change)()

IRs:
TMP_150(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:change gas:3000000
isSent(bool) := TMP_150(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(isSent)

IRs:
TMP_151(None) = SOLIDITY_CALL require(bool)(isSent)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
token.mint(msg.sender,tokens)

IRs:
TMP_152(bool) = HIGH_LEVEL_CALL, dest:token(ABHCoin), function:mint, arguments:['msg.sender', 'tokens']  "];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(valueWEI)

IRs:
REF_115(uint256) -> balances[msg.sender]
REF_116(uint256) -> balances[msg.sender]
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_116', 'valueWEI'] 
REF_115(uint256) (->balances) := TMP_153(uint256)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isUnderHardCap()

IRs:
MODIFIER_CALL, PrivatePlacement.isUnderHardCap()()"];
14->1;
}
// Function: 34404.sol-PrivatePlacement-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
createTokens()

IRs:
INTERNAL_CALL, PrivatePlacement.createTokens()()"];
}
// Function: 34404.sol-PrivatePlacement-finishPrivatePlacement()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! refundAllowed)

IRs:
TMP_129 = UnaryType.BANG refundAllowed 
TMP_130(None) = SOLIDITY_CALL require(bool)(TMP_129)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
multisig.transfer(this.balance)

IRs:
REF_100(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:multisig value:REF_100"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
privatePlacementIsOn = false

IRs:
privatePlacementIsOn(bool) := False(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
PrivatePlacementFinished = true

IRs:
PrivatePlacementFinished(bool) := True(bool)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 34404.sol-PrivatePlacement-isUnderHardCap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token.totalSupply() <= hardcap)

IRs:
TMP_159(uint256) = HIGH_LEVEL_CALL, dest:token(ABHCoin), function:totalSupply, arguments:[]  
TMP_160(bool) = TMP_159 <= hardcap
TMP_161(None) = SOLIDITY_CALL require(bool)(TMP_160)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34404.sol-PrivatePlacement-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_157(bool) = msg.sender == owner
TMP_158(None) = SOLIDITY_CALL require(bool)(TMP_157)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34404.sol-PrivatePlacement-refund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(refundAllowed)

IRs:
TMP_134(None) = SOLIDITY_CALL require(bool)(refundAllowed)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
valueToReturn = balances[msg.sender]

IRs:
REF_101(uint256) -> balances[msg.sender]
valueToReturn(uint256) := REF_101(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] = 0

IRs:
REF_102(uint256) -> balances[msg.sender]
REF_102(uint256) (->balances) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
msg.sender.transfer(valueToReturn)

IRs:
Transfer dest:msg.sender value:valueToReturn"];
}
// Function: 34404.sol-PrivatePlacement-restartPrivatePlacement()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! PrivatePlacementFinished)

IRs:
TMP_126 = UnaryType.BANG PrivatePlacementFinished 
TMP_127(None) = SOLIDITY_CALL require(bool)(TMP_126)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
privatePlacementIsOn = true

IRs:
privatePlacementIsOn(bool) := True(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 34404.sol-PrivatePlacement-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
privatePlacementIsOn = true

IRs:
privatePlacementIsOn(bool) := True(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
PrivatePlacementFinished = false

IRs:
PrivatePlacementFinished(bool) := False(bool)"];
}
// Function: 34404.sol-PrivatePlacement-stopPrivatePlacement()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
privatePlacementIsOn = false

IRs:
privatePlacementIsOn(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 34404.sol-PrivatePlacement-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_118 = CONVERT 0 to address
TMP_119(bool) = newOwner != TMP_118
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 34404.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_10(uint256) = a + b
c(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_11(bool) = c >= a
TMP_12(None) = SOLIDITY_CALL assert(bool)(TMP_11)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 34404.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_6(uint256) = a / b
c(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 34404.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a * b

IRs:
TMP_0(uint256) = a * b
c(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(a == 0 || c / a == b)

IRs:
TMP_1(bool) = a == 0
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(bool) = TMP_1 || TMP_3
TMP_5(None) = SOLIDITY_CALL assert(bool)(TMP_4)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 34404.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_7(bool) = b <= a
TMP_8(None) = SOLIDITY_CALL assert(bool)(TMP_7)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_9(uint256) = a - b
RETURN TMP_9"];
}
// Function: 34404.sol-StandardToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_30(mapping(address => uint256)) -> allowed[_owner]
REF_31(uint256) -> REF_30[_spender]
RETURN REF_31"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 34404.sol-StandardToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

IRs:
TMP_30(bool) = _value == 0
REF_26(mapping(address => uint256)) -> allowed[msg.sender]
REF_27(uint256) -> REF_26[_spender]
TMP_31(bool) = REF_27 == 0
TMP_32(bool) = TMP_30 || TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_28(mapping(address => uint256)) -> allowed[msg.sender]
REF_29(uint256) -> REF_28[_spender]
REF_29(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 34404.sol-StandardToken-balanceOf(address)
digraph{
}
// Function: 34404.sol-StandardToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length == size + 4)

IRs:
REF_32 -> LENGTH msg.data
TMP_35(uint256) = size + 4
TMP_36(bool) = REF_32 == TMP_35
TMP_37(None) = SOLIDITY_CALL assert(bool)(TMP_36)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34404.sol-StandardToken-transfer(address,uint256)
digraph{
}
// Function: 34404.sol-StandardToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_15(mapping(address => uint256)) -> allowed[_from]
REF_16(uint256) -> REF_15[msg.sender]
_allowance(uint256) := REF_16(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_17(uint256) -> balances[_to]
REF_18(uint256) -> balances[_to]
TMP_26(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_18', '_value'] 
REF_17(uint256) (->balances) := TMP_26(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_20(uint256) -> balances[_from]
REF_21(uint256) -> balances[_from]
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_21', '_value'] 
REF_20(uint256) (->balances) := TMP_27(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] = _allowance.sub(_value)

IRs:
REF_23(mapping(address => uint256)) -> allowed[_from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_allowance', '_value'] 
REF_24(uint256) (->allowed) := TMP_28(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
}
