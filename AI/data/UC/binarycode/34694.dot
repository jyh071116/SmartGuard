digraph G {
// Function: 34694.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tkn.sender = _from

IRs:
REF_0(address) -> tkn.sender
REF_0(address) (->tkn) := _from(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tkn.value = _value

IRs:
REF_1(uint256) -> tkn.value
REF_1(uint256) (->tkn) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tkn.data = _data

IRs:
REF_2(bytes) -> tkn.data
REF_2(bytes) (->tkn) := _data(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24)

IRs:
REF_3(None) -> _data[3]
TMP_12 = CONVERT REF_3 to uint32
REF_4(None) -> _data[2]
TMP_13 = CONVERT REF_4 to uint32
TMP_14(uint32) = TMP_13 << 8
TMP_15(uint32) = TMP_12 + TMP_14
REF_5(None) -> _data[1]
TMP_16 = CONVERT REF_5 to uint32
TMP_17(uint32) = TMP_16 << 16
TMP_18(uint32) = TMP_15 + TMP_17
REF_6(None) -> _data[0]
TMP_19 = CONVERT REF_6 to uint32
TMP_20(uint32) = TMP_19 << 24
TMP_21(uint32) = TMP_18 + TMP_20
u(uint32) := TMP_21(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tkn.sig = bytes4(u)

IRs:
REF_7(bytes4) -> tkn.sig
TMP_22 = CONVERT u to bytes4
REF_7(bytes4) (->tkn) := TMP_22(bytes4)"];
}
// Function: 34694.sol-EDOGE-EDOGE()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenCreated == false)

IRs:
TMP_35(bool) = tokenCreated == False
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenCreated = true

IRs:
tokenCreated(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[owner] = totalSupply

IRs:
REF_8(uint256) -> balances[owner]
REF_8(uint256) (->balances) := totalSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(balances[owner] > 0)

IRs:
REF_9(uint256) -> balances[owner]
TMP_37(bool) = REF_9 > 0
TMP_38(None) = SOLIDITY_CALL require(bool)(TMP_37)"];
}
// Function: 34694.sol-EDOGE-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_38(mapping(address => uint256)) -> allowed[_owner]
REF_39(uint256) -> REF_38[_spender]
RETURN REF_39"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 34694.sol-EDOGE-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
REF_37(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34694.sol-EDOGE-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_28(uint256) -> balances[_owner]
RETURN REF_28"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 34694.sol-EDOGE-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
decimals

IRs:
RETURN decimals"];
2[label="Node Type: RETURN 2

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 34694.sol-EDOGE-distributeAirdrop(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[owner] >= safeMul(addresses.length,amount))

IRs:
REF_10(uint256) -> balances[owner]
REF_11 -> LENGTH addresses
TMP_39(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(REF_11,amount)
TMP_40(bool) = REF_10 >= TMP_39
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < addresses.length

IRs:
REF_12 -> LENGTH addresses
TMP_42(bool) = i < REF_12
CONDITION TMP_42"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[owner] = safeSub(balanceOf(owner),amount)

IRs:
REF_13(uint256) -> balances[owner]
TMP_43(uint256) = INTERNAL_CALL, EDOGE.balanceOf(address)(owner)
TMP_44(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_43,amount)
REF_13(uint256) (->balances) := TMP_44(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(balances[owner] >= 0)

IRs:
REF_14(uint256) -> balances[owner]
TMP_45(bool) = REF_14 >= 0
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[addresses[i]] = safeAdd(balanceOf(addresses[i]),amount)

IRs:
REF_15(address) -> addresses[i]
REF_16(uint256) -> balances[REF_15]
REF_17(address) -> addresses[i]
TMP_47(uint256) = INTERNAL_CALL, EDOGE.balanceOf(address)(REF_17)
TMP_48(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_47,amount)
REF_16(uint256) (->balances) := TMP_48(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
transfer(addresses[i],amount)

IRs:
REF_18(address) -> addresses[i]
TMP_49(bool) = INTERNAL_CALL, EDOGE.transfer(address,uint256)(REF_18,amount)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_50(uint256) := i(uint256)
i(uint256) = i + 1"];
10->5;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, EDOGE.onlyOwner()()"];
11->1;
}
// Function: 34694.sol-EDOGE-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_76(bool) = length > 0
RETURN TMP_76"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 34694.sol-EDOGE-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name

IRs:
RETURN name"];
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 34694.sol-EDOGE-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_106(bool) = msg.sender == owner
TMP_107(None) = SOLIDITY_CALL require(bool)(TMP_106)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 34694.sol-EDOGE-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x > MAX_UINT256 - y

IRs:
TMP_23(uint256) = MAX_UINT256 - y
TMP_24(bool) = x > TMP_23
CONDITION TMP_24"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_25(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x + y

IRs:
TMP_26(uint256) = x + y
RETURN TMP_26"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 34694.sol-EDOGE-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
y == 0

IRs:
TMP_30(bool) = y == 0
CONDITION TMP_30"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
x > MAX_UINT256 / y

IRs:
TMP_31(uint256) = MAX_UINT256 / y
TMP_32(bool) = x > TMP_31
CONDITION TMP_32"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_33(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
x * y

IRs:
TMP_34(uint256) = x * y
RETURN TMP_34"];
8[label="Node Type: RETURN 8

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 34694.sol-EDOGE-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x < y

IRs:
TMP_27(bool) = x < y
CONDITION TMP_27"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_28(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x - y

IRs:
TMP_29(uint256) = x - y
RETURN TMP_29"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 34694.sol-EDOGE-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

IRs:
MAX_UINT256(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)"];
}
// Function: 34694.sol-EDOGE-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 100000000000 * 10 ** 8

IRs:
TMP_104(uint256) = 10 ** 8
TMP_105(uint256) = 100000000000 * TMP_104
totalSupply(uint256) := TMP_105(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = eDogecoin

IRs:
name(string) := eDogecoin(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
symbol = EDOGE

IRs:
symbol(string) := EDOGE(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
unlocked = false

IRs:
unlocked(bool) := False(bool)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
tokenCreated = false

IRs:
tokenCreated(bool) := False(bool)"];
}
// Function: 34694.sol-EDOGE-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol

IRs:
RETURN symbol"];
2[label="Node Type: RETURN 2

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 34694.sol-EDOGE-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 34694.sol-EDOGE-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(unlocked)

IRs:
TMP_72(None) = SOLIDITY_CALL require(bool)(unlocked)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
isContract(_to)

IRs:
TMP_73(bool) = INTERNAL_CALL, EDOGE.isContract(address)(_to)
CONDITION TMP_73"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToContract(_to,_value,empty)

IRs:
TMP_74(bool) = INTERNAL_CALL, EDOGE.transferToContract(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_74"];
5[label="Node Type: RETURN 5

EXPRESSION:
transferToAddress(_to,_value,empty)

IRs:
TMP_75(bool) = INTERNAL_CALL, EDOGE.transferToAddress(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_75"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34694.sol-EDOGE-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(unlocked)

IRs:
TMP_68(None) = SOLIDITY_CALL require(bool)(unlocked)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_69(bool) = INTERNAL_CALL, EDOGE.isContract(address)(_to)
CONDITION TMP_69"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_70(bool) = INTERNAL_CALL, EDOGE.transferToContract(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_70"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_71(bool) = INTERNAL_CALL, EDOGE.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_71"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34694.sol-EDOGE-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(unlocked)

IRs:
TMP_52(None) = SOLIDITY_CALL require(bool)(unlocked)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_53(bool) = INTERNAL_CALL, EDOGE.isContract(address)(_to)
CONDITION TMP_53"];
2->3[label="True"];
2->12[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_54(uint256) = INTERNAL_CALL, EDOGE.balanceOf(address)(msg.sender)
TMP_55(bool) = TMP_54 < _value
CONDITION TMP_55"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_56(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[msg.sender] = safeSub(balanceOf(msg.sender),_value)

IRs:
REF_19(uint256) -> balances[msg.sender]
TMP_57(uint256) = INTERNAL_CALL, EDOGE.balanceOf(address)(msg.sender)
TMP_58(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_57,_value)
REF_19(uint256) (->balances) := TMP_58(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] = safeAdd(balanceOf(_to),_value)

IRs:
REF_20(uint256) -> balances[_to]
TMP_59(uint256) = INTERNAL_CALL, EDOGE.balanceOf(address)(_to)
TMP_60(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_59,_value)
REF_20(uint256) (->balances) := TMP_60(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_61 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_61(ContractReceiver)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
receiver.call.value(0)(bytes4(sha3()(_custom_fallback)),msg.sender,_value,_data)

IRs:
TMP_63(bytes32) = SOLIDITY_CALL sha3()(_custom_fallback)
TMP_64 = CONVERT TMP_63 to bytes4
TMP_65(bool) = LOW_LEVEL_CALL, dest:receiver, function:call, arguments:['TMP_64', 'msg.sender', '_value', '_data'] value:0 "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: RETURN 12

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_67(bool) = INTERNAL_CALL, EDOGE.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_67"];
14[label="Node Type: RETURN 14

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34694.sol-EDOGE-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(unlocked)

IRs:
TMP_96(None) = SOLIDITY_CALL require(bool)(unlocked)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
allowance = allowed[_from][msg.sender]

IRs:
REF_29(mapping(address => uint256)) -> allowed[_from]
REF_30(uint256) -> REF_29[msg.sender]
allowance(uint256) := REF_30(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances[_from] >= _value && allowance >= _value)

IRs:
REF_31(uint256) -> balances[_from]
TMP_97(bool) = REF_31 >= _value
TMP_98(bool) = allowance >= _value
TMP_99(bool) = TMP_97 && TMP_98
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] += _value

IRs:
REF_32(uint256) -> balances[_to]
REF_32(-> balances) = REF_32 + _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_from] -= _value

IRs:
REF_33(uint256) -> balances[_from]
REF_33(-> balances) = REF_33 - _value"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
allowance < MAX_UINT256

IRs:
TMP_101(bool) = allowance < MAX_UINT256
CONDITION TMP_101"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_34(mapping(address => uint256)) -> allowed[_from]
REF_35(uint256) -> REF_34[msg.sender]
REF_35(-> allowed) = REF_35 - _value"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34694.sol-EDOGE-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_77(uint256) = INTERNAL_CALL, EDOGE.balanceOf(address)(msg.sender)
TMP_78(bool) = TMP_77 < _value
CONDITION TMP_78"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_79(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = safeSub(balanceOf(msg.sender),_value)

IRs:
REF_23(uint256) -> balances[msg.sender]
TMP_80(uint256) = INTERNAL_CALL, EDOGE.balanceOf(address)(msg.sender)
TMP_81(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_80,_value)
REF_23(uint256) (->balances) := TMP_81(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = safeAdd(balanceOf(_to),_value)

IRs:
REF_24(uint256) -> balances[_to]
TMP_82(uint256) = INTERNAL_CALL, EDOGE.balanceOf(address)(_to)
TMP_83(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_82,_value)
REF_24(uint256) (->balances) := TMP_83(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34694.sol-EDOGE-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_85(uint256) = INTERNAL_CALL, EDOGE.balanceOf(address)(msg.sender)
TMP_86(bool) = TMP_85 < _value
CONDITION TMP_86"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_87(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = safeSub(balanceOf(msg.sender),_value)

IRs:
REF_25(uint256) -> balances[msg.sender]
TMP_88(uint256) = INTERNAL_CALL, EDOGE.balanceOf(address)(msg.sender)
TMP_89(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_88,_value)
REF_25(uint256) (->balances) := TMP_89(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = safeAdd(balanceOf(_to),_value)

IRs:
REF_26(uint256) -> balances[_to]
TMP_90(uint256) = INTERNAL_CALL, EDOGE.balanceOf(address)(_to)
TMP_91(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_90,_value)
REF_26(uint256) (->balances) := TMP_91(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_92 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_92(ContractReceiver)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 34694.sol-EDOGE-unlockForever()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
unlocked = true

IRs:
unlocked(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, EDOGE.onlyOwner()()"];
2->1;
}
// Function: 34694.sol-ERC223-balanceOf(address)
digraph{
}
// Function: 34694.sol-ERC223-decimals()
digraph{
}
// Function: 34694.sol-ERC223-name()
digraph{
}
// Function: 34694.sol-ERC223-symbol()
digraph{
}
// Function: 34694.sol-ERC223-totalSupply()
digraph{
}
// Function: 34694.sol-ERC223-transfer(address,uint256)
digraph{
}
// Function: 34694.sol-ERC223-transfer(address,uint256,bytes)
digraph{
}
// Function: 34694.sol-ERC223-transfer(address,uint256,bytes,string)
digraph{
}
// Function: 34694.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x > MAX_UINT256 - y

IRs:
TMP_0(uint256) = MAX_UINT256 - y
TMP_1(bool) = x > TMP_0
CONDITION TMP_1"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_2(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x + y

IRs:
TMP_3(uint256) = x + y
RETURN TMP_3"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 34694.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
y == 0

IRs:
TMP_7(bool) = y == 0
CONDITION TMP_7"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
x > MAX_UINT256 / y

IRs:
TMP_8(uint256) = MAX_UINT256 / y
TMP_9(bool) = x > TMP_8
CONDITION TMP_9"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_10(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
x * y

IRs:
TMP_11(uint256) = x * y
RETURN TMP_11"];
8[label="Node Type: RETURN 8

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 34694.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x < y

IRs:
TMP_4(bool) = x < y
CONDITION TMP_4"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_5(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x - y

IRs:
TMP_6(uint256) = x - y
RETURN TMP_6"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 34694.sol-SafeMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

IRs:
MAX_UINT256(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)"];
}
}
