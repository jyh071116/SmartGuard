digraph G {
// Function: 35177.sol-DSAuth-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 35177.sol-DSAuth-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_11(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35177.sol-DSAuth-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_5 = CONVERT this to address
TMP_6(bool) = src == TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_7(bool) = src == owner
CONDITION TMP_7"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_8 = CONVERT 0 to DSAuthority
TMP_9(bool) = authority == TMP_8
CONDITION TMP_9"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_10(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_10"];
}
// Function: 35177.sol-DSAuth-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 35177.sol-DSAuth-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 35177.sol-DSAuthority-canCall(address,address,bytes4)
digraph{
}
// Function: 35177.sol-DSMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x + y) >= x)

IRs:
TMP_14(uint256) = x + y
z(uint256) := TMP_14(uint256)
TMP_15(bool) = z >= x
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSMath-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_29(bool) = x >= y
CONDITION TMP_29"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSMath-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_28(bool) = x <= y
CONDITION TMP_28"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSMath-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_27(bool) = x >= y
CONDITION TMP_27"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSMath-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_26(bool) = x <= y
CONDITION TMP_26"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y == 0 || (z = x * y) / y == x)

IRs:
TMP_20(bool) = y == 0
TMP_21(uint256) = x * y
z(uint256) := TMP_21(uint256)
TMP_22(uint256) = z / y
TMP_23(bool) = TMP_22 == x
TMP_24(bool) = TMP_20 || TMP_23
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSMath-rdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,RAY),y / 2) / y

IRs:
TMP_42(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,RAY)
TMP_43(uint256) = y / 2
TMP_44(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_42,TMP_43)
TMP_45(uint256) = TMP_44 / y
z(uint256) := TMP_45(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSMath-rmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),RAY / 2) / RAY

IRs:
TMP_34(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_35(uint256) = RAY / 2
TMP_36(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_34,TMP_35)
TMP_37(uint256) = TMP_36 / RAY
z(uint256) := TMP_37(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSMath-rpow(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_46(bool) = n != 0
CONDITION TMP_46"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_47(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(x,x)
x(uint256) := TMP_47(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_48(uint256) = n % 2
TMP_49(bool) = TMP_48 != 0
CONDITION TMP_49"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_50(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(z,x)
z(uint256) := TMP_50(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_51(uint256) = n % 2
TMP_52(bool) = TMP_51 != 0
CONDITION TMP_52"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint256) := RAY(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_53(uint256) = 10 ** 18
WAD(uint256) := TMP_53(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_54(uint256) = 10 ** 27
RAY(uint256) := TMP_54(uint256)"];
}
// Function: 35177.sol-DSMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x - y) <= x)

IRs:
TMP_17(uint256) = x - y
z(uint256) := TMP_17(uint256)
TMP_18(bool) = z <= x
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSMath-wdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,WAD),y / 2) / y

IRs:
TMP_38(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,WAD)
TMP_39(uint256) = y / 2
TMP_40(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_38,TMP_39)
TMP_41(uint256) = TMP_40 / y
z(uint256) := TMP_41(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSMath-wmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),WAD / 2) / WAD

IRs:
TMP_30(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_31(uint256) = WAD / 2
TMP_32(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_30,TMP_31)
TMP_33(uint256) = TMP_32 / WAD
z(uint256) := TMP_33(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSNote-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 35177.sol-DSThing-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 35177.sol-DSThing-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x + y) >= x)

IRs:
TMP_55(uint256) = x + y
z(uint256) := TMP_55(uint256)
TMP_56(bool) = z >= x
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSThing-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_108(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
TMP_109(None) = SOLIDITY_CALL require(bool)(TMP_108)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35177.sol-DSThing-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_70(bool) = x >= y
CONDITION TMP_70"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSThing-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_69(bool) = x <= y
CONDITION TMP_69"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSThing-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_99 = CONVERT this to address
TMP_100(bool) = src == TMP_99
CONDITION TMP_100"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_101(bool) = src == owner
CONDITION TMP_101"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_102 = CONVERT 0 to DSAuthority
TMP_103(bool) = authority == TMP_102
CONDITION TMP_103"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_104(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_104"];
}
// Function: 35177.sol-DSThing-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_68(bool) = x >= y
CONDITION TMP_68"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSThing-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_67(bool) = x <= y
CONDITION TMP_67"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSThing-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y == 0 || (z = x * y) / y == x)

IRs:
TMP_61(bool) = y == 0
TMP_62(uint256) = x * y
z(uint256) := TMP_62(uint256)
TMP_63(uint256) = z / y
TMP_64(bool) = TMP_63 == x
TMP_65(bool) = TMP_61 || TMP_64
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSThing-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 35177.sol-DSThing-rdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,RAY),y / 2) / y

IRs:
TMP_83(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,RAY)
TMP_84(uint256) = y / 2
TMP_85(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_83,TMP_84)
TMP_86(uint256) = TMP_85 / y
z(uint256) := TMP_86(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSThing-rmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),RAY / 2) / RAY

IRs:
TMP_75(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_76(uint256) = RAY / 2
TMP_77(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_75,TMP_76)
TMP_78(uint256) = TMP_77 / RAY
z(uint256) := TMP_78(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSThing-rpow(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_87(bool) = n != 0
CONDITION TMP_87"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_88(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(x,x)
x(uint256) := TMP_88(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_89(uint256) = n % 2
TMP_90(bool) = TMP_89 != 0
CONDITION TMP_90"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_91(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(z,x)
z(uint256) := TMP_91(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_92(uint256) = n % 2
TMP_93(bool) = TMP_92 != 0
CONDITION TMP_93"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint256) := RAY(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSThing-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 35177.sol-DSThing-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 35177.sol-DSThing-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_105(uint256) = 10 ** 18
WAD(uint256) := TMP_105(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_106(uint256) = 10 ** 27
RAY(uint256) := TMP_106(uint256)"];
}
// Function: 35177.sol-DSThing-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x - y) <= x)

IRs:
TMP_58(uint256) = x - y
z(uint256) := TMP_58(uint256)
TMP_59(bool) = z <= x
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSThing-wdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,WAD),y / 2) / y

IRs:
TMP_79(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,WAD)
TMP_80(uint256) = y / 2
TMP_81(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_79,TMP_80)
TMP_82(uint256) = TMP_81 / y
z(uint256) := TMP_82(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-DSThing-wmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),WAD / 2) / WAD

IRs:
TMP_71(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_72(uint256) = WAD / 2
TMP_73(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_71,TMP_72)
TMP_74(uint256) = TMP_73 / WAD
z(uint256) := TMP_74(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-PriceFeed-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 35177.sol-PriceFeed-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x + y) >= x)

IRs:
TMP_110(uint256) = x + y
z(uint256) := TMP_110(uint256)
TMP_111(bool) = z >= x
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-PriceFeed-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_175(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
TMP_176(None) = SOLIDITY_CALL require(bool)(TMP_175)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35177.sol-PriceFeed-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_125(bool) = x >= y
CONDITION TMP_125"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-PriceFeed-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_124(bool) = x <= y
CONDITION TMP_124"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-PriceFeed-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_154 = CONVERT this to address
TMP_155(bool) = src == TMP_154
CONDITION TMP_155"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_156(bool) = src == owner
CONDITION TMP_156"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_157 = CONVERT 0 to DSAuthority
TMP_158(bool) = authority == TMP_157
CONDITION TMP_158"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_159(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_159"];
}
// Function: 35177.sol-PriceFeed-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_123(bool) = x >= y
CONDITION TMP_123"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-PriceFeed-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_122(bool) = x <= y
CONDITION TMP_122"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-PriceFeed-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(y == 0 || (z = x * y) / y == x)

IRs:
TMP_116(bool) = y == 0
TMP_117(uint256) = x * y
z(uint256) := TMP_117(uint256)
TMP_118(uint256) = z / y
TMP_119(bool) = TMP_118 == x
TMP_120(bool) = TMP_116 || TMP_119
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-PriceFeed-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 35177.sol-PriceFeed-peek()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(bytes32(val),now < zzz)

IRs:
TMP_160 = CONVERT val to bytes32
TMP_161(bool) = now < zzz
RETURN TMP_160,TMP_161"];
}
// Function: 35177.sol-PriceFeed-post(uint128,uint32,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
val = val_

IRs:
val(uint128) := val_(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
zzz = zzz_

IRs:
zzz(uint32) := zzz_(uint32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
ret = med_.call(bytes4(keccak256()(poke())))

IRs:
TMP_165(bytes32) = SOLIDITY_CALL keccak256()(poke())
TMP_166 = CONVERT TMP_165 to bytes4
TMP_167(bool) = LOW_LEVEL_CALL, dest:med_, function:call, arguments:['TMP_166']  
ret(bool) := TMP_167(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ret
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
6->1;
}
// Function: 35177.sol-PriceFeed-rdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,RAY),y / 2) / y

IRs:
TMP_138(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,RAY)
TMP_139(uint256) = y / 2
TMP_140(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_138,TMP_139)
TMP_141(uint256) = TMP_140 / y
z(uint256) := TMP_141(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-PriceFeed-read()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(now < zzz)

IRs:
TMP_162(bool) = now < zzz
TMP_163(None) = SOLIDITY_CALL assert(bool)(TMP_162)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
bytes32(val)

IRs:
TMP_164 = CONVERT val to bytes32
RETURN TMP_164"];
}
// Function: 35177.sol-PriceFeed-rmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),RAY / 2) / RAY

IRs:
TMP_130(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_131(uint256) = RAY / 2
TMP_132(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_130,TMP_131)
TMP_133(uint256) = TMP_132 / RAY
z(uint256) := TMP_133(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-PriceFeed-rpow(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_142(bool) = n != 0
CONDITION TMP_142"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_143(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(x,x)
x(uint256) := TMP_143(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_144(uint256) = n % 2
TMP_145(bool) = TMP_144 != 0
CONDITION TMP_145"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_146(uint256) = INTERNAL_CALL, DSMath.rmul(uint256,uint256)(z,x)
z(uint256) := TMP_146(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint256) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_147(uint256) = n % 2
TMP_148(bool) = TMP_147 != 0
CONDITION TMP_148"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint256) := RAY(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-PriceFeed-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 35177.sol-PriceFeed-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 35177.sol-PriceFeed-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_172(uint256) = 10 ** 18
WAD(uint256) := TMP_172(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_173(uint256) = 10 ** 27
RAY(uint256) := TMP_173(uint256)"];
}
// Function: 35177.sol-PriceFeed-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((z = x - y) <= x)

IRs:
TMP_113(uint256) = x - y
z(uint256) := TMP_113(uint256)
TMP_114(bool) = z <= x
TMP_115(None) = SOLIDITY_CALL require(bool)(TMP_114)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-PriceFeed-void()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
zzz = 0

IRs:
zzz(uint32) := 0(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 35177.sol-PriceFeed-wdiv(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,WAD),y / 2) / y

IRs:
TMP_134(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,WAD)
TMP_135(uint256) = y / 2
TMP_136(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_134,TMP_135)
TMP_137(uint256) = TMP_136 / y
z(uint256) := TMP_137(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35177.sol-PriceFeed-wmul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = add(mul(x,y),WAD / 2) / WAD

IRs:
TMP_126(uint256) = INTERNAL_CALL, DSMath.mul(uint256,uint256)(x,y)
TMP_127(uint256) = WAD / 2
TMP_128(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(TMP_126,TMP_127)
TMP_129(uint256) = TMP_128 / WAD
z(uint256) := TMP_129(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
}
