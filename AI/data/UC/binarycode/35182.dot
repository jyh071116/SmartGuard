digraph G {
// Function: 35182.sol-Oryza-Oryza(Token,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
changeVotingRules(sharesAddress,minimumSharesToPassAVote,minutesForDebate)

IRs:
INTERNAL_CALL, Oryza.changeVotingRules(Token,uint256,uint256)(sharesAddress,minimumSharesToPassAVote,minutesForDebate)"];
}
// Function: 35182.sol-Oryza-changeVotingRules(Token,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
sharesTokenAddress = Token(sharesAddress)

IRs:
TMP_15 = CONVERT sharesAddress to Token
sharesTokenAddress(Token) := TMP_15(Token)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
minimumSharesToPassAVote == 0

IRs:
TMP_16(bool) = minimumSharesToPassAVote == 0
CONDITION TMP_16"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
minimumSharesToPassAVote = 1

IRs:
minimumSharesToPassAVote(uint256) := 1(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minimumQuorum = minimumSharesToPassAVote

IRs:
minimumQuorum(uint256) := minimumSharesToPassAVote(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
debatingPeriodInMinutes = minutesForDebate

IRs:
debatingPeriodInMinutes(uint256) := minutesForDebate(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ChangeOfRules(minimumQuorum,debatingPeriodInMinutes,sharesTokenAddress)

IRs:
Emit ChangeOfRules(minimumQuorum,debatingPeriodInMinutes,sharesTokenAddress)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
8->1;
}
// Function: 35182.sol-Oryza-checkProposalCode(uint256,address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
p = proposals[proposalNumber]

IRs:
REF_12(Oryza.Proposal) -> proposals[proposalNumber]
p(Oryza.Proposal) := REF_12(Oryza.Proposal)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
p.proposalHash == sha3()(beneficiary,weiAmount,transactionBytecode)

IRs:
REF_13(bytes32) -> p.proposalHash
TMP_29(bytes32) = SOLIDITY_CALL sha3()(beneficiary,weiAmount,transactionBytecode)
TMP_30(bool) = REF_13 == TMP_29
RETURN TMP_30"];
3[label="Node Type: RETURN 3

EXPRESSION:
codeChecksOut

IRs:
RETURN codeChecksOut"];
}
// Function: 35182.sol-Oryza-executeProposal(uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
p = proposals[proposalNumber]

IRs:
REF_24(Oryza.Proposal) -> proposals[proposalNumber]
p(Oryza.Proposal) := REF_24(Oryza.Proposal)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(now > p.votingDeadline && ! p.executed && p.proposalHash == sha3()(p.recipient,p.amount,transactionBytecode))

IRs:
REF_25(uint256) -> p.votingDeadline
TMP_38(bool) = now > REF_25
REF_26(bool) -> p.executed
TMP_39 = UnaryType.BANG REF_26 
TMP_40(bool) = TMP_38 && TMP_39
REF_27(bytes32) -> p.proposalHash
REF_28(address) -> p.recipient
REF_29(uint256) -> p.amount
TMP_41(bytes32) = SOLIDITY_CALL sha3()(REF_28,REF_29,transactionBytecode)
TMP_42(bool) = REF_27 == TMP_41
TMP_43(bool) = TMP_40 && TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
quorum = 0

IRs:
quorum(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
yea = 0

IRs:
yea(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
nay = 0

IRs:
nay(uint256) := 0(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->18;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < p.votes.length

IRs:
REF_30(Oryza.Vote[]) -> p.votes
REF_31 -> LENGTH REF_30
TMP_45(bool) = i < REF_31
CONDITION TMP_45"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
v = p.votes[i]

IRs:
REF_32(Oryza.Vote[]) -> p.votes
REF_33(Oryza.Vote) -> REF_32[i]
v(Oryza.Vote) := REF_33(Oryza.Vote)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
voteWeight = sharesTokenAddress.balanceOf(v.voter)

IRs:
REF_35(address) -> v.voter
TMP_46(uint256) = HIGH_LEVEL_CALL, dest:sharesTokenAddress(Token), function:balanceOf, arguments:['REF_35']  
voteWeight(uint256) := TMP_46(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
quorum += voteWeight

IRs:
quorum(uint256) = quorum + voteWeight"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
v.inSupport

IRs:
REF_36(bool) -> v.inSupport
CONDITION REF_36"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
yea += voteWeight

IRs:
yea(uint256) = yea + voteWeight"];
14->16;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
nay += voteWeight

IRs:
nay(uint256) = nay + voteWeight"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
17->9;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
require(bool)(quorum >= minimumQuorum)

IRs:
TMP_47(bool) = quorum >= minimumQuorum
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
yea > nay

IRs:
TMP_49(bool) = yea > nay
CONDITION TMP_49"];
19->20[label="True"];
19->23[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
p.executed = true

IRs:
REF_37(bool) -> p.executed
REF_37(bool) (->p) := True(bool)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool)(p.recipient.call.value(p.amount)(transactionBytecode))

IRs:
REF_38(address) -> p.recipient
REF_41(uint256) -> p.amount
TMP_51(bool) = LOW_LEVEL_CALL, dest:REF_38, function:call, arguments:['transactionBytecode'] value:REF_41 
TMP_52(None) = SOLIDITY_CALL require(bool)(TMP_51)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
p.proposalPassed = true

IRs:
REF_42(bool) -> p.proposalPassed
REF_42(bool) (->p) := True(bool)"];
22->24;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
p.proposalPassed = false

IRs:
REF_43(bool) -> p.proposalPassed
REF_43(bool) (->p) := False(bool)"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ProposalTallied(proposalNumber,yea - nay,quorum,p.proposalPassed)

IRs:
TMP_53(uint256) = yea - nay
REF_44(bool) -> p.proposalPassed
Emit ProposalTallied(proposalNumber,TMP_53,quorum,REF_44)"];
}
// Function: 35182.sol-Oryza-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
receivedEther(msg.sender,msg.value)

IRs:
Emit receivedEther(msg.sender,msg.value)"];
}
// Function: 35182.sol-Oryza-newProposal(address,uint256,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proposalID = proposals.length ++

IRs:
REF_2 -> LENGTH proposals
TMP_19(uint256) := REF_2(uint256)
REF_2(-> proposals) = REF_2 + 1
proposalID(uint256) := TMP_19(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
p = proposals[proposalID]

IRs:
REF_3(Oryza.Proposal) -> proposals[proposalID]
p(Oryza.Proposal) := REF_3(Oryza.Proposal)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
p.recipient = beneficiary

IRs:
REF_4(address) -> p.recipient
REF_4(address) (->p) := beneficiary(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
p.amount = weiAmount

IRs:
REF_5(uint256) -> p.amount
REF_5(uint256) (->p) := weiAmount(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
p.description = jobDescription

IRs:
REF_6(string) -> p.description
REF_6(string) (->p) := jobDescription(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
p.proposalHash = sha3()(beneficiary,weiAmount,transactionBytecode)

IRs:
REF_7(bytes32) -> p.proposalHash
TMP_20(bytes32) = SOLIDITY_CALL sha3()(beneficiary,weiAmount,transactionBytecode)
REF_7(bytes32) (->p) := TMP_20(bytes32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
p.votingDeadline = now + debatingPeriodInMinutes * 60

IRs:
REF_8(uint256) -> p.votingDeadline
TMP_21(uint256) = debatingPeriodInMinutes * 60
TMP_22(uint256) = now + TMP_21
REF_8(uint256) (->p) := TMP_22(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
p.executed = false

IRs:
REF_9(bool) -> p.executed
REF_9(bool) (->p) := False(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
p.proposalPassed = false

IRs:
REF_10(bool) -> p.proposalPassed
REF_10(bool) (->p) := False(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
p.numberOfVotes = 0

IRs:
REF_11(uint256) -> p.numberOfVotes
REF_11(uint256) (->p) := 0(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ProposalAdded(proposalID,beneficiary,weiAmount,jobDescription)

IRs:
Emit ProposalAdded(proposalID,beneficiary,weiAmount,jobDescription)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
numProposals = proposalID + 1

IRs:
TMP_24(uint256) = proposalID + 1
numProposals(uint256) := TMP_24(uint256)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
proposalID

IRs:
RETURN proposalID"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyShareholders()

IRs:
MODIFIER_CALL, Oryza.onlyShareholders()()"];
14->1;
15[label="Node Type: RETURN 15

EXPRESSION:
proposalID

IRs:
RETURN proposalID"];
}
// Function: 35182.sol-Oryza-newProposalInEther(address,uint256,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
newProposal(beneficiary,etherAmount * 1000000000000000000,jobDescription,transactionBytecode)

IRs:
TMP_26(uint256) = etherAmount * 1000000000000000000
TMP_27(uint256) = INTERNAL_CALL, Oryza.newProposal(address,uint256,string,bytes)(beneficiary,TMP_26,jobDescription,transactionBytecode)
RETURN TMP_27"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyShareholders()

IRs:
MODIFIER_CALL, Oryza.onlyShareholders()()"];
2->1;
3[label="Node Type: RETURN 3

EXPRESSION:
proposalID

IRs:
RETURN proposalID"];
}
// Function: 35182.sol-Oryza-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_55(bool) = msg.sender == owner
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35182.sol-Oryza-onlyShareholders()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(sharesTokenAddress.balanceOf(msg.sender) > 0)

IRs:
TMP_57(uint256) = HIGH_LEVEL_CALL, dest:sharesTokenAddress(Token), function:balanceOf, arguments:['msg.sender']  
TMP_58(bool) = TMP_57 > 0
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35182.sol-Oryza-owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 35182.sol-Oryza-receiveApproval(address,uint256,address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
t = Token(_token)

IRs:
TMP_8 = CONVERT _token to Token
t(Token) := TMP_8(Token)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(t.transferFrom(_from,this,_value))

IRs:
TMP_9(bool) = HIGH_LEVEL_CALL, dest:t(Token), function:transferFrom, arguments:['_from', 'this', '_value']  
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
receivedTokens(_from,_value,_token,_extraData)

IRs:
Emit receivedTokens(_from,_value,_token,_extraData)"];
}
// Function: 35182.sol-Oryza-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
2->1;
}
// Function: 35182.sol-Oryza-vote(uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
p = proposals[proposalNumber]

IRs:
REF_14(Oryza.Proposal) -> proposals[proposalNumber]
p(Oryza.Proposal) := REF_14(Oryza.Proposal)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(p.voted[msg.sender] != true)

IRs:
REF_15(mapping(address => bool)) -> p.voted
REF_16(bool) -> REF_15[msg.sender]
TMP_31(bool) = REF_16 != True
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
voteID = p.votes.length ++

IRs:
REF_17(Oryza.Vote[]) -> p.votes
REF_18 -> LENGTH REF_17
TMP_33(uint256) := REF_18(uint256)
REF_18(-> p) = REF_18 + 1
voteID(uint256) := TMP_33(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
p.votes[voteID] = Vote({inSupport:supportsProposal,voter:msg.sender})

IRs:
REF_19(Oryza.Vote[]) -> p.votes
REF_20(Oryza.Vote) -> REF_19[voteID]
TMP_34(Oryza.Vote) = new Vote(supportsProposal,msg.sender)
REF_20(Oryza.Vote) (->p) := TMP_34(Oryza.Vote)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
p.voted[msg.sender] = true

IRs:
REF_21(mapping(address => bool)) -> p.voted
REF_22(bool) -> REF_21[msg.sender]
REF_22(bool) (->p) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
p.numberOfVotes = voteID + 1

IRs:
REF_23(uint256) -> p.numberOfVotes
TMP_35(uint256) = voteID + 1
REF_23(uint256) (->p) := TMP_35(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Voted(proposalNumber,supportsProposal,msg.sender)

IRs:
Emit Voted(proposalNumber,supportsProposal,msg.sender)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
voteID

IRs:
RETURN voteID"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyShareholders()

IRs:
MODIFIER_CALL, Oryza.onlyShareholders()()"];
9->1;
10[label="Node Type: RETURN 10

EXPRESSION:
voteID

IRs:
RETURN voteID"];
}
// Function: 35182.sol-Token-transferFrom(address,address,uint256)
digraph{
}
// Function: 35182.sol-owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_1(bool) = msg.sender == owner
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 35182.sol-owned-owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 35182.sol-owned-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, owned.onlyOwner()()"];
2->1;
}
// Function: 35182.sol-tokenRecipient-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
receivedEther(msg.sender,msg.value)

IRs:
Emit receivedEther(msg.sender,msg.value)"];
}
// Function: 35182.sol-tokenRecipient-receiveApproval(address,uint256,address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
t = Token(_token)

IRs:
TMP_3 = CONVERT _token to Token
t(Token) := TMP_3(Token)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(t.transferFrom(_from,this,_value))

IRs:
TMP_4(bool) = HIGH_LEVEL_CALL, dest:t(Token), function:transferFrom, arguments:['_from', 'this', '_value']  
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
receivedTokens(_from,_value,_token,_extraData)

IRs:
Emit receivedTokens(_from,_value,_token,_extraData)"];
}
}
