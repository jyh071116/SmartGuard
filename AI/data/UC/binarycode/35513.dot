digraph G {
// Function: 35513.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tkn.sender = _from

IRs:
REF_0(address) -> tkn.sender
REF_0(address) (->tkn) := _from(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tkn.value = _value

IRs:
REF_1(uint256) -> tkn.value
REF_1(uint256) (->tkn) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tkn.data = _data

IRs:
REF_2(bytes) -> tkn.data
REF_2(bytes) (->tkn) := _data(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24)

IRs:
REF_3(None) -> _data[3]
TMP_0 = CONVERT REF_3 to uint32
REF_4(None) -> _data[2]
TMP_1 = CONVERT REF_4 to uint32
TMP_2(uint32) = TMP_1 << 8
TMP_3(uint32) = TMP_0 + TMP_2
REF_5(None) -> _data[1]
TMP_4 = CONVERT REF_5 to uint32
TMP_5(uint32) = TMP_4 << 16
TMP_6(uint32) = TMP_3 + TMP_5
REF_6(None) -> _data[0]
TMP_7 = CONVERT REF_6 to uint32
TMP_8(uint32) = TMP_7 << 24
TMP_9(uint32) = TMP_6 + TMP_8
u(uint32) := TMP_9(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tkn.sig = bytes4(u)

IRs:
REF_7(bytes4) -> tkn.sig
TMP_10 = CONVERT u to bytes4
REF_7(bytes4) (->tkn) := TMP_10(bytes4)"];
}
// Function: 35513.sol-ERC223-balanceOf(address)
digraph{
}
// Function: 35513.sol-ERC223-decimals()
digraph{
}
// Function: 35513.sol-ERC223-name()
digraph{
}
// Function: 35513.sol-ERC223-symbol()
digraph{
}
// Function: 35513.sol-ERC223-totalSupply()
digraph{
}
// Function: 35513.sol-ERC223-transfer(address,uint256)
digraph{
}
// Function: 35513.sol-ERC223-transfer(address,uint256,bytes)
digraph{
}
// Function: 35513.sol-ERC223-transfer(address,uint256,bytes,string)
digraph{
}
// Function: 35513.sol-GameCoin-GameCoin()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_s = TokenStorage(0x9ff62629aec4436d03a84665acfb2a3195ca784b)

IRs:
TMP_29 = CONVERT 913218840330576197303030470797074860558477064267 to TokenStorage
_s(TokenStorage) := TMP_29(TokenStorage)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = GameCoin

IRs:
name(string) := GameCoin(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = GMC

IRs:
symbol(string) := GMC(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = 2

IRs:
decimals(uint8) := 2(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = 25907002099

IRs:
totalSupply(uint256) := 25907002099(uint256)"];
}
// Function: 35513.sol-GameCoin-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_owner] == 0

IRs:
REF_17(uint256) -> balances[_owner]
TMP_67(bool) = REF_17 == 0
CONDITION TMP_67"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
uint256(_s.balanceOf(_owner))

IRs:
TMP_68(uint48) = HIGH_LEVEL_CALL, dest:_s(TokenStorage), function:balanceOf, arguments:['_owner']  
TMP_69 = CONVERT TMP_68 to uint256
RETURN TMP_69"];
3[label="Node Type: RETURN 3

EXPRESSION:
uint256(balances[_owner])

IRs:
REF_19(uint256) -> balances[_owner]
TMP_70 = CONVERT REF_19 to uint256
RETURN TMP_70"];
5[label="Node Type: RETURN 5

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 35513.sol-GameCoin-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
decimals

IRs:
RETURN decimals"];
2[label="Node Type: RETURN 2

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 35513.sol-GameCoin-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_50(bool) = length > 0
RETURN TMP_50"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 35513.sol-GameCoin-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name

IRs:
RETURN name"];
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 35513.sol-GameCoin-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x > MAX_UINT256 - y

IRs:
TMP_20(uint256) = MAX_UINT256 - y
TMP_21(bool) = x > TMP_20
CONDITION TMP_21"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x + y

IRs:
TMP_22(uint256) = x + y
RETURN TMP_22"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35513.sol-GameCoin-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
y == 0

IRs:
TMP_25(bool) = y == 0
CONDITION TMP_25"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
x > MAX_UINT256 / y

IRs:
TMP_26(uint256) = MAX_UINT256 / y
TMP_27(bool) = x > TMP_26
CONDITION TMP_27"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
x * y

IRs:
TMP_28(uint256) = x * y
RETURN TMP_28"];
8[label="Node Type: RETURN 8

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35513.sol-GameCoin-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x < y

IRs:
TMP_23(bool) = x < y
CONDITION TMP_23"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x - y

IRs:
TMP_24(uint256) = x - y
RETURN TMP_24"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35513.sol-GameCoin-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

IRs:
MAX_UINT256(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)"];
}
// Function: 35513.sol-GameCoin-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol

IRs:
RETURN symbol"];
2[label="Node Type: RETURN 2

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 35513.sol-GameCoin-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 35513.sol-GameCoin-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_47(bool) = INTERNAL_CALL, GameCoin.isContract(address)(_to)
CONDITION TMP_47"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(_to,_value,empty)

IRs:
TMP_48(bool) = INTERNAL_CALL, GameCoin.transferToContract(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_48"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(_to,_value,empty)

IRs:
TMP_49(bool) = INTERNAL_CALL, GameCoin.transferToAddress(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_49"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35513.sol-GameCoin-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_44(bool) = INTERNAL_CALL, GameCoin.isContract(address)(_to)
CONDITION TMP_44"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_45(bool) = INTERNAL_CALL, GameCoin.transferToContract(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_45"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_46(bool) = INTERNAL_CALL, GameCoin.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_46"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35513.sol-GameCoin-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_30(bool) = INTERNAL_CALL, GameCoin.isContract(address)(_to)
CONDITION TMP_30"];
1->2[label="True"];
1->11[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_31(uint256) = INTERNAL_CALL, GameCoin.balanceOf(address)(msg.sender)
TMP_32(bool) = TMP_31 < _value
CONDITION TMP_32"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] = safeSub(balanceOf(msg.sender),_value)

IRs:
REF_8(uint256) -> balances[msg.sender]
TMP_33(uint256) = INTERNAL_CALL, GameCoin.balanceOf(address)(msg.sender)
TMP_34(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_33,_value)
REF_8(uint256) (->balances) := TMP_34(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_to] = safeAdd(balanceOf(_to),_value)

IRs:
REF_9(uint256) -> balances[_to]
TMP_35(uint256) = INTERNAL_CALL, GameCoin.balanceOf(address)(_to)
TMP_36(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_35,_value)
REF_9(uint256) (->balances) := TMP_36(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_37 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_37(ContractReceiver)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
receiver.call.value(0)(bytes4(sha3()(_custom_fallback)),msg.sender,_value,_data)

IRs:
TMP_39(bytes32) = SOLIDITY_CALL sha3()(_custom_fallback)
TMP_40 = CONVERT TMP_39 to bytes4
TMP_41(bool) = LOW_LEVEL_CALL, dest:receiver, function:call, arguments:['TMP_40', 'msg.sender', '_value', '_data'] value:0 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_43(bool) = INTERNAL_CALL, GameCoin.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_43"];
13[label="Node Type: RETURN 13

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35513.sol-GameCoin-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_51(uint256) = INTERNAL_CALL, GameCoin.balanceOf(address)(msg.sender)
TMP_52(bool) = TMP_51 < _value
CONDITION TMP_52"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = safeSub(balanceOf(msg.sender),_value)

IRs:
REF_12(uint256) -> balances[msg.sender]
TMP_53(uint256) = INTERNAL_CALL, GameCoin.balanceOf(address)(msg.sender)
TMP_54(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_53,_value)
REF_12(uint256) (->balances) := TMP_54(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = safeAdd(balanceOf(_to),_value)

IRs:
REF_13(uint256) -> balances[_to]
TMP_55(uint256) = INTERNAL_CALL, GameCoin.balanceOf(address)(_to)
TMP_56(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_55,_value)
REF_13(uint256) (->balances) := TMP_56(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35513.sol-GameCoin-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_58(uint256) = INTERNAL_CALL, GameCoin.balanceOf(address)(msg.sender)
TMP_59(bool) = TMP_58 < _value
CONDITION TMP_59"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = safeSub(balanceOf(msg.sender),_value)

IRs:
REF_14(uint256) -> balances[msg.sender]
TMP_60(uint256) = INTERNAL_CALL, GameCoin.balanceOf(address)(msg.sender)
TMP_61(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(TMP_60,_value)
REF_14(uint256) (->balances) := TMP_61(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = safeAdd(balanceOf(_to),_value)

IRs:
REF_15(uint256) -> balances[_to]
TMP_62(uint256) = INTERNAL_CALL, GameCoin.balanceOf(address)(_to)
TMP_63(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_62,_value)
REF_15(uint256) (->balances) := TMP_63(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_64 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_64(ContractReceiver)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35513.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x > MAX_UINT256 - y

IRs:
TMP_11(uint256) = MAX_UINT256 - y
TMP_12(bool) = x > TMP_11
CONDITION TMP_12"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x + y

IRs:
TMP_13(uint256) = x + y
RETURN TMP_13"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35513.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
y == 0

IRs:
TMP_16(bool) = y == 0
CONDITION TMP_16"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
x > MAX_UINT256 / y

IRs:
TMP_17(uint256) = MAX_UINT256 / y
TMP_18(bool) = x > TMP_17
CONDITION TMP_18"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
x * y

IRs:
TMP_19(uint256) = x * y
RETURN TMP_19"];
8[label="Node Type: RETURN 8

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35513.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x < y

IRs:
TMP_14(bool) = x < y
CONDITION TMP_14"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
x - y

IRs:
TMP_15(uint256) = x - y
RETURN TMP_15"];
5[label="Node Type: RETURN 5

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 35513.sol-SafeMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

IRs:
MAX_UINT256(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)"];
}
// Function: 35513.sol-TokenStorage-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 35513.sol-TokenStorage-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 35513.sol-TokenStorage-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 35513.sol-TokenStorage-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 35513.sol-TokenStorage-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 35513.sol-TokenStorage-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 35513.sol-TokenStorage-transfer(address,uint48)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35513.sol-TokenStorage-transfer(address,uint48,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35513.sol-TokenStorage-transfer(address,uint48,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35513.sol-TokenStorage-transferToAddress(address,uint48,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 35513.sol-TokenStorage-transferToContract(address,uint48,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
success

IRs:
RETURN success"];
}
}
