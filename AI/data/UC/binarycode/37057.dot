digraph G {
// Function: 37057.sol-SafeMath-SafeMath()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 37057.sol-SafeMath-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_0(uint256) = _x + _y
z(uint256) := TMP_0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_1(bool) = z >= _x
TMP_2(None) = SOLIDITY_CALL assert(bool)(TMP_1)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37057.sol-SafeMath-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x * _y

IRs:
TMP_6(uint256) = _x * _y
z(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_x == 0 || z / _x == _y)

IRs:
TMP_7(bool) = _x == 0
TMP_8(uint256) = z / _x
TMP_9(bool) = TMP_8 == _y
TMP_10(bool) = TMP_7 || TMP_9
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37057.sol-SafeMath-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_x >= _y)

IRs:
TMP_3(bool) = _x >= _y
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_5(uint256) = _x - _y
RETURN TMP_5"];
}
// Function: 37057.sol-TokenAuction-SafeMath()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 37057.sol-TokenAuction-TokenAuction()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 37057.sol-TokenAuction-afterAuction()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((stateMask & AUCTION_END_EVENT) != 0)

IRs:
TMP_128(uint256) = stateMask & AUCTION_END_EVENT
TMP_129(bool) = TMP_128 != 0
TMP_130(None) = SOLIDITY_CALL require(bool)(TMP_129)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37057.sol-TokenAuction-afterSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((stateMask & SALE_END_EVENT) != 0)

IRs:
TMP_135(uint256) = stateMask & SALE_END_EVENT
TMP_136(bool) = TMP_135 != 0
TMP_137(None) = SOLIDITY_CALL require(bool)(TMP_136)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37057.sol-TokenAuction-depositSecretBid(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
! (msg.sender == owner && ! isLocked) && (_hash == 0 || secretBids[msg.sender].hash != 0)

IRs:
TMP_50(bool) = msg.sender == owner
TMP_51 = UnaryType.BANG isLocked 
TMP_52(bool) = TMP_50 && TMP_51
TMP_53 = UnaryType.BANG TMP_52 
TMP_54(bool) = _hash == 0
REF_1(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_2(bytes32) -> REF_1.hash
TMP_55(bool) = REF_2 != 0
TMP_56(bool) = TMP_54 || TMP_55
TMP_57(bool) = TMP_53 && TMP_56
CONDITION TMP_57"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_58(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
secretBids[msg.sender].hash = _hash

IRs:
REF_3(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_4(bytes32) -> REF_3.hash
REF_4(bytes32) (->secretBids) := _hash(bytes32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
secretBids[msg.sender].deposit = msg.value

IRs:
REF_5(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_6(uint256) -> REF_5.deposit
REF_6(uint256) (->secretBids) := msg.value(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
secretBidCount += 1

IRs:
secretBidCount(uint256) = secretBidCount + 1"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_batch = secretBidCount / batchSize

IRs:
TMP_59(uint256) = secretBidCount / batchSize
_batch(uint256) := TMP_59(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
SecretBidEvent(_batch,msg.sender,msg.value,_hash,_message)

IRs:
Emit SecretBidEvent(_batch,msg.sender,msg.value,_hash,_message)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
duringAuction()

IRs:
MODIFIER_CALL, TokenAuction.duringAuction()()"];
9->1;
}
// Function: 37057.sol-TokenAuction-disqualifyBid(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
secretBids[msg.sender].disqualified = true

IRs:
REF_7(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_8(bool) -> REF_7.disqualified
REF_8(bool) (->secretBids) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
duringAuction()

IRs:
MODIFIER_CALL, TokenAuction.duringAuction()()"];
3->1;
}
// Function: 37057.sol-TokenAuction-doDeveloperGrant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_quantity = purchasedCount * developerPctX10 / 1000

IRs:
TMP_98(uint256) = purchasedCount * developerPctX10
TMP_99(uint256) = TMP_98 / 1000
_quantity(uint256) := TMP_99(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_tokensLeft = token.balanceOf(this)

IRs:
TMP_100(uint256) = HIGH_LEVEL_CALL, dest:token(iBurnableToken), function:balanceOf, arguments:['this']  
_tokensLeft(uint256) := TMP_100(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_quantity > _tokensLeft

IRs:
TMP_101(bool) = _quantity > _tokensLeft
CONDITION TMP_101"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_quantity = _tokensLeft

IRs:
_quantity(uint256) := _tokensLeft(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_quantity > 0

IRs:
TMP_102(bool) = _quantity > 0
CONDITION TMP_102"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_tokensLeft -= _quantity

IRs:
_tokensLeft(uint256) = _tokensLeft - _quantity"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
! token.transfer(developers,_quantity)

IRs:
TMP_103(bool) = HIGH_LEVEL_CALL, dest:token(iBurnableToken), function:transfer, arguments:['developers', '_quantity']  
TMP_104 = UnaryType.BANG TMP_103 
CONDITION TMP_104"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
revert()()

IRs:
TMP_105(None) = SOLIDITY_CALL revert()()"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
token.unPaidBurnTokens(_tokensLeft)

IRs:
HIGH_LEVEL_CALL, dest:token(iBurnableToken), function:unPaidBurnTokens, arguments:['_tokensLeft']  "];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
afterSale()

IRs:
MODIFIER_CALL, TokenAuction.afterSale()()"];
13->1;
}
// Function: 37057.sol-TokenAuction-duringAuction()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((stateMask & (AUCTION_START_EVENT | AUCTION_END_EVENT)) == AUCTION_START_EVENT)

IRs:
TMP_124(uint256) = AUCTION_START_EVENT | AUCTION_END_EVENT
TMP_125(uint256) = stateMask & TMP_124
TMP_126(bool) = TMP_125 == AUCTION_START_EVENT
TMP_127(None) = SOLIDITY_CALL require(bool)(TMP_126)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37057.sol-TokenAuction-duringSale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((stateMask & (SALE_START_EVENT | SALE_END_EVENT)) == SALE_START_EVENT)

IRs:
TMP_131(uint256) = SALE_START_EVENT | SALE_END_EVENT
TMP_132(uint256) = stateMask & TMP_131
TMP_133(bool) = TMP_132 == SALE_START_EVENT
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37057.sol-TokenAuction-executeBid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
executeBidFor(msg.sender,_secret,_price,_quantity)

IRs:
INTERNAL_CALL, TokenAuction.executeBidFor(address,uint256,uint256,uint256)(msg.sender,_secret,_price,_quantity)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
duringSale()

IRs:
MODIFIER_CALL, TokenAuction.duringSale()()"];
2->1;
}
// Function: 37057.sol-TokenAuction-executeBidFor(address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->32;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
computedHash = keccak256()(_secret,_price,_quantity)

IRs:
TMP_66(bytes32) = SOLIDITY_CALL keccak256()(_secret,_price,_quantity)
computedHash(bytes32) := TMP_66(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(secretBids[_addr].hash == computedHash)

IRs:
REF_9(TokenAuction.SecretBid) -> secretBids[_addr]
REF_10(bytes32) -> REF_9.hash
TMP_67(bool) = REF_10 == computedHash
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
secretBids[_addr].deposit > 0

IRs:
REF_11(TokenAuction.SecretBid) -> secretBids[_addr]
REF_12(uint256) -> REF_11.deposit
TMP_69(bool) = REF_12 > 0
CONDITION TMP_69"];
3->4[label="True"];
3->31[label="False"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_cost = 0

IRs:
_cost(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_refund = 0

IRs:
_refund(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_price >= strikePrice && ! secretBids[_addr].disqualified

IRs:
TMP_70(bool) = _price >= strikePrice
REF_13(TokenAuction.SecretBid) -> secretBids[_addr]
REF_14(bool) -> REF_13.disqualified
TMP_71 = UnaryType.BANG REF_14 
TMP_72(bool) = TMP_70 && TMP_71
CONDITION TMP_72"];
6->33[label="True"];
6->22[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_maxPurchase = token.balanceOf(this) - developerReserve

IRs:
TMP_73(uint256) = HIGH_LEVEL_CALL, dest:token(iBurnableToken), function:balanceOf, arguments:['this']  
TMP_74(uint256) = TMP_73 - developerReserve
_maxPurchase(uint256) := TMP_74(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
_purchaseCount > _maxPurchase

IRs:
TMP_75(bool) = _purchaseCount > _maxPurchase
CONDITION TMP_75"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_purchaseCount = _maxPurchase

IRs:
_purchaseCount(uint256) := _maxPurchase(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_cost = safeMul(_purchaseCount,strikePrice)

IRs:
TMP_76(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(_purchaseCount,strikePrice)
_cost(uint256) := TMP_76(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
secretBids[_addr].deposit >= _cost

IRs:
REF_16(TokenAuction.SecretBid) -> secretBids[_addr]
REF_17(uint256) -> REF_16.deposit
TMP_77(bool) = REF_17 >= _cost
CONDITION TMP_77"];
13->14[label="True"];
13->21[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
secretBids[_addr].deposit -= _cost

IRs:
REF_18(TokenAuction.SecretBid) -> secretBids[_addr]
REF_19(uint256) -> REF_18.deposit
REF_19(-> secretBids) = REF_19 - _cost"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
proceeds = safeAdd(proceeds,_cost)

IRs:
TMP_78(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(proceeds,_cost)
proceeds(uint256) := TMP_78(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
secretBids[_addr].tokens += _purchaseCount

IRs:
REF_20(TokenAuction.SecretBid) -> secretBids[_addr]
REF_21(uint256) -> REF_20.tokens
REF_21(-> secretBids) = REF_21 + _purchaseCount"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
purchasedCount += _purchaseCount

IRs:
purchasedCount(uint256) = purchasedCount + _purchaseCount"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
! token.transfer(_addr,_purchaseCount)

IRs:
TMP_79(bool) = HIGH_LEVEL_CALL, dest:token(iBurnableToken), function:transfer, arguments:['_addr', '_purchaseCount']  
TMP_80 = UnaryType.BANG TMP_79 
CONDITION TMP_80"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
revert()()

IRs:
TMP_81(None) = SOLIDITY_CALL revert()()"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
secretBids[_addr].deposit > 0

IRs:
REF_23(TokenAuction.SecretBid) -> secretBids[_addr]
REF_24(uint256) -> REF_23.deposit
TMP_82(bool) = REF_24 > 0
CONDITION TMP_82"];
23->24[label="True"];
23->27[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_refund = secretBids[_addr].deposit

IRs:
REF_25(TokenAuction.SecretBid) -> secretBids[_addr]
REF_26(uint256) -> REF_25.deposit
_refund(uint256) := REF_26(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
secretBids[_addr].refund += _refund

IRs:
REF_27(TokenAuction.SecretBid) -> secretBids[_addr]
REF_28(uint256) -> REF_27.refund
REF_28(-> secretBids) = REF_28 + _refund"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
secretBids[_addr].deposit = 0

IRs:
REF_29(TokenAuction.SecretBid) -> secretBids[_addr]
REF_30(uint256) -> REF_29.deposit
REF_30(uint256) (->secretBids) := 0(uint256)"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
executedCount += 1

IRs:
executedCount(uint256) = executedCount + 1"];
28->29;
29[label="Node Type: NEW VARIABLE 29

EXPRESSION:
_batch = executedCount / batchSize

IRs:
TMP_83(uint256) = executedCount / batchSize
_batch(uint256) := TMP_83(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
ExecuteEvent(_batch,_addr,_cost,_refund)

IRs:
Emit ExecuteEvent(_batch,_addr,_cost,_refund)"];
30->31;
31[label="Node Type: END_IF 31
"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
duringSale()

IRs:
MODIFIER_CALL, TokenAuction.duringSale()()"];
32->1;
33[label="Node Type: IF 33

EXPRESSION:
(_price > strikePrice)

IRs:
TMP_86(bool) = _price > strikePrice
CONDITION TMP_86"];
33->34[label="True"];
33->35[label="False"];
34[label="Node Type: EXPRESSION 34

EXPRESSION:
_purchaseCount = _quantity

IRs:
_purchaseCount(uint256) := _quantity(uint256)"];
34->36;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_purchaseCount = (safeMul(strikePricePctX10,_quantity) / 1000)

IRs:
TMP_87(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(strikePricePctX10,_quantity)
TMP_88(uint256) = TMP_87 / 1000
_purchaseCount(uint256) := TMP_88(uint256)"];
35->36;
36[label="Node Type: END_IF 36
"];
36->8;
}
// Function: 37057.sol-TokenAuction-expireBid(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: IF 1

EXPRESSION:
secretBids[_addr].deposit > 0

IRs:
REF_31(TokenAuction.SecretBid) -> secretBids[_addr]
REF_32(uint256) -> REF_31.deposit
TMP_89(bool) = REF_32 > 0
CONDITION TMP_89"];
1->2[label="True"];
1->10[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_forfeit = secretBids[_addr].deposit / 2

IRs:
REF_33(TokenAuction.SecretBid) -> secretBids[_addr]
REF_34(uint256) -> REF_33.deposit
TMP_90(uint256) = REF_34 / 2
_forfeit(uint256) := TMP_90(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
proceeds = safeAdd(proceeds,_forfeit)

IRs:
TMP_91(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(proceeds,_forfeit)
proceeds(uint256) := TMP_91(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_refund = safeSub(secretBids[_addr].deposit,_forfeit)

IRs:
REF_35(TokenAuction.SecretBid) -> secretBids[_addr]
REF_36(uint256) -> REF_35.deposit
TMP_92(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_36,_forfeit)
_refund(uint256) := TMP_92(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
secretBids[msg.sender].refund += _refund

IRs:
REF_37(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_38(uint256) -> REF_37.refund
REF_38(-> secretBids) = REF_38 + _refund"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
secretBids[_addr].deposit = 0

IRs:
REF_39(TokenAuction.SecretBid) -> secretBids[_addr]
REF_40(uint256) -> REF_39.deposit
REF_40(uint256) (->secretBids) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
expiredCount += 1

IRs:
expiredCount(uint256) = expiredCount + 1"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_batch = expiredCount / batchSize

IRs:
TMP_93(uint256) = expiredCount / batchSize
_batch(uint256) := TMP_93(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ExpireEvent(_batch,_addr,_forfeit,_refund)

IRs:
Emit ExpireEvent(_batch,_addr,_forfeit,_refund)"];
9->10;
10[label="Node Type: END_IF 10
"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
afterSale()

IRs:
MODIFIER_CALL, TokenAuction.afterSale()()"];
12->1;
}
// Function: 37057.sol-TokenAuction-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
proceeds = safeAdd(proceeds,msg.value)

IRs:
TMP_48(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(proceeds,msg.value)
proceeds(uint256) := TMP_48(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
BizarreEvent(msg.sender,bizarre payment,msg.value)

IRs:
Emit BizarreEvent(msg.sender,bizarre payment,msg.value)"];
}
// Function: 37057.sol-TokenAuction-haraKiri()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
selfdestruct(address)(owner)

IRs:
TMP_117(None) = SOLIDITY_CALL selfdestruct(address)(owner)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
unlockedOnly()

IRs:
MODIFIER_CALL, TokenAuction.unlockedOnly()()"];
3->1;
}
// Function: 37057.sol-TokenAuction-houseKeep()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_oldMask = stateMask

IRs:
_oldMask(uint256) := stateMask(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now >= auctionStart

IRs:
TMP_36(bool) = now >= auctionStart
CONDITION TMP_36"];
2->3[label="True"];
2->13[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
stateMask |= AUCTION_START_EVENT

IRs:
stateMask(uint256) = stateMask | AUCTION_START_EVENT"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
now >= auctionEnd

IRs:
TMP_37(bool) = now >= auctionEnd
CONDITION TMP_37"];
4->5[label="True"];
4->12[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
stateMask |= AUCTION_END_EVENT

IRs:
stateMask(uint256) = stateMask | AUCTION_END_EVENT"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
strikePrice > 0

IRs:
TMP_38(bool) = strikePrice > 0
CONDITION TMP_38"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
stateMask |= SALE_START_EVENT

IRs:
stateMask(uint256) = stateMask | SALE_START_EVENT"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
now >= saleEnd

IRs:
TMP_39(bool) = now >= saleEnd
CONDITION TMP_39"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
stateMask |= SALE_END_EVENT

IRs:
stateMask(uint256) = stateMask | SALE_END_EVENT"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
stateMask != _oldMask

IRs:
TMP_40(bool) = stateMask != _oldMask
CONDITION TMP_40"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
StateChangeEvent(stateMask)

IRs:
Emit StateChangeEvent(stateMask)"];
15->16;
16[label="Node Type: END_IF 16
"];
}
// Function: 37057.sol-TokenAuction-lock()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isLocked = true

IRs:
isLocked(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
2->1;
}
// Function: 37057.sol-TokenAuction-ownerOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_120(bool) = msg.sender == owner
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37057.sol-TokenAuction-payUnderwriter()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner || msg.sender == underwriter)

IRs:
TMP_108(bool) = msg.sender == owner
TMP_109(bool) = msg.sender == underwriter
TMP_110(bool) = TMP_108 || TMP_109
TMP_111(None) = SOLIDITY_CALL require(bool)(TMP_110)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_amount = proceeds

IRs:
_amount(uint256) := proceeds(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
proceeds = 0

IRs:
proceeds(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! underwriter.call.gas(contractSendGas).value(_amount)()

IRs:
TMP_114(bool) = LOW_LEVEL_CALL, dest:underwriter, function:call, arguments:[] value:_amount gas:contractSendGas
TMP_115 = UnaryType.BANG TMP_114 
CONDITION TMP_115"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_116(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
}
// Function: 37057.sol-TokenAuction-reserveDeveloperTokens(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
developers = _developers

IRs:
developers(address) := _developers(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
developerPctX10 = _developerPctX10

IRs:
developerPctX10(uint256) := _developerPctX10(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_tokenCount = token.balanceOf(this)

IRs:
TMP_30(uint256) = HIGH_LEVEL_CALL, dest:token(iBurnableToken), function:balanceOf, arguments:['this']  
_tokenCount(uint256) := TMP_30(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
developerReserve = (safeMul(_tokenCount,developerPctX10) / 1000)

IRs:
TMP_31(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(_tokenCount,developerPctX10)
TMP_32(uint256) = TMP_31 / 1000
developerReserve(uint256) := TMP_32(uint256)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
unlockedOnly()

IRs:
MODIFIER_CALL, TokenAuction.unlockedOnly()()"];
6->1;
}
// Function: 37057.sol-TokenAuction-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x + _y

IRs:
TMP_12(uint256) = _x + _y
z(uint256) := TMP_12(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(z >= _x)

IRs:
TMP_13(bool) = z >= _x
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37057.sol-TokenAuction-safeMul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = _x * _y

IRs:
TMP_18(uint256) = _x * _y
z(uint256) := TMP_18(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_x == 0 || z / _x == _y)

IRs:
TMP_19(bool) = _x == 0
TMP_20(uint256) = z / _x
TMP_21(bool) = TMP_20 == _y
TMP_22(bool) = TMP_19 || TMP_21
TMP_23(None) = SOLIDITY_CALL assert(bool)(TMP_22)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37057.sol-TokenAuction-safeSub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_x >= _y)

IRs:
TMP_15(bool) = _x >= _y
TMP_16(None) = SOLIDITY_CALL assert(bool)(TMP_15)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_x - _y

IRs:
TMP_17(uint256) = _x - _y
RETURN TMP_17"];
}
// Function: 37057.sol-TokenAuction-setAuctionParms(iBurnableToken,address,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = _token

IRs:
token(iBurnableToken) := _token(iBurnableToken)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
underwriter = _underwriter

IRs:
underwriter(address) := _underwriter(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auctionStart = _auctionStart

IRs:
auctionStart(uint256) := _auctionStart(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auctionEnd = safeAdd(_auctionStart,_auctionDuration)

IRs:
TMP_25(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(_auctionStart,_auctionDuration)
auctionEnd(uint256) := TMP_25(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
saleDuration = _saleDuration

IRs:
saleDuration(uint256) := _saleDuration(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
stateMask != 0

IRs:
TMP_26(bool) = stateMask != 0
CONDITION TMP_26"];
6->7[label="True"];
6->11[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
stateMask = 0

IRs:
stateMask(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
strikePrice = 0

IRs:
strikePrice(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
purchasedCount = 0

IRs:
purchasedCount(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
houseKeep()

IRs:
INTERNAL_CALL, TokenAuction.houseKeep()()"];
10->11;
11[label="Node Type: END_IF 11
"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
unlockedOnly()

IRs:
MODIFIER_CALL, TokenAuction.unlockedOnly()()"];
13->1;
}
// Function: 37057.sol-TokenAuction-setStrikePrice(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(executedCount == 0)

IRs:
TMP_42(bool) = executedCount == 0
TMP_43(None) = SOLIDITY_CALL require(bool)(TMP_42)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
strikePrice = _strikePrice

IRs:
strikePrice(uint256) := _strikePrice(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
strikePricePctX10 = _strikePricePctX10

IRs:
strikePricePctX10(uint256) := _strikePricePctX10(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
saleEnd = safeAdd(now,saleDuration)

IRs:
TMP_44(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(now,saleDuration)
saleEnd(uint256) := TMP_44(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
houseKeep()

IRs:
INTERNAL_CALL, TokenAuction.houseKeep()()"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
afterAuction()

IRs:
MODIFIER_CALL, TokenAuction.afterAuction()()"];
7->1;
}
// Function: 37057.sol-TokenAuction-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
AUCTION_START_EVENT = 0x01

IRs:
AUCTION_START_EVENT(uint256) := 1(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
AUCTION_END_EVENT = 0x02

IRs:
AUCTION_END_EVENT(uint256) := 2(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
SALE_START_EVENT = 0x04

IRs:
SALE_START_EVENT(uint256) := 4(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
SALE_END_EVENT = 0x08

IRs:
SALE_END_EVENT(uint256) := 8(uint256)"];
}
// Function: 37057.sol-TokenAuction-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
batchSize = 4

IRs:
batchSize(uint256) := 4(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
contractSendGas = 100000

IRs:
contractSendGas(uint256) := 100000(uint256)"];
}
// Function: 37057.sol-TokenAuction-tune(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
batchSize = _batchSize

IRs:
batchSize(uint256) := _batchSize(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
contractSendGas = _contractSendGas

IRs:
contractSendGas(uint256) := _contractSendGas(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ownerOnly()

IRs:
MODIFIER_CALL, TokenAuction.ownerOnly()()"];
3->1;
}
// Function: 37057.sol-TokenAuction-unlockedOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isLocked)

IRs:
TMP_122 = UnaryType.BANG isLocked 
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37057.sol-TokenAuction-withdrawRefund()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_amount = secretBids[msg.sender].refund

IRs:
REF_41(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_42(uint256) -> REF_41.refund
_amount(uint256) := REF_42(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
secretBids[msg.sender].refund = 0

IRs:
REF_43(TokenAuction.SecretBid) -> secretBids[msg.sender]
REF_44(uint256) -> REF_43.refund
REF_44(uint256) (->secretBids) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.transfer(_amount)

IRs:
Transfer dest:msg.sender value:_amount"];
}
// Function: 37057.sol-iBurnableToken-allowance(address,address)
digraph{
}
// Function: 37057.sol-iBurnableToken-approve(address,uint256)
digraph{
}
// Function: 37057.sol-iBurnableToken-balanceOf(address)
digraph{
}
// Function: 37057.sol-iBurnableToken-burnTokens(uint256)
digraph{
}
// Function: 37057.sol-iBurnableToken-totalSupply()
digraph{
}
// Function: 37057.sol-iBurnableToken-transfer(address,uint256)
digraph{
}
// Function: 37057.sol-iBurnableToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 37057.sol-iBurnableToken-unPaidBurnTokens(uint256)
digraph{
}
// Function: 37057.sol-iERC20Token-allowance(address,address)
digraph{
}
// Function: 37057.sol-iERC20Token-approve(address,uint256)
digraph{
}
// Function: 37057.sol-iERC20Token-balanceOf(address)
digraph{
}
// Function: 37057.sol-iERC20Token-totalSupply()
digraph{
}
// Function: 37057.sol-iERC20Token-transfer(address,uint256)
digraph{
}
// Function: 37057.sol-iERC20Token-transferFrom(address,address,uint256)
digraph{
}
}
