digraph G {
// Function: 37088.sol-DSAuth-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 37088.sol-DSAuth-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_19 = UnaryType.BANG x 
CONDITION TMP_19"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 37088.sol-DSAuth-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_20(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_20)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37088.sol-DSAuth-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_13 = CONVERT this to address
TMP_14(bool) = src == TMP_13
CONDITION TMP_14"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_15(bool) = src == owner
CONDITION TMP_15"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_16 = CONVERT 0 to DSAuthority
TMP_17(bool) = authority == TMP_16
CONDITION TMP_17"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_18(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_18"];
}
// Function: 37088.sol-DSAuth-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37088.sol-DSAuth-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37088.sol-DSAuthority-canCall(address,address,bytes4)
digraph{
}
// Function: 37088.sol-DSExec-exec(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
exec(t,c,0)

IRs:
INTERNAL_CALL, DSExec.exec(address,bytes,uint256)(t,c,0)"];
}
// Function: 37088.sol-DSExec-exec(address,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! tryExec(target,calldata,value)

IRs:
TMP_2(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(target,calldata,value)
TMP_3 = UnaryType.BANG TMP_2 
CONDITION TMP_3"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 37088.sol-DSExec-exec(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
exec(t,c,v)

IRs:
INTERNAL_CALL, DSExec.exec(address,bytes,uint256)(t,c,v)"];
}
// Function: 37088.sol-DSExec-tryExec(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tryExec(t,c,0)

IRs:
TMP_6(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(t,c,0)
RETURN TMP_6"];
}
// Function: 37088.sol-DSExec-tryExec(address,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
target.call.value(value)(calldata)

IRs:
TMP_1(bool) = LOW_LEVEL_CALL, dest:target, function:call, arguments:['calldata'] value:value 
RETURN TMP_1"];
2[label="Node Type: RETURN 2

EXPRESSION:
call_ret

IRs:
RETURN call_ret"];
}
// Function: 37088.sol-DSExec-tryExec(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tryExec(t,c,v)

IRs:
TMP_7(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(t,c,v)
RETURN TMP_7"];
}
// Function: 37088.sol-DSMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_23(uint256) = x + y
z(uint256) := TMP_23(uint256)
TMP_24(bool) = z >= x
TMP_25(None) = SOLIDITY_CALL assert(bool)(TMP_24)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = uint128(x)) == x)

IRs:
TMP_94 = CONVERT x to uint128
z(uint128) := TMP_94(uint128)
TMP_95(bool) = z == x
TMP_96(None) = SOLIDITY_CALL assert(bool)(TMP_95)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_35(uint256) = x / y
z(uint256) := TMP_35(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_38(uint128) = x + y
z(uint128) := TMP_38(uint128)
TMP_39(bool) = z >= x
TMP_40(None) = SOLIDITY_CALL assert(bool)(TMP_39)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_50(uint128) = x / y
z(uint128) := TMP_50(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_52(bool) = x >= y
CONDITION TMP_52"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_51(bool) = x <= y
CONDITION TMP_51"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_44(uint128) = x * y
z(uint128) := TMP_44(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_45(bool) = x == 0
TMP_46(uint128) = z / x
TMP_47(bool) = TMP_46 == y
TMP_48(bool) = TMP_45 || TMP_47
TMP_49(None) = SOLIDITY_CALL assert(bool)(TMP_48)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_41(uint128) = x - y
z(uint128) := TMP_41(uint128)
TMP_42(bool) = z <= x
TMP_43(None) = SOLIDITY_CALL assert(bool)(TMP_42)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_54(bool) = x >= y
CONDITION TMP_54"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_53(bool) = x <= y
CONDITION TMP_53"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_37(bool) = x >= y
CONDITION TMP_37"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_36(bool) = x <= y
CONDITION TMP_36"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_29(uint256) = x * y
z(uint256) := TMP_29(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_30(bool) = x == 0
TMP_31(uint256) = z / x
TMP_32(bool) = TMP_31 == y
TMP_33(bool) = TMP_30 || TMP_32
TMP_34(None) = SOLIDITY_CALL assert(bool)(TMP_33)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_71(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_71"];
}
// Function: 37088.sol-DSMath-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_79 = CONVERT x to uint256
TMP_80(uint256) = TMP_79 * RAY
TMP_81(uint128) = y / 2
TMP_82(uint256) = TMP_80 + TMP_81
TMP_83(uint256) = TMP_82 / y
TMP_84(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_83)
z(uint128) := TMP_84(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_93(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_93"];
}
// Function: 37088.sol-DSMath-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_92(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_92"];
}
// Function: 37088.sol-DSMath-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_73 = CONVERT x to uint256
TMP_74(uint256) = TMP_73 * y
TMP_75(uint128) = RAY / 2
TMP_76(uint256) = TMP_74 + TMP_75
TMP_77(uint256) = TMP_76 / RAY
TMP_78(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_77)
z(uint128) := TMP_78(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_85(bool) = n != 0
CONDITION TMP_85"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_86(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_86(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_87(uint64) = n % 2
TMP_88(bool) = TMP_87 != 0
CONDITION TMP_88"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_89(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_89(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_90(uint64) = n % 2
TMP_91(bool) = TMP_90 != 0
CONDITION TMP_91"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_72(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_72"];
}
// Function: 37088.sol-DSMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_97(uint256) = 10 ** 18
WAD(uint128) := TMP_97(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_98(uint256) = 10 ** 27
RAY(uint128) := TMP_98(uint256)"];
}
// Function: 37088.sol-DSMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_26(uint256) = x - y
z(uint256) := TMP_26(uint256)
TMP_27(bool) = z <= x
TMP_28(None) = SOLIDITY_CALL assert(bool)(TMP_27)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_55(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_55"];
}
// Function: 37088.sol-DSMath-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_63 = CONVERT x to uint256
TMP_64(uint256) = TMP_63 * WAD
TMP_65(uint128) = y / 2
TMP_66(uint256) = TMP_64 + TMP_65
TMP_67(uint256) = TMP_66 / y
TMP_68(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_67)
z(uint128) := TMP_68(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_70(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_70"];
}
// Function: 37088.sol-DSMath-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_69(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_69"];
}
// Function: 37088.sol-DSMath-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_57 = CONVERT x to uint256
TMP_58(uint256) = TMP_57 * y
TMP_59(uint128) = WAD / 2
TMP_60(uint256) = TMP_58 + TMP_59
TMP_61(uint256) = TMP_60 / WAD
TMP_62(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_61)
z(uint128) := TMP_62(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSMath-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_56(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_56"];
}
// Function: 37088.sol-DSNote-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 37088.sol-DSStop-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 37088.sol-DSStop-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_200 = UnaryType.BANG x 
CONDITION TMP_200"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 37088.sol-DSStop-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_206(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_206)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37088.sol-DSStop-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_194 = CONVERT this to address
TMP_195(bool) = src == TMP_194
CONDITION TMP_195"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_196(bool) = src == owner
CONDITION TMP_196"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_197 = CONVERT 0 to DSAuthority
TMP_198(bool) = authority == TMP_197
CONDITION TMP_198"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_199(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_199"];
}
// Function: 37088.sol-DSStop-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 37088.sol-DSStop-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37088.sol-DSStop-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37088.sol-DSStop-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 37088.sol-DSStop-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 37088.sol-DSStop-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(! stopped)

IRs:
TMP_208 = UnaryType.BANG stopped 
INTERNAL_CALL, DSAuth.assert(bool)(TMP_208)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37088.sol-DSToken-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 37088.sol-DSToken-DSToken(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = symbol_

IRs:
symbol(bytes32) := symbol_(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
generator = msg.sender

IRs:
generator(address) := msg.sender(address)"];
}
// Function: 37088.sol-DSToken-DSTokenBase(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = supply

IRs:
REF_27(uint256) -> _balances[msg.sender]
REF_27(uint256) (->_balances) := supply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = supply

IRs:
_supply(uint256) := supply(uint256)"];
}
// Function: 37088.sol-DSToken-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_240(uint256) = x + y
z(uint256) := TMP_240(uint256)
TMP_241(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_241)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-allowance(address,address)
digraph{
}
// Function: 37088.sol-DSToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.approve(guy,wad)

IRs:
TMP_320(bool) = INTERNAL_CALL, DSTokenBase.approve(address,uint256)(guy,wad)
RETURN TMP_320"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 37088.sol-DSToken-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_225 = UnaryType.BANG x 
CONDITION TMP_225"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 37088.sol-DSToken-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_344(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_344)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37088.sol-DSToken-balanceOf(address)
digraph{
}
// Function: 37088.sol-DSToken-burn(uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = sub(_balances[msg.sender],wad)

IRs:
REF_51(uint256) -> _balances[msg.sender]
REF_52(uint256) -> _balances[msg.sender]
TMP_330(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_52,wad)
REF_51(uint256) (->_balances) := TMP_330(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = sub(_supply,wad)

IRs:
TMP_331(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(_supply,wad)
_supply(uint256) := TMP_331(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
5->1;
}
// Function: 37088.sol-DSToken-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = uint128(x)) == x)

IRs:
TMP_311 = CONVERT x to uint128
z(uint128) := TMP_311(uint128)
TMP_312(bool) = z == x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_312)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_252(uint256) = x / y
z(uint256) := TMP_252(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-generatorTransfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(dst,wad)

IRs:
TMP_335(bool) = INTERNAL_CALL, DSTokenBase.transfer(address,uint256)(dst,wad)
RETURN TMP_335"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyGenerator()

IRs:
MODIFIER_CALL, DSToken.onlyGenerator()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 37088.sol-DSToken-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_255(uint128) = x + y
z(uint128) := TMP_255(uint128)
TMP_256(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_267(uint128) = x / y
z(uint128) := TMP_267(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_269(bool) = x >= y
CONDITION TMP_269"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_268(bool) = x <= y
CONDITION TMP_268"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_261(uint128) = x * y
z(uint128) := TMP_261(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_262(bool) = x == 0
TMP_263(uint128) = z / x
TMP_264(bool) = TMP_263 == y
TMP_265(bool) = TMP_262 || TMP_264
INTERNAL_CALL, DSAuth.assert(bool)(TMP_265)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_258(uint128) = x - y
z(uint128) := TMP_258(uint128)
TMP_259(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_259)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_271(bool) = x >= y
CONDITION TMP_271"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_270(bool) = x <= y
CONDITION TMP_270"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_219 = CONVERT this to address
TMP_220(bool) = src == TMP_219
CONDITION TMP_220"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_221(bool) = src == owner
CONDITION TMP_221"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_222 = CONVERT 0 to DSAuthority
TMP_223(bool) = authority == TMP_222
CONDITION TMP_223"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_224(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_224"];
}
// Function: 37088.sol-DSToken-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_254(bool) = x >= y
CONDITION TMP_254"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_253(bool) = x <= y
CONDITION TMP_253"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-mint(uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = add(_balances[msg.sender],wad)

IRs:
REF_49(uint256) -> _balances[msg.sender]
REF_50(uint256) -> _balances[msg.sender]
TMP_325(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_50,wad)
REF_49(uint256) (->_balances) := TMP_325(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = add(_supply,wad)

IRs:
TMP_326(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(_supply,wad)
_supply(uint256) := TMP_326(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
5->1;
}
// Function: 37088.sol-DSToken-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_246(uint256) = x * y
z(uint256) := TMP_246(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_247(bool) = x == 0
TMP_248(uint256) = z / x
TMP_249(bool) = TMP_248 == y
TMP_250(bool) = TMP_247 || TMP_249
INTERNAL_CALL, DSAuth.assert(bool)(TMP_250)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 37088.sol-DSToken-onlyGenerator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != generator

IRs:
TMP_346(bool) = msg.sender != generator
CONDITION TMP_346"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 37088.sol-DSToken-pull(address,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transferFrom(src,msg.sender,wad)

IRs:
TMP_324(bool) = INTERNAL_CALL, DSToken.transferFrom(address,address,uint256)(src,msg.sender,wad)
RETURN TMP_324"];
}
// Function: 37088.sol-DSToken-push(address,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
transfer(dst,wad)

IRs:
TMP_323(bool) = INTERNAL_CALL, DSToken.transfer(address,uint256)(dst,wad)
RETURN TMP_323"];
}
// Function: 37088.sol-DSToken-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_288(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_288"];
}
// Function: 37088.sol-DSToken-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_296 = CONVERT x to uint256
TMP_297(uint256) = TMP_296 * RAY
TMP_298(uint128) = y / 2
TMP_299(uint256) = TMP_297 + TMP_298
TMP_300(uint256) = TMP_299 / y
TMP_301(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_300)
z(uint128) := TMP_301(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_310(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_310"];
}
// Function: 37088.sol-DSToken-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_309(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_309"];
}
// Function: 37088.sol-DSToken-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_290 = CONVERT x to uint256
TMP_291(uint256) = TMP_290 * y
TMP_292(uint128) = RAY / 2
TMP_293(uint256) = TMP_291 + TMP_292
TMP_294(uint256) = TMP_293 / RAY
TMP_295(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_294)
z(uint128) := TMP_295(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_302(bool) = n != 0
CONDITION TMP_302"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_303(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_303(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_304(uint64) = n % 2
TMP_305(bool) = TMP_304 != 0
CONDITION TMP_305"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_306(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_306(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_307(uint64) = n % 2
TMP_308(bool) = TMP_307 != 0
CONDITION TMP_308"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_289(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_289"];
}
// Function: 37088.sol-DSToken-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37088.sol-DSToken-setName(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = name_

IRs:
name(bytes32) := name_(bytes32)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->1;
}
// Function: 37088.sol-DSToken-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37088.sol-DSToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_339(uint256) = 10 ** 18
WAD(uint128) := TMP_339(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_340(uint256) = 10 ** 27
RAY(uint128) := TMP_340(uint256)"];
}
// Function: 37088.sol-DSToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
decimals = 18

IRs:
decimals(uint256) := 18(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = 

IRs:
name(bytes32) := (string)"];
}
// Function: 37088.sol-DSToken-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 37088.sol-DSToken-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 37088.sol-DSToken-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(! stopped)

IRs:
TMP_341 = UnaryType.BANG stopped 
INTERNAL_CALL, DSAuth.assert(bool)(TMP_341)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37088.sol-DSToken-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_243(uint256) = x - y
z(uint256) := TMP_243(uint256)
TMP_244(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_244)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-totalSupply()
digraph{
}
// Function: 37088.sol-DSToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transfer(dst,wad)

IRs:
TMP_314(bool) = INTERNAL_CALL, DSTokenBase.transfer(address,uint256)(dst,wad)
RETURN TMP_314"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 37088.sol-DSToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
super.transferFrom(src,dst,wad)

IRs:
TMP_317(bool) = INTERNAL_CALL, DSTokenBase.transferFrom(address,address,uint256)(src,dst,wad)
RETURN TMP_317"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 37088.sol-DSToken-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_272(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_272"];
}
// Function: 37088.sol-DSToken-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_280 = CONVERT x to uint256
TMP_281(uint256) = TMP_280 * WAD
TMP_282(uint128) = y / 2
TMP_283(uint256) = TMP_281 + TMP_282
TMP_284(uint256) = TMP_283 / y
TMP_285(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_284)
z(uint128) := TMP_285(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_287(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_287"];
}
// Function: 37088.sol-DSToken-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_286(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_286"];
}
// Function: 37088.sol-DSToken-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_274 = CONVERT x to uint256
TMP_275(uint256) = TMP_274 * y
TMP_276(uint128) = WAD / 2
TMP_277(uint256) = TMP_275 + TMP_276
TMP_278(uint256) = TMP_277 / WAD
TMP_279(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_278)
z(uint128) := TMP_279(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSToken-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_273(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_273"];
}
// Function: 37088.sol-DSTokenBase-DSTokenBase(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[msg.sender] = supply

IRs:
REF_3(uint256) -> _balances[msg.sender]
REF_3(uint256) (->_balances) := supply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_supply = supply

IRs:
_supply(uint256) := supply(uint256)"];
}
// Function: 37088.sol-DSTokenBase-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_99(uint256) = x + y
z(uint256) := TMP_99(uint256)
TMP_100(bool) = z >= x
TMP_101(None) = SOLIDITY_CALL assert(bool)(TMP_100)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_approvals[src][guy]

IRs:
REF_5(mapping(address => uint256)) -> _approvals[src]
REF_6(uint256) -> REF_5[guy]
RETURN REF_6"];
}
// Function: 37088.sol-DSTokenBase-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_approvals[msg.sender][guy] = wad

IRs:
REF_23(mapping(address => uint256)) -> _approvals[msg.sender]
REF_24(uint256) -> REF_23[guy]
REF_24(uint256) (->_approvals) := wad(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,guy,wad)

IRs:
Emit Approval(msg.sender,guy,wad)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 37088.sol-DSTokenBase-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_balances[src]

IRs:
REF_4(uint256) -> _balances[src]
RETURN REF_4"];
}
// Function: 37088.sol-DSTokenBase-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = uint128(x)) == x)

IRs:
TMP_170 = CONVERT x to uint128
z(uint128) := TMP_170(uint128)
TMP_171(bool) = z == x
TMP_172(None) = SOLIDITY_CALL assert(bool)(TMP_171)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_111(uint256) = x / y
z(uint256) := TMP_111(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_114(uint128) = x + y
z(uint128) := TMP_114(uint128)
TMP_115(bool) = z >= x
TMP_116(None) = SOLIDITY_CALL assert(bool)(TMP_115)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_126(uint128) = x / y
z(uint128) := TMP_126(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_128(bool) = x >= y
CONDITION TMP_128"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_127(bool) = x <= y
CONDITION TMP_127"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_120(uint128) = x * y
z(uint128) := TMP_120(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_121(bool) = x == 0
TMP_122(uint128) = z / x
TMP_123(bool) = TMP_122 == y
TMP_124(bool) = TMP_121 || TMP_123
TMP_125(None) = SOLIDITY_CALL assert(bool)(TMP_124)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_117(uint128) = x - y
z(uint128) := TMP_117(uint128)
TMP_118(bool) = z <= x
TMP_119(None) = SOLIDITY_CALL assert(bool)(TMP_118)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_130(bool) = x >= y
CONDITION TMP_130"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_129(bool) = x <= y
CONDITION TMP_129"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_113(bool) = x >= y
CONDITION TMP_113"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_112(bool) = x <= y
CONDITION TMP_112"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_105(uint256) = x * y
z(uint256) := TMP_105(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_106(bool) = x == 0
TMP_107(uint256) = z / x
TMP_108(bool) = TMP_107 == y
TMP_109(bool) = TMP_106 || TMP_108
TMP_110(None) = SOLIDITY_CALL assert(bool)(TMP_109)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_147(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_147"];
}
// Function: 37088.sol-DSTokenBase-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_155 = CONVERT x to uint256
TMP_156(uint256) = TMP_155 * RAY
TMP_157(uint128) = y / 2
TMP_158(uint256) = TMP_156 + TMP_157
TMP_159(uint256) = TMP_158 / y
TMP_160(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_159)
z(uint128) := TMP_160(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_169(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_169"];
}
// Function: 37088.sol-DSTokenBase-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_168(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_168"];
}
// Function: 37088.sol-DSTokenBase-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_149 = CONVERT x to uint256
TMP_150(uint256) = TMP_149 * y
TMP_151(uint128) = RAY / 2
TMP_152(uint256) = TMP_150 + TMP_151
TMP_153(uint256) = TMP_152 / RAY
TMP_154(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_153)
z(uint128) := TMP_154(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_161(bool) = n != 0
CONDITION TMP_161"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_162(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_162(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_163(uint64) = n % 2
TMP_164(bool) = TMP_163 != 0
CONDITION TMP_164"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_165(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_165(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_166(uint64) = n % 2
TMP_167(bool) = TMP_166 != 0
CONDITION TMP_167"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_148(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_148"];
}
// Function: 37088.sol-DSTokenBase-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_187(uint256) = 10 ** 18
WAD(uint128) := TMP_187(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_188(uint256) = 10 ** 27
RAY(uint128) := TMP_188(uint256)"];
}
// Function: 37088.sol-DSTokenBase-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_102(uint256) = x - y
z(uint256) := TMP_102(uint256)
TMP_103(bool) = z <= x
TMP_104(None) = SOLIDITY_CALL assert(bool)(TMP_103)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_supply

IRs:
RETURN _supply"];
}
// Function: 37088.sol-DSTokenBase-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_balances[msg.sender] >= wad)

IRs:
REF_7(uint256) -> _balances[msg.sender]
TMP_173(bool) = REF_7 >= wad
TMP_174(None) = SOLIDITY_CALL assert(bool)(TMP_173)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_balances[msg.sender] = sub(_balances[msg.sender],wad)

IRs:
REF_8(uint256) -> _balances[msg.sender]
REF_9(uint256) -> _balances[msg.sender]
TMP_175(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_9,wad)
REF_8(uint256) (->_balances) := TMP_175(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[dst] = add(_balances[dst],wad)

IRs:
REF_10(uint256) -> _balances[dst]
REF_11(uint256) -> _balances[dst]
TMP_176(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_11,wad)
REF_10(uint256) (->_balances) := TMP_176(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,dst,wad)

IRs:
Emit Transfer(msg.sender,dst,wad)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 37088.sol-DSTokenBase-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_balances[src] >= wad)

IRs:
REF_12(uint256) -> _balances[src]
TMP_178(bool) = REF_12 >= wad
TMP_179(None) = SOLIDITY_CALL assert(bool)(TMP_178)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(_approvals[src][msg.sender] >= wad)

IRs:
REF_13(mapping(address => uint256)) -> _approvals[src]
REF_14(uint256) -> REF_13[msg.sender]
TMP_180(bool) = REF_14 >= wad
TMP_181(None) = SOLIDITY_CALL assert(bool)(TMP_180)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_approvals[src][msg.sender] = sub(_approvals[src][msg.sender],wad)

IRs:
REF_15(mapping(address => uint256)) -> _approvals[src]
REF_16(uint256) -> REF_15[msg.sender]
REF_17(mapping(address => uint256)) -> _approvals[src]
REF_18(uint256) -> REF_17[msg.sender]
TMP_182(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_18,wad)
REF_16(uint256) (->_approvals) := TMP_182(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[src] = sub(_balances[src],wad)

IRs:
REF_19(uint256) -> _balances[src]
REF_20(uint256) -> _balances[src]
TMP_183(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_20,wad)
REF_19(uint256) (->_balances) := TMP_183(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_balances[dst] = add(_balances[dst],wad)

IRs:
REF_21(uint256) -> _balances[dst]
REF_22(uint256) -> _balances[dst]
TMP_184(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_22,wad)
REF_21(uint256) (->_balances) := TMP_184(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(src,dst,wad)

IRs:
Emit Transfer(src,dst,wad)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 37088.sol-DSTokenBase-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_131(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_131"];
}
// Function: 37088.sol-DSTokenBase-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_139 = CONVERT x to uint256
TMP_140(uint256) = TMP_139 * WAD
TMP_141(uint128) = y / 2
TMP_142(uint256) = TMP_140 + TMP_141
TMP_143(uint256) = TMP_142 / y
TMP_144(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_143)
z(uint128) := TMP_144(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_146(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_146"];
}
// Function: 37088.sol-DSTokenBase-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_145(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_145"];
}
// Function: 37088.sol-DSTokenBase-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_133 = CONVERT x to uint256
TMP_134(uint256) = TMP_133 * y
TMP_135(uint128) = WAD / 2
TMP_136(uint256) = TMP_134 + TMP_135
TMP_137(uint256) = TMP_136 / WAD
TMP_138(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_137)
z(uint128) := TMP_138(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-DSTokenBase-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_132(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_132"];
}
// Function: 37088.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 37088.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 37088.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 37088.sol-ERC20-totalSupply()
digraph{
}
// Function: 37088.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 37088.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 37088.sol-kkkTokenSale-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 37088.sol-kkkTokenSale-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_355(uint256) = x + y
z(uint256) := TMP_355(uint256)
TMP_356(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_356)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_444 = UnaryType.BANG x 
CONDITION TMP_444"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 37088.sol-kkkTokenSale-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_529(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_529)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37088.sol-kkkTokenSale-canBuy(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
total <= USER_BUY_LIMIT

IRs:
TMP_454(bool) = total <= USER_BUY_LIMIT
RETURN TMP_454"];
}
// Function: 37088.sol-kkkTokenSale-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = uint128(x)) == x)

IRs:
TMP_426 = CONVERT x to uint128
z(uint128) := TMP_426(uint128)
TMP_427(bool) = z == x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_427)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_367(uint256) = x / y
z(uint256) := TMP_367(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-exec(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
exec(t,c,0)

IRs:
INTERNAL_CALL, DSExec.exec(address,bytes,uint256)(t,c,0)"];
}
// Function: 37088.sol-kkkTokenSale-exec(address,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! tryExec(target,calldata,value)

IRs:
TMP_349(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(target,calldata,value)
TMP_350 = UnaryType.BANG TMP_349 
CONDITION TMP_350"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 37088.sol-kkkTokenSale-exec(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
exec(t,c,v)

IRs:
INTERNAL_CALL, DSExec.exec(address,bytes,uint256)(t,c,v)"];
}
// Function: 37088.sol-kkkTokenSale-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->28;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! isContract(msg.sender))

IRs:
TMP_455(bool) = INTERNAL_CALL, kkkTokenSale.isContract(address)(msg.sender)
TMP_456 = UnaryType.BANG TMP_455 
TMP_457(None) = SOLIDITY_CALL require(bool)(TMP_456)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value >= 10000000000000000)

IRs:
TMP_458(bool) = msg.value >= 10000000000000000
TMP_459(None) = SOLIDITY_CALL require(bool)(TMP_458)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(tx.gasprice <= MAX_GAS_PRICE)

IRs:
TMP_460(bool) = tx.gasprice <= MAX_GAS_PRICE
TMP_461(None) = SOLIDITY_CALL require(bool)(TMP_460)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(time() >= startTime && time() < endTime)

IRs:
TMP_462(uint256) = INTERNAL_CALL, kkkTokenSale.time()()
TMP_463(bool) = TMP_462 >= startTime
TMP_464(uint256) = INTERNAL_CALL, kkkTokenSale.time()()
TMP_465(bool) = TMP_464 < endTime
TMP_466(bool) = TMP_463 && TMP_465
INTERNAL_CALL, DSAuth.assert(bool)(TMP_466)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
toFund = cast(msg.value)

IRs:
TMP_468(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(msg.value)
toFund(uint128) := TMP_468(uint128)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
requested = wmul(toFund,PUBLIC_SALE_PRICE)

IRs:
TMP_469(uint128) = INTERNAL_CALL, DSMath.wmul(uint128,uint128)(toFund,PUBLIC_SALE_PRICE)
requested(uint128) := TMP_469(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
add(sold,requested) >= SELL_HARD_LIMIT

IRs:
TMP_470(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(sold,requested)
TMP_471(bool) = TMP_470 >= SELL_HARD_LIMIT
CONDITION TMP_471"];
7->8[label="True"];
7->11[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
requested = SELL_HARD_LIMIT - sold

IRs:
TMP_472(uint128) = SELL_HARD_LIMIT - sold
requested(uint128) := TMP_472(uint128)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
toFund = wdiv(requested,PUBLIC_SALE_PRICE)

IRs:
TMP_473(uint128) = INTERNAL_CALL, DSMath.wdiv(uint128,uint128)(requested,PUBLIC_SALE_PRICE)
toFund(uint128) := TMP_473(uint128)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
endTime = time()

IRs:
TMP_474(uint256) = INTERNAL_CALL, kkkTokenSale.time()()
endTime(uint256) := TMP_474(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
totalUserBuy = add(userBuys[msg.sender],toFund)

IRs:
REF_60(uint256) -> userBuys[msg.sender]
TMP_475(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(REF_60,toFund)
totalUserBuy(uint256) := TMP_475(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
assert(canBuy(totalUserBuy))

IRs:
TMP_476(bool) = INTERNAL_CALL, kkkTokenSale.canBuy(uint256)(totalUserBuy)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_476)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
userBuys[msg.sender] = totalUserBuy

IRs:
REF_61(uint256) -> userBuys[msg.sender]
REF_61(uint256) (->userBuys) := totalUserBuy(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
sold = hadd(sold,requested)

IRs:
TMP_478(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(sold,requested)
sold(uint128) := TMP_478(uint128)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
! moreThanSoftLimit && sold >= SELL_SOFT_LIMIT

IRs:
TMP_479 = UnaryType.BANG moreThanSoftLimit 
TMP_480(bool) = sold >= SELL_SOFT_LIMIT
TMP_481(bool) = TMP_479 && TMP_480
CONDITION TMP_481"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
moreThanSoftLimit = true

IRs:
moreThanSoftLimit(bool) := True(bool)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
endTime = time() + 86400

IRs:
TMP_482(uint256) = INTERNAL_CALL, kkkTokenSale.time()()
TMP_483(uint256) = TMP_482 + 86400
endTime(uint256) := TMP_483(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
kkk.start()

IRs:
HIGH_LEVEL_CALL, dest:kkk(DSToken), function:start, arguments:[]  "];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
kkk.transfer(msg.sender,requested)

IRs:
TMP_485(bool) = HIGH_LEVEL_CALL, dest:kkk(DSToken), function:transfer, arguments:['msg.sender', 'requested']  "];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
kkk.stop()

IRs:
HIGH_LEVEL_CALL, dest:kkk(DSToken), function:stop, arguments:[]  "];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
exec(destFoundation,toFund)

IRs:
INTERNAL_CALL, DSExec.exec(address,uint256)(destFoundation,toFund)"];
23->24;
24[label="Node Type: NEW VARIABLE 24

EXPRESSION:
toReturn = sub(msg.value,toFund)

IRs:
TMP_488(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(msg.value,toFund)
toReturn(uint256) := TMP_488(uint256)"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
toReturn > 0

IRs:
TMP_489(bool) = toReturn > 0
CONDITION TMP_489"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
exec(msg.sender,toReturn)

IRs:
INTERNAL_CALL, DSExec.exec(address,uint256)(msg.sender,toReturn)"];
26->27;
27[label="Node Type: END_IF 27
"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
stoppable()

IRs:
MODIFIER_CALL, DSStop.stoppable()()"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
29->1;
}
// Function: 37088.sol-kkkTokenSale-finalize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(time() >= endTime)

IRs:
TMP_502(uint256) = INTERNAL_CALL, kkkTokenSale.time()()
TMP_503(bool) = TMP_502 >= endTime
TMP_504(None) = SOLIDITY_CALL require(bool)(TMP_503)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
kkk.start()

IRs:
HIGH_LEVEL_CALL, dest:kkk(DSToken), function:start, arguments:[]  "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
kkk.transfer(destFoundation,kkk.balanceOf(this))

IRs:
TMP_506(uint256) = HIGH_LEVEL_CALL, dest:kkk(DSToken), function:balanceOf, arguments:['this']  
TMP_507(bool) = HIGH_LEVEL_CALL, dest:kkk(DSToken), function:transfer, arguments:['destFoundation', 'TMP_506']  "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
kkk.setOwner(destFoundation)

IRs:
HIGH_LEVEL_CALL, dest:kkk(DSToken), function:setOwner, arguments:['destFoundation']  "];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
6->1;
}
// Function: 37088.sol-kkkTokenSale-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_370(uint128) = x + y
z(uint128) := TMP_370(uint128)
TMP_371(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_371)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_382(uint128) = x / y
z(uint128) := TMP_382(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_384(bool) = x >= y
CONDITION TMP_384"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_383(bool) = x <= y
CONDITION TMP_383"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_376(uint128) = x * y
z(uint128) := TMP_376(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_377(bool) = x == 0
TMP_378(uint128) = z / x
TMP_379(bool) = TMP_378 == y
TMP_380(bool) = TMP_377 || TMP_379
INTERNAL_CALL, DSAuth.assert(bool)(TMP_380)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_373(uint128) = x - y
z(uint128) := TMP_373(uint128)
TMP_374(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_374)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_386(bool) = x >= y
CONDITION TMP_386"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_385(bool) = x <= y
CONDITION TMP_385"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_438 = CONVERT this to address
TMP_439(bool) = src == TMP_438
CONDITION TMP_439"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_440(bool) = src == owner
CONDITION TMP_440"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_441 = CONVERT 0 to DSAuthority
TMP_442(bool) = authority == TMP_441
CONDITION TMP_442"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_443(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_443"];
}
// Function: 37088.sol-kkkTokenSale-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == 0

IRs:
TMP_452(bool) = _addr == 0
CONDITION TMP_452"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: END INLINE ASM 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
size > 0

IRs:
TMP_453(bool) = size > 0
RETURN TMP_453"];
}
// Function: 37088.sol-kkkTokenSale-kkkTokenSale(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
kkk = new DSToken(kkk)

IRs:
TMP_446(DSToken) = new DSToken(kkk) 
kkk(DSToken) := TMP_446(DSToken)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
destFoundation = destFoundation_

IRs:
destFoundation(address) := destFoundation_(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
startTime = startTime_

IRs:
startTime(uint256) := startTime_(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
endTime = startTime + 1209600

IRs:
TMP_447(uint256) = startTime + 1209600
endTime(uint256) := TMP_447(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
sold = soldByChannels

IRs:
sold(uint128) := soldByChannels(uint128)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
kkk.mint(TOTAL_SUPPLY)

IRs:
HIGH_LEVEL_CALL, dest:kkk(DSToken), function:mint, arguments:['TOTAL_SUPPLY']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
kkk.transfer(destFoundation,FUTURE_DISTRIBUTE_LIMIT)

IRs:
TMP_449(bool) = HIGH_LEVEL_CALL, dest:kkk(DSToken), function:transfer, arguments:['destFoundation', 'FUTURE_DISTRIBUTE_LIMIT']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
kkk.transfer(destFoundation,soldByChannels)

IRs:
TMP_450(bool) = HIGH_LEVEL_CALL, dest:kkk(DSToken), function:transfer, arguments:['destFoundation', 'soldByChannels']  "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
kkk.stop()

IRs:
HIGH_LEVEL_CALL, dest:kkk(DSToken), function:stop, arguments:[]  "];
}
// Function: 37088.sol-kkkTokenSale-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_369(bool) = x >= y
CONDITION TMP_369"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_368(bool) = x <= y
CONDITION TMP_368"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_361(uint256) = x * y
z(uint256) := TMP_361(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_362(bool) = x == 0
TMP_363(uint256) = z / x
TMP_364(bool) = TMP_363 == y
TMP_365(bool) = TMP_362 || TMP_364
INTERNAL_CALL, DSAuth.assert(bool)(TMP_365)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 37088.sol-kkkTokenSale-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_403(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_403"];
}
// Function: 37088.sol-kkkTokenSale-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_411 = CONVERT x to uint256
TMP_412(uint256) = TMP_411 * RAY
TMP_413(uint128) = y / 2
TMP_414(uint256) = TMP_412 + TMP_413
TMP_415(uint256) = TMP_414 / y
TMP_416(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_415)
z(uint128) := TMP_416(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_425(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_425"];
}
// Function: 37088.sol-kkkTokenSale-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_424(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_424"];
}
// Function: 37088.sol-kkkTokenSale-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_405 = CONVERT x to uint256
TMP_406(uint256) = TMP_405 * y
TMP_407(uint128) = RAY / 2
TMP_408(uint256) = TMP_406 + TMP_407
TMP_409(uint256) = TMP_408 / RAY
TMP_410(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_409)
z(uint128) := TMP_410(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_417(bool) = n != 0
CONDITION TMP_417"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_418(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_418(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_419(uint64) = n % 2
TMP_420(bool) = TMP_419 != 0
CONDITION TMP_420"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_421(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_421(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_422(uint64) = n % 2
TMP_423(bool) = TMP_422 != 0
CONDITION TMP_423"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_404(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_404"];
}
// Function: 37088.sol-kkkTokenSale-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37088.sol-kkkTokenSale-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 37088.sol-kkkTokenSale-setStartTime(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(time() <= startTime && time() <= startTime_)

IRs:
TMP_493(uint256) = INTERNAL_CALL, kkkTokenSale.time()()
TMP_494(bool) = TMP_493 <= startTime
TMP_495(uint256) = INTERNAL_CALL, kkkTokenSale.time()()
TMP_496(bool) = TMP_495 <= startTime_
TMP_497(bool) = TMP_494 && TMP_496
TMP_498(None) = SOLIDITY_CALL require(bool)(TMP_497)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
startTime = startTime_

IRs:
startTime(uint256) := startTime_(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
endTime = startTime + 1209600

IRs:
TMP_499(uint256) = startTime + 1209600
endTime(uint256) := TMP_499(uint256)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
5->1;
}
// Function: 37088.sol-kkkTokenSale-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_515(uint256) = 10 ** 18
WAD(uint128) := TMP_515(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_516(uint256) = 10 ** 27
RAY(uint128) := TMP_516(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
PUBLIC_SALE_PRICE = 200000000000000000000000

IRs:
PUBLIC_SALE_PRICE(uint128) := 200000000000000000000000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
TOTAL_SUPPLY = 10 ** 11 * 1000000000000000000

IRs:
TMP_517(uint256) = 10 ** 11
TMP_518(uint256) = TMP_517 * 1000000000000000000
TOTAL_SUPPLY(uint128) := TMP_518(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
SELL_SOFT_LIMIT = TOTAL_SUPPLY * 12 / 100

IRs:
TMP_519(uint128) = TOTAL_SUPPLY * 12
TMP_520(uint128) = TMP_519 / 100
SELL_SOFT_LIMIT(uint128) := TMP_520(uint128)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
SELL_HARD_LIMIT = TOTAL_SUPPLY * 16 / 100

IRs:
TMP_521(uint128) = TOTAL_SUPPLY * 16
TMP_522(uint128) = TMP_521 / 100
SELL_HARD_LIMIT(uint128) := TMP_522(uint128)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
FUTURE_DISTRIBUTE_LIMIT = TOTAL_SUPPLY * 84 / 100

IRs:
TMP_523(uint128) = TOTAL_SUPPLY * 84
TMP_524(uint128) = TMP_523 / 100
FUTURE_DISTRIBUTE_LIMIT(uint128) := TMP_524(uint128)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
USER_BUY_LIMIT = 500000000000000000000

IRs:
USER_BUY_LIMIT(uint128) := 500000000000000000000(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
MAX_GAS_PRICE = 50000000000

IRs:
MAX_GAS_PRICE(uint128) := 50000000000(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
soldByChannels = 40000 * 200000000000000000000000

IRs:
TMP_525(uint256) = 40000 * 200000000000000000000000
soldByChannels(uint128) := TMP_525(uint256)"];
}
// Function: 37088.sol-kkkTokenSale-start()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 37088.sol-kkkTokenSale-stop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stopped = true

IRs:
stopped(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->1;
}
// Function: 37088.sol-kkkTokenSale-stoppable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(! stopped)

IRs:
TMP_526 = UnaryType.BANG stopped 
INTERNAL_CALL, DSAuth.assert(bool)(TMP_526)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 37088.sol-kkkTokenSale-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_358(uint256) = x - y
z(uint256) := TMP_358(uint256)
TMP_359(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_359)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-summary()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_sold = sold

IRs:
_sold(uint128) := sold(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_startTime = startTime

IRs:
_startTime(uint256) := startTime(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_endTime = endTime

IRs:
_endTime(uint256) := endTime(uint256)"];
3->4;
4[label="Node Type: RETURN 4
"];
5[label="Node Type: RETURN 5

EXPRESSION:
(_sold,_startTime,_endTime)

IRs:
RETURN _sold,_startTime,_endTime"];
}
// Function: 37088.sol-kkkTokenSale-time()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
now

IRs:
RETURN now"];
}
// Function: 37088.sol-kkkTokenSale-transferTokens(address,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_511 = CONVERT _token to ERC20
token(ERC20) := TMP_511(ERC20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token.transfer(dst,wad)

IRs:
TMP_512(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['dst', 'wad']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
4->1;
}
// Function: 37088.sol-kkkTokenSale-tryExec(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
tryExec(t,c,0)

IRs:
TMP_353(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(t,c,0)
RETURN TMP_353"];
}
// Function: 37088.sol-kkkTokenSale-tryExec(address,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
target.call.value(value)(calldata)

IRs:
TMP_348(bool) = LOW_LEVEL_CALL, dest:target, function:call, arguments:['calldata'] value:value 
RETURN TMP_348"];
2[label="Node Type: RETURN 2

EXPRESSION:
call_ret

IRs:
RETURN call_ret"];
}
// Function: 37088.sol-kkkTokenSale-tryExec(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
tryExec(t,c,v)

IRs:
TMP_354(bool) = INTERNAL_CALL, DSExec.tryExec(address,bytes,uint256)(t,c,v)
RETURN TMP_354"];
}
// Function: 37088.sol-kkkTokenSale-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_387(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_387"];
}
// Function: 37088.sol-kkkTokenSale-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_395 = CONVERT x to uint256
TMP_396(uint256) = TMP_395 * WAD
TMP_397(uint128) = y / 2
TMP_398(uint256) = TMP_396 + TMP_397
TMP_399(uint256) = TMP_398 / y
TMP_400(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_399)
z(uint128) := TMP_400(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_402(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_402"];
}
// Function: 37088.sol-kkkTokenSale-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_401(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_401"];
}
// Function: 37088.sol-kkkTokenSale-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_389 = CONVERT x to uint256
TMP_390(uint256) = TMP_389 * y
TMP_391(uint128) = WAD / 2
TMP_392(uint256) = TMP_390 + TMP_391
TMP_393(uint256) = TMP_392 / WAD
TMP_394(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_393)
z(uint128) := TMP_394(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 37088.sol-kkkTokenSale-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_388(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_388"];
}
}
