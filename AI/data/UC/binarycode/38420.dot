digraph G {
// Function: 38420.sol-CoinDashBuyer-activate_kill_switch(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != developer && sha3()(password) != password_hash

IRs:
TMP_3(bool) = msg.sender != developer
TMP_4(bytes32) = SOLIDITY_CALL sha3()(password)
TMP_5(bool) = TMP_4 != password_hash
TMP_6(bool) = TMP_3 && TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
kill_switch = true

IRs:
kill_switch(bool) := True(bool)"];
}
// Function: 38420.sol-CoinDashBuyer-add_to_bounty()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != developer

IRs:
TMP_21(bool) = msg.sender != developer
CONDITION TMP_21"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
kill_switch

IRs:
CONDITION kill_switch"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
bought_tokens

IRs:
CONDITION bought_tokens"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
bounty += msg.value

IRs:
bounty(uint256) = bounty + msg.value"];
}
// Function: 38420.sol-CoinDashBuyer-auto_withdraw(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! bought_tokens || now < time_bought + 3600

IRs:
TMP_16 = UnaryType.BANG bought_tokens 
TMP_17(uint256) = time_bought + 3600
TMP_18(bool) = now < TMP_17
TMP_19(bool) = TMP_16 || TMP_18
CONDITION TMP_19"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
withdraw(user,true)

IRs:
INTERNAL_CALL, CoinDashBuyer.withdraw(address,bool)(user,True)"];
}
// Function: 38420.sol-CoinDashBuyer-claim_bounty()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
bought_tokens

IRs:
CONDITION bought_tokens"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
kill_switch

IRs:
CONDITION kill_switch"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
now < earliest_buy_time

IRs:
TMP_22(bool) = now < earliest_buy_time
CONDITION TMP_22"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
sale == 0x0

IRs:
TMP_23(bool) = sale == 0
CONDITION TMP_23"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: THROW 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
bought_tokens = true

IRs:
bought_tokens(bool) := True(bool)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
time_bought = now

IRs:
time_bought(uint256) := now(uint256)"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
! sale.call.value(this.balance - bounty)()

IRs:
REF_9(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_24([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7feef8a03790>]) = REF_9 - bounty
TMP_26(bool) = LOW_LEVEL_CALL, dest:sale, function:call, arguments:[] value:TMP_24 
TMP_27 = UnaryType.BANG TMP_26 
CONDITION TMP_27"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: THROW 16
"];
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
msg.sender.transfer(bounty)

IRs:
Transfer dest:msg.sender value:bounty"];
}
// Function: 38420.sol-CoinDashBuyer-default_helper()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.value <= 1000000000000000

IRs:
TMP_29(bool) = msg.value <= 1000000000000000
CONDITION TMP_29"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
withdraw(msg.sender,false)

IRs:
INTERNAL_CALL, CoinDashBuyer.withdraw(address,bool)(msg.sender,False)"];
2->10;
3[label="Node Type: IF 3

EXPRESSION:
kill_switch

IRs:
CONDITION kill_switch"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: THROW 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
bought_tokens

IRs:
CONDITION bought_tokens"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: THROW 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_11(uint256) -> balances[msg.sender]
REF_11(-> balances) = REF_11 + msg.value"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 38420.sol-CoinDashBuyer-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
default_helper()

IRs:
INTERNAL_CALL, CoinDashBuyer.default_helper()()"];
}
// Function: 38420.sol-CoinDashBuyer-set_addresses(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != developer

IRs:
TMP_0(bool) = msg.sender != developer
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sale != 0x0

IRs:
TMP_1(bool) = sale != 0
CONDITION TMP_1"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sale = _sale

IRs:
sale(address) := _sale(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_2 = CONVERT _token to ERC20
token(ERC20) := TMP_2(ERC20)"];
}
// Function: 38420.sol-CoinDashBuyer-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
tokens_per_eth = 6093

IRs:
tokens_per_eth(uint256) := 6093(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
password_hash = 0x1b266c9bad3a46ed40bf43471d89b83712ed06c2250887c457f5f21f17b2eb97

IRs:
password_hash(bytes32) := 12280336685849958129507483730474531371837204598870480974335290981002981338007(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
earliest_buy_time = 1500294600

IRs:
earliest_buy_time(uint256) := 1500294600(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
developer = 0x000Fb8369677b3065dE5821a86Bc9551d5e5EAb9

IRs:
developer(address) := 350558413842930712833660074828852490534251193(address)"];
}
// Function: 38420.sol-CoinDashBuyer-withdraw(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! bought_tokens

IRs:
TMP_7 = UnaryType.BANG bought_tokens 
CONDITION TMP_7"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
eth_to_withdraw = balances[user]

IRs:
REF_0(uint256) -> balances[user]
eth_to_withdraw(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[user] = 0

IRs:
REF_1(uint256) -> balances[user]
REF_1(uint256) (->balances) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
user.transfer(eth_to_withdraw)

IRs:
Transfer dest:user value:eth_to_withdraw"];
4->17;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
tokens_to_withdraw = balances[user] * tokens_per_eth

IRs:
REF_3(uint256) -> balances[user]
TMP_9(uint256) = REF_3 * tokens_per_eth
tokens_to_withdraw(uint256) := TMP_9(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[user] = 0

IRs:
REF_4(uint256) -> balances[user]
REF_4(uint256) (->balances) := 0(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
fee = 0

IRs:
fee(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
has_fee

IRs:
CONDITION has_fee"];
8->9[label="True"];
8->13[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
fee = tokens_to_withdraw / 100

IRs:
TMP_10(uint256) = tokens_to_withdraw / 100
fee(uint256) := TMP_10(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
! token.transfer(developer,fee)

IRs:
TMP_11(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['developer', 'fee']  
TMP_12 = UnaryType.BANG TMP_11 
CONDITION TMP_12"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: THROW 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! token.transfer(user,tokens_to_withdraw - fee)

IRs:
TMP_13(uint256) = tokens_to_withdraw - fee
TMP_14(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['user', 'TMP_13']  
TMP_15 = UnaryType.BANG TMP_14 
CONDITION TMP_15"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
}
// Function: 38420.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 38420.sol-ERC20-transfer(address,uint256)
digraph{
}
}
