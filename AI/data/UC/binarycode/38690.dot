digraph G {
// Function: 38690.sol-Interface-allowance(address,address)
digraph{
}
// Function: 38690.sol-Interface-approve(address,uint256)
digraph{
}
// Function: 38690.sol-Interface-approveByAddress(address,address,uint256)
digraph{
}
// Function: 38690.sol-Interface-approveFactoryContract(address,bool)
digraph{
}
// Function: 38690.sol-Interface-approveIndexed(address,uint256)
digraph{
}
// Function: 38690.sol-Interface-approveIndexedByAddress(address,address,uint256)
digraph{
}
// Function: 38690.sol-Interface-balanceOf(address)
digraph{
}
// Function: 38690.sol-Interface-burn(uint256)
digraph{
}
// Function: 38690.sol-Interface-burnByAddress(address,uint256)
digraph{
}
// Function: 38690.sol-Interface-burnFrom(address,uint256)
digraph{
}
// Function: 38690.sol-Interface-burnFromByAddress(address,uint256,address)
digraph{
}
// Function: 38690.sol-Interface-burnIndexed(uint256)
digraph{
}
// Function: 38690.sol-Interface-burnIndexedByAddress(address,uint256)
digraph{
}
// Function: 38690.sol-Interface-burnIndexedFrom(address,uint256)
digraph{
}
// Function: 38690.sol-Interface-burnIndexedFromByAddress(address,address,uint256)
digraph{
}
// Function: 38690.sol-Interface-cancelIndexedSale()
digraph{
}
// Function: 38690.sol-Interface-cancelIndexedSaleByAddress(address)
digraph{
}
// Function: 38690.sol-Interface-cancelSale()
digraph{
}
// Function: 38690.sol-Interface-cancelSaleByAddress(address)
digraph{
}
// Function: 38690.sol-Interface-changeOwner(address)
digraph{
}
// Function: 38690.sol-Interface-fillBid()
digraph{
}
// Function: 38690.sol-Interface-fillBidByAddress(address)
digraph{
}
// Function: 38690.sol-Interface-fillIndexedBid(uint256)
digraph{
}
// Function: 38690.sol-Interface-fillIndexedBidByAddress(address,uint256)
digraph{
}
// Function: 38690.sol-Interface-isFactoryApproved(address)
digraph{
}
// Function: 38690.sol-Interface-isSHA256HashRegistered(bytes32)
digraph{
}
// Function: 38690.sol-Interface-issuePatrons(address,uint256)
digraph{
}
// Function: 38690.sol-Interface-offerIndexedPieceForSale(uint256,uint256)
digraph{
}
// Function: 38690.sol-Interface-offerIndexedPieceForSaleByAddress(address,uint256,uint256)
digraph{
}
// Function: 38690.sol-Interface-offerPieceForSale(uint256)
digraph{
}
// Function: 38690.sol-Interface-offerPieceForSaleByAddress(address,uint256)
digraph{
}
// Function: 38690.sol-Interface-registerArtwork(address,bytes32,uint256,string,string,uint256,address,bool,bool)
digraph{
}
// Function: 38690.sol-Interface-totalSupply()
digraph{
}
// Function: 38690.sol-Interface-transfer(address,uint256)
digraph{
}
// Function: 38690.sol-Interface-transferByAddress(address,uint256,address)
digraph{
}
// Function: 38690.sol-Interface-transferFrom(address,address,uint256)
digraph{
}
// Function: 38690.sol-Interface-transferFromIndexed(address,address,uint256)
digraph{
}
// Function: 38690.sol-Interface-transferIndexed(address,uint256)
digraph{
}
// Function: 38690.sol-Interface-transferIndexedByAddress(address,uint256,address)
digraph{
}
// Function: 38690.sol-Registrar-Registrar()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
donationMultiplier = 100

IRs:
donationMultiplier(uint256) := 100(uint256)"];
}
// Function: 38690.sol-Registrar-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_17(mapping(address => uint256)) -> allowed[_owner]
REF_18(uint256) -> REF_17[_spender]
RETURN REF_18"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 38690.sol-Registrar-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _amount

IRs:
REF_15(mapping(address => uint256)) -> allowed[msg.sender]
REF_16(uint256) -> REF_15[_spender]
REF_16(uint256) (->allowed) := _amount(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_amount)

IRs:
Emit Approval(msg.sender,_spender,_amount)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 38690.sol-Registrar-approveByAddress(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_51 = CONVERT _contract to Interface
c(Interface) := TMP_51(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.approve(_spender,_amount)

IRs:
TMP_52(bool) = HIGH_LEVEL_CALL, dest:c(Interface), function:approve, arguments:['_spender', '_amount']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-approveFactoryContract(address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
approvedFactories[_factoryContractAddress] = _approved

IRs:
REF_61(bool) -> approvedFactories[_factoryContractAddress]
REF_61(bool) (->approvedFactories) := _approved(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
2->1;
}
// Function: 38690.sol-Registrar-approveIndexedByAddress(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_54 = CONVERT _contract to Interface
c(Interface) := TMP_54(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.approveIndexed(_spender,_index)

IRs:
TMP_55(bool) = HIGH_LEVEL_CALL, dest:c(Interface), function:approveIndexed, arguments:['_spender', '_index']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-approvedContractsOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(approvedContracts[msg.sender])

IRs:
REF_82(bool) -> approvedContracts[msg.sender]
TMP_96(None) = SOLIDITY_CALL require(bool)(REF_82)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38690.sol-Registrar-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_0(uint256) -> balances[_owner]
RETURN REF_0"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 38690.sol-Registrar-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _amount

IRs:
REF_19(uint256) -> balances[msg.sender]
TMP_21(bool) = REF_19 >= _amount
CONDITION TMP_21"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _amount

IRs:
REF_20(uint256) -> balances[msg.sender]
REF_20(-> balances) = REF_20 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalPatronSupply -= _amount

IRs:
_totalPatronSupply(uint256) = _totalPatronSupply - _amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(msg.sender,_amount)

IRs:
Emit Burn(msg.sender,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: THROW 6
"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 38690.sol-Registrar-burnByAddress(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_57 = CONVERT _contract to Interface
c(Interface) := TMP_57(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.burn(_amount)

IRs:
TMP_58(bool) = HIGH_LEVEL_CALL, dest:c(Interface), function:burn, arguments:['_amount']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-burnFrom(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _value && allowed[_from][msg.sender] >= _value

IRs:
REF_21(uint256) -> balances[_from]
TMP_23(bool) = REF_21 >= _value
REF_22(mapping(address => uint256)) -> allowed[_from]
REF_23(uint256) -> REF_22[msg.sender]
TMP_24(bool) = REF_23 >= _value
TMP_25(bool) = TMP_23 && TMP_24
CONDITION TMP_25"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_from] -= _value

IRs:
REF_24(uint256) -> balances[_from]
REF_24(-> balances) = REF_24 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
REF_26(-> allowed) = REF_26 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalPatronSupply -= _value

IRs:
_totalPatronSupply(uint256) = _totalPatronSupply - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from,_value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: THROW 7
"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 38690.sol-Registrar-burnFromByAddress(address,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_60 = CONVERT _contract to Interface
c(Interface) := TMP_60(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.burnFrom(_from,_amount)

IRs:
TMP_61(bool) = HIGH_LEVEL_CALL, dest:c(Interface), function:burnFrom, arguments:['_from', '_amount']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-burnIndexedByAddress(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_63 = CONVERT _contract to Interface
c(Interface) := TMP_63(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.burnIndexed(_index)

IRs:
HIGH_LEVEL_CALL, dest:c(Interface), function:burnIndexed, arguments:['_index']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-burnIndexedFromByAddress(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_66 = CONVERT _contract to Interface
c(Interface) := TMP_66(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.burnIndexedFrom(_from,_index)

IRs:
HIGH_LEVEL_CALL, dest:c(Interface), function:burnIndexedFrom, arguments:['_from', '_index']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-callContractFunctionByAddress(address,string,address,address,uint256,uint256,bool,string,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
! _contract.call(bytes4(sha3()(functionNameAndTypes)),_address1,_address2,_value1,_value2,_bool,_string,_bytes32)

IRs:
TMP_88(bytes32) = SOLIDITY_CALL sha3()(functionNameAndTypes)
TMP_89 = CONVERT TMP_88 to bytes4
TMP_90(bool) = LOW_LEVEL_CALL, dest:_contract, function:call, arguments:['TMP_89', '_address1', '_address2', '_value1', '_value2', '_bool', '_string', '_bytes32']  
TMP_91 = UnaryType.BANG TMP_90 
CONDITION TMP_91"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
4->1;
}
// Function: 38690.sol-Registrar-cancelIndexedSaleByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_84 = CONVERT _contract to Interface
c(Interface) := TMP_84(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.cancelIndexedSale()

IRs:
HIGH_LEVEL_CALL, dest:c(Interface), function:cancelIndexedSale, arguments:[]  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-cancelSaleByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_75 = CONVERT _contract to Interface
c(Interface) := TMP_75(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.cancelSale()

IRs:
HIGH_LEVEL_CALL, dest:c(Interface), function:cancelSale, arguments:[]  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
2->1;
}
// Function: 38690.sol-Registrar-donate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] += msg.value * donationMultiplier

IRs:
REF_31(uint256) -> balances[msg.sender]
TMP_33(uint256) = msg.value * donationMultiplier
REF_31(-> balances) = REF_31 + TMP_33"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_totalPatronSupply += msg.value * donationMultiplier

IRs:
TMP_34(uint256) = msg.value * donationMultiplier
_totalPatronSupply(uint256) = _totalPatronSupply + TMP_34"];
}
// Function: 38690.sol-Registrar-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! approvedContracts[msg.sender]

IRs:
REF_79(bool) -> approvedContracts[msg.sender]
TMP_87 = UnaryType.BANG REF_79 
CONDITION TMP_87"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 38690.sol-Registrar-fillBidByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_72 = CONVERT _contract to Interface
c(Interface) := TMP_72(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.fillBid()

IRs:
HIGH_LEVEL_CALL, dest:c(Interface), function:fillBid, arguments:[]  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-fillIndexedBidByAddress(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_81 = CONVERT _contract to Interface
c(Interface) := TMP_81(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.fillIndexedBid(_index)

IRs:
HIGH_LEVEL_CALL, dest:c(Interface), function:fillIndexedBid, arguments:['_index']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-isFactoryApproved(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
approvedFactories[_factory]

IRs:
REF_62(bool) -> approvedFactories[_factory]
CONDITION REF_62"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
5[label="Node Type: RETURN 5

EXPRESSION:
_approved

IRs:
RETURN _approved"];
}
// Function: 38690.sol-Registrar-isSHA256HashRegistered(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
SHA256HashRegister[_SHA256Hash] == 0x0

IRs:
REF_60(address) -> SHA256HashRegister[_SHA256Hash]
TMP_40(bool) = REF_60 == 0
CONDITION TMP_40"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
_registered

IRs:
RETURN _registered"];
}
// Function: 38690.sol-Registrar-issuePatrons(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[_to] += _amount

IRs:
REF_30(uint256) -> balances[_to]
REF_30(-> balances) = REF_30 + _amount"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_totalPatronSupply += _amount

IRs:
_totalPatronSupply(uint256) = _totalPatronSupply + _amount"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
approvedContractsOnly()

IRs:
MODIFIER_CALL, Registrar.approvedContractsOnly()()"];
3->1;
}
// Function: 38690.sol-Registrar-offerIndexedPieceForSaleByAddress(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_78 = CONVERT _contract to Interface
c(Interface) := TMP_78(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.offerIndexedPieceForSale(_index,_price)

IRs:
HIGH_LEVEL_CALL, dest:c(Interface), function:offerIndexedPieceForSale, arguments:['_index', '_price']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-offerPieceForSaleByAddress(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_69 = CONVERT _contract to Interface
c(Interface) := TMP_69(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.offerPieceForSale(_price)

IRs:
HIGH_LEVEL_CALL, dest:c(Interface), function:offerPieceForSale, arguments:['_price']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-onlyBy(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == _account)

IRs:
TMP_93(bool) = msg.sender == _account
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38690.sol-Registrar-registerArtwork(address,bytes32,uint256,string,string,uint256,address,bool,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: IF 1

EXPRESSION:
SHA256HashRegister[_SHA256Hash] == 0x0

IRs:
REF_32(address) -> SHA256HashRegister[_SHA256Hash]
TMP_35(bool) = REF_32 == 0
CONDITION TMP_35"];
1->2[label="True"];
1->20[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
SHA256HashRegister[_SHA256Hash] = _contract

IRs:
REF_33(address) -> SHA256HashRegister[_SHA256Hash]
REF_33(address) (->SHA256HashRegister) := _contract(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
approvedContracts[_contract] = true

IRs:
REF_34(bool) -> approvedContracts[_contract]
REF_34(bool) (->approvedContracts) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
cantSetReferrer[_artist] = true

IRs:
REF_35(bool) -> cantSetReferrer[_artist]
REF_35(bool) (->cantSetReferrer) := True(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
artworkRegister[_contract].SHA256Hash = _SHA256Hash

IRs:
REF_36(Registrar.artwork) -> artworkRegister[_contract]
REF_37(bytes32) -> REF_36.SHA256Hash
REF_37(bytes32) (->artworkRegister) := _SHA256Hash(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
artworkRegister[_contract].editionSize = _editionSize

IRs:
REF_38(Registrar.artwork) -> artworkRegister[_contract]
REF_39(uint256) -> REF_38.editionSize
REF_39(uint256) (->artworkRegister) := _editionSize(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
artworkRegister[_contract].title = _title

IRs:
REF_40(Registrar.artwork) -> artworkRegister[_contract]
REF_41(string) -> REF_40.title
REF_41(string) (->artworkRegister) := _title(string)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
artworkRegister[_contract].fileLink = _fileLink

IRs:
REF_42(Registrar.artwork) -> artworkRegister[_contract]
REF_43(string) -> REF_42.fileLink
REF_43(string) (->artworkRegister) := _fileLink(string)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
artworkRegister[_contract].ownerCommission = _ownerCommission

IRs:
REF_44(Registrar.artwork) -> artworkRegister[_contract]
REF_45(uint256) -> REF_44.ownerCommission
REF_45(uint256) (->artworkRegister) := _ownerCommission(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
artworkRegister[_contract].artist = _artist

IRs:
REF_46(Registrar.artwork) -> artworkRegister[_contract]
REF_47(address) -> REF_46.artist
REF_47(address) (->artworkRegister) := _artist(address)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
artworkRegister[_contract].factory = msg.sender

IRs:
REF_48(Registrar.artwork) -> artworkRegister[_contract]
REF_49(address) -> REF_48.factory
REF_49(address) (->artworkRegister) := msg.sender(address)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
artworkRegister[_contract].isIndexed = _indexed

IRs:
REF_50(Registrar.artwork) -> artworkRegister[_contract]
REF_51(bool) -> REF_50.isIndexed
REF_51(bool) (->artworkRegister) := _indexed(bool)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
artworkRegister[_contract].isOuroboros = _ouroboros

IRs:
REF_52(Registrar.artwork) -> artworkRegister[_contract]
REF_53(bool) -> REF_52.isOuroboros
REF_53(bool) (->artworkRegister) := _ouroboros(bool)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
artworkIndex[artworkCount] = _contract

IRs:
REF_54(address) -> artworkIndex[artworkCount]
REF_54(address) (->artworkIndex) := _contract(address)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
artistsArtworks[_artist][artistsArtworkCount[_artist]] = _contract

IRs:
REF_55(mapping(uint256 => address)) -> artistsArtworks[_artist]
REF_56(uint256) -> artistsArtworkCount[_artist]
REF_57(address) -> REF_55[REF_56]
REF_57(address) (->artistsArtworks) := _contract(address)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
artistsArtworkCount[_artist] ++

IRs:
REF_58(uint256) -> artistsArtworkCount[_artist]
TMP_36(uint256) := REF_58(uint256)
REF_58(-> artistsArtworkCount) = REF_58 + 1"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
artworksFactory[_contract] = msg.sender

IRs:
REF_59(address) -> artworksFactory[_contract]
REF_59(address) (->artworksFactory) := msg.sender(address)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
NewArtwork(_contract,_SHA256Hash,_editionSize,_title,_fileLink,_ownerCommission,_artist,_indexed,_ouroboros)

IRs:
Emit NewArtwork(_contract,_SHA256Hash,_editionSize,_title,_fileLink,_ownerCommission,_artist,_indexed,_ouroboros)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
artworkCount ++

IRs:
TMP_38(uint256) := artworkCount(uint256)
artworkCount(uint256) = artworkCount + 1"];
19->21;
20[label="Node Type: THROW 20
"];
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
registerdFactoriesOnly()

IRs:
MODIFIER_CALL, Registrar.registerdFactoriesOnly()()"];
22->1;
}
// Function: 38690.sol-Registrar-registerdFactoriesOnly()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(approvedFactories[msg.sender])

IRs:
REF_81(bool) -> approvedFactories[msg.sender]
TMP_95(None) = SOLIDITY_CALL require(bool)(REF_81)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38690.sol-Registrar-setDonationReward(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
donationMultiplier = _multiplier

IRs:
donationMultiplier(uint256) := _multiplier(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
2->1;
}
// Function: 38690.sol-Registrar-setReferrer(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
referred[msg.sender] == 0x0 && ! cantSetReferrer[msg.sender]

IRs:
REF_27(address) -> referred[msg.sender]
TMP_27(bool) = REF_27 == 0
REF_28(bool) -> cantSetReferrer[msg.sender]
TMP_28 = UnaryType.BANG REF_28 
TMP_29(bool) = TMP_27 && TMP_28
CONDITION TMP_29"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
referred[msg.sender] = _referrer

IRs:
REF_29(address) -> referred[msg.sender]
REF_29(address) (->referred) := _referrer(address)"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 38690.sol-Registrar-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
symbol = ART

IRs:
symbol(string) := ART(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
name = Patron - Ethart Network Token

IRs:
name(string) := Patron - Ethart Network Token(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 18

IRs:
decimals(uint8) := 18(uint256)"];
}
// Function: 38690.sol-Registrar-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalPatronSupply = _totalPatronSupply

IRs:
totalPatronSupply(uint256) := _totalPatronSupply(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
totalPatronSupply

IRs:
RETURN totalPatronSupply"];
}
// Function: 38690.sol-Registrar-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to] && _to != 0x0

IRs:
REF_1(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_1 >= _amount
TMP_1(bool) = _amount > 0
TMP_2(bool) = TMP_0 && TMP_1
REF_2(uint256) -> balances[_to]
TMP_3(uint256) = REF_2 + _amount
REF_3(uint256) -> balances[_to]
TMP_4(bool) = TMP_3 > REF_3
TMP_5(bool) = TMP_2 && TMP_4
TMP_6(bool) = _to != 0
TMP_7(bool) = TMP_5 && TMP_6
CONDITION TMP_7"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _amount

IRs:
REF_4(uint256) -> balances[msg.sender]
REF_4(-> balances) = REF_4 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _amount

IRs:
REF_5(uint256) -> balances[_to]
REF_5(-> balances) = REF_5 + _amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 38690.sol-Registrar-transferByAddress(address,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_45 = CONVERT _contract to Interface
c(Interface) := TMP_45(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.transfer(_to,_amount)

IRs:
TMP_46(bool) = HIGH_LEVEL_CALL, dest:c(Interface), function:transfer, arguments:['_to', '_amount']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to] && _to != 0x0

IRs:
REF_6(uint256) -> balances[_from]
TMP_9(bool) = REF_6 >= _amount
REF_7(mapping(address => uint256)) -> allowed[_from]
REF_8(uint256) -> REF_7[msg.sender]
TMP_10(bool) = REF_8 >= _amount
TMP_11(bool) = TMP_9 && TMP_10
TMP_12(bool) = _amount > 0
TMP_13(bool) = TMP_11 && TMP_12
REF_9(uint256) -> balances[_to]
TMP_14(uint256) = REF_9 + _amount
REF_10(uint256) -> balances[_to]
TMP_15(bool) = TMP_14 > REF_10
TMP_16(bool) = TMP_13 && TMP_15
TMP_17(bool) = _to != 0
TMP_18(bool) = TMP_16 && TMP_17
CONDITION TMP_18"];
1->2[label="True"];
1->7[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_from] -= _amount

IRs:
REF_11(uint256) -> balances[_from]
REF_11(-> balances) = REF_11 - _amount"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[_from][msg.sender] -= _amount

IRs:
REF_12(mapping(address => uint256)) -> allowed[_from]
REF_13(uint256) -> REF_12[msg.sender]
REF_13(-> allowed) = REF_13 - _amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] += _amount

IRs:
REF_14(uint256) -> balances[_to]
REF_14(-> balances) = REF_14 + _amount"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_amount)

IRs:
Emit Transfer(_from,_to,_amount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 38690.sol-Registrar-transferIndexedByAddress(address,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = Interface(_contract)

IRs:
TMP_48 = CONVERT _contract to Interface
c(Interface) := TMP_48(Interface)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
c.transferIndexed(_to,_index)

IRs:
TMP_49(bool) = HIGH_LEVEL_CALL, dest:c(Interface), function:transferIndexed, arguments:['_to', '_index']  "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
3->1;
}
// Function: 38690.sol-Registrar-withdrawFunds(uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
this.balance >= _ETHAmount

IRs:
REF_63(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_42(bool) = REF_63 >= _ETHAmount
CONDITION TMP_42"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_to.transfer(_ETHAmount)

IRs:
Transfer dest:_to value:_ETHAmount"];
2->4;
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyBy(owner)

IRs:
MODIFIER_CALL, Registrar.onlyBy(address)(owner)"];
5->1;
}
}
